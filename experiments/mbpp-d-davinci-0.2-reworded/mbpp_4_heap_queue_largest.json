{
  "name": "mbpp_4_heap_queue_largest",
  "language": "d",
  "prompt": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given array of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_4_heap_queue_largest.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[nums.length];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\t\n\t\t\tif(heap_size == n)\n\t\t\t{\n\t\t\t\theap_build(heap, heap_size);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, 0, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach_reverse(i; 0 .. heap_size)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[nums.length];\n\tlong heap_size = 0;\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size - 1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, 0, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach_reverse(i; 0 .. heap_size)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0, heap_size);\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size - 1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, 0, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach_reverse(i; 0 .. heap_size)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_insert(heap, heap_size);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_insert(heap, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. n)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_insert(heap, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size-1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, 0, heap_size-1);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach_reverse(i; 0..heap_size)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size-1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0, heap_size-1);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size - 1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, 0, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. heap_size)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\t\n\tif(nums.length == 0)\n\t\treturn result;\n\t\n\tif(nums.length < n)\n\t\tn = nums.length;\n\t\n\tlong[] heap = new long[n];\n\t\n\tfor(long i = 0; i < n; i++)\n\t\theap[i] = nums[i];\n\t\n\tfor(long i = n / 2; i >= 0; i--)\n\t\theapify(heap, i, n);\n\t\n\tfor(long i = n; i < nums.length; i++)\n\t{\n\t\tif(nums[i] > heap[0])\n\t\t{\n\t\t\theap[0] = nums[i];\n\t\t\theapify(heap, 0, n);\n\t\t}\n\t}\n\t\n\tfor(long i = 0; i < n; i++)\n\t\tresult[i] = heap[i];\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[nums.length];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theapify_up(heap, heap_size - 1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theapify_down(heap, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theapify_down(heap, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theapify_up(heap, heap_size);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theapify_down(heap, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. n)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theapify_down(heap, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[nums.length];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size-1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, 0, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. n)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size-1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[nums.length];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theapify_up(heap, heap_size);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theapify_down(heap, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; 0..n)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size-1];\n\t\theap_size--;\n\t\theapify_down(heap, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size-1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, 0, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size-1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\t\n\tif (nums.length == 0)\n\t\treturn result;\n\t\n\tlong[] heap = new long[nums.length];\n\t\n\tfor (long i = 0; i < nums.length; i++)\n\t{\n\t\theap[i] = nums[i];\n\t\t\n\t\tlong j = i;\n\t\t\n\t\twhile (j > 0 && heap[(j - 1) / 2] < heap[j])\n\t\t{\n\t\t\tlong temp = heap[(j - 1) / 2];\n\t\t\theap[(j - 1) / 2] = heap[j];\n\t\t\theap[j] = temp;\n\t\t\t\n\t\t\tj = (j - 1) / 2;\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tresult[i] = heap[0];\n\t\t\n\t\theap[0] = heap[heap.length - 1 - i];\n\t\t\n\t\tlong j = 0;\n\t\t\n\t\twhile (true)\n\t\t{\n\t\t\tlong left = 2 * j + 1;\n\t\t\tlong right = 2 * j + 2;\n\t\t\tlong largest = j;\n\t\t\t\n\t\t\tif (left < heap.length - i && heap[left] > heap[largest])\n\t\t\t\tlargest = left;\n\t\t\t\n\t\t\tif (right < heap.length - i && heap[right] > heap[largest])\n\t\t\t\tlargest = right;\n\t\t\t\n\t\t\tif (largest != j)\n\t\t\t{\n\t\t\t\tlong temp = heap[j];\n\t\t\t\theap[j] = heap[largest];\n\t\t\t\theap[largest] = temp;\n\t\t\t\t\n\t\t\t\tj = largest;\n\t\t\t}\n\t\t\telse\n\t\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\theap[i] = nums[i];\n\t}\n\t\n\tfor(long i = n / 2; i >= 0; i--)\n\t{\n\t\theapify(heap, i, n);\n\t}\n\t\n\tfor(long i = n; i < nums.length; i++)\n\t{\n\t\tif(nums[i] > heap[0])\n\t\t{\n\t\t\theap[0] = nums[i];\n\t\t\theapify(heap, 0, n);\n\t\t}\n\t}\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tresult[i] = heap[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size-1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, 0, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach_reverse(i; 0..n)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size-1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0, heap_size);\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\theap[i] = nums[i];\n\t}\n\t\n\tfor (long i = n/2; i >= 0; i--)\n\t{\n\t\theapify(heap, i, n);\n\t}\n\t\n\tfor (long i = n; i < nums.length; i++)\n\t{\n\t\tif (nums[i] > heap[0])\n\t\t{\n\t\t\theap[0] = nums[i];\n\t\t\theapify(heap, 0, n);\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tresult[i] = heap[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theapify_up(heap, heap_size);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theapify_down(heap, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. n)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theapify_down(heap, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\theap[i] = nums[i];\n\t}\n\t\n\tfor (long i = n / 2; i >= 0; i--)\n\t{\n\t\theapify(heap, i, n);\n\t}\n\t\n\tfor (long i = n; i < nums.length; i++)\n\t{\n\t\tif (nums[i] > heap[0])\n\t\t{\n\t\t\theap[0] = nums[i];\n\t\t\theapify(heap, 0, n);\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tresult[i] = heap[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\t\n\tif (nums.length == 0)\n\t\treturn result;\n\t\n\tlong[] heap = new long[nums.length];\n\tlong heap_size = 0;\n\t\n\tforeach (num; nums)\n\t{\n\t\tif (heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\t\n\t\t\tif (heap_size == n)\n\t\t\t{\n\t\t\t\theap_build(heap, heap_size);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, heap_size, 0);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach_reverse (i; 0 .. heap_size)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap_sift_down(heap, heap_size, 0);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\t\n\tif (nums.length < n)\n\t\treturn result;\n\t\n\t// create a heap queue\n\tstd.priority_queue!(long)(nums[], std.less!(long));\n\t\n\t// pop the largest n numbers\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tresult[i] = nums.front;\n\t\tnums.pop_front();\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result;\n\tlong[] heap;\n\tlong i;\n\tlong j;\n\tlong temp;\n\tlong temp2;\n\t\n\tresult = new long[n];\n\theap = new long[n];\n\t\n\tfor (i = 0; i < n; i++)\n\t{\n\t\theap[i] = nums[i];\n\t}\n\t\n\tfor (i = 0; i < n; i++)\n\t{\n\t\tfor (j = i; j < n; j++)\n\t\t{\n\t\t\tif (heap[j] > heap[i])\n\t\t\t{\n\t\t\t\ttemp = heap[i];\n\t\t\t\theap[i] = heap[j];\n\t\t\t\theap[j] = temp;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor (i = n; i < nums.length; i++)\n\t{\n\t\tif (nums[i] > heap[0])\n\t\t{\n\t\t\theap[0] = nums[i];\n\t\t\tfor (j = 0; j < n; j++)\n\t\t\t{\n\t\t\t\tif (heap[j] > heap[0])\n\t\t\t\t{\n\t\t\t\t\ttemp = heap[0];\n\t\t\t\t\theap[0] = heap[j];\n\t\t\t\t\theap[j] = temp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor (i = 0; i < n; i++)\n\t{\n\t\tresult[i] = heap[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size - 1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, 0, heap_size - 1);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. heap_size)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap_swap(heap, 0, heap_size - 1);\n\t\theap_size--;\n\t\theap_sift_down(heap, 0, heap_size - 1);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theapify_up(heap, heap_size);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theapify_down(heap, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. heap_size)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theapify_down(heap, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size - 1);\n\t\t}\n\t\telse if(num > heap[0])\n\t\t{\n\t\t\theap[0] = num;\n\t\t\theap_sift_down(heap, 0, heap_size);\n\t\t}\n\t}\n\t\n\tfor(long i = n - 1; i >= 0; i--)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size-1);\n\t\t}\n\t\telse if(num > heap[0])\n\t\t{\n\t\t\theap[0] = num;\n\t\t\theap_sift_down(heap, 0, heap_size);\n\t\t}\n\t}\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size-1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tif(heap_size < n)\n\t{\n\t\treturn [];\n\t}\n\t\n\theap_size = n;\n\t\n\t//heapify\n\tfor(long i = heap_size / 2 - 1; i >= 0; i--)\n\t{\n\t\theapify(heap, heap_size, i);\n\t}\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theapify(heap, heap_size, 0);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size - 1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, 0, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. heap_size)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\t\n\t\t\tif(heap_size == n)\n\t\t\t{\n\t\t\t\theap_build(heap, heap_size);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, heap_size, 0);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach_reverse(i; 0 .. heap_size)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_sift_down(heap, heap_size, 0);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size - 1);\n\t\t}\n\t\telse if(num > heap[0])\n\t\t{\n\t\t\theap[0] = num;\n\t\t\theap_sift_down(heap, 0, heap_size);\n\t\t}\n\t}\n\t\n\tforeach(i, j; 0 .. heap_size)\n\t{\n\t\tresult[j] = heap[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\t\n\tif (nums.length == 0)\n\t\treturn result;\n\t\n\tif (nums.length < n)\n\t\tn = nums.length;\n\t\n\t// Create a heap of size n\n\tlong[] heap = new long[n];\n\t\n\t// Initialize the heap with the first n elements of the array\n\tfor (long i = 0; i < n; i++)\n\t\theap[i] = nums[i];\n\t\n\t// Heapify the heap\n\tfor (long i = n / 2 - 1; i >= 0; i--)\n\t\theapify(heap, n, i);\n\t\n\t// Iterate through the rest of the array\n\tfor (long i = n; i < nums.length; i++)\n\t{\n\t\t// If the current element is larger than the root of the heap, replace the root with the current element\n\t\tif (nums[i] > heap[0])\n\t\t{\n\t\t\theap[0] = nums[i];\n\t\t\theapify(heap, n, 0);\n\t\t}\n\t}\n\t\n\t// Copy the heap into the result array\n\tfor (long i = 0; i < n; i++)\n\t\tresult[i] = heap[i];\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theapify_up(heap, heap_size-1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theapify_down(heap, 0, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; 0..n)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size-1];\n\t\theap_size--;\n\t\theapify_down(heap, 0, heap_size);\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif (heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size - 1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, 0, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach_reverse(i; 0 .. heap_size)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theapify_up(heap, heap_size);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theapify_down(heap, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach_reverse(i; 0..n)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size-1];\n\t\theap_size--;\n\t\theapify_down(heap, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size-1);\n\t\t}\n\t\telse if(num > heap[0])\n\t\t{\n\t\t\theap[0] = num;\n\t\t\theap_sift_down(heap, 0, heap_size-1);\n\t\t}\n\t}\n\t\n\tforeach_reverse(i; 0 .. heap_size)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size-1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0, heap_size-1);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach_reverse(i; 0 .. heap_size)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_sift_down(heap, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size - 1);\n\t\t}\n\t\telse if(num > heap[0])\n\t\t{\n\t\t\theap[0] = num;\n\t\t\theap_sift_down(heap, 0, heap_size);\n\t\t}\n\t}\n\t\n\tfor(long i = n - 1; i >= 0; i--)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size-1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, 0, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size-1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size - 1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, 0, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor(long i = n - 1; i >= 0; i--)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\t\n\tif(nums.length < n)\n\t\treturn result;\n\t\n\tlong[] heap = new long[n];\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\theap[i] = nums[i];\n\t}\n\t\n\tfor(long i = n / 2; i >= 0; i--)\n\t{\n\t\theapify(heap, i, n);\n\t}\n\t\n\tfor(long i = n; i < nums.length; i++)\n\t{\n\t\tif(nums[i] > heap[0])\n\t\t{\n\t\t\theap[0] = nums[i];\n\t\t\theapify(heap, 0, n);\n\t\t}\n\t}\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tresult[i] = heap[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\tlong i = 0;\n\twhile (i < nums.length) \n\t{\n\t\tif (heap_size < n) \n\t\t{\n\t\t\theap[heap_size] = nums[i];\n\t\t\theap_size++;\n\t\t\ti++;\n\t\t\theap_sort(heap, heap_size);\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (nums[i] > heap[0]) \n\t\t\t{\n\t\t\t\theap[0] = nums[i];\n\t\t\t\theap_sort(heap, heap_size);\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\t}\n\tfor (i = 0; i < n; i++) \n\t{\n\t\tresult[i] = heap[i];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[nums.length];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_size = heap_size;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. heap_size)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size-1];\n\t\theap_size--;\n\t\theap_size = heap_size;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\t\n\t\t\tif(heap_size == n)\n\t\t\t{\n\t\t\t\theap_build(heap, heap_size);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, heap_size, 0);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach_reverse(i; 0 .. heap_size)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_sift_down(heap, heap_size, 0);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\t\n\t\t\tif(heap_size == n)\n\t\t\t\theap_build(heap);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, 0, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach_reverse(i; 0 .. n)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_size = heap_size;\n\t\t\t}\n\t\t}\n\t\t\n\t\theap_size = heap_size;\n\t}\n\t\n\theap_sort(heap);\n\t\n\treturn heap;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[nums.length];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif (heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (heap_size == n)\n\t\t{\n\t\t\theap_make(heap, heap_size);\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. n)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_sift_down(heap, heap_size, 0);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_push(heap, heap_size);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_push(heap, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. n)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_push(heap, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size - 1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, 0, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theapify_up(heap, heap_size);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theapify_down(heap, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor(long i = n - 1; i >= 0; i--)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theapify_down(heap, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_push(heap, heap_size);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_pop(heap, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap_pop(heap, heap_size);\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[nums.length];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size - 1);\n\t\t}\n\t\telse if(num > heap[0])\n\t\t{\n\t\t\theap[0] = num;\n\t\t\theap_sift_down(heap, 0, heap_size);\n\t\t}\n\t}\n\t\n\tforeach(i; 0..n)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\theap[i] = nums[i];\n\t}\n\t\n\tfor (long i = n / 2; i >= 0; i--)\n\t{\n\t\theap_queue_largest_heapify(heap, i, n);\n\t}\n\t\n\tfor (long i = n; i < nums.length; i++)\n\t{\n\t\tif (nums[i] > heap[0])\n\t\t{\n\t\t\theap[0] = nums[i];\n\t\t\theap_queue_largest_heapify(heap, 0, n);\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tresult[i] = heap[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size - 1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, 0, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. heap_size)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size - 1);\n\t\t}\n\t\telse if(num > heap[0])\n\t\t{\n\t\t\theap[0] = num;\n\t\t\theap_sift_down(heap, 0, heap_size);\n\t\t}\n\t}\n\t\n\tforeach_reverse(i; 0 .. heap_size)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size-1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(heap[0] < num)\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, 0, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach_reverse(i; 0..n)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size-1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[nums.length];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_size = heapify(heap, heap_size, 0);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor(long i = n - 1; i >= 0; i--)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_size = heapify(heap, heap_size, 0);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\theap[i] = nums[i];\n\t}\n\t\n\tfor (long i = n / 2 - 1; i >= 0; i--)\n\t{\n\t\theapify(heap, i, n);\n\t}\n\t\n\tfor (long i = n; i < nums.length; i++)\n\t{\n\t\tif (nums[i] > heap[0])\n\t\t{\n\t\t\theap[0] = nums[i];\n\t\t\theapify(heap, 0, n);\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tresult[i] = heap[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size-1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, heap_size-1);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor(long i = n-1; i >= 0; i--)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size-1];\n\t\theap_size--;\n\t\theap_sift_down(heap, heap_size-1);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tif (nums.length == 0) return result;\n\t\n\tlong[] queue = new long[nums.length];\n\tlong queue_size = 0;\n\t\n\tforeach (num; nums)\n\t{\n\t\tif (queue_size < n)\n\t\t{\n\t\t\tqueue[queue_size] = num;\n\t\t\tqueue_size++;\n\t\t\t\n\t\t\tif (queue_size == n)\n\t\t\t{\n\t\t\t\theapify(queue, queue_size);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (num > queue[0])\n\t\t\t{\n\t\t\t\tqueue[0] = num;\n\t\t\t\theapify(queue, queue_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tresult[i] = queue[0];\n\t\tqueue[0] = queue[queue_size - 1];\n\t\tqueue_size--;\n\t\theapify(queue, queue_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[nums.length];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theapify_up(heap, heap_size - 1);\n\t\t}\n\t\telse if(num > heap[0])\n\t\t{\n\t\t\theap[0] = num;\n\t\t\theapify_down(heap, heap_size);\n\t\t}\n\t}\n\t\n\tfor(long i = n - 1; i >= 0; i--)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theapify_down(heap, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size - 1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, heap_size - 1);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. n)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_sift_down(heap, heap_size - 1);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size-1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, heap_size-1);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. n)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size-1];\n\t\theap_size--;\n\t\theap_sift_down(heap, heap_size-1);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(heap_size == n)\n\t\t{\n\t\t\theapify(heap, heap_size);\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. heap_size)\n\t{\n\t\tresult[i] = heap[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tfor (long i = 0; i < nums.length; i++) \n\t{\n\t\tif (heap_size < n) \n\t\t{\n\t\t\theap[heap_size] = nums[i];\n\t\t\theap_size++;\n\t\t\theapify_up(heap, heap_size);\n\t\t} \n\t\telse if (nums[i] > heap[0]) \n\t\t{\n\t\t\theap[0] = nums[i];\n\t\t\theapify_down(heap, heap_size);\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theapify_down(heap, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[nums.length];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theapify_up(heap, heap_size);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theapify_down(heap, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theapify_down(heap, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tauto result = new long[n];\n\tauto hq = new HeapQueue!(long)();\n\t\n\tforeach(num; nums)\n\t{\n\t\thq.insert(num);\n\t}\n\t\n\tforeach(i; 0 .. n)\n\t{\n\t\tresult[i] = hq.pop();\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theapify_up(heap, heap_size);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theapify_down(heap, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. n)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theapify_down(heap, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_insert(heap, heap_size);\n\t\t}\n\t\telse if(num > heap[0])\n\t\t{\n\t\t\theap[0] = num;\n\t\t\theap_insert(heap, heap_size);\n\t\t}\n\t}\n\t\n\tfor(long i = n - 1; i >= 0; i--)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_insert(heap, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[nums.length];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap_size++;\n\t\t\theap[heap_size] = num;\n\t\t\tlong i = heap_size;\n\t\t\twhile(i > 1 && heap[i] > heap[i/2])\n\t\t\t{\n\t\t\t\tlong tmp = heap[i];\n\t\t\t\theap[i] = heap[i/2];\n\t\t\t\theap[i/2] = tmp;\n\t\t\t\ti /= 2;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[1])\n\t\t\t{\n\t\t\t\theap[1] = num;\n\t\t\t\tlong i = 1;\n\t\t\t\twhile(i*2 <= heap_size)\n\t\t\t\t{\n\t\t\t\t\tlong child = i*2;\n\t\t\t\t\tif(child < heap_size && heap[child] < heap[child+1])\n\t\t\t\t\t\tchild++;\n\t\t\t\t\tif(heap[i] < heap[child])\n\t\t\t\t\t{\n\t\t\t\t\t\tlong tmp = heap[i];\n\t\t\t\t\t\theap[i] = heap[child];\n\t\t\t\t\t\theap[child] = tmp;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t\tbreak;\n\t\t\t\t\ti = child;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach_reverse(i; 0..n)\n\t{\n\t\tresult[i] = heap[1];\n\t\theap[1] = heap[heap_size];\n\t\theap_size--;\n\t\tlong j = 1;\n\t\twhile(j*2 <= heap_size)\n\t\t{\n\t\t",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[nums.length];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size - 1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, 0, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor(long i = n - 1; i >= 0; i--)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(num > heap[0])\n\t\t{\n\t\t\theap[0] = num;\n\t\t\theap_sift_down(heap, 0, n);\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. n)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[n - i - 1];\n\t\theap_sift_down(heap, 0, n - i - 1);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theapify_up(heap, heap_size);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theapify_down(heap, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach_reverse(i; 0..n)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size-1];\n\t\theap_size--;\n\t\theapify_down(heap, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach_reverse(i; 0 .. heap_size)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_sift_down(heap, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size, heap_size - 1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, heap_size, 0);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; 0..n)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_sift_down(heap, heap_size, 0);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[nums.length];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theapify_up(heap, heap_size - 1);\n\t\t}\n\t\telse if(num > heap[0])\n\t\t{\n\t\t\theap[0] = num;\n\t\t\theapify_down(heap, heap_size);\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. n)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theapify_down(heap, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\t\n\tif (nums.length == 0)\n\t\treturn result;\n\t\n\t// create a min heap\n\tlong[] heap = new long[nums.length];\n\tlong heap_size = 0;\n\t\n\tforeach (num; nums)\n\t{\n\t\tif (heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\t\n\t\t\tif (heap_size == n)\n\t\t\t{\n\t\t\t\t// build the heap\n\t\t\t\tfor (long i = (n-1)/2; i >= 0; i--)\n\t\t\t\t\theapify(heap, i, n);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theapify(heap, 0, n);\n\t\t\t}\n\t\t}\n\t}\n\t\n\t// sort the heap\n\tfor (long i = n-1; i >= 0; i--)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[i];\n\t\theapify(heap, 0, i);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\tforeach(num; nums) \n\t{\n\t\tif (heap_size < n) \n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size - 1);\n\t\t} \n\t\telse if (num > heap[0]) \n\t\t{\n\t\t\theap[0] = num;\n\t\t\theap_sift_down(heap, 0, heap_size);\n\t\t}\n\t}\n\tforeach(i; 0 .. heap_size) \n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0, heap_size);\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t}\n\t\t}\n\t\t\n\t\theapify(heap, heap_size);\n\t}\n\t\n\tforeach(i; 0 .. n)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theapify(heap, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_push(heap, heap_size);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_pop(heap, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach_reverse(i; 0 .. heap_size)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap_pop(heap, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theapify_up(heap, heap_size);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theapify_down(heap, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. heap_size)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theapify_down(heap, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\t\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\theap[i] = nums[i];\n\t}\n\t\n\tfor (long i = n / 2 - 1; i >= 0; i--) \n\t{\n\t\theapify(heap, n, i);\n\t}\n\t\n\tfor (long i = n; i < nums.length; i++) \n\t{\n\t\tif (nums[i] > heap[0]) \n\t\t{\n\t\t\theap[0] = nums[i];\n\t\t\theapify(heap, n, 0);\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tresult[i] = heap[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theapify_up(heap, heap_size);\n\t\t}\n\t\telse if(num > heap[0])\n\t\t{\n\t\t\theap[0] = num;\n\t\t\theapify_down(heap, heap_size);\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. heap_size)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theapify_down(heap, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[nums.length];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\t\n\t\t\tif(heap_size == n)\n\t\t\t{\n\t\t\t\theap_build_max(heap, heap_size);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_max_heapify(heap, heap_size, 0);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_max_heapify(heap, heap_size, 0);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\t\n\tif (nums.length == 0)\n\t\treturn result;\n\t\n\tif (nums.length < n)\n\t\tn = nums.length;\n\t\n\tlong[] heap = new long[n];\n\t\n\tfor (long i = 0; i < n; i++)\n\t\theap[i] = nums[i];\n\t\n\tfor (long i = n / 2; i >= 0; i--)\n\t\theapify(heap, i, n);\n\t\n\tfor (long i = n; i < nums.length; i++)\n\t{\n\t\tif (nums[i] > heap[0])\n\t\t{\n\t\t\theap[0] = nums[i];\n\t\t\theapify(heap, 0, n);\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < n; i++)\n\t\tresult[i] = heap[i];\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[nums.length];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theapify_up(heap, heap_size);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theapify_down(heap, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theapify_down(heap, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] ret = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\t\n\t\t\tif(heap_size == n)\n\t\t\t\theap_build(heap);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, 0);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach_reverse(i; 0 .. n)\n\t{\n\t\tret[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0);\n\t}\n\t\n\treturn ret;\n}",
    "{\n\tlong[] result = new long[n];\n\t\n\tif (nums.length == 0)\n\t\treturn result;\n\t\n\tif (nums.length < n)\n\t\tn = nums.length;\n\t\n\tlong[] heap = new long[nums.length];\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\theap[i] = nums[i];\n\t\t\n\t\tlong j = i;\n\t\twhile (j > 0 && heap[(j - 1) / 2] < heap[j])\n\t\t{\n\t\t\tlong temp = heap[(j - 1) / 2];\n\t\t\theap[(j - 1) / 2] = heap[j];\n\t\t\theap[j] = temp;\n\t\t\tj = (j - 1) / 2;\n\t\t}\n\t}\n\t\n\tfor (long i = n; i < nums.length; i++)\n\t{\n\t\tif (heap[0] < nums[i])\n\t\t{\n\t\t\theap[0] = nums[i];\n\t\t\t\n\t\t\tlong j = 0;\n\t\t\twhile (j < n)\n\t\t\t{\n\t\t\t\tlong left = 2 * j + 1;\n\t\t\t\tlong right = 2 * j + 2;\n\t\t\t\t\n\t\t\t\tif (left >= n)\n\t\t\t\t\tbreak;\n\t\t\t\t\n\t\t\t\tlong largest = j;\n\t\t\t\tif (heap[left] > heap[largest])\n\t\t\t\t\tlargest = left;\n\t\t\t\tif (right < n && heap[right] > heap[largest])\n\t\t\t\t\tlargest = right;\n\t\t\t\t\n\t\t\t\tif (largest == j)\n\t\t\t\t\tbreak;\n\t\t\t\t\n\t\t\t\tlong temp = heap[largest];\n\t\t\t\theap[largest] = heap[j];\n\t\t\t\theap[j] = temp;\n\t\t\t\t\n\t\t\t\tj = largest;\n\t\t\t}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\tif(heap_size == n)\n\t\t\t{\n\t\t\t\theap_make();\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(0);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. n)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_sift_down(0);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size - 1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, 0, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. heap_size)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0, heap_size);\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\t\n\tif (nums.length < n)\n\t\treturn result;\n\t\n\tlong[] heap = new long[n];\n\t\n\tforeach(i; 0 .. n)\n\t\theap[i] = nums[i];\n\t\n\theap_make(heap);\n\t\n\tforeach(i; n .. nums.length)\n\t{\n\t\tif (nums[i] > heap[0])\n\t\t{\n\t\t\theap[0] = nums[i];\n\t\t\theap_sift_down(heap, 0);\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. n)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[$ - 1];\n\t\theap_sift_down(heap, 0);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\t\n\tif (n == 0)\n\t\treturn result;\n\t\n\tlong[] heap = new long[n];\n\t\n\tfor (long i = 0; i < n; i++)\n\t\theap[i] = nums[i];\n\t\n\tfor (long i = n / 2 - 1; i >= 0; i--)\n\t\theapify(heap, n, i);\n\t\n\tfor (long i = n; i < nums.length; i++)\n\t{\n\t\tif (nums[i] > heap[0])\n\t\t{\n\t\t\theap[0] = nums[i];\n\t\t\theapify(heap, n, 0);\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < n; i++)\n\t\tresult[i] = heap[i];\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tfor (long i = 0; i < nums.length; i++)\n\t{\n\t\tif (heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = nums[i];\n\t\t\theap_size++;\n\t\t\theapify_up(heap, heap_size-1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (nums[i] > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = nums[i];\n\t\t\t\theapify_down(heap, heap_size-1);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size-1];\n\t\theap_size--;\n\t\theapify_down(heap, heap_size-1);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size-1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, 0, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; 0..n)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size-1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[nums.length];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theapify_up(heap, heap_size);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theapify_down(heap, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. heap_size)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theapify_down(heap, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tif (nums.length == 0)\n\t\treturn new long[0];\n\t\n\tlong[] result = new long[n];\n\t\n\t// create a heap queue\n\tlong[] heap = new long[nums.length];\n\t\n\t// add the first n elements to the heap\n\tfor (long i = 0; i < n; i++)\n\t\theap[i] = nums[i];\n\t\n\t// heapify the first n elements\n\tfor (long i = n / 2; i >= 0; i--)\n\t\theapify(heap, i, n);\n\t\n\t// for each element in the array\n\tfor (long i = n; i < nums.length; i++)\n\t{\n\t\t// if the element is larger than the smallest element in the heap\n\t\tif (nums[i] > heap[0])\n\t\t{\n\t\t\t// replace the smallest element in the heap with the element\n\t\t\theap[0] = nums[i];\n\t\t\t\n\t\t\t// heapify the heap\n\t\t\theapify(heap, 0, n);\n\t\t}\n\t}\n\t\n\t// copy the heap to the result\n\tfor (long i = 0; i < n; i++)\n\t\tresult[i] = heap[i];\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size - 1);\n\t\t}\n\t\telse if(num > heap[0])\n\t\t{\n\t\t\theap[0] = num;\n\t\t\theap_sift_down(heap, 0, heap_size);\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. heap_size)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n    long[] result = new long[n];\n    if (n == 0) return result;\n    if (nums.length == 0) return result;\n    if (nums.length < n) return result;\n    \n    // make a heap\n    long[] heap = new long[nums.length];\n    long heap_size = 0;\n    foreach (i; 0..nums.length) \n    {\n        heap_size++;\n        heap[heap_size - 1] = nums[i];\n        long child = heap_size - 1;\n        long parent = (child - 1) / 2;\n        while (parent >= 0 && heap[child] > heap[parent]) \n        {\n            long temp = heap[child];\n            heap[child] = heap[parent];\n            heap[parent] = temp;\n            child = parent;\n            parent = (child - 1) / 2;\n        }\n    }\n    \n    // extract the largest n elements\n    foreach (i; 0..n) \n    {\n        result[i] = heap[0];\n        heap[0] = heap[heap_size - 1];\n        heap_size--;\n        long parent = 0;\n        long child = 1;\n        while (child < heap_size) \n        {\n            if (child + 1 < heap_size && heap[child] < heap[child + 1]) \n            {\n                child++;\n            }\n            if (heap[parent] >= heap[child]) \n            {\n                break;\n            }\n            long temp = heap[parent];\n            heap[parent] = heap[child];\n            heap[child] = temp;\n            parent = child;\n            child = 2 * parent + 1;\n        }\n    }\n    return result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size-1);\n\t\t}\n\t\telse if(num > heap[0])\n\t\t{\n\t\t\theap[0] = num;\n\t\t\theap_sift_down(heap, 0, heap_size);\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. heap_size)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size-1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\t\n\tif (nums.length < n)\n\t{\n\t\treturn result;\n\t}\n\t\n\tlong[] heap = new long[n];\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\theap[i] = nums[i];\n\t}\n\t\n\tfor (long i = n / 2 - 1; i >= 0; i--)\n\t{\n\t\theapify(heap, i, n);\n\t}\n\t\n\tfor (long i = n; i < nums.length; i++)\n\t{\n\t\tif (nums[i] > heap[0])\n\t\t{\n\t\t\theap[0] = nums[i];\n\t\t\theapify(heap, 0, n);\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tresult[i] = heap[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size - 1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, 0, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[nums.length];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theapify_up(heap, heap_size);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theapify_down(heap, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. n)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theapify_down(heap, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] heap = new long[n];\n\t\n\tforeach(i, num; nums)\n\t{\n\t\tif(i < n)\n\t\t{\n\t\t\theap[i] = num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlong min = min(heap);\n\t\t\tif(num > min)\n\t\t\t{\n\t\t\t\theap[min_index(heap)] = num;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn heap;\n}",
    "{\n\tlong[] result = new long[n];\n\t\n\tif (nums.length == 0)\n\t\treturn result;\n\t\n\tif (nums.length < n)\n\t\tn = nums.length;\n\t\n\tlong[] heap = new long[n];\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\theap[i] = nums[i];\n\t}\n\t\n\tfor (long i = n / 2; i >= 0; i--)\n\t{\n\t\theapify(heap, i, n);\n\t}\n\t\n\tfor (long i = n; i < nums.length; i++)\n\t{\n\t\tif (nums[i] > heap[0])\n\t\t{\n\t\t\theap[0] = nums[i];\n\t\t\theapify(heap, 0, n);\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[n - i - 1];\n\t\theapify(heap, 0, n - i - 1);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_push(heap, heap_size);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_push(heap, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. n)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_push(heap, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_insert(heap, heap_size);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_insert(heap, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; 0..n)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_insert(heap, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\tforeach(num; nums)\n\t{\n\t\tif (heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size - 1);\n\t\t}\n\t\telse if (num > heap[0])\n\t\t{\n\t\t\theap[0] = num;\n\t\t\theap_sift_down(heap, 0, heap_size);\n\t\t}\n\t}\n\tforeach(i; 0 .. heap_size)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0, heap_size);\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[nums.length];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_push(heap, heap_size);\n\t\t}\n\t\telse if(num > heap[0])\n\t\t{\n\t\t\theap[0] = num;\n\t\t\theap_push(heap, heap_size);\n\t\t}\n\t}\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_push(heap, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_push(heap, heap_size);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_pop(heap, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. n)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap_pop(heap, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size - 1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, 0, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tif (nums.length == 0) return [];\n\tif (n == 0) return [];\n\tif (n > nums.length) n = nums.length;\n\t\n\tlong[] result = new long[n];\n\t\n\t// build heap\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tresult[i] = nums[i];\n\t}\n\t\n\tfor (long i = n / 2 - 1; i >= 0; i--)\n\t{\n\t\theapify(result, n, i);\n\t}\n\t\n\tfor (long i = n; i < nums.length; i++)\n\t{\n\t\tif (nums[i] > result[0])\n\t\t{\n\t\t\tresult[0] = nums[i];\n\t\t\theapify(result, n, 0);\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tif(heap_size < n)\n\t{\n\t\treturn null;\n\t}\n\t\n\tfor(long i = heap_size/2; i >= 0; i--)\n\t{\n\t\theapify(heap, heap_size, i);\n\t}\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theapify(heap, heap_size, 0);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong[] heap_index = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_index[heap_size] = heap_size;\n\t\t\theap_size++;\n\t\t\t\n\t\t\tif(heap_size == n)\n\t\t\t{\n\t\t\t\theapify(heap, heap_index, heap_size);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theapify(heap, heap_index, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_index[0] = heap_index[heap_size - 1];\n\t\theap_size--;\n\t\theapify(heap, heap_index, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; 0..n)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_sift_down(heap, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[nums.length];\n\tlong heap_size = 0;\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theapify_up(heap, heap_size);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theapify_down(heap, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. n)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theapify_down(heap, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] ret = new long[n];\n\tif (n == 0) return ret;\n\t\n\tlong[] heap = new long[n];\n\theap[0] = nums[0];\n\t\n\tfor (long i = 1; i < n; i++)\n\t{\n\t\theap[i] = nums[i];\n\t\tlong j = i;\n\t\twhile (j > 0 && heap[j] > heap[(j - 1) / 2])\n\t\t{\n\t\t\tlong temp = heap[j];\n\t\t\theap[j] = heap[(j - 1) / 2];\n\t\t\theap[(j - 1) / 2] = temp;\n\t\t\tj = (j - 1) / 2;\n\t\t}\n\t}\n\t\n\tfor (long i = n; i < nums.length; i++)\n\t{\n\t\tif (nums[i] > heap[0])\n\t\t{\n\t\t\theap[0] = nums[i];\n\t\t\tlong j = 0;\n\t\t\twhile (j < n)\n\t\t\t{\n\t\t\t\tlong left = 2 * j + 1;\n\t\t\t\tlong right = 2 * j + 2;\n\t\t\t\tif (left >= n) break;\n\t\t\t\tif (right >= n)\n\t\t\t\t{\n\t\t\t\t\tif (heap[j] < heap[left])\n\t\t\t\t\t{\n\t\t\t\t\t\tlong temp = heap[j];\n\t\t\t\t\t\theap[j] = heap[left];\n\t\t\t\t\t\theap[left] = temp;\n\t\t\t\t\t\tj = left;\n\t\t\t\t\t}\n\t\t\t\t\telse break;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (heap[left] > heap[right])\n\t\t\t\t\t{\n\t\t\t\t\t\tif (heap[j] < heap[left])\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlong temp = heap[j];",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(heap_size == n)\n\t\t{\n\t\t\theap_sort(heap);\n\t\t}\n\t}\n\t\n\theap_sort(heap);\n\t\n\tforeach(i; 0 .. heap_size)\n\t{\n\t\tresult[i] = heap[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_up(heap, heap_size);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_down(heap, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. heap_size)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_down(heap, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theapify_up(heap, heap_size);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theapify_down(heap, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. heap_size)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theapify_down(heap, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_insert(heap, heap_size);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; 0..n)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_sift_down(heap, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_push(heap, heap_size);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_pop(heap, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. heap_size)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap_pop(heap, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[nums.length];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theapify_up(heap, heap_size);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theapify_down(heap, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. n)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theapify_down(heap, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif (heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theapify_up(heap, heap_size);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theapify_down(heap, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. heap_size)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theapify_down(heap, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\tif(heap_size == n)\n\t\t\t{\n\t\t\t\theap_build_max(heap, heap_size);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_max_heapify(heap, heap_size, 0);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. heap_size)\n\t{\n\t\tresult[i] = heap[i];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[nums.length];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theapify_up(heap, heap_size);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theapify_down(heap, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor(long i = n - 1; i >= 0; i--)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theapify_down(heap, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size - 1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, 0, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[nums.length];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theapify_up(heap, heap_size - 1);\n\t\t}\n\t\telse if(num > heap[0])\n\t\t{\n\t\t\theap[0] = num;\n\t\t\theapify_down(heap, heap_size);\n\t\t}\n\t}\n\t\n\tfor(long i = n - 1; i >= 0; i--)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theapify_down(heap, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[nums.length];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_push_up(heap, heap_size);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_push_down(heap, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_push_down(heap, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[nums.length];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\theap_size++;\n\t\theap[heap_size - 1] = num;\n\t\t\n\t\tlong i = heap_size - 1;\n\t\twhile(i > 0)\n\t\t{\n\t\t\tlong parent = (i - 1) / 2;\n\t\t\tif(heap[i] > heap[parent])\n\t\t\t{\n\t\t\t\tlong temp = heap[i];\n\t\t\t\theap[i] = heap[parent];\n\t\t\t\theap[parent] = temp;\n\t\t\t\ti = parent;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\t\n\t\tlong index = 0;\n\t\twhile(index < heap_size)\n\t\t{\n\t\t\tlong left = 2 * index + 1;\n\t\t\tlong right = 2 * index + 2;\n\t\t\tlong largest = index;\n\t\t\t\n\t\t\tif(left < heap_size && heap[left] > heap[largest])\n\t\t\t{\n\t\t\t\tlargest = left;\n\t\t\t}\n\t\t\tif(right < heap_size && heap[right] > heap[largest])\n\t\t\t{\n\t\t\t\tlargest = right;\n\t\t\t}\n\t\t\t\n\t\t\tif(largest != index)\n\t\t\t{\n\t\t\t\tlong temp = heap[index];\n\t\t\t\theap[index] = heap[largest];\n\t\t\t\theap[largest] = temp;\n\t\t\t\tindex = largest;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t",
    "{\n\tlong[] result = new long[n];\n\t\n\tif (nums.length == 0)\n\t\treturn result;\n\t\n\t// create a heap from the array\n\tlong[] heap = new long[nums.length];\n\tfor (long i = 0; i < nums.length; i++)\n\t\theap[i] = nums[i];\n\t\n\t// heapify the array\n\tfor (long i = nums.length / 2 - 1; i >= 0; i--)\n\t\theapify(heap, i, nums.length);\n\t\n\t// extract the top n elements\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tresult[i] = heap[0];\n\t\t\n\t\t// swap the first and last elements\n\t\tlong temp = heap[0];\n\t\theap[0] = heap[nums.length - 1 - i];\n\t\theap[nums.length - 1 - i] = temp;\n\t\t\n\t\t// heapify the array\n\t\theapify(heap, 0, nums.length - i - 1);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[nums.length];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theapify_up(heap, heap_size);\n\t\t}\n\t\telse if(num > heap[0])\n\t\t{\n\t\t\theap[0] = num;\n\t\t\theapify_down(heap, heap_size);\n\t\t}\n\t}\n\t\n\tfor(long i = n - 1; i >= 0; i--)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theapify_down(heap, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size - 1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, 0, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. heap_size)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size - 1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, 0, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] res = new long[n];\n\tlong[] heap = new long[nums.length];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size - 1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, 0, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. heap_size)\n\t{\n\t\tres[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0, heap_size);\n\t}\n\t\n\treturn res;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size-1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, 0, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach_reverse(i; 0 .. heap_size)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size-1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\t\n\t\t\tif(heap_size == n)\n\t\t\t{\n\t\t\t\theap_build(heap);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_adjust(heap, 0, n);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach_reverse(i; 0 .. n)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[n - i - 1];\n\t\theap_adjust(heap, 0, n - i - 1);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor(long i = n - 1; i >= 0; i--)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_sift_down(heap, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif (heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (heap_size == n)\n\t\t{\n\t\t\theap_make(heap);\n\t\t}\n\t}\n\t\n\theap_sort(heap);\n\t\n\tforeach(i, val; heap)\n\t{\n\t\tresult[i] = val;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\tif(heap_size == n)\n\t\t\t{\n\t\t\t\theap_make(heap);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, 0, n);\n\t\t\t}\n\t\t}\n\t}\n\treturn heap;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size - 1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, 0, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach_reverse(i; 0 .. heap_size)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theapify_up(heap, heap_size - 1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theapify_down(heap, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. n)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theapify_down(heap, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] ret = new long[n];\n\tlong[] heap = new long[nums.length];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size - 1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, 0, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tret[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0, heap_size);\n\t}\n\t\n\treturn ret;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif (heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size-1);\n\t\t}\n\t\telse if (num > heap[0])\n\t\t{\n\t\t\theap[0] = num;\n\t\t\theap_sift_down(heap, 0, heap_size-1);\n\t\t}\n\t}\n\t\n\tforeach_reverse(i; 0 .. heap_size)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size-1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0, heap_size-1);\n\t}\n\t\n\treturn result;\n}",
    "{\n\t// Create a min heap\n\tlong[] heap = new long[n];\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\theap[i] = nums[i];\n\t}\n\t\n\t// Heapify\n\tfor (long i = n / 2 - 1; i >= 0; i--)\n\t{\n\t\theapify(heap, n, i);\n\t}\n\t\n\t// Extract the min element and insert the next element from the array\n\tfor (long i = n; i < nums.length; i++)\n\t{\n\t\tif (nums[i] > heap[0])\n\t\t{\n\t\t\theap[0] = nums[i];\n\t\t\theapify(heap, n, 0);\n\t\t}\n\t}\n\t\n\t// Sort the heap\n\tfor (long i = n - 1; i >= 0; i--)\n\t{\n\t\tswap(heap, 0, i);\n\t\theapify(heap, i, 0);\n\t}\n\t\n\treturn heap;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theapify_up(heap, heap_size, heap_size-1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theapify_down(heap, heap_size, 0);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; 0..heap_size)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size-1];\n\t\theap_size--;\n\t\theapify_down(heap, heap_size, 0);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result;\n\tlong i, j, k;\n\tlong temp;\n\t\n\tresult = new long[n];\n\t\n\t// Initialize the result array\n\tfor (i = 0; i < n; i++)\n\t{\n\t\tresult[i] = nums[i];\n\t}\n\t\n\t// Build the heap\n\tfor (i = n / 2 - 1; i >= 0; i--)\n\t{\n\t\tk = i;\n\t\t\n\t\twhile (k * 2 + 1 < n)\n\t\t{\n\t\t\tj = k * 2 + 1;\n\t\t\t\n\t\t\tif (j < n - 1 && result[j] < result[j + 1])\n\t\t\t{\n\t\t\t\tj++;\n\t\t\t}\n\t\t\t\n\t\t\tif (result[k] < result[j])\n\t\t\t{\n\t\t\t\ttemp = result[k];\n\t\t\t\tresult[k] = result[j];\n\t\t\t\tresult[j] = temp;\n\t\t\t\t\n\t\t\t\tk = j;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\t// Sort the heap\n\tfor (i = n - 1; i > 0; i--)\n\t{\n\t\ttemp = result[0];\n\t\tresult[0] = result[i];\n\t\tresult[i] = temp;\n\t\t\n\t\tk = 0;\n\t\t\n\t\twhile (k * 2 + 1 < i)\n\t\t{\n\t\t\tj = k * 2 + 1;\n\t\t\t\n\t\t\tif (j < i - 1 && result[j] < result[j + 1])\n\t\t\t{\n\t\t\t\tj++;\n\t\t\t}\n\t\t\t\n\t\t\tif (result[k] < result[j])\n\t\t\t{\n\t\t\t\ttemp = result[k];\n\t\t\t\tresult[k] = result[j];\n\t\t\t\tresult[j] = temp;\n\t\t\t\t\n\t\t",
    "{\n\tlong[] ret;\n\tlong i;\n\t\n\tret = new long[n];\n\t\n\tfor (i = 0; i < n; i++)\n\t{\n\t\tret[i] = nums[i];\n\t}\n\t\n\theap_queue_build(ret);\n\t\n\tfor (i = n; i < nums.length; i++)\n\t{\n\t\tif (nums[i] > ret[0])\n\t\t{\n\t\t\tret[0] = nums[i];\n\t\t\theap_queue_sift_down(ret, 0);\n\t\t}\n\t}\n\t\n\treturn ret;\n}",
    "{\n\tlong[] result = new long[n];\n\t\n\tif (nums.length == 0)\n\t\treturn result;\n\t\n\tif (nums.length < n)\n\t\tn = nums.length;\n\t\n\tlong[] heap = new long[n];\n\t\n\tfor (long i = 0; i < n; i++)\n\t\theap[i] = nums[i];\n\t\n\tfor (long i = n / 2; i >= 0; i--)\n\t\theapify(heap, i, n);\n\t\n\tfor (long i = n; i < nums.length; i++)\n\t{\n\t\tif (nums[i] > heap[0])\n\t\t{\n\t\t\theap[0] = nums[i];\n\t\t\theapify(heap, 0, n);\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < n; i++)\n\t\tresult[i] = heap[i];\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\theap[i] = nums[i];\n\t}\n\t\n\tfor (long i = n / 2 - 1; i >= 0; i--)\n\t{\n\t\theapify(heap, n, i);\n\t}\n\t\n\tfor (long i = n; i < nums.length; i++)\n\t{\n\t\tif (nums[i] > heap[0])\n\t\t{\n\t\t\theap[0] = nums[i];\n\t\t\theapify(heap, n, 0);\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tresult[i] = heap[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\tforeach(num; nums) {\n\t\tif (heap_size < n) {\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t} else {\n\t\t\tif (num > heap[0]) {\n\t\t\t\theap[0] = num;\n\t\t\t}\n\t\t}\n\t\tif (heap_size == n) {\n\t\t\theap_sort(heap);\n\t\t}\n\t}\n\theap_sort(heap);\n\tforeach(i, num; heap) {\n\t\tresult[i] = num;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[nums.length];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theapify_up(heap, heap_size);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theapify_down(heap, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. n)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theapify_down(heap, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size - 1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, 0, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[nums.length];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_increase_key(heap, heap_size-1);\n\t\t}\n\t\telse if(num > heap[0])\n\t\t{\n\t\t\theap[0] = num;\n\t\t\theap_decrease_key(heap, 0);\n\t\t}\n\t}\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size-1];\n\t\theap_size--;\n\t\theap_decrease_key(heap, 0);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_up(heap, heap_size);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(heap[0] < num)\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_down(heap, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor(long i = n - 1; i >= 0; i--)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_down(heap, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size-1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, 0, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach_reverse(i; 0 .. heap_size)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size-1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size-1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, 0, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size-1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theapify_up(heap, heap_size);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theapify_down(heap, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor(long i = n-1; i >= 0; i--)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size-1];\n\t\theap_size--;\n\t\theapify_down(heap, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size-1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, 0, heap_size-1);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. heap_size)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size-1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0, heap_size-1);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\t\n\tif (n > nums.length)\n\t{\n\t\treturn result;\n\t}\n\t\n\tlong[] heap = new long[nums.length];\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\theap[i] = nums[i];\n\t}\n\t\n\tfor (long i = n / 2 - 1; i >= 0; i--)\n\t{\n\t\theapify(heap, i, n);\n\t}\n\t\n\tfor (long i = n; i < nums.length; i++)\n\t{\n\t\tif (nums[i] > heap[0])\n\t\t{\n\t\t\theap[0] = nums[i];\n\t\t\theapify(heap, 0, n);\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tresult[i] = heap[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\theap[i] = nums[i];\n\t}\n\t\n\tfor (long i = n / 2 - 1; i >= 0; i--)\n\t{\n\t\theapify(heap, n, i);\n\t}\n\t\n\tfor (long i = n; i < nums.length; i++)\n\t{\n\t\tif (nums[i] > heap[0])\n\t\t{\n\t\t\theap[0] = nums[i];\n\t\t\theapify(heap, n, 0);\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tresult[i] = heap[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t}\n\t\t}\n\t\tif(heap_size == n)\n\t\t{\n\t\t\theap_sort(heap);\n\t\t}\n\t}\n\theap_sort(heap);\n\tforeach(i; 0..n)\n\t{\n\t\tresult[i] = heap[i];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[nums.length];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theapify_up(heap, heap_size - 1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theapify_down(heap, 0, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. n)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theapify_down(heap, 0, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tif (nums.length == 0)\n\t\treturn result;\n\t\n\tlong[] heap = new long[nums.length];\n\tlong heap_size = 0;\n\t\n\tforeach (num; nums)\n\t{\n\t\tif (heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theapify_up(heap, heap_size-1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theapify_down(heap, 0, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size-1];\n\t\theap_size--;\n\t\theapify_down(heap, 0, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size-1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, 0, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; 0..heap_size)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size-1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\t\n\tif(nums.length == 0)\n\t\treturn result;\n\t\n\tif(nums.length < n)\n\t\tn = nums.length;\n\t\n\tlong[] heap = new long[n];\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\theap[i] = nums[i];\n\t}\n\t\n\tfor(long i = n / 2 - 1; i >= 0; i--)\n\t{\n\t\theapify(heap, i, n);\n\t}\n\t\n\tfor(long i = n; i < nums.length; i++)\n\t{\n\t\tif(nums[i] > heap[0])\n\t\t{\n\t\t\theap[0] = nums[i];\n\t\t\theapify(heap, 0, n);\n\t\t}\n\t}\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tresult[i] = heap[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[nums.length];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theapify_up(heap, heap_size - 1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theapify_down(heap, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theapify_down(heap, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] heap = new long[n];\n\t\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\theap[i] = nums[i];\n\t}\n\t\n\tfor (long i = n / 2 - 1; i >= 0; i--) \n\t{\n\t\theapify(heap, n, i);\n\t}\n\t\n\tfor (long i = n; i < nums.length; i++) \n\t{\n\t\tif (nums[i] > heap[0]) \n\t\t{\n\t\t\theap[0] = nums[i];\n\t\t\theapify(heap, n, 0);\n\t\t}\n\t}\n\t\n\treturn heap;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size - 1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, 0, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. heap_size)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap_swap(heap, 0, heap_size - 1);\n\t\theap_size--;\n\t\theap_sift_down(heap, 0, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theapify_up(heap, heap_size - 1);\n\t\t}\n\t\telse if(num > heap[0])\n\t\t{\n\t\t\theap[0] = num;\n\t\t\theapify_down(heap, heap_size, 0);\n\t\t}\n\t}\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theapify_down(heap, heap_size, 0);\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[nums.length];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size - 1);\n\t\t}\n\t\telse if(num > heap[0])\n\t\t{\n\t\t\theap[0] = num;\n\t\t\theap_sift_down(heap, 0, heap_size);\n\t\t}\n\t}\n\t\n\tfor(long i = n - 1; i >= 0; i--)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\t\n\tif (nums.length == 0) return result;\n\t\n\t// create a heap queue\n\tstd.priority_queue!(long)(nums, std.greater!long);\n\t\n\t// pop the top n elements\n\tforeach (i; 0..n)\n\t{\n\t\tresult[i] = nums.front;\n\t\tnums.popFront();\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tif (nums.length == 0)\n\t\treturn result;\n\t\n\tlong[] heap = new long[nums.length];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif (heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size - 1);\n\t\t}\n\t\telse if (num > heap[0])\n\t\t{\n\t\t\theap[0] = num;\n\t\t\theap_sift_down(heap, 0, heap_size);\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size - 1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, 0, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_insert(heap, heap_size-1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, 0);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor(long i = n-1; i >= 0; i--)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size-1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[nums.length];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theapify_up(heap, heap_size-1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theapify_down(heap, heap_size-1);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. n)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size-1];\n\t\theap_size--;\n\t\theapify_down(heap, heap_size-1);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\t\n\tif (nums.length == 0)\n\t\treturn result;\n\t\n\tif (nums.length < n)\n\t\treturn nums;\n\t\n\tlong[] heap = new long[n];\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\theap[i] = nums[i];\n\t}\n\t\n\t// Build heap\n\tfor (long i = n / 2 - 1; i >= 0; i--)\n\t{\n\t\theapify(heap, n, i);\n\t}\n\t\n\t// Extract max\n\tfor (long i = n; i < nums.length; i++)\n\t{\n\t\tif (nums[i] > heap[0])\n\t\t{\n\t\t\theap[0] = nums[i];\n\t\t\theapify(heap, n, 0);\n\t\t}\n\t}\n\t\n\t// Sort heap\n\tfor (long i = n - 1; i >= 0; i--)\n\t{\n\t\tlong temp = heap[0];\n\t\theap[0] = heap[i];\n\t\theap[i] = temp;\n\t\t\n\t\theapify(heap, i, 0);\n\t}\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tresult[i] = heap[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_adjust(heap, heap_size);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_adjust(heap, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. n)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_adjust(heap, heap_size);\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result;\n\tlong i, j, k, temp;\n\t\n\tresult = new long[n];\n\t\n\tfor (i = 0; i < n; i++)\n\t{\n\t\tresult[i] = nums[i];\n\t}\n\t\n\tfor (i = n / 2 - 1; i >= 0; i--)\n\t{\n\t\tk = i;\n\t\twhile (2 * k + 1 < n)\n\t\t{\n\t\t\tj = 2 * k + 1;\n\t\t\tif (j < n - 1 && result[j] < result[j + 1])\n\t\t\t{\n\t\t\t\tj++;\n\t\t\t}\n\t\t\tif (result[k] < result[j])\n\t\t\t{\n\t\t\t\ttemp = result[k];\n\t\t\t\tresult[k] = result[j];\n\t\t\t\tresult[j] = temp;\n\t\t\t\tk = j;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor (i = n; i < nums.length; i++)\n\t{\n\t\tif (nums[i] > result[0])\n\t\t{\n\t\t\tresult[0] = nums[i];\n\t\t\tk = 0;\n\t\t\twhile (2 * k + 1 < n)\n\t\t\t{\n\t\t\t\tj = 2 * k + 1;\n\t\t\t\tif (j < n - 1 && result[j] < result[j + 1])\n\t\t\t\t{\n\t\t\t\t\tj++;\n\t\t\t\t}\n\t\t\t\tif (result[k] < result[j])\n\t\t\t\t{\n\t\t\t\t\ttemp = result[k];\n\t\t\t\t\tresult[k] = result[j];\n\t\t\t\t\tresult[j] = temp;\n\t\t\t\t\tk = j;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[nums.length];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theapify_up(heap, heap_size);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theapify_down(heap, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor(long i = n - 1; i >= 0; i--)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theapify_down(heap, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[nums.length];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_queue_push(heap, heap_size);\n\t\t}\n\t\telse if(num > heap[0])\n\t\t{\n\t\t\theap[0] = num;\n\t\t\theap_queue_pop(heap, heap_size);\n\t\t}\n\t}\n\t\n\tforeach(i; 0..n)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap_queue_pop(heap, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\theap[i] = nums[i];\n\t}\n\t\n\tfor (long i = n / 2 - 1; i >= 0; i--)\n\t{\n\t\theapify(heap, n, i);\n\t}\n\t\n\tfor (long i = n; i < nums.length; i++)\n\t{\n\t\tif (nums[i] > heap[0])\n\t\t{\n\t\t\theap[0] = nums[i];\n\t\t\theapify(heap, n, 0);\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tresult[i] = heap[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theapify_up(heap, heap_size);\n\t\t}\n\t\telse if(num > heap[0])\n\t\t{\n\t\t\theap[0] = num;\n\t\t\theapify_down(heap, heap_size);\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. heap_size)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theapify_down(heap, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\t\n\t\t\tif(heap_size == n)\n\t\t\t{\n\t\t\t\theap_make(heap);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, 0, n);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[n - i - 1];\n\t\theap_sift_down(heap, 0, n - i - 1);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theapify_up(heap, heap_size);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theapify_down(heap, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. n)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theapify_down(heap, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size-1];\n\t\theap_size--;\n\t\theap_sift_down(heap, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size - 1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, 0, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. heap_size)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\t\n\tif (nums.length == 0 || n == 0)\n\t\treturn result;\n\t\n\tif (n > nums.length)\n\t\tn = nums.length;\n\t\n\tlong[] heap = new long[n];\n\t\n\tfor (long i = 0; i < n; i++)\n\t\theap[i] = nums[i];\n\t\n\tfor (long i = n / 2 - 1; i >= 0; i--)\n\t\theapify(heap, i, n);\n\t\n\tfor (long i = n; i < nums.length; i++)\n\t{\n\t\tif (nums[i] > heap[0])\n\t\t{\n\t\t\theap[0] = nums[i];\n\t\t\theapify(heap, 0, n);\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < n; i++)\n\t\tresult[i] = heap[i];\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_up(heap, heap_size-1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_down(heap, heap_size-1);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; 0..n)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size-1];\n\t\theap_size--;\n\t\theap_down(heap, heap_size-1);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tif (n == 0) \n\t{\n\t\treturn new long[0];\n\t}\n\tif (n > nums.length) \n\t{\n\t\tn = nums.length;\n\t}\n\tlong[] heap = new long[n];\n\tforeach (i, num; nums) \n\t{\n\t\tif (i < n) \n\t\t{\n\t\t\theap[i] = num;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (num > heap[0]) \n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t}\n\t\t}\n\t\tif (i >= n) \n\t\t{\n\t\t\theapify(heap, 0);\n\t\t}\n\t}\n\theap_sort(heap);\n\treturn heap;\n}",
    "{\n\tlong[] heap = new long[n];\n\tforeach(i, x; nums)\n\t{\n\t\tif (i < n)\n\t\t{\n\t\t\theap[i] = x;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlong min = min(heap);\n\t\t\tif (x > min)\n\t\t\t{\n\t\t\t\theap[indexOf(heap, min)] = x;\n\t\t\t}\n\t\t}\n\t}\n\treturn heap;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[nums.length];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theapify_up(heap, heap_size);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theapify_down(heap, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theapify_down(heap, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size - 1);\n\t\t}\n\t\telse if(num > heap[0])\n\t\t{\n\t\t\theap[0] = num;\n\t\t\theap_sift_down(heap, 0, heap_size);\n\t\t}\n\t}\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] ret = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(heap_size == n)\n\t\t{\n\t\t\theap_sort(heap);\n\t\t}\n\t}\n\t\n\theap_sort(heap);\n\t\n\tforeach(i, val; heap)\n\t{\n\t\tret[i] = val;\n\t}\n\t\n\treturn ret;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\t\n\t\t\tif(heap_size == n)\n\t\t\t{\n\t\t\t\theap_build(heap, heap_size);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, 0, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach_reverse(i; 0 .. heap_size)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tauto queue = new HeapQueue!(long, \"a > b\");\n\tforeach(num; nums)\n\t{\n\t\tqueue.put(num);\n\t\tif(queue.length > n)\n\t\t\tqueue.get();\n\t}\n\treturn queue.toArray();\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\theap[i] = nums[i];\n\t}\n\t\n\tfor (long i = n / 2; i >= 0; i--)\n\t{\n\t\theap_queue_largest_heapify(heap, i, n);\n\t}\n\t\n\tfor (long i = n; i < nums.length; i++)\n\t{\n\t\tif (nums[i] > heap[0])\n\t\t{\n\t\t\theap[0] = nums[i];\n\t\t\theap_queue_largest_heapify(heap, 0, n);\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tresult[i] = heap[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size - 1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, 0, heap_size - 1);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. heap_size)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_sift_down(heap, 0, heap_size - 2);\n\t\theap_size--;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[nums.length];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theapify_up(heap, heap_size);\n\t\t}\n\t\telse if(num > heap[0])\n\t\t{\n\t\t\theap[0] = num;\n\t\t\theapify_down(heap, heap_size);\n\t\t}\n\t}\n\t\n\tfor(long i = n-1; i >= 0; i--)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size-1];\n\t\theap_size--;\n\t\theapify_down(heap, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[nums.length];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size - 1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, 0, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_push(heap, heap_size);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_pop(heap, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. heap_size)\n\t{\n\t\tresult[heap_size - i - 1] = heap[0];\n\t\theap_pop(heap, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\t\n\tif (nums.length < n)\n\t{\n\t\treturn result;\n\t}\n\t\n\tlong[] heap = new long[n];\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\theap[i] = nums[i];\n\t}\n\t\n\tfor (long i = n / 2 - 1; i >= 0; i--)\n\t{\n\t\theapify(heap, i, n);\n\t}\n\t\n\tfor (long i = n; i < nums.length; i++)\n\t{\n\t\tif (nums[i] > heap[0])\n\t\t{\n\t\t\theap[0] = nums[i];\n\t\t\theapify(heap, 0, n);\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tresult[i] = heap[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size - 1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, 0, heap_size - 1);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0, heap_size - 1);\n\t}\n\t\n\treturn result;\n}"
  ]
}