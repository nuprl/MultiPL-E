{
  "name": "mbpp_4_heap_queue_largest",
  "language": "d",
  "prompt": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given array of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_4_heap_queue_largest.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[nums.length];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\t\n\t\t\tif(heap_size == n)\n\t\t\t{\n\t\t\t\theap_build(heap, heap_size);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, 0, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach_reverse(i; 0 .. heap_size)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[nums.length];\n\tlong heap_size = 0;\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size - 1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, 0, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach_reverse(i; 0 .. heap_size)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0, heap_size);\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size - 1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, 0, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach_reverse(i; 0 .. heap_size)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_insert(heap, heap_size);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_insert(heap, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. n)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_insert(heap, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size-1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, 0, heap_size-1);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach_reverse(i; 0..heap_size)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size-1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0, heap_size-1);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size - 1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, 0, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. heap_size)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\t\n\tif(nums.length == 0)\n\t\treturn result;\n\t\n\tif(nums.length < n)\n\t\tn = nums.length;\n\t\n\tlong[] heap = new long[n];\n\t\n\tfor(long i = 0; i < n; i++)\n\t\theap[i] = nums[i];\n\t\n\tfor(long i = n / 2; i >= 0; i--)\n\t\theapify(heap, i, n);\n\t\n\tfor(long i = n; i < nums.length; i++)\n\t{\n\t\tif(nums[i] > heap[0])\n\t\t{\n\t\t\theap[0] = nums[i];\n\t\t\theapify(heap, 0, n);\n\t\t}\n\t}\n\t\n\tfor(long i = 0; i < n; i++)\n\t\tresult[i] = heap[i];\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[nums.length];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theapify_up(heap, heap_size - 1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theapify_down(heap, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theapify_down(heap, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theapify_up(heap, heap_size);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theapify_down(heap, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. n)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theapify_down(heap, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[nums.length];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size-1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, 0, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. n)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size-1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[nums.length];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theapify_up(heap, heap_size);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theapify_down(heap, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; 0..n)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size-1];\n\t\theap_size--;\n\t\theapify_down(heap, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size-1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, 0, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size-1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\t\n\tif (nums.length == 0)\n\t\treturn result;\n\t\n\tlong[] heap = new long[nums.length];\n\t\n\tfor (long i = 0; i < nums.length; i++)\n\t{\n\t\theap[i] = nums[i];\n\t\t\n\t\tlong j = i;\n\t\t\n\t\twhile (j > 0 && heap[(j - 1) / 2] < heap[j])\n\t\t{\n\t\t\tlong temp = heap[(j - 1) / 2];\n\t\t\theap[(j - 1) / 2] = heap[j];\n\t\t\theap[j] = temp;\n\t\t\t\n\t\t\tj = (j - 1) / 2;\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tresult[i] = heap[0];\n\t\t\n\t\theap[0] = heap[heap.length - 1 - i];\n\t\t\n\t\tlong j = 0;\n\t\t\n\t\twhile (true)\n\t\t{\n\t\t\tlong left = 2 * j + 1;\n\t\t\tlong right = 2 * j + 2;\n\t\t\tlong largest = j;\n\t\t\t\n\t\t\tif (left < heap.length - i && heap[left] > heap[largest])\n\t\t\t\tlargest = left;\n\t\t\t\n\t\t\tif (right < heap.length - i && heap[right] > heap[largest])\n\t\t\t\tlargest = right;\n\t\t\t\n\t\t\tif (largest != j)\n\t\t\t{\n\t\t\t\tlong temp = heap[j];\n\t\t\t\theap[j] = heap[largest];\n\t\t\t\theap[largest] = temp;\n\t\t\t\t\n\t\t\t\tj = largest;\n\t\t\t}\n\t\t\telse\n\t\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\theap[i] = nums[i];\n\t}\n\t\n\tfor(long i = n / 2; i >= 0; i--)\n\t{\n\t\theapify(heap, i, n);\n\t}\n\t\n\tfor(long i = n; i < nums.length; i++)\n\t{\n\t\tif(nums[i] > heap[0])\n\t\t{\n\t\t\theap[0] = nums[i];\n\t\t\theapify(heap, 0, n);\n\t\t}\n\t}\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tresult[i] = heap[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size-1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, 0, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach_reverse(i; 0..n)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size-1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0, heap_size);\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\theap[i] = nums[i];\n\t}\n\t\n\tfor (long i = n/2; i >= 0; i--)\n\t{\n\t\theapify(heap, i, n);\n\t}\n\t\n\tfor (long i = n; i < nums.length; i++)\n\t{\n\t\tif (nums[i] > heap[0])\n\t\t{\n\t\t\theap[0] = nums[i];\n\t\t\theapify(heap, 0, n);\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tresult[i] = heap[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theapify_up(heap, heap_size);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theapify_down(heap, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. n)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theapify_down(heap, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\theap[i] = nums[i];\n\t}\n\t\n\tfor (long i = n / 2; i >= 0; i--)\n\t{\n\t\theapify(heap, i, n);\n\t}\n\t\n\tfor (long i = n; i < nums.length; i++)\n\t{\n\t\tif (nums[i] > heap[0])\n\t\t{\n\t\t\theap[0] = nums[i];\n\t\t\theapify(heap, 0, n);\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tresult[i] = heap[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\t\n\tif (nums.length == 0)\n\t\treturn result;\n\t\n\tlong[] heap = new long[nums.length];\n\tlong heap_size = 0;\n\t\n\tforeach (num; nums)\n\t{\n\t\tif (heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\t\n\t\t\tif (heap_size == n)\n\t\t\t{\n\t\t\t\theap_build(heap, heap_size);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, heap_size, 0);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach_reverse (i; 0 .. heap_size)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap_sift_down(heap, heap_size, 0);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[n];\n\t\n\tif (nums.length < n)\n\t\treturn result;\n\t\n\t// create a heap queue\n\tstd.priority_queue!(long)(nums[], std.less!(long));\n\t\n\t// pop the largest n numbers\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tresult[i] = nums.front;\n\t\tnums.pop_front();\n\t}\n\t\n\treturn result;\n}"
  ]
}