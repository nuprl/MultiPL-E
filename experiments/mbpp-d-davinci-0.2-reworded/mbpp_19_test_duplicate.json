{
  "name": "mbpp_19_test_duplicate",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find whether a given array of integers contains any duplicate element.\n\t\n*/\nbool test_duplicate(long[] arraynums) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_19_test_duplicate.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = test_duplicate;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == true);\n    assert(candidate([1L, 1L, 2L, 2L, 3L, 3L, 4L, 4L, 5L]) == true);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tbool bfound = false;\n\tforeach(long num; arraynums)\n\t{\n\t\tif(arraynums.count(num) > 1)\n\t\t{\n\t\t\tbfound = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn bfound;\n}",
    "{\n\tbool bRet = false;\n\t\n\tforeach(num; arraynums)\n\t{\n\t\tif(arraynums.count(num) > 1)\n\t\t{\n\t\t\tbRet = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn bRet;\n}",
    "{\n\tbool result = false;\n\tforeach(num; arraynums)\n\t{\n\t\tif(arraynums.count(num) > 1)\n\t\t{\n\t\t\tresult = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tbool result = false;\n\tforeach(i; arraynums)\n\t{\n\t\tforeach(j; arraynums)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tbool bFound = false;\n\tforeach(num; arraynums)\n\t{\n\t\tif(arraynums.count(num) > 1)\n\t\t{\n\t\t\tbFound = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn bFound;\n}",
    "{\n\tbool bret = false;\n\tint[] array = arraynums.dup;\n\tarray.sort;\n\tforeach(int i; array)\n\t{\n\t\tif(i == array[$-1])\n\t\t{\n\t\t\tbret = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn bret;\n}",
    "{\n\tbool bRet = false;\n\tint[] array = arraynums.dup;\n\tarray.sort;\n\tfor (int i = 0; i < array.length - 1; i++)\n\t{\n\t\tif (array[i] == array[i + 1])\n\t\t{\n\t\t\tbRet = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn bRet;\n}",
    "{\n\tbool result = false;\n\tforeach(num; arraynums)\n\t{\n\t\tif(arraynums.count(num) > 1)\n\t\t{\n\t\t\tresult = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tbool bret = false;\n\tif (arraynums.length == 0)\n\t\treturn bret;\n\t\n\tint[] array = arraynums.dup;\n\tarray.sort;\n\t\n\tfor (int i = 0; i < array.length - 1; i++)\n\t{\n\t\tif (array[i] == array[i+1])\n\t\t{\n\t\t\tbret = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn bret;\n}",
    "{\n\tbool found = false;\n\tforeach(i; 0 .. arraynums.length)\n\t{\n\t\tforeach(j; i + 1 .. arraynums.length)\n\t\t{\n\t\t\tif(arraynums[i] == arraynums[j])\n\t\t\t{\n\t\t\t\tfound = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(found)\n\t\t{\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn found;\n}",
    "{\n\tbool result = false;\n\tlong[] arraynums_sorted = arraynums.dup;\n\tarraynums_sorted.sort;\n\tforeach(i,num;arraynums_sorted)\n\t{\n\t\tif(i>0)\n\t\t{\n\t\t\tif(arraynums_sorted[i] == arraynums_sorted[i-1])\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tbool bret = false;\n\t\n\tforeach(num; arraynums)\n\t{\n\t\tif(num in arraynums[0..$-1])\n\t\t{\n\t\t\tbret = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn bret;\n}",
    "{\n\tbool bRet = false;\n\tlong[] arraynums_sorted = arraynums.dup;\n\tarraynums_sorted.sort;\n\tforeach(long num; arraynums_sorted)\n\t{\n\t\tif(num == arraynums_sorted[$-1])\n\t\t{\n\t\t\tbRet = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn bRet;\n}",
    "{\n\tint[] array = arraynums.dup;\n\tarray.sort;\n\tint i = 0;\n\twhile (i < array.length)\n\t{\n\t\tif (array[i] == array[i+1])\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\ti++;\n\t}\n\treturn false;\n}",
    "{\n\tbool bRet = false;\n\tforeach(i; 0 .. arraynums.length)\n\t{\n\t\tforeach(j; i+1 .. arraynums.length)\n\t\t{\n\t\t\tif(arraynums[i] == arraynums[j])\n\t\t\t{\n\t\t\t\tbRet = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(bRet)\n\t\t\tbreak;\n\t}\n\treturn bRet;\n}",
    "{\n\tbool result = false;\n\t\n\tforeach(i; 0 .. arraynums.length)\n\t{\n\t\tforeach(j; 0 .. arraynums.length)\n\t\t{\n\t\t\tif(i != j)\n\t\t\t{\n\t\t\t\tif(arraynums[i] == arraynums[j])\n\t\t\t\t{\n\t\t\t\t\tresult = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tforeach(num; arraynums)\n\t{\n\t\tif(arraynums.count(num) > 1)\n\t\t\treturn true;\n\t}\n\treturn false;\n}",
    "{\n\tforeach(i; 0 .. arraynums.length)\n\t{\n\t\tforeach(j; i+1 .. arraynums.length)\n\t\t{\n\t\t\tif(arraynums[i] == arraynums[j])\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tbool bRet = false;\n\tforeach(i; 0 .. arraynums.length)\n\t{\n\t\tforeach(j; 0 .. arraynums.length)\n\t\t{\n\t\t\tif(i != j)\n\t\t\t{\n\t\t\t\tif(arraynums[i] == arraynums[j])\n\t\t\t\t{\n\t\t\t\t\tbRet = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(bRet)\n\t\t{\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn bRet;\n}",
    "{\n\tbool result = false;\n\tforeach(i; 0 .. arraynums.length)\n\t{\n\t\tforeach(j; i+1 .. arraynums.length)\n\t\t{\n\t\t\tif(arraynums[i] == arraynums[j])\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}"
  ]
}