{
  "name": "mbpp_19_test_duplicate",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find whether a given array of integers contains any duplicate element.\n\t\n*/\nbool test_duplicate(long[] arraynums) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_19_test_duplicate.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = test_duplicate;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == true);\n    assert(candidate([1L, 1L, 2L, 2L, 3L, 3L, 4L, 4L, 5L]) == true);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tbool bfound = false;\n\tforeach(long num; arraynums)\n\t{\n\t\tif(arraynums.count(num) > 1)\n\t\t{\n\t\t\tbfound = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn bfound;\n}",
    "{\n\tbool bRet = false;\n\t\n\tforeach(num; arraynums)\n\t{\n\t\tif(arraynums.count(num) > 1)\n\t\t{\n\t\t\tbRet = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn bRet;\n}",
    "{\n\tbool result = false;\n\tforeach(num; arraynums)\n\t{\n\t\tif(arraynums.count(num) > 1)\n\t\t{\n\t\t\tresult = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tbool result = false;\n\tforeach(i; arraynums)\n\t{\n\t\tforeach(j; arraynums)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tbool bFound = false;\n\tforeach(num; arraynums)\n\t{\n\t\tif(arraynums.count(num) > 1)\n\t\t{\n\t\t\tbFound = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn bFound;\n}",
    "{\n\tbool bret = false;\n\tint[] array = arraynums.dup;\n\tarray.sort;\n\tforeach(int i; array)\n\t{\n\t\tif(i == array[$-1])\n\t\t{\n\t\t\tbret = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn bret;\n}",
    "{\n\tbool bRet = false;\n\tint[] array = arraynums.dup;\n\tarray.sort;\n\tfor (int i = 0; i < array.length - 1; i++)\n\t{\n\t\tif (array[i] == array[i + 1])\n\t\t{\n\t\t\tbRet = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn bRet;\n}",
    "{\n\tbool result = false;\n\tforeach(num; arraynums)\n\t{\n\t\tif(arraynums.count(num) > 1)\n\t\t{\n\t\t\tresult = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tbool bret = false;\n\tif (arraynums.length == 0)\n\t\treturn bret;\n\t\n\tint[] array = arraynums.dup;\n\tarray.sort;\n\t\n\tfor (int i = 0; i < array.length - 1; i++)\n\t{\n\t\tif (array[i] == array[i+1])\n\t\t{\n\t\t\tbret = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn bret;\n}",
    "{\n\tbool found = false;\n\tforeach(i; 0 .. arraynums.length)\n\t{\n\t\tforeach(j; i + 1 .. arraynums.length)\n\t\t{\n\t\t\tif(arraynums[i] == arraynums[j])\n\t\t\t{\n\t\t\t\tfound = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(found)\n\t\t{\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn found;\n}",
    "{\n\tbool result = false;\n\tlong[] arraynums_sorted = arraynums.dup;\n\tarraynums_sorted.sort;\n\tforeach(i,num;arraynums_sorted)\n\t{\n\t\tif(i>0)\n\t\t{\n\t\t\tif(arraynums_sorted[i] == arraynums_sorted[i-1])\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tbool bret = false;\n\t\n\tforeach(num; arraynums)\n\t{\n\t\tif(num in arraynums[0..$-1])\n\t\t{\n\t\t\tbret = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn bret;\n}",
    "{\n\tbool bRet = false;\n\tlong[] arraynums_sorted = arraynums.dup;\n\tarraynums_sorted.sort;\n\tforeach(long num; arraynums_sorted)\n\t{\n\t\tif(num == arraynums_sorted[$-1])\n\t\t{\n\t\t\tbRet = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn bRet;\n}",
    "{\n\tint[] array = arraynums.dup;\n\tarray.sort;\n\tint i = 0;\n\twhile (i < array.length)\n\t{\n\t\tif (array[i] == array[i+1])\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\ti++;\n\t}\n\treturn false;\n}",
    "{\n\tbool bRet = false;\n\tforeach(i; 0 .. arraynums.length)\n\t{\n\t\tforeach(j; i+1 .. arraynums.length)\n\t\t{\n\t\t\tif(arraynums[i] == arraynums[j])\n\t\t\t{\n\t\t\t\tbRet = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(bRet)\n\t\t\tbreak;\n\t}\n\treturn bRet;\n}",
    "{\n\tbool result = false;\n\t\n\tforeach(i; 0 .. arraynums.length)\n\t{\n\t\tforeach(j; 0 .. arraynums.length)\n\t\t{\n\t\t\tif(i != j)\n\t\t\t{\n\t\t\t\tif(arraynums[i] == arraynums[j])\n\t\t\t\t{\n\t\t\t\t\tresult = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tforeach(num; arraynums)\n\t{\n\t\tif(arraynums.count(num) > 1)\n\t\t\treturn true;\n\t}\n\treturn false;\n}",
    "{\n\tforeach(i; 0 .. arraynums.length)\n\t{\n\t\tforeach(j; i+1 .. arraynums.length)\n\t\t{\n\t\t\tif(arraynums[i] == arraynums[j])\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tbool bRet = false;\n\tforeach(i; 0 .. arraynums.length)\n\t{\n\t\tforeach(j; 0 .. arraynums.length)\n\t\t{\n\t\t\tif(i != j)\n\t\t\t{\n\t\t\t\tif(arraynums[i] == arraynums[j])\n\t\t\t\t{\n\t\t\t\t\tbRet = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(bRet)\n\t\t{\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn bRet;\n}",
    "{\n\tbool result = false;\n\tforeach(i; 0 .. arraynums.length)\n\t{\n\t\tforeach(j; i+1 .. arraynums.length)\n\t\t{\n\t\t\tif(arraynums[i] == arraynums[j])\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tbool bRet = false;\n\tint[] array = arraynums.dup;\n\tarray.sort;\n\tfor(int i = 0; i < array.length; i++)\n\t{\n\t\tif(i + 1 < array.length)\n\t\t{\n\t\t\tif(array[i] == array[i + 1])\n\t\t\t{\n\t\t\t\tbRet = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn bRet;\n}",
    "{\n\tforeach(i; 0 .. arraynums.length)\n\t{\n\t\tforeach(j; i+1 .. arraynums.length)\n\t\t{\n\t\t\tif(arraynums[i] == arraynums[j])\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tauto result = false;\n\tauto hash = new HashTable!(long, long)();\n\tforeach(num; arraynums)\n\t{\n\t\tif(hash.contains(num))\n\t\t{\n\t\t\tresult = true;\n\t\t\tbreak;\n\t\t}\n\t\telse\n\t\t{\n\t\t\thash[num] = num;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tbool bResult = false;\n\t\n\t//sort the array\n\tarraynums.sort();\n\t\n\t//check for duplicates\n\tfor(int i = 0; i < arraynums.length - 1; i++)\n\t{\n\t\tif(arraynums[i] == arraynums[i + 1])\n\t\t{\n\t\t\tbResult = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn bResult;\n}",
    "{\n\tbool bRet = false;\n\t\n\tif (arraynums.length > 0)\n\t{\n\t\tauto arraynums_sorted = arraynums.dup;\n\t\tarraynums_sorted.sort;\n\t\t\n\t\tfor (int i = 0; i < arraynums_sorted.length - 1; i++)\n\t\t{\n\t\t\tif (arraynums_sorted[i] == arraynums_sorted[i + 1])\n\t\t\t{\n\t\t\t\tbRet = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn bRet;\n}",
    "{\n\tbool bret = false;\n\tint i = 0;\n\tint j = 0;\n\tint len = arraynums.length;\n\t\n\tfor(i = 0; i < len; i++)\n\t{\n\t\tfor(j = i + 1; j < len; j++)\n\t\t{\n\t\t\tif(arraynums[i] == arraynums[j])\n\t\t\t{\n\t\t\t\tbret = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(bret)\n\t\t\tbreak;\n\t}\n\treturn bret;\n}",
    "{\n\tauto array_length = arraynums.length;\n\tauto array_max = arraynums.max;\n\tauto array_min = arraynums.min;\n\t\n\tif (array_length == 0)\n\t{\n\t\treturn false;\n\t}\n\t\n\tif (array_length == 1)\n\t{\n\t\treturn false;\n\t}\n\t\n\tif (array_max == array_min)\n\t{\n\t\treturn true;\n\t}\n\t\n\tif (array_max == array_length - 1)\n\t{\n\t\treturn true;\n\t}\n\t\n\tif (array_min == 0)\n\t{\n\t\treturn true;\n\t}\n\t\n\tauto array_sum = arraynums.sum;\n\tauto array_expected_sum = (array_length * (array_length - 1)) / 2;\n\t\n\tif (array_sum == array_expected_sum)\n\t{\n\t\treturn false;\n\t}\n\t\n\treturn true;\n}",
    "{\n\tbool result = false;\n\tforeach(num; arraynums)\n\t{\n\t\tif(arraynums.count(num) > 1)\n\t\t{\n\t\t\tresult = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tbool bret = false;\n\t\n\tif (arraynums.length > 0)\n\t{\n\t\tlong[] arraynums_sorted = arraynums.dup;\n\t\tarraynums_sorted.sort;\n\t\t\n\t\tfor (int i = 0; i < arraynums_sorted.length - 1; i++)\n\t\t{\n\t\t\tif (arraynums_sorted[i] == arraynums_sorted[i+1])\n\t\t\t{\n\t\t\t\tbret = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn bret;\n}",
    "{\n\tbool result = false;\n\tforeach(num; arraynums)\n\t{\n\t\tif(arraynums.count(num) > 1)\n\t\t{\n\t\t\tresult = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tbool bret = false;\n\tif (arraynums.length > 0) \n\t{\n\t\tauto hash = new HashSet!(long)();\n\t\tforeach (num; arraynums) \n\t\t{\n\t\t\tif (hash.insert(num)) \n\t\t\t{\n\t\t\t\tbret = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn bret;\n}",
    "{\n\tbool bRet = false;\n\t\n\tif(arraynums.length > 0)\n\t{\n\t\tint[] arraynums2 = arraynums.dup;\n\t\tarraynums2.sort;\n\t\t\n\t\tfor(int i = 0; i < arraynums2.length; i++)\n\t\t{\n\t\t\tif(i+1 < arraynums2.length)\n\t\t\t{\n\t\t\t\tif(arraynums2[i] == arraynums2[i+1])\n\t\t\t\t{\n\t\t\t\t\tbRet = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn bRet;\n}",
    "{\n\tforeach(n; arraynums)\n\t{\n\t\tif(arraynums.count(n) > 1)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tbool bRet = false;\n\t\n\tif (arraynums.length == 0)\n\t\treturn bRet;\n\t\n\tauto a = arraynums.dup;\n\ta.sort;\n\t\n\tfor (int i = 0; i < a.length - 1; i++)\n\t{\n\t\tif (a[i] == a[i + 1])\n\t\t{\n\t\t\tbRet = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn bRet;\n}",
    "{\n\tbool[] arraybool = new bool[arraynums.length];\n\tforeach(long num; arraynums)\n\t{\n\t\tif(arraybool[num])\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\tarraybool[num] = true;\n\t}\n\treturn false;\n}",
    "{\n\tbool bfound = false;\n\t\n\tforeach(num; arraynums)\n\t{\n\t\tif(arraynums.count(num) > 1)\n\t\t{\n\t\t\tbfound = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn bfound;\n}",
    "{\n\tbool bRet = false;\n\t\n\tforeach(i; 0 .. arraynums.length)\n\t{\n\t\tforeach(j; 0 .. arraynums.length)\n\t\t{\n\t\t\tif(i != j)\n\t\t\t{\n\t\t\t\tif(arraynums[i] == arraynums[j])\n\t\t\t\t{\n\t\t\t\t\tbRet = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn bRet;\n}",
    "{\n\tbool result = false;\n\tforeach(num; arraynums)\n\t{\n\t\tif(arraynums.count(num) > 1)\n\t\t{\n\t\t\tresult = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tbool result = false;\n\t\n\tforeach(num; arraynums)\n\t{\n\t\tif(arraynums.count(num) > 1)\n\t\t{\n\t\t\tresult = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tbool result = false;\n\t\n\tforeach(num; arraynums)\n\t{\n\t\tif(arraynums.count(num) > 1)\n\t\t{\n\t\t\tresult = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tbool bret = false;\n\tint[] array = arraynums.dup;\n\tarray.sort;\n\tint i = 0;\n\twhile (i < array.length - 1)\n\t{\n\t\tif (array[i] == array[i + 1])\n\t\t{\n\t\t\tbret = true;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\treturn bret;\n}",
    "{\n\tauto set = new Set!long();\n\tforeach(num; arraynums)\n\t{\n\t\tif(set.insert(num))\n\t\t\tcontinue;\n\t\telse\n\t\t\treturn true;\n\t}\n\treturn false;\n}",
    "{\n\tbool hasDuplicate = false;\n\tforeach(num; arraynums)\n\t{\n\t\tif(arraynums.count(num) > 1)\n\t\t{\n\t\t\thasDuplicate = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn hasDuplicate;\n}",
    "{\n\tbool isduplicate = false;\n\tforeach(num; arraynums)\n\t{\n\t\tif(arraynums.count(num) > 1)\n\t\t{\n\t\t\tisduplicate = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn isduplicate;\n}",
    "{\n\tbool bRet = false;\n\t\n\tforeach(i; 0 .. arraynums.length)\n\t{\n\t\tforeach(j; 0 .. arraynums.length)\n\t\t{\n\t\t\tif(i != j)\n\t\t\t{\n\t\t\t\tif(arraynums[i] == arraynums[j])\n\t\t\t\t{\n\t\t\t\t\tbRet = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(bRet)\n\t\t\tbreak;\n\t}\n\treturn bRet;\n}",
    "{\n\tbool duplicate = false;\n\tlong[] arraynums_sorted = arraynums.dup;\n\tarraynums_sorted.sort;\n\tforeach(i, num; arraynums_sorted)\n\t{\n\t\tif(i > 0)\n\t\t{\n\t\t\tif(arraynums_sorted[i] == arraynums_sorted[i-1])\n\t\t\t{\n\t\t\t\tduplicate = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn duplicate;\n}",
    "{\n\tbool result = false;\n\tforeach(num; arraynums)\n\t{\n\t\tif(arraynums.count(num) > 1)\n\t\t{\n\t\t\tresult = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tbool bret = false;\n\t\n\tif (arraynums.length == 0)\n\t{\n\t\treturn bret;\n\t}\n\t\n\tauto setnums = new Set!long();\n\t\n\tforeach (num; arraynums)\n\t{\n\t\tif (setnums.insert(num))\n\t\t{\n\t\t\t\n\t\t}\n\t\telse\n\t\t{\n\t\t\tbret = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn bret;\n}",
    "{\n\tbool bret = false;\n\tif (arraynums.length > 0)\n\t{\n\t\tauto setnums = new Set!int();\n\t\tforeach (num; arraynums)\n\t\t{\n\t\t\tif (setnums.insert(num))\n\t\t\t{\n\t\t\t\tbret = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn bret;\n}",
    "{\n\tbool bresult = false;\n\tforeach(long num; arraynums)\n\t{\n\t\tif(arraynums.count(num) > 1)\n\t\t{\n\t\t\tbresult = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn bresult;\n}",
    "{\n\tbool result = false;\n\tforeach(num; arraynums)\n\t{\n\t\tif(arraynums.count(num) > 1)\n\t\t{\n\t\t\tresult = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tbool bRet = false;\n\t\n\tif (arraynums.length > 1)\n\t{\n\t\tauto setnums = new HashSet!long();\n\t\t\n\t\tforeach(num; arraynums)\n\t\t{\n\t\t\tif (setnums.insert(num))\n\t\t\t{\n\t\t\t\t// do nothing\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbRet = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn bRet;\n}",
    "{\n\tint i;\n\tint j;\n\tbool bfound = false;\n\tfor (i = 0; i < arraynums.length; i++)\n\t{\n\t\tfor (j = i + 1; j < arraynums.length; j++)\n\t\t{\n\t\t\tif (arraynums[i] == arraynums[j])\n\t\t\t{\n\t\t\t\tbfound = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (bfound)\n\t\t\tbreak;\n\t}\n\treturn bfound;\n}",
    "{\n\tbool bRet = false;\n\t\n\tforeach(num; arraynums)\n\t{\n\t\tif(arraynums.count(num) > 1)\n\t\t{\n\t\t\tbRet = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn bRet;\n}",
    "{\n\tint[] array = arraynums.dup;\n\tarray.sort;\n\tforeach(int i; 0..array.length-1)\n\t{\n\t\tif(array[i] == array[i+1])\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tbool bRet = false;\n\tint[] array = arraynums.dup;\n\tarray.sort;\n\t\n\tfor(int i = 0; i < array.length - 1; i++)\n\t{\n\t\tif(array[i] == array[i + 1])\n\t\t{\n\t\t\tbRet = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn bRet;\n}",
    "{\n\tbool bret = false;\n\t\n\tif (arraynums.length > 0)\n\t{\n\t\tint[] arraynums_sorted = arraynums.dup;\n\t\tarraynums_sorted.sort;\n\t\t\n\t\tfor (int i = 0; i < arraynums_sorted.length - 1; i++)\n\t\t{\n\t\t\tif (arraynums_sorted[i] == arraynums_sorted[i+1])\n\t\t\t{\n\t\t\t\tbret = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn bret;\n}",
    "{\n\tbool result = false;\n\tforeach(i; 0 .. arraynums.length)\n\t{\n\t\tforeach(j; 0 .. arraynums.length)\n\t\t{\n\t\t\tif(i != j)\n\t\t\t{\n\t\t\t\tif(arraynums[i] == arraynums[j])\n\t\t\t\t{\n\t\t\t\t\tresult = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tbool bret = false;\n\tif (arraynums.length > 0)\n\t{\n\t\tint[] array = arraynums.dup;\n\t\tarray.sort;\n\t\tfor (int i = 0; i < array.length - 1; i++)\n\t\t{\n\t\t\tif (array[i] == array[i+1])\n\t\t\t{\n\t\t\t\tbret = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn bret;\n}",
    "{\n\tbool bRet = false;\n\t\n\tforeach(num; arraynums)\n\t{\n\t\tif(arraynums.count(num) > 1)\n\t\t{\n\t\t\tbRet = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn bRet;\n}",
    "{\n\tbool ret = false;\n\tforeach(i; arraynums)\n\t{\n\t\tforeach(j; arraynums)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\tret = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn ret;\n}",
    "{\n\tbool bFound = false;\n\t\n\tforeach(num; arraynums)\n\t{\n\t\tif(arraynums.count(num) > 1)\n\t\t{\n\t\t\tbFound = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn bFound;\n}",
    "{\n\tbool bret = false;\n\t\n\tif (arraynums.length == 0)\n\t\treturn bret;\n\t\n\tauto setnums = new HashSet!int();\n\t\n\tforeach (num; arraynums)\n\t{\n\t\tif (setnums.insert(num))\n\t\t{\n\t\t\t// do nothing\n\t\t}\n\t\telse\n\t\t{\n\t\t\tbret = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn bret;\n}",
    "{\n\tint[] array = arraynums.dup;\n\tint i, j;\n\tint n = array.length;\n\tfor (i = 0; i < n; i++) \n\t{\n\t\tfor (j = i + 1; j < n; j++) \n\t\t{\n\t\t\tif (array[i] == array[j]) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tbool bret = false;\n\tint[] arraynums_sorted = arraynums.dup;\n\tarraynums_sorted.sort();\n\tforeach(int i, int j; arraynums_sorted)\n\t{\n\t\tif(i == j)\n\t\t{\n\t\t\tbret = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn bret;\n}",
    "{\n\tforeach(i; 0 .. arraynums.length)\n\t{\n\t\tforeach(j; i+1 .. arraynums.length)\n\t\t{\n\t\t\tif(arraynums[i] == arraynums[j])\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tbool b = false;\n\tforeach(i; 0 .. arraynums.length)\n\t{\n\t\tforeach(j; i+1 .. arraynums.length)\n\t\t{\n\t\t\tif(arraynums[i] == arraynums[j])\n\t\t\t{\n\t\t\t\tb = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn b;\n}",
    "{\n\tbool result = false;\n\t\n\tforeach(i; 0 .. arraynums.length)\n\t{\n\t\tforeach(j; i+1 .. arraynums.length)\n\t\t{\n\t\t\tif(arraynums[i] == arraynums[j])\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tforeach(i; 0 .. arraynums.length)\n\t{\n\t\tforeach(j; 0 .. arraynums.length)\n\t\t{\n\t\t\tif(i != j)\n\t\t\t{\n\t\t\t\tif(arraynums[i] == arraynums[j])\n\t\t\t\t{\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tbool bRet = false;\n\t\n\tif (arraynums.length > 0)\n\t{\n\t\tauto hash = new HashSet!long();\n\t\t\n\t\tforeach (num; arraynums)\n\t\t{\n\t\t\tif (hash.insert(num))\n\t\t\t{\n\t\t\t\t// do nothing\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbRet = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn bRet;\n}",
    "{\n\tbool bRet = false;\n\tint[] array = arraynums.dup;\n\tarray.sort;\n\tfor(int i = 0; i < array.length-1; i++)\n\t{\n\t\tif(array[i] == array[i+1])\n\t\t{\n\t\t\tbRet = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn bRet;\n}",
    "{\n\tauto hash = new HashSet!int;\n\tforeach(num; arraynums)\n\t{\n\t\tif(hash.insert(num))\n\t\t\tcontinue;\n\t\telse\n\t\t\treturn true;\n\t}\n\treturn false;\n}",
    "{\n\tbool result = false;\n\t\n\tforeach(i; 0 .. arraynums.length)\n\t{\n\t\tforeach(j; i+1 .. arraynums.length)\n\t\t{\n\t\t\tif(arraynums[i] == arraynums[j])\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tbool bret = false;\n\t\n\tif (arraynums.length > 0)\n\t{\n\t\tauto setnums = new HashSet!long();\n\t\t\n\t\tforeach (num; arraynums)\n\t\t{\n\t\t\tif (setnums.insert(num))\n\t\t\t{\n\t\t\t\t// do nothing\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbret = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn bret;\n}",
    "{\n\tbool hasduplicate = false;\n\tforeach(num; arraynums)\n\t{\n\t\tif(arraynums.count(num) > 1)\n\t\t{\n\t\t\thasduplicate = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn hasduplicate;\n}",
    "{\n\tforeach(num; arraynums)\n\t{\n\t\tif(arraynums.count(num) > 1)\n\t\t\treturn true;\n\t}\n\treturn false;\n}",
    "{\n\tforeach(i;0..arraynums.length)\n\t{\n\t\tforeach(j;0..arraynums.length)\n\t\t{\n\t\t\tif(arraynums[i] == arraynums[j] && i != j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tbool result = false;\n\tforeach(i; 0..arraynums.length)\n\t{\n\t\tforeach(j; 0..arraynums.length)\n\t\t{\n\t\t\tif(i != j && arraynums[i] == arraynums[j])\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tbool result = false;\n\t\n\tforeach(num; arraynums)\n\t{\n\t\tif(arraynums.count(num) > 1)\n\t\t{\n\t\t\tresult = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tauto set = new Set!(long)();\n\tforeach(num; arraynums)\n\t{\n\t\tif(set.insert(num))\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tbool bRet = false;\n\t\n\tforeach(num; arraynums)\n\t{\n\t\tif(arraynums.count(num) > 1)\n\t\t{\n\t\t\tbRet = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn bRet;\n}",
    "{\n\tbool result = false;\n\tforeach(num; arraynums)\n\t{\n\t\tif(arraynums.count(num) > 1)\n\t\t{\n\t\t\tresult = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tbool bfound = false;\n\tforeach(long num; arraynums)\n\t{\n\t\tif(arraynums.count(num) > 1)\n\t\t{\n\t\t\tbfound = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn bfound;\n}",
    "{\n\tbool bret = false;\n\tint[] array = arraynums.dup;\n\tarray.sort;\n\tfor(int i = 0; i < array.length - 1; i++)\n\t{\n\t\tif(array[i] == array[i + 1])\n\t\t{\n\t\t\tbret = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn bret;\n}",
    "{\n\tbool result = false;\n\t\n\tforeach(num; arraynums)\n\t{\n\t\tif(arraynums.count(num) > 1)\n\t\t{\n\t\t\tresult = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tbool bRet = false;\n\tauto hash = new HashSet!int();\n\tforeach(num; arraynums)\n\t{\n\t\tif(hash.insert(num))\n\t\t{\n\t\t\tcontinue;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tbRet = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn bRet;\n}",
    "{\n\tbool bRet = false;\n\t\n\tforeach(num; arraynums)\n\t{\n\t\tif(arraynums.count(num) > 1)\n\t\t{\n\t\t\tbRet = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn bRet;\n}",
    "{\n\tbool bRet = false;\n\t\n\tforeach(num; arraynums)\n\t{\n\t\tif(arraynums.count(num) > 1)\n\t\t{\n\t\t\tbRet = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn bRet;\n}",
    "{\n\tauto array = arraynums.dup;\n\tarray.sort;\n\tfor (size_t i = 0; i < array.length; i++)\n\t{\n\t\tif (array[i] == array[i+1])\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tbool result = false;\n\tlong[] arraynums_sorted = arraynums.dup;\n\tarraynums_sorted.sort;\n\tforeach(i, num; arraynums_sorted)\n\t{\n\t\tif(i > 0)\n\t\t{\n\t\t\tif(arraynums_sorted[i] == arraynums_sorted[i-1])\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tbool ret = false;\n\t\n\tforeach(i; 0 .. arraynums.length)\n\t{\n\t\tforeach(j; i+1 .. arraynums.length)\n\t\t{\n\t\t\tif(arraynums[i] == arraynums[j])\n\t\t\t{\n\t\t\t\tret = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(ret)\n\t\t\tbreak;\n\t}\n\treturn ret;\n}",
    "{\n\tforeach(i; 0 .. arraynums.length)\n\t{\n\t\tforeach(j; 0 .. arraynums.length)\n\t\t{\n\t\t\tif(i != j)\n\t\t\t{\n\t\t\t\tif(arraynums[i] == arraynums[j])\n\t\t\t\t{\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tbool b = false;\n\tforeach(i; arraynums)\n\t{\n\t\tforeach(j; arraynums)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\tb = true;\n\t\t\t}\n\t\t}\n\t}\n\treturn b;\n}",
    "{\n\tint[] array = arraynums.dup;\n\tarray.sort;\n\tint i = 0;\n\tint j = 1;\n\twhile (i < array.length)\n\t{\n\t\tif (array[i] == array[j])\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\ti++;\n\t\tj++;\n\t}\n\treturn false;\n}",
    "{\n\tbool bresult = false;\n\tauto setnums = new Set!long();\n\tforeach(num; arraynums)\n\t{\n\t\tif(setnums.insert(num))\n\t\t{\n\t\t\tbresult = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn bresult;\n}",
    "{\n\tforeach(i; arraynums)\n\t{\n\t\tforeach(j; arraynums)\n\t\t{\n\t\t\tif(i == j && i != j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tauto arraynums_sorted = arraynums.dup;\n\tarraynums_sorted.sort;\n\t\n\tfor (size_t i = 0; i < arraynums_sorted.length - 1; i++) \n\t{\n\t\tif (arraynums_sorted[i] == arraynums_sorted[i+1])\n\t\t\treturn true;\n\t}\n\treturn false;\n}",
    "{\n\tbool result = false;\n\tforeach(num; arraynums)\n\t{\n\t\tif(arraynums.count(num) > 1)\n\t\t{\n\t\t\tresult = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tbool result = false;\n\tforeach (n; arraynums)\n\t{\n\t\tif (arraynums.count(n) > 1)\n\t\t{\n\t\t\tresult = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tbool result = false;\n\tforeach(i, num; arraynums)\n\t{\n\t\tforeach(j, num2; arraynums)\n\t\t{\n\t\t\tif(i != j)\n\t\t\t{\n\t\t\t\tif(num == num2)\n\t\t\t\t{\n\t\t\t\t\tresult = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tbool bret = false;\n\tif (arraynums.length > 0) \n\t{\n\t\tauto setnums = new HashSet!long();\n\t\tforeach (num; arraynums) \n\t\t{\n\t\t\tif (setnums.insert(num)) \n\t\t\t{\n\t\t\t\tbret = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn bret;\n}",
    "{\n\tauto set = new Set!int();\n\tforeach(num; arraynums)\n\t{\n\t\tif(set.insert(num))\n\t\t\tcontinue;\n\t\telse\n\t\t\treturn true;\n\t}\n\treturn false;\n}",
    "{\n\tbool retval = false;\n\t\n\tforeach(num; arraynums)\n\t{\n\t\tif(arraynums.count(num) > 1)\n\t\t{\n\t\t\tretval = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn retval;\n}",
    "{\n\tauto hash = new HashTable!(long, long)();\n\tforeach(num; arraynums)\n\t{\n\t\tif(hash.contains(num))\n\t\t\treturn true;\n\t\telse\n\t\t\thash[num] = num;\n\t}\n\treturn false;\n}",
    "{\n\tbool result = false;\n\tforeach(i; arraynums)\n\t{\n\t\tforeach(j; arraynums)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tbool result = false;\n\t\n\tforeach(num; arraynums)\n\t{\n\t\tif(arraynums.count(num) > 1)\n\t\t{\n\t\t\tresult = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tbool result = false;\n\tforeach(num; arraynums)\n\t{\n\t\tif(arraynums.count(num) > 1)\n\t\t{\n\t\t\tresult = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tbool bret = false;\n\t\n\tif(arraynums.length > 1)\n\t{\n\t\tforeach(i; 0 .. arraynums.length)\n\t\t{\n\t\t\tforeach(j; i+1 .. arraynums.length)\n\t\t\t{\n\t\t\t\tif(arraynums[i] == arraynums[j])\n\t\t\t\t{\n\t\t\t\t\tbret = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(bret)\n\t\t\t\tbreak;\n\t\t}\n\t}\n\treturn bret;\n}",
    "{\n\tbool bret = false;\n\tauto hash = new HashSet!(long)();\n\tforeach(num; arraynums)\n\t{\n\t\tif(hash.insert(num))\n\t\t{\n\t\t\tbret = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn bret;\n}",
    "{\n\tbool ret = false;\n\t\n\tforeach(i; 0 .. arraynums.length)\n\t{\n\t\tforeach(j; i+1 .. arraynums.length)\n\t\t{\n\t\t\tif(arraynums[i] == arraynums[j])\n\t\t\t{\n\t\t\t\tret = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn ret;\n}",
    "{\n\tauto array_length = arraynums.length;\n\tauto array_sorted = arraynums.dup;\n\tarray_sorted.sort;\n\tfor (int i = 0; i < array_length - 1; i++) \n\t{\n\t\tif (array_sorted[i] == array_sorted[i + 1])\n\t\t\treturn true;\n\t}\n\treturn false;\n}",
    "{\n\tbool result = false;\n\tforeach(i; 0 .. arraynums.length)\n\t{\n\t\tforeach(j; 0 .. arraynums.length)\n\t\t{\n\t\t\tif(i != j)\n\t\t\t{\n\t\t\t\tif(arraynums[i] == arraynums[j])\n\t\t\t\t{\n\t\t\t\t\tresult = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tforeach(i; 0 .. arraynums.length)\n\t{\n\t\tforeach(j; i+1 .. arraynums.length)\n\t\t{\n\t\t\tif(arraynums[i] == arraynums[j])\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tbool bret = false;\n\tint[] array = arraynums.dup;\n\tarray.sort;\n\tfor (int i = 0; i < array.length - 1; i++)\n\t{\n\t\tif (array[i] == array[i + 1])\n\t\t{\n\t\t\tbret = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn bret;\n}",
    "{\n\tbool bRet = false;\n\tforeach(i; 0 .. arraynums.length)\n\t{\n\t\tforeach(j; i+1 .. arraynums.length)\n\t\t{\n\t\t\tif(arraynums[i] == arraynums[j])\n\t\t\t{\n\t\t\t\tbRet = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(bRet)\n\t\t\tbreak;\n\t}\n\treturn bRet;\n}",
    "{\n\tbool result = false;\n\t\n\tforeach(i; 0 .. arraynums.length)\n\t{\n\t\tforeach(j; i+1 .. arraynums.length)\n\t\t{\n\t\t\tif(arraynums[i] == arraynums[j])\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tbool result = false;\n\tforeach(num; arraynums)\n\t{\n\t\tif(arraynums.count(num) > 1)\n\t\t{\n\t\t\tresult = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tauto array_length = arraynums.length;\n\tauto array_length_minus_one = array_length - 1;\n\t\n\tfor(int i = 0; i < array_length_minus_one; i++)\n\t{\n\t\tfor(int j = i + 1; j < array_length; j++)\n\t\t{\n\t\t\tif(arraynums[i] == arraynums[j])\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tforeach(i; arraynums)\n\t{\n\t\tforeach(j; arraynums)\n\t\t{\n\t\t\tif(i != j)\n\t\t\t{\n\t\t\t\tif(i == j)\n\t\t\t\t{\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tauto arraynums_length = arraynums.length;\n\tauto arraynums_sorted = arraynums.dup;\n\tarraynums_sorted.sort;\n\t\n\tfor(int i = 0; i < arraynums_length - 1; i++)\n\t{\n\t\tif(arraynums_sorted[i] == arraynums_sorted[i+1])\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tforeach(i,j; arraynums)\n\t{\n\t\tif(i != j)\n\t\t{\n\t\t\tif(arraynums[i] == arraynums[j])\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tbool bRet = false;\n\tint[] arraycount = new int[arraynums.length];\n\tforeach (int i; arraynums)\n\t{\n\t\tarraycount[i]++;\n\t\tif (arraycount[i] > 1)\n\t\t{\n\t\t\tbRet = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn bRet;\n}",
    "{\n\tbool result = false;\n\tforeach(num; arraynums)\n\t{\n\t\tif(arraynums.count(num) > 1)\n\t\t{\n\t\t\tresult = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tbool result = false;\n\tforeach(num; arraynums)\n\t{\n\t\tif(arraynums.count(num) > 1)\n\t\t{\n\t\t\tresult = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tbool result = false;\n\tforeach(i;0..arraynums.length)\n\t{\n\t\tforeach(j;0..arraynums.length)\n\t\t{\n\t\t\tif(i != j)\n\t\t\t{\n\t\t\t\tif(arraynums[i] == arraynums[j])\n\t\t\t\t{\n\t\t\t\t\tresult = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tbool bFound = false;\n\t\n\tforeach(i; 0 .. arraynums.length)\n\t{\n\t\tforeach(j; i+1 .. arraynums.length)\n\t\t{\n\t\t\tif(arraynums[i] == arraynums[j])\n\t\t\t{\n\t\t\t\tbFound = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn bFound;\n}",
    "{\n\tbool result = false;\n\tforeach(num; arraynums)\n\t{\n\t\tif(arraynums.count(num) > 1)\n\t\t{\n\t\t\tresult = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tbool b = false;\n\tforeach(i,n; arraynums)\n\t{\n\t\tif(n == arraynums[i])\n\t\t{\n\t\t\tb = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn b;\n}",
    "{\n\tbool result = false;\n\t\n\tforeach(i; 0 .. arraynums.length)\n\t{\n\t\tforeach(j; i+1 .. arraynums.length)\n\t\t{\n\t\t\tif(arraynums[i] == arraynums[j])\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tbool result = false;\n\tforeach(num; arraynums)\n\t{\n\t\tif(arraynums.count(num) > 1)\n\t\t{\n\t\t\tresult = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tbool result = false;\n\t\n\tforeach(i; 0 .. arraynums.length)\n\t{\n\t\tforeach(j; 0 .. arraynums.length)\n\t\t{\n\t\t\tif(i != j)\n\t\t\t{\n\t\t\t\tif(arraynums[i] == arraynums[j])\n\t\t\t\t{\n\t\t\t\t\tresult = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tbool bRet = false;\n\tint[] nums = arraynums.dup;\n\tnums.sort;\n\tfor (int i = 0; i < nums.length; i++)\n\t{\n\t\tif (i + 1 < nums.length)\n\t\t{\n\t\t\tif (nums[i] == nums[i+1])\n\t\t\t{\n\t\t\t\tbRet = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn bRet;\n}",
    "{\n\tbool result = false;\n\tint[] array = arraynums.dup;\n\tarray.sort;\n\tfor (int i = 0; i < array.length; i++)\n\t{\n\t\tif (array[i] == array[i+1])\n\t\t{\n\t\t\tresult = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tbool isduplicate = false;\n\tforeach(i; 0 .. arraynums.length)\n\t{\n\t\tforeach(j; 0 .. arraynums.length)\n\t\t{\n\t\t\tif(i != j)\n\t\t\t{\n\t\t\t\tif(arraynums[i] == arraynums[j])\n\t\t\t\t{\n\t\t\t\t\tisduplicate = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn isduplicate;\n}",
    "{\n\tbool bret = false;\n\t\n\tint[] array = arraynums.dup;\n\t\n\tarray.sort;\n\t\n\tfor (int i = 0; i < array.length; i++)\n\t{\n\t\tif (array[i] == array[i+1])\n\t\t{\n\t\t\tbret = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn bret;\n}",
    "{\n\tbool result = false;\n\tforeach(num; arraynums)\n\t{\n\t\tif(arraynums.count(num) > 1)\n\t\t{\n\t\t\tresult = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tbool result = false;\n\tforeach(i; 0 .. arraynums.length)\n\t{\n\t\tforeach(j; 0 .. arraynums.length)\n\t\t{\n\t\t\tif(i != j)\n\t\t\t{\n\t\t\t\tif(arraynums[i] == arraynums[j])\n\t\t\t\t{\n\t\t\t\t\tresult = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tbool result = false;\n\t\n\tforeach(i; 0 .. arraynums.length)\n\t{\n\t\tforeach(j; 0 .. arraynums.length)\n\t\t{\n\t\t\tif(i != j && arraynums[i] == arraynums[j])\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(result)\n\t\t{\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tforeach(i; 0 .. arraynums.length)\n\t{\n\t\tforeach(j; 0 .. arraynums.length)\n\t\t{\n\t\t\tif(i != j)\n\t\t\t{\n\t\t\t\tif(arraynums[i] == arraynums[j])\n\t\t\t\t{\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tbool bret = false;\n\tint i = 0;\n\tint j = 0;\n\tfor(i = 0; i < arraynums.length; i++)\n\t{\n\t\tfor(j = i + 1; j < arraynums.length; j++)\n\t\t{\n\t\t\tif(arraynums[i] == arraynums[j])\n\t\t\t{\n\t\t\t\tbret = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(bret)\n\t\t{\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn bret;\n}",
    "{\n\tbool bresult = false;\n\tforeach(n; arraynums)\n\t{\n\t\tif(arraynums.count(n) > 1)\n\t\t{\n\t\t\tbresult = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn bresult;\n}",
    "{\n\tint[] arraynums_int = arraynums.map!(a => cast(int)a);\n\treturn arraynums_int.length != arraynums_int.dup.length;\n}",
    "{\n\tbool result = false;\n\tforeach(num; arraynums)\n\t{\n\t\tif(arraynums.count(num) > 1)\n\t\t{\n\t\t\tresult = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tbool result = false;\n\tforeach(i; 0 .. arraynums.length)\n\t{\n\t\tforeach(j; 0 .. arraynums.length)\n\t\t{\n\t\t\tif(arraynums[i] == arraynums[j] && i != j)\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tbool duplicate = false;\n\tforeach(i; 0 .. arraynums.length)\n\t{\n\t\tforeach(j; 0 .. arraynums.length)\n\t\t{\n\t\t\tif(i != j && arraynums[i] == arraynums[j])\n\t\t\t{\n\t\t\t\tduplicate = true;\n\t\t\t}\n\t\t}\n\t}\n\treturn duplicate;\n}",
    "{\n\tbool result = false;\n\t\n\tforeach(long num; arraynums)\n\t{\n\t\tif(arraynums.count(num) > 1)\n\t\t{\n\t\t\tresult = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tforeach(i;0..arraynums.length)\n\t{\n\t\tforeach(j;0..arraynums.length)\n\t\t{\n\t\t\tif(i!=j && arraynums[i]==arraynums[j])\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tauto set = new Set!long();\n\tforeach(num; arraynums)\n\t{\n\t\tif(set.insert(num))\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tbool result = false;\n\tforeach(num; arraynums)\n\t{\n\t\tif(arraynums.count(num) > 1)\n\t\t{\n\t\t\tresult = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tbool bFound = false;\n\tforeach(i; 0 .. arraynums.length)\n\t{\n\t\tforeach(j; i+1 .. arraynums.length)\n\t\t{\n\t\t\tif(arraynums[i] == arraynums[j])\n\t\t\t{\n\t\t\t\tbFound = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(bFound)\n\t\t\tbreak;\n\t}\n\treturn bFound;\n}",
    "{\n\tbool bret = false;\n\t\n\tif (arraynums.length == 0)\n\t{\n\t\treturn bret;\n\t}\n\t\n\tauto setnums = new Set!long;\n\t\n\tforeach (num; arraynums)\n\t{\n\t\tif (setnums.insert(num))\n\t\t{\n\t\t\tcontinue;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tbret = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn bret;\n}",
    "{\n\tbool duplicate = false;\n\tforeach(i; 0 .. arraynums.length)\n\t{\n\t\tforeach(j; 0 .. arraynums.length)\n\t\t{\n\t\t\tif(i != j)\n\t\t\t{\n\t\t\t\tif(arraynums[i] == arraynums[j])\n\t\t\t\t{\n\t\t\t\t\tduplicate = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(duplicate)\n\t\t{\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn duplicate;\n}",
    "{\n\tforeach(i; 0..arraynums.length)\n\t{\n\t\tforeach(j; 0..arraynums.length)\n\t\t{\n\t\t\tif(i != j)\n\t\t\t{\n\t\t\t\tif(arraynums[i] == arraynums[j])\n\t\t\t\t{\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tbool result = false;\n\t\n\tforeach(i; 0 .. arraynums.length)\n\t{\n\t\tforeach(j; 0 .. arraynums.length)\n\t\t{\n\t\t\tif(i != j)\n\t\t\t{\n\t\t\t\tif(arraynums[i] == arraynums[j])\n\t\t\t\t{\n\t\t\t\t\tresult = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tbool result = false;\n\tforeach(i; 0 .. arraynums.length)\n\t{\n\t\tforeach(j; 0 .. arraynums.length)\n\t\t{\n\t\t\tif(arraynums[i] == arraynums[j] && i != j)\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tbool bret = false;\n\t\n\tif(arraynums.length > 0)\n\t{\n\t\tauto hash = new HashTable!(long, long)();\n\t\t\n\t\tforeach(num; arraynums)\n\t\t{\n\t\t\tif(hash.contains(num))\n\t\t\t{\n\t\t\t\tbret = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\thash[num] = num;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn bret;\n}",
    "{\n\tbool[] found = new bool[arraynums.length];\n\tforeach(num; arraynums)\n\t{\n\t\tif(found[num])\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\tfound[num] = true;\n\t}\n\treturn false;\n}",
    "{\n\tbool bret = false;\n\tint[] array = arraynums.dup;\n\tarray.sort;\n\tfor (int i = 0; i < array.length - 1; i++)\n\t{\n\t\tif (array[i] == array[i + 1])\n\t\t{\n\t\t\tbret = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn bret;\n}",
    "{\n\tbool bret = false;\n\tint[] nums = arraynums.dup;\n\tint[] nums2 = arraynums.dup;\n\t\n\tnums.sort();\n\tnums2.sort;\n\t\n\tforeach(i, num; nums)\n\t{\n\t\tif(i > 0)\n\t\t{\n\t\t\tif(nums[i] == nums[i-1])\n\t\t\t{\n\t\t\t\tbret = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn bret;\n}",
    "{\n\tbool bret = false;\n\tint i = 0;\n\tint j = 0;\n\tint len = arraynums.length;\n\tfor (i = 0; i < len; i++)\n\t{\n\t\tfor (j = i + 1; j < len; j++)\n\t\t{\n\t\t\tif (arraynums[i] == arraynums[j])\n\t\t\t{\n\t\t\t\tbret = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (bret)\n\t\t{\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn bret;\n}",
    "{\n\tbool result = false;\n\t\n\tforeach(num; arraynums)\n\t{\n\t\tif(arraynums.count(num) > 1)\n\t\t{\n\t\t\tresult = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tbool bret = false;\n\tif (arraynums.length > 0)\n\t{\n\t\tauto setnums = new HashSet!int();\n\t\tforeach (num; arraynums)\n\t\t{\n\t\t\tif (setnums.insert(num))\n\t\t\t{\n\t\t\t\tbret = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn bret;\n}",
    "{\n\tbool result = false;\n\tlong[] arraynums_sorted = arraynums.dup;\n\tarraynums_sorted.sort;\n\tfor (int i = 0; i < arraynums_sorted.length; i++)\n\t{\n\t\tif (arraynums_sorted[i] == arraynums_sorted[i+1])\n\t\t{\n\t\t\tresult = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tbool bfound = false;\n\tforeach(num; arraynums)\n\t{\n\t\tif(arraynums.count(num) > 1)\n\t\t{\n\t\t\tbfound = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn bfound;\n}",
    "{\n\tbool result = false;\n\tforeach(num; arraynums)\n\t{\n\t\tif(arraynums.count(num) > 1)\n\t\t{\n\t\t\tresult = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tbool bRet = false;\n\t\n\tforeach(i; 0 .. arraynums.length)\n\t{\n\t\tforeach(j; i+1 .. arraynums.length)\n\t\t{\n\t\t\tif(arraynums[i] == arraynums[j])\n\t\t\t{\n\t\t\t\tbRet = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(bRet)\n\t\t\tbreak;\n\t}\n\treturn bRet;\n}",
    "{\n\tbool bResult = false;\n\t\n\t//sort the array\n\tsort(arraynums);\n\t\n\t//iterate through the array and check for duplicates\n\tfor (int i = 0; i < arraynums.length; i++)\n\t{\n\t\tif (i+1 < arraynums.length)\n\t\t{\n\t\t\tif (arraynums[i] == arraynums[i+1])\n\t\t\t{\n\t\t\t\tbResult = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn bResult;\n}",
    "{\n\tbool bRet = false;\n\t\n\tif(arraynums.length > 0)\n\t{\n\t\tint[] arraynums_sorted = arraynums.dup;\n\t\tarraynums_sorted.sort();\n\t\t\n\t\tfor(int i = 0; i < arraynums_sorted.length - 1; i++)\n\t\t{\n\t\t\tif(arraynums_sorted[i] == arraynums_sorted[i + 1])\n\t\t\t{\n\t\t\t\tbRet = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn bRet;\n}",
    "{\n\tbool bRet = false;\n\t\n\tforeach(num; arraynums)\n\t{\n\t\tif(arraynums.count(num) > 1)\n\t\t{\n\t\t\tbRet = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn bRet;\n}",
    "{\n\tbool bRet = false;\n\tint[] array = arraynums.dup;\n\tsort(array);\n\tfor (int i = 0; i < array.length - 1; i++)\n\t{\n\t\tif (array[i] == array[i + 1])\n\t\t{\n\t\t\tbRet = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn bRet;\n}",
    "{\n\tauto result = false;\n\tauto set = new HashSet!(long)();\n\tforeach(num; arraynums)\n\t{\n\t\tif(set.insert(num))\n\t\t{\n\t\t\tresult = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tbool result = false;\n\tforeach(i; 0 .. arraynums.length)\n\t{\n\t\tforeach(j; i+1 .. arraynums.length)\n\t\t{\n\t\t\tif(arraynums[i] == arraynums[j])\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(result)\n\t\t\tbreak;\n\t}\n\treturn result;\n}",
    "{\n\tint[] array = arraynums.dup;\n\tint i, j;\n\tint len = array.length;\n\tbool result = false;\n\tfor (i = 0; i < len; i++)\n\t{\n\t\tfor (j = i + 1; j < len; j++)\n\t\t{\n\t\t\tif (array[i] == array[j])\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tbool duplicate = false;\n\t\n\tforeach(i; 0 .. arraynums.length)\n\t{\n\t\tforeach(j; 0 .. arraynums.length)\n\t\t{\n\t\t\tif(arraynums[i] == arraynums[j] && i != j)\n\t\t\t{\n\t\t\t\tduplicate = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(duplicate)\n\t\t\tbreak;\n\t}\n\t\n\treturn duplicate;\n}",
    "{\n\tbool result = false;\n\tforeach(num; arraynums)\n\t{\n\t\tif(arraynums.count(num) > 1)\n\t\t{\n\t\t\tresult = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tforeach(i; 0 .. arraynums.length)\n\t{\n\t\tforeach(j; 0 .. arraynums.length)\n\t\t{\n\t\t\tif(i != j)\n\t\t\t{\n\t\t\t\tif(arraynums[i] == arraynums[j])\n\t\t\t\t{\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tbool bRet = false;\n\t\n\tif (arraynums.length > 0)\n\t{\n\t\tauto a = arraynums.dup;\n\t\ta.sort;\n\t\t\n\t\tfor (int i = 0; i < a.length-1; i++)\n\t\t{\n\t\t\tif (a[i] == a[i+1])\n\t\t\t{\n\t\t\t\tbRet = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn bRet;\n}",
    "{\n\tbool result = false;\n\t\n\tforeach(i; 0 .. arraynums.length)\n\t{\n\t\tforeach(j; i+1 .. arraynums.length)\n\t\t{\n\t\t\tif(arraynums[i] == arraynums[j])\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tbool bDuplicate = false;\n\t\n\tforeach(i; 0 .. arraynums.length)\n\t{\n\t\tforeach(j; i+1 .. arraynums.length)\n\t\t{\n\t\t\tif(arraynums[i] == arraynums[j])\n\t\t\t{\n\t\t\t\tbDuplicate = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(bDuplicate)\n\t\t\tbreak;\n\t}\n\treturn bDuplicate;\n}",
    "{\n\tbool bret = false;\n\t\n\tauto setnums = new HashSet!long();\n\t\n\tforeach(num; arraynums)\n\t{\n\t\tif(setnums.insert(num))\n\t\t{\n\t\t\tbret = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn bret;\n}",
    "{\n\tbool result = false;\n\t\n\tforeach(i; 0 .. arraynums.length)\n\t{\n\t\tforeach(j; 0 .. arraynums.length)\n\t\t{\n\t\t\tif(arraynums[i] == arraynums[j] && i != j)\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tbool bRet = false;\n\tforeach(num; arraynums)\n\t{\n\t\tif(arraynums.count(num) > 1)\n\t\t{\n\t\t\tbRet = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn bRet;\n}",
    "{\n\tauto len = arraynums.length;\n\tauto max = maxElement(arraynums);\n\tauto min = minElement(arraynums);\n\t\n\tif (len != (max - min + 1)) \n\t{\n\t\treturn true;\n\t}\n\t\n\treturn false;\n}",
    "{\n\tbool result = false;\n\tlong[] nums = arraynums;\n\tlong[] nums_sorted = nums.dup;\n\tnums_sorted.sort;\n\tfor (int i = 0; i < nums_sorted.length; i++)\n\t{\n\t\tif (nums_sorted[i] == nums_sorted[i+1])\n\t\t{\n\t\t\tresult = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tforeach(num; arraynums)\n\t{\n\t\tif(arraynums.count(num) > 1)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tbool bRet = false;\n\t\n\tif (arraynums.length > 0)\n\t{\n\t\tauto hash = new HashSet!int();\n\t\t\n\t\tforeach (num; arraynums)\n\t\t{\n\t\t\tif (hash.insert(num))\n\t\t\t{\n\t\t\t\t// do nothing\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbRet = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn bRet;\n}",
    "{\n\tforeach(i; 0 .. arraynums.length)\n\t{\n\t\tforeach(j; 0 .. arraynums.length)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t\tcontinue;\n\t\t\tif(arraynums[i] == arraynums[j])\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tbool result = false;\n\t\n\tforeach(i; 0 .. arraynums.length)\n\t{\n\t\tforeach(j; i+1 .. arraynums.length)\n\t\t{\n\t\t\tif(arraynums[i] == arraynums[j])\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tbool result = false;\n\tforeach(i; 0 .. arraynums.length)\n\t{\n\t\tforeach(j; 0 .. arraynums.length)\n\t\t{\n\t\t\tif(i != j && arraynums[i] == arraynums[j])\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(result)\n\t\t\tbreak;\n\t}\n\treturn result;\n}",
    "{\n\tbool result = false;\n\tforeach(i; 0..arraynums.length)\n\t{\n\t\tforeach(j; i+1..arraynums.length)\n\t\t{\n\t\t\tif(arraynums[i] == arraynums[j])\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tbool result = false;\n\tforeach(i;0..arraynums.length)\n\t{\n\t\tforeach(j;i+1..arraynums.length)\n\t\t{\n\t\t\tif(arraynums[i] == arraynums[j])\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tbool bFound = false;\n\tforeach(num; arraynums)\n\t{\n\t\tif(arraynums.count(num) > 1)\n\t\t{\n\t\t\tbFound = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn bFound;\n}",
    "{\n\tbool ret = false;\n\tforeach(i; 0 .. arraynums.length)\n\t{\n\t\tforeach(j; 0 .. arraynums.length)\n\t\t{\n\t\t\tif(i != j)\n\t\t\t{\n\t\t\t\tif(arraynums[i] == arraynums[j])\n\t\t\t\t{\n\t\t\t\t\tret = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn ret;\n}",
    "{\n\tauto arraynums_length = arraynums.length;\n\tauto arraynums_sorted = arraynums.dup;\n\tarraynums_sorted.sort;\n\t\n\tfor(int i = 0; i < arraynums_length; i++)\n\t{\n\t\tif(arraynums_sorted[i] == arraynums_sorted[i+1])\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tauto nums = arraynums.dup;\n\tnums.sort;\n\tfor (size_t i = 0; i < nums.length; i++)\n\t{\n\t\tif (nums[i] == nums[i+1])\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tbool hasDuplicate = false;\n\tforeach(long num; arraynums)\n\t{\n\t\tif(arraynums.count(num) > 1)\n\t\t{\n\t\t\thasDuplicate = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn hasDuplicate;\n}",
    "{\n\tbool bRet = false;\n\t\n\tforeach(i; 0 .. arraynums.length)\n\t{\n\t\tforeach(j; 0 .. arraynums.length)\n\t\t{\n\t\t\tif(i != j)\n\t\t\t{\n\t\t\t\tif(arraynums[i] == arraynums[j])\n\t\t\t\t{\n\t\t\t\t\tbRet = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn bRet;\n}",
    "{\n\tbool bret = false;\n\t\n\tforeach(long num; arraynums)\n\t{\n\t\tif(arraynums.count(num) > 1)\n\t\t{\n\t\t\tbret = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn bret;\n}",
    "{\n\tbool bret = false;\n\tint[] nums = arraynums.dup;\n\tnums.sort;\n\tfor (int i = 0; i < nums.length - 1; i++)\n\t{\n\t\tif (nums[i] == nums[i + 1])\n\t\t{\n\t\t\tbret = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn bret;\n}",
    "{\n\tbool result = false;\n\tint[] array = arraynums.dup;\n\tarray.sort;\n\tfor (int i = 0; i < array.length; i++)\n\t{\n\t\tif (i + 1 < array.length)\n\t\t{\n\t\t\tif (array[i] == array[i + 1])\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}"
  ]
}