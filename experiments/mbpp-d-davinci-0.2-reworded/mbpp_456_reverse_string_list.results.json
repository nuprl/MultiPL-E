{
  "name": "mbpp_456_reverse_string_list",
  "language": "d",
  "prompt": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_456_reverse_string_list.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_string_list;\n\tforeach(string s; stringlist)\n\t{\n\t\treversed_string_list ~= s.dup.reverse;\n\t}\n\treturn reversed_string_list;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517589,
      "stdout": "",
      "stderr": "/tmp/tmpjyieo898.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjyieo898.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_list;\n\tforeach(string s; stringlist)\n\t{\n\t\treversed_list ~= s.dup.reverse;\n\t}\n\treturn reversed_list;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517589,
      "stdout": "",
      "stderr": "/tmp/tmpxyd603x1.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxyd603x1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result = new string[stringlist.length];\n\tfor (int i = 0; i < stringlist.length; i++) {\n\t\tresult[i] = reverse(stringlist[i]);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517589,
      "stdout": "",
      "stderr": "/tmp/tmp_uazvkvr.d(11): Error: undefined identifier `reverse`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_uazvkvr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result;\n\tforeach(string s; stringlist)\n\t{\n\t\tresult ~= s.dup.reverse;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517589,
      "stdout": "",
      "stderr": "/tmp/tmpxmoum59u.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxmoum59u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result = new string[stringlist.length];\n\tforeach(int i, string s; stringlist)\n\t{\n\t\tresult[i] = s.dup.reverse;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517589,
      "stdout": "",
      "stderr": "/tmp/tmpiuqt6g3r.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiuqt6g3r.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_stringlist = new string[stringlist.length];\n\tfor (int i = 0; i < stringlist.length; i++)\n\t{\n\t\treversed_stringlist[i] = reverse_string(stringlist[i]);\n\t}\n\treturn reversed_stringlist;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517589,
      "stdout": "",
      "stderr": "/tmp/tmprjv71xar.d(12): Error: undefined identifier `reverse_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprjv71xar.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result = new string[stringlist.length];\n\tforeach(string s; stringlist)\n\t{\n\t\tresult ~= s.dup.reverse;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517589,
      "stdout": "",
      "stderr": "/tmp/tmpkdtxm_sz.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkdtxm_sz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_list;\n\tforeach(string s; stringlist)\n\t{\n\t\treversed_list ~= s.dup.reverse;\n\t}\n\treturn reversed_list;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517589,
      "stdout": "",
      "stderr": "/tmp/tmpxyd603x1.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxyd603x1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tforeach(string s; stringlist)\n\t{\n\t\tstringlist[s] = reverse(stringlist[s]);\n\t}\n\treturn stringlist;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517589,
      "stdout": "",
      "stderr": "/tmp/tmp6i6yi7ef.d(11): Error: cannot implicitly convert expression `s` of type `string` to `ulong`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6i6yi7ef.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_list;\n\treversed_list.length = stringlist.length;\n\tforeach(string s; stringlist) \n\t{\n\t\treversed_list ~= s.dup.reverse;\n\t}\n\treturn reversed_list;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517589,
      "stdout": "",
      "stderr": "/tmp/tmp2wavklr0.d(13): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2wavklr0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_stringlist;\n\tforeach(string s; stringlist)\n\t{\n\t\treversed_stringlist ~= s.dup.reverse;\n\t}\n\treturn reversed_stringlist;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517589,
      "stdout": "",
      "stderr": "/tmp/tmplx2u95x6.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplx2u95x6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result = new string[stringlist.length];\n\tfor (int i = 0; i < stringlist.length; i++)\n\t{\n\t\tresult[i] = reverse_string(stringlist[i]);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517589,
      "stdout": "",
      "stderr": "/tmp/tmp_s4k9pei.d(12): Error: undefined identifier `reverse_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_s4k9pei.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_list;\n\tforeach(string s; stringlist)\n\t{\n\t\treversed_list ~= s.dup.reverse;\n\t}\n\treturn reversed_list;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517589,
      "stdout": "",
      "stderr": "/tmp/tmpxyd603x1.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxyd603x1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_list = new string[stringlist.length];\n\tforeach(string s; stringlist)\n\t{\n\t\treversed_list ~= reverse(s);\n\t}\n\treturn reversed_list;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517589,
      "stdout": "",
      "stderr": "/tmp/tmp80xptnfy.d(12): Error: undefined identifier `reverse`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp80xptnfy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tforeach(string s; stringlist)\n\t{\n\t\tstringlist[$-1] = s.dup.reverse;\n\t}\n\treturn stringlist;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517589,
      "stdout": "",
      "stderr": "/tmp/tmp_ef8cs4l.d(11): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_ef8cs4l.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_list;\n\tforeach(string s; stringlist)\n\t{\n\t\treversed_list ~= s.dup.reverse;\n\t}\n\treturn reversed_list;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517589,
      "stdout": "",
      "stderr": "/tmp/tmpxyd603x1.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxyd603x1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result;\n\tforeach(string s; stringlist)\n\t{\n\t\tresult ~= s.dup.reverse;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517589,
      "stdout": "",
      "stderr": "/tmp/tmpxmoum59u.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxmoum59u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result;\n\tforeach(string s; stringlist)\n\t{\n\t\tresult ~= s.dup.reverse;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517589,
      "stdout": "",
      "stderr": "/tmp/tmpxmoum59u.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxmoum59u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tforeach(string s; stringlist)\n\t{\n\t\tstringlist[s] = reverse(s);\n\t}\n\treturn stringlist;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517589,
      "stdout": "",
      "stderr": "/tmp/tmpha7cj7yw.d(11): Error: cannot implicitly convert expression `s` of type `string` to `ulong`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpha7cj7yw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_stringlist = new string[stringlist.length];\n\t\n\tforeach(string s; stringlist)\n\t{\n\t\treversed_stringlist ~= s.dup.reverse;\n\t}\n\t\n\treturn reversed_stringlist;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517589,
      "stdout": "",
      "stderr": "/tmp/tmp8ebretev.d(13): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8ebretev.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_stringlist;\n\tforeach(string s; stringlist)\n\t{\n\t\treversed_stringlist ~= s.dup.reverse;\n\t}\n\treturn reversed_stringlist;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517589,
      "stdout": "",
      "stderr": "/tmp/tmplx2u95x6.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplx2u95x6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result = new string[stringlist.length];\n\tforeach(string s; stringlist)\n\t{\n\t\tresult ~= s.dup.reverse;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517589,
      "stdout": "",
      "stderr": "/tmp/tmpkdtxm_sz.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkdtxm_sz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result = new string[stringlist.length];\n\t\n\tfor (int i = 0; i < stringlist.length; i++)\n\t{\n\t\tresult[i] = reverse_string(stringlist[i]);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123571,
      "stdout": "",
      "stderr": "/tmp/tmp9bhyw4aj.d(13): Error: undefined identifier `reverse_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9bhyw4aj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_list;\n\treversed_list.length = stringlist.length;\n\tfor (int i = 0; i < stringlist.length; i++)\n\t{\n\t\treversed_list[i] = reverse(stringlist[i]);\n\t}\n\treturn reversed_list;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123571,
      "stdout": "",
      "stderr": "/tmp/tmpow_oz77f.d(13): Error: undefined identifier `reverse`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpow_oz77f.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result = new string[stringlist.length];\n\tforeach(int i, string s; stringlist)\n\t{\n\t\tresult[i] = s.dup.reverse;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517589,
      "stdout": "",
      "stderr": "/tmp/tmpiuqt6g3r.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiuqt6g3r.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_stringlist;\n\tforeach(string s; stringlist)\n\t{\n\t\treversed_stringlist ~= s.dup.reverse;\n\t}\n\treturn reversed_stringlist;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517589,
      "stdout": "",
      "stderr": "/tmp/tmplx2u95x6.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplx2u95x6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_stringlist = new string[stringlist.length];\n\tforeach(int i, string s; stringlist)\n\t{\n\t\treversed_stringlist[i] = s.dup.reverse;\n\t}\n\treturn reversed_stringlist;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123571,
      "stdout": "",
      "stderr": "/tmp/tmps80vitui.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps80vitui.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_stringlist = new string[stringlist.length];\n\t\n\tfor (int i = 0; i < stringlist.length; i++)\n\t{\n\t\treversed_stringlist[i] = reverse_string(stringlist[i]);\n\t}\n\t\n\treturn reversed_stringlist;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123571,
      "stdout": "",
      "stderr": "/tmp/tmpq5op7udo.d(13): Error: undefined identifier `reverse_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq5op7udo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result;\n\tforeach(string s; stringlist)\n\t{\n\t\tresult ~= s.dup.reverse;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517589,
      "stdout": "",
      "stderr": "/tmp/tmpxmoum59u.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxmoum59u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result = new string[stringlist.length];\n\tfor (int i = 0; i < stringlist.length; i++) \n\t{\n\t\tresult[i] = reverse_string(stringlist[i]);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123571,
      "stdout": "",
      "stderr": "/tmp/tmphus_sse6.d(12): Error: undefined identifier `reverse_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphus_sse6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result;\n\tforeach(string s; stringlist)\n\t{\n\t\tresult ~= s.dup.reverse;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517589,
      "stdout": "",
      "stderr": "/tmp/tmpxmoum59u.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxmoum59u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_list;\n\tforeach(string s; stringlist)\n\t{\n\t\treversed_list ~= s.dup.reverse;\n\t}\n\treturn reversed_list;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517589,
      "stdout": "",
      "stderr": "/tmp/tmpxyd603x1.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxyd603x1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tforeach(string s; stringlist)\n\t{\n\t\tstringlist[s] = reverse(s);\n\t}\n\treturn stringlist;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517589,
      "stdout": "",
      "stderr": "/tmp/tmpha7cj7yw.d(11): Error: cannot implicitly convert expression `s` of type `string` to `ulong`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpha7cj7yw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result;\n\tforeach(string s; stringlist)\n\t{\n\t\tresult ~= s.dup.reverse;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517589,
      "stdout": "",
      "stderr": "/tmp/tmpxmoum59u.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxmoum59u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result;\n\tforeach(string s; stringlist) \n\t{\n\t\tresult ~= s.dup.reverse;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123571,
      "stdout": "",
      "stderr": "/tmp/tmpiogbitky.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiogbitky.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_list = new string[stringlist.length];\n\tforeach(int i, string s; stringlist)\n\t{\n\t\treversed_list[i] = reverse(s);\n\t}\n\treturn reversed_list;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123571,
      "stdout": "",
      "stderr": "/tmp/tmphp4lonrj.d(12): Error: undefined identifier `reverse`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphp4lonrj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result = new string[stringlist.length];\n\tforeach(i, string; stringlist)\n\t{\n\t\tresult[i] = reverse(string);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123571,
      "stdout": "",
      "stderr": "/tmp/tmphex_ol_4.d(12): Error: undefined identifier `reverse`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphex_ol_4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tforeach(string s; stringlist)\n\t{\n\t\ts = s.dup.reverse;\n\t}\n\treturn stringlist;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123571,
      "stdout": "",
      "stderr": "/tmp/tmpsk42mdi9.d(11): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsk42mdi9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result;\n\tforeach(string s; stringlist)\n\t{\n\t\tresult ~= s.dup.reverse;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517589,
      "stdout": "",
      "stderr": "/tmp/tmpxmoum59u.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxmoum59u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_stringlist = new string[stringlist.length];\n\tfor (int i = 0; i < stringlist.length; i++)\n\t{\n\t\treversed_stringlist[i] = reverse(stringlist[i]);\n\t}\n\treturn reversed_stringlist;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123571,
      "stdout": "",
      "stderr": "/tmp/tmpv6v2yxzq.d(12): Error: undefined identifier `reverse`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv6v2yxzq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_list;\n\tforeach(string s; stringlist)\n\t{\n\t\treversed_list ~= s.dup.reverse;\n\t}\n\treturn reversed_list;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517589,
      "stdout": "",
      "stderr": "/tmp/tmpxyd603x1.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxyd603x1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tforeach(string s; stringlist)\n\t{\n\t\treverse(s);\n\t}\n\treturn stringlist;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123571,
      "stdout": "",
      "stderr": "/tmp/tmpuqp80sqr.d(11): Error: undefined identifier `reverse`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuqp80sqr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_list = new string[stringlist.length];\n\t\n\tforeach(i, stringlist)\n\t{\n\t\treversed_list[i] = stringlist[i].dup.reverse;\n\t}\n\t\n\treturn reversed_list;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123571,
      "stdout": "",
      "stderr": "/tmp/tmp8_s1_546.d(11): Error: no identifier for declarator `stringlist`\n/tmp/tmp8_s1_546.d(11): Error: found `)` when expecting `;`\n/tmp/tmp8_s1_546.d(16): Error: found `return` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8_s1_546.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result;\n\tforeach(string s; stringlist)\n\t{\n\t\tresult ~= s.dup.reverse;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517589,
      "stdout": "",
      "stderr": "/tmp/tmpxmoum59u.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxmoum59u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result = new string[stringlist.length];\n\tforeach(string s; stringlist)\n\t{\n\t\tresult ~= s.dup.reverse;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517589,
      "stdout": "",
      "stderr": "/tmp/tmpkdtxm_sz.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkdtxm_sz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_stringlist;\n\treversed_stringlist.length = stringlist.length;\n\t\n\tfor (int i = 0; i < stringlist.length; i++) \n\t{\n\t\treversed_stringlist[i] = reverse_string(stringlist[i]);\n\t}\n\t\n\treturn reversed_stringlist;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123571,
      "stdout": "",
      "stderr": "/tmp/tmpn2c2ek5c.d(14): Error: undefined identifier `reverse_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn2c2ek5c.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_list;\n\tforeach(string s; stringlist) \n\t{\n\t\treversed_list ~= s.dup.reverse;\n\t}\n\treturn reversed_list;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123571,
      "stdout": "",
      "stderr": "/tmp/tmpedqkpnkr.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpedqkpnkr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tforeach(string s; stringlist)\n\t{\n\t\ts = s.dup.reverse;\n\t}\n\treturn stringlist;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123571,
      "stdout": "",
      "stderr": "/tmp/tmpsk42mdi9.d(11): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsk42mdi9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_stringlist = new string[stringlist.length];\n\tfor (int i = 0; i < stringlist.length; i++)\n\t{\n\t\treversed_stringlist[i] = stringlist[i].dup.reverse;\n\t}\n\treturn reversed_stringlist;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123571,
      "stdout": "",
      "stderr": "/tmp/tmp95ioa5f0.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp95ioa5f0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_list = new string[stringlist.length];\n\t\n\tforeach(string s; stringlist)\n\t{\n\t\treversed_list ~= s.dup.reverse;\n\t}\n\t\n\treturn reversed_list;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123571,
      "stdout": "",
      "stderr": "/tmp/tmpcrsqt8lh.d(13): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcrsqt8lh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_stringlist;\n\tforeach(string s; stringlist)\n\t{\n\t\treversed_stringlist ~= s.dup.reverse;\n\t}\n\treturn reversed_stringlist;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517589,
      "stdout": "",
      "stderr": "/tmp/tmplx2u95x6.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplx2u95x6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result;\n\tforeach(string s; stringlist)\n\t{\n\t\tresult ~= s.dup.reverse;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517589,
      "stdout": "",
      "stderr": "/tmp/tmpxmoum59u.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxmoum59u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result = new string[stringlist.length];\n\tfor (int i = 0; i < stringlist.length; i++) \n\t{\n\t\tresult[i] = reverse_string(stringlist[i]);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123571,
      "stdout": "",
      "stderr": "/tmp/tmphus_sse6.d(12): Error: undefined identifier `reverse_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphus_sse6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result;\n\tforeach(string s; stringlist) {\n\t\tresult ~= s.dup.reverse;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123571,
      "stdout": "",
      "stderr": "/tmp/tmp3rsr7se0.d(11): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3rsr7se0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] new_string_list;\n\tforeach(string s; stringlist)\n\t{\n\t\tnew_string_list ~= s.dup.reverse;\n\t}\n\treturn new_string_list;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123571,
      "stdout": "",
      "stderr": "/tmp/tmpp7ozbv4g.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp7ozbv4g.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result = new string[stringlist.length];\n\tforeach(int i, string s; stringlist)\n\t{\n\t\tresult[i] = s.dup.reverse;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517589,
      "stdout": "",
      "stderr": "/tmp/tmpiuqt6g3r.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiuqt6g3r.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_list;\n\treversed_list.length = stringlist.length;\n\tforeach(i, stringlist)\n\t{\n\t\treversed_list[i] = reverse(stringlist[i]);\n\t}\n\treturn reversed_list;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123571,
      "stdout": "",
      "stderr": "/tmp/tmpr5tffob5.d(11): Error: no identifier for declarator `stringlist`\n/tmp/tmpr5tffob5.d(11): Error: found `)` when expecting `;`\n/tmp/tmpr5tffob5.d(15): Error: found `return` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr5tffob5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result;\n\tforeach(string s; stringlist)\n\t{\n\t\tresult ~= s.dup.reverse;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517589,
      "stdout": "",
      "stderr": "/tmp/tmpxmoum59u.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxmoum59u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result;\n\tforeach(string s; stringlist)\n\t{\n\t\tresult ~= s.dup.reverse;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517589,
      "stdout": "",
      "stderr": "/tmp/tmpxmoum59u.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxmoum59u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tforeach(string s; stringlist)\n\t{\n\t\tstringlist[s] = reverse_string(s);\n\t}\n\treturn stringlist;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123571,
      "stdout": "",
      "stderr": "/tmp/tmp0yavrgqt.d(11): Error: cannot implicitly convert expression `s` of type `string` to `ulong`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0yavrgqt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tforeach(string s; stringlist)\n\t{\n\t\tstringlist[$-1] = s.dup.reverse;\n\t}\n\treturn stringlist;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517589,
      "stdout": "",
      "stderr": "/tmp/tmp_ef8cs4l.d(11): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_ef8cs4l.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result = new string[stringlist.length];\n\tfor (int i = 0; i < stringlist.length; i++) \n\t{\n\t\tresult[i] = reverse_string(stringlist[i]);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123571,
      "stdout": "",
      "stderr": "/tmp/tmphus_sse6.d(12): Error: undefined identifier `reverse_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphus_sse6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result;\n\tforeach(string s; stringlist)\n\t{\n\t\tresult ~= s.dup.reverse;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517589,
      "stdout": "",
      "stderr": "/tmp/tmpxmoum59u.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxmoum59u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tforeach(string s; stringlist)\n\t{\n\t\tstringlist[$-1] = s.reverse;\n\t}\n\treturn stringlist;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123571,
      "stdout": "",
      "stderr": "/tmp/tmp8gitpx1f.d(11): Error: no property `reverse` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8gitpx1f.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result = new string[stringlist.length];\n\tforeach(i, stringlist)\n\t{\n\t\tresult[i] = stringlist[i].dup.reverse;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123571,
      "stdout": "",
      "stderr": "/tmp/tmpr27u0lkw.d(10): Error: no identifier for declarator `stringlist`\n/tmp/tmpr27u0lkw.d(10): Error: found `)` when expecting `;`\n/tmp/tmpr27u0lkw.d(14): Error: found `return` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr27u0lkw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tint i;\n\tstring[] result;\n\t\n\tresult = new string[stringlist.length];\n\t\n\tfor (i = 0; i < stringlist.length; i++)\n\t{\n\t\tresult[i] = reverse_string(stringlist[i]);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123571,
      "stdout": "",
      "stderr": "/tmp/tmpjllj0hkd.d(16): Error: undefined identifier `reverse_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjllj0hkd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result;\n\tforeach(string s; stringlist)\n\t{\n\t\tresult ~= s.dup.reverse;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517589,
      "stdout": "",
      "stderr": "/tmp/tmpxmoum59u.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxmoum59u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result;\n\tforeach(string s; stringlist) \n\t{\n\t\tresult ~= s.dup.reverse;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123571,
      "stdout": "",
      "stderr": "/tmp/tmpiogbitky.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiogbitky.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tforeach(string s; stringlist)\n\t{\n\t\tstringlist[s] = reverse(s);\n\t}\n\treturn stringlist;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517589,
      "stdout": "",
      "stderr": "/tmp/tmpha7cj7yw.d(11): Error: cannot implicitly convert expression `s` of type `string` to `ulong`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpha7cj7yw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_list;\n\tforeach(string s; stringlist)\n\t{\n\t\treversed_list ~= reverse(s);\n\t}\n\treturn reversed_list;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123571,
      "stdout": "",
      "stderr": "/tmp/tmpt48upp7b.d(12): Error: undefined identifier `reverse`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt48upp7b.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_list = new string[stringlist.length];\n\tfor (int i = 0; i < stringlist.length; i++)\n\t{\n\t\treversed_list[i] = reverse_string(stringlist[i]);\n\t}\n\treturn reversed_list;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123571,
      "stdout": "",
      "stderr": "/tmp/tmpfp4qpdjl.d(12): Error: undefined identifier `reverse_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfp4qpdjl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result;\n\tforeach(string s; stringlist)\n\t{\n\t\tresult ~= s.dup.reverse;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517589,
      "stdout": "",
      "stderr": "/tmp/tmpxmoum59u.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxmoum59u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tint i = 0;\n\tint j = 0;\n\tint len = 0;\n\tint halflen = 0;\n\tchar temp = ' ';\n\t\n\tforeach(string s; stringlist)\n\t{\n\t\tlen = s.length;\n\t\thalflen = len / 2;\n\t\t\n\t\tfor(i = 0; i < halflen; i++)\n\t\t{\n\t\t\tj = len - i - 1;\n\t\t\ttemp = s[i];\n\t\t\ts[i] = s[j];\n\t\t\ts[j] = temp;\n\t\t}\n\t}\n\t\n\treturn stringlist;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123571,
      "stdout": "",
      "stderr": "/tmp/tmpol2ht64l.d(17): Error: cannot implicitly convert expression `s.length` of type `ulong` to `int`\n/tmp/tmpol2ht64l.d(24): Error: cannot modify `immutable` expression `s[cast(ulong)i]`\n/tmp/tmpol2ht64l.d(25): Error: cannot modify `immutable` expression `s[cast(ulong)j]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpol2ht64l.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result = new string[stringlist.length];\n\tforeach(i, s; stringlist)\n\t{\n\t\tresult[i] = s.dup.reverse;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123571,
      "stdout": "",
      "stderr": "/tmp/tmphmcun1qb.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphmcun1qb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result;\n\tforeach(string s; stringlist)\n\t{\n\t\tresult ~= s.dup.reverse;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517589,
      "stdout": "",
      "stderr": "/tmp/tmpxmoum59u.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxmoum59u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result = new string[stringlist.length];\n\tforeach(int i, string s; stringlist)\n\t{\n\t\tresult[i] = s.dup.reverse;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517589,
      "stdout": "",
      "stderr": "/tmp/tmpiuqt6g3r.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiuqt6g3r.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_list;\n\tforeach(string s; stringlist)\n\t{\n\t\treversed_list ~= s.dup.reverse;\n\t}\n\treturn reversed_list;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517589,
      "stdout": "",
      "stderr": "/tmp/tmpxyd603x1.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxyd603x1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_stringlist;\n\tforeach(string s; stringlist)\n\t{\n\t\treversed_stringlist ~= s.dup.reverse;\n\t}\n\treturn reversed_stringlist;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517589,
      "stdout": "",
      "stderr": "/tmp/tmplx2u95x6.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplx2u95x6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_list;\n\treversed_list.length = stringlist.length;\n\tforeach(string s; stringlist)\n\t{\n\t\treversed_list ~= s.reverse;\n\t}\n\treturn reversed_list;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123571,
      "stdout": "",
      "stderr": "/tmp/tmptmsr1wca.d(13): Error: no property `reverse` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptmsr1wca.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result = new string[stringlist.length];\n\tforeach(string s; stringlist)\n\t{\n\t\tresult ~= s.dup.reverse;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517589,
      "stdout": "",
      "stderr": "/tmp/tmpkdtxm_sz.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkdtxm_sz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tforeach(string str; stringlist)\n\t{\n\t\tstr = str.dup.reverse;\n\t}\n\treturn stringlist;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123571,
      "stdout": "",
      "stderr": "/tmp/tmpz86mqzdd.d(11): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz86mqzdd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tforeach(string s; stringlist)\n\t{\n\t\tstringlist[$-1] = s.dup.reverse;\n\t}\n\treturn stringlist;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517589,
      "stdout": "",
      "stderr": "/tmp/tmp_ef8cs4l.d(11): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_ef8cs4l.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_list;\n\treversed_list.length = stringlist.length;\n\t\n\tforeach(string s; stringlist)\n\t{\n\t\treversed_list ~= s.dup.reverse;\n\t}\n\t\n\treturn reversed_list;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123571,
      "stdout": "",
      "stderr": "/tmp/tmpwq6k_m0m.d(14): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwq6k_m0m.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tforeach(string s; stringlist)\n\t{\n\t\tstringlist[s] = reverse(s);\n\t}\n\treturn stringlist;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517589,
      "stdout": "",
      "stderr": "/tmp/tmpha7cj7yw.d(11): Error: cannot implicitly convert expression `s` of type `string` to `ulong`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpha7cj7yw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_list = new string[stringlist.length];\n\tforeach (string str; stringlist)\n\t{\n\t\treversed_list ~= str.dup.reverse;\n\t}\n\treturn reversed_list;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123571,
      "stdout": "",
      "stderr": "/tmp/tmpwz2lycgr.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwz2lycgr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result;\n\tforeach(string s; stringlist)\n\t{\n\t\tresult ~= s.dup.reverse;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517589,
      "stdout": "",
      "stderr": "/tmp/tmpxmoum59u.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxmoum59u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_list;\n\treversed_list.length = stringlist.length;\n\tint i = 0;\n\tforeach(string s; stringlist)\n\t{\n\t\treversed_list[i] = s.dup.reverse;\n\t\ti++;\n\t}\n\treturn reversed_list;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123571,
      "stdout": "",
      "stderr": "/tmp/tmpetl1qx5q.d(14): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpetl1qx5q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_stringlist = new string[stringlist.length];\n\tfor (int i = 0; i < stringlist.length; i++) \n\t{\n\t\treversed_stringlist[i] = reverse_string(stringlist[i]);\n\t}\n\treturn reversed_stringlist;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123571,
      "stdout": "",
      "stderr": "/tmp/tmpw4t8vpss.d(12): Error: undefined identifier `reverse_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw4t8vpss.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_stringlist;\n\treversed_stringlist.length = stringlist.length;\n\t\n\tfor (int i = 0; i < stringlist.length; i++)\n\t{\n\t\treversed_stringlist[i] = \"\";\n\t\tfor (int j = stringlist[i].length - 1; j >= 0; j--)\n\t\t{\n\t\t\treversed_stringlist[i] += stringlist[i][j];\n\t\t}\n\t}\n\t\n\treturn reversed_stringlist;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123571,
      "stdout": "",
      "stderr": "/tmp/tmpvsy4a2h6.d(15): Error: cannot implicitly convert expression `stringlist[cast(ulong)i].length - 1LU` of type `ulong` to `int`\n/tmp/tmpvsy4a2h6.d(17): Error: slice `reversed_stringlist[cast(ulong)i]` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvsy4a2h6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tforeach(string s; stringlist)\n\t{\n\t\tstringlist[s] = reverse(stringlist[s]);\n\t}\n\treturn stringlist;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517589,
      "stdout": "",
      "stderr": "/tmp/tmp6i6yi7ef.d(11): Error: cannot implicitly convert expression `s` of type `string` to `ulong`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6i6yi7ef.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_list;\n\tforeach(string s; stringlist)\n\t{\n\t\treversed_list ~= s.dup.reverse;\n\t}\n\treturn reversed_list;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517589,
      "stdout": "",
      "stderr": "/tmp/tmpxyd603x1.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxyd603x1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result;\n\tforeach(string s; stringlist)\n\t{\n\t\tresult ~= s.dup.reverse;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517589,
      "stdout": "",
      "stderr": "/tmp/tmpxmoum59u.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxmoum59u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result;\n\tforeach(string s; stringlist)\n\t{\n\t\tresult ~= s.dup.reverse;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517589,
      "stdout": "",
      "stderr": "/tmp/tmpxmoum59u.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxmoum59u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_list = new string[stringlist.length];\n\tforeach(string s; stringlist)\n\t{\n\t\treversed_list ~= s.dup.reverse;\n\t}\n\treturn reversed_list;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123571,
      "stdout": "",
      "stderr": "/tmp/tmptuo_j8mw.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptuo_j8mw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result = new string[stringlist.length];\n\tforeach(i, stringlist)\n\t{\n\t\tstring temp = stringlist[i];\n\t\tresult[i] = \"\";\n\t\tfor(int j = temp.length - 1; j >= 0; j--)\n\t\t{\n\t\t\tresult[i] ~= temp[j];\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123571,
      "stdout": "",
      "stderr": "/tmp/tmpdhki579h.d(10): Error: no identifier for declarator `stringlist`\n/tmp/tmpdhki579h.d(10): Error: found `)` when expecting `;`\n/tmp/tmpdhki579h.d(19): Error: found `return` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdhki579h.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tforeach(string s; stringlist)\n\t{\n\t\tstringlist[s] = reverse(s);\n\t}\n\treturn stringlist;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517589,
      "stdout": "",
      "stderr": "/tmp/tmpha7cj7yw.d(11): Error: cannot implicitly convert expression `s` of type `string` to `ulong`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpha7cj7yw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_string_list = new string[stringlist.length];\n\tfor (int i = 0; i < stringlist.length; i++)\n\t{\n\t\treversed_string_list[i] = reverse_string(stringlist[i]);\n\t}\n\treturn reversed_string_list;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123571,
      "stdout": "",
      "stderr": "/tmp/tmpcvqn52tf.d(12): Error: undefined identifier `reverse_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcvqn52tf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result = new string[stringlist.length];\n\tforeach(int i, string s; stringlist) \n\t{\n\t\tresult[i] = s.dup.reverse;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123571,
      "stdout": "",
      "stderr": "/tmp/tmpdffvwcve.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdffvwcve.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result = new string[stringlist.length];\n\tforeach(i, stringlist) \n\t{\n\t\tresult[i] = stringlist[i].dup.reverse;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123571,
      "stdout": "",
      "stderr": "/tmp/tmp_h5hkkny.d(10): Error: no identifier for declarator `stringlist`\n/tmp/tmp_h5hkkny.d(10): Error: found `)` when expecting `;`\n/tmp/tmp_h5hkkny.d(14): Error: found `return` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_h5hkkny.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result;\n\tforeach(string s; stringlist)\n\t{\n\t\tresult ~= s.dup.reverse;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517589,
      "stdout": "",
      "stderr": "/tmp/tmpxmoum59u.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxmoum59u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result;\n\tforeach(string s; stringlist)\n\t{\n\t\tresult ~= s.dup.reverse;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517589,
      "stdout": "",
      "stderr": "/tmp/tmpxmoum59u.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxmoum59u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result = new string[stringlist.length];\n\t\n\tforeach(string s; stringlist)\n\t{\n\t\tresult ~= s.dup.reverse;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123571,
      "stdout": "",
      "stderr": "/tmp/tmpuzqqf2l0.d(13): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuzqqf2l0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tforeach(string s; stringlist)\n\t{\n\t\tstringlist[$-1] = s.dup.reverse;\n\t}\n\treturn stringlist;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517589,
      "stdout": "",
      "stderr": "/tmp/tmp_ef8cs4l.d(11): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_ef8cs4l.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tforeach(string s; stringlist)\n\t{\n\t\ts = s.dup.reverse;\n\t}\n\treturn stringlist;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123571,
      "stdout": "",
      "stderr": "/tmp/tmpsk42mdi9.d(11): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsk42mdi9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_list;\n\tforeach(string s; stringlist)\n\t{\n\t\treversed_list ~= s.dup.reverse;\n\t}\n\treturn reversed_list;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517589,
      "stdout": "",
      "stderr": "/tmp/tmpxyd603x1.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxyd603x1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tforeach(string s; stringlist)\n\t{\n\t\tstringlist[$-1] = s.dup.reverse;\n\t}\n\treturn stringlist;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517589,
      "stdout": "",
      "stderr": "/tmp/tmp_ef8cs4l.d(11): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_ef8cs4l.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_stringlist = new string[stringlist.length];\n\tfor (int i = 0; i < stringlist.length; i++)\n\t{\n\t\treversed_stringlist[i] = stringlist[i].dup.reverse;\n\t}\n\treturn reversed_stringlist;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123571,
      "stdout": "",
      "stderr": "/tmp/tmp95ioa5f0.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp95ioa5f0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_list;\n\treversed_list.length = stringlist.length;\n\tfor (int i = 0; i < stringlist.length; i++)\n\t{\n\t\treversed_list[i] = reverse(stringlist[i]);\n\t}\n\treturn reversed_list;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123571,
      "stdout": "",
      "stderr": "/tmp/tmpow_oz77f.d(13): Error: undefined identifier `reverse`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpow_oz77f.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_stringlist = new string[stringlist.length];\n\t\n\tforeach(string s; stringlist)\n\t{\n\t\treversed_stringlist ~= s.dup.reverse;\n\t}\n\t\n\treturn reversed_stringlist;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517589,
      "stdout": "",
      "stderr": "/tmp/tmp8ebretev.d(13): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8ebretev.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result;\n\tforeach(string s; stringlist) \n\t{\n\t\tresult ~= s.dup.reverse;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123571,
      "stdout": "",
      "stderr": "/tmp/tmpiogbitky.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiogbitky.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tforeach(string s; stringlist)\n\t{\n\t\tstringlist[s] = reverse(s);\n\t}\n\treturn stringlist;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517589,
      "stdout": "",
      "stderr": "/tmp/tmpha7cj7yw.d(11): Error: cannot implicitly convert expression `s` of type `string` to `ulong`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpha7cj7yw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_stringlist;\n\tforeach(string s; stringlist)\n\t{\n\t\treversed_stringlist ~= s.dup.reverse;\n\t}\n\treturn reversed_stringlist;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517589,
      "stdout": "",
      "stderr": "/tmp/tmplx2u95x6.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplx2u95x6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_list;\n\treversed_list.length = stringlist.length;\n\tfor(int i = 0; i < stringlist.length; i++)\n\t{\n\t\treversed_list[i] = reverse(stringlist[i]);\n\t}\n\treturn reversed_list;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123571,
      "stdout": "",
      "stderr": "/tmp/tmpp_a9p612.d(13): Error: undefined identifier `reverse`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp_a9p612.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tforeach(string s; stringlist)\n\t{\n\t\ts = s.dup.reverse;\n\t}\n\treturn stringlist;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123571,
      "stdout": "",
      "stderr": "/tmp/tmpsk42mdi9.d(11): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsk42mdi9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_list;\n\t\n\tforeach(string s; stringlist)\n\t{\n\t\treversed_list ~= s.dup.reverse;\n\t}\n\t\n\treturn reversed_list;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123571,
      "stdout": "",
      "stderr": "/tmp/tmpf1olstc8.d(13): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf1olstc8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_list;\n\tforeach(string s; stringlist)\n\t{\n\t\treversed_list ~= s.dup.reverse;\n\t}\n\treturn reversed_list;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517589,
      "stdout": "",
      "stderr": "/tmp/tmpxyd603x1.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxyd603x1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tforeach(string s; stringlist)\n\t{\n\t\tstringlist[s] = reverse(s);\n\t}\n\treturn stringlist;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517589,
      "stdout": "",
      "stderr": "/tmp/tmpha7cj7yw.d(11): Error: cannot implicitly convert expression `s` of type `string` to `ulong`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpha7cj7yw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tforeach(string s; stringlist)\n\t{\n\t\tstringlist[s] = reverse(s);\n\t}\n\treturn stringlist;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517589,
      "stdout": "",
      "stderr": "/tmp/tmpha7cj7yw.d(11): Error: cannot implicitly convert expression `s` of type `string` to `ulong`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpha7cj7yw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result = new string[stringlist.length];\n\tforeach(string s; stringlist)\n\t{\n\t\tresult ~= s.dup.reverse;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517589,
      "stdout": "",
      "stderr": "/tmp/tmpkdtxm_sz.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkdtxm_sz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_list;\n\tforeach(string s; stringlist)\n\t{\n\t\treversed_list ~= s.dup.reverse;\n\t}\n\treturn reversed_list;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517589,
      "stdout": "",
      "stderr": "/tmp/tmpxyd603x1.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxyd603x1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tforeach(string s; stringlist)\n\t{\n\t\tstring temp;\n\t\tfor(int i = s.length - 1; i >= 0; i--)\n\t\t{\n\t\t\ttemp ~= s[i];\n\t\t}\n\t\ts = temp;\n\t}\n\treturn stringlist;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123571,
      "stdout": "",
      "stderr": "/tmp/tmpdlp47gjm.d(12): Error: cannot implicitly convert expression `s.length - 1LU` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdlp47gjm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_list = new string[stringlist.length];\n\tforeach(string s; stringlist)\n\t{\n\t\treversed_list ~= s.dup.reverse;\n\t}\n\treturn reversed_list;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123571,
      "stdout": "",
      "stderr": "/tmp/tmptuo_j8mw.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptuo_j8mw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tforeach(string s; stringlist)\n\t{\n\t\tstringlist[$-1] = s.dup.reverse;\n\t}\n\treturn stringlist;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517589,
      "stdout": "",
      "stderr": "/tmp/tmp_ef8cs4l.d(11): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_ef8cs4l.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tforeach(string s; stringlist)\n\t{\n\t\ts = s.dup.reverse;\n\t}\n\treturn stringlist;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123571,
      "stdout": "",
      "stderr": "/tmp/tmpsk42mdi9.d(11): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsk42mdi9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_string_list;\n\tforeach(string s; stringlist)\n\t{\n\t\treversed_string_list ~= s.dup.reverse;\n\t}\n\treturn reversed_string_list;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517589,
      "stdout": "",
      "stderr": "/tmp/tmpjyieo898.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjyieo898.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result;\n\tforeach(string s; stringlist)\n\t{\n\t\tresult ~= s.dup.reverse;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517589,
      "stdout": "",
      "stderr": "/tmp/tmpxmoum59u.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxmoum59u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tint i;\n\tint j;\n\tstring[] reversed_string_list;\n\t\n\treversed_string_list = new string[stringlist.length];\n\t\n\tfor (i = 0; i < stringlist.length; i++)\n\t{\n\t\tfor (j = stringlist[i].length - 1; j >= 0; j--)\n\t\t{\n\t\t\treversed_string_list[i] ~= stringlist[i][j];\n\t\t}\n\t}\n\t\n\treturn reversed_string_list;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123571,
      "stdout": "",
      "stderr": "/tmp/tmpokjdavqu.d(17): Error: cannot implicitly convert expression `stringlist[cast(ulong)i].length - 1LU` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpokjdavqu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_list;\n\tforeach(string s; stringlist)\n\t{\n\t\treversed_list ~= s.dup.reverse;\n\t}\n\treturn reversed_list;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517589,
      "stdout": "",
      "stderr": "/tmp/tmpxyd603x1.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxyd603x1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_list;\n\tforeach(string s; stringlist)\n\t{\n\t\treversed_list ~= s.dup.reverse;\n\t}\n\treturn reversed_list;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517589,
      "stdout": "",
      "stderr": "/tmp/tmpxyd603x1.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxyd603x1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] new_string_list;\n\tforeach(string s; stringlist)\n\t{\n\t\tnew_string_list ~= s.dup.reverse;\n\t}\n\treturn new_string_list;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123571,
      "stdout": "",
      "stderr": "/tmp/tmpp7ozbv4g.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp7ozbv4g.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result;\n\tforeach(string s; stringlist)\n\t{\n\t\tresult ~= s.dup.reverse;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517589,
      "stdout": "",
      "stderr": "/tmp/tmpxmoum59u.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxmoum59u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tforeach(string s; stringlist)\n\t{\n\t\tstringlist[$-1] = s.reverse;\n\t}\n\treturn stringlist;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123571,
      "stdout": "",
      "stderr": "/tmp/tmp8gitpx1f.d(11): Error: no property `reverse` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8gitpx1f.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result;\n\tforeach(string s; stringlist)\n\t{\n\t\tresult ~= s.dup.reverse;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517589,
      "stdout": "",
      "stderr": "/tmp/tmpxmoum59u.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxmoum59u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result;\n\tforeach(string s; stringlist)\n\t{\n\t\tresult ~= s.dup.reverse;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517589,
      "stdout": "",
      "stderr": "/tmp/tmpxmoum59u.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxmoum59u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_string_list = new string[stringlist.length];\n\t\n\tforeach(int i, string s; stringlist)\n\t{\n\t\treversed_string_list[i] = s.dup.reverse;\n\t}\n\t\n\treturn reversed_string_list;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123571,
      "stdout": "",
      "stderr": "/tmp/tmpmzzfy1r3.d(13): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmzzfy1r3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result;\n\tforeach(string s; stringlist) \n\t{\n\t\tresult ~= s.dup.reverse;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123571,
      "stdout": "",
      "stderr": "/tmp/tmpiogbitky.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiogbitky.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_stringlist;\n\tforeach(string s; stringlist)\n\t{\n\t\treversed_stringlist ~= s.dup.reverse;\n\t}\n\treturn reversed_stringlist;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517589,
      "stdout": "",
      "stderr": "/tmp/tmplx2u95x6.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplx2u95x6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tforeach(string s; stringlist)\n\t{\n\t\tstringlist[$-1] = s.dup.reverse;\n\t}\n\treturn stringlist;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517589,
      "stdout": "",
      "stderr": "/tmp/tmp_ef8cs4l.d(11): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_ef8cs4l.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_list;\n\tforeach(string s; stringlist)\n\t{\n\t\treversed_list ~= s.dup.reverse;\n\t}\n\treturn reversed_list;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517589,
      "stdout": "",
      "stderr": "/tmp/tmpxyd603x1.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxyd603x1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result = new string[stringlist.length];\n\tforeach(int i, string s; stringlist)\n\t{\n\t\tresult[i] = s.dup.reverse;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517589,
      "stdout": "",
      "stderr": "/tmp/tmpiuqt6g3r.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiuqt6g3r.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_list;\n\tforeach(string s; stringlist)\n\t{\n\t\treversed_list ~= s.dup.reverse;\n\t}\n\treturn reversed_list;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517589,
      "stdout": "",
      "stderr": "/tmp/tmpxyd603x1.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxyd603x1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_string_list;\n\tforeach(string s; stringlist)\n\t{\n\t\treversed_string_list ~= s.dup.reverse;\n\t}\n\treturn reversed_string_list;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517589,
      "stdout": "",
      "stderr": "/tmp/tmpjyieo898.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjyieo898.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_list;\n\treversed_list.length = stringlist.length;\n\t\n\tfor (int i = 0; i < stringlist.length; i++)\n\t{\n\t\tstringlist[i] = reverse(stringlist[i]);\n\t\treversed_list[i] = stringlist[i];\n\t}\n\t\n\treturn reversed_list;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123571,
      "stdout": "",
      "stderr": "/tmp/tmphz1v9zpq.d(14): Error: undefined identifier `reverse`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphz1v9zpq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result;\n\tforeach(string s; stringlist)\n\t{\n\t\tresult ~= s.dup.reverse;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517589,
      "stdout": "",
      "stderr": "/tmp/tmpxmoum59u.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxmoum59u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_list;\n\tforeach(string s; stringlist)\n\t{\n\t\treversed_list ~= s.dup.reverse;\n\t}\n\treturn reversed_list;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517589,
      "stdout": "",
      "stderr": "/tmp/tmpxyd603x1.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxyd603x1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result;\n\tforeach(string s; stringlist)\n\t{\n\t\tresult ~= s.dup.reverse;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517589,
      "stdout": "",
      "stderr": "/tmp/tmpxmoum59u.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxmoum59u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result;\n\tforeach(string s; stringlist)\n\t{\n\t\tresult ~= s.dup.reverse;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517589,
      "stdout": "",
      "stderr": "/tmp/tmpxmoum59u.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxmoum59u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_list = new string[stringlist.length];\n\tfor (int i = 0; i < stringlist.length; i++)\n\t{\n\t\treversed_list[i] = reverse(stringlist[i]);\n\t}\n\treturn reversed_list;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123571,
      "stdout": "",
      "stderr": "/tmp/tmptmriv3ek.d(12): Error: undefined identifier `reverse`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptmriv3ek.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_list;\n\treversed_list.length = stringlist.length;\n\t\n\tfor (int i = 0; i < stringlist.length; i++)\n\t{\n\t\treversed_list[i] = reverse(stringlist[i]);\n\t}\n\t\n\treturn reversed_list;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123571,
      "stdout": "",
      "stderr": "/tmp/tmp6jcu7_6x.d(14): Error: undefined identifier `reverse`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6jcu7_6x.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_list = new string[stringlist.length];\n\tforeach(string s; stringlist)\n\t{\n\t\treversed_list ~= s.dup.reverse;\n\t}\n\treturn reversed_list;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123571,
      "stdout": "",
      "stderr": "/tmp/tmptuo_j8mw.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptuo_j8mw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_list = new string[stringlist.length];\n\t\n\tforeach(string s; stringlist)\n\t{\n\t\treversed_list ~= s.dup.reverse;\n\t}\n\t\n\treturn reversed_list;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123571,
      "stdout": "",
      "stderr": "/tmp/tmpcrsqt8lh.d(13): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcrsqt8lh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result;\n\tforeach(string s; stringlist)\n\t{\n\t\tresult ~= s.dup.reverse;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517589,
      "stdout": "",
      "stderr": "/tmp/tmpxmoum59u.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxmoum59u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_list;\n\tforeach(string s; stringlist)\n\t{\n\t\treversed_list ~= s[$..0];\n\t}\n\treturn reversed_list;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123571,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp2fwwxakg.d(12): Range violation\n----------------\n??:? _d_arrayboundsp [0x428f76]\n??:? immutable(char)[][] tmp2fwwxakg.reverse_string_list(immutable(char)[][]) [0x427c07]\n??:? void tmp2fwwxakg.__unittest_L16_C1() [0x427cf7]\n??:? void tmp2fwwxakg.__modtest() [0x428130]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e1ff]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428c1e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b0ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b13c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b039]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428bf5]\n??:? runModuleUnitTests [0x42dfd5]\n??:? void rt.dmain2._d_run_main(int",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_list;\n\tforeach(string s; stringlist)\n\t{\n\t\treversed_list ~= s.dup.reverse;\n\t}\n\treturn reversed_list;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517589,
      "stdout": "",
      "stderr": "/tmp/tmpxyd603x1.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxyd603x1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_list;\n\tforeach(string s; stringlist)\n\t{\n\t\treversed_list ~= s.dup.reverse;\n\t}\n\treturn reversed_list;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517589,
      "stdout": "",
      "stderr": "/tmp/tmpxyd603x1.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxyd603x1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result = new string[stringlist.length];\n\tforeach(i, stringlist)\n\t{\n\t\tresult[i] = stringlist[i].dup.reverse;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123571,
      "stdout": "",
      "stderr": "/tmp/tmpr27u0lkw.d(10): Error: no identifier for declarator `stringlist`\n/tmp/tmpr27u0lkw.d(10): Error: found `)` when expecting `;`\n/tmp/tmpr27u0lkw.d(14): Error: found `return` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr27u0lkw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_stringlist = new string[stringlist.length];\n\t\n\tforeach(int i, string s; stringlist)\n\t{\n\t\treversed_stringlist[i] = reverse(s);\n\t}\n\t\n\treturn reversed_stringlist;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123571,
      "stdout": "",
      "stderr": "/tmp/tmp436txnpz.d(13): Error: undefined identifier `reverse`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp436txnpz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_list;\n\tforeach(string s; stringlist)\n\t{\n\t\treversed_list ~= s.dup.reverse;\n\t}\n\treturn reversed_list;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517589,
      "stdout": "",
      "stderr": "/tmp/tmpxyd603x1.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxyd603x1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_string_list = new string[stringlist.length];\n\t\n\tforeach(string s; stringlist)\n\t{\n\t\treversed_string_list ~= s.dup.reverse;\n\t}\n\t\n\treturn reversed_string_list;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123571,
      "stdout": "",
      "stderr": "/tmp/tmp4ph1_fjo.d(13): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4ph1_fjo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_list;\n\tforeach(string s; stringlist)\n\t{\n\t\treversed_list ~= s.dup.reverse;\n\t}\n\treturn reversed_list;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517589,
      "stdout": "",
      "stderr": "/tmp/tmpxyd603x1.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxyd603x1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result = new string[stringlist.length];\n\tforeach(i, stringlist)\n\t{\n\t\tresult[i] = stringlist[i].dup.reverse;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123571,
      "stdout": "",
      "stderr": "/tmp/tmpr27u0lkw.d(10): Error: no identifier for declarator `stringlist`\n/tmp/tmpr27u0lkw.d(10): Error: found `)` when expecting `;`\n/tmp/tmpr27u0lkw.d(14): Error: found `return` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr27u0lkw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_list;\n\tforeach(string s; stringlist)\n\t{\n\t\treversed_list ~= s.dup.reverse;\n\t}\n\treturn reversed_list;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517589,
      "stdout": "",
      "stderr": "/tmp/tmpxyd603x1.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxyd603x1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result;\n\tforeach(string s; stringlist)\n\t{\n\t\tresult ~= s.dup.reverse;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517589,
      "stdout": "",
      "stderr": "/tmp/tmpxmoum59u.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxmoum59u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result = new string[stringlist.length];\n\t\n\tforeach(int i, string s; stringlist)\n\t{\n\t\tresult[i] = s.dup.reverse;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123571,
      "stdout": "",
      "stderr": "/tmp/tmp7pms0kho.d(13): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7pms0kho.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result = new string[stringlist.length];\n\tforeach(int i, string s; stringlist)\n\t{\n\t\tresult[i] = s.dup.reverse;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517589,
      "stdout": "",
      "stderr": "/tmp/tmpiuqt6g3r.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiuqt6g3r.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_string_list;\n\tforeach(string s; stringlist)\n\t{\n\t\treversed_string_list ~= s.dup.reverse;\n\t}\n\treturn reversed_string_list;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517589,
      "stdout": "",
      "stderr": "/tmp/tmpjyieo898.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjyieo898.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] new_stringlist;\n\tforeach(string s; stringlist)\n\t{\n\t\tnew_stringlist ~= s.dup.reverse;\n\t}\n\treturn new_stringlist;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123571,
      "stdout": "",
      "stderr": "/tmp/tmp5rpbj40_.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5rpbj40_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_list;\n\tforeach(string s; stringlist)\n\t{\n\t\treversed_list ~= s.dup.reverse;\n\t}\n\treturn reversed_list;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517589,
      "stdout": "",
      "stderr": "/tmp/tmpxyd603x1.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxyd603x1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_stringlist = new string[stringlist.length];\n\tfor (int i = 0; i < stringlist.length; i++)\n\t{\n\t\treversed_stringlist[i] = reverse(stringlist[i]);\n\t}\n\treturn reversed_stringlist;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123571,
      "stdout": "",
      "stderr": "/tmp/tmpv6v2yxzq.d(12): Error: undefined identifier `reverse`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv6v2yxzq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result;\n\tforeach(string s; stringlist)\n\t{\n\t\tresult ~= s.dup.reverse;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517589,
      "stdout": "",
      "stderr": "/tmp/tmpxmoum59u.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxmoum59u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_list;\n\treversed_list.length = stringlist.length;\n\t\n\tforeach(int i, string s; stringlist)\n\t{\n\t\treversed_list[i] = reverse(s);\n\t}\n\t\n\treturn reversed_list;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123571,
      "stdout": "",
      "stderr": "/tmp/tmp82txcc4n.d(14): Error: undefined identifier `reverse`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp82txcc4n.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result;\n\tforeach(string s; stringlist)\n\t{\n\t\tresult ~= reverse(s);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123571,
      "stdout": "",
      "stderr": "/tmp/tmp9rba8tws.d(12): Error: undefined identifier `reverse`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9rba8tws.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_list = new string[stringlist.length];\n\tint i = 0;\n\tforeach(string s; stringlist)\n\t{\n\t\treversed_list[i] = s.dup.reverse;\n\t\ti++;\n\t}\n\treturn reversed_list;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123571,
      "stdout": "",
      "stderr": "/tmp/tmp810s1700.d(13): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp810s1700.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tforeach(string s; stringlist)\n\t{\n\t\tstring temp = \"\";\n\t\tfor(int i = s.length; i >= 0; i--)\n\t\t{\n\t\t\ttemp ~= s[i];\n\t\t}\n\t\ts = temp;\n\t}\n\treturn stringlist;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123571,
      "stdout": "",
      "stderr": "/tmp/tmph7i7xvez.d(12): Error: cannot implicitly convert expression `s.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph7i7xvez.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_stringlist;\n\tforeach(string s; stringlist)\n\t{\n\t\treversed_stringlist ~= reverse(s);\n\t}\n\treturn reversed_stringlist;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123571,
      "stdout": "",
      "stderr": "/tmp/tmptt9ws0n0.d(12): Error: undefined identifier `reverse`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptt9ws0n0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_stringlist = new string[stringlist.length];\n\t\n\tforeach(string s; stringlist)\n\t{\n\t\treversed_stringlist ~= s.dup.reverse;\n\t}\n\t\n\treturn reversed_stringlist;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517589,
      "stdout": "",
      "stderr": "/tmp/tmp8ebretev.d(13): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8ebretev.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result;\n\tforeach(string s; stringlist)\n\t{\n\t\tresult ~= s.dup.reverse;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517589,
      "stdout": "",
      "stderr": "/tmp/tmpxmoum59u.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxmoum59u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_list;\n\tforeach(string s; stringlist)\n\t{\n\t\treversed_list ~= s.dup.reverse;\n\t}\n\treturn reversed_list;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517589,
      "stdout": "",
      "stderr": "/tmp/tmpxyd603x1.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxyd603x1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_string_list;\n\tforeach(string s; stringlist)\n\t{\n\t\treversed_string_list ~= s.dup.reverse;\n\t}\n\treturn reversed_string_list;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517589,
      "stdout": "",
      "stderr": "/tmp/tmpjyieo898.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjyieo898.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result;\n\tforeach(string s; stringlist)\n\t{\n\t\tresult ~= s.dup.reverse;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517589,
      "stdout": "",
      "stderr": "/tmp/tmpxmoum59u.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxmoum59u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result = new string[stringlist.length];\n\t\n\tfor (int i = 0; i < stringlist.length; i++)\n\t{\n\t\tresult[i] = reverse_string(stringlist[i]);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123571,
      "stdout": "",
      "stderr": "/tmp/tmp9bhyw4aj.d(13): Error: undefined identifier `reverse_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9bhyw4aj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result;\n\tforeach(string s; stringlist)\n\t{\n\t\tresult ~= s.dup.reverse;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517589,
      "stdout": "",
      "stderr": "/tmp/tmpxmoum59u.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxmoum59u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result;\n\tforeach(string s; stringlist)\n\t{\n\t\tresult ~= s.dup.reverse;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517589,
      "stdout": "",
      "stderr": "/tmp/tmpxmoum59u.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxmoum59u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tforeach(string s; stringlist)\n\t{\n\t\tstringlist[s] = reverse(s);\n\t}\n\treturn stringlist;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517589,
      "stdout": "",
      "stderr": "/tmp/tmpha7cj7yw.d(11): Error: cannot implicitly convert expression `s` of type `string` to `ulong`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpha7cj7yw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result;\n\tforeach(string s; stringlist)\n\t{\n\t\tresult ~= s.dup.reverse;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517589,
      "stdout": "",
      "stderr": "/tmp/tmpxmoum59u.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxmoum59u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tforeach(string s; stringlist)\n\t{\n\t\treverse(s);\n\t}\n\treturn stringlist;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123571,
      "stdout": "",
      "stderr": "/tmp/tmpuqp80sqr.d(11): Error: undefined identifier `reverse`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuqp80sqr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_list;\n\treversed_list.length = stringlist.length;\n\t\n\tforeach(string s; stringlist)\n\t{\n\t\treversed_list ~= s.dup.reverse;\n\t}\n\t\n\treturn reversed_list;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123571,
      "stdout": "",
      "stderr": "/tmp/tmpwq6k_m0m.d(14): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwq6k_m0m.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result = new string[stringlist.length];\n\tfor (int i = 0; i < stringlist.length; i++) \n\t{\n\t\tresult[i] = reverse_string(stringlist[i]);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123571,
      "stdout": "",
      "stderr": "/tmp/tmphus_sse6.d(12): Error: undefined identifier `reverse_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphus_sse6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_stringlist;\n\tforeach(string s; stringlist) \n\t{\n\t\treversed_stringlist ~= s.dup.reverse;\n\t}\n\treturn reversed_stringlist;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123571,
      "stdout": "",
      "stderr": "/tmp/tmpa7s7ihcj.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa7s7ihcj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_stringlist;\n\tforeach(string s; stringlist)\n\t{\n\t\treversed_stringlist ~= s.dup.reverse;\n\t}\n\treturn reversed_stringlist;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517589,
      "stdout": "",
      "stderr": "/tmp/tmplx2u95x6.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplx2u95x6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tforeach(string s; stringlist)\n\t{\n\t\tstringlist[$-1] = reverse(s);\n\t}\n\treturn stringlist;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123571,
      "stdout": "",
      "stderr": "/tmp/tmptorr17p4.d(11): Error: undefined identifier `reverse`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptorr17p4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tforeach(string s; stringlist)\n\t{\n\t\ts = s.dup.reverse;\n\t}\n\treturn stringlist;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123571,
      "stdout": "",
      "stderr": "/tmp/tmpsk42mdi9.d(11): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsk42mdi9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result = new string[stringlist.length];\n\tfor (int i = 0; i < stringlist.length; i++)\n\t{\n\t\tresult[i] = reverse_string(stringlist[i]);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517589,
      "stdout": "",
      "stderr": "/tmp/tmp_s4k9pei.d(12): Error: undefined identifier `reverse_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_s4k9pei.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_list = new string[stringlist.length];\n\tfor (int i = 0; i < stringlist.length; i++)\n\t{\n\t\treversed_list[i] = reverse_string(stringlist[i]);\n\t}\n\treturn reversed_list;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123571,
      "stdout": "",
      "stderr": "/tmp/tmpfp4qpdjl.d(12): Error: undefined identifier `reverse_string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfp4qpdjl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tforeach(string s; stringlist)\n\t{\n\t\ts = s.dup.reverse;\n\t}\n\treturn stringlist;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123571,
      "stdout": "",
      "stderr": "/tmp/tmpsk42mdi9.d(11): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsk42mdi9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result;\n\tforeach(string s; stringlist)\n\t{\n\t\tresult ~= s.dup.reverse;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517589,
      "stdout": "",
      "stderr": "/tmp/tmpxmoum59u.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxmoum59u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tforeach(string s; stringlist)\n\t{\n\t\tstringlist[s] = reverse_string(s);\n\t}\n\treturn stringlist;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123571,
      "stdout": "",
      "stderr": "/tmp/tmp0yavrgqt.d(11): Error: cannot implicitly convert expression `s` of type `string` to `ulong`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0yavrgqt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tforeach(string s; stringlist)\n\t{\n\t\tstringlist[s] = reverse(s);\n\t}\n\treturn stringlist;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517589,
      "stdout": "",
      "stderr": "/tmp/tmpha7cj7yw.d(11): Error: cannot implicitly convert expression `s` of type `string` to `ulong`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpha7cj7yw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] result;\n\tforeach(string s; stringlist)\n\t{\n\t\tresult ~= s.dup.reverse;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1665517589,
      "stdout": "",
      "stderr": "/tmp/tmpxmoum59u.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxmoum59u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n{\n\tstring[] reversed_list = new string[stringlist.length];\n\tforeach(string s; stringlist)\n\t{\n\t\treversed_list ~= s.dup.reverse;\n\t}\n\treturn reversed_list;\n}\nunittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
      "timestamp": 1666123571,
      "stdout": "",
      "stderr": "/tmp/tmptuo_j8mw.d(12): Error: no property `reverse` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptuo_j8mw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}