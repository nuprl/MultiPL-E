{
  "name": "mbpp_786_right_insertion",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_786_right_insertion.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong lo = 0;\n\tlong hi = a.length;\n\twhile (lo < hi) \n\t{\n\t\tlong mid = (lo + hi) / 2;\n\t\tif (x < a[mid])\n\t\t\thi = mid;\n\t\telse\n\t\t\tlo = mid + 1;\n\t}\n\treturn lo;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong lo = 0;\n\tlong hi = a.length;\n\twhile (lo < hi) \n\t{\n\t\tlong mid = (lo + hi) / 2;\n\t\tif (a[mid] < x) \n\t\t{\n\t\t\tlo = mid + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\thi = mid;\n\t\t}\n\t}\n\treturn lo;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length - 1;\n\tlong mid;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (a[mid] < x) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong l = 0;\n\tlong r = a.length;\n\twhile (l < r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (a[m] <= x) \n\t\t{\n\t\t\tl = m + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tr = m;\n\t\t}\n\t}\n\treturn l;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong l = 0;\n\tlong r = a.length;\n\twhile (l < r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (a[m] <= x) \n\t\t{\n\t\t\tl = m + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tr = m;\n\t\t}\n\t}\n\treturn l;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length;\n\twhile (low < high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (x < a[mid])\n\t\t\thigh = mid;\n\t\telse\n\t\t\tlow = mid + 1;\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong l = 0, r = a.length;\n\twhile (l < r) \n\t{\n\t\tlong m = (l + r) >> 1;\n\t\tif (a[m] < x)\n\t\t\tl = m + 1;\n\t\telse\n\t\t\tr = m;\n\t}\n\treturn l;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong low = 0, high = a.length;\n\twhile (low < high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (x < a[mid]) \n\t\t{\n\t\t\thigh = mid;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length;\n\twhile (low < high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (a[mid] < x) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\thigh = mid;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong l = 0;\n\tlong r = a.length;\n\twhile (l < r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (a[m] <= x) \n\t\t{\n\t\t\tl = m + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tr = m;\n\t\t}\n\t}\n\treturn l;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong l = 0;\n\tlong r = a.length;\n\twhile (l < r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (a[m] <= x) \n\t\t\tl = m + 1;\n\t\telse\n\t\t\tr = m;\n\t}\n\treturn l;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length;\n\twhile (low < high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (a[mid] < x) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\thigh = mid;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong n = a.length;\n\tlong l = 0;\n\tlong r = n;\n\twhile (l < r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (a[m] <= x) \n\t\t{\n\t\t\tl = m + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tr = m;\n\t\t}\n\t}\n\treturn l;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (a[mid] < x) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length;\n\twhile (low < high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (a[mid] <= x) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\thigh = mid;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong l = 0;\n\tlong r = a.length;\n\twhile(l < r)\n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif(a[m] > x)\n\t\t\tr = m;\n\t\telse\n\t\t\tl = m + 1;\n\t}\n\treturn l;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length;\n\twhile (low < high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (x < a[mid]) \n\t\t{\n\t\t\thigh = mid;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length;\n\twhile (low < high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (x < a[mid]) \n\t\t{\n\t\t\thigh = mid;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length;\n\twhile (low < high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (a[mid] < x) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\thigh = mid;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong lo = 0;\n\tlong hi = a.length;\n\twhile (lo < hi) \n\t{\n\t\tlong mid = (lo + hi) / 2;\n\t\tif (x < a[mid]) \n\t\t{\n\t\t\thi = mid;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tlo = mid + 1;\n\t\t}\n\t}\n\treturn lo;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong l = 0;\n\tlong r = a.length;\n\twhile (l < r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (a[m] <= x) \n\t\t{\n\t\t\tl = m + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tr = m;\n\t\t}\n\t}\n\treturn l;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length;\n\tlong mid;\n\twhile (low < high) {\n\t\tmid = (low + high) / 2;\n\t\tif (x < a[mid]) {\n\t\t\thigh = mid;\n\t\t} else {\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666123313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length;\n\twhile (low < high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (x < a[mid]) \n\t\t{\n\t\t\thigh = mid;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong l = 0, r = a.length;\n\twhile (l < r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (a[m] <= x) \n\t\t{\n\t\t\tl = m + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tr = m;\n\t\t}\n\t}\n\treturn l;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666123313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong lo = 0;\n\tlong hi = a.length;\n\twhile (lo < hi) \n\t{\n\t\tlong mid = (lo + hi) / 2;\n\t\tif (x < a[mid]) \n\t\t{\n\t\t\thi = mid;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tlo = mid + 1;\n\t\t}\n\t}\n\treturn lo;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong n = a.length;\n\tlong l = 0;\n\tlong r = n;\n\twhile (l < r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (a[m] <= x) \n\t\t{\n\t\t\tl = m + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tr = m;\n\t\t}\n\t}\n\treturn l;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong l = 0;\n\tlong r = a.length;\n\twhile (l < r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (a[m] <= x) \n\t\t{\n\t\t\tl = m + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tr = m;\n\t\t}\n\t}\n\treturn l;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length;\n\twhile (low < high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (x < a[mid]) \n\t\t{\n\t\t\thigh = mid;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length;\n\twhile (low < high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (a[mid] < x) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\thigh = mid;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length;\n\twhile (low < high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (a[mid] <= x) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\thigh = mid;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length;\n\twhile (low < high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (a[mid] < x) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\thigh = mid;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length;\n\twhile (low < high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (x < a[mid])\n\t\t\thigh = mid;\n\t\telse\n\t\t\tlow = mid + 1;\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length;\n\twhile (low < high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (a[mid] <= x) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\thigh = mid;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong l = 0;\n\tlong r = a.length;\n\twhile (l < r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (a[m] <= x) \n\t\t{\n\t\t\tl = m + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tr = m;\n\t\t}\n\t}\n\treturn l;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length;\n\twhile (low < high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (a[mid] < x) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\thigh = mid;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666123313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length;\n\twhile (low < high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (x < a[mid]) \n\t\t\thigh = mid;\n\t\telse \n\t\t\tlow = mid + 1;\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666123313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length;\n\t\n\twhile (low < high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (x < a[mid]) \n\t\t{\n\t\t\thigh = mid;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666123313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong l = 0;\n\tlong r = a.length;\n\twhile (l < r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (a[m] <= x) \n\t\t{\n\t\t\tl = m + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tr = m;\n\t\t}\n\t}\n\treturn l;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong low = 0, high = a.length;\n\twhile (low < high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (x < a[mid])\n\t\t\thigh = mid;\n\t\telse\n\t\t\tlow = mid + 1;\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666123313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong l = 0;\n\tlong r = a.length;\n\twhile (l < r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (a[m] <= x) \n\t\t{\n\t\t\tl = m + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tr = m;\n\t\t}\n\t}\n\treturn l;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong l = 0, r = a.length;\n\twhile (l < r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (a[m] > x)\n\t\t\tr = m;\n\t\telse\n\t\t\tl = m + 1;\n\t}\n\treturn l;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666123313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length;\n\twhile (low < high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (x < a[mid]) \n\t\t{\n\t\t\thigh = mid;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong l = 0;\n\tlong r = a.length;\n\twhile (l < r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (a[m] > x) \n\t\t{\n\t\t\tr = m;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tl = m + 1;\n\t\t}\n\t}\n\treturn l;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666123313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong l = 0;\n\tlong r = a.length;\n\twhile (l < r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (a[m] <= x) \n\t\t{\n\t\t\tl = m + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tr = m;\n\t\t}\n\t}\n\treturn l;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong l = 0;\n\tlong r = a.length;\n\twhile (l < r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (a[m] <= x) \n\t\t{\n\t\t\tl = m + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tr = m;\n\t\t}\n\t}\n\treturn l;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong lo = 0;\n\tlong hi = a.length;\n\twhile (lo < hi) \n\t{\n\t\tlong mid = (lo + hi) / 2;\n\t\tif (a[mid] < x) \n\t\t{\n\t\t\tlo = mid + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\thi = mid;\n\t\t}\n\t}\n\treturn lo;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length;\n\twhile (low < high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (a[mid] < x) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\thigh = mid;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length;\n\twhile (low < high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (x < a[mid]) \n\t\t\thigh = mid;\n\t\telse \n\t\t\tlow = mid + 1;\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666123313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length;\n\tlong mid;\n\twhile (low < high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (a[mid] <= x) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\thigh = mid;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666123313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length;\n\twhile (low < high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (a[mid] < x) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\thigh = mid;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong n = a.length;\n\tlong l = 0;\n\tlong r = n;\n\twhile (l < r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (a[m] <= x) \n\t\t{\n\t\t\tl = m + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tr = m;\n\t\t}\n\t}\n\treturn l;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length;\n\twhile (low < high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (x < a[mid]) \n\t\t{\n\t\t\thigh = mid;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong l = 0, r = a.length;\n\twhile (l < r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (a[m] <= x)\n\t\t\tl = m + 1;\n\t\telse\n\t\t\tr = m;\n\t}\n\treturn l;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666123313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length;\n\twhile (low < high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (a[mid] <= x) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\thigh = mid;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length;\n\twhile (low < high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (x < a[mid]) \n\t\t{\n\t\t\thigh = mid;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length;\n\twhile (low < high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (x < a[mid]) \n\t\t{\n\t\t\thigh = mid;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong left = 0;\n\tlong right = a.length;\n\twhile (left < right) \n\t{\n\t\tlong mid = (left + right) / 2;\n\t\tif (a[mid] <= x) \n\t\t{\n\t\t\tleft = mid + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tright = mid;\n\t\t}\n\t}\n\treturn left;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666123313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length;\n\twhile (low < high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (x < a[mid]) \n\t\t{\n\t\t\thigh = mid;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length;\n\twhile(low < high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif(a[mid] <= x) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\thigh = mid;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666123313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length;\n\twhile (low < high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (x < a[mid]) \n\t\t{\n\t\t\thigh = mid;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666123313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length;\n\twhile (low < high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (a[mid] < x) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\thigh = mid;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong l = 0;\n\tlong r = a.length;\n\twhile (l < r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (x < a[m]) \n\t\t{\n\t\t\tr = m;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tl = m + 1;\n\t\t}\n\t}\n\treturn l;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666123313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong l = 0;\n\tlong r = a.length;\n\twhile (l < r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (a[m] <= x) \n\t\t\tl = m + 1;\n\t\telse\n\t\t\tr = m;\n\t}\n\treturn l;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length;\n\twhile (low < high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (a[mid] <= x) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\thigh = mid;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong l = 0;\n\tlong r = a.length;\n\twhile (l < r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (a[m] <= x) \n\t\t{\n\t\t\tl = m + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tr = m;\n\t\t}\n\t}\n\treturn l;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong l = 0;\n\tlong r = a.length;\n\twhile (l < r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (a[m] <= x) \n\t\t{\n\t\t\tl = m + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tr = m;\n\t\t}\n\t}\n\treturn l;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length;\n\twhile (low < high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (a[mid] < x) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\thigh = mid;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length;\n\twhile (low < high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (a[mid] <= x) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\thigh = mid;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong l = 0;\n\tlong r = a.length;\n\twhile (l < r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (a[m] <= x) \n\t\t{\n\t\t\tl = m + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tr = m;\n\t\t}\n\t}\n\treturn l;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong i = 0;\n\twhile (i < a.length && a[i] <= x) \n\t{\n\t\ti++;\n\t}\n\treturn i;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666123313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong l = 0;\n\tlong r = a.length;\n\twhile (l < r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (a[m] <= x) \n\t\t{\n\t\t\tl = m + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tr = m;\n\t\t}\n\t}\n\treturn l;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length;\n\twhile (low < high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (x < a[mid])\n\t\t\thigh = mid;\n\t\telse\n\t\t\tlow = mid + 1;\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong l = 0;\n\tlong r = a.length;\n\twhile (l < r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (a[m] <= x)\n\t\t\tl = m + 1;\n\t\telse\n\t\t\tr = m;\n\t}\n\treturn l;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666123313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong low = 0, high = a.length;\n\twhile (low < high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (a[mid] < x) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\thigh = mid;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666123313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length;\n\twhile (low < high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (x < a[mid]) \n\t\t{\n\t\t\thigh = mid;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length;\n\t\n\twhile (low < high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (x < a[mid]) \n\t\t{\n\t\t\thigh = mid;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666123313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length;\n\twhile (low < high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (x < a[mid]) \n\t\t{\n\t\t\thigh = mid;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong l = 0;\n\tlong r = a.length;\n\twhile (l < r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (a[m] <= x) \n\t\t{\n\t\t\tl = m + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tr = m;\n\t\t}\n\t}\n\treturn l;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length;\n\twhile (low < high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (x < a[mid])\n\t\t\thigh = mid;\n\t\telse\n\t\t\tlow = mid + 1;\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length;\n\twhile (low < high) {\n\t\tlong mid = (low + high) / 2;\n\t\tif (x < a[mid]) {\n\t\t\thigh = mid;\n\t\t} else {\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666123313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length;\n\twhile (low < high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (x < a[mid])\n\t\t\thigh = mid;\n\t\telse\n\t\t\tlow = mid + 1;\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length;\n\twhile (low < high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (a[mid] <= x) \n\t\t\tlow = mid + 1;\n\t\telse \n\t\t\thigh = mid;\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666123313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong lo = 0, hi = a.length;\n\twhile (lo < hi) \n\t{\n\t\tlong mid = (lo + hi) / 2;\n\t\tif (x < a[mid])\n\t\t\thi = mid;\n\t\telse\n\t\t\tlo = mid + 1;\n\t}\n\treturn lo;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666123313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length;\n\t\n\twhile (low < high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (a[mid] <= x) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\thigh = mid;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666123313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong lo = 0;\n\tlong hi = a.length;\n\t\n\twhile (lo < hi) \n\t{\n\t\tlong mid = (lo + hi) / 2;\n\t\tif (a[mid] < x) \n\t\t{\n\t\t\tlo = mid + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\thi = mid;\n\t\t}\n\t}\n\treturn lo;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666123313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length;\n\twhile (low < high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (x < a[mid]) \n\t\t{\n\t\t\thigh = mid;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length;\n\twhile (low < high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (a[mid] <= x) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\thigh = mid;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong l = 0, r = a.length;\n\twhile (l < r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (a[m] <= x) \n\t\t{\n\t\t\tl = m + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tr = m;\n\t\t}\n\t}\n\treturn l;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666123313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length;\n\twhile (low < high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (a[mid] < x) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\thigh = mid;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong lo = 0;\n\tlong hi = a.length;\n\twhile (lo < hi) \n\t{\n\t\tlong mid = (lo + hi) / 2;\n\t\tif (a[mid] > x)\n\t\t\thi = mid;\n\t\telse\n\t\t\tlo = mid + 1;\n\t}\n\treturn lo;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666123313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length;\n\twhile (low < high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (x < a[mid])\n\t\t\thigh = mid;\n\t\telse\n\t\t\tlow = mid + 1;\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong l = 0;\n\tlong r = a.length;\n\twhile (l < r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (a[m] <= x) \n\t\t{\n\t\t\tl = m + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tr = m;\n\t\t}\n\t}\n\treturn l;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length;\n\twhile (low < high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (x < a[mid]) \n\t\t{\n\t\t\thigh = mid;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length;\n\twhile (low < high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (x < a[mid])\n\t\t\thigh = mid;\n\t\telse\n\t\t\tlow = mid + 1;\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length;\n\twhile (low < high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (a[mid] < x) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\thigh = mid;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong l = 0, r = a.length;\n\twhile (l < r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (a[m] < x) \n\t\t{\n\t\t\tl = m + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tr = m;\n\t\t}\n\t}\n\treturn l;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666123313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong l = 0, r = a.length;\n\twhile (l < r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (a[m] <= x)\n\t\t\tl = m + 1;\n\t\telse\n\t\t\tr = m;\n\t}\n\treturn l;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666123313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length;\n\twhile (low < high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (x < a[mid])\n\t\t\thigh = mid;\n\t\telse\n\t\t\tlow = mid + 1;\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong l = 0;\n\tlong r = a.length;\n\twhile (l < r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (a[m] <= x)\n\t\t\tl = m + 1;\n\t\telse\n\t\t\tr = m;\n\t}\n\treturn l;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666123313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length;\n\t\n\twhile (low < high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (x < a[mid]) \n\t\t{\n\t\t\thigh = mid;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666123313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong l = 0;\n\tlong r = a.length;\n\twhile (l < r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (a[m] <= x) \n\t\t{\n\t\t\tl = m + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tr = m;\n\t\t}\n\t}\n\treturn l;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length;\n\twhile (low < high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (x < a[mid]) \n\t\t{\n\t\t\thigh = mid;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length;\n\twhile (low < high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (x < a[mid]) \n\t\t{\n\t\t\thigh = mid;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666123313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong l = 0, r = a.length;\n\twhile (l < r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (a[m] <= x) \n\t\t{\n\t\t\tl = m + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tr = m;\n\t\t}\n\t}\n\treturn l;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666123313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong l = 0, r = a.length;\n\twhile (l < r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (a[m] <= x) \n\t\t{\n\t\t\tl = m + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tr = m;\n\t\t}\n\t}\n\treturn l;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666123313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length;\n\twhile (low < high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (a[mid] < x) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\thigh = mid;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length;\n\twhile (low < high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (x < a[mid]) \n\t\t{\n\t\t\thigh = mid;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong l = 0, r = a.length;\n\twhile (l < r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (a[m] <= x) \n\t\t{\n\t\t\tl = m + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tr = m;\n\t\t}\n\t}\n\treturn l;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666123313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong l = 0;\n\tlong r = a.length;\n\twhile (l < r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (a[m] <= x) \n\t\t{\n\t\t\tl = m + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tr = m;\n\t\t}\n\t}\n\treturn l;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length;\n\twhile (low < high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (a[mid] < x) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\thigh = mid;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong l = 0;\n\tlong r = a.length;\n\twhile (l < r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (a[m] <= x) \n\t\t\tl = m + 1;\n\t\telse \n\t\t\tr = m;\n\t}\n\treturn l;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666123313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length;\n\twhile (low < high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (x < a[mid]) \n\t\t{\n\t\t\thigh = mid;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong lo = 0;\n\tlong hi = a.length;\n\twhile (lo < hi) \n\t{\n\t\tlong mid = (lo + hi) / 2;\n\t\tif (a[mid] < x) \n\t\t{\n\t\t\tlo = mid + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\thi = mid;\n\t\t}\n\t}\n\treturn lo;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong l = 0;\n\tlong r = a.length;\n\twhile (l < r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (a[m] <= x) \n\t\t{\n\t\t\tl = m + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tr = m;\n\t\t}\n\t}\n\treturn l;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong l = 0;\n\tlong r = a.length;\n\t\n\twhile (l < r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (a[m] <= x) \n\t\t{\n\t\t\tl = m + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tr = m;\n\t\t}\n\t}\n\treturn l;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666123313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong l = 0;\n\tlong r = a.length;\n\twhile (l < r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (a[m] <= x) \n\t\t{\n\t\t\tl = m + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tr = m;\n\t\t}\n\t}\n\treturn l;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong l = 0;\n\tlong r = a.length;\n\twhile (l < r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (a[m] <= x) \n\t\t{\n\t\t\tl = m + 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tr = m;\n\t\t}\n\t}\n\treturn l;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666123313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong lo = 0;\n\tlong hi = a.length;\n\twhile (lo < hi) \n\t{\n\t\tlong mid = (lo + hi) / 2;\n\t\tif (x < a[mid]) \n\t\t{\n\t\t\thi = mid;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tlo = mid + 1;\n\t\t}\n\t}\n\treturn lo;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length;\n\twhile (low < high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (x < a[mid]) \n\t\t{\n\t\t\thigh = mid;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong l = 0;\n\tlong r = a.length;\n\twhile (l < r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (a[m] <= x) \n\t\t{\n\t\t\tl = m + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tr = m;\n\t\t}\n\t}\n\treturn l;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong l = 0;\n\tlong r = a.length;\n\twhile (l < r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (a[m] <= x) \n\t\t{\n\t\t\tl = m + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tr = m;\n\t\t}\n\t}\n\treturn l;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length;\n\twhile (low < high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (x < a[mid]) \n\t\t{\n\t\t\thigh = mid;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666123313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length;\n\twhile (low < high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (x < a[mid]) \n\t\t{\n\t\t\thigh = mid;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length;\n\twhile (low < high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (x < a[mid]) \n\t\t{\n\t\t\thigh = mid;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length;\n\twhile (low < high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (x < a[mid])\n\t\t\thigh = mid;\n\t\telse\n\t\t\tlow = mid + 1;\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong lo = 0;\n\tlong hi = a.length;\n\twhile (lo < hi) \n\t{\n\t\tlong mid = (lo + hi) / 2;\n\t\tif (x < a[mid])\n\t\t\thi = mid;\n\t\telse\n\t\t\tlo = mid + 1;\n\t}\n\treturn lo;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong l = 0;\n\tlong r = a.length;\n\twhile (l < r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (a[m] <= x) \n\t\t{\n\t\t\tl = m + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tr = m;\n\t\t}\n\t}\n\treturn l;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong l = 0;\n\tlong r = a.length;\n\twhile (l < r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (a[m] <= x) \n\t\t{\n\t\t\tl = m + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tr = m;\n\t\t}\n\t}\n\treturn l;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length;\n\twhile (low < high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (x < a[mid]) \n\t\t{\n\t\t\thigh = mid;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length;\n\twhile (low < high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (a[mid] < x) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\thigh = mid;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length;\n\twhile (low < high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (x < a[mid]) \n\t\t{\n\t\t\thigh = mid;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length;\n\twhile (low < high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (x < a[mid])\n\t\t\thigh = mid;\n\t\telse\n\t\t\tlow = mid + 1;\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length;\n\twhile (low < high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (x < a[mid]) \n\t\t{\n\t\t\thigh = mid;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong l = 0;\n\tlong r = a.length;\n\twhile (l < r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (a[m] <= x) \n\t\t{\n\t\t\tl = m + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tr = m;\n\t\t}\n\t}\n\treturn l;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length;\n\twhile (low < high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (x < a[mid]) \n\t\t{\n\t\t\thigh = mid;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong left = 0;\n\tlong right = a.length;\n\twhile (left < right) \n\t{\n\t\tlong mid = (left + right) / 2;\n\t\tif (a[mid] > x) \n\t\t{\n\t\t\tright = mid;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tleft = mid + 1;\n\t\t}\n\t}\n\treturn left;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666123313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length;\n\twhile (low < high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (a[mid] < x)\n\t\t\tlow = mid + 1;\n\t\telse\n\t\t\thigh = mid;\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666123313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong l = 0;\n\tlong r = a.length;\n\twhile (l < r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (a[m] <= x) \n\t\t{\n\t\t\tl = m + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tr = m;\n\t\t}\n\t}\n\treturn l;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong l = 0;\n\tlong r = a.length;\n\twhile (l < r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (a[m] <= x) \n\t\t{\n\t\t\tl = m + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tr = m;\n\t\t}\n\t}\n\treturn l;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong l = 0;\n\tlong r = a.length;\n\twhile (l < r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (a[m] <= x) \n\t\t{\n\t\t\tl = m + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tr = m;\n\t\t}\n\t}\n\treturn l;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong l = 0;\n\tlong r = a.length;\n\twhile (l < r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (a[m] <= x) \n\t\t{\n\t\t\tl = m + 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tr = m;\n\t\t}\n\t}\n\treturn l;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666123313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length;\n\twhile (low < high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (a[mid] < x) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\thigh = mid;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length;\n\twhile (low < high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (a[mid] < x) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\thigh = mid;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong lo = 0;\n\tlong hi = a.length;\n\twhile (lo < hi) \n\t{\n\t\tlong mid = (lo + hi) / 2;\n\t\tif (x < a[mid])\n\t\t\thi = mid;\n\t\telse\n\t\t\tlo = mid + 1;\n\t}\n\treturn lo;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong l = 0;\n\tlong r = a.length;\n\twhile (l < r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (a[m] <= x) \n\t\t{\n\t\t\tl = m + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tr = m;\n\t\t}\n\t}\n\treturn l;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong l = 0;\n\tlong r = a.length;\n\twhile (l < r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (a[m] <= x) \n\t\t{\n\t\t\tl = m + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tr = m;\n\t\t}\n\t}\n\treturn l;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong l = 0;\n\tlong r = a.length;\n\twhile (l < r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (a[m] <= x)\n\t\t\tl = m + 1;\n\t\telse\n\t\t\tr = m;\n\t}\n\treturn l;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666123313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong l = 0;\n\tlong r = a.length;\n\twhile (l < r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (a[m] <= x) \n\t\t\tl = m + 1;\n\t\telse \n\t\t\tr = m;\n\t}\n\treturn l;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666123313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length;\n\twhile (low < high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (x < a[mid]) \n\t\t{\n\t\t\thigh = mid;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong l = 0, r = a.length;\n\twhile (l < r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (a[m] <= x) \n\t\t{\n\t\t\tl = m + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tr = m;\n\t\t}\n\t}\n\treturn l;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666123313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong l = 0;\n\tlong r = a.length;\n\twhile (l < r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (a[m] <= x) \n\t\t{\n\t\t\tl = m + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tr = m;\n\t\t}\n\t}\n\treturn l;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length;\n\twhile (low < high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (x < a[mid]) \n\t\t{\n\t\t\thigh = mid;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length;\n\twhile (low < high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (a[mid] > x) \n\t\t{\n\t\t\thigh = mid;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666123313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length;\n\twhile (low < high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (x < a[mid]) \n\t\t{\n\t\t\thigh = mid;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length;\n\twhile (low < high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (x < a[mid]) \n\t\t{\n\t\t\thigh = mid;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length;\n\tlong mid;\n\twhile (low < high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (a[mid] < x) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\thigh = mid;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666123313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length;\n\twhile (low < high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (a[mid] > x) \n\t\t{\n\t\t\thigh = mid;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666123313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong l = 0;\n\tlong r = a.length;\n\twhile (l < r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (a[m] <= x) \n\t\t{\n\t\t\tl = m + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tr = m;\n\t\t}\n\t}\n\treturn l;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length;\n\twhile (low < high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (x < a[mid])\n\t\t\thigh = mid;\n\t\telse\n\t\t\tlow = mid + 1;\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong l = 0;\n\tlong r = a.length;\n\twhile (l < r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (a[m] <= x) \n\t\t{\n\t\t\tl = m + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tr = m;\n\t\t}\n\t}\n\treturn l;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length;\n\twhile (low < high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (x < a[mid]) \n\t\t{\n\t\t\thigh = mid;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong l = 0;\n\tlong r = a.length;\n\twhile (l < r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (a[m] <= x) \n\t\t{\n\t\t\tl = m + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tr = m;\n\t\t}\n\t}\n\treturn l;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong l = 0;\n\tlong r = a.length;\n\twhile (l < r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (a[m] <= x) \n\t\t{\n\t\t\tl = m + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tr = m;\n\t\t}\n\t}\n\treturn l;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong l = 0, r = a.length;\n\twhile (l < r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (a[m] <= x)\n\t\t\tl = m + 1;\n\t\telse\n\t\t\tr = m;\n\t}\n\treturn l;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666123313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length;\n\twhile (low < high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (x < a[mid]) \n\t\t\thigh = mid;\n\t\telse \n\t\t\tlow = mid + 1;\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666123313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length;\n\twhile (low < high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (x < a[mid]) \n\t\t{\n\t\t\thigh = mid;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length;\n\twhile (low < high) {\n\t\tlong mid = (low + high) / 2;\n\t\tif (a[mid] < x) {\n\t\t\tlow = mid + 1;\n\t\t} else {\n\t\t\thigh = mid;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666123313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length;\n\twhile (low < high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (a[mid] < x) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\thigh = mid;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong l = 0;\n\tlong r = a.length;\n\twhile (l < r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (a[m] <= x) \n\t\t{\n\t\t\tl = m + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tr = m;\n\t\t}\n\t}\n\treturn l;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong lo = 0;\n\tlong hi = a.length;\n\twhile (lo < hi) \n\t{\n\t\tlong mid = (lo + hi) / 2;\n\t\tif (a[mid] < x) \n\t\t{\n\t\t\tlo = mid + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\thi = mid;\n\t\t}\n\t}\n\treturn lo;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length;\n\t\n\twhile (low < high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (x < a[mid]) \n\t\t{\n\t\t\thigh = mid;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666123313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong l = 0;\n\tlong r = a.length;\n\twhile (l < r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (a[m] <= x) \n\t\t{\n\t\t\tl = m + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tr = m;\n\t\t}\n\t}\n\treturn l;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong left = 0;\n\tlong right = a.length;\n\twhile (left < right) \n\t{\n\t\tlong mid = (left + right) / 2;\n\t\tif (a[mid] <= x) \n\t\t{\n\t\t\tleft = mid + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tright = mid;\n\t\t}\n\t}\n\treturn left;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666123313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length;\n\tlong mid = 0;\n\t\n\twhile (low < high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (a[mid] <= x) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\thigh = mid;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666123313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length;\n\twhile (low < high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (a[mid] <= x) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\thigh = mid;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length;\n\twhile (low < high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (a[mid] < x)\n\t\t\tlow = mid + 1;\n\t\telse\n\t\t\thigh = mid;\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666123313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length;\n\twhile (low < high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (x < a[mid]) \n\t\t{\n\t\t\thigh = mid;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length;\n\twhile (low < high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (x < a[mid]) \n\t\t{\n\t\t\thigh = mid;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong l = 0, r = a.length;\n\twhile (l < r) \n\t{\n\t\tlong m = (l + r) >> 1;\n\t\tif (a[m] <= x)\n\t\t\tl = m + 1;\n\t\telse\n\t\t\tr = m;\n\t}\n\treturn l;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666123313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length;\n\twhile (low < high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (x < a[mid])\n\t\t\thigh = mid;\n\t\telse\n\t\t\tlow = mid + 1;\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong l = 0, r = a.length;\n\twhile (l < r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (a[m] <= x) \n\t\t{\n\t\t\tl = m + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tr = m;\n\t\t}\n\t}\n\treturn l;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666123313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length;\n\twhile (low < high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (x < a[mid]) \n\t\t{\n\t\t\thigh = mid;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length;\n\twhile (low < high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (x < a[mid])\n\t\t\thigh = mid;\n\t\telse\n\t\t\tlow = mid + 1;\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length;\n\tlong mid = 0;\n\twhile (low < high) {\n\t\tmid = (low + high) / 2;\n\t\tif (a[mid] < x) {\n\t\t\tlow = mid + 1;\n\t\t} else {\n\t\t\thigh = mid;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666123313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong lo = 0;\n\tlong hi = a.length;\n\twhile (lo < hi) \n\t{\n\t\tlong mid = (lo + hi) / 2;\n\t\tif (x < a[mid]) \n\t\t{\n\t\t\thi = mid;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tlo = mid + 1;\n\t\t}\n\t}\n\treturn lo;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong low = 0, high = a.length;\n\twhile (low < high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (x < a[mid]) \n\t\t{\n\t\t\thigh = mid;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong l = 0;\n\tlong r = a.length;\n\twhile (l < r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (a[m] <= x) \n\t\t{\n\t\t\tl = m + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tr = m;\n\t\t}\n\t}\n\treturn l;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length;\n\twhile (low < high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (x < a[mid]) \n\t\t{\n\t\t\thigh = mid;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length;\n\twhile (low < high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (a[mid] <= x) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\thigh = mid;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length;\n\twhile (low < high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (x < a[mid]) \n\t\t{\n\t\t\thigh = mid;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong l = 0, r = a.length;\n\twhile (l < r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (a[m] < x) \n\t\t{\n\t\t\tl = m + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tr = m;\n\t\t}\n\t}\n\treturn l;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666123313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong l = 0, r = a.length;\n\twhile (l < r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (a[m] <= x) \n\t\t{\n\t\t\tl = m + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tr = m;\n\t\t}\n\t}\n\treturn l;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666123313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong l = 0;\n\tlong r = a.length;\n\twhile (l < r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (a[m] <= x) \n\t\t{\n\t\t\tl = m + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tr = m;\n\t\t}\n\t}\n\treturn l;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length;\n\twhile (low < high) {\n\t\tlong mid = (low + high) / 2;\n\t\tif (a[mid] < x) {\n\t\t\tlow = mid + 1;\n\t\t} else {\n\t\t\thigh = mid;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666123313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length;\n\twhile (low < high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (a[mid] < x) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\thigh = mid;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong l = 0, r = a.length;\n\twhile (l < r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (a[m] <= x) \n\t\t{\n\t\t\tl = m + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tr = m;\n\t\t}\n\t}\n\treturn l;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666123313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length;\n\twhile (low < high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (x < a[mid]) \n\t\t{\n\t\t\thigh = mid;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong l = 0, r = a.length;\n\twhile (l < r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (a[m] > x)\n\t\t\tr = m;\n\t\telse\n\t\t\tl = m + 1;\n\t}\n\treturn l;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666123313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong low = 0;\n\tlong high = a.length;\n\twhile (low < high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (x < a[mid]) \n\t\t{\n\t\t\thigh = mid;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1665517490,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\n*/\nlong right_insertion(long[] a, long x) \n{\n\tlong l = 0, r = a.length;\n\twhile (l < r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (a[m] <= x) \n\t\t{\n\t\t\tl = m + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tr = m;\n\t\t}\n\t}\n\treturn l;\n}\nunittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}",
      "timestamp": 1666123313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}