{
  "name": "mbpp_164_are_equivalent",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to determine if the sum of the divisors of two integers are the same.\n\t\n*/\nbool are_equivalent(long num1, long num2) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_164_are_equivalent.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = are_equivalent;\n\n    assert(candidate(36L, 57L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(23L, 47L) == true);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tauto divisors1 = divisors(num1);\n\tauto divisors2 = divisors(num2);\n\t\n\treturn sum(divisors1) == sum(divisors2);\n}",
    "{\n\tauto divisors1 = divisors(num1);\n\tauto divisors2 = divisors(num2);\n\treturn sum(divisors1) == sum(divisors2);\n}",
    "{\n\tauto divisors1 = divisors(num1);\n\tauto divisors2 = divisors(num2);\n\t\n\treturn sum(divisors1) == sum(divisors2);\n}",
    "{\n\tauto divisors1 = divisors(num1);\n\tauto divisors2 = divisors(num2);\n\t\n\treturn sum(divisors1) == sum(divisors2);\n}",
    "{\n\tauto divisors1 = divisors(num1);\n\tauto divisors2 = divisors(num2);\n\t\n\treturn sum(divisors1) == sum(divisors2);\n}",
    "{\n\tauto divisors1 = divisors(num1);\n\tauto divisors2 = divisors(num2);\n\t\n\treturn sum(divisors1) == sum(divisors2);\n}",
    "{\n\tauto divisors1 = divisors(num1);\n\tauto divisors2 = divisors(num2);\n\t\n\treturn sum(divisors1) == sum(divisors2);\n}",
    "{\n\tauto divisors1 = get_divisors(num1);\n\tauto divisors2 = get_divisors(num2);\n\t\n\treturn sum(divisors1) == sum(divisors2);\n}",
    "{\n\tauto divisors1 = divisors(num1);\n\tauto divisors2 = divisors(num2);\n\t\n\treturn sum(divisors1) == sum(divisors2);\n}",
    "{\n\tauto divisors1 = get_divisors(num1);\n\tauto divisors2 = get_divisors(num2);\n\t\n\treturn sum(divisors1) == sum(divisors2);\n}",
    "{\n\tauto divisors1 = getDivisors(num1);\n\tauto divisors2 = getDivisors(num2);\n\t\n\treturn sum(divisors1) == sum(divisors2);\n}",
    "{\n\tauto divisors1 = divisors(num1);\n\tauto divisors2 = divisors(num2);\n\treturn sum(divisors1) == sum(divisors2);\n}",
    "{\n\tauto divisors1 = divisors(num1);\n\tauto divisors2 = divisors(num2);\n\t\n\treturn sum(divisors1) == sum(divisors2);\n}",
    "{\n\tauto divisors1 = divisors(num1);\n\tauto divisors2 = divisors(num2);\n\treturn sum(divisors1) == sum(divisors2);\n}",
    "{\n\tlong sum1 = 0;\n\tlong sum2 = 0;\n\t\n\tfor (long i = 1; i <= num1; i++)\n\t{\n\t\tif (num1 % i == 0)\n\t\t{\n\t\t\tsum1 += i;\n\t\t}\n\t}\n\t\n\tfor (long i = 1; i <= num2; i++)\n\t{\n\t\tif (num2 % i == 0)\n\t\t{\n\t\t\tsum2 += i;\n\t\t}\n\t}\n\t\n\treturn sum1 == sum2;\n}",
    "{\n\tlong sum1 = 0;\n\tlong sum2 = 0;\n\t\n\tforeach(i; 1..num1)\n\t{\n\t\tif(num1 % i == 0)\n\t\t{\n\t\t\tsum1 += i;\n\t\t}\n\t}\n\t\n\tforeach(i; 1..num2)\n\t{\n\t\tif(num2 % i == 0)\n\t\t{\n\t\t\tsum2 += i;\n\t\t}\n\t}\n\t\n\treturn sum1 == sum2;\n}",
    "{\n\tauto divisors1 = divisors(num1);\n\tauto divisors2 = divisors(num2);\n\treturn sum(divisors1) == sum(divisors2);\n}",
    "{\n\tauto divisors1 = divisors(num1);\n\tauto divisors2 = divisors(num2);\n\t\n\treturn sum(divisors1) == sum(divisors2);\n}",
    "{\n\tauto divisors1 = divisors(num1);\n\tauto divisors2 = divisors(num2);\n\t\n\treturn sum(divisors1) == sum(divisors2);\n}",
    "{\n\tauto divisors1 = divisors(num1);\n\tauto divisors2 = divisors(num2);\n\t\n\treturn sum(divisors1) == sum(divisors2);\n}"
  ]
}