{
  "name": "mbpp_745_divisible_by_digits",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_745_divisible_by_digits.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\treturn iota(startnum, endnum).filter!(a => a.to!string.all!(b => a % b.to!int == 0)).array;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1665517189,
      "stdout": "",
      "stderr": "/tmp/tmp0wj9x0ei.d(10): Error: undefined identifier `iota`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0wj9x0ei.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\treturn iota(startnum, endnum).filter!(a => a.toString().split(\"\").all!(b => a % b.to!long == 0)).array();\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1665517190,
      "stdout": "",
      "stderr": "/tmp/tmp3z0kwf4v.d(10): Error: undefined identifier `iota`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3z0kwf4v.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\treturn iota(startnum, endnum).filter!(n => n.toString().all!(c => n % c.to!long == 0));\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1665517190,
      "stdout": "",
      "stderr": "/tmp/tmp5fhojcky.d(10): Error: undefined identifier `iota`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5fhojcky.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\tauto result = new long[];\n\tforeach(i; startnum..endnum)\n\t{\n\t\tauto digits = i.to!string.map!(a => a.to!long).array;\n\t\tauto is_divisible = true;\n\t\tforeach(d; digits)\n\t\t{\n\t\t\tif(i % d != 0)\n\t\t\t{\n\t\t\t\tis_divisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(is_divisible)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1665517190,
      "stdout": "",
      "stderr": "/tmp/tmpcyyz3cce.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\n/tmp/tmpcyyz3cce.d(13): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcyyz3cce.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\treturn iota(startnum, endnum).filter!(a => a.to!string.all!(b => a % b.to!int == 0));\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1665517189,
      "stdout": "",
      "stderr": "/tmp/tmpiwyrwqfn.d(10): Error: undefined identifier `iota`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiwyrwqfn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\tauto result = new long[];\n\tforeach(i; startnum..endnum)\n\t{\n\t\tauto digits = i.digits;\n\t\tif(digits.all!(d => i % d == 0))\n\t\t\tcontinue;\n\t\tresult ~= i;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1665517189,
      "stdout": "",
      "stderr": "/tmp/tmp0f3tw6sw.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\n/tmp/tmp0f3tw6sw.d(13): Error: no property `digits` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0f3tw6sw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\tauto result = new long[](0);\n\tforeach(num; startnum .. endnum)\n\t{\n\t\tauto digits = num.toString().split(\"\").map!(a => a.to!long).array;\n\t\tif(digits.all!(a => num % a == 0))\n\t\t{\n\t\t\tresult ~= num;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1665517190,
      "stdout": "",
      "stderr": "/tmp/tmpjm4ro0v9.d(13): Error: no property `toString` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjm4ro0v9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\tauto result = new long[](0);\n\tforeach(i; startnum..endnum)\n\t{\n\t\tauto digits = i.toString.map!(a => a.to!long).array;\n\t\tif(digits.all!(a => i % a == 0))\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1665517189,
      "stdout": "",
      "stderr": "/tmp/tmpzqm7l58i.d(13): Error: no property `toString` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzqm7l58i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\tauto result = new long[];\n\tforeach(i; startnum..endnum)\n\t{\n\t\tauto digits = i.to!string.split(\"\");\n\t\tbool is_divisible = true;\n\t\tforeach(d; digits)\n\t\t{\n\t\t\tif(i % d.to!long != 0)\n\t\t\t{\n\t\t\t\tis_divisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(is_divisible)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1665517190,
      "stdout": "",
      "stderr": "/tmp/tmpj9m05cr4.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\n/tmp/tmpj9m05cr4.d(13): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj9m05cr4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\tauto result = new long[](0);\n\tforeach(i; startnum..endnum)\n\t{\n\t\tauto digits = i.to!string.map!(a => a.to!long).array;\n\t\tif(digits.all!(a => i % a == 0))\n\t\t\tresult ~= i;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1665517190,
      "stdout": "",
      "stderr": "/tmp/tmpmawwceu7.d(13): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmawwceu7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\treturn iota(startnum, endnum).filter!(a => a.toString().split(\"\").all!(b => a % b.to!long == 0)).array;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1665517189,
      "stdout": "",
      "stderr": "/tmp/tmpq4wonhr1.d(10): Error: undefined identifier `iota`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq4wonhr1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\treturn iota(startnum, endnum).filter!(a => a.toString().all!(b => a % b == 0)).array;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1665517190,
      "stdout": "",
      "stderr": "/tmp/tmp_qmjjngs.d(10): Error: undefined identifier `iota`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_qmjjngs.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\tauto result = new long[];\n\tforeach(i; startnum .. endnum) \n\t{\n\t\tauto num = i;\n\t\tauto isDivisible = true;\n\t\twhile(num != 0) \n\t\t{\n\t\t\tauto digit = num % 10;\n\t\t\tif(digit == 0 || i % digit != 0) \n\t\t\t{\n\t\t\t\tisDivisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tnum /= 10;\n\t\t}\n\t\tif(isDivisible) \n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1665517189,
      "stdout": "",
      "stderr": "/tmp/tmp5kax4i7b.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5kax4i7b.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\tlong[] result = [];\n\tforeach(num; startnum..endnum)\n\t{\n\t\tbool is_divisible = true;\n\t\tforeach(digit; num.to!string)\n\t\t{\n\t\t\tif(num % digit.to!long == 0)\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tis_divisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(is_divisible)\n\t\t{\n\t\t\tresult ~= num;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1665517190,
      "stdout": "",
      "stderr": "/tmp/tmpu_3rndjq.d(14): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu_3rndjq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\treturn iota(startnum, endnum + 1).filter!(x => x.toString().split(\"\").all!(y => x % y.to!int == 0));\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1665517190,
      "stdout": "",
      "stderr": "/tmp/tmp62hejepq.d(10): Error: undefined identifier `iota`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp62hejepq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\tauto result = new long[];\n\tforeach(num; startnum..endnum)\n\t{\n\t\tauto digits = num.to!string.map!(a => a.to!long).array;\n\t\tif(digits.all!(a => num % a == 0))\n\t\t\tresult ~= num;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1665517190,
      "stdout": "",
      "stderr": "/tmp/tmpvt0p42iw.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\n/tmp/tmpvt0p42iw.d(13): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvt0p42iw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\tauto result = new long[](0);\n\tforeach (i; startnum..endnum)\n\t{\n\t\tauto digits = i.to!string.map!(a => a.to!long).array;\n\t\tif (digits.all!(a => i % a == 0))\n\t\t\tresult ~= i;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1665517190,
      "stdout": "",
      "stderr": "/tmp/tmp6uf6_rd5.d(13): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6uf6_rd5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\tlong[] result = new long[0];\n\tforeach(num; startnum..endnum)\n\t{\n\t\tbool isDivisible = true;\n\t\tforeach(digit; num.toString)\n\t\t{\n\t\t\tif(num % digit.to!long == 0)\n\t\t\t\tcontinue;\n\t\t\telse\n\t\t\t{\n\t\t\t\tisDivisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(isDivisible)\n\t\t\tresult ~= num;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1665517190,
      "stdout": "",
      "stderr": "/tmp/tmpzyicw5__.d(14): Error: no property `toString` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzyicw5__.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\tauto result = new long[];\n\tforeach(num; startnum..endnum)\n\t{\n\t\tauto digits = num.to!string.map!(a => a.to!long).array;\n\t\tauto divisible = true;\n\t\tforeach(digit; digits)\n\t\t{\n\t\t\tif(num % digit != 0)\n\t\t\t{\n\t\t\t\tdivisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(divisible)\n\t\t{\n\t\t\tresult ~= num;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1665517190,
      "stdout": "",
      "stderr": "/tmp/tmpg9_8d0wj.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\n/tmp/tmpg9_8d0wj.d(13): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg9_8d0wj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\treturn iota(startnum, endnum).filter!(a => a.toString().all!(b => a % b == 0)).array;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1665517190,
      "stdout": "",
      "stderr": "/tmp/tmp_qmjjngs.d(10): Error: undefined identifier `iota`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_qmjjngs.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\tauto result = new long[];\n\tforeach(i; startnum..endnum)\n\t{\n\t\tauto digits = i.to!string.split(\"\").map!(a => a.to!long).array;\n\t\tif(digits.all!(a => i % a == 0))\n\t\t\tresult ~= i;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "/tmp/tmptmx_nhof.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\n/tmp/tmptmx_nhof.d(13): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptmx_nhof.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\treturn iota(startnum, endnum).filter!(a => a.toString().split(\"\").all!(b => a % b.to!int == 0)).array;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "/tmp/tmp2exlaju3.d(10): Error: undefined identifier `iota`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2exlaju3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\treturn iota(startnum, endnum).filter!(a => a.toString().all!(b => a % b == 0)).array;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1665517190,
      "stdout": "",
      "stderr": "/tmp/tmp_qmjjngs.d(10): Error: undefined identifier `iota`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_qmjjngs.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\tlong[] result = [];\n\tforeach(i; startnum..endnum)\n\t{\n\t\tbool isDivisible = true;\n\t\tforeach(j; i.toString())\n\t\t{\n\t\t\tif(i % j.to!int == 0)\n\t\t\t\tcontinue;\n\t\t\telse\n\t\t\t{\n\t\t\t\tisDivisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(isDivisible)\n\t\t\tresult ~= i;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "/tmp/tmp3tsbr1oz.d(14): Error: no property `toString` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3tsbr1oz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\tauto res = new long[];\n\tforeach(i; startnum..endnum)\n\t{\n\t\tauto num = i;\n\t\tauto divisible = true;\n\t\twhile(num > 0)\n\t\t{\n\t\t\tauto digit = num % 10;\n\t\t\tif(digit == 0)\n\t\t\t{\n\t\t\t\tdivisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif(i % digit != 0)\n\t\t\t{\n\t\t\t\tdivisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tnum /= 10;\n\t\t}\n\t\tif(divisible)\n\t\t\tres ~= i;\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "/tmp/tmpbn70q5qp.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbn70q5qp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\tauto result = new long[](0);\n\tforeach(num; startnum..endnum)\n\t{\n\t\tauto digits = num.toString.split(\"\").map!(a => a.to!long).array;\n\t\tif(digits.all!(a => num % a == 0))\n\t\t\tresult ~= num;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "/tmp/tmpps5z09p6.d(13): Error: no property `toString` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpps5z09p6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\treturn iota(startnum, endnum).filter!(x => x.toString().split(\"\").all!(y => x % y.to!long == 0)).array();\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "/tmp/tmpu32hzomc.d(10): Error: undefined identifier `iota`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu32hzomc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\treturn iota(startnum, endnum).filter!(a => a.toString().split(\"\").map!(b => a % b.to!long).reduce!((a, b) => a && b)).array;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "/tmp/tmpglr85h06.d(10): Error: undefined identifier `iota`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpglr85h06.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\treturn iota(startnum, endnum).filter!(a => a.toString().split(\"\").all!(b => a % b.to!long == 0)).array;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1665517189,
      "stdout": "",
      "stderr": "/tmp/tmpq4wonhr1.d(10): Error: undefined identifier `iota`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq4wonhr1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\tauto result = new long[];\n\tforeach(i; startnum..endnum)\n\t{\n\t\tauto digits = i.toString().split(\"\");\n\t\tauto divisible = true;\n\t\tforeach(d; digits)\n\t\t{\n\t\t\tif(i % d.to!long != 0)\n\t\t\t{\n\t\t\t\tdivisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(divisible)\n\t\t\tresult ~= i;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "/tmp/tmpwmf2igq_.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\n/tmp/tmpwmf2igq_.d(13): Error: no property `toString` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwmf2igq_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\tlong[] result = [];\n\tforeach(i; startnum..endnum) \n\t{\n\t\tbool flag = true;\n\t\tforeach(j; i.to!string) \n\t\t{\n\t\t\tif(i % j.to!long == 0) \n\t\t\t{\n\t\t\t\tflag = true;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tflag = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(flag) \n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "/tmp/tmpneby5n3o.d(14): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpneby5n3o.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\tauto result = new long[];\n\tforeach(i; startnum..endnum)\n\t{\n\t\tauto digits = i.toString().split(\"\").map!(a => a.to!long).array;\n\t\tif(digits.all!(a => i % a == 0))\n\t\t\tresult ~= i;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "/tmp/tmpy3yicuzm.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\n/tmp/tmpy3yicuzm.d(13): Error: no property `toString` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy3yicuzm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\tlong[] result = new long[];\n\tforeach(num; startnum..endnum)\n\t{\n\t\tstring num_str = num.to!string;\n\t\tbool is_divisible = true;\n\t\tforeach(digit; num_str)\n\t\t{\n\t\t\tif(digit == '0')\n\t\t\t{\n\t\t\t\tis_divisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif(num % (digit.to!long - '0'.to!long) != 0)\n\t\t\t{\n\t\t\t\tis_divisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(is_divisible)\n\t\t{\n\t\t\tresult ~= num;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "/tmp/tmpz3_aeki2.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\n/tmp/tmpz3_aeki2.d(13): Error: no property `to` for type `long`\n/tmp/tmpz3_aeki2.d(22): Error: no property `to` for type `immutable(char)`\n/tmp/tmpz3_aeki2.d(22): Error: no property `to` for type `char`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz3_aeki2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\tauto r = new long[];\n\tforeach(i; startnum..endnum)\n\t{\n\t\tif(i < 10)\n\t\t{\n\t\t\tr ~= i;\n\t\t\tcontinue;\n\t\t}\n\t\tauto digits = i.to!string.map!(a => a.to!long).array;\n\t\tauto divisible = true;\n\t\tforeach(d; digits)\n\t\t{\n\t\t\tif(i % d != 0)\n\t\t\t{\n\t\t\t\tdivisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(divisible)\n\t\t{\n\t\t\tr ~= i;\n\t\t}\n\t}\n\treturn r;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "/tmp/tmp9z3qxxl1.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\n/tmp/tmp9z3qxxl1.d(18): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9z3qxxl1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\tlong[] result = [];\n\tforeach(num; startnum..endnum)\n\t{\n\t\tbool is_divisible = true;\n\t\tforeach(digit; num.toString())\n\t\t{\n\t\t\tif(digit != '0' && num % digit.to!long != 0)\n\t\t\t{\n\t\t\t\tis_divisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(is_divisible)\n\t\t{\n\t\t\tresult ~= num;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "/tmp/tmp90s44y3u.d(14): Error: no property `toString` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp90s44y3u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\treturn iota(startnum, endnum).filter!(n => n.toString().split(\"\").all!(d => n % d.to!long == 0)).array;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "/tmp/tmpprq4isy3.d(10): Error: undefined identifier `iota`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpprq4isy3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\tauto result = new long[];\n\tforeach(i; startnum..endnum) \n\t{\n\t\tauto digits = i.toString.map!(a => a.to!long).array;\n\t\tif(digits.all!(a => i % a == 0)) \n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "/tmp/tmpnya1eile.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\n/tmp/tmpnya1eile.d(13): Error: no property `toString` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnya1eile.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\tauto result = new long[];\n\tforeach(i; startnum..endnum) \n\t{\n\t\tauto digits = to!string(i);\n\t\tauto divisible = true;\n\t\tforeach(digit; digits) \n\t\t{\n\t\t\tif(i % to!int(digit) != 0) \n\t\t\t{\n\t\t\t\tdivisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(divisible) \n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "/tmp/tmp9dke8wvt.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\n/tmp/tmp9dke8wvt.d(13): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9dke8wvt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\treturn iota(startnum, endnum).filter!(n => n.toString().split(\"\").all!(d => n % d.toInt == 0)).array;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "/tmp/tmp8drn2upp.d(10): Error: undefined identifier `iota`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8drn2upp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\tauto result = new long[](0);\n\tforeach(i; startnum .. endnum)\n\t{\n\t\tauto num = i;\n\t\tauto is_divisible = true;\n\t\twhile(num > 0)\n\t\t{\n\t\t\tauto digit = num % 10;\n\t\t\tif(digit == 0 || i % digit != 0)\n\t\t\t{\n\t\t\t\tis_divisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tnum /= 10;\n\t\t}\n\t\tif(is_divisible)\n\t\t\tresult ~= i;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqqj4nrx6.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428415]\n??:? void tmpqqj4nrx6.__unittest_L30_C1() [0x427fc8]\n??:? void tmpqqj4nrx6.__modtest() [0x428194]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ce47]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bcda]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430825]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430cd4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4307b1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bcb1]\n??:? runModuleUnitTests [0x42cc1d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428864]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\tauto result = new long[](0);\n\tforeach (i; startnum..endnum)\n\t{\n\t\tauto digits = new long[](0);\n\t\tauto temp = i;\n\t\twhile (temp > 0)\n\t\t{\n\t\t\tdigits ~= temp % 10;\n\t\t\ttemp /= 10;\n\t\t}\n\t\tif (all!(a => i % a == 0)(digits))\n\t\t{\n\t\t\tcontinue;\n\t\t}\n\t\tresult ~= i;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "/tmp/tmp4szp65vk.d(20): Error: template instance `all!((a) => i % a == 0)` template `all` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4szp65vk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\treturn iota(startnum, endnum).filter!(x => x.toString().split(\"\").all!(y => x % y.to!long == 0)).array;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "/tmp/tmpr8vfu6uu.d(10): Error: undefined identifier `iota`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr8vfu6uu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\treturn iota(startnum, endnum).filter!(x => x.toString().split(\"\").all!(y => x % y.to!long == 0)).array;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "/tmp/tmpr8vfu6uu.d(10): Error: undefined identifier `iota`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr8vfu6uu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\tauto result = new long[];\n\tforeach(i; startnum..endnum)\n\t{\n\t\tauto digits = i.to!string.map!(a => a.to!long).array;\n\t\tif(digits.all!(a => i % a == 0))\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "/tmp/tmp4jx6wkz7.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\n/tmp/tmp4jx6wkz7.d(13): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4jx6wkz7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\tauto result = new long[];\n\tforeach (num; startnum .. endnum) \n\t{\n\t\tauto digits = num.to!string.map!(a => a.to!long).array;\n\t\tif (digits.all!(a => num % a == 0)) \n\t\t{\n\t\t\tresult ~= num;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "/tmp/tmpp1vz142n.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\n/tmp/tmpp1vz142n.d(13): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp1vz142n.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\treturn iota(startnum, endnum).filter!(x => x.toString().all!(y => x % y.to!int == 0));\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "/tmp/tmpzgr8n8i8.d(10): Error: undefined identifier `iota`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzgr8n8i8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\tauto res = new long[];\n\tforeach(i; startnum..endnum)\n\t{\n\t\tauto digits = i.toString.split(\"\");\n\t\tbool flag = true;\n\t\tforeach(j; digits)\n\t\t{\n\t\t\tif(i % j.to!long == 0)\n\t\t\t{\n\t\t\t\tflag = true;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tflag = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(flag)\n\t\t{\n\t\t\tres ~= i;\n\t\t}\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "/tmp/tmpx0ysng_2.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\n/tmp/tmpx0ysng_2.d(13): Error: no property `toString` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx0ysng_2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\tlong[] result;\n\tforeach(i; startnum..endnum)\n\t{\n\t\tif(i.digits.all!(a => i % a == 0))\n\t\t\tcontinue;\n\t\tresult ~= i;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "/tmp/tmpog_5zqni.d(13): Error: no property `digits` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpog_5zqni.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\tauto result = new long[](0);\n\tforeach(i; startnum..endnum)\n\t{\n\t\tauto digits = new long[](0);\n\t\tauto num = i;\n\t\twhile(num > 0)\n\t\t{\n\t\t\tdigits ~= num % 10;\n\t\t\tnum /= 10;\n\t\t}\n\t\tif(all!(a => i % a == 0)(digits))\n\t\t\tcontinue;\n\t\tresult ~= i;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "/tmp/tmpwf29z55p.d(20): Error: template instance `all!((a) => i % a == 0)` template `all` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwf29z55p.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\treturn iota(startnum, endnum).filter!(a => a.toString().split(\"\").all!(b => a % b.to!long == 0)).array;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1665517189,
      "stdout": "",
      "stderr": "/tmp/tmpq4wonhr1.d(10): Error: undefined identifier `iota`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq4wonhr1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\tauto result = new long[];\n\tforeach(i; startnum .. endnum)\n\t{\n\t\tauto digits = i.to!string.map!(a => a.to!long).array;\n\t\tif(digits.all!(a => i % a == 0))\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "/tmp/tmp_2wb31ls.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\n/tmp/tmp_2wb31ls.d(13): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_2wb31ls.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\tauto result = new long[];\n\tforeach(i; startnum..endnum)\n\t{\n\t\tauto digits = i.to!string.split(\"\").map!(a => a.to!long).array;\n\t\tif(digits.all!(a => i % a == 0))\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "/tmp/tmpjdyjcp29.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\n/tmp/tmpjdyjcp29.d(13): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjdyjcp29.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\tlong[] result = [];\n\tforeach(n; startnum..endnum)\n\t{\n\t\tbool isDivisible = true;\n\t\tforeach(d; n.toString)\n\t\t{\n\t\t\tif(n % d.to!long != 0)\n\t\t\t{\n\t\t\t\tisDivisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(isDivisible)\n\t\t\tresult ~= n;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "/tmp/tmpge51ls2s.d(14): Error: no property `toString` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpge51ls2s.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\tauto result = new long[];\n\tforeach(num; startnum..endnum)\n\t{\n\t\tauto digits = num.to!string.map!(a => a.to!long).array;\n\t\tif(digits.all!(a => num % a == 0))\n\t\t{\n\t\t\tresult ~= num;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "/tmp/tmp4r4me4w0.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\n/tmp/tmp4r4me4w0.d(13): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4r4me4w0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\treturn iota(startnum, endnum).filter!(x => x.toString().all!(y => x % y.to!int == 0));\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "/tmp/tmpzgr8n8i8.d(10): Error: undefined identifier `iota`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzgr8n8i8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\treturn iota(startnum, endnum).filter!(a => a.toString().split(\"\").all!(b => a % b.to!long == 0)).array;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1665517189,
      "stdout": "",
      "stderr": "/tmp/tmpq4wonhr1.d(10): Error: undefined identifier `iota`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq4wonhr1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\treturn iota(startnum, endnum).filter!(n => n.toString().split(\"\").all!(d => n % d.toInt() == 0)).array;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "/tmp/tmp7hdudy9t.d(10): Error: undefined identifier `iota`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7hdudy9t.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\tauto result = new long[];\n\tforeach(i; startnum..endnum)\n\t{\n\t\tauto digits = i.to!string.to!long[];\n\t\tif(all!((a,b) => a % b == 0)(digits, i))\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "/tmp/tmp5senaw62.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\n/tmp/tmp5senaw62.d(13): Error: no property `to` for type `long`\n/tmp/tmp5senaw62.d(14): Error: template instance `all!((a, b) => a % b == 0)` template `all` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5senaw62.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\tlong[] result = [];\n\tforeach(i; startnum..endnum)\n\t{\n\t\tbool flag = true;\n\t\tforeach(j; i.to!string)\n\t\t{\n\t\t\tif(i % j.to!long == 0)\n\t\t\t{\n\t\t\t\tflag = true;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tflag = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(flag)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "/tmp/tmp5x1g4ns4.d(14): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5x1g4ns4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\treturn iota(startnum, endnum + 1).filter!(x => x.toString().split(\"\").all!(y => x % y.to!long == 0)).array;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "/tmp/tmpf4farfxr.d(10): Error: undefined identifier `iota`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf4farfxr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\treturn iota(startnum, endnum).filter!(x => x.toString().split(\"\").all!(y => x % y.to!int == 0)).array;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "/tmp/tmpwlk3jd16.d(10): Error: undefined identifier `iota`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwlk3jd16.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\treturn iota(startnum, endnum).filter!(a => a.toString().split(\"\").all!(b => a % b.to!long == 0)).array;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1665517189,
      "stdout": "",
      "stderr": "/tmp/tmpq4wonhr1.d(10): Error: undefined identifier `iota`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq4wonhr1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\tauto result = new long[](0);\n\tforeach(i; startnum..endnum)\n\t{\n\t\tauto digits = i.to!string.split(\"\");\n\t\tbool is_divisible = true;\n\t\tforeach(digit; digits)\n\t\t{\n\t\t\tif(i % digit.to!long != 0)\n\t\t\t{\n\t\t\t\tis_divisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(is_divisible)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "/tmp/tmpsz3febc_.d(13): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsz3febc_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\tauto result = new long[];\n\tforeach(i; startnum..endnum)\n\t{\n\t\tauto is_divisible = true;\n\t\tauto digits = i.to!string.split(\"\");\n\t\tforeach(digit; digits)\n\t\t{\n\t\t\tif(i % digit.to!long != 0)\n\t\t\t{\n\t\t\t\tis_divisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(is_divisible)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "/tmp/tmpl4o28ujl.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\n/tmp/tmpl4o28ujl.d(14): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl4o28ujl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\treturn iota(startnum, endnum+1).filter!(n => n.to!string.all!(c => n % c.to!long == 0));\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "/tmp/tmp6vjwpso8.d(10): Error: undefined identifier `iota`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6vjwpso8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\tlong[] result = new long[];\n\tforeach(num; startnum..endnum)\n\t{\n\t\tstring str = num.to!string;\n\t\tbool flag = true;\n\t\tforeach(c; str)\n\t\t{\n\t\t\tif(c == '0')\n\t\t\t{\n\t\t\t\tflag = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif(num % c.to!long != 0)\n\t\t\t{\n\t\t\t\tflag = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(flag)\n\t\t{\n\t\t\tresult ~= num;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "/tmp/tmpvhu6gfh9.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\n/tmp/tmpvhu6gfh9.d(13): Error: no property `to` for type `long`\n/tmp/tmpvhu6gfh9.d(22): Error: no property `to` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvhu6gfh9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\tauto result = new long[];\n\tforeach(i; startnum..endnum)\n\t{\n\t\tauto digits = i.to!string().map!(a => a.to!long()).array;\n\t\tif(digits.all!(a => i % a == 0))\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "/tmp/tmp5lhu1swe.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\n/tmp/tmp5lhu1swe.d(13): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5lhu1swe.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\treturn iota(startnum, endnum).filter!(a => a.to!string.all!(b => a % b.to!int == 0));\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1665517189,
      "stdout": "",
      "stderr": "/tmp/tmpiwyrwqfn.d(10): Error: undefined identifier `iota`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiwyrwqfn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\treturn iota(startnum, endnum).filter!(x => x.toString().all!(y => x % y.to!long == 0));\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "/tmp/tmpl1v_xiwy.d(10): Error: undefined identifier `iota`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl1v_xiwy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\treturn iota(startnum, endnum).filter!(x => x.toString().all!(y => x % y.to!int == 0));\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "/tmp/tmpzgr8n8i8.d(10): Error: undefined identifier `iota`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzgr8n8i8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\treturn iota(startnum, endnum).filter!(num => num.toString.split(\"\").all!(digit => num % digit.to!long == 0)).array;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "/tmp/tmp8ti50vug.d(10): Error: undefined identifier `iota`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8ti50vug.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\tlong[] result;\n\tforeach(i; startnum..endnum)\n\t{\n\t\tif(i % i.digits.sum == 0)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "/tmp/tmpjlwl_a18.d(13): Error: no property `digits` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjlwl_a18.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\treturn iota(startnum, endnum).filter!(a => a.toString().all!(b => a % b == 0)).array;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1665517190,
      "stdout": "",
      "stderr": "/tmp/tmp_qmjjngs.d(10): Error: undefined identifier `iota`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_qmjjngs.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\treturn iota(startnum, endnum).filter!(x => x.toString().all!(y => x % y == 0)).array;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "/tmp/tmpb2b_ryrd.d(10): Error: undefined identifier `iota`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb2b_ryrd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\treturn iota(startnum, endnum).filter!(x => x.toString().split(\"\").all!(y => x % y.to!int == 0)).array;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "/tmp/tmpwlk3jd16.d(10): Error: undefined identifier `iota`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwlk3jd16.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\tlong[] result = new long[];\n\tforeach(i; startnum..endnum) \n\t{\n\t\tif(i % 10 == 0) \n\t\t{\n\t\t\tcontinue;\n\t\t}\n\t\tbool flag = true;\n\t\tforeach(j; i.digits) \n\t\t{\n\t\t\tif(i % j != 0) \n\t\t\t{\n\t\t\t\tflag = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(flag) \n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "/tmp/tmpcrjhs6yl.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\n/tmp/tmpcrjhs6yl.d(18): Error: no property `digits` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcrjhs6yl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\tauto result = new long[];\n\tforeach(i; startnum..endnum) \n\t{\n\t\tauto digits = i.to!string.split(\"\").map!(a => a.to!long).array;\n\t\tif(digits.every!(a => i % a == 0)) \n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "/tmp/tmptrf2pic9.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\n/tmp/tmptrf2pic9.d(13): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptrf2pic9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\tauto result = new long[](0);\n\tforeach(i; startnum..endnum)\n\t{\n\t\tif(i % 10 == 0)\n\t\t\tcontinue;\n\t\t\n\t\tauto digits = new long[](0);\n\t\tauto temp = i;\n\t\twhile(temp > 0)\n\t\t{\n\t\t\tdigits ~= temp % 10;\n\t\t\ttemp /= 10;\n\t\t}\n\t\t\n\t\tbool isDivisible = true;\n\t\tforeach(d; digits)\n\t\t{\n\t\t\tif(i % d != 0)\n\t\t\t{\n\t\t\t\tisDivisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(isDivisible)\n\t\t\tresult ~= i;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpyv3mqluc.d(44): unittest failure\n----------------\n??:? _d_unittestp [0x4284d5]\n??:? void tmpyv3mqluc.__unittest_L40_C1() [0x42808c]\n??:? void tmpyv3mqluc.__modtest() [0x428258]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cf07]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bd9a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4308e5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d94]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430871]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bd71]\n??:? runModuleUnitTests [0x42ccdd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428924]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\tauto result = new long[];\n\tforeach(i; startnum .. endnum)\n\t{\n\t\tauto divisible = true;\n\t\tforeach(j; i.to!string)\n\t\t{\n\t\t\tif(j != '0' && i % j.to!long != 0)\n\t\t\t{\n\t\t\t\tdivisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(divisible)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "/tmp/tmp2qlul4p_.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\n/tmp/tmp2qlul4p_.d(14): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2qlul4p_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\treturn iota(startnum, endnum).filter!(a => a.toString().split(\"\").map!(b => a % b.to!long).reduce!((a, b) => a && b)).array();\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "/tmp/tmpoia7eul5.d(10): Error: undefined identifier `iota`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoia7eul5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\tlong[] result = [];\n\tforeach(i; startnum..endnum)\n\t{\n\t\tbool divisible = true;\n\t\tforeach(j; i.to!string)\n\t\t{\n\t\t\tif(i % j.to!long == 0)\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdivisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(divisible)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "/tmp/tmp_0gi7lpm.d(14): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_0gi7lpm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\tauto result = new long[];\n\tforeach(i; startnum .. endnum)\n\t{\n\t\tauto num = i;\n\t\tauto isDivisible = true;\n\t\twhile(num > 0)\n\t\t{\n\t\t\tauto digit = num % 10;\n\t\t\tif(digit == 0 || i % digit != 0)\n\t\t\t{\n\t\t\t\tisDivisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tnum /= 10;\n\t\t}\n\t\tif(isDivisible)\n\t\t\tresult ~= i;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "/tmp/tmpaq81ijwu.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpaq81ijwu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\tlong[] result = new long[];\n\tforeach(i; startnum..endnum)\n\t{\n\t\tbool flag = true;\n\t\tforeach(j; i.to!string)\n\t\t{\n\t\t\tif(i % j.to!long == 0)\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tflag = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(flag)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "/tmp/tmpxwutyajp.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\n/tmp/tmpxwutyajp.d(14): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxwutyajp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\tauto result = new long[];\n\tforeach(num; startnum..endnum)\n\t{\n\t\tauto digits = num.to!string.split(\"\").map!(a => a.to!long).array;\n\t\tif(digits.all!(a => num % a == 0))\n\t\t\tresult ~= num;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "/tmp/tmpweb4vumy.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\n/tmp/tmpweb4vumy.d(13): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpweb4vumy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\treturn iota(startnum, endnum).filter!(a => a.toString().split(\"\").all!(b => a % b.to!long == 0)).array;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1665517189,
      "stdout": "",
      "stderr": "/tmp/tmpq4wonhr1.d(10): Error: undefined identifier `iota`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq4wonhr1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\tlong[] result = [];\n\tforeach(i; startnum..endnum)\n\t{\n\t\tbool is_divisible = true;\n\t\tforeach(j; i.to!string)\n\t\t{\n\t\t\tif(i % j.to!long == 0)\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tis_divisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(is_divisible)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "/tmp/tmpfi7i7uwh.d(14): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfi7i7uwh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\treturn iota(startnum, endnum).filter!(a => a.toString().chars.all!(b => a % b == 0)).array;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "/tmp/tmp0yt2o6h8.d(10): Error: undefined identifier `iota`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0yt2o6h8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\tauto result = new long[];\n\tforeach (num; startnum..endnum) \n\t{\n\t\tauto num_str = to!string(num);\n\t\tauto divisible = true;\n\t\tforeach (c; num_str) \n\t\t{\n\t\t\tif (c == '0') \n\t\t\t{\n\t\t\t\tdivisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (num % (c - '0') != 0) \n\t\t\t{\n\t\t\t\tdivisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (divisible) \n\t\t{\n\t\t\tresult ~= num;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "/tmp/tmpidhglq2w.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\n/tmp/tmpidhglq2w.d(13): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpidhglq2w.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\tauto result = new long[];\n\tforeach(num; startnum..endnum) \n\t{\n\t\tauto digits = num.to!string.map!(a => a.to!long).array;\n\t\tif(digits.all!(a => num % a == 0))\n\t\t\tresult ~= num;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "/tmp/tmp49t3c5ts.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\n/tmp/tmp49t3c5ts.d(13): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp49t3c5ts.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\treturn iota(startnum, endnum + 1).filter!(x => x.toString().all!(y => x % y == 0)).array;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "/tmp/tmp4s9dmwbt.d(10): Error: undefined identifier `iota`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4s9dmwbt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\tlong[] result;\n\tforeach(i; startnum..endnum)\n\t{\n\t\tif(i.digits.all!(a => i % a == 0))\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "/tmp/tmp6ucz3cce.d(13): Error: no property `digits` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6ucz3cce.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\tauto result = new long[];\n\tforeach(i; startnum .. endnum)\n\t{\n\t\tauto num = i;\n\t\tauto is_divisible = true;\n\t\twhile(num > 0)\n\t\t{\n\t\t\tauto digit = num % 10;\n\t\t\tif(digit == 0 || i % digit != 0)\n\t\t\t{\n\t\t\t\tis_divisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tnum /= 10;\n\t\t}\n\t\tif(is_divisible)\n\t\t\tresult ~= i;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "/tmp/tmpie2sl57f.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpie2sl57f.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\treturn iota(startnum, endnum).filter!(x => x.toString().all!(y => x % y.to!int == 0)).array;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "/tmp/tmpu4rxmjkf.d(10): Error: undefined identifier `iota`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu4rxmjkf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\tlong[] result = new long[];\n\tforeach(num; startnum .. endnum)\n\t{\n\t\tstring num_str = num.to!string;\n\t\tbool is_divisible = true;\n\t\tforeach(digit; num_str)\n\t\t{\n\t\t\tif(num % digit.to!long == 0)\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tis_divisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(is_divisible)\n\t\t{\n\t\t\tresult ~= num;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "/tmp/tmpyoso_yps.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\n/tmp/tmpyoso_yps.d(13): Error: no property `to` for type `long`\n/tmp/tmpyoso_yps.d(17): Error: no property `to` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyoso_yps.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\treturn iota(startnum, endnum).filter!(x => x.toString().split(\"\").all!(y => x % y.to!long == 0)).array;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "/tmp/tmpr8vfu6uu.d(10): Error: undefined identifier `iota`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr8vfu6uu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\treturn iota(startnum, endnum).filter!(a => a.toString().all!(b => a % b == 0)).array;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1665517190,
      "stdout": "",
      "stderr": "/tmp/tmp_qmjjngs.d(10): Error: undefined identifier `iota`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_qmjjngs.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\treturn iota(startnum, endnum + 1).filter!(x => x.to!string.all!(y => x % y.to!int == 0)).array;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "/tmp/tmpkttx2viv.d(10): Error: undefined identifier `iota`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkttx2viv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\treturn iota(startnum, endnum).filter!(x => x.to!string.all!(y => x % y.to!long == 0));\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "/tmp/tmp7xfrtkfe.d(10): Error: undefined identifier `iota`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7xfrtkfe.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\tlong[] result = new long[];\n\tforeach(num; startnum..endnum)\n\t{\n\t\tbool is_divisible = true;\n\t\tforeach(digit; num.toString)\n\t\t{\n\t\t\tif(num % digit.to!long == 0)\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tis_divisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(is_divisible)\n\t\t{\n\t\t\tresult ~= num;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "/tmp/tmpdjdaqk7z.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\n/tmp/tmpdjdaqk7z.d(14): Error: no property `toString` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdjdaqk7z.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\tauto result = new long[];\n\tforeach(n; startnum..endnum)\n\t{\n\t\tauto digits = n.to!string.map!(a => a.to!long).array;\n\t\tif(digits.all!(a => n % a == 0))\n\t\t\tresult ~= n;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "/tmp/tmp752xi7g6.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\n/tmp/tmp752xi7g6.d(13): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp752xi7g6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\tauto result = new long[];\n\tforeach(i; startnum..endnum)\n\t{\n\t\tauto digits = i.to!string.split(\"\");\n\t\tbool isDivisible = true;\n\t\tforeach(digit; digits)\n\t\t{\n\t\t\tif(i % digit.to!long != 0)\n\t\t\t{\n\t\t\t\tisDivisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(isDivisible)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "/tmp/tmp9s1xocnw.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\n/tmp/tmp9s1xocnw.d(13): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9s1xocnw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\tauto result = new long[](0);\n\tforeach (i; startnum .. endnum)\n\t{\n\t\tauto digits = i.to!string.map!(a => a.to!long).array;\n\t\tif (digits.all!(a => i % a == 0))\n\t\t\tresult ~= i;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "/tmp/tmprm9dkgbq.d(13): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprm9dkgbq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\tauto result = [];\n\tforeach(num; startnum..endnum)\n\t{\n\t\tbool is_divisible = true;\n\t\tforeach(digit; num.to!string)\n\t\t{\n\t\t\tif(digit == '0')\n\t\t\t{\n\t\t\t\tis_divisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif(num % digit.to!long != 0)\n\t\t\t{\n\t\t\t\tis_divisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(is_divisible)\n\t\t{\n\t\t\tresult ~= num;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "/tmp/tmplm20t6em.d(14): Error: no property `to` for type `long`\n/tmp/tmplm20t6em.d(29): Error: cannot append type `long` to type `void[]`\n/tmp/tmplm20t6em.d(32): Error: cannot implicitly convert expression `result` of type `void[]` to `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplm20t6em.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\tlong[] result = [];\n\tforeach(i; startnum..endnum)\n\t{\n\t\tif(i % 10 == 0)\n\t\t\tcontinue;\n\t\tbool is_divisible = true;\n\t\tforeach(j; i.toString)\n\t\t{\n\t\t\tif(i % j.to!long == 0)\n\t\t\t\tcontinue;\n\t\t\telse\n\t\t\t{\n\t\t\t\tis_divisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(is_divisible)\n\t\t\tresult ~= i;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "/tmp/tmpb4onkf3n.d(16): Error: no property `toString` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb4onkf3n.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\tauto result = new long[];\n\tforeach(i; startnum..endnum) \n\t{\n\t\tauto num = i;\n\t\tauto is_divisible = true;\n\t\twhile(num != 0) \n\t\t{\n\t\t\tauto digit = num % 10;\n\t\t\tif(digit == 0 || i % digit != 0) \n\t\t\t{\n\t\t\t\tis_divisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tnum /= 10;\n\t\t}\n\t\tif(is_divisible) \n\t\t\tresult ~= i;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "/tmp/tmps77g7gh1.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps77g7gh1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\treturn iota(startnum, endnum).filter!(a => a.toString().all!(b => a % b == 0)).array;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1665517190,
      "stdout": "",
      "stderr": "/tmp/tmp_qmjjngs.d(10): Error: undefined identifier `iota`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_qmjjngs.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\tauto result = new long[];\n\tforeach(i; startnum..endnum) \n\t{\n\t\tauto digits = i.to!string.map!(a => a.to!long).array;\n\t\tif(digits.all!(a => i % a == 0))\n\t\t\tresult ~= i;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "/tmp/tmpqc_p5c2d.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\n/tmp/tmpqc_p5c2d.d(13): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqc_p5c2d.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\tauto result = new long[];\n\tforeach(i; startnum..endnum)\n\t{\n\t\tauto digits = new long[];\n\t\tforeach(j; i.to!string)\n\t\t{\n\t\t\tdigits ~= j.to!long;\n\t\t}\n\t\tif(digits.all!(a => i % a == 0))\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "/tmp/tmp80k3nops.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\n/tmp/tmp80k3nops.d(13): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\n/tmp/tmp80k3nops.d(14): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp80k3nops.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\tauto result = new long[];\n\tforeach(num; startnum..endnum)\n\t{\n\t\tbool is_divisible = true;\n\t\tforeach(digit; num.to!string)\n\t\t{\n\t\t\tif(num % digit.to!long == 0)\n\t\t\t\tcontinue;\n\t\t\telse\n\t\t\t{\n\t\t\t\tis_divisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(is_divisible)\n\t\t\tresult ~= num;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "/tmp/tmp_m4y33fr.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\n/tmp/tmp_m4y33fr.d(14): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_m4y33fr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\treturn iota(startnum, endnum).filter!(a => a.toString().split(\"\").all!(b => a % b.to!long == 0)).array;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1665517189,
      "stdout": "",
      "stderr": "/tmp/tmpq4wonhr1.d(10): Error: undefined identifier `iota`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq4wonhr1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\tauto result = new long[];\n\tforeach(i; startnum..endnum)\n\t{\n\t\tauto digits = i.to!string.split(\"\");\n\t\tif(all!(a => a % i == 0)(digits.map!(a => a.to!long)))\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "/tmp/tmpd7eu0svq.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\n/tmp/tmpd7eu0svq.d(13): Error: no property `to` for type `long`\n/tmp/tmpd7eu0svq.d(14): Error: template instance `all!((a) => a % i == 0)` template `all` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd7eu0svq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\treturn iota(startnum, endnum).filter!(a => a.toString().split(\"\").all!(b => a % b.to!long == 0));\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "/tmp/tmp611lgl41.d(10): Error: undefined identifier `iota`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp611lgl41.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\treturn iota(startnum, endnum).filter!(a => a.toString().split(\"\").all!(b => a % b.toInt == 0)).array;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "/tmp/tmpbc87xhb5.d(10): Error: undefined identifier `iota`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbc87xhb5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\tauto result = new long[];\n\tforeach(i; startnum..endnum)\n\t{\n\t\tauto digits = to!string(i).map!(a => a.to!long()).filter!(a => a != 0);\n\t\tif(digits.all!(a => i % a == 0))\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "/tmp/tmpy9s_iul5.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\n/tmp/tmpy9s_iul5.d(13): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy9s_iul5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\treturn iota(startnum, endnum).filter!(a => a.toString().split(\"\").all!(b => a % b.to!long == 0)).array;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1665517189,
      "stdout": "",
      "stderr": "/tmp/tmpq4wonhr1.d(10): Error: undefined identifier `iota`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq4wonhr1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\tauto result = new long[];\n\tforeach(i; startnum..endnum)\n\t{\n\t\tauto digits = i.to!string().map!(a => a.to!int()).array;\n\t\tif(digits.all!(a => i % a == 0))\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "/tmp/tmp03xim3mo.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\n/tmp/tmp03xim3mo.d(13): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp03xim3mo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\tauto result = new long[](0);\n\tforeach(i; startnum..endnum)\n\t{\n\t\tauto digits = i.to!string.to!long[];\n\t\tbool divisible = true;\n\t\tforeach(d; digits)\n\t\t{\n\t\t\tif(i % d != 0)\n\t\t\t{\n\t\t\t\tdivisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(divisible)\n\t\t\tresult ~= i;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "/tmp/tmpo8xsoe1d.d(13): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo8xsoe1d.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\treturn iota(startnum, endnum).filter!(x => x.toString().split(\"\").all!(y => x % y.to!long == 0)).array;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "/tmp/tmpr8vfu6uu.d(10): Error: undefined identifier `iota`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr8vfu6uu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\tlong[] result = [];\n\tforeach(i; startnum..endnum)\n\t{\n\t\tint[] digits = to!int(i.to!string());\n\t\tbool is_divisible = true;\n\t\tforeach(d; digits)\n\t\t{\n\t\t\tif(d == 0)\n\t\t\t{\n\t\t\t\tis_divisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif(i % d != 0)\n\t\t\t{\n\t\t\t\tis_divisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(is_divisible)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "/tmp/tmpsdpv3j_t.d(13): Error: template instance `to!int` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsdpv3j_t.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\treturn iota(startnum, endnum).filter!(x => x.toString().split(\"\").all!(y => x % y.to!long == 0));\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "/tmp/tmpjpr4uita.d(10): Error: undefined identifier `iota`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjpr4uita.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\treturn iota(startnum, endnum).filter!(x => x.toString().split(\"\").all!(y => x % y.to!long == 0)).array;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "/tmp/tmpr8vfu6uu.d(10): Error: undefined identifier `iota`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr8vfu6uu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\treturn iota(startnum, endnum).filter!(a => a.toString().split(\"\").all!(b => a % b.toInt == 0)).array;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "/tmp/tmpbc87xhb5.d(10): Error: undefined identifier `iota`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbc87xhb5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\treturn iota(startnum, endnum).filter!(a => a.to!string.all!(b => a % b.to!int == 0)).array;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1665517189,
      "stdout": "",
      "stderr": "/tmp/tmp0wj9x0ei.d(10): Error: undefined identifier `iota`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0wj9x0ei.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\tauto result = new long[](0);\n\tforeach(i; startnum..endnum)\n\t{\n\t\tauto digits = i.to!string.split(\"\");\n\t\tauto divisible = true;\n\t\tforeach(j; digits)\n\t\t{\n\t\t\tif(i % j.to!long != 0)\n\t\t\t{\n\t\t\t\tdivisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(divisible)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "/tmp/tmp07ausut3.d(13): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp07ausut3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\tauto result = new long[];\n\tforeach(num; startnum..endnum)\n\t{\n\t\tif(num.digits.all!((digit) => num % digit == 0))\n\t\t\tcontinue;\n\t\tresult ~= num;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "/tmp/tmpmzrg7_no.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\n/tmp/tmpmzrg7_no.d(13): Error: no property `digits` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmzrg7_no.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\tlong[] result;\n\tforeach(i; startnum..endnum)\n\t{\n\t\tbool divisible = true;\n\t\tforeach(j; i.toString())\n\t\t{\n\t\t\tif(i % j.to!long == 0)\n\t\t\t{\n\t\t\t\tdivisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(divisible)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "/tmp/tmp564zznc5.d(14): Error: no property `toString` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp564zznc5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\tlong[] result = [for(long i = startnum; i < endnum; i++) if(i.digits.all!(a => a == 0 || i % a == 0)) i];\n\treturn result;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "/tmp/tmpepjhatqe.d(10): Error: expression expected, not `for`\n/tmp/tmpepjhatqe.d(10): Error: found `i` when expecting `.` following long\n/tmp/tmpepjhatqe.d(10): Error: found `=` when expecting identifier following `long`.\n/tmp/tmpepjhatqe.d(10): Error: found `startnum` when expecting `,`\n/tmp/tmpepjhatqe.d(10): Error: expression expected, not `;`\n/tmp/tmpepjhatqe.d(10): Error: found `i` when expecting `,`\n/tmp/tmpepjhatqe.d(10): Error: expression expected, not `<`\n/tmp/tmpepjhatqe.d(10): Error: found `endnum` when expecting `,`\n/tmp/tmpepjhatqe.d(10): Error: expression expected, not `;`\n/tmp/tmpepjhatqe.d(10): Error: found `i` when expecting `,`\n/tmp/tmpepjhatqe.d(10): Error: expression expected, not `)`\n/tmp/tmpepjhatqe.d(10): Error: found `if` when expecting `,`\n/tmp/tmpepjhatqe.d(10): Error: C style cast illegal, use `cast(i.digits.all!((a) => a == 0 || i % a == 0))i`\n/tmp/tmpepjhatqe.d(10): Error: found `]` when expecting `,`\n/tmp/tmpepjhatqe.d(10): Error: expression expected, not `;`\n/tmp/tmpepjhatqe.d(1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\tauto result = new long[](0);\n\tforeach(i; startnum..endnum)\n\t{\n\t\tauto num = i;\n\t\tbool is_divisible = true;\n\t\twhile(num > 0)\n\t\t{\n\t\t\tauto digit = num % 10;\n\t\t\tif(digit == 0 || i % digit != 0)\n\t\t\t{\n\t\t\t\tis_divisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tnum /= 10;\n\t\t}\n\t\tif(is_divisible)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp6a85kkit.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x428415]\n??:? void tmp6a85kkit.__unittest_L32_C1() [0x427fc8]\n??:? void tmp6a85kkit.__modtest() [0x428194]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ce47]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bcda]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430825]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430cd4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4307b1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bcb1]\n??:? runModuleUnitTests [0x42cc1d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428864]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\treturn iota(startnum, endnum).filter!(a => a.toString().all!(b => a % b == 0)).array;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1665517190,
      "stdout": "",
      "stderr": "/tmp/tmp_qmjjngs.d(10): Error: undefined identifier `iota`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_qmjjngs.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\treturn iota(startnum, endnum).filter!(a => a.toString().split(\"\").all!(b => a % b.to!long == 0)).array;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1665517189,
      "stdout": "",
      "stderr": "/tmp/tmpq4wonhr1.d(10): Error: undefined identifier `iota`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq4wonhr1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\tauto result = new long[](0);\n\tforeach(i; startnum..endnum)\n\t{\n\t\tauto digits = i.toString;\n\t\tbool divisible = true;\n\t\tforeach(digit; digits)\n\t\t{\n\t\t\tif(i % digit.to!long == 0)\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdivisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(divisible)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "/tmp/tmpwdl2uhej.d(13): Error: no property `toString` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwdl2uhej.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\tauto result = new long[];\n\tforeach(i; startnum..endnum) \n\t{\n\t\tauto digits = i.to!string().map!(a => a.to!long()).array;\n\t\tif(digits.all!(a => i % a == 0)) \n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "/tmp/tmpbv9gaceo.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\n/tmp/tmpbv9gaceo.d(13): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbv9gaceo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\treturn iota(startnum, endnum).filter!(a => a.toString().split(\"\").all!(b => a % b.to!long == 0)).array;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1665517189,
      "stdout": "",
      "stderr": "/tmp/tmpq4wonhr1.d(10): Error: undefined identifier `iota`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq4wonhr1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\treturn iota(startnum, endnum).filter!(a => a.toString().split(\"\").all!(b => a % b.to!long == 0)).array;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1665517189,
      "stdout": "",
      "stderr": "/tmp/tmpq4wonhr1.d(10): Error: undefined identifier `iota`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq4wonhr1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\treturn iota(startnum, endnum).filter!(a => a.toString().split(\"\").all!(b => a % b.to!long == 0)).array;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1665517189,
      "stdout": "",
      "stderr": "/tmp/tmpq4wonhr1.d(10): Error: undefined identifier `iota`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq4wonhr1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\treturn iota(startnum, endnum).filter!(a => a.toString().split(\"\").all!(b => a % b.to!long == 0)).array;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1665517189,
      "stdout": "",
      "stderr": "/tmp/tmpq4wonhr1.d(10): Error: undefined identifier `iota`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq4wonhr1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\tauto result = new long[](0);\n\tforeach(i; startnum..endnum)\n\t{\n\t\tauto digits = i.to!string().map!(a => a.to!long()).array;\n\t\tif(digits.all!(a => i % a == 0))\n\t\t\tresult ~= i;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "/tmp/tmpmhh440c9.d(13): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmhh440c9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\tauto result = new long[];\n\tforeach(i; startnum..endnum)\n\t{\n\t\tauto digits = i.to!string.split(\"\").map!(a => a.to!long).array;\n\t\tif(digits.all!(a => i % a == 0))\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "/tmp/tmpjdyjcp29.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\n/tmp/tmpjdyjcp29.d(13): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjdyjcp29.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\tauto result = new long[](0);\n\tforeach(num; startnum..endnum) \n\t{\n\t\tauto digits = num.to!string.map!(a => a.to!long).array;\n\t\tif(digits.all!(a => num % a == 0)) \n\t\t{\n\t\t\tresult ~= num;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "/tmp/tmp36f9y01n.d(13): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp36f9y01n.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\treturn iota(startnum, endnum).filter!(a => a.toString().split(\"\").all!(b => a % b.to!long == 0));\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "/tmp/tmp611lgl41.d(10): Error: undefined identifier `iota`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp611lgl41.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\tauto result = new long[](0);\n\tforeach(num; startnum..endnum)\n\t{\n\t\tauto digits = num.to!string.map!(a => a.to!long).array;\n\t\tif(digits.all!(a => num % a == 0))\n\t\t{\n\t\t\tresult ~= num;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "/tmp/tmphfa3hr8r.d(13): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphfa3hr8r.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\tauto result = new long[];\n\tforeach(num; startnum..endnum)\n\t{\n\t\tauto digits = num.toString.split(\"\").map!(a => a.to!long).array;\n\t\tif(digits.all!(a => num % a == 0))\n\t\t\tresult ~= num;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "/tmp/tmp65k1u4cb.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\n/tmp/tmp65k1u4cb.d(13): Error: no property `toString` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp65k1u4cb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\tauto result = new long[];\n\tforeach(i; startnum..endnum)\n\t{\n\t\tauto digits = i.to!string.map!(a => a.to!long).array;\n\t\tif(digits.every!(a => i % a == 0))\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "/tmp/tmp26lhclh9.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\n/tmp/tmp26lhclh9.d(13): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp26lhclh9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\treturn iota(startnum, endnum).filter!(a => a.toString().split(\"\").all!(b => a % b.to!long == 0)).array;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1665517189,
      "stdout": "",
      "stderr": "/tmp/tmpq4wonhr1.d(10): Error: undefined identifier `iota`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq4wonhr1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\treturn iota(startnum, endnum).filter!(a => a.toString().split(\"\").all!(b => a % b.to!long == 0)).array;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1665517189,
      "stdout": "",
      "stderr": "/tmp/tmpq4wonhr1.d(10): Error: undefined identifier `iota`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq4wonhr1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\tauto result = new long[];\n\tforeach(i; startnum..endnum) \n\t{\n\t\tauto digits = i.to!string.map!(a => a.to!long).array;\n\t\tif(digits.all!(a => i % a == 0))\n\t\t\tresult ~= i;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "/tmp/tmpqc_p5c2d.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\n/tmp/tmpqc_p5c2d.d(13): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqc_p5c2d.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\tauto result = new long[];\n\tforeach(num; startnum..endnum)\n\t{\n\t\tauto digits = num.to!string.map!(a => a.to!long).array;\n\t\tif(digits.all!(a => num % a == 0))\n\t\t\tresult ~= num;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1665517190,
      "stdout": "",
      "stderr": "/tmp/tmpvt0p42iw.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\n/tmp/tmpvt0p42iw.d(13): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvt0p42iw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\tauto result = new long[];\n\tforeach(num; startnum..endnum)\n\t{\n\t\tauto digits = num.toString.split(\"\");\n\t\tauto isDivisible = true;\n\t\tforeach(digit; digits)\n\t\t{\n\t\t\tif(num % digit.to!long != 0)\n\t\t\t{\n\t\t\t\tisDivisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(isDivisible)\n\t\t{\n\t\t\tresult ~= num;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "/tmp/tmp_qy6xir5.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\n/tmp/tmp_qy6xir5.d(13): Error: no property `toString` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_qy6xir5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\tauto r = new long[];\n\tforeach(i; startnum..endnum)\n\t{\n\t\tauto digits = i.to!string.split(\"\").map!(a => a.to!long).array;\n\t\tif(digits.all!(a => i % a == 0))\n\t\t\tr ~= i;\n\t}\n\treturn r;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "/tmp/tmp3hnsjdth.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\n/tmp/tmp3hnsjdth.d(13): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3hnsjdth.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\tauto result = new long[];\n\tforeach(i; startnum..endnum)\n\t{\n\t\tauto digits = i.to!string.map!(a => a.to!long).array;\n\t\tif(digits.all!(a => i % a == 0))\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "/tmp/tmp4jx6wkz7.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\n/tmp/tmp4jx6wkz7.d(13): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4jx6wkz7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\treturn iota(startnum, endnum).filter!(n => n.toString().split(\"\").all!(d => n % d == 0)).array;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "/tmp/tmphka0rdaq.d(10): Error: undefined identifier `iota`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphka0rdaq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\tauto result = new long[](0);\n\tforeach(num; startnum..endnum)\n\t{\n\t\tauto digits = num.toString.map!(a => a.to!long).array;\n\t\tif(digits.all!(a => num % a == 0))\n\t\t\tresult ~= num;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "/tmp/tmp5s6qpt00.d(13): Error: no property `toString` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5s6qpt00.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\tauto result = new long[];\n\tforeach(i; startnum..endnum)\n\t{\n\t\tbool flag = true;\n\t\tforeach(j; i.to!string)\n\t\t{\n\t\t\tif(i % j.to!long == 0)\n\t\t\t{\n\t\t\t\tflag = true;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tflag = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(flag)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "/tmp/tmpqx1ip8a4.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\n/tmp/tmpqx1ip8a4.d(14): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqx1ip8a4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\treturn iota(startnum, endnum).filter!(n => n.toString().split(\"\").all!(c => n % c.to!long == 0)).array;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "/tmp/tmpbsihfqn9.d(10): Error: undefined identifier `iota`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbsihfqn9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\tauto result = new long[](0);\n\tforeach (num; startnum..endnum)\n\t{\n\t\tauto digits = num.toString.map!(a => a.to!long).array;\n\t\tauto divisible = true;\n\t\tforeach (digit; digits)\n\t\t{\n\t\t\tif (num % digit != 0)\n\t\t\t{\n\t\t\t\tdivisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (divisible)\n\t\t{\n\t\t\tresult ~= num;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "/tmp/tmpfl2zpqeu.d(13): Error: no property `toString` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfl2zpqeu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\tauto result = new long[](0);\n\tforeach (num; startnum .. endnum)\n\t{\n\t\tauto digits = num.toString.split(\"\").map!(a => a.to!long).array;\n\t\tif (digits.all!(a => num % a == 0))\n\t\t{\n\t\t\tresult ~= num;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "/tmp/tmpx45whpro.d(13): Error: no property `toString` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx45whpro.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\tlong[] result = new long[];\n\tforeach(i; startnum..endnum)\n\t{\n\t\tif(i.digits.all!((a) => i % a == 0))\n\t\t\tresult ~= i;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "/tmp/tmp58pp46ye.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\n/tmp/tmp58pp46ye.d(13): Error: no property `digits` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp58pp46ye.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\tauto result = new long[];\n\tforeach(num; startnum..endnum)\n\t{\n\t\tauto digits = num.to!string.map!(a => a.to!long).array;\n\t\tif(digits.all!(a => num % a == 0))\n\t\t\tresult ~= num;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1665517190,
      "stdout": "",
      "stderr": "/tmp/tmpvt0p42iw.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\n/tmp/tmpvt0p42iw.d(13): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvt0p42iw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\tauto result = new long[];\n\tforeach(i; startnum..endnum)\n\t{\n\t\tbool is_divisible = true;\n\t\tforeach(j; i.to!string())\n\t\t{\n\t\t\tif(i % j.to!int == 0)\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tis_divisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(is_divisible)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "/tmp/tmpvpis99ok.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\n/tmp/tmpvpis99ok.d(14): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvpis99ok.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\treturn iota(startnum, endnum).filter!(x => x.toString().all!(y => x % y.to!long == 0)).array;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "/tmp/tmp42d3dgp9.d(10): Error: undefined identifier `iota`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp42d3dgp9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\tauto result = new long[];\n\tforeach(num; startnum..endnum)\n\t{\n\t\tbool divisible = true;\n\t\tforeach(digit; num.toString())\n\t\t{\n\t\t\tif(digit.to!long == 0)\n\t\t\t{\n\t\t\t\tdivisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif(num % digit.to!long != 0)\n\t\t\t{\n\t\t\t\tdivisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(divisible)\n\t\t{\n\t\t\tresult ~= num;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "/tmp/tmp90tpm3pm.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\n/tmp/tmp90tpm3pm.d(14): Error: no property `toString` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp90tpm3pm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\tauto result = new long[];\n\tforeach(num; startnum..endnum)\n\t{\n\t\tauto digits = num.to!string.map!(a => a.to!long).array;\n\t\tif(digits.all!(a => num % a == 0))\n\t\t\tresult ~= num;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1665517190,
      "stdout": "",
      "stderr": "/tmp/tmpvt0p42iw.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\n/tmp/tmpvt0p42iw.d(13): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvt0p42iw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\tauto result = new long[];\n\tforeach(i; startnum .. endnum)\n\t{\n\t\tauto digits = i.to!string.split(\"\");\n\t\tauto is_divisible = true;\n\t\tforeach(digit; digits)\n\t\t{\n\t\t\tif(i % digit.to!long != 0)\n\t\t\t{\n\t\t\t\tis_divisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(is_divisible)\n\t\t\tresult ~= i;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "/tmp/tmpp_s7mh9b.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\n/tmp/tmpp_s7mh9b.d(13): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp_s7mh9b.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\tauto result = new long[](0);\n\tforeach(i; startnum..endnum)\n\t{\n\t\tbool divisible = true;\n\t\tforeach(j; i.to!string)\n\t\t{\n\t\t\tif(i % j.to!long == 0)\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdivisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(divisible)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "/tmp/tmp61a85k4o.d(14): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp61a85k4o.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\treturn iota(startnum, endnum).filter!(a => a.toString().split(\"\").all!(b => a % b.to!long == 0)).array;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1665517189,
      "stdout": "",
      "stderr": "/tmp/tmpq4wonhr1.d(10): Error: undefined identifier `iota`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq4wonhr1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\tlong[] result = [];\n\tforeach(i; startnum..endnum)\n\t{\n\t\tbool divisible = true;\n\t\tforeach(j; i.to!string)\n\t\t{\n\t\t\tif(j.to!long == 0)\n\t\t\t{\n\t\t\t\tdivisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if(i % j.to!long != 0)\n\t\t\t{\n\t\t\t\tdivisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(divisible)\n\t\t\tresult ~= i;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "/tmp/tmphpx9gsda.d(14): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphpx9gsda.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\treturn iota(startnum, endnum).filter!(a => a.to!string.all!(b => a % b.to!long == 0)).array;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "/tmp/tmp4oleudo8.d(10): Error: undefined identifier `iota`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4oleudo8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\treturn iota(startnum, endnum).filter!(a => a.toString().all!(b => a % b == 0)).array;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1665517190,
      "stdout": "",
      "stderr": "/tmp/tmp_qmjjngs.d(10): Error: undefined identifier `iota`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_qmjjngs.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\tauto result = new long[];\n\tforeach(i; startnum..endnum)\n\t{\n\t\tauto digits = i.to!string.map!(a => a.to!int).array;\n\t\tif(digits.all!(a => i % a == 0))\n\t\t\tresult ~= i;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "/tmp/tmp4the6xs1.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\n/tmp/tmp4the6xs1.d(13): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4the6xs1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\treturn iota(startnum, endnum).filter!(n => n.toString().split(\"\").all!(c => n % c.to!long == 0)).array;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "/tmp/tmpbsihfqn9.d(10): Error: undefined identifier `iota`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbsihfqn9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\treturn iota(startnum, endnum).filter!(a => a.toString().split(\"\").all!(b => a % b.to!long == 0)).array;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1665517189,
      "stdout": "",
      "stderr": "/tmp/tmpq4wonhr1.d(10): Error: undefined identifier `iota`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq4wonhr1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\tlong[] result = new long[];\n\tforeach(num; startnum..endnum) \n\t{\n\t\tbool flag = true;\n\t\tforeach(digit; num.to!string) \n\t\t{\n\t\t\tif(digit == '0' || num % digit.to!int != 0) \n\t\t\t{\n\t\t\t\tflag = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(flag) \n\t\t{\n\t\t\tresult ~= num;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "/tmp/tmpu4z2r9oo.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\n/tmp/tmpu4z2r9oo.d(14): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu4z2r9oo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\tlong[] result = [];\n\tforeach(i; startnum .. endnum)\n\t{\n\t\tbool flag = true;\n\t\tforeach(j; i.to!string)\n\t\t{\n\t\t\tif(i % j.to!long == 0)\n\t\t\t{\n\t\t\t\tflag = true;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tflag = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(flag)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "/tmp/tmpc98qln8_.d(14): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc98qln8_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\treturn iota(startnum, endnum).filter!(a => a.toString().all!(b => b.toString().to!long() != 0 && a % b.toString().to!long() == 0));\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "/tmp/tmp66uprvjl.d(10): Error: undefined identifier `iota`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp66uprvjl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\tauto result = new long[];\n\tforeach(i; startnum..endnum)\n\t{\n\t\tauto num = i;\n\t\tauto digits = new long[];\n\t\twhile(num > 0)\n\t\t{\n\t\t\tdigits ~= num % 10;\n\t\t\tnum /= 10;\n\t\t}\n\t\tif(all!(d => i % d == 0)(digits))\n\t\t\tcontinue;\n\t\tresult ~= i;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "/tmp/tmpxpcb8rqo.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\n/tmp/tmpxpcb8rqo.d(14): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\n/tmp/tmpxpcb8rqo.d(20): Error: template instance `all!((d) => i % d == 0)` template `all` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxpcb8rqo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\tauto result = new long[];\n\tforeach(i; startnum .. endnum)\n\t{\n\t\tauto digits = i.to!string.map!(a => a.to!long).array;\n\t\tif(digits.all!(a => i % a == 0))\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "/tmp/tmp_2wb31ls.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\n/tmp/tmp_2wb31ls.d(13): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_2wb31ls.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\treturn iota(startnum, endnum).filter!(a => a.toString().split(\"\").all!(b => a % b.to!long == 0)).array;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1665517189,
      "stdout": "",
      "stderr": "/tmp/tmpq4wonhr1.d(10): Error: undefined identifier `iota`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq4wonhr1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\treturn iota(startnum, endnum + 1).filter!(x => x.toString().all!(y => x % y == 0)).array;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "/tmp/tmp4s9dmwbt.d(10): Error: undefined identifier `iota`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4s9dmwbt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\treturn iota(startnum, endnum).filter!(a => a.toString().split(\"\").all!(b => a % b.to!long == 0)).array;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1665517189,
      "stdout": "",
      "stderr": "/tmp/tmpq4wonhr1.d(10): Error: undefined identifier `iota`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq4wonhr1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\treturn iota(startnum, endnum).filter!(a => a.toString().split(\"\").all!(b => a % b.to!long == 0)).array;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1665517189,
      "stdout": "",
      "stderr": "/tmp/tmpq4wonhr1.d(10): Error: undefined identifier `iota`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq4wonhr1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\tauto result = new long[];\n\tforeach(i; startnum..endnum)\n\t{\n\t\tauto num = i;\n\t\tauto digits = new long[];\n\t\twhile(num > 0)\n\t\t{\n\t\t\tdigits ~= num % 10;\n\t\t\tnum /= 10;\n\t\t}\n\t\tauto is_divisible = true;\n\t\tforeach(d; digits)\n\t\t{\n\t\t\tif(d == 0 || i % d != 0)\n\t\t\t{\n\t\t\t\tis_divisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(is_divisible)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "/tmp/tmp3rhtdlwq.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\n/tmp/tmp3rhtdlwq.d(14): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3rhtdlwq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\tauto result = [];\n\tforeach(i; startnum..endnum) \n\t{\n\t\tauto digits = i.to!string.split(\"\").map!(a => a.to!long).array;\n\t\tif(digits.all!(a => i % a == 0)) \n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "/tmp/tmpyivr751m.d(13): Error: no property `to` for type `long`\n/tmp/tmpyivr751m.d(16): Error: cannot append type `long` to type `void[]`\n/tmp/tmpyivr751m.d(19): Error: cannot implicitly convert expression `result` of type `void[]` to `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyivr751m.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\tauto result = new long[];\n\tforeach(i; startnum..endnum)\n\t{\n\t\tauto digits = i.to!string().map!(a => a.to!long()).array;\n\t\tif(digits.all!(a => i % a == 0))\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "/tmp/tmp5lhu1swe.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\n/tmp/tmp5lhu1swe.d(13): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5lhu1swe.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\tauto result = new long[];\n\tforeach(num; startnum..endnum)\n\t{\n\t\tauto digits = num.toString.map!(a => a.to!long).array;\n\t\tif(digits.all!(a => num % a == 0))\n\t\t\tresult ~= num;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "/tmp/tmpj7ygdmwn.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\n/tmp/tmpj7ygdmwn.d(13): Error: no property `toString` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj7ygdmwn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\tauto result = new long[];\n\tforeach(i; startnum..endnum) \n\t{\n\t\tauto digits = i.to!string.map!(a => a.to!long).array;\n\t\tif(digits.all!(a => i % a == 0)) \n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "/tmp/tmpb3tp8ail.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\n/tmp/tmpb3tp8ail.d(13): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb3tp8ail.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\treturn iota(startnum, endnum).filter!(a => a.to!string.all!(b => a % b.to!int == 0)).array;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1665517189,
      "stdout": "",
      "stderr": "/tmp/tmp0wj9x0ei.d(10): Error: undefined identifier `iota`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0wj9x0ei.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\tauto result = new long[];\n\tforeach(i; startnum..endnum)\n\t{\n\t\tauto is_divisible = true;\n\t\tforeach(j; i.to!string)\n\t\t{\n\t\t\tif(i % (j.to!long) != 0)\n\t\t\t{\n\t\t\t\tis_divisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(is_divisible)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "/tmp/tmpqezn4s6j.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\n/tmp/tmpqezn4s6j.d(14): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqezn4s6j.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\treturn iota(startnum, endnum).filter!(x => x.toString().split(\"\").all!(y => x % y.to!int == 0)).array;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "/tmp/tmpwlk3jd16.d(10): Error: undefined identifier `iota`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwlk3jd16.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\treturn iota(startnum, endnum).filter!(x => x.toString().split(\"\").all!(y => x % y.to!long == 0)).array;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "/tmp/tmpr8vfu6uu.d(10): Error: undefined identifier `iota`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr8vfu6uu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\treturn iota(startnum, endnum).filter!(x => x.toString().split(\"\").all!(y => x % y.to!long == 0));\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "/tmp/tmpjpr4uita.d(10): Error: undefined identifier `iota`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjpr4uita.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\treturn iota(startnum, endnum).filter!(a => a.toString().all!(b => a % b == 0)).array;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1665517190,
      "stdout": "",
      "stderr": "/tmp/tmp_qmjjngs.d(10): Error: undefined identifier `iota`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_qmjjngs.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\treturn iota(startnum, endnum).filter!(a => a.toString().split(\"\").all!(b => a % b.to!long == 0));\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "/tmp/tmp611lgl41.d(10): Error: undefined identifier `iota`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp611lgl41.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\treturn iota(startnum, endnum).filter!(a => a.toString().split(\"\").all!(b => a % b.to!long == 0)).array;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1665517189,
      "stdout": "",
      "stderr": "/tmp/tmpq4wonhr1.d(10): Error: undefined identifier `iota`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq4wonhr1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\tauto result = new long[](0);\n\tforeach(num; startnum..endnum)\n\t{\n\t\tauto digits = num.to!string.split(\"\").map!(a => a.to!long).array;\n\t\tif(digits.all!(a => num % a == 0))\n\t\t\tresult ~= num;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "/tmp/tmpllx5_m7c.d(13): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpllx5_m7c.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\treturn iota(startnum, endnum).filter!(x => x.toString().split(\"\").all!(y => x % y.to!long == 0));\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "/tmp/tmpjpr4uita.d(10): Error: undefined identifier `iota`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjpr4uita.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\tauto result = new long[](0);\n\tforeach(i; startnum..endnum)\n\t{\n\t\tauto digits = i.to!string.split(\"\");\n\t\tbool divisible = true;\n\t\tforeach(d; digits)\n\t\t{\n\t\t\tif(i % d.to!long != 0)\n\t\t\t{\n\t\t\t\tdivisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(divisible)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "/tmp/tmpxza5nizx.d(13): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxza5nizx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\tauto result = new long[];\n\tforeach(i; startnum .. endnum)\n\t{\n\t\tauto digits = i.to!string.map!(a => a.to!long).array;\n\t\tif(digits.all!(a => i % a == 0))\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "/tmp/tmp_2wb31ls.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\n/tmp/tmp_2wb31ls.d(13): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_2wb31ls.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\tauto result = new long[];\n\tforeach(i; startnum..endnum)\n\t{\n\t\tauto digits = i.digits;\n\t\tauto divisible = true;\n\t\tforeach(d; digits)\n\t\t{\n\t\t\tif(i % d != 0)\n\t\t\t{\n\t\t\t\tdivisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(divisible)\n\t\t\tresult ~= i;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "/tmp/tmppews4l8b.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\n/tmp/tmppews4l8b.d(13): Error: no property `digits` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppews4l8b.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\tauto result = new long[];\n\tforeach(i; startnum..endnum)\n\t{\n\t\tauto digits = i.to!string().map!(a => a.to!int()).array;\n\t\tif(digits.all!(a => i % a == 0))\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "/tmp/tmp03xim3mo.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\n/tmp/tmp03xim3mo.d(13): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp03xim3mo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n\t\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n{\n\tauto result = new long[];\n\tforeach(i; startnum..endnum)\n\t{\n\t\tauto digits = i.to!string.split(\"\");\n\t\tauto isDivisible = true;\n\t\tforeach(d; digits)\n\t\t{\n\t\t\tif(i % d.to!long != 0)\n\t\t\t{\n\t\t\t\tisDivisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(isDivisible)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "/tmp/tmpfxqlyf9y.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\n/tmp/tmpfxqlyf9y.d(13): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfxqlyf9y.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}