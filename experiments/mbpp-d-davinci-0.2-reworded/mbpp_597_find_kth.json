{
  "name": "mbpp_597_find_kth",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find kth element from the given two sorted arrays.\n\t\n*/\nlong find_kth(long[] arr1, long[] arr2, long k) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_597_find_kth.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = find_kth;\n\n    assert(candidate([2L, 3L, 6L, 7L, 9L], [1L, 4L, 8L, 10L], 5L) == 6L);\n    assert(candidate([100L, 112L, 256L, 349L, 770L], [72L, 86L, 113L, 119L, 265L, 445L, 892L], 7L) == 256L);\n    assert(candidate([3L, 4L, 7L, 8L, 10L], [2L, 5L, 9L, 11L], 6L) == 8L);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tlong i = 0;\n\tlong j = 0;\n\tlong kth = 0;\n\twhile (i < arr1.length && j < arr2.length) \n\t{\n\t\tif (arr1[i] < arr2[j]) \n\t\t{\n\t\t\tkth = arr1[i];\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tkth = arr2[j];\n\t\t\tj++;\n\t\t}\n\t\tif (i + j == k) \n\t\t{\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (i == arr1.length) \n\t{\n\t\twhile (j < arr2.length) \n\t\t{\n\t\t\tkth = arr2[j];\n\t\t\tj++;\n\t\t\tif (i + j == k) \n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tif (j == arr2.length) \n\t{\n\t\twhile (i < arr1.length) \n\t\t{\n\t\t\tkth = arr1[i];\n\t\t\ti++;\n\t\t\tif (i + j == k) \n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn kth;\n}",
    "{\n\tif (arr1.length == 0)\n\t\treturn arr2[k];\n\tif (arr2.length == 0)\n\t\treturn arr1[k];\n\t\n\tif (k == 0)\n\t\treturn min(arr1[0], arr2[0]);\n\t\n\tlong i = min(arr1.length - 1, k / 2);\n\tlong j = min(arr2.length - 1, k / 2);\n\t\n\tif (arr1[i] > arr2[j])\n\t\treturn find_kth(arr1, arr2[j + 1 .. $], k - j - 1);\n\telse\n\t\treturn find_kth(arr1[i + 1 .. $], arr2, k - i - 1);\n}",
    "{\n\tlong i = 0;\n\tlong j = 0;\n\t\n\twhile(true)\n\t{\n\t\tif(i == arr1.length)\n\t\t\treturn arr2[j + k - 1];\n\t\tif(j == arr2.length)\n\t\t\treturn arr1[i + k - 1];\n\t\tif(k == 1)\n\t\t\treturn min(arr1[i], arr2[j]);\n\t\t\n\t\tlong mid1 = min(i + k / 2 - 1, arr1.length - 1);\n\t\tlong mid2 = min(j + k / 2 - 1, arr2.length - 1);\n\t\t\n\t\tif(arr1[mid1] <= arr2[mid2])\n\t\t{\n\t\t\tk -= mid1 - i + 1;\n\t\t\ti = mid1 + 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tk -= mid2 - j + 1;\n\t\t\tj = mid2 + 1;\n\t\t}\n\t}\n}",
    "{\n\tlong i = 0, j = 0;\n\twhile(i < arr1.length && j < arr2.length) \n\t{\n\t\tif(arr1[i] < arr2[j]) \n\t\t{\n\t\t\tif(i + j == k) \n\t\t\t{\n\t\t\t\treturn arr1[i];\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tif(i + j == k) \n\t\t\t{\n\t\t\t\treturn arr2[j];\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\t}\n\tif(i == arr1.length) \n\t{\n\t\treturn arr2[k - i];\n\t}\n\treturn arr1[k - j];\n}",
    "{\n\tif (arr1.length == 0) return arr2[k - 1];\n\tif (arr2.length == 0) return arr1[k - 1];\n\tif (k == 1) return min(arr1[0], arr2[0]);\n\t\n\tlong i = min(k / 2, arr1.length);\n\tlong j = min(k / 2, arr2.length);\n\t\n\tif (arr1[i - 1] > arr2[j - 1])\n\t{\n\t\treturn find_kth(arr1, arr2[j..$], k - j);\n\t}\n\telse\n\t{\n\t\treturn find_kth(arr1[i..$], arr2, k - i);\n\t}\n}",
    "{\n\tif (arr1.length == 0)\n\t\treturn arr2[k];\n\tif (arr2.length == 0)\n\t\treturn arr1[k];\n\t\n\tlong mid1 = arr1.length / 2;\n\tlong mid2 = arr2.length / 2;\n\t\n\tif (mid1 + mid2 < k) {\n\t\tif (arr1[mid1] > arr2[mid2])\n\t\t\treturn find_kth(arr1, arr2[mid2+1..$], k - mid2 - 1);\n\t\telse\n\t\t\treturn find_kth(arr1[mid1+1..$], arr2, k - mid1 - 1);\n\t}\n\telse {\n\t\tif (arr1[mid1] > arr2[mid2])\n\t\t\treturn find_kth(arr1[0..mid1], arr2, k);\n\t\telse\n\t\t\treturn find_kth(arr1, arr2[0..mid2], k);\n\t}\n}",
    "{\n\tif (arr1.length == 0)\n\t\treturn arr2[k];\n\tif (arr2.length == 0)\n\t\treturn arr1[k];\n\tif (k == 0)\n\t\treturn min(arr1[0], arr2[0]);\n\t\n\tlong mid1 = arr1.length / 2;\n\tlong mid2 = arr2.length / 2;\n\t\n\tif (mid1 + mid2 < k) {\n\t\tif (arr1[mid1] > arr2[mid2])\n\t\t\treturn find_kth(arr1, arr2[mid2 + 1 .. $], k - mid2 - 1);\n\t\telse\n\t\t\treturn find_kth(arr1[mid1 + 1 .. $], arr2, k - mid1 - 1);\n\t} else {\n\t\tif (arr1[mid1] > arr2[mid2])\n\t\t\treturn find_kth(arr1[0 .. mid1], arr2, k);\n\t\telse\n\t\t\treturn find_kth(arr1, arr2[0 .. mid2], k);\n\t}\n}",
    "{\n\tif(arr1.length == 0)\n\t\treturn arr2[k-1];\n\tif(arr2.length == 0)\n\t\treturn arr1[k-1];\n\tif(k == 1)\n\t\treturn min(arr1[0], arr2[0]);\n\t\n\tlong a = min(arr1.length, k/2);\n\tlong b = min(arr2.length, k/2);\n\t\n\tif(arr1[a-1] < arr2[b-1])\n\t\treturn find_kth(arr1[a..$], arr2, k-a);\n\telse\n\t\treturn find_kth(arr1, arr2[b..$], k-b);\n}",
    "{\n\tlong i = 0;\n\tlong j = 0;\n\tlong kth = 0;\n\twhile(i < arr1.length && j < arr2.length) \n\t{\n\t\tif(arr1[i] < arr2[j]) \n\t\t{\n\t\t\tkth = arr1[i];\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tkth = arr2[j];\n\t\t\tj++;\n\t\t}\n\t\tif(i + j == k) \n\t\t{\n\t\t\tbreak;\n\t\t}\n\t}\n\tif(i == arr1.length) \n\t{\n\t\twhile(j < arr2.length) \n\t\t{\n\t\t\tkth = arr2[j];\n\t\t\tj++;\n\t\t\tif(i + j == k) \n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\telse if(j == arr2.length) \n\t{\n\t\twhile(i < arr1.length) \n\t\t{\n\t\t\tkth = arr1[i];\n\t\t\ti++;\n\t\t\tif(i + j == k) \n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn kth;\n}",
    "{\n\tlong[] arr = new long[arr1.length + arr2.length];\n\tlong i = 0;\n\tlong j = 0;\n\tlong index = 0;\n\twhile (i < arr1.length && j < arr2.length) \n\t{\n\t\tif (arr1[i] < arr2[j]) \n\t\t{\n\t\t\tarr[index] = arr1[i];\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tarr[index] = arr2[j];\n\t\t\tj++;\n\t\t}\n\t\tindex++;\n\t}\n\twhile (i < arr1.length) \n\t{\n\t\tarr[index] = arr1[i];\n\t\ti++;\n\t\tindex++;\n\t}\n\twhile (j < arr2.length) \n\t{\n\t\tarr[index] = arr2[j];\n\t\tj++;\n\t\tindex++;\n\t}\n\treturn arr[k - 1];\n}",
    "{\n\tlong i = 0;\n\tlong j = 0;\n\tlong kth = 0;\n\twhile (i < arr1.length && j < arr2.length) \n\t{\n\t\tif (arr1[i] < arr2[j]) \n\t\t{\n\t\t\tkth = arr1[i];\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tkth = arr2[j];\n\t\t\tj++;\n\t\t}\n\t\tif (i + j == k)\n\t\t\treturn kth;\n\t}\n\twhile (i < arr1.length) \n\t{\n\t\tkth = arr1[i];\n\t\ti++;\n\t\tif (i + j == k)\n\t\t\treturn kth;\n\t}\n\twhile (j < arr2.length) \n\t{\n\t\tkth = arr2[j];\n\t\tj++;\n\t\tif (i + j == k)\n\t\t\treturn kth;\n\t}\n\treturn kth;\n}",
    "{\n\tif (arr1.length == 0)\n\t\treturn arr2[k];\n\tif (arr2.length == 0)\n\t\treturn arr1[k];\n\tif (k == 0)\n\t\treturn min(arr1[0], arr2[0]);\n\t\n\tlong i = min(arr1.length - 1, k / 2);\n\tlong j = min(arr2.length - 1, k / 2);\n\t\n\tif (arr1[i] > arr2[j])\n\t\treturn find_kth(arr1, arr2[j + 1 .. $], k - j - 1);\n\telse\n\t\treturn find_kth(arr1[i + 1 .. $], arr2, k - i - 1);\n}",
    "{\n\tlong i = 0;\n\tlong j = 0;\n\tlong kth = 0;\n\twhile (i < arr1.length && j < arr2.length)\n\t{\n\t\tif (arr1[i] < arr2[j])\n\t\t{\n\t\t\tkth = arr1[i];\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tkth = arr2[j];\n\t\t\tj++;\n\t\t}\n\t\tif (i + j == k)\n\t\t\tbreak;\n\t}\n\tif (i == arr1.length)\n\t{\n\t\twhile (j < arr2.length)\n\t\t{\n\t\t\tkth = arr2[j];\n\t\t\tj++;\n\t\t\tif (i + j == k)\n\t\t\t\tbreak;\n\t\t}\n\t}\n\telse if (j == arr2.length)\n\t{\n\t\twhile (i < arr1.length)\n\t\t{\n\t\t\tkth = arr1[i];\n\t\t\ti++;\n\t\t\tif (i + j == k)\n\t\t\t\tbreak;\n\t\t}\n\t}\n\treturn kth;\n}",
    "{\n\tif (arr1.length == 0)\n\t\treturn arr2[k];\n\tif (arr2.length == 0)\n\t\treturn arr1[k];\n\t\n\tlong mid1 = arr1.length / 2;\n\tlong mid2 = arr2.length / 2;\n\t\n\tif (mid1 + mid2 < k)\n\t{\n\t\tif (arr1[mid1] > arr2[mid2])\n\t\t\treturn find_kth(arr1, arr2[mid2..$], k - mid2);\n\t\telse\n\t\t\treturn find_kth(arr1[mid1..$], arr2, k - mid1);\n\t}\n\telse\n\t{\n\t\tif (arr1[mid1] > arr2[mid2])\n\t\t\treturn find_kth(arr1[0..mid1], arr2, k);\n\t\telse\n\t\t\treturn find_kth(arr1, arr2[0..mid2], k);\n\t}\n}",
    "{\n\tlong i = 0;\n\tlong j = 0;\n\tlong kth = 0;\n\twhile (i < arr1.length && j < arr2.length) \n\t{\n\t\tif (arr1[i] < arr2[j]) \n\t\t{\n\t\t\tkth = arr1[i];\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tkth = arr2[j];\n\t\t\tj++;\n\t\t}\n\t\tif (i + j == k) \n\t\t{\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (i == arr1.length) \n\t{\n\t\twhile (j < arr2.length) \n\t\t{\n\t\t\tkth = arr2[j];\n\t\t\tj++;\n\t\t\tif (i + j == k) \n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\telse if (j == arr2.length) \n\t{\n\t\twhile (i < arr1.length) \n\t\t{\n\t\t\tkth = arr1[i];\n\t\t\ti++;\n\t\t\tif (i + j == k) \n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn kth;\n}",
    "{\n\tlong i = 0;\n\tlong j = 0;\n\tlong m = arr1.length;\n\tlong n = arr2.length;\n\twhile (i < m && j < n) \n\t{\n\t\tif (arr1[i] < arr2[j]) \n\t\t{\n\t\t\tif (i + j == k - 1) \n\t\t\t{\n\t\t\t\treturn arr1[i];\n\t\t\t}\n\t\t\ti++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (i + j == k - 1) \n\t\t\t{\n\t\t\t\treturn arr2[j];\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\t}\n\tif (i < m) \n\t{\n\t\treturn arr1[k - j - 1];\n\t}\n\tif (j < n) \n\t{\n\t\treturn arr2[k - i - 1];\n\t}\n\treturn -1;\n}",
    "{\n\tlong i = 0;\n\tlong j = 0;\n\tlong kth = 0;\n\twhile(i < arr1.length && j < arr2.length) \n\t{\n\t\tif(arr1[i] < arr2[j]) \n\t\t{\n\t\t\tkth = arr1[i];\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tkth = arr2[j];\n\t\t\tj++;\n\t\t}\n\t\tif(i + j == k)\n\t\t\tbreak;\n\t}\n\tif(i < arr1.length) \n\t{\n\t\twhile(i < arr1.length) \n\t\t{\n\t\t\tkth = arr1[i];\n\t\t\ti++;\n\t\t\tif(i + j == k)\n\t\t\t\tbreak;\n\t\t}\n\t}\n\telse if(j < arr2.length) \n\t{\n\t\twhile(j < arr2.length) \n\t\t{\n\t\t\tkth = arr2[j];\n\t\t\tj++;\n\t\t\tif(i + j == k)\n\t\t\t\tbreak;\n\t\t}\n\t}\n\treturn kth;\n}",
    "{\n\tif (arr1.length == 0) \n\t{\n\t\treturn arr2[k - 1];\n\t}\n\tif (arr2.length == 0) \n\t{\n\t\treturn arr1[k - 1];\n\t}\n\tif (k == 1) \n\t{\n\t\treturn min(arr1[0], arr2[0]);\n\t}\n\tlong i = min(k / 2, arr1.length);\n\tlong j = min(k / 2, arr2.length);\n\tif (arr1[i - 1] > arr2[j - 1]) \n\t{\n\t\treturn find_kth(arr1, arr2[j..$], k - j);\n\t}\n\telse \n\t{\n\t\treturn find_kth(arr1[i..$], arr2, k - i);\n\t}\n}",
    "{\n\tif (arr1.length == 0)\n\t\treturn arr2[k];\n\tif (arr2.length == 0)\n\t\treturn arr1[k];\n\tif (k == 0)\n\t\treturn min(arr1[0], arr2[0]);\n\t\n\tlong mid1 = arr1.length / 2;\n\tlong mid2 = arr2.length / 2;\n\t\n\tif (mid1 + mid2 < k) {\n\t\tif (arr1[mid1] > arr2[mid2]) {\n\t\t\treturn find_kth(arr1, arr2[mid2 + 1 .. $], k - mid2 - 1);\n\t\t} else {\n\t\t\treturn find_kth(arr1[mid1 + 1 .. $], arr2, k - mid1 - 1);\n\t\t}\n\t} else {\n\t\tif (arr1[mid1] > arr2[mid2]) {\n\t\t\treturn find_kth(arr1[0 .. mid1], arr2, k);\n\t\t} else {\n\t\t\treturn find_kth(arr1, arr2[0 .. mid2], k);\n\t\t}\n\t}\n}",
    "{\n\tlong i = 0;\n\tlong j = 0;\n\tlong kth = 0;\n\twhile(i < arr1.length && j < arr2.length)\n\t{\n\t\tif(arr1[i] < arr2[j])\n\t\t{\n\t\t\tkth = arr1[i];\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tkth = arr2[j];\n\t\t\tj++;\n\t\t}\n\t\t\n\t\tif(i + j == k)\n\t\t\treturn kth;\n\t}\n\t\n\twhile(i < arr1.length)\n\t{\n\t\tkth = arr1[i];\n\t\ti++;\n\t\tif(i + j == k)\n\t\t\treturn kth;\n\t}\n\t\n\twhile(j < arr2.length)\n\t{\n\t\tkth = arr2[j];\n\t\tj++;\n\t\tif(i + j == k)\n\t\t\treturn kth;\n\t}\n\t\n\treturn kth;\n}",
    "{\n\tlong i = 0;\n\tlong j = 0;\n\tlong n = arr1.length;\n\tlong m = arr2.length;\n\t\n\twhile(i < n && j < m) \n\t{\n\t\tif(arr1[i] < arr2[j]) \n\t\t{\n\t\t\tif(k == 1) \n\t\t\t{\n\t\t\t\treturn arr1[i];\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tif(k == 1) \n\t\t\t{\n\t\t\t\treturn arr2[j];\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\t\tk--;\n\t}\n\t\n\tif(i == n) \n\t{\n\t\treturn arr2[j + k - 1];\n\t}\n\telse \n\t{\n\t\treturn arr1[i + k - 1];\n\t}\n}",
    "{\n\tlong n = arr1.length;\n\tlong m = arr2.length;\n\t\n\tif (n == 0)\n\t\treturn arr2[k];\n\tif (m == 0)\n\t\treturn arr1[k];\n\t\n\tif (k == 0)\n\t\treturn min(arr1[0], arr2[0]);\n\t\n\tlong i = min(n - 1, k / 2);\n\tlong j = min(m - 1, k / 2);\n\t\n\tif (arr1[i] > arr2[j])\n\t\treturn find_kth(arr1, arr2[j + 1 .. $], k - j - 1);\n\telse\n\t\treturn find_kth(arr1[i + 1 .. $], arr2, k - i - 1);\n}",
    "{\n\tif (arr1.length == 0)\n\t\treturn arr2[k - 1];\n\tif (arr2.length == 0)\n\t\treturn arr1[k - 1];\n\tif (k == 1)\n\t\treturn min(arr1[0], arr2[0]);\n\t\n\tlong i = min(k / 2, arr1.length);\n\tlong j = min(k / 2, arr2.length);\n\t\n\tif (arr1[i - 1] > arr2[j - 1])\n\t\treturn find_kth(arr1, arr2[j..$], k - j);\n\telse\n\t\treturn find_kth(arr1[i..$], arr2, k - i);\n}",
    "{\n\tlong i = 0;\n\tlong j = 0;\n\tlong count = 0;\n\tlong result = 0;\n\twhile(i < arr1.length && j < arr2.length) \n\t{\n\t\tif(arr1[i] < arr2[j]) \n\t\t{\n\t\t\tresult = arr1[i];\n\t\t\ti++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tresult = arr2[j];\n\t\t\tj++;\n\t\t}\n\t\tcount++;\n\t\tif(count == k) \n\t\t{\n\t\t\tbreak;\n\t\t}\n\t}\n\tif(i < arr1.length) \n\t{\n\t\twhile(count < k) \n\t\t{\n\t\t\tresult = arr1[i];\n\t\t\ti++;\n\t\t\tcount++;\n\t\t}\n\t}\n\tif(j < arr2.length) \n\t{\n\t\twhile(count < k) \n\t\t{\n\t\t\tresult = arr2[j];\n\t\t\tj++;\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong i = 0;\n\tlong j = 0;\n\tlong kth = 0;\n\twhile(i < arr1.length && j < arr2.length) \n\t{\n\t\tif(arr1[i] < arr2[j]) \n\t\t{\n\t\t\tkth = arr1[i];\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tkth = arr2[j];\n\t\t\tj++;\n\t\t}\n\t\tk--;\n\t\tif(k == 0) \n\t\t{\n\t\t\tbreak;\n\t\t}\n\t}\n\tif(k > 0) \n\t{\n\t\tif(i < arr1.length) \n\t\t{\n\t\t\tkth = arr1[i + k - 1];\n\t\t}\n\t\telse \n\t\t{\n\t\t\tkth = arr2[j + k - 1];\n\t\t}\n\t}\n\treturn kth;\n}",
    "{\n\tlong i = 0;\n\tlong j = 0;\n\tlong count = 0;\n\twhile (i < arr1.length && j < arr2.length) \n\t{\n\t\tif (arr1[i] < arr2[j]) \n\t\t{\n\t\t\tcount++;\n\t\t\tif (count == k) \n\t\t\t{\n\t\t\t\treturn arr1[i];\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tcount++;\n\t\t\tif (count == k) \n\t\t\t{\n\t\t\t\treturn arr2[j];\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\t}\n\twhile (i < arr1.length) \n\t{\n\t\tcount++;\n\t\tif (count == k) \n\t\t{\n\t\t\treturn arr1[i];\n\t\t}\n\t\ti++;\n\t}\n\twhile (j < arr2.length) \n\t{\n\t\tcount++;\n\t\tif (count == k) \n\t\t{\n\t\t\treturn arr2[j];\n\t\t}\n\t\tj++;\n\t}\n\treturn -1;\n}",
    "{\n\tlong[] arr = new long[arr1.length + arr2.length];\n\tlong i = 0;\n\tlong j = 0;\n\tlong index = 0;\n\twhile (i < arr1.length && j < arr2.length) \n\t{\n\t\tif (arr1[i] < arr2[j]) \n\t\t{\n\t\t\tarr[index] = arr1[i];\n\t\t\ti++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tarr[index] = arr2[j];\n\t\t\tj++;\n\t\t}\n\t\tindex++;\n\t}\n\twhile (i < arr1.length) \n\t{\n\t\tarr[index] = arr1[i];\n\t\ti++;\n\t\tindex++;\n\t}\n\twhile (j < arr2.length) \n\t{\n\t\tarr[index] = arr2[j];\n\t\tj++;\n\t\tindex++;\n\t}\n\treturn arr[k - 1];\n}",
    "{\n\tlong i = 0;\n\tlong j = 0;\n\tlong kth = 0;\n\twhile (i < arr1.length && j < arr2.length) \n\t{\n\t\tif (arr1[i] < arr2[j]) \n\t\t{\n\t\t\tkth = arr1[i];\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tkth = arr2[j];\n\t\t\tj++;\n\t\t}\n\t\tif (i + j == k) \n\t\t{\n\t\t\treturn kth;\n\t\t}\n\t}\n\twhile (i < arr1.length) \n\t{\n\t\tkth = arr1[i];\n\t\ti++;\n\t\tif (i + j == k) \n\t\t{\n\t\t\treturn kth;\n\t\t}\n\t}\n\twhile (j < arr2.length) \n\t{\n\t\tkth = arr2[j];\n\t\tj++;\n\t\tif (i + j == k) \n\t\t{\n\t\t\treturn kth;\n\t\t}\n\t}\n\treturn kth;\n}",
    "{\n\tlong[] arr = new long[arr1.length + arr2.length];\n\t\n\tlong i = 0;\n\tlong j = 0;\n\tlong c = 0;\n\twhile(i < arr1.length && j < arr2.length)\n\t{\n\t\tif(arr1[i] < arr2[j])\n\t\t{\n\t\t\tarr[c] = arr1[i];\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tarr[c] = arr2[j];\n\t\t\tj++;\n\t\t}\n\t\tc++;\n\t}\n\t\n\twhile(i < arr1.length)\n\t{\n\t\tarr[c] = arr1[i];\n\t\ti++;\n\t\tc++;\n\t}\n\t\n\twhile(j < arr2.length)\n\t{\n\t\tarr[c] = arr2[j];\n\t\tj++;\n\t\tc++;\n\t}\n\t\n\treturn arr[k-1];\n}",
    "{\n\tlong[] arr = new long[arr1.length + arr2.length];\n\tlong i = 0, j = 0, index = 0;\n\twhile (i < arr1.length && j < arr2.length) \n\t{\n\t\tif (arr1[i] < arr2[j]) \n\t\t{\n\t\t\tarr[index] = arr1[i];\n\t\t\ti++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tarr[index] = arr2[j];\n\t\t\tj++;\n\t\t}\n\t\tindex++;\n\t}\n\twhile (i < arr1.length) \n\t{\n\t\tarr[index] = arr1[i];\n\t\ti++;\n\t\tindex++;\n\t}\n\twhile (j < arr2.length) \n\t{\n\t\tarr[index] = arr2[j];\n\t\tj++;\n\t\tindex++;\n\t}\n\treturn arr[k - 1];\n}",
    "{\n\tif (arr1.length == 0)\n\t\treturn arr2[k - 1];\n\tif (arr2.length == 0)\n\t\treturn arr1[k - 1];\n\tif (k == 1)\n\t\treturn min(arr1[0], arr2[0]);\n\t\n\tlong i = min(k / 2, arr1.length);\n\tlong j = min(k / 2, arr2.length);\n\t\n\tif (arr1[i - 1] > arr2[j - 1])\n\t\treturn find_kth(arr1, arr2[j..$], k - j);\n\telse\n\t\treturn find_kth(arr1[i..$], arr2, k - i);\n}",
    "{\n\tlong i = 0;\n\tlong j = 0;\n\tlong k_th = 0;\n\twhile (i < arr1.length && j < arr2.length) \n\t{\n\t\tif (arr1[i] < arr2[j]) \n\t\t{\n\t\t\tk_th = arr1[i];\n\t\t\ti++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tk_th = arr2[j];\n\t\t\tj++;\n\t\t}\n\t\tif (i + j == k) \n\t\t{\n\t\t\treturn k_th;\n\t\t}\n\t}\n\twhile (i < arr1.length) \n\t{\n\t\tk_th = arr1[i];\n\t\ti++;\n\t\tif (i + j == k) \n\t\t{\n\t\t\treturn k_th;\n\t\t}\n\t}\n\twhile (j < arr2.length) \n\t{\n\t\tk_th = arr2[j];\n\t\tj++;\n\t\tif (i + j == k) \n\t\t{\n\t\t\treturn k_th;\n\t\t}\n\t}\n\treturn k_th;\n}",
    "{\n\tif (k > arr1.length + arr2.length)\n\t\treturn -1;\n\t\n\tlong i = 0;\n\tlong j = 0;\n\tlong count = 0;\n\twhile (i < arr1.length && j < arr2.length) \n\t{\n\t\tif (arr1[i] < arr2[j]) \n\t\t{\n\t\t\tif (count == k - 1)\n\t\t\t\treturn arr1[i];\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tif (count == k - 1)\n\t\t\t\treturn arr2[j];\n\t\t\tj++;\n\t\t}\n\t\tcount++;\n\t}\n\t\n\twhile (i < arr1.length) \n\t{\n\t\tif (count == k - 1)\n\t\t\treturn arr1[i];\n\t\ti++;\n\t\tcount++;\n\t}\n\t\n\twhile (j < arr2.length) \n\t{\n\t\tif (count == k - 1)\n\t\t\treturn arr2[j];\n\t\tj++;\n\t\tcount++;\n\t}\n\treturn -1;\n}",
    "{\n\tif (arr1.length == 0) \n\t{\n\t\treturn arr2[k];\n\t}\n\tif (arr2.length == 0) \n\t{\n\t\treturn arr1[k];\n\t}\n\tif (k == 0) \n\t{\n\t\treturn min(arr1[0], arr2[0]);\n\t}\n\tlong i = min(k / 2, arr1.length - 1);\n\tlong j = min(k / 2, arr2.length - 1);\n\tif (arr1[i] > arr2[j]) \n\t{\n\t\treturn find_kth(arr1, arr2[j + 1 .. $], k - j - 1);\n\t}\n\telse \n\t{\n\t\treturn find_kth(arr1[i + 1 .. $], arr2, k - i - 1);\n\t}\n}",
    "{\n\tlong[] arr = new long[arr1.length + arr2.length];\n\tlong i = 0, j = 0, index = 0;\n\twhile (i < arr1.length && j < arr2.length) \n\t{\n\t\tif (arr1[i] < arr2[j]) \n\t\t{\n\t\t\tarr[index++] = arr1[i++];\n\t\t} \n\t\telse \n\t\t{\n\t\t\tarr[index++] = arr2[j++];\n\t\t}\n\t}\n\twhile (i < arr1.length) \n\t{\n\t\tarr[index++] = arr1[i++];\n\t}\n\twhile (j < arr2.length) \n\t{\n\t\tarr[index++] = arr2[j++];\n\t}\n\treturn arr[k - 1];\n}",
    "{\n\tif (arr1.length == 0)\n\t\treturn arr2[k];\n\tif (arr2.length == 0)\n\t\treturn arr1[k];\n\t\n\tlong mid1 = arr1.length / 2;\n\tlong mid2 = arr2.length / 2;\n\t\n\tif (mid1 + mid2 < k)\n\t{\n\t\tif (arr1[mid1] > arr2[mid2])\n\t\t\treturn find_kth(arr1, arr2[mid2..$], k - mid2);\n\t\telse\n\t\t\treturn find_kth(arr1[mid1..$], arr2, k - mid1);\n\t}\n\telse\n\t{\n\t\tif (arr1[mid1] > arr2[mid2])\n\t\t\treturn find_kth(arr1[0..mid1], arr2, k);\n\t\telse\n\t\t\treturn find_kth(arr1, arr2[0..mid2], k);\n\t}\n}",
    "{\n\tlong[] arr = new long[arr1.length + arr2.length];\n\tlong i = 0, j = 0, index = 0;\n\twhile (i < arr1.length && j < arr2.length) \n\t{\n\t\tif (arr1[i] < arr2[j]) \n\t\t{\n\t\t\tarr[index] = arr1[i];\n\t\t\ti++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tarr[index] = arr2[j];\n\t\t\tj++;\n\t\t}\n\t\tindex++;\n\t}\n\twhile (i < arr1.length) \n\t{\n\t\tarr[index] = arr1[i];\n\t\ti++;\n\t\tindex++;\n\t}\n\twhile (j < arr2.length) \n\t{\n\t\tarr[index] = arr2[j];\n\t\tj++;\n\t\tindex++;\n\t}\n\treturn arr[k - 1];\n}",
    "{\n\tif (arr1.length == 0)\n\t\treturn arr2[k-1];\n\tif (arr2.length == 0)\n\t\treturn arr1[k-1];\n\tif (k == 1)\n\t\treturn min(arr1[0], arr2[0]);\n\t\n\tlong idx1 = min(k/2, arr1.length);\n\tlong idx2 = min(k/2, arr2.length);\n\t\n\tif (arr1[idx1-1] < arr2[idx2-1])\n\t\treturn find_kth(arr1[idx1..$], arr2, k-idx1);\n\telse\n\t\treturn find_kth(arr1, arr2[idx2..$], k-idx2);\n}",
    "{\n\tlong i = 0;\n\tlong j = 0;\n\tlong kth = 0;\n\twhile(i < arr1.length && j < arr2.length) \n\t{\n\t\tif(arr1[i] < arr2[j]) \n\t\t{\n\t\t\tkth = arr1[i];\n\t\t\ti++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tkth = arr2[j];\n\t\t\tj++;\n\t\t}\n\t\tif(i + j == k) \n\t\t{\n\t\t\tbreak;\n\t\t}\n\t}\n\tif(i == arr1.length) \n\t{\n\t\twhile(j < arr2.length) \n\t\t{\n\t\t\tkth = arr2[j];\n\t\t\tj++;\n\t\t\tif(i + j == k) \n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t} \n\telse if(j == arr2.length) \n\t{\n\t\twhile(i < arr1.length) \n\t\t{\n\t\t\tkth = arr1[i];\n\t\t\ti++;\n\t\t\tif(i + j == k) \n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn kth;\n}",
    "{\n\tif (arr1.length == 0)\n\t\treturn arr2[k];\n\tif (arr2.length == 0)\n\t\treturn arr1[k];\n\t\n\tlong mid1 = arr1.length / 2;\n\tlong mid2 = arr2.length / 2;\n\t\n\tif (mid1 + mid2 < k)\n\t{\n\t\tif (arr1[mid1] > arr2[mid2])\n\t\t\treturn find_kth(arr1, arr2[mid2..$], k - mid2);\n\t\telse\n\t\t\treturn find_kth(arr1[mid1..$], arr2, k - mid1);\n\t}\n\telse\n\t{\n\t\tif (arr1[mid1] > arr2[mid2])\n\t\t\treturn find_kth(arr1[0..mid1], arr2, k);\n\t\telse\n\t\t\treturn find_kth(arr1, arr2[0..mid2], k);\n\t}\n}",
    "{\n\tif (arr1.length == 0)\n\t\treturn arr2[k];\n\tif (arr2.length == 0)\n\t\treturn arr1[k];\n\t\n\tlong mid1 = arr1.length / 2;\n\tlong mid2 = arr2.length / 2;\n\t\n\tif (mid1 + mid2 < k)\n\t{\n\t\tif (arr1[mid1] > arr2[mid2])\n\t\t\treturn find_kth(arr1, arr2[mid2 + 1..$], k - mid2 - 1);\n\t\telse\n\t\t\treturn find_kth(arr1[mid1 + 1..$], arr2, k - mid1 - 1);\n\t}\n\telse\n\t{\n\t\tif (arr1[mid1] > arr2[mid2])\n\t\t\treturn find_kth(arr1[0..mid1], arr2, k);\n\t\telse\n\t\t\treturn find_kth(arr1, arr2[0..mid2], k);\n\t}\n}",
    "{\n\tif (arr1.length == 0)\n\t\treturn arr2[k];\n\tif (arr2.length == 0)\n\t\treturn arr1[k];\n\tif (k == 0)\n\t\treturn min(arr1[0], arr2[0]);\n\t\n\tlong i = min(arr1.length, k / 2);\n\tlong j = min(arr2.length, k / 2);\n\t\n\tif (arr1[i] > arr2[j])\n\t\treturn find_kth(arr1, arr2[j + 1 .. $], k - j - 1);\n\telse\n\t\treturn find_kth(arr1[i + 1 .. $], arr2, k - i - 1);\n}",
    "{\n\tlong[] arr = new long[arr1.length + arr2.length];\n\tlong i = 0;\n\tlong j = 0;\n\tlong k1 = 0;\n\twhile(i < arr1.length && j < arr2.length)\n\t{\n\t\tif(arr1[i] < arr2[j])\n\t\t{\n\t\t\tarr[k1] = arr1[i];\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tarr[k1] = arr2[j];\n\t\t\tj++;\n\t\t}\n\t\tk1++;\n\t}\n\twhile(i < arr1.length)\n\t{\n\t\tarr[k1] = arr1[i];\n\t\ti++;\n\t\tk1++;\n\t}\n\twhile(j < arr2.length)\n\t{\n\t\tarr[k1] = arr2[j];\n\t\tj++;\n\t\tk1++;\n\t}\n\treturn arr[k-1];\n}",
    "{\n\tif (arr1.length == 0)\n\t\treturn arr2[k-1];\n\tif (arr2.length == 0)\n\t\treturn arr1[k-1];\n\t\n\tlong mid1 = arr1.length / 2;\n\tlong mid2 = arr2.length / 2;\n\t\n\tif (mid1 + mid2 < k) {\n\t\tif (arr1[mid1] > arr2[mid2]) {\n\t\t\treturn find_kth(arr1, arr2[mid2..$], k - mid2);\n\t\t} else {\n\t\t\treturn find_kth(arr1[mid1..$], arr2, k - mid1);\n\t\t}\n\t} else {\n\t\tif (arr1[mid1] > arr2[mid2]) {\n\t\t\treturn find_kth(arr1[0..mid1], arr2, k);\n\t\t} else {\n\t\t\treturn find_kth(arr1, arr2[0..mid2], k);\n\t\t}\n\t}\n}",
    "{\n\tlong i = 0;\n\tlong j = 0;\n\tlong kth = 0;\n\twhile (i < arr1.length && j < arr2.length) \n\t{\n\t\tif (arr1[i] < arr2[j]) \n\t\t{\n\t\t\tkth = arr1[i];\n\t\t\ti++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tkth = arr2[j];\n\t\t\tj++;\n\t\t}\n\t\tif (i + j == k) \n\t\t{\n\t\t\treturn kth;\n\t\t}\n\t}\n\twhile (i < arr1.length) \n\t{\n\t\tkth = arr1[i];\n\t\ti++;\n\t\tif (i + j == k) \n\t\t{\n\t\t\treturn kth;\n\t\t}\n\t}\n\twhile (j < arr2.length) \n\t{\n\t\tkth = arr2[j];\n\t\tj++;\n\t\tif (i + j == k) \n\t\t{\n\t\t\treturn kth;\n\t\t}\n\t}\n\treturn kth;\n}",
    "{\n\tlong i = 0;\n\tlong j = 0;\n\tlong kth = 0;\n\twhile (i < arr1.length && j < arr2.length) \n\t{\n\t\tif (arr1[i] < arr2[j]) \n\t\t{\n\t\t\tkth = arr1[i];\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tkth = arr2[j];\n\t\t\tj++;\n\t\t}\n\t\tif (i + j == k) \n\t\t{\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (i == arr1.length) \n\t{\n\t\tkth = arr2[j + k - i - 1];\n\t}\n\telse if (j == arr2.length) \n\t{\n\t\tkth = arr1[i + k - j - 1];\n\t}\n\treturn kth;\n}",
    "{\n\tlong i = 0;\n\tlong j = 0;\n\twhile (k > 0) \n\t{\n\t\tif (arr1[i] < arr2[j]) \n\t\t{\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tj++;\n\t\t}\n\t\tk--;\n\t}\n\treturn min(arr1[i], arr2[j]);\n}",
    "{\n\tif (arr1.length == 0)\n\t\treturn arr2[k];\n\tif (arr2.length == 0)\n\t\treturn arr1[k];\n\t\n\tlong mid1 = arr1.length / 2;\n\tlong mid2 = arr2.length / 2;\n\t\n\tif (mid1 + mid2 < k)\n\t{\n\t\tif (arr1[mid1] > arr2[mid2])\n\t\t\treturn find_kth(arr1, arr2[mid2..$], k - mid2);\n\t\telse\n\t\t\treturn find_kth(arr1[mid1..$], arr2, k - mid1);\n\t}\n\telse\n\t{\n\t\tif (arr1[mid1] > arr2[mid2])\n\t\t\treturn find_kth(arr1[0..mid1], arr2, k);\n\t\telse\n\t\t\treturn find_kth(arr1, arr2[0..mid2], k);\n\t}\n}",
    "{\n\tlong i = 0;\n\tlong j = 0;\n\tlong kth = 0;\n\twhile (i < arr1.length && j < arr2.length) \n\t{\n\t\tif (arr1[i] < arr2[j]) \n\t\t{\n\t\t\tkth = arr1[i];\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tkth = arr2[j];\n\t\t\tj++;\n\t\t}\n\t\tif (i + j == k)\n\t\t\tbreak;\n\t}\n\tif (i + j < k) \n\t{\n\t\tif (i == arr1.length) \n\t\t{\n\t\t\tkth = arr2[k - i - 1];\n\t\t}\n\t\telse \n\t\t{\n\t\t\tkth = arr1[k - j - 1];\n\t\t}\n\t}\n\treturn kth;\n}",
    "{\n\tlong n1 = arr1.length;\n\tlong n2 = arr2.length;\n\t\n\tif(n1 == 0)\n\t\treturn arr2[k-1];\n\tif(n2 == 0)\n\t\treturn arr1[k-1];\n\t\n\tif(k == 1)\n\t\treturn min(arr1[0], arr2[0]);\n\t\n\tlong i = min(k/2, n1);\n\tlong j = min(k/2, n2);\n\t\n\tif(arr1[i-1] > arr2[j-1])\n\t\treturn find_kth(arr1, arr2[j..$], k-j);\n\telse\n\t\treturn find_kth(arr1[i..$], arr2, k-i);\n}",
    "{\n\tlong[] arr = new long[$];\n\tlong i = 0, j = 0, m = 0;\n\twhile (i < arr1.length && j < arr2.length) \n\t{\n\t\tif (arr1[i] < arr2[j]) \n\t\t{\n\t\t\tarr[m] = arr1[i];\n\t\t\ti++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tarr[m] = arr2[j];\n\t\t\tj++;\n\t\t}\n\t\tm++;\n\t}\n\twhile (i < arr1.length) \n\t{\n\t\tarr[m] = arr1[i];\n\t\ti++;\n\t\tm++;\n\t}\n\twhile (j < arr2.length) \n\t{\n\t\tarr[m] = arr2[j];\n\t\tj++;\n\t\tm++;\n\t}\n\treturn arr[k - 1];\n}",
    "{\n\tlong[] arr = new long[arr1.length + arr2.length];\n\tlong i = 0, j = 0, k1 = 0;\n\twhile (i < arr1.length && j < arr2.length) \n\t{\n\t\tif (arr1[i] < arr2[j])\n\t\t\tarr[k1++] = arr1[i++];\n\t\telse\n\t\t\tarr[k1++] = arr2[j++];\n\t}\n\twhile (i < arr1.length)\n\t\tarr[k1++] = arr1[i++];\n\twhile (j < arr2.length)\n\t\tarr[k1++] = arr2[j++];\n\treturn arr[k - 1];\n}",
    "{\n\tlong i = 0;\n\tlong j = 0;\n\tlong kth = 0;\n\twhile (i < arr1.length && j < arr2.length) \n\t{\n\t\tif (arr1[i] < arr2[j]) \n\t\t{\n\t\t\tkth = arr1[i];\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tkth = arr2[j];\n\t\t\tj++;\n\t\t}\n\t\tif (i + j == k) \n\t\t{\n\t\t\treturn kth;\n\t\t}\n\t}\n\twhile (i < arr1.length) \n\t{\n\t\tkth = arr1[i];\n\t\ti++;\n\t\tif (i + j == k) \n\t\t{\n\t\t\treturn kth;\n\t\t}\n\t}\n\twhile (j < arr2.length) \n\t{\n\t\tkth = arr2[j];\n\t\tj++;\n\t\tif (i + j == k) \n\t\t{\n\t\t\treturn kth;\n\t\t}\n\t}\n\treturn kth;\n}",
    "{\n\tif (arr1.length == 0)\n\t\treturn arr2[k - 1];\n\tif (arr2.length == 0)\n\t\treturn arr1[k - 1];\n\tif (k == 1)\n\t\treturn min(arr1[0], arr2[0]);\n\t\n\tlong a = min(arr1.length, k / 2);\n\tlong b = min(arr2.length, k / 2);\n\t\n\tif (arr1[a - 1] < arr2[b - 1])\n\t\treturn find_kth(arr1[a .. $], arr2, k - a);\n\telse\n\t\treturn find_kth(arr1, arr2[b .. $], k - b);\n}",
    "{\n\tif (arr1.length == 0)\n\t\treturn arr2[k];\n\tif (arr2.length == 0)\n\t\treturn arr1[k];\n\t\n\tif (k == 0)\n\t\treturn min(arr1[0], arr2[0]);\n\t\n\tlong mid1 = arr1.length / 2;\n\tlong mid2 = arr2.length / 2;\n\t\n\tif (mid1 + mid2 < k)\n\t{\n\t\tif (arr1[mid1] > arr2[mid2])\n\t\t\treturn find_kth(arr1, arr2[mid2+1 .. $], k - mid2 - 1);\n\t\telse\n\t\t\treturn find_kth(arr1[mid1+1 .. $], arr2, k - mid1 - 1);\n\t}\n\telse\n\t{\n\t\tif (arr1[mid1] > arr2[mid2])\n\t\t\treturn find_kth(arr1[0 .. mid1], arr2, k);\n\t\telse\n\t\t\treturn find_kth(arr1, arr2[0 .. mid2], k);\n\t}\n}",
    "{\n\tlong[] arr3 = new long[arr1.length + arr2.length];\n\tlong i = 0, j = 0, k = 0;\n\twhile (i < arr1.length && j < arr2.length) \n\t{\n\t\tif (arr1[i] < arr2[j]) \n\t\t{\n\t\t\tarr3[k] = arr1[i];\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tarr3[k] = arr2[j];\n\t\t\tj++;\n\t\t}\n\t\tk++;\n\t}\n\twhile (i < arr1.length) \n\t{\n\t\tarr3[k] = arr1[i];\n\t\ti++;\n\t\tk++;\n\t}\n\twhile (j < arr2.length) \n\t{\n\t\tarr3[k] = arr2[j];\n\t\tj++;\n\t\tk++;\n\t}\n\treturn arr3[k - 1];\n}",
    "{\n\tlong i = 0;\n\tlong j = 0;\n\tlong kth = 0;\n\twhile (i < arr1.length && j < arr2.length) \n\t{\n\t\tif (arr1[i] < arr2[j]) \n\t\t{\n\t\t\tkth = arr1[i];\n\t\t\ti++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tkth = arr2[j];\n\t\t\tj++;\n\t\t}\n\t\tif (i + j == k) \n\t\t{\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (i + j < k) \n\t{\n\t\tif (i == arr1.length) \n\t\t{\n\t\t\tkth = arr2[k - i - 1];\n\t\t} \n\t\telse \n\t\t{\n\t\t\tkth = arr1[k - j - 1];\n\t\t}\n\t}\n\treturn kth;\n}",
    "{\n\tlong i = 0, j = 0;\n\tlong[] arr = new long[arr1.length + arr2.length];\n\t\n\twhile (i < arr1.length && j < arr2.length)\n\t{\n\t\tif (arr1[i] < arr2[j])\n\t\t{\n\t\t\tarr ~= arr1[i];\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tarr ~= arr2[j];\n\t\t\tj++;\n\t\t}\n\t}\n\t\n\twhile (i < arr1.length)\n\t{\n\t\tarr ~= arr1[i];\n\t\ti++;\n\t}\n\t\n\twhile (j < arr2.length)\n\t{\n\t\tarr ~= arr2[j];\n\t\tj++;\n\t}\n\t\n\treturn arr[k - 1];\n}",
    "{\n\tlong i = 0;\n\tlong j = 0;\n\tlong k_th = 0;\n\twhile (i < arr1.length && j < arr2.length) \n\t{\n\t\tif (arr1[i] < arr2[j]) \n\t\t{\n\t\t\tk_th = arr1[i];\n\t\t\ti++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tk_th = arr2[j];\n\t\t\tj++;\n\t\t}\n\t\tif (i + j == k) \n\t\t{\n\t\t\treturn k_th;\n\t\t}\n\t}\n\tif (i < arr1.length) \n\t{\n\t\treturn arr1[k - j];\n\t} \n\telse \n\t{\n\t\treturn arr2[k - i];\n\t}\n}",
    "{\n\tif (arr1.length == 0)\n\t\treturn arr2[k];\n\tif (arr2.length == 0)\n\t\treturn arr1[k];\n\t\n\tlong mid1 = arr1.length / 2;\n\tlong mid2 = arr2.length / 2;\n\t\n\tif (mid1 + mid2 < k)\n\t{\n\t\tif (arr1[mid1] > arr2[mid2])\n\t\t\treturn find_kth(arr1, arr2[mid2+1..$], k - mid2 - 1);\n\t\telse\n\t\t\treturn find_kth(arr1[mid1+1..$], arr2, k - mid1 - 1);\n\t}\n\telse\n\t{\n\t\tif (arr1[mid1] > arr2[mid2])\n\t\t\treturn find_kth(arr1[0..mid1], arr2, k);\n\t\telse\n\t\t\treturn find_kth(arr1, arr2[0..mid2], k);\n\t}\n}",
    "{\n\tif (arr1.length == 0)\n\t\treturn arr2[k];\n\tif (arr2.length == 0)\n\t\treturn arr1[k];\n\t\n\tlong mid1 = arr1.length / 2;\n\tlong mid2 = arr2.length / 2;\n\t\n\tif (mid1 + mid2 < k)\n\t{\n\t\tif (arr1[mid1] > arr2[mid2])\n\t\t\treturn find_kth(arr1, arr2[mid2..$], k - mid2);\n\t\telse\n\t\t\treturn find_kth(arr1[mid1..$], arr2, k - mid1);\n\t}\n\telse\n\t{\n\t\tif (arr1[mid1] > arr2[mid2])\n\t\t\treturn find_kth(arr1[0..mid1], arr2, k);\n\t\telse\n\t\t\treturn find_kth(arr1, arr2[0..mid2], k);\n\t}\n}",
    "{\n\tlong i = 0;\n\tlong j = 0;\n\tlong kth = 0;\n\twhile(i < arr1.length && j < arr2.length) \n\t{\n\t\tif(arr1[i] < arr2[j]) \n\t\t{\n\t\t\tkth = arr1[i];\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tkth = arr2[j];\n\t\t\tj++;\n\t\t}\n\t\tif(i + j == k)\n\t\t\treturn kth;\n\t}\n\twhile(i < arr1.length) \n\t{\n\t\tkth = arr1[i];\n\t\ti++;\n\t\tif(i + j == k)\n\t\t\treturn kth;\n\t}\n\twhile(j < arr2.length) \n\t{\n\t\tkth = arr2[j];\n\t\tj++;\n\t\tif(i + j == k)\n\t\t\treturn kth;\n\t}\n\treturn kth;\n}",
    "{\n\tlong[] arr = new long[arr1.length + arr2.length];\n\tlong i = 0, j = 0, index = 0;\n\twhile(i < arr1.length && j < arr2.length) \n\t{\n\t\tif(arr1[i] < arr2[j]) \n\t\t{\n\t\t\tarr[index] = arr1[i];\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tarr[index] = arr2[j];\n\t\t\tj++;\n\t\t}\n\t\tindex++;\n\t}\n\twhile(i < arr1.length) \n\t{\n\t\tarr[index] = arr1[i];\n\t\ti++;\n\t\tindex++;\n\t}\n\twhile(j < arr2.length) \n\t{\n\t\tarr[index] = arr2[j];\n\t\tj++;\n\t\tindex++;\n\t}\n\treturn arr[k - 1];\n}",
    "{\n\tif (arr1.length == 0)\n\t\treturn arr2[k];\n\tif (arr2.length == 0)\n\t\treturn arr1[k];\n\tif (k == 0)\n\t\treturn min(arr1[0], arr2[0]);\n\t\n\tlong mid1 = (arr1.length - 1) / 2;\n\tlong mid2 = (arr2.length - 1) / 2;\n\t\n\tif (mid1 + mid2 < k)\n\t{\n\t\tif (arr1[mid1] > arr2[mid2])\n\t\t\treturn find_kth(arr1, arr2[mid2 + 1 .. $], k - mid2 - 1);\n\t\telse\n\t\t\treturn find_kth(arr1[mid1 + 1 .. $], arr2, k - mid1 - 1);\n\t}\n\telse\n\t{\n\t\tif (arr1[mid1] > arr2[mid2])\n\t\t\treturn find_kth(arr1[0 .. mid1], arr2, k);\n\t\telse\n\t\t\treturn find_kth(arr1, arr2[0 .. mid2], k);\n\t}\n}",
    "{\n\tif (arr1.length == 0) return arr2[k];\n\tif (arr2.length == 0) return arr1[k];\n\t\n\tlong mid1 = arr1.length / 2;\n\tlong mid2 = arr2.length / 2;\n\t\n\tif (mid1 + mid2 < k) \n\t{\n\t\tif (arr1[mid1] > arr2[mid2]) \n\t\t{\n\t\t\treturn find_kth(arr1, arr2[mid2..$], k - mid2);\n\t\t} \n\t\telse \n\t\t{\n\t\t\treturn find_kth(arr1[mid1..$], arr2, k - mid1);\n\t\t}\n\t} \n\telse \n\t{\n\t\tif (arr1[mid1] > arr2[mid2]) \n\t\t{\n\t\t\treturn find_kth(arr1[0..mid1], arr2, k);\n\t\t} \n\t\telse \n\t\t{\n\t\t\treturn find_kth(arr1, arr2[0..mid2], k);\n\t\t}\n\t}\n}",
    "{\n\tif (arr1.length == 0)\n\t\treturn arr2[k];\n\tif (arr2.length == 0)\n\t\treturn arr1[k];\n\t\n\tlong mid1 = arr1.length / 2;\n\tlong mid2 = arr2.length / 2;\n\t\n\tif (mid1 + mid2 < k) {\n\t\tif (arr1[mid1] > arr2[mid2])\n\t\t\treturn find_kth(arr1, arr2[mid2 + 1 .. $], k - mid2 - 1);\n\t\telse\n\t\t\treturn find_kth(arr1[mid1 + 1 .. $], arr2, k - mid1 - 1);\n\t} else {\n\t\tif (arr1[mid1] > arr2[mid2])\n\t\t\treturn find_kth(arr1[0 .. mid1], arr2, k);\n\t\telse\n\t\t\treturn find_kth(arr1, arr2[0 .. mid2], k);\n\t}\n}",
    "{\n\tlong[] arr = new long[$];\n\tlong i = 0;\n\tlong j = 0;\n\tlong index = 0;\n\twhile (i < arr1.length && j < arr2.length) \n\t{\n\t\tif (arr1[i] < arr2[j]) \n\t\t{\n\t\t\tarr[index] = arr1[i];\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tarr[index] = arr2[j];\n\t\t\tj++;\n\t\t}\n\t\tindex++;\n\t}\n\twhile (i < arr1.length) \n\t{\n\t\tarr[index] = arr1[i];\n\t\ti++;\n\t\tindex++;\n\t}\n\twhile (j < arr2.length) \n\t{\n\t\tarr[index] = arr2[j];\n\t\tj++;\n\t\tindex++;\n\t}\n\treturn arr[k - 1];\n}",
    "{\n\tlong[] arr = new long[arr1.length + arr2.length];\n\tlong i = 0;\n\tlong j = 0;\n\tlong kk = 0;\n\twhile(i < arr1.length && j < arr2.length)\n\t{\n\t\tif(arr1[i] < arr2[j])\n\t\t{\n\t\t\tarr[kk] = arr1[i];\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tarr[kk] = arr2[j];\n\t\t\tj++;\n\t\t}\n\t\tkk++;\n\t}\n\twhile(i < arr1.length)\n\t{\n\t\tarr[kk] = arr1[i];\n\t\ti++;\n\t\tkk++;\n\t}\n\twhile(j < arr2.length)\n\t{\n\t\tarr[kk] = arr2[j];\n\t\tj++;\n\t\tkk++;\n\t}\n\treturn arr[k-1];\n}",
    "{\n\tif (arr1.length == 0)\n\t\treturn arr2[k];\n\tif (arr2.length == 0)\n\t\treturn arr1[k];\n\t\n\tlong m1 = arr1.length / 2;\n\tlong m2 = arr2.length / 2;\n\t\n\tif (m1 + m2 < k) {\n\t\tif (arr1[m1] > arr2[m2])\n\t\t\treturn find_kth(arr1, arr2[m2..$], k - m2);\n\t\telse\n\t\t\treturn find_kth(arr1[m1..$], arr2, k - m1);\n\t} else {\n\t\tif (arr1[m1] > arr2[m2])\n\t\t\treturn find_kth(arr1[0..m1], arr2, k);\n\t\telse\n\t\t\treturn find_kth(arr1, arr2[0..m2], k);\n\t}\n}",
    "{\n\tif (arr1.length == 0)\n\t\treturn arr2[k];\n\tif (arr2.length == 0)\n\t\treturn arr1[k];\n\t\n\tlong mid1 = arr1.length / 2;\n\tlong mid2 = arr2.length / 2;\n\t\n\tif (mid1 + mid2 < k) \n\t{\n\t\tif (arr1[mid1] > arr2[mid2]) \n\t\t{\n\t\t\treturn find_kth(arr1, arr2[mid2..$], k - mid2);\n\t\t} \n\t\telse \n\t\t{\n\t\t\treturn find_kth(arr1[mid1..$], arr2, k - mid1);\n\t\t}\n\t} \n\telse \n\t{\n\t\tif (arr1[mid1] > arr2[mid2]) \n\t\t{\n\t\t\treturn find_kth(arr1[0..mid1], arr2, k);\n\t\t} \n\t\telse \n\t\t{\n\t\t\treturn find_kth(arr1, arr2[0..mid2], k);\n\t\t}\n\t}\n}",
    "{\n\tif(arr1.length == 0)\n\t\treturn arr2[k];\n\tif(arr2.length == 0)\n\t\treturn arr1[k];\n\t\n\tlong mid1 = arr1.length / 2;\n\tlong mid2 = arr2.length / 2;\n\t\n\tif(mid1 + mid2 < k)\n\t{\n\t\tif(arr1[mid1] > arr2[mid2])\n\t\t\treturn find_kth(arr1, arr2[mid2..$], k - mid2);\n\t\telse\n\t\t\treturn find_kth(arr1[mid1..$], arr2, k - mid1);\n\t}\n\telse\n\t{\n\t\tif(arr1[mid1] > arr2[mid2])\n\t\t\treturn find_kth(arr1[0..mid1], arr2, k);\n\t\telse\n\t\t\treturn find_kth(arr1, arr2[0..mid2], k);\n\t}\n}",
    "{\n\tif (arr1.length == 0)\n\t\treturn arr2[k];\n\tif (arr2.length == 0)\n\t\treturn arr1[k];\n\t\n\tlong mid1 = arr1.length / 2;\n\tlong mid2 = arr2.length / 2;\n\t\n\tif (mid1 + mid2 < k)\n\t{\n\t\tif (arr1[mid1] > arr2[mid2])\n\t\t\treturn find_kth(arr1, arr2[mid2..$], k - mid2);\n\t\telse\n\t\t\treturn find_kth(arr1[mid1..$], arr2, k - mid1);\n\t}\n\telse\n\t{\n\t\tif (arr1[mid1] > arr2[mid2])\n\t\t\treturn find_kth(arr1[0..mid1], arr2, k);\n\t\telse\n\t\t\treturn find_kth(arr1, arr2[0..mid2], k);\n\t}\n}",
    "{\n\tif (arr1.length == 0)\n\t\treturn arr2[k - 1];\n\tif (arr2.length == 0)\n\t\treturn arr1[k - 1];\n\tif (k == 1)\n\t\treturn min(arr1[0], arr2[0]);\n\t\n\tlong i = min(k / 2, arr1.length);\n\tlong j = min(k / 2, arr2.length);\n\t\n\tif (arr1[i - 1] > arr2[j - 1])\n\t\treturn find_kth(arr1, arr2[j .. $], k - j);\n\telse\n\t\treturn find_kth(arr1[i .. $], arr2, k - i);\n}",
    "{\n\tlong i = 0;\n\tlong j = 0;\n\tlong kth = 0;\n\twhile(i < arr1.length && j < arr2.length) \n\t{\n\t\tif(arr1[i] < arr2[j]) \n\t\t{\n\t\t\tkth = arr1[i];\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tkth = arr2[j];\n\t\t\tj++;\n\t\t}\n\t\tif(i + j == k) \n\t\t{\n\t\t\tbreak;\n\t\t}\n\t}\n\tif(i == arr1.length) \n\t{\n\t\twhile(j < arr2.length) \n\t\t{\n\t\t\tkth = arr2[j];\n\t\t\tj++;\n\t\t\tif(i + j == k) \n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\telse if(j == arr2.length) \n\t{\n\t\twhile(i < arr1.length) \n\t\t{\n\t\t\tkth = arr1[i];\n\t\t\ti++;\n\t\t\tif(i + j == k) \n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn kth;\n}",
    "{\n\tif (arr1.length == 0)\n\t\treturn arr2[k];\n\tif (arr2.length == 0)\n\t\treturn arr1[k];\n\t\n\tif (k == 0)\n\t\treturn min(arr1[0], arr2[0]);\n\t\n\tlong i = min(k / 2, arr1.length - 1);\n\tlong j = min(k / 2, arr2.length - 1);\n\t\n\tif (arr1[i] > arr2[j])\n\t\treturn find_kth(arr1, arr2[j + 1 .. $], k - j - 1);\n\telse\n\t\treturn find_kth(arr1[i + 1 .. $], arr2, k - i - 1);\n}",
    "{\n\tlong i = 0;\n\tlong j = 0;\n\tlong kth = 0;\n\twhile (i < arr1.length && j < arr2.length) \n\t{\n\t\tif (arr1[i] < arr2[j]) \n\t\t{\n\t\t\tkth = arr1[i];\n\t\t\ti++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tkth = arr2[j];\n\t\t\tj++;\n\t\t}\n\t\tif (i + j == k) \n\t\t\treturn kth;\n\t}\n\twhile (i < arr1.length) \n\t{\n\t\tkth = arr1[i];\n\t\ti++;\n\t\tif (i + j == k) \n\t\t\treturn kth;\n\t}\n\twhile (j < arr2.length) \n\t{\n\t\tkth = arr2[j];\n\t\tj++;\n\t\tif (i + j == k) \n\t\t\treturn kth;\n\t}\n\treturn kth;\n}",
    "{\n\tif(arr1.length == 0)\n\t\treturn arr2[k];\n\tif(arr2.length == 0)\n\t\treturn arr1[k];\n\t\n\tlong m = arr1.length;\n\tlong n = arr2.length;\n\t\n\tif(k > (m + n - 1))\n\t\treturn -1;\n\t\n\tlong i = (m - 1) * k / (m + n);\n\tlong j = k - i - 1;\n\t\n\tif(arr1[i] > arr2[j])\n\t{\n\t\treturn find_kth(arr1[0..i], arr2[(j + 1)..$], k - j - 1);\n\t}\n\telse if(arr1[i] < arr2[j])\n\t{\n\t\treturn find_kth(arr1[(i + 1)..$], arr2[0..j], k - i - 1);\n\t}\n\telse\n\t{\n\t\treturn arr1[i];\n\t}\n}",
    "{\n\tlong i = 0;\n\tlong j = 0;\n\tlong kth = 0;\n\twhile(i < arr1.length && j < arr2.length) \n\t{\n\t\tif(arr1[i] < arr2[j]) \n\t\t{\n\t\t\tkth = arr1[i];\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tkth = arr2[j];\n\t\t\tj++;\n\t\t}\n\t\tif(i + j == k) \n\t\t{\n\t\t\treturn kth;\n\t\t}\n\t}\n\tif(i < arr1.length) \n\t{\n\t\treturn arr1[k - j];\n\t}\n\telse \n\t{\n\t\treturn arr2[k - i];\n\t}\n}",
    "{\n\tlong n1 = arr1.length;\n\tlong n2 = arr2.length;\n\t\n\tif (n1 == 0)\n\t\treturn arr2[k];\n\tif (n2 == 0)\n\t\treturn arr1[k];\n\t\n\tif (k == 0)\n\t\treturn min(arr1[0], arr2[0]);\n\t\n\tlong i = min(k/2, n1-1);\n\tlong j = min(k/2, n2-1);\n\t\n\tif (arr1[i] > arr2[j])\n\t\treturn find_kth(arr1, arr2[j+1..$], k-j-1);\n\telse\n\t\treturn find_kth(arr1[i+1..$], arr2, k-i-1);\n}",
    "{\n\tif (arr1.length == 0)\n\t\treturn arr2[k];\n\tif (arr2.length == 0)\n\t\treturn arr1[k];\n\t\n\tlong i = (arr1.length / (arr1.length + arr2.length)) * (k - 1);\n\tlong j = (k - 1) - i;\n\t\n\tauto a = (i == 0) ? long.min : arr1[i - 1];\n\tauto b = (j == 0) ? long.min : arr2[j - 1];\n\tauto c = (i == arr1.length) ? long.max : arr1[i];\n\tauto d = (j == arr2.length) ? long.max : arr2[j];\n\t\n\tif (b < c)\n\t{\n\t\tif (a < c)\n\t\t\treturn c;\n\t\telse\n\t\t\treturn find_kth(arr1[i..$], arr2, k - i - 1);\n\t}\n\telse\n\t{\n\t\tif (a < d)\n\t\t\treturn d;\n\t\telse\n\t\t\treturn find_kth(arr1, arr2[j..$], k - j - 1);\n\t}\n}",
    "{\n\tif (arr1.length == 0)\n\t\treturn arr2[k];\n\tif (arr2.length == 0)\n\t\treturn arr1[k];\n\tif (k == 0)\n\t\treturn min(arr1[0], arr2[0]);\n\t\n\tlong i = min(arr1.length - 1, k / 2);\n\tlong j = min(arr2.length - 1, k / 2);\n\t\n\tif (arr1[i] > arr2[j])\n\t\treturn find_kth(arr1, arr2[j + 1 .. $], k - j - 1);\n\telse\n\t\treturn find_kth(arr1[i + 1 .. $], arr2, k - i - 1);\n}",
    "{\n\tlong i = 0;\n\tlong j = 0;\n\tlong n = arr1.length;\n\tlong m = arr2.length;\n\twhile (i < n && j < m) \n\t{\n\t\tif (arr1[i] < arr2[j]) \n\t\t{\n\t\t\tif (i + j == k - 1) \n\t\t\t{\n\t\t\t\treturn arr1[i];\n\t\t\t}\n\t\t\ti++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (i + j == k - 1) \n\t\t\t{\n\t\t\t\treturn arr2[j];\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\t}\n\tif (i < n) \n\t{\n\t\treturn arr1[k - j - 1];\n\t} \n\telse \n\t{\n\t\treturn arr2[k - i - 1];\n\t}\n}",
    "{\n\tlong i = 0;\n\tlong j = 0;\n\tlong n = arr1.length;\n\tlong m = arr2.length;\n\t\n\twhile(i < n && j < m) \n\t{\n\t\tif(arr1[i] < arr2[j]) \n\t\t{\n\t\t\tif(i + j == k - 1) \n\t\t\t{\n\t\t\t\treturn arr1[i];\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tif(i + j == k - 1) \n\t\t\t{\n\t\t\t\treturn arr2[j];\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\t}\n\t\n\tif(i < n) \n\t{\n\t\treturn arr1[k - j - 1];\n\t}\n\t\n\tif(j < m) \n\t{\n\t\treturn arr2[k - i - 1];\n\t}\n\t\n\treturn -1;\n}",
    "{\n\tif (arr1.length == 0)\n\t\treturn arr2[k - 1];\n\tif (arr2.length == 0)\n\t\treturn arr1[k - 1];\n\tif (k == 1)\n\t\treturn min(arr1[0], arr2[0]);\n\t\n\tlong i = min(k / 2, arr1.length);\n\tlong j = min(k / 2, arr2.length);\n\t\n\tif (arr1[i - 1] > arr2[j - 1])\n\t\treturn find_kth(arr1, arr2[j .. $], k - j);\n\telse\n\t\treturn find_kth(arr1[i .. $], arr2, k - i);\n}",
    "{\n\tlong n = arr1.length;\n\tlong m = arr2.length;\n\tlong i = (n / (n + m)) * (k - 1);\n\tlong j = (k - 1) - i;\n\t\n\tlong ai_1 = (i == 0) ? long.min : arr1[i - 1];\n\tlong bj_1 = (j == 0) ? long.min : arr2[j - 1];\n\tlong ai = (i == n) ? long.max : arr1[i];\n\tlong bj = (j == m) ? long.max : arr2[j];\n\t\n\tif (bj_1 < ai && ai < bj)\n\t\treturn ai;\n\telse if (ai_1 < bj && bj < ai)\n\t\treturn bj;\n\t\n\tif (ai < bj)\n\t\treturn find_kth(arr1[i..$], arr2, k - i - 1);\n\telse\n\t\treturn find_kth(arr1, arr2[j..$], k - j - 1);\n}",
    "{\n\tlong[] arr = new long[arr1.length + arr2.length];\n\tlong i = 0, j = 0, kk = 0;\n\twhile (i < arr1.length && j < arr2.length) \n\t{\n\t\tif (arr1[i] < arr2[j]) \n\t\t{\n\t\t\tarr[kk++] = arr1[i++];\n\t\t} \n\t\telse \n\t\t{\n\t\t\tarr[kk++] = arr2[j++];\n\t\t}\n\t}\n\twhile (i < arr1.length) \n\t{\n\t\tarr[kk++] = arr1[i++];\n\t}\n\twhile (j < arr2.length) \n\t{\n\t\tarr[kk++] = arr2[j++];\n\t}\n\treturn arr[k - 1];\n}",
    "{\n\tlong i = 0;\n\tlong j = 0;\n\tlong kth = 0;\n\twhile (i < arr1.length && j < arr2.length) \n\t{\n\t\tif (arr1[i] < arr2[j]) \n\t\t{\n\t\t\tkth = arr1[i];\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tkth = arr2[j];\n\t\t\tj++;\n\t\t}\n\t\tif (i + j == k) \n\t\t{\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (i == arr1.length) \n\t{\n\t\twhile (j < arr2.length) \n\t\t{\n\t\t\tkth = arr2[j];\n\t\t\tj++;\n\t\t\tif (i + j == k) \n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\telse if (j == arr2.length) \n\t{\n\t\twhile (i < arr1.length) \n\t\t{\n\t\t\tkth = arr1[i];\n\t\t\ti++;\n\t\t\tif (i + j == k) \n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn kth;\n}",
    "{\n\tlong i = 0;\n\tlong j = 0;\n\tlong kth = 0;\n\twhile(i < arr1.length && j < arr2.length) \n\t{\n\t\tif(arr1[i] < arr2[j]) \n\t\t{\n\t\t\tkth = arr1[i];\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tkth = arr2[j];\n\t\t\tj++;\n\t\t}\n\t\tif(i + j == k) \n\t\t{\n\t\t\tbreak;\n\t\t}\n\t}\n\tif(i == arr1.length) \n\t{\n\t\twhile(j < arr2.length) \n\t\t{\n\t\t\tkth = arr2[j];\n\t\t\tj++;\n\t\t\tif(i + j == k) \n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\telse if(j == arr2.length) \n\t{\n\t\twhile(i < arr1.length) \n\t\t{\n\t\t\tkth = arr1[i];\n\t\t\ti++;\n\t\t\tif(i + j == k) \n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn kth;\n}",
    "{\n\tlong i = 0;\n\tlong j = 0;\n\tlong kth = 0;\n\t\n\twhile (i < arr1.length && j < arr2.length) \n\t{\n\t\tif (arr1[i] < arr2[j]) \n\t\t{\n\t\t\tkth = arr1[i];\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tkth = arr2[j];\n\t\t\tj++;\n\t\t}\n\t\t\n\t\tif (i + j == k) \n\t\t{\n\t\t\treturn kth;\n\t\t}\n\t}\n\t\n\twhile (i < arr1.length) \n\t{\n\t\tkth = arr1[i];\n\t\ti++;\n\t\tif (i + j == k) \n\t\t{\n\t\t\treturn kth;\n\t\t}\n\t}\n\t\n\twhile (j < arr2.length) \n\t{\n\t\tkth = arr2[j];\n\t\tj++;\n\t\tif (i + j == k) \n\t\t{\n\t\t\treturn kth;\n\t\t}\n\t}\n\t\n\treturn kth;\n}",
    "{\n\tlong[] arr = new long[arr1.length + arr2.length];\n\tlong i = 0;\n\tlong j = 0;\n\tlong index = 0;\n\twhile (i < arr1.length && j < arr2.length) \n\t{\n\t\tif (arr1[i] < arr2[j]) \n\t\t{\n\t\t\tarr[index] = arr1[i];\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tarr[index] = arr2[j];\n\t\t\tj++;\n\t\t}\n\t\tindex++;\n\t}\n\twhile (i < arr1.length) \n\t{\n\t\tarr[index] = arr1[i];\n\t\ti++;\n\t\tindex++;\n\t}\n\twhile (j < arr2.length) \n\t{\n\t\tarr[index] = arr2[j];\n\t\tj++;\n\t\tindex++;\n\t}\n\treturn arr[k - 1];\n}",
    "{\n\tif (arr1.length > arr2.length)\n\t\treturn find_kth(arr2, arr1, k);\n\t\n\tif (arr1.length == 0)\n\t\treturn arr2[k - 1];\n\t\n\tif (k == 1)\n\t\treturn min(arr1[0], arr2[0]);\n\t\n\tlong i = min(k / 2, arr1.length);\n\tlong j = min(k / 2, arr2.length);\n\t\n\tif (arr1[i - 1] > arr2[j - 1])\n\t\treturn find_kth(arr1, arr2[j..$], k - j);\n\telse\n\t\treturn find_kth(arr1[i..$], arr2, k - i);\n}",
    "{\n\tif (arr1.length == 0)\n\t\treturn arr2[k];\n\tif (arr2.length == 0)\n\t\treturn arr1[k];\n\tif (k == 0)\n\t\treturn min(arr1[0], arr2[0]);\n\t\n\tlong mid1 = arr1.length / 2;\n\tlong mid2 = arr2.length / 2;\n\t\n\tif (mid1 + mid2 < k)\n\t{\n\t\tif (arr1[mid1] > arr2[mid2])\n\t\t\treturn find_kth(arr1, arr2[mid2+1..$], k-mid2-1);\n\t\telse\n\t\t\treturn find_kth(arr1[mid1+1..$], arr2, k-mid1-1);\n\t}\n\telse\n\t{\n\t\tif (arr1[mid1] > arr2[mid2])\n\t\t\treturn find_kth(arr1[0..mid1], arr2, k);\n\t\telse\n\t\t\treturn find_kth(arr1, arr2[0..mid2], k);\n\t}\n}",
    "{\n\tlong n1 = arr1.length;\n\tlong n2 = arr2.length;\n\t\n\tif (n1 == 0)\n\t\treturn arr2[k-1];\n\tif (n2 == 0)\n\t\treturn arr1[k-1];\n\tif (k == 1)\n\t\treturn min(arr1[0], arr2[0]);\n\t\n\tlong i = min(n1, k/2);\n\tlong j = min(n2, k/2);\n\t\n\tif (arr1[i-1] > arr2[j-1])\n\t\treturn find_kth(arr1, arr2[j..$], k-j);\n\telse\n\t\treturn find_kth(arr1[i..$], arr2, k-i);\n}",
    "{\n\tif (arr1.length == 0)\n\t\treturn arr2[k];\n\tif (arr2.length == 0)\n\t\treturn arr1[k];\n\tif (k == 0)\n\t\treturn min(arr1[0], arr2[0]);\n\t\n\tlong mid1 = arr1.length / 2;\n\tlong mid2 = arr2.length / 2;\n\t\n\tif (mid1 + mid2 < k) {\n\t\tif (arr1[mid1] > arr2[mid2])\n\t\t\treturn find_kth(arr1, arr2[mid2 + 1..$], k - mid2 - 1);\n\t\telse\n\t\t\treturn find_kth(arr1[mid1 + 1..$], arr2, k - mid1 - 1);\n\t} else {\n\t\tif (arr1[mid1] > arr2[mid2])\n\t\t\treturn find_kth(arr1[0..mid1], arr2, k);\n\t\telse\n\t\t\treturn find_kth(arr1, arr2[0..mid2], k);\n\t}\n}",
    "{\n\tif (arr1.length == 0) \n\t{\n\t\treturn arr2[k];\n\t}\n\tif (arr2.length == 0) \n\t{\n\t\treturn arr1[k];\n\t}\n\tif (k == 0) \n\t{\n\t\treturn min(arr1[0], arr2[0]);\n\t}\n\tlong m1 = min(arr1.length, k / 2);\n\tlong m2 = min(arr2.length, k / 2);\n\tif (arr1[m1] < arr2[m2]) \n\t{\n\t\treturn find_kth(arr1[m1..$], arr2, k - m1);\n\t}\n\telse \n\t{\n\t\treturn find_kth(arr1, arr2[m2..$], k - m2);\n\t}\n}",
    "{\n\tlong[] arr = new long[arr1.length + arr2.length];\n\tlong i = 0, j = 0;\n\tforeach(long a; arr1)\n\t{\n\t\tarr[i] = a;\n\t\ti++;\n\t}\n\tforeach(long b; arr2)\n\t{\n\t\tarr[i] = b;\n\t\ti++;\n\t}\n\tarr.sort;\n\treturn arr[k-1];\n}",
    "{\n\tif (arr1.length == 0)\n\t\treturn arr2[k];\n\tif (arr2.length == 0)\n\t\treturn arr1[k];\n\tif (k == 0)\n\t\treturn min(arr1[0], arr2[0]);\n\t\n\tlong mid1 = arr1.length / 2;\n\tlong mid2 = arr2.length / 2;\n\t\n\tif (mid1 + mid2 < k)\n\t{\n\t\tif (arr1[mid1] > arr2[mid2])\n\t\t\treturn find_kth(arr1, arr2[mid2+1 .. $], k - mid2 - 1);\n\t\telse\n\t\t\treturn find_kth(arr1[mid1+1 .. $], arr2, k - mid1 - 1);\n\t}\n\telse\n\t{\n\t\tif (arr1[mid1] > arr2[mid2])\n\t\t\treturn find_kth(arr1[0 .. mid1], arr2, k);\n\t\telse\n\t\t\treturn find_kth(arr1, arr2[0 .. mid2], k);\n\t}\n}",
    "{\n\tlong i = 0;\n\tlong j = 0;\n\tlong n = arr1.length;\n\tlong m = arr2.length;\n\tlong[] arr3 = new long[n + m];\n\tfor (long l = 0; l < k; l++) \n\t{\n\t\tif (i < n && j < m) \n\t\t{\n\t\t\tif (arr1[i] < arr2[j]) \n\t\t\t{\n\t\t\t\tarr3[l] = arr1[i];\n\t\t\t\ti++;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tarr3[l] = arr2[j];\n\t\t\t\tj++;\n\t\t\t}\n\t\t} \n\t\telse if (i < n) \n\t\t{\n\t\t\tarr3[l] = arr1[i];\n\t\t\ti++;\n\t\t} \n\t\telse if (j < m) \n\t\t{\n\t\t\tarr3[l] = arr2[j];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn arr3[k - 1];\n}",
    "{\n\tlong i = 0;\n\tlong j = 0;\n\t\n\twhile (i < arr1.length && j < arr2.length) \n\t{\n\t\tif (arr1[i] < arr2[j]) \n\t\t{\n\t\t\tif (i + j == k) \n\t\t\t{\n\t\t\t\treturn arr1[i];\n\t\t\t}\n\t\t\ti++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (i + j == k) \n\t\t\t{\n\t\t\t\treturn arr2[j];\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\t}\n\t\n\tif (i < arr1.length) \n\t{\n\t\treturn arr1[k - j];\n\t}\n\telse \n\t{\n\t\treturn arr2[k - i];\n\t}\n}",
    "{\n\tif (arr1.length == 0) \n\t\treturn arr2[k - 1];\n\tif (arr2.length == 0) \n\t\treturn arr1[k - 1];\n\tif (k == 1) \n\t\treturn min(arr1[0], arr2[0]);\n\t\n\tlong i = min(k / 2, arr1.length);\n\tlong j = min(k / 2, arr2.length);\n\t\n\tif (arr1[i - 1] > arr2[j - 1]) \n\t\treturn find_kth(arr1, arr2[j..$], k - j);\n\telse \n\t\treturn find_kth(arr1[i..$], arr2, k - i);\n}",
    "{\n\tlong[] arr = new long[arr1.length + arr2.length];\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\twhile(i < arr1.length && j < arr2.length)\n\t{\n\t\tif(arr1[i] < arr2[j])\n\t\t{\n\t\t\tarr[k] = arr1[i];\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tarr[k] = arr2[j];\n\t\t\tj++;\n\t\t}\n\t\tk++;\n\t}\n\twhile(i < arr1.length)\n\t{\n\t\tarr[k] = arr1[i];\n\t\ti++;\n\t\tk++;\n\t}\n\twhile(j < arr2.length)\n\t{\n\t\tarr[k] = arr2[j];\n\t\tj++;\n\t\tk++;\n\t}\n\treturn arr[k-1];\n}",
    "{\n\tlong i = 0;\n\tlong j = 0;\n\tlong kth = 0;\n\twhile(i < arr1.length && j < arr2.length) \n\t{\n\t\tif(arr1[i] < arr2[j]) \n\t\t{\n\t\t\tkth = arr1[i];\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tkth = arr2[j];\n\t\t\tj++;\n\t\t}\n\t\tif(i+j == k) \n\t\t{\n\t\t\treturn kth;\n\t\t}\n\t}\n\tif(i < arr1.length) \n\t{\n\t\treturn arr1[k-j];\n\t}\n\telse \n\t{\n\t\treturn arr2[k-i];\n\t}\n}",
    "{\n\tlong i = 0;\n\tlong j = 0;\n\tlong count = 0;\n\twhile (i < arr1.length && j < arr2.length) \n\t{\n\t\tif (arr1[i] < arr2[j]) \n\t\t{\n\t\t\tcount++;\n\t\t\tif (count == k) \n\t\t\t{\n\t\t\t\treturn arr1[i];\n\t\t\t}\n\t\t\ti++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tcount++;\n\t\t\tif (count == k) \n\t\t\t{\n\t\t\t\treturn arr2[j];\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\t}\n\twhile (i < arr1.length) \n\t{\n\t\tcount++;\n\t\tif (count == k) \n\t\t{\n\t\t\treturn arr1[i];\n\t\t}\n\t\ti++;\n\t}\n\twhile (j < arr2.length) \n\t{\n\t\tcount++;\n\t\tif (count == k) \n\t\t{\n\t\t\treturn arr2[j];\n\t\t}\n\t\tj++;\n\t}\n\treturn -1;\n}",
    "{\n\tlong i = 0;\n\tlong j = 0;\n\tlong kth = 0;\n\twhile(i < arr1.length && j < arr2.length) \n\t{\n\t\tif(arr1[i] < arr2[j]) \n\t\t{\n\t\t\tkth = arr1[i];\n\t\t\ti++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tkth = arr2[j];\n\t\t\tj++;\n\t\t}\n\t\tk--;\n\t\tif(k == 0) \n\t\t{\n\t\t\tbreak;\n\t\t}\n\t}\n\tif(i == arr1.length) \n\t{\n\t\twhile(k > 0) \n\t\t{\n\t\t\tkth = arr2[j];\n\t\t\tj++;\n\t\t\tk--;\n\t\t}\n\t} \n\telse if(j == arr2.length) \n\t{\n\t\twhile(k > 0) \n\t\t{\n\t\t\tkth = arr1[i];\n\t\t\ti++;\n\t\t\tk--;\n\t\t}\n\t}\n\treturn kth;\n}",
    "{\n\tif (arr1.length == 0)\n\t\treturn arr2[k];\n\tif (arr2.length == 0)\n\t\treturn arr1[k];\n\t\n\tif (k == 0)\n\t\treturn min(arr1[0], arr2[0]);\n\t\n\tlong mid1 = arr1.length / 2;\n\tlong mid2 = arr2.length / 2;\n\t\n\tif (mid1 + mid2 < k)\n\t{\n\t\tif (arr1[mid1] > arr2[mid2])\n\t\t\treturn find_kth(arr1, arr2[mid2..$], k - mid2);\n\t\telse\n\t\t\treturn find_kth(arr1[mid1..$], arr2, k - mid1);\n\t}\n\telse\n\t{\n\t\tif (arr1[mid1] > arr2[mid2])\n\t\t\treturn find_kth(arr1[0..mid1], arr2, k);\n\t\telse\n\t\t\treturn find_kth(arr1, arr2[0..mid2], k);\n\t}\n}",
    "{\n\tif (arr1.length == 0)\n\t\treturn arr2[k - 1];\n\tif (arr2.length == 0)\n\t\treturn arr1[k - 1];\n\tif (k == 1)\n\t\treturn min(arr1[0], arr2[0]);\n\t\n\tlong i = min(k / 2, arr1.length);\n\tlong j = min(k / 2, arr2.length);\n\t\n\tif (arr1[i - 1] > arr2[j - 1])\n\t\treturn find_kth(arr1, arr2[j..$], k - j);\n\telse\n\t\treturn find_kth(arr1[i..$], arr2, k - i);\n}",
    "{\n\tlong i = 0;\n\tlong j = 0;\n\tlong n = arr1.length;\n\tlong m = arr2.length;\n\tlong kth = 0;\n\t\n\twhile(i < n && j < m)\n\t{\n\t\tif(arr1[i] < arr2[j])\n\t\t{\n\t\t\tkth = arr1[i];\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tkth = arr2[j];\n\t\t\tj++;\n\t\t}\n\t\t\n\t\tif(i + j == k)\n\t\t\treturn kth;\n\t}\n\t\n\twhile(i < n)\n\t{\n\t\tkth = arr1[i];\n\t\ti++;\n\t\tif(i + j == k)\n\t\t\treturn kth;\n\t}\n\t\n\twhile(j < m)\n\t{\n\t\tkth = arr2[j];\n\t\tj++;\n\t\tif(i + j == k)\n\t\t\treturn kth;\n\t}\n\t\n\treturn kth;\n}",
    "{\n\tif (arr1.length == 0)\n\t\treturn arr2[k];\n\tif (arr2.length == 0)\n\t\treturn arr1[k];\n\tif (k == 0)\n\t\treturn min(arr1[0], arr2[0]);\n\t\n\tlong mid1 = arr1.length / 2;\n\tlong mid2 = arr2.length / 2;\n\t\n\tif (mid1 + mid2 < k) {\n\t\tif (arr1[mid1] > arr2[mid2])\n\t\t\treturn find_kth(arr1, arr2[mid2 + 1 .. $], k - mid2 - 1);\n\t\telse\n\t\t\treturn find_kth(arr1[mid1 + 1 .. $], arr2, k - mid1 - 1);\n\t}\n\telse {\n\t\tif (arr1[mid1] > arr2[mid2])\n\t\t\treturn find_kth(arr1[0 .. mid1], arr2, k);\n\t\telse\n\t\t\treturn find_kth(arr1, arr2[0 .. mid2], k);\n\t}\n}",
    "{\n\tlong i = 0;\n\tlong j = 0;\n\tlong kth = 0;\n\twhile (i < arr1.length && j < arr2.length) \n\t{\n\t\tif (arr1[i] < arr2[j]) \n\t\t{\n\t\t\tkth = arr1[i];\n\t\t\ti++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tkth = arr2[j];\n\t\t\tj++;\n\t\t}\n\t\tif (i + j == k) \n\t\t{\n\t\t\treturn kth;\n\t\t}\n\t}\n\twhile (i < arr1.length) \n\t{\n\t\tkth = arr1[i];\n\t\ti++;\n\t\tif (i + j == k) \n\t\t{\n\t\t\treturn kth;\n\t\t}\n\t}\n\twhile (j < arr2.length) \n\t{\n\t\tkth = arr2[j];\n\t\tj++;\n\t\tif (i + j == k) \n\t\t{\n\t\t\treturn kth;\n\t\t}\n\t}\n\treturn kth;\n}",
    "{\n\tlong[] arr = new long[arr1.length + arr2.length];\n\tlong i = 0, j = 0, index = 0;\n\twhile (i < arr1.length && j < arr2.length) \n\t{\n\t\tif (arr1[i] < arr2[j]) \n\t\t{\n\t\t\tarr[index] = arr1[i];\n\t\t\ti++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tarr[index] = arr2[j];\n\t\t\tj++;\n\t\t}\n\t\tindex++;\n\t}\n\twhile (i < arr1.length) \n\t{\n\t\tarr[index] = arr1[i];\n\t\ti++;\n\t\tindex++;\n\t}\n\twhile (j < arr2.length) \n\t{\n\t\tarr[index] = arr2[j];\n\t\tj++;\n\t\tindex++;\n\t}\n\treturn arr[k - 1];\n}",
    "{\n\tlong[] arr = new long[arr1.length + arr2.length];\n\tlong i = 0;\n\tlong j = 0;\n\tlong n = 0;\n\twhile (i < arr1.length && j < arr2.length) \n\t{\n\t\tif (arr1[i] < arr2[j]) \n\t\t{\n\t\t\tarr[n] = arr1[i];\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tarr[n] = arr2[j];\n\t\t\tj++;\n\t\t}\n\t\tn++;\n\t}\n\twhile (i < arr1.length) \n\t{\n\t\tarr[n] = arr1[i];\n\t\ti++;\n\t\tn++;\n\t}\n\twhile (j < arr2.length) \n\t{\n\t\tarr[n] = arr2[j];\n\t\tj++;\n\t\tn++;\n\t}\n\treturn arr[k - 1];\n}",
    "{\n\tlong[] arr = new long[arr1.length + arr2.length];\n\tlong i = 0, j = 0, l = 0;\n\twhile (i < arr1.length && j < arr2.length) \n\t{\n\t\tif (arr1[i] < arr2[j]) \n\t\t{\n\t\t\tarr[l] = arr1[i];\n\t\t\ti++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tarr[l] = arr2[j];\n\t\t\tj++;\n\t\t}\n\t\tl++;\n\t}\n\twhile (i < arr1.length) \n\t{\n\t\tarr[l] = arr1[i];\n\t\ti++;\n\t\tl++;\n\t}\n\twhile (j < arr2.length) \n\t{\n\t\tarr[l] = arr2[j];\n\t\tj++;\n\t\tl++;\n\t}\n\treturn arr[k - 1];\n}",
    "{\n\tlong i = 0;\n\tlong j = 0;\n\tlong kth = 0;\n\t\n\twhile (i < arr1.length && j < arr2.length) \n\t{\n\t\tif (arr1[i] < arr2[j]) \n\t\t{\n\t\t\tkth = arr1[i];\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tkth = arr2[j];\n\t\t\tj++;\n\t\t}\n\t\t\n\t\tif (i + j == k) \n\t\t{\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tif (i == arr1.length) \n\t{\n\t\twhile (j < arr2.length) \n\t\t{\n\t\t\tkth = arr2[j];\n\t\t\tj++;\n\t\t\tif (i + j == k) \n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\telse if (j == arr2.length) \n\t{\n\t\twhile (i < arr1.length) \n\t\t{\n\t\t\tkth = arr1[i];\n\t\t\ti++;\n\t\t\tif (i + j == k) \n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn kth;\n}",
    "{\n\tlong i = 0;\n\tlong j = 0;\n\tlong kth = 0;\n\twhile (i < arr1.length && j < arr2.length) \n\t{\n\t\tif (arr1[i] < arr2[j]) \n\t\t{\n\t\t\tif (i + j + 1 == k) \n\t\t\t{\n\t\t\t\tkth = arr1[i];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\ti++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (i + j + 1 == k) \n\t\t\t{\n\t\t\t\tkth = arr2[j];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\t}\n\tif (i == arr1.length) \n\t{\n\t\tkth = arr2[k - arr1.length - 1];\n\t} \n\telse if (j == arr2.length) \n\t{\n\t\tkth = arr1[k - arr2.length - 1];\n\t}\n\treturn kth;\n}",
    "{\n\tlong[] arr = new long[arr1.length + arr2.length];\n\tlong i = 0, j = 0, l = 0;\n\twhile(i < arr1.length && j < arr2.length) \n\t{\n\t\tif(arr1[i] < arr2[j]) \n\t\t{\n\t\t\tarr[l] = arr1[i];\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tarr[l] = arr2[j];\n\t\t\tj++;\n\t\t}\n\t\tl++;\n\t}\n\twhile(i < arr1.length) \n\t{\n\t\tarr[l] = arr1[i];\n\t\ti++;\n\t\tl++;\n\t}\n\twhile(j < arr2.length) \n\t{\n\t\tarr[l] = arr2[j];\n\t\tj++;\n\t\tl++;\n\t}\n\treturn arr[k - 1];\n}",
    "{\n\tlong i = 0;\n\tlong j = 0;\n\tlong kth = 0;\n\twhile (i < arr1.length && j < arr2.length) \n\t{\n\t\tif (arr1[i] < arr2[j]) \n\t\t{\n\t\t\tkth = arr1[i];\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tkth = arr2[j];\n\t\t\tj++;\n\t\t}\n\t\tif (i + j == k) \n\t\t{\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (i == arr1.length) \n\t{\n\t\twhile (j < arr2.length) \n\t\t{\n\t\t\tkth = arr2[j];\n\t\t\tj++;\n\t\t\tif (i + j == k) \n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\telse if (j == arr2.length) \n\t{\n\t\twhile (i < arr1.length) \n\t\t{\n\t\t\tkth = arr1[i];\n\t\t\ti++;\n\t\t\tif (i + j == k) \n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn kth;\n}",
    "{\n\tif (arr1.length == 0)\n\t\treturn arr2[k];\n\tif (arr2.length == 0)\n\t\treturn arr1[k];\n\tif (k == 0)\n\t\treturn min(arr1[0], arr2[0]);\n\tlong mid1 = arr1.length / 2;\n\tlong mid2 = arr2.length / 2;\n\tif (mid1 + mid2 < k) \n\t{\n\t\tif (arr1[mid1] > arr2[mid2]) \n\t\t{\n\t\t\treturn find_kth(arr1, arr2[mid2..$], k - mid2);\n\t\t} \n\t\telse \n\t\t{\n\t\t\treturn find_kth(arr1[mid1..$], arr2, k - mid1);\n\t\t}\n\t} \n\telse \n\t{\n\t\tif (arr1[mid1] > arr2[mid2]) \n\t\t{\n\t\t\treturn find_kth(arr1[0..mid1], arr2, k);\n\t\t} \n\t\telse \n\t\t{\n\t\t\treturn find_kth(arr1, arr2[0..mid2], k);\n\t\t}\n\t}\n}",
    "{\n\tif (arr1.length == 0)\n\t\treturn arr2[k-1];\n\tif (arr2.length == 0)\n\t\treturn arr1[k-1];\n\t\n\tif (k == 1)\n\t\treturn min(arr1[0], arr2[0]);\n\t\n\tlong idx1 = min(k/2, arr1.length);\n\tlong idx2 = min(k/2, arr2.length);\n\t\n\tif (arr1[idx1-1] < arr2[idx2-1])\n\t\treturn find_kth(arr1[idx1..$], arr2, k-idx1);\n\telse\n\t\treturn find_kth(arr1, arr2[idx2..$], k-idx2);\n}",
    "{\n\tlong i = 0;\n\tlong j = 0;\n\tlong kth = 0;\n\twhile(i < arr1.length && j < arr2.length) \n\t{\n\t\tif(arr1[i] < arr2[j]) \n\t\t{\n\t\t\tkth = arr1[i];\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tkth = arr2[j];\n\t\t\tj++;\n\t\t}\n\t\tif(i+j == k) \n\t\t{\n\t\t\tbreak;\n\t\t}\n\t}\n\tif(i == arr1.length) \n\t{\n\t\twhile(j < arr2.length) \n\t\t{\n\t\t\tkth = arr2[j];\n\t\t\tj++;\n\t\t\tif(i+j == k) \n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\telse if(j == arr2.length) \n\t{\n\t\twhile(i < arr1.length) \n\t\t{\n\t\t\tkth = arr1[i];\n\t\t\ti++;\n\t\t\tif(i+j == k) \n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn kth;\n}",
    "{\n\tif (arr1.length == 0)\n\t\treturn arr2[k];\n\tif (arr2.length == 0)\n\t\treturn arr1[k];\n\tif (k == 0)\n\t\treturn min(arr1[0], arr2[0]);\n\t\n\tlong mid1 = arr1.length / 2;\n\tlong mid2 = arr2.length / 2;\n\t\n\tif (mid1 + mid2 < k) {\n\t\tif (arr1[mid1] > arr2[mid2])\n\t\t\treturn find_kth(arr1, arr2[mid2 + 1 .. $], k - mid2 - 1);\n\t\telse\n\t\t\treturn find_kth(arr1[mid1 + 1 .. $], arr2, k - mid1 - 1);\n\t}\n\telse {\n\t\tif (arr1[mid1] > arr2[mid2])\n\t\t\treturn find_kth(arr1[0 .. mid1], arr2, k);\n\t\telse\n\t\t\treturn find_kth(arr1, arr2[0 .. mid2], k);\n\t}\n}",
    "{\n\tif (arr1.length == 0)\n\t\treturn arr2[k];\n\tif (arr2.length == 0)\n\t\treturn arr1[k];\n\tif (k == 0)\n\t\treturn min(arr1[0], arr2[0]);\n\t\n\tlong i = min(arr1.length, k / 2);\n\tlong j = min(arr2.length, k / 2);\n\t\n\tif (arr1[i] > arr2[j])\n\t\treturn find_kth(arr1, arr2[j + 1 .. $], k - j - 1);\n\telse\n\t\treturn find_kth(arr1[i + 1 .. $], arr2, k - i - 1);\n}",
    "{\n\tif (arr1.length == 0)\n\t\treturn arr2[k];\n\tif (arr2.length == 0)\n\t\treturn arr1[k];\n\tif (k == 0)\n\t\treturn min(arr1[0], arr2[0]);\n\t\n\tlong i = min(arr1.length - 1, k / 2);\n\tlong j = min(arr2.length - 1, k / 2);\n\t\n\tif (arr1[i] > arr2[j])\n\t\treturn find_kth(arr1, arr2[j + 1 .. $], k - j - 1);\n\telse\n\t\treturn find_kth(arr1[i + 1 .. $], arr2, k - i - 1);\n}",
    "{\n\tif (arr1.length == 0)\n\t\treturn arr2[k];\n\tif (arr2.length == 0)\n\t\treturn arr1[k];\n\tif (k == 0)\n\t\treturn min(arr1[0], arr2[0]);\n\t\n\tlong mid1 = (arr1.length - 1) / 2;\n\tlong mid2 = (arr2.length - 1) / 2;\n\t\n\tif (mid1 + mid2 < k) {\n\t\tif (arr1[mid1] > arr2[mid2])\n\t\t\treturn find_kth(arr1, arr2[mid2..$], k - mid2 - 1);\n\t\telse\n\t\t\treturn find_kth(arr1[mid1..$], arr2, k - mid1 - 1);\n\t} else {\n\t\tif (arr1[mid1] > arr2[mid2])\n\t\t\treturn find_kth(arr1[0..mid1], arr2, k);\n\t\telse\n\t\t\treturn find_kth(arr1, arr2[0..mid2], k);\n\t}\n}",
    "{\n\tlong[] arr = new long[arr1.length + arr2.length];\n\tlong i = 0, j = 0, k = 0;\n\twhile (i < arr1.length && j < arr2.length) \n\t{\n\t\tif (arr1[i] < arr2[j]) \n\t\t{\n\t\t\tarr[k] = arr1[i];\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tarr[k] = arr2[j];\n\t\t\tj++;\n\t\t}\n\t\tk++;\n\t}\n\twhile (i < arr1.length) \n\t{\n\t\tarr[k] = arr1[i];\n\t\ti++;\n\t\tk++;\n\t}\n\twhile (j < arr2.length) \n\t{\n\t\tarr[k] = arr2[j];\n\t\tj++;\n\t\tk++;\n\t}\n\treturn arr[k - 1];\n}",
    "{\n\tlong n = arr1.length;\n\tlong m = arr2.length;\n\t\n\tif (k > (n + m)) \n\t{\n\t\treturn -1;\n\t}\n\t\n\tif (n == 0) \n\t{\n\t\treturn arr2[k - 1];\n\t}\n\t\n\tif (m == 0) \n\t{\n\t\treturn arr1[k - 1];\n\t}\n\t\n\tif (k == 1) \n\t{\n\t\treturn min(arr1[0], arr2[0]);\n\t}\n\t\n\tlong i = min(k / 2, n);\n\tlong j = min(k / 2, m);\n\t\n\tif (arr1[i - 1] > arr2[j - 1]) \n\t{\n\t\treturn find_kth(arr1, arr2[j..$], k - j);\n\t}\n\telse \n\t{\n\t\treturn find_kth(arr1[i..$], arr2, k - i);\n\t}\n}",
    "{\n\tlong i = 0;\n\tlong j = 0;\n\tlong kth = 0;\n\twhile(i < arr1.length && j < arr2.length) \n\t{\n\t\tif(arr1[i] < arr2[j]) \n\t\t{\n\t\t\tkth = arr1[i];\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tkth = arr2[j];\n\t\t\tj++;\n\t\t}\n\t\tk--;\n\t\tif(k == 0) \n\t\t{\n\t\t\treturn kth;\n\t\t}\n\t}\n\tif(i < arr1.length) \n\t{\n\t\twhile(i < arr1.length) \n\t\t{\n\t\t\tkth = arr1[i];\n\t\t\ti++;\n\t\t\tk--;\n\t\t\tif(k == 0) \n\t\t\t{\n\t\t\t\treturn kth;\n\t\t\t}\n\t\t}\n\t}\n\tif(j < arr2.length) \n\t{\n\t\twhile(j < arr2.length) \n\t\t{\n\t\t\tkth = arr2[j];\n\t\t\tj++;\n\t\t\tk--;\n\t\t\tif(k == 0) \n\t\t\t{\n\t\t\t\treturn kth;\n\t\t\t}\n\t\t}\n\t}\n\treturn kth;\n}",
    "{\n\tlong i = 0, j = 0;\n\twhile(i < arr1.length && j < arr2.length) \n\t{\n\t\tif(arr1[i] < arr2[j]) \n\t\t{\n\t\t\tif(i + j + 1 == k) \n\t\t\t{\n\t\t\t\treturn arr1[i];\n\t\t\t}\n\t\t\ti++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif(i + j + 1 == k) \n\t\t\t{\n\t\t\t\treturn arr2[j];\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\t}\n\tif(i < arr1.length) \n\t{\n\t\treturn arr1[k - j - 1];\n\t}\n\tif(j < arr2.length) \n\t{\n\t\treturn arr2[k - i - 1];\n\t}\n\treturn -1;\n}",
    "{\n\tif (arr1.length == 0) \n\t{\n\t\treturn arr2[k];\n\t}\n\tif (arr2.length == 0) \n\t{\n\t\treturn arr1[k];\n\t}\n\tif (k == 0) \n\t{\n\t\treturn min(arr1[0], arr2[0]);\n\t}\n\tlong mid1 = arr1.length / 2;\n\tlong mid2 = arr2.length / 2;\n\tif (mid1 + mid2 < k) \n\t{\n\t\tif (arr1[mid1] > arr2[mid2]) \n\t\t{\n\t\t\treturn find_kth(arr1, arr2[mid2 + 1 .. $], k - mid2 - 1);\n\t\t}\n\t\telse \n\t\t{\n\t\t\treturn find_kth(arr1[mid1 + 1 .. $], arr2, k - mid1 - 1);\n\t\t}\n\t}\n\telse \n\t{\n\t\tif (arr1[mid1] > arr2[mid2]) \n\t\t{\n\t\t\treturn find_kth(arr1[0 .. mid1], arr2, k);\n\t\t}\n\t\telse \n\t\t{\n\t\t\treturn find_kth(arr1, arr2[0 .. mid2], k);\n\t\t}\n\t}\n}",
    "{\n\tlong i = 0;\n\tlong j = 0;\n\tlong count = 0;\n\twhile(i < arr1.length && j < arr2.length) \n\t{\n\t\tif(arr1[i] < arr2[j]) \n\t\t{\n\t\t\tcount++;\n\t\t\tif(count == k) \n\t\t\t{\n\t\t\t\treturn arr1[i];\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tcount++;\n\t\t\tif(count == k) \n\t\t\t{\n\t\t\t\treturn arr2[j];\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\t}\n\twhile(i < arr1.length) \n\t{\n\t\tcount++;\n\t\tif(count == k) \n\t\t{\n\t\t\treturn arr1[i];\n\t\t}\n\t\ti++;\n\t}\n\twhile(j < arr2.length) \n\t{\n\t\tcount++;\n\t\tif(count == k) \n\t\t{\n\t\t\treturn arr2[j];\n\t\t}\n\t\tj++;\n\t}\n\treturn -1;\n}",
    "{\n\tif (arr1.length == 0) \n\t{\n\t\treturn arr2[k - 1];\n\t}\n\tif (arr2.length == 0) \n\t{\n\t\treturn arr1[k - 1];\n\t}\n\tif (k == 1) \n\t{\n\t\treturn min(arr1[0], arr2[0]);\n\t}\n\tlong i = min(k / 2, arr1.length);\n\tlong j = min(k / 2, arr2.length);\n\tif (arr1[i - 1] > arr2[j - 1]) \n\t{\n\t\treturn find_kth(arr1, arr2[j..$], k - j);\n\t}\n\telse \n\t{\n\t\treturn find_kth(arr1[i..$], arr2, k - i);\n\t}\n}",
    "{\n\tlong i = 0;\n\tlong j = 0;\n\tlong kth = 0;\n\t\n\twhile (i < arr1.length && j < arr2.length) \n\t{\n\t\tif (arr1[i] < arr2[j]) \n\t\t{\n\t\t\tkth = arr1[i];\n\t\t\ti++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tkth = arr2[j];\n\t\t\tj++;\n\t\t}\n\t\t\n\t\tif (i + j == k) \n\t\t{\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tif (i == arr1.length) \n\t{\n\t\twhile (j < arr2.length) \n\t\t{\n\t\t\tkth = arr2[j];\n\t\t\tj++;\n\t\t\t\n\t\t\tif (i + j == k) \n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t} \n\telse if (j == arr2.length) \n\t{\n\t\twhile (i < arr1.length) \n\t\t{\n\t\t\tkth = arr1[i];\n\t\t\ti++;\n\t\t\t\n\t\t\tif (i + j == k) \n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn kth;\n}",
    "{\n\tlong i = 0;\n\tlong j = 0;\n\tlong count = 0;\n\twhile(i < arr1.length && j < arr2.length)\n\t{\n\t\tif(arr1[i] < arr2[j])\n\t\t{\n\t\t\tcount++;\n\t\t\tif(count == k)\n\t\t\t\treturn arr1[i];\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tcount++;\n\t\t\tif(count == k)\n\t\t\t\treturn arr2[j];\n\t\t\tj++;\n\t\t}\n\t}\n\twhile(i < arr1.length)\n\t{\n\t\tcount++;\n\t\tif(count == k)\n\t\t\treturn arr1[i];\n\t\ti++;\n\t}\n\twhile(j < arr2.length)\n\t{\n\t\tcount++;\n\t\tif(count == k)\n\t\t\treturn arr2[j];\n\t\tj++;\n\t}\n\treturn 0;\n}",
    "{\n\tlong i = 0;\n\tlong j = 0;\n\twhile (i < arr1.length && j < arr2.length) \n\t{\n\t\tif (arr1[i] < arr2[j]) \n\t\t{\n\t\t\tif (k == 1) \n\t\t\t{\n\t\t\t\treturn arr1[i];\n\t\t\t}\n\t\t\ti++;\n\t\t\tk--;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (k == 1) \n\t\t\t{\n\t\t\t\treturn arr2[j];\n\t\t\t}\n\t\t\tj++;\n\t\t\tk--;\n\t\t}\n\t}\n\tif (i == arr1.length) \n\t{\n\t\treturn arr2[j + k - 1];\n\t}\n\treturn arr1[i + k - 1];\n}",
    "{\n\tlong[] arr = arr1.length > arr2.length ? arr1 : arr2;\n\tlong[] brr = arr1.length > arr2.length ? arr2 : arr1;\n\t\n\tif (arr.length == 0)\n\t\treturn brr[k];\n\tif (k == 0)\n\t\treturn min(arr[0], brr[0]);\n\t\n\tlong i = min(k/2, arr.length-1);\n\tlong j = min(k/2, brr.length-1);\n\t\n\tif (arr[i] > brr[j])\n\t\treturn find_kth(arr[0..i], brr[j+1..$], k-j-1);\n\telse\n\t\treturn find_kth(arr[i+1..$], brr[0..j], k-i-1);\n}",
    "{\n\tlong i = 0;\n\tlong j = 0;\n\tlong kth = 0;\n\twhile(i < arr1.length && j < arr2.length) \n\t{\n\t\tif(arr1[i] < arr2[j]) \n\t\t{\n\t\t\tkth = arr1[i];\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tkth = arr2[j];\n\t\t\tj++;\n\t\t}\n\t\tk--;\n\t\tif(k == 0)\n\t\t\treturn kth;\n\t}\n\twhile(i < arr1.length) \n\t{\n\t\tkth = arr1[i];\n\t\ti++;\n\t\tk--;\n\t\tif(k == 0)\n\t\t\treturn kth;\n\t}\n\twhile(j < arr2.length) \n\t{\n\t\tkth = arr2[j];\n\t\tj++;\n\t\tk--;\n\t\tif(k == 0)\n\t\t\treturn kth;\n\t}\n\treturn kth;\n}",
    "{\n\tlong i = 0;\n\tlong j = 0;\n\tlong count = 0;\n\twhile (i < arr1.length && j < arr2.length) \n\t{\n\t\tif (arr1[i] < arr2[j]) \n\t\t{\n\t\t\tcount++;\n\t\t\tif (count == k) \n\t\t\t{\n\t\t\t\treturn arr1[i];\n\t\t\t}\n\t\t\ti++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tcount++;\n\t\t\tif (count == k) \n\t\t\t{\n\t\t\t\treturn arr2[j];\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\t}\n\twhile (i < arr1.length) \n\t{\n\t\tcount++;\n\t\tif (count == k) \n\t\t{\n\t\t\treturn arr1[i];\n\t\t}\n\t\ti++;\n\t}\n\twhile (j < arr2.length) \n\t{\n\t\tcount++;\n\t\tif (count == k) \n\t\t{\n\t\t\treturn arr2[j];\n\t\t}\n\t\tj++;\n\t}\n\treturn -1;\n}",
    "{\n\tlong i = 0;\n\tlong j = 0;\n\tlong kth = 0;\n\twhile (i < arr1.length && j < arr2.length) \n\t{\n\t\tif (arr1[i] < arr2[j]) \n\t\t{\n\t\t\tkth = arr1[i];\n\t\t\ti++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tkth = arr2[j];\n\t\t\tj++;\n\t\t}\n\t\tif (i + j == k) \n\t\t{\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (i + j == k) \n\t{\n\t\treturn kth;\n\t} \n\telse if (i == arr1.length) \n\t{\n\t\treturn arr2[k - i];\n\t} \n\telse \n\t{\n\t\treturn arr1[k - j];\n\t}\n}",
    "{\n\tif (arr1.length == 0)\n\t\treturn arr2[k - 1];\n\tif (arr2.length == 0)\n\t\treturn arr1[k - 1];\n\tif (k == 1)\n\t\treturn min(arr1[0], arr2[0]);\n\t\n\tlong i = min(k / 2, arr1.length);\n\tlong j = min(k / 2, arr2.length);\n\t\n\tif (arr1[i - 1] > arr2[j - 1])\n\t\treturn find_kth(arr1, arr2[j..$], k - j);\n\telse\n\t\treturn find_kth(arr1[i..$], arr2, k - i);\n}",
    "{\n\tlong[] arr3 = new long[arr1.length + arr2.length];\n\tlong i = 0, j = 0, k = 0;\n\twhile (i < arr1.length && j < arr2.length) \n\t{\n\t\tif (arr1[i] < arr2[j]) \n\t\t{\n\t\t\tarr3[k] = arr1[i];\n\t\t\ti++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tarr3[k] = arr2[j];\n\t\t\tj++;\n\t\t}\n\t\tk++;\n\t}\n\twhile (i < arr1.length) \n\t{\n\t\tarr3[k] = arr1[i];\n\t\ti++;\n\t\tk++;\n\t}\n\twhile (j < arr2.length) \n\t{\n\t\tarr3[k] = arr2[j];\n\t\tj++;\n\t\tk++;\n\t}\n\treturn arr3[k - 1];\n}",
    "{\n\tlong i = 0;\n\tlong j = 0;\n\tlong kth = 0;\n\twhile (i < arr1.length && j < arr2.length) \n\t{\n\t\tif (arr1[i] < arr2[j]) \n\t\t{\n\t\t\tkth = arr1[i];\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tkth = arr2[j];\n\t\t\tj++;\n\t\t}\n\t\tif (i + j == k)\n\t\t\tbreak;\n\t}\n\tif (i == arr1.length) \n\t{\n\t\twhile (j < arr2.length) \n\t\t{\n\t\t\tkth = arr2[j];\n\t\t\tj++;\n\t\t\tif (i + j == k)\n\t\t\t\tbreak;\n\t\t}\n\t}\n\telse if (j == arr2.length) \n\t{\n\t\twhile (i < arr1.length) \n\t\t{\n\t\t\tkth = arr1[i];\n\t\t\ti++;\n\t\t\tif (i + j == k)\n\t\t\t\tbreak;\n\t\t}\n\t}\n\treturn kth;\n}",
    "{\n\tif (arr1.length == 0)\n\t\treturn arr2[k];\n\tif (arr2.length == 0)\n\t\treturn arr1[k];\n\t\n\tif (k == 0)\n\t\treturn min(arr1[0], arr2[0]);\n\t\n\tlong mid1 = arr1.length / 2;\n\tlong mid2 = arr2.length / 2;\n\t\n\tif (mid1 + mid2 < k)\n\t{\n\t\tif (arr1[mid1] > arr2[mid2])\n\t\t\treturn find_kth(arr1, arr2[mid2 + 1 .. $], k - mid2 - 1);\n\t\telse\n\t\t\treturn find_kth(arr1[mid1 + 1 .. $], arr2, k - mid1 - 1);\n\t}\n\telse\n\t{\n\t\tif (arr1[mid1] > arr2[mid2])\n\t\t\treturn find_kth(arr1[0 .. mid1], arr2, k);\n\t\telse\n\t\t\treturn find_kth(arr1, arr2[0 .. mid2], k);\n\t}\n}",
    "{\n\tlong i = 0;\n\tlong j = 0;\n\tlong kth = 0;\n\t\n\twhile (i < arr1.length && j < arr2.length) \n\t{\n\t\tif (arr1[i] < arr2[j]) \n\t\t{\n\t\t\tkth = arr1[i];\n\t\t\ti++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tkth = arr2[j];\n\t\t\tj++;\n\t\t}\n\t\t\n\t\tif (i + j == k) \n\t\t{\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tif (i == arr1.length) \n\t{\n\t\twhile (j < arr2.length) \n\t\t{\n\t\t\tkth = arr2[j];\n\t\t\tj++;\n\t\t\tif (i + j == k) \n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t} \n\telse if (j == arr2.length) \n\t{\n\t\twhile (i < arr1.length) \n\t\t{\n\t\t\tkth = arr1[i];\n\t\t\ti++;\n\t\t\tif (i + j == k) \n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn kth;\n}",
    "{\n\tif (arr1.length == 0) \n\t{\n\t\treturn arr2[k];\n\t}\n\tif (arr2.length == 0) \n\t{\n\t\treturn arr1[k];\n\t}\n\tif (k == 0) \n\t{\n\t\treturn min(arr1[0], arr2[0]);\n\t}\n\tlong i = min(k / 2, arr1.length - 1);\n\tlong j = min(k / 2, arr2.length - 1);\n\tif (arr1[i] > arr2[j]) \n\t{\n\t\treturn find_kth(arr1, arr2[j + 1 .. $], k - j - 1);\n\t}\n\telse \n\t{\n\t\treturn find_kth(arr1[i + 1 .. $], arr2, k - i - 1);\n\t}\n}",
    "{\n\tif (arr1.length == 0) \n\t\treturn arr2[k - 1];\n\tif (arr2.length == 0) \n\t\treturn arr1[k - 1];\n\tif (k == 1) \n\t\treturn min(arr1[0], arr2[0]);\n\t\n\tlong i = min(k / 2, arr1.length);\n\tlong j = min(k / 2, arr2.length);\n\t\n\tif (arr1[i - 1] > arr2[j - 1]) \n\t\treturn find_kth(arr1, arr2[j..$], k - j);\n\telse \n\t\treturn find_kth(arr1[i..$], arr2, k - i);\n}",
    "{\n\tif (arr1.length == 0)\n\t\treturn arr2[k];\n\tif (arr2.length == 0)\n\t\treturn arr1[k];\n\t\n\tif (k == 0)\n\t\treturn min(arr1[0], arr2[0]);\n\t\n\tlong mid1 = arr1.length / 2;\n\tlong mid2 = arr2.length / 2;\n\t\n\tif (arr1[mid1] <= arr2[mid2])\n\t{\n\t\tif (k > mid1 + mid2)\n\t\t\treturn find_kth(arr1, arr2[mid2..$], k - mid2);\n\t\telse\n\t\t\treturn find_kth(arr1[0..mid1], arr2, k);\n\t}\n\telse\n\t{\n\t\tif (k > mid1 + mid2)\n\t\t\treturn find_kth(arr1[mid1..$], arr2, k - mid1);\n\t\telse\n\t\t\treturn find_kth(arr1, arr2[0..mid2], k);\n\t}\n}",
    "{\n\tlong[] arr = new long[$];\n\tlong i = 0, j = 0;\n\twhile (i < arr1.length && j < arr2.length) \n\t{\n\t\tif (arr1[i] < arr2[j]) \n\t\t{\n\t\t\tarr ~= arr1[i];\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tarr ~= arr2[j];\n\t\t\tj++;\n\t\t}\n\t}\n\twhile (i < arr1.length) \n\t{\n\t\tarr ~= arr1[i];\n\t\ti++;\n\t}\n\twhile (j < arr2.length) \n\t{\n\t\tarr ~= arr2[j];\n\t\tj++;\n\t}\n\treturn arr[k - 1];\n}",
    "{\n\tlong n1 = arr1.length;\n\tlong n2 = arr2.length;\n\t\n\tif(n1 == 0) return arr2[k-1];\n\tif(n2 == 0) return arr1[k-1];\n\t\n\tif(k == 1) return min(arr1[0], arr2[0]);\n\t\n\tlong i = min(k/2, n1);\n\tlong j = min(k/2, n2);\n\t\n\tif(arr1[i-1] > arr2[j-1])\n\t{\n\t\treturn find_kth(arr1, arr2[j..$], k-j);\n\t}\n\telse\n\t{\n\t\treturn find_kth(arr1[i..$], arr2, k-i);\n\t}\n}",
    "{\n\tlong[] arr = new long[$];\n\tforeach(i; 0..arr1.length)\n\t{\n\t\tarr ~= arr1[i];\n\t}\n\tforeach(i; 0..arr2.length)\n\t{\n\t\tarr ~= arr2[i];\n\t}\n\tarr.sort;\n\treturn arr[k-1];\n}",
    "{\n\tlong i = 0;\n\tlong j = 0;\n\tlong count = 0;\n\twhile (count < k) \n\t{\n\t\tif (arr1[i] < arr2[j]) \n\t\t{\n\t\t\ti++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tj++;\n\t\t}\n\t\tcount++;\n\t}\n\treturn arr1[i] < arr2[j] ? arr1[i] : arr2[j];\n}",
    "{\n\tlong i = 0;\n\tlong j = 0;\n\tlong k_th = 0;\n\twhile (i < arr1.length && j < arr2.length) \n\t{\n\t\tif (arr1[i] < arr2[j]) \n\t\t{\n\t\t\tk_th = arr1[i];\n\t\t\ti++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tk_th = arr2[j];\n\t\t\tj++;\n\t\t}\n\t\t\n\t\tif (i + j == k) \n\t\t{\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tif (i + j < k) \n\t{\n\t\tif (i == arr1.length) \n\t\t{\n\t\t\tk_th = arr2[k - i - 1];\n\t\t} \n\t\telse \n\t\t{\n\t\t\tk_th = arr1[k - j - 1];\n\t\t}\n\t}\n\t\n\treturn k_th;\n}",
    "{\n\tlong i = 0;\n\tlong j = 0;\n\tlong kth = 0;\n\twhile (i < arr1.length && j < arr2.length) \n\t{\n\t\tif (arr1[i] < arr2[j]) \n\t\t{\n\t\t\tkth = arr1[i];\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tkth = arr2[j];\n\t\t\tj++;\n\t\t}\n\t\tif (i + j == k)\n\t\t\tbreak;\n\t}\n\tif (i + j < k) \n\t{\n\t\tif (i == arr1.length) \n\t\t{\n\t\t\tkth = arr2[k - i - 1];\n\t\t}\n\t\telse \n\t\t{\n\t\t\tkth = arr1[k - j - 1];\n\t\t}\n\t}\n\treturn kth;\n}",
    "{\n\tlong[] arr = new long[$];\n\tforeach(i, e; arr1)\n\t\tarr ~= e;\n\tforeach(i, e; arr2)\n\t\tarr ~= e;\n\tarr.sort;\n\treturn arr[k - 1];\n}",
    "{\n\tlong n1 = arr1.length;\n\tlong n2 = arr2.length;\n\t\n\tif (n1 == 0)\n\t\treturn arr2[k];\n\tif (n2 == 0)\n\t\treturn arr1[k];\n\t\n\tlong i = (n1 - 1) / 2;\n\tlong j = (n2 - 1) / 2;\n\t\n\tif (arr1[i] <= arr2[j]) {\n\t\tif (k <= i + j + 1)\n\t\t\treturn find_kth(arr1[0..i], arr2, k);\n\t\telse\n\t\t\treturn find_kth(arr1, arr2[j+1..$], k - j - 1);\n\t} else {\n\t\tif (k <= i + j + 1)\n\t\t\treturn find_kth(arr1, arr2[0..j], k);\n\t\telse\n\t\t\treturn find_kth(arr1[i+1..$], arr2, k - i - 1);\n\t}\n}",
    "{\n\tlong i = 0;\n\tlong j = 0;\n\tlong kth = 0;\n\twhile (i < arr1.length && j < arr2.length) \n\t{\n\t\tif (arr1[i] < arr2[j]) \n\t\t{\n\t\t\tkth = arr1[i];\n\t\t\ti++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tkth = arr2[j];\n\t\t\tj++;\n\t\t}\n\t\tif (i + j == k) \n\t\t{\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (i == arr1.length) \n\t{\n\t\twhile (j < arr2.length) \n\t\t{\n\t\t\tkth = arr2[j];\n\t\t\tj++;\n\t\t\tif (i + j == k) \n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t} \n\telse if (j == arr2.length) \n\t{\n\t\twhile (i < arr1.length) \n\t\t{\n\t\t\tkth = arr1[i];\n\t\t\ti++;\n\t\t\tif (i + j == k) \n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn kth;\n}",
    "{\n\tif (arr1.length == 0) \n\t{\n\t\treturn arr2[k - 1];\n\t}\n\tif (arr2.length == 0) \n\t{\n\t\treturn arr1[k - 1];\n\t}\n\tif (k == 1) \n\t{\n\t\treturn min(arr1[0], arr2[0]);\n\t}\n\tlong i = min(k / 2, arr1.length);\n\tlong j = min(k / 2, arr2.length);\n\tif (arr1[i - 1] > arr2[j - 1]) \n\t{\n\t\treturn find_kth(arr1, arr2[j .. $], k - j);\n\t}\n\telse \n\t{\n\t\treturn find_kth(arr1[i .. $], arr2, k - i);\n\t}\n}",
    "{\n\tif (arr1.length == 0)\n\t\treturn arr2[k];\n\tif (arr2.length == 0)\n\t\treturn arr1[k];\n\tif (k == 0)\n\t\treturn min(arr1[0], arr2[0]);\n\t\n\tlong mid1 = (arr1.length - 1) / 2;\n\tlong mid2 = (arr2.length - 1) / 2;\n\t\n\tif (mid1 + mid2 < k) {\n\t\tif (arr1[mid1] > arr2[mid2])\n\t\t\treturn find_kth(arr1, arr2[mid2 + 1 .. $], k - mid2 - 1);\n\t\telse\n\t\t\treturn find_kth(arr1[mid1 + 1 .. $], arr2, k - mid1 - 1);\n\t} else {\n\t\tif (arr1[mid1] > arr2[mid2])\n\t\t\treturn find_kth(arr1[0 .. mid1], arr2, k);\n\t\telse\n\t\t\treturn find_kth(arr1, arr2[0 .. mid2], k);\n\t}\n}",
    "{\n\tlong i = 0;\n\tlong j = 0;\n\tlong k_th = 0;\n\twhile ((i < arr1.length) && (j < arr2.length)) \n\t{\n\t\tif (arr1[i] < arr2[j]) \n\t\t{\n\t\t\tk_th = arr1[i];\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tk_th = arr2[j];\n\t\t\tj++;\n\t\t}\n\t\tif (k == i + j) \n\t\t{\n\t\t\treturn k_th;\n\t\t}\n\t}\n\tif (i == arr1.length) \n\t{\n\t\treturn arr2[j + k - i - 1];\n\t}\n\telse \n\t{\n\t\treturn arr1[i + k - j - 1];\n\t}\n}",
    "{\n\tlong i = 0;\n\tlong j = 0;\n\tlong kth = 0;\n\twhile (i < arr1.length && j < arr2.length) \n\t{\n\t\tif (arr1[i] < arr2[j]) \n\t\t{\n\t\t\tkth = arr1[i];\n\t\t\ti++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tkth = arr2[j];\n\t\t\tj++;\n\t\t}\n\t\tif (i + j == k) \n\t\t{\n\t\t\treturn kth;\n\t\t}\n\t}\n\twhile (i < arr1.length) \n\t{\n\t\tkth = arr1[i];\n\t\ti++;\n\t\tif (i + j == k) \n\t\t{\n\t\t\treturn kth;\n\t\t}\n\t}\n\twhile (j < arr2.length) \n\t{\n\t\tkth = arr2[j];\n\t\tj++;\n\t\tif (i + j == k) \n\t\t{\n\t\t\treturn kth;\n\t\t}\n\t}\n\treturn kth;\n}",
    "{\n\tif (arr1.length == 0)\n\t\treturn arr2[k];\n\telse if (arr2.length == 0)\n\t\treturn arr1[k];\n\t\n\tlong mid1 = arr1.length / 2;\n\tlong mid2 = arr2.length / 2;\n\t\n\tif (mid1 + mid2 < k)\n\t{\n\t\tif (arr1[mid1] > arr2[mid2])\n\t\t\treturn find_kth(arr1, arr2[mid2..$], k - mid2);\n\t\telse\n\t\t\treturn find_kth(arr1[mid1..$], arr2, k - mid1);\n\t}\n\telse\n\t{\n\t\tif (arr1[mid1] > arr2[mid2])\n\t\t\treturn find_kth(arr1[0..mid1], arr2, k);\n\t\telse\n\t\t\treturn find_kth(arr1, arr2[0..mid2], k);\n\t}\n}",
    "{\n\tlong i = 0;\n\tlong j = 0;\n\tlong kth = 0;\n\twhile (i < arr1.length && j < arr2.length) \n\t{\n\t\tif (arr1[i] < arr2[j]) \n\t\t{\n\t\t\tkth = arr1[i];\n\t\t\ti++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tkth = arr2[j];\n\t\t\tj++;\n\t\t}\n\t\tk--;\n\t\tif (k == 0) \n\t\t{\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (i == arr1.length) \n\t{\n\t\twhile (k > 0) \n\t\t{\n\t\t\tkth = arr2[j];\n\t\t\tj++;\n\t\t\tk--;\n\t\t}\n\t} \n\telse if (j == arr2.length) \n\t{\n\t\twhile (k > 0) \n\t\t{\n\t\t\tkth = arr1[i];\n\t\t\ti++;\n\t\t\tk--;\n\t\t}\n\t}\n\treturn kth;\n}",
    "{\n\tif (arr1.length == 0)\n\t\treturn arr2[k];\n\tif (arr2.length == 0)\n\t\treturn arr1[k];\n\tif (k == 0)\n\t\treturn min(arr1[0], arr2[0]);\n\t\n\tlong i = min(k / 2, arr1.length - 1);\n\tlong j = min(k / 2, arr2.length - 1);\n\t\n\tif (arr1[i] > arr2[j])\n\t\treturn find_kth(arr1, arr2[j + 1 .. $], k - j - 1);\n\telse\n\t\treturn find_kth(arr1[i + 1 .. $], arr2, k - i - 1);\n}",
    "{\n\tlong i = 0;\n\tlong j = 0;\n\tlong kth = 0;\n\t\n\twhile (i < arr1.length && j < arr2.length) \n\t{\n\t\tif (arr1[i] <= arr2[j]) \n\t\t{\n\t\t\tkth = arr1[i];\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tkth = arr2[j];\n\t\t\tj++;\n\t\t}\n\t\t\n\t\tif (i + j == k) \n\t\t{\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tif (i == arr1.length) \n\t{\n\t\tkth = arr2[j + k - i - 1];\n\t}\n\telse if (j == arr2.length) \n\t{\n\t\tkth = arr1[i + k - j - 1];\n\t}\n\t\n\treturn kth;\n}",
    "{\n\tlong n1 = arr1.length;\n\tlong n2 = arr2.length;\n\t\n\tif (n1 == 0) \n\t{\n\t\treturn arr2[k-1];\n\t}\n\t\n\tif (n2 == 0) \n\t{\n\t\treturn arr1[k-1];\n\t}\n\t\n\tif (k == 1) \n\t{\n\t\treturn min(arr1[0], arr2[0]);\n\t}\n\t\n\tlong i = min(k/2, n1);\n\tlong j = min(k/2, n2);\n\t\n\tif (arr1[i-1] > arr2[j-1]) \n\t{\n\t\treturn find_kth(arr1, arr2[j..$], k-j);\n\t}\n\telse \n\t{\n\t\treturn find_kth(arr1[i..$], arr2, k-i);\n\t}\n}",
    "{\n\tif (k > arr1.length + arr2.length) \n\t{\n\t\treturn -1;\n\t}\n\t\n\tif (arr1.length == 0) \n\t{\n\t\treturn arr2[k - 1];\n\t}\n\t\n\tif (arr2.length == 0) \n\t{\n\t\treturn arr1[k - 1];\n\t}\n\t\n\tif (k == 1) \n\t{\n\t\treturn min(arr1[0], arr2[0]);\n\t}\n\t\n\tlong i = min(k / 2, arr1.length);\n\tlong j = min(k / 2, arr2.length);\n\t\n\tif (arr1[i - 1] > arr2[j - 1]) \n\t{\n\t\treturn find_kth(arr1, arr2[j..$], k - j);\n\t}\n\telse \n\t{\n\t\treturn find_kth(arr1[i..$], arr2, k - i);\n\t}\n}",
    "{\n\tlong i = 0;\n\tlong j = 0;\n\tlong kth = 0;\n\twhile (i < arr1.length && j < arr2.length)\n\t{\n\t\tif (arr1[i] < arr2[j])\n\t\t{\n\t\t\tkth = arr1[i];\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tkth = arr2[j];\n\t\t\tj++;\n\t\t}\n\t\tif (i + j == k)\n\t\t\tbreak;\n\t}\n\tif (i == arr1.length)\n\t{\n\t\twhile (j < arr2.length)\n\t\t{\n\t\t\tkth = arr2[j];\n\t\t\tj++;\n\t\t\tif (i + j == k)\n\t\t\t\tbreak;\n\t\t}\n\t}\n\telse if (j == arr2.length)\n\t{\n\t\twhile (i < arr1.length)\n\t\t{\n\t\t\tkth = arr1[i];\n\t\t\ti++;\n\t\t\tif (i + j == k)\n\t\t\t\tbreak;\n\t\t}\n\t}\n\treturn kth;\n}",
    "{\n\tlong i = 0;\n\tlong j = 0;\n\tlong kth = 0;\n\twhile (i < arr1.length && j < arr2.length) \n\t{\n\t\tif (arr1[i] < arr2[j]) \n\t\t{\n\t\t\tkth = arr1[i];\n\t\t\ti++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tkth = arr2[j];\n\t\t\tj++;\n\t\t}\n\t\tif (i + j == k) \n\t\t{\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (i == arr1.length) \n\t{\n\t\tkth = arr2[k - i];\n\t}\n\tif (j == arr2.length) \n\t{\n\t\tkth = arr1[k - j];\n\t}\n\treturn kth;\n}",
    "{\n\tlong i = 0;\n\tlong j = 0;\n\tlong kth = 0;\n\twhile(i < arr1.length && j < arr2.length) \n\t{\n\t\tif(arr1[i] < arr2[j]) \n\t\t{\n\t\t\tkth = arr1[i];\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tkth = arr2[j];\n\t\t\tj++;\n\t\t}\n\t\tif(i + j == k) \n\t\t{\n\t\t\tbreak;\n\t\t}\n\t}\n\tif(i == arr1.length) \n\t{\n\t\twhile(j < arr2.length) \n\t\t{\n\t\t\tkth = arr2[j];\n\t\t\tj++;\n\t\t\tif(i + j == k) \n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\telse if(j == arr2.length) \n\t{\n\t\twhile(i < arr1.length) \n\t\t{\n\t\t\tkth = arr1[i];\n\t\t\ti++;\n\t\t\tif(i + j == k) \n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn kth;\n}",
    "{\n\tif (arr1.length == 0) \n\t\treturn arr2[k];\n\tif (arr2.length == 0) \n\t\treturn arr1[k];\n\tif (k == 0) \n\t\treturn min(arr1[0], arr2[0]);\n\t\n\tlong mid1 = arr1.length / 2;\n\tlong mid2 = arr2.length / 2;\n\t\n\tif (mid1 + mid2 < k) \n\t{\n\t\tif (arr1[mid1] > arr2[mid2]) \n\t\t{\n\t\t\treturn find_kth(arr1, arr2[mid2+1..$], k - mid2 - 1);\n\t\t} \n\t\telse \n\t\t{\n\t\t\treturn find_kth(arr1[mid1+1..$], arr2, k - mid1 - 1);\n\t\t}\n\t} \n\telse \n\t{\n\t\tif (arr1[mid1] > arr2[mid2]) \n\t\t{\n\t\t\treturn find_kth(arr1[0..mid1], arr2, k);\n\t\t} \n\t\telse \n\t\t{\n\t\t\treturn find_kth(arr1, arr2[0..mid2], k);\n\t\t}\n\t}\n}",
    "{\n\tlong i = 0;\n\tlong j = 0;\n\tlong kth = 0;\n\twhile(i < arr1.length && j < arr2.length) \n\t{\n\t\tif(arr1[i] < arr2[j]) \n\t\t{\n\t\t\tkth = arr1[i];\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tkth = arr2[j];\n\t\t\tj++;\n\t\t}\n\t\tif(i + j == k) \n\t\t{\n\t\t\treturn kth;\n\t\t}\n\t}\n\twhile(i < arr1.length) \n\t{\n\t\tkth = arr1[i];\n\t\ti++;\n\t\tif(i + j == k) \n\t\t{\n\t\t\treturn kth;\n\t\t}\n\t}\n\twhile(j < arr2.length) \n\t{\n\t\tkth = arr2[j];\n\t\tj++;\n\t\tif(i + j == k) \n\t\t{\n\t\t\treturn kth;\n\t\t}\n\t}\n\treturn kth;\n}",
    "{\n\tlong i = 0, j = 0;\n\twhile(i < arr1.length && j < arr2.length) \n\t{\n\t\tif(arr1[i] < arr2[j]) \n\t\t{\n\t\t\tif(i + j + 1 == k) \n\t\t\t{\n\t\t\t\treturn arr1[i];\n\t\t\t}\n\t\t\ti++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif(i + j + 1 == k) \n\t\t\t{\n\t\t\t\treturn arr2[j];\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\t}\n\tif(i == arr1.length) \n\t{\n\t\treturn arr2[k - arr1.length];\n\t} \n\telse \n\t{\n\t\treturn arr1[k - arr2.length];\n\t}\n}",
    "{\n\tif (arr1.length == 0)\n\t\treturn arr2[k];\n\tif (arr2.length == 0)\n\t\treturn arr1[k];\n\tif (k == 0)\n\t\treturn min(arr1[0], arr2[0]);\n\t\n\tlong mid1 = (arr1.length - 1) / 2;\n\tlong mid2 = (arr2.length - 1) / 2;\n\t\n\tif (mid1 + mid2 < k)\n\t{\n\t\tif (arr1[mid1] > arr2[mid2])\n\t\t\treturn find_kth(arr1, arr2[mid2 + 1 .. $], k - mid2 - 1);\n\t\telse\n\t\t\treturn find_kth(arr1[mid1 + 1 .. $], arr2, k - mid1 - 1);\n\t}\n\telse\n\t{\n\t\tif (arr1[mid1] > arr2[mid2])\n\t\t\treturn find_kth(arr1[0 .. mid1], arr2, k);\n\t\telse\n\t\t\treturn find_kth(arr1, arr2[0 .. mid2], k);\n\t}\n}",
    "{\n\tif (arr1.length == 0)\n\t\treturn arr2[k];\n\tif (arr2.length == 0)\n\t\treturn arr1[k];\n\t\n\tlong mid1 = arr1.length / 2;\n\tlong mid2 = arr2.length / 2;\n\t\n\tif (mid1 + mid2 < k)\n\t{\n\t\tif (arr1[mid1] > arr2[mid2])\n\t\t\treturn find_kth(arr1, arr2[mid2..$], k - mid2);\n\t\telse\n\t\t\treturn find_kth(arr1[mid1..$], arr2, k - mid1);\n\t}\n\telse\n\t{\n\t\tif (arr1[mid1] > arr2[mid2])\n\t\t\treturn find_kth(arr1[0..mid1], arr2, k);\n\t\telse\n\t\t\treturn find_kth(arr1, arr2[0..mid2], k);\n\t}\n}",
    "{\n\tlong n1 = arr1.length;\n\tlong n2 = arr2.length;\n\tif (n1 == 0)\n\t\treturn arr2[k - 1];\n\tif (n2 == 0)\n\t\treturn arr1[k - 1];\n\tif (k == 1)\n\t\treturn min(arr1[0], arr2[0]);\n\tlong i = min(n1, k / 2);\n\tlong j = min(n2, k / 2);\n\tif (arr1[i - 1] > arr2[j - 1])\n\t\treturn find_kth(arr1, arr2[j..$], k - j);\n\telse\n\t\treturn find_kth(arr1[i..$], arr2, k - i);\n}",
    "{\n\tif (arr1.length == 0)\n\t\treturn arr2[k];\n\tif (arr2.length == 0)\n\t\treturn arr1[k];\n\tif (k == 0)\n\t\treturn min(arr1[0], arr2[0]);\n\t\n\tlong mid1 = arr1.length / 2;\n\tlong mid2 = arr2.length / 2;\n\t\n\tif (mid1 + mid2 < k) {\n\t\tif (arr1[mid1] > arr2[mid2])\n\t\t\treturn find_kth(arr1, arr2[mid2+1..$], k - mid2 - 1);\n\t\telse\n\t\t\treturn find_kth(arr1[mid1+1..$], arr2, k - mid1 - 1);\n\t} else {\n\t\tif (arr1[mid1] > arr2[mid2])\n\t\t\treturn find_kth(arr1[0..mid1], arr2, k);\n\t\telse\n\t\t\treturn find_kth(arr1, arr2[0..mid2], k);\n\t}\n}",
    "{\n\tlong n1 = arr1.length;\n\tlong n2 = arr2.length;\n\t\n\tif (n1 == 0)\n\t\treturn arr2[k - 1];\n\tif (n2 == 0)\n\t\treturn arr1[k - 1];\n\t\n\tif (k == 1)\n\t\treturn min(arr1[0], arr2[0]);\n\t\n\tlong i = min(k / 2, n1);\n\tlong j = min(k / 2, n2);\n\t\n\tif (arr1[i - 1] > arr2[j - 1])\n\t\treturn find_kth(arr1, arr2[j..$], k - j);\n\telse\n\t\treturn find_kth(arr1[i..$], arr2, k - i);\n}",
    "{\n\tlong[] arr = new long[arr1.length + arr2.length];\n\tlong i = 0, j = 0;\n\twhile (i < arr1.length && j < arr2.length)\n\t{\n\t\tif (arr1[i] < arr2[j])\n\t\t{\n\t\t\tarr[i + j] = arr1[i];\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tarr[i + j] = arr2[j];\n\t\t\tj++;\n\t\t}\n\t}\n\twhile (i < arr1.length)\n\t{\n\t\tarr[i + j] = arr1[i];\n\t\ti++;\n\t}\n\twhile (j < arr2.length)\n\t{\n\t\tarr[i + j] = arr2[j];\n\t\tj++;\n\t}\n\treturn arr[k - 1];\n}",
    "{\n\tif (arr1.length == 0) \n\t{\n\t\treturn arr2[k - 1];\n\t}\n\tif (arr2.length == 0) \n\t{\n\t\treturn arr1[k - 1];\n\t}\n\tif (k == 1) \n\t{\n\t\treturn min(arr1[0], arr2[0]);\n\t}\n\tlong i = min(k / 2, arr1.length);\n\tlong j = min(k / 2, arr2.length);\n\tif (arr1[i - 1] > arr2[j - 1]) \n\t{\n\t\treturn find_kth(arr1, arr2[j .. $], k - j);\n\t} \n\telse \n\t{\n\t\treturn find_kth(arr1[i .. $], arr2, k - i);\n\t}\n}",
    "{\n\tif (arr1.length == 0)\n\t\treturn arr2[k];\n\tif (arr2.length == 0)\n\t\treturn arr1[k];\n\tif (k == 0)\n\t\treturn min(arr1[0], arr2[0]);\n\t\n\tlong i = min(k / 2, arr1.length - 1);\n\tlong j = min(k / 2, arr2.length - 1);\n\t\n\tif (arr1[i] > arr2[j])\n\t\treturn find_kth(arr1, arr2[j + 1 .. $], k - j - 1);\n\telse\n\t\treturn find_kth(arr1[i + 1 .. $], arr2, k - i - 1);\n}",
    "{\n\tlong[] arr = new long[$];\n\tlong i = 0;\n\tlong j = 0;\n\tlong count = 0;\n\twhile (i < arr1.length && j < arr2.length) \n\t{\n\t\tif (arr1[i] < arr2[j]) \n\t\t{\n\t\t\tarr[count] = arr1[i];\n\t\t\ti++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tarr[count] = arr2[j];\n\t\t\tj++;\n\t\t}\n\t\tcount++;\n\t}\n\twhile (i < arr1.length) \n\t{\n\t\tarr[count] = arr1[i];\n\t\ti++;\n\t\tcount++;\n\t}\n\twhile (j < arr2.length) \n\t{\n\t\tarr[count] = arr2[j];\n\t\tj++;\n\t\tcount++;\n\t}\n\treturn arr[k - 1];\n}",
    "{\n\tlong i = 0;\n\tlong j = 0;\n\tlong k_th = 0;\n\twhile (i < arr1.length && j < arr2.length) \n\t{\n\t\tif (arr1[i] < arr2[j]) \n\t\t{\n\t\t\tk_th = arr1[i];\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tk_th = arr2[j];\n\t\t\tj++;\n\t\t}\n\t\tif (i + j == k) \n\t\t{\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (i + j < k) \n\t{\n\t\tif (i == arr1.length) \n\t\t{\n\t\t\tk_th = arr2[j + k - i - j];\n\t\t}\n\t\telse \n\t\t{\n\t\t\tk_th = arr1[i + k - i - j];\n\t\t}\n\t}\n\treturn k_th;\n}",
    "{\n\tlong[] arr = new long[arr1.length + arr2.length];\n\tlong i = 0;\n\tlong j = 0;\n\tlong kk = 0;\n\twhile (i < arr1.length && j < arr2.length) \n\t{\n\t\tif (arr1[i] < arr2[j]) \n\t\t{\n\t\t\tarr[kk] = arr1[i];\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tarr[kk] = arr2[j];\n\t\t\tj++;\n\t\t}\n\t\tkk++;\n\t}\n\twhile (i < arr1.length) \n\t{\n\t\tarr[kk] = arr1[i];\n\t\ti++;\n\t\tkk++;\n\t}\n\twhile (j < arr2.length) \n\t{\n\t\tarr[kk] = arr2[j];\n\t\tj++;\n\t\tkk++;\n\t}\n\treturn arr[k - 1];\n}",
    "{\n\tlong i = 0;\n\tlong j = 0;\n\tlong m = arr1.length;\n\tlong n = arr2.length;\n\t\n\twhile (i < m && j < n) \n\t{\n\t\tif (arr1[i] < arr2[j]) \n\t\t{\n\t\t\tif (i + j == k - 1) \n\t\t\t{\n\t\t\t\treturn arr1[i];\n\t\t\t}\n\t\t\ti++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (i + j == k - 1) \n\t\t\t{\n\t\t\t\treturn arr2[j];\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\t}\n\t\n\tif (i < m) \n\t{\n\t\treturn arr1[k - j - 1];\n\t}\n\telse \n\t{\n\t\treturn arr2[k - i - 1];\n\t}\n}",
    "{\n\tlong i = 0;\n\tlong j = 0;\n\tlong kth = 0;\n\twhile (i < arr1.length && j < arr2.length)\n\t{\n\t\tif (arr1[i] < arr2[j])\n\t\t{\n\t\t\tkth = arr1[i];\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tkth = arr2[j];\n\t\t\tj++;\n\t\t}\n\t\tif (i + j == k)\n\t\t{\n\t\t\treturn kth;\n\t\t}\n\t}\n\twhile (i < arr1.length)\n\t{\n\t\tkth = arr1[i];\n\t\ti++;\n\t\tif (i + j == k)\n\t\t{\n\t\t\treturn kth;\n\t\t}\n\t}\n\twhile (j < arr2.length)\n\t{\n\t\tkth = arr2[j];\n\t\tj++;\n\t\tif (i + j == k)\n\t\t{\n\t\t\treturn kth;\n\t\t}\n\t}\n\treturn kth;\n}",
    "{\n\tif (arr1.length == 0)\n\t\treturn arr2[k];\n\tif (arr2.length == 0)\n\t\treturn arr1[k];\n\t\n\tlong m = arr1.length;\n\tlong n = arr2.length;\n\t\n\tif (k > m + n)\n\t\treturn -1;\n\t\n\tif (k == m + n)\n\t\treturn max(arr1[m - 1], arr2[n - 1]);\n\t\n\tif (k == m + n - 1)\n\t\treturn min(arr1[m - 1], arr2[n - 1]);\n\t\n\tlong mid1 = m / 2;\n\tlong mid2 = n / 2;\n\t\n\tif (arr1[mid1] <= arr2[mid2])\n\t{\n\t\tif (k > mid1 + mid2)\n\t\t\treturn find_kth(arr1[mid1..$], arr2, k - mid1);\n\t\telse\n\t\t\treturn find_kth(arr1, arr2[0..mid2], k);\n\t}\n\telse\n\t{\n\t\tif (k > mid1 + mid2)\n\t\t\treturn find_kth(arr1, arr2[mid2..$], k - mid2);\n\t\telse\n\t\t\treturn find_kth(arr1[0..mid1], arr2, k);\n\t}\n}",
    "{\n\tlong i = 0;\n\tlong j = 0;\n\tlong kth = 0;\n\twhile (i < arr1.length && j < arr2.length) \n\t{\n\t\tif (arr1[i] < arr2[j]) \n\t\t{\n\t\t\tkth = arr1[i];\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tkth = arr2[j];\n\t\t\tj++;\n\t\t}\n\t\tif (i + j == k) \n\t\t{\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (i + j < k) \n\t{\n\t\tif (i == arr1.length) \n\t\t{\n\t\t\tkth = arr2[k - i - 1];\n\t\t}\n\t\telse \n\t\t{\n\t\t\tkth = arr1[k - j - 1];\n\t\t}\n\t}\n\treturn kth;\n}",
    "{\n\tif (arr1.length == 0)\n\t\treturn arr2[k];\n\tif (arr2.length == 0)\n\t\treturn arr1[k];\n\t\n\tlong mid1 = arr1.length / 2;\n\tlong mid2 = arr2.length / 2;\n\t\n\tif (mid1 + mid2 < k) {\n\t\tif (arr1[mid1] > arr2[mid2])\n\t\t\treturn find_kth(arr1, arr2[mid2+1 .. $], k - mid2 - 1);\n\t\telse\n\t\t\treturn find_kth(arr1[mid1+1 .. $], arr2, k - mid1 - 1);\n\t}\n\telse {\n\t\tif (arr1[mid1] > arr2[mid2])\n\t\t\treturn find_kth(arr1[0 .. mid1], arr2, k);\n\t\telse\n\t\t\treturn find_kth(arr1, arr2[0 .. mid2], k);\n\t}\n}",
    "{\n\tif (arr1.length > arr2.length) \n\t{\n\t\treturn find_kth(arr2, arr1, k);\n\t}\n\tif (arr1.length == 0) \n\t{\n\t\treturn arr2[k - 1];\n\t}\n\tif (k == 1) \n\t{\n\t\treturn min(arr1[0], arr2[0]);\n\t}\n\tlong i = min(arr1.length, k / 2);\n\tlong j = min(arr2.length, k / 2);\n\tif (arr1[i - 1] > arr2[j - 1]) \n\t{\n\t\treturn find_kth(arr1, arr2[j..$], k - j);\n\t} \n\telse \n\t{\n\t\treturn find_kth(arr1[i..$], arr2, k - i);\n\t}\n}",
    "{\n\tlong i = 0;\n\tlong j = 0;\n\tlong k_th = 0;\n\twhile(i < arr1.length && j < arr2.length)\n\t{\n\t\tif(arr1[i] < arr2[j])\n\t\t{\n\t\t\tk_th = arr1[i];\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tk_th = arr2[j];\n\t\t\tj++;\n\t\t}\n\t\t\n\t\tif(i + j == k)\n\t\t\treturn k_th;\n\t}\n\t\n\tif(i < arr1.length)\n\t{\n\t\twhile(i < arr1.length)\n\t\t{\n\t\t\tk_th = arr1[i];\n\t\t\ti++;\n\t\t\tif(i + j == k)\n\t\t\t\treturn k_th;\n\t\t}\n\t}\n\t\n\tif(j < arr2.length)\n\t{\n\t\twhile(j < arr2.length)\n\t\t{\n\t\t\tk_th = arr2[j];\n\t\t\tj++;\n\t\t\tif(i + j == k)\n\t\t\t\treturn k_th;\n\t\t}\n\t}\n\t\n\treturn k_th;\n}",
    "{\n\tif (arr1.length == 0)\n\t\treturn arr2[k];\n\tif (arr2.length == 0)\n\t\treturn arr1[k];\n\t\n\tif (k == 0)\n\t\treturn min(arr1[0], arr2[0]);\n\t\n\tlong mid1 = min(k / 2, arr1.length - 1);\n\tlong mid2 = min(k / 2, arr2.length - 1);\n\t\n\tif (arr1[mid1] < arr2[mid2])\n\t\treturn find_kth(arr1[mid1..$], arr2, k - mid1);\n\telse\n\t\treturn find_kth(arr1, arr2[mid2..$], k - mid2);\n}",
    "{\n\tlong i = 0;\n\tlong j = 0;\n\tlong kth = 0;\n\twhile (i < arr1.length && j < arr2.length) \n\t{\n\t\tif (arr1[i] < arr2[j]) \n\t\t{\n\t\t\tkth = arr1[i];\n\t\t\ti++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tkth = arr2[j];\n\t\t\tj++;\n\t\t}\n\t\tif (i + j == k) \n\t\t{\n\t\t\treturn kth;\n\t\t}\n\t}\n\twhile (i < arr1.length) \n\t{\n\t\tkth = arr1[i];\n\t\ti++;\n\t\tif (i + j == k) \n\t\t{\n\t\t\treturn kth;\n\t\t}\n\t}\n\twhile (j < arr2.length) \n\t{\n\t\tkth = arr2[j];\n\t\tj++;\n\t\tif (i + j == k) \n\t\t{\n\t\t\treturn kth;\n\t\t}\n\t}\n\treturn kth;\n}",
    "{\n\tlong i = 0;\n\tlong j = 0;\n\tlong kth = 0;\n\twhile (i < arr1.length && j < arr2.length) \n\t{\n\t\tif (arr1[i] < arr2[j]) \n\t\t{\n\t\t\tkth = arr1[i];\n\t\t\ti++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tkth = arr2[j];\n\t\t\tj++;\n\t\t}\n\t\tif (i + j == k) \n\t\t{\n\t\t\treturn kth;\n\t\t}\n\t}\n\tif (i == arr1.length) \n\t{\n\t\treturn arr2[k - i];\n\t}\n\telse \n\t{\n\t\treturn arr1[k - j];\n\t}\n}",
    "{\n\tif (arr1.length == 0)\n\t\treturn arr2[k - 1];\n\tif (arr2.length == 0)\n\t\treturn arr1[k - 1];\n\tif (k == 1)\n\t\treturn min(arr1[0], arr2[0]);\n\t\n\tlong a = min(arr1.length, k / 2);\n\tlong b = min(arr2.length, k / 2);\n\t\n\tif (arr1[a - 1] < arr2[b - 1])\n\t\treturn find_kth(arr1[a .. $], arr2, k - a);\n\telse\n\t\treturn find_kth(arr1, arr2[b .. $], k - b);\n}",
    "{\n\tif (arr1.length == 0)\n\t\treturn arr2[k];\n\tif (arr2.length == 0)\n\t\treturn arr1[k];\n\t\n\tlong mid1 = arr1.length / 2;\n\tlong mid2 = arr2.length / 2;\n\t\n\tif (mid1 + mid2 < k) {\n\t\tif (arr1[mid1] > arr2[mid2])\n\t\t\treturn find_kth(arr1, arr2[mid2..$], k - mid2);\n\t\telse\n\t\t\treturn find_kth(arr1[mid1..$], arr2, k - mid1);\n\t} else {\n\t\tif (arr1[mid1] > arr2[mid2])\n\t\t\treturn find_kth(arr1[0..mid1], arr2, k);\n\t\telse\n\t\t\treturn find_kth(arr1, arr2[0..mid2], k);\n\t}\n}",
    "{\n\tif (arr1.length == 0)\n\t\treturn arr2[k];\n\tif (arr2.length == 0)\n\t\treturn arr1[k];\n\tif (k == 0)\n\t\treturn min(arr1[0], arr2[0]);\n\t\n\tlong mid1 = arr1.length / 2;\n\tlong mid2 = arr2.length / 2;\n\t\n\tif (mid1 + mid2 < k) {\n\t\tif (arr1[mid1] > arr2[mid2])\n\t\t\treturn find_kth(arr1, arr2[mid2 + 1 .. $], k - mid2 - 1);\n\t\telse\n\t\t\treturn find_kth(arr1[mid1 + 1 .. $], arr2, k - mid1 - 1);\n\t}\n\telse {\n\t\tif (arr1[mid1] > arr2[mid2])\n\t\t\treturn find_kth(arr1[0 .. mid1], arr2, k);\n\t\telse\n\t\t\treturn find_kth(arr1, arr2[0 .. mid2], k);\n\t}\n}",
    "{\n\tlong[] arr = arr1.dup;\n\tarr ~= arr2;\n\tarr.sort;\n\treturn arr[k];\n}",
    "{\n\tlong[] arr = new long[arr1.length + arr2.length];\n\tlong i = 0;\n\tlong j = 0;\n\tlong kk = 0;\n\twhile(i < arr1.length && j < arr2.length) \n\t{\n\t\tif(arr1[i] < arr2[j]) \n\t\t{\n\t\t\tarr[kk] = arr1[i];\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tarr[kk] = arr2[j];\n\t\t\tj++;\n\t\t}\n\t\tkk++;\n\t}\n\twhile(i < arr1.length) \n\t{\n\t\tarr[kk] = arr1[i];\n\t\ti++;\n\t\tkk++;\n\t}\n\twhile(j < arr2.length) \n\t{\n\t\tarr[kk] = arr2[j];\n\t\tj++;\n\t\tkk++;\n\t}\n\treturn arr[k-1];\n}",
    "{\n\tif (arr1.length == 0)\n\t\treturn arr2[k];\n\tif (arr2.length == 0)\n\t\treturn arr1[k];\n\t\n\tlong mid1 = arr1.length / 2;\n\tlong mid2 = arr2.length / 2;\n\t\n\tif (mid1 + mid2 < k) {\n\t\tif (arr1[mid1] > arr2[mid2]) {\n\t\t\treturn find_kth(arr1, arr2[mid2..$], k - mid2);\n\t\t} else {\n\t\t\treturn find_kth(arr1[mid1..$], arr2, k - mid1);\n\t\t}\n\t} else {\n\t\tif (arr1[mid1] > arr2[mid2]) {\n\t\t\treturn find_kth(arr1[0..mid1], arr2, k);\n\t\t} else {\n\t\t\treturn find_kth(arr1, arr2[0..mid2], k);\n\t\t}\n\t}\n}",
    "{\n\tif (arr1.length == 0)\n\t\treturn arr2[k];\n\tif (arr2.length == 0)\n\t\treturn arr1[k];\n\tif (k == 0)\n\t\treturn min(arr1[0], arr2[0]);\n\t\n\tlong mid1 = arr1.length / 2;\n\tlong mid2 = arr2.length / 2;\n\t\n\tif (mid1 + mid2 < k) {\n\t\tif (arr1[mid1] > arr2[mid2])\n\t\t\treturn find_kth(arr1, arr2[mid2 + 1 .. $], k - mid2 - 1);\n\t\telse\n\t\t\treturn find_kth(arr1[mid1 + 1 .. $], arr2, k - mid1 - 1);\n\t} else {\n\t\tif (arr1[mid1] > arr2[mid2])\n\t\t\treturn find_kth(arr1[0 .. mid1], arr2, k);\n\t\telse\n\t\t\treturn find_kth(arr1, arr2[0 .. mid2], k);\n\t}\n}",
    "{\n\tif (arr1.length == 0)\n\t\treturn arr2[k];\n\tif (arr2.length == 0)\n\t\treturn arr1[k];\n\tif (k == 0)\n\t\treturn min(arr1[0], arr2[0]);\n\t\n\tlong mid1 = arr1.length / 2;\n\tlong mid2 = arr2.length / 2;\n\t\n\tif (mid1 + mid2 < k) {\n\t\tif (arr1[mid1] > arr2[mid2])\n\t\t\treturn find_kth(arr1, arr2[mid2 + 1 .. $], k - mid2 - 1);\n\t\telse\n\t\t\treturn find_kth(arr1[mid1 + 1 .. $], arr2, k - mid1 - 1);\n\t} else {\n\t\tif (arr1[mid1] > arr2[mid2])\n\t\t\treturn find_kth(arr1[0 .. mid1], arr2, k);\n\t\telse\n\t\t\treturn find_kth(arr1, arr2[0 .. mid2], k);\n\t}\n}",
    "{\n\tlong i = 0;\n\tlong j = 0;\n\tlong kth = 0;\n\twhile (i < arr1.length && j < arr2.length) \n\t{\n\t\tif (arr1[i] < arr2[j]) \n\t\t{\n\t\t\tkth = arr1[i];\n\t\t\ti++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tkth = arr2[j];\n\t\t\tj++;\n\t\t}\n\t\tif (i + j == k) \n\t\t{\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (i == arr1.length) \n\t{\n\t\twhile (j < arr2.length) \n\t\t{\n\t\t\tkth = arr2[j];\n\t\t\tj++;\n\t\t\tif (i + j == k) \n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\telse if (j == arr2.length) \n\t{\n\t\twhile (i < arr1.length) \n\t\t{\n\t\t\tkth = arr1[i];\n\t\t\ti++;\n\t\t\tif (i + j == k) \n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn kth;\n}"
  ]
}