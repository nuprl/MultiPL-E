{
  "name": "mbpp_597_find_kth",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find kth element from the given two sorted arrays.\n\t\n*/\nlong find_kth(long[] arr1, long[] arr2, long k) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_597_find_kth.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = find_kth;\n\n    assert(candidate([2L, 3L, 6L, 7L, 9L], [1L, 4L, 8L, 10L], 5L) == 6L);\n    assert(candidate([100L, 112L, 256L, 349L, 770L], [72L, 86L, 113L, 119L, 265L, 445L, 892L], 7L) == 256L);\n    assert(candidate([3L, 4L, 7L, 8L, 10L], [2L, 5L, 9L, 11L], 6L) == 8L);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tlong i = 0;\n\tlong j = 0;\n\tlong kth = 0;\n\twhile (i < arr1.length && j < arr2.length) \n\t{\n\t\tif (arr1[i] < arr2[j]) \n\t\t{\n\t\t\tkth = arr1[i];\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tkth = arr2[j];\n\t\t\tj++;\n\t\t}\n\t\tif (i + j == k) \n\t\t{\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (i == arr1.length) \n\t{\n\t\twhile (j < arr2.length) \n\t\t{\n\t\t\tkth = arr2[j];\n\t\t\tj++;\n\t\t\tif (i + j == k) \n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tif (j == arr2.length) \n\t{\n\t\twhile (i < arr1.length) \n\t\t{\n\t\t\tkth = arr1[i];\n\t\t\ti++;\n\t\t\tif (i + j == k) \n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn kth;\n}",
    "{\n\tif (arr1.length == 0)\n\t\treturn arr2[k];\n\tif (arr2.length == 0)\n\t\treturn arr1[k];\n\t\n\tif (k == 0)\n\t\treturn min(arr1[0], arr2[0]);\n\t\n\tlong i = min(arr1.length - 1, k / 2);\n\tlong j = min(arr2.length - 1, k / 2);\n\t\n\tif (arr1[i] > arr2[j])\n\t\treturn find_kth(arr1, arr2[j + 1 .. $], k - j - 1);\n\telse\n\t\treturn find_kth(arr1[i + 1 .. $], arr2, k - i - 1);\n}",
    "{\n\tlong i = 0;\n\tlong j = 0;\n\t\n\twhile(true)\n\t{\n\t\tif(i == arr1.length)\n\t\t\treturn arr2[j + k - 1];\n\t\tif(j == arr2.length)\n\t\t\treturn arr1[i + k - 1];\n\t\tif(k == 1)\n\t\t\treturn min(arr1[i], arr2[j]);\n\t\t\n\t\tlong mid1 = min(i + k / 2 - 1, arr1.length - 1);\n\t\tlong mid2 = min(j + k / 2 - 1, arr2.length - 1);\n\t\t\n\t\tif(arr1[mid1] <= arr2[mid2])\n\t\t{\n\t\t\tk -= mid1 - i + 1;\n\t\t\ti = mid1 + 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tk -= mid2 - j + 1;\n\t\t\tj = mid2 + 1;\n\t\t}\n\t}\n}",
    "{\n\tlong i = 0, j = 0;\n\twhile(i < arr1.length && j < arr2.length) \n\t{\n\t\tif(arr1[i] < arr2[j]) \n\t\t{\n\t\t\tif(i + j == k) \n\t\t\t{\n\t\t\t\treturn arr1[i];\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tif(i + j == k) \n\t\t\t{\n\t\t\t\treturn arr2[j];\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\t}\n\tif(i == arr1.length) \n\t{\n\t\treturn arr2[k - i];\n\t}\n\treturn arr1[k - j];\n}",
    "{\n\tif (arr1.length == 0) return arr2[k - 1];\n\tif (arr2.length == 0) return arr1[k - 1];\n\tif (k == 1) return min(arr1[0], arr2[0]);\n\t\n\tlong i = min(k / 2, arr1.length);\n\tlong j = min(k / 2, arr2.length);\n\t\n\tif (arr1[i - 1] > arr2[j - 1])\n\t{\n\t\treturn find_kth(arr1, arr2[j..$], k - j);\n\t}\n\telse\n\t{\n\t\treturn find_kth(arr1[i..$], arr2, k - i);\n\t}\n}",
    "{\n\tif (arr1.length == 0)\n\t\treturn arr2[k];\n\tif (arr2.length == 0)\n\t\treturn arr1[k];\n\t\n\tlong mid1 = arr1.length / 2;\n\tlong mid2 = arr2.length / 2;\n\t\n\tif (mid1 + mid2 < k) {\n\t\tif (arr1[mid1] > arr2[mid2])\n\t\t\treturn find_kth(arr1, arr2[mid2+1..$], k - mid2 - 1);\n\t\telse\n\t\t\treturn find_kth(arr1[mid1+1..$], arr2, k - mid1 - 1);\n\t}\n\telse {\n\t\tif (arr1[mid1] > arr2[mid2])\n\t\t\treturn find_kth(arr1[0..mid1], arr2, k);\n\t\telse\n\t\t\treturn find_kth(arr1, arr2[0..mid2], k);\n\t}\n}",
    "{\n\tif (arr1.length == 0)\n\t\treturn arr2[k];\n\tif (arr2.length == 0)\n\t\treturn arr1[k];\n\tif (k == 0)\n\t\treturn min(arr1[0], arr2[0]);\n\t\n\tlong mid1 = arr1.length / 2;\n\tlong mid2 = arr2.length / 2;\n\t\n\tif (mid1 + mid2 < k) {\n\t\tif (arr1[mid1] > arr2[mid2])\n\t\t\treturn find_kth(arr1, arr2[mid2 + 1 .. $], k - mid2 - 1);\n\t\telse\n\t\t\treturn find_kth(arr1[mid1 + 1 .. $], arr2, k - mid1 - 1);\n\t} else {\n\t\tif (arr1[mid1] > arr2[mid2])\n\t\t\treturn find_kth(arr1[0 .. mid1], arr2, k);\n\t\telse\n\t\t\treturn find_kth(arr1, arr2[0 .. mid2], k);\n\t}\n}",
    "{\n\tif(arr1.length == 0)\n\t\treturn arr2[k-1];\n\tif(arr2.length == 0)\n\t\treturn arr1[k-1];\n\tif(k == 1)\n\t\treturn min(arr1[0], arr2[0]);\n\t\n\tlong a = min(arr1.length, k/2);\n\tlong b = min(arr2.length, k/2);\n\t\n\tif(arr1[a-1] < arr2[b-1])\n\t\treturn find_kth(arr1[a..$], arr2, k-a);\n\telse\n\t\treturn find_kth(arr1, arr2[b..$], k-b);\n}",
    "{\n\tlong i = 0;\n\tlong j = 0;\n\tlong kth = 0;\n\twhile(i < arr1.length && j < arr2.length) \n\t{\n\t\tif(arr1[i] < arr2[j]) \n\t\t{\n\t\t\tkth = arr1[i];\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tkth = arr2[j];\n\t\t\tj++;\n\t\t}\n\t\tif(i + j == k) \n\t\t{\n\t\t\tbreak;\n\t\t}\n\t}\n\tif(i == arr1.length) \n\t{\n\t\twhile(j < arr2.length) \n\t\t{\n\t\t\tkth = arr2[j];\n\t\t\tj++;\n\t\t\tif(i + j == k) \n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\telse if(j == arr2.length) \n\t{\n\t\twhile(i < arr1.length) \n\t\t{\n\t\t\tkth = arr1[i];\n\t\t\ti++;\n\t\t\tif(i + j == k) \n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn kth;\n}",
    "{\n\tlong[] arr = new long[arr1.length + arr2.length];\n\tlong i = 0;\n\tlong j = 0;\n\tlong index = 0;\n\twhile (i < arr1.length && j < arr2.length) \n\t{\n\t\tif (arr1[i] < arr2[j]) \n\t\t{\n\t\t\tarr[index] = arr1[i];\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tarr[index] = arr2[j];\n\t\t\tj++;\n\t\t}\n\t\tindex++;\n\t}\n\twhile (i < arr1.length) \n\t{\n\t\tarr[index] = arr1[i];\n\t\ti++;\n\t\tindex++;\n\t}\n\twhile (j < arr2.length) \n\t{\n\t\tarr[index] = arr2[j];\n\t\tj++;\n\t\tindex++;\n\t}\n\treturn arr[k - 1];\n}",
    "{\n\tlong i = 0;\n\tlong j = 0;\n\tlong kth = 0;\n\twhile (i < arr1.length && j < arr2.length) \n\t{\n\t\tif (arr1[i] < arr2[j]) \n\t\t{\n\t\t\tkth = arr1[i];\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tkth = arr2[j];\n\t\t\tj++;\n\t\t}\n\t\tif (i + j == k)\n\t\t\treturn kth;\n\t}\n\twhile (i < arr1.length) \n\t{\n\t\tkth = arr1[i];\n\t\ti++;\n\t\tif (i + j == k)\n\t\t\treturn kth;\n\t}\n\twhile (j < arr2.length) \n\t{\n\t\tkth = arr2[j];\n\t\tj++;\n\t\tif (i + j == k)\n\t\t\treturn kth;\n\t}\n\treturn kth;\n}",
    "{\n\tif (arr1.length == 0)\n\t\treturn arr2[k];\n\tif (arr2.length == 0)\n\t\treturn arr1[k];\n\tif (k == 0)\n\t\treturn min(arr1[0], arr2[0]);\n\t\n\tlong i = min(arr1.length - 1, k / 2);\n\tlong j = min(arr2.length - 1, k / 2);\n\t\n\tif (arr1[i] > arr2[j])\n\t\treturn find_kth(arr1, arr2[j + 1 .. $], k - j - 1);\n\telse\n\t\treturn find_kth(arr1[i + 1 .. $], arr2, k - i - 1);\n}",
    "{\n\tlong i = 0;\n\tlong j = 0;\n\tlong kth = 0;\n\twhile (i < arr1.length && j < arr2.length)\n\t{\n\t\tif (arr1[i] < arr2[j])\n\t\t{\n\t\t\tkth = arr1[i];\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tkth = arr2[j];\n\t\t\tj++;\n\t\t}\n\t\tif (i + j == k)\n\t\t\tbreak;\n\t}\n\tif (i == arr1.length)\n\t{\n\t\twhile (j < arr2.length)\n\t\t{\n\t\t\tkth = arr2[j];\n\t\t\tj++;\n\t\t\tif (i + j == k)\n\t\t\t\tbreak;\n\t\t}\n\t}\n\telse if (j == arr2.length)\n\t{\n\t\twhile (i < arr1.length)\n\t\t{\n\t\t\tkth = arr1[i];\n\t\t\ti++;\n\t\t\tif (i + j == k)\n\t\t\t\tbreak;\n\t\t}\n\t}\n\treturn kth;\n}",
    "{\n\tif (arr1.length == 0)\n\t\treturn arr2[k];\n\tif (arr2.length == 0)\n\t\treturn arr1[k];\n\t\n\tlong mid1 = arr1.length / 2;\n\tlong mid2 = arr2.length / 2;\n\t\n\tif (mid1 + mid2 < k)\n\t{\n\t\tif (arr1[mid1] > arr2[mid2])\n\t\t\treturn find_kth(arr1, arr2[mid2..$], k - mid2);\n\t\telse\n\t\t\treturn find_kth(arr1[mid1..$], arr2, k - mid1);\n\t}\n\telse\n\t{\n\t\tif (arr1[mid1] > arr2[mid2])\n\t\t\treturn find_kth(arr1[0..mid1], arr2, k);\n\t\telse\n\t\t\treturn find_kth(arr1, arr2[0..mid2], k);\n\t}\n}",
    "{\n\tlong i = 0;\n\tlong j = 0;\n\tlong kth = 0;\n\twhile (i < arr1.length && j < arr2.length) \n\t{\n\t\tif (arr1[i] < arr2[j]) \n\t\t{\n\t\t\tkth = arr1[i];\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tkth = arr2[j];\n\t\t\tj++;\n\t\t}\n\t\tif (i + j == k) \n\t\t{\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (i == arr1.length) \n\t{\n\t\twhile (j < arr2.length) \n\t\t{\n\t\t\tkth = arr2[j];\n\t\t\tj++;\n\t\t\tif (i + j == k) \n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\telse if (j == arr2.length) \n\t{\n\t\twhile (i < arr1.length) \n\t\t{\n\t\t\tkth = arr1[i];\n\t\t\ti++;\n\t\t\tif (i + j == k) \n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn kth;\n}",
    "{\n\tlong i = 0;\n\tlong j = 0;\n\tlong m = arr1.length;\n\tlong n = arr2.length;\n\twhile (i < m && j < n) \n\t{\n\t\tif (arr1[i] < arr2[j]) \n\t\t{\n\t\t\tif (i + j == k - 1) \n\t\t\t{\n\t\t\t\treturn arr1[i];\n\t\t\t}\n\t\t\ti++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (i + j == k - 1) \n\t\t\t{\n\t\t\t\treturn arr2[j];\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\t}\n\tif (i < m) \n\t{\n\t\treturn arr1[k - j - 1];\n\t}\n\tif (j < n) \n\t{\n\t\treturn arr2[k - i - 1];\n\t}\n\treturn -1;\n}",
    "{\n\tlong i = 0;\n\tlong j = 0;\n\tlong kth = 0;\n\twhile(i < arr1.length && j < arr2.length) \n\t{\n\t\tif(arr1[i] < arr2[j]) \n\t\t{\n\t\t\tkth = arr1[i];\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tkth = arr2[j];\n\t\t\tj++;\n\t\t}\n\t\tif(i + j == k)\n\t\t\tbreak;\n\t}\n\tif(i < arr1.length) \n\t{\n\t\twhile(i < arr1.length) \n\t\t{\n\t\t\tkth = arr1[i];\n\t\t\ti++;\n\t\t\tif(i + j == k)\n\t\t\t\tbreak;\n\t\t}\n\t}\n\telse if(j < arr2.length) \n\t{\n\t\twhile(j < arr2.length) \n\t\t{\n\t\t\tkth = arr2[j];\n\t\t\tj++;\n\t\t\tif(i + j == k)\n\t\t\t\tbreak;\n\t\t}\n\t}\n\treturn kth;\n}",
    "{\n\tif (arr1.length == 0) \n\t{\n\t\treturn arr2[k - 1];\n\t}\n\tif (arr2.length == 0) \n\t{\n\t\treturn arr1[k - 1];\n\t}\n\tif (k == 1) \n\t{\n\t\treturn min(arr1[0], arr2[0]);\n\t}\n\tlong i = min(k / 2, arr1.length);\n\tlong j = min(k / 2, arr2.length);\n\tif (arr1[i - 1] > arr2[j - 1]) \n\t{\n\t\treturn find_kth(arr1, arr2[j..$], k - j);\n\t}\n\telse \n\t{\n\t\treturn find_kth(arr1[i..$], arr2, k - i);\n\t}\n}",
    "{\n\tif (arr1.length == 0)\n\t\treturn arr2[k];\n\tif (arr2.length == 0)\n\t\treturn arr1[k];\n\tif (k == 0)\n\t\treturn min(arr1[0], arr2[0]);\n\t\n\tlong mid1 = arr1.length / 2;\n\tlong mid2 = arr2.length / 2;\n\t\n\tif (mid1 + mid2 < k) {\n\t\tif (arr1[mid1] > arr2[mid2]) {\n\t\t\treturn find_kth(arr1, arr2[mid2 + 1 .. $], k - mid2 - 1);\n\t\t} else {\n\t\t\treturn find_kth(arr1[mid1 + 1 .. $], arr2, k - mid1 - 1);\n\t\t}\n\t} else {\n\t\tif (arr1[mid1] > arr2[mid2]) {\n\t\t\treturn find_kth(arr1[0 .. mid1], arr2, k);\n\t\t} else {\n\t\t\treturn find_kth(arr1, arr2[0 .. mid2], k);\n\t\t}\n\t}\n}",
    "{\n\tlong i = 0;\n\tlong j = 0;\n\tlong kth = 0;\n\twhile(i < arr1.length && j < arr2.length)\n\t{\n\t\tif(arr1[i] < arr2[j])\n\t\t{\n\t\t\tkth = arr1[i];\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tkth = arr2[j];\n\t\t\tj++;\n\t\t}\n\t\t\n\t\tif(i + j == k)\n\t\t\treturn kth;\n\t}\n\t\n\twhile(i < arr1.length)\n\t{\n\t\tkth = arr1[i];\n\t\ti++;\n\t\tif(i + j == k)\n\t\t\treturn kth;\n\t}\n\t\n\twhile(j < arr2.length)\n\t{\n\t\tkth = arr2[j];\n\t\tj++;\n\t\tif(i + j == k)\n\t\t\treturn kth;\n\t}\n\t\n\treturn kth;\n}"
  ]
}