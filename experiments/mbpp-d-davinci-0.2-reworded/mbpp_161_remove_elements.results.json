{
  "name": "mbpp_161_remove_elements",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_161_remove_elements.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] list3;\n\tforeach(i; list1)\n\t{\n\t\tif(list2.canFind(i))\n\t\t{\n\t\t\tlist3 ~= i;\n\t\t}\n\t}\n\treturn list3;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517162,
      "stdout": "",
      "stderr": "/tmp/tmp8q6e0njw.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8q6e0njw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result;\n\tforeach(elem; list1)\n\t{\n\t\tif(!list2.canFind(elem))\n\t\t{\n\t\t\tresult ~= elem;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517162,
      "stdout": "",
      "stderr": "/tmp/tmpad6khf53.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpad6khf53.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result = new long[0];\n\tforeach(long x; list1)\n\t{\n\t\tif(!list2.canFind(x))\n\t\t{\n\t\t\tresult ~= x;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517162,
      "stdout": "",
      "stderr": "/tmp/tmp77wrf3fa.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp77wrf3fa.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result = new long[0];\n\tforeach(i; list1)\n\t{\n\t\tif(!list2.canFind(i))\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517162,
      "stdout": "",
      "stderr": "/tmp/tmpzz9w9z1c.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzz9w9z1c.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result;\n\tforeach(elem; list1)\n\t{\n\t\tif(!list2.canFind(elem))\n\t\t{\n\t\t\tresult ~= elem;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517162,
      "stdout": "",
      "stderr": "/tmp/tmpad6khf53.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpad6khf53.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result = new long[0];\n\tforeach(long i; list1)\n\t{\n\t\tif(list2.canFind(i))\n\t\t\tcontinue;\n\t\tresult ~= i;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517162,
      "stdout": "",
      "stderr": "/tmp/tmp0lxz7zyv.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0lxz7zyv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result = new long[0];\n\tforeach(element; list1)\n\t{\n\t\tif(!list2.canFind(element))\n\t\t{\n\t\t\tresult ~= element;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517162,
      "stdout": "",
      "stderr": "/tmp/tmp5cad5w3g.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5cad5w3g.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result;\n\tforeach(elem; list1)\n\t{\n\t\tif(!list2.canFind(elem))\n\t\t{\n\t\t\tresult ~= elem;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517162,
      "stdout": "",
      "stderr": "/tmp/tmpad6khf53.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpad6khf53.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result;\n\tforeach(element; list1)\n\t{\n\t\tif(element in list2)\n\t\t{\n\t\t\tresult ~= element;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517162,
      "stdout": "",
      "stderr": "/tmp/tmpa0r6qj10.d(13): Error: incompatible types for `(element) in (list2)`: `long` and `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa0r6qj10.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result;\n\tforeach(elem; list1)\n\t{\n\t\tif(!elem in list2)\n\t\t{\n\t\t\tresult ~= elem;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517162,
      "stdout": "",
      "stderr": "/tmp/tmpf94glkrg.d(13): Error: incompatible types for `(!elem) in (list2)`: `bool` and `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf94glkrg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result;\n\tforeach(i; list1)\n\t{\n\t\tif(!list2.canFind(i))\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517162,
      "stdout": "",
      "stderr": "/tmp/tmpgblosclj.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgblosclj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result;\n\tforeach(elem; list1)\n\t{\n\t\tif(!elem in list2)\n\t\t{\n\t\t\tresult ~= elem;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517162,
      "stdout": "",
      "stderr": "/tmp/tmpf94glkrg.d(13): Error: incompatible types for `(!elem) in (list2)`: `bool` and `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf94glkrg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result;\n\tforeach(elem; list1)\n\t{\n\t\tif(elem in list2)\n\t\t{\n\t\t\tresult ~= elem;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517162,
      "stdout": "",
      "stderr": "/tmp/tmpn7hz398x.d(13): Error: incompatible types for `(elem) in (list2)`: `long` and `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn7hz398x.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result = new long[];\n\tforeach(long i; list1)\n\t{\n\t\tif(!list2.canFind(i))\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517162,
      "stdout": "",
      "stderr": "/tmp/tmp0pvvi4ho.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\n/tmp/tmp0pvvi4ho.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0pvvi4ho.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result = new long[];\n\tforeach(i; list1)\n\t{\n\t\tif(list2.canFind(i))\n\t\t{\n\t\t\tcontinue;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517162,
      "stdout": "",
      "stderr": "/tmp/tmph0e4hbhy.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\n/tmp/tmph0e4hbhy.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph0e4hbhy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result;\n\tforeach(element; list1)\n\t{\n\t\tif(element in list2)\n\t\t{\n\t\t\tresult ~= element;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517162,
      "stdout": "",
      "stderr": "/tmp/tmpa0r6qj10.d(13): Error: incompatible types for `(element) in (list2)`: `long` and `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa0r6qj10.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result;\n\tforeach(elem; list1)\n\t{\n\t\tif(!list2.canFind(elem))\n\t\t{\n\t\t\tresult ~= elem;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517162,
      "stdout": "",
      "stderr": "/tmp/tmpad6khf53.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpad6khf53.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result;\n\tforeach(i; list1)\n\t{\n\t\tif(list2.canFind(i))\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517162,
      "stdout": "",
      "stderr": "/tmp/tmp2s8c09gt.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2s8c09gt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result;\n\tforeach(element; list1)\n\t{\n\t\tif(element in list2)\n\t\t{\n\t\t\tresult ~= element;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517162,
      "stdout": "",
      "stderr": "/tmp/tmpa0r6qj10.d(13): Error: incompatible types for `(element) in (list2)`: `long` and `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa0r6qj10.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result;\n\tforeach(i; list1)\n\t{\n\t\tif(list2.canFind(i))\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517162,
      "stdout": "",
      "stderr": "/tmp/tmp2s8c09gt.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2s8c09gt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] list3;\n\tforeach(i; list2)\n\t{\n\t\tlist3 = list1.remove(i);\n\t}\n\treturn list3;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666124228,
      "stdout": "",
      "stderr": "/tmp/tmpbwxt5idi.d(13): Error: no property `remove` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbwxt5idi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result;\n\tforeach(elem; list1)\n\t{\n\t\tif(!list2.canFind(elem))\n\t\t{\n\t\t\tresult ~= elem;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517162,
      "stdout": "",
      "stderr": "/tmp/tmpad6khf53.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpad6khf53.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] list3;\n\tforeach(i; list1)\n\t{\n\t\tif(i in list2)\n\t\t{\n\t\t\tlist3 ~= i;\n\t\t}\n\t}\n\treturn list3;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666124228,
      "stdout": "",
      "stderr": "/tmp/tmpwako__03.d(13): Error: incompatible types for `(i) in (list2)`: `long` and `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwako__03.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result = new long[0];\n\tforeach(i; list1)\n\t{\n\t\tif(!list2.canFind(i))\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517162,
      "stdout": "",
      "stderr": "/tmp/tmpzz9w9z1c.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzz9w9z1c.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] list3;\n\tforeach(i; list1)\n\t{\n\t\tif(list2.canFind(i))\n\t\t{\n\t\t\tlist3 ~= i;\n\t\t}\n\t}\n\treturn list3;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517162,
      "stdout": "",
      "stderr": "/tmp/tmp8q6e0njw.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8q6e0njw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result = new long[];\n\tforeach(elem; list1)\n\t{\n\t\tif(elem in list2)\n\t\t\tcontinue;\n\t\tresult ~= elem;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666124228,
      "stdout": "",
      "stderr": "/tmp/tmps6b789h5.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\n/tmp/tmps6b789h5.d(13): Error: incompatible types for `(elem) in (list2)`: `long` and `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps6b789h5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result = new long[0];\n\tforeach(elem; list1)\n\t{\n\t\tif(!list2.canFind(elem))\n\t\t{\n\t\t\tresult ~= elem;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666124228,
      "stdout": "",
      "stderr": "/tmp/tmpgx7zbwe6.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgx7zbwe6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result = new long[];\n\tforeach(i; list1)\n\t{\n\t\tif(list2.canFind(i))\n\t\t{\n\t\t\tcontinue;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517162,
      "stdout": "",
      "stderr": "/tmp/tmph0e4hbhy.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\n/tmp/tmph0e4hbhy.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph0e4hbhy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result;\n\tforeach(elem; list1)\n\t{\n\t\tif(list2.canFind(elem))\n\t\t{\n\t\t\tresult ~= elem;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666124228,
      "stdout": "",
      "stderr": "/tmp/tmpoj7ca7ft.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoj7ca7ft.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result;\n\tforeach(i; list1)\n\t{\n\t\tif(list2.canFind(i))\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517162,
      "stdout": "",
      "stderr": "/tmp/tmp2s8c09gt.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2s8c09gt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] new_list;\n\tforeach(elem; list1)\n\t{\n\t\tif(elem in list2)\n\t\t{\n\t\t\tnew_list ~= elem;\n\t\t}\n\t}\n\treturn new_list;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666124228,
      "stdout": "",
      "stderr": "/tmp/tmpu3kii668.d(13): Error: incompatible types for `(elem) in (list2)`: `long` and `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu3kii668.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result = new long[list1.length];\n\tlong[] temp = new long[list1.length];\n\tlong[] temp2 = new long[list1.length];\n\tlong[] temp3 = new long[list1.length];\n\tlong[] temp4 = new long[list1.length];\n\tlong[] temp5 = new long[list1.length];\n\tlong[] temp6 = new long[list1.length];\n\tlong[] temp7 = new long[list1.length];\n\tlong[] temp8 = new long[list1.length];\n\tlong[] temp9 = new long[list1.length];\n\tlong[] temp10 = new long[list1.length];\n\tlong[] temp11 = new long[list1.length];\n\tlong[] temp12 = new long[list1.length];\n\tlong[] temp13 = new long[list1.length];\n\tlong[] temp14 = new long[list1.length];\n\tlong[] temp15 = new long[list1.length];\n\tlong[] temp16 = new long[list1.length];\n\tlong[] temp17 = new long[list1.length];\n\tlong[] temp18 = new long[list1.length];\n\tlong[] temp19 = new long[list1.length];\n\tlong[] temp20 = new long[list1.length];\n\tlong[] temp21 = new long[list1.length];\n\tlong[] temp22 = new long[list1.length];\n\tlong[] temp23 = new long[list1.length];\n\tlong[] temp24 = new long[list1.length];\n\tlong[] temp25 = new long[list1.length];\n\tlong[] temp26 = new long[list1.length];\n\tlong[] temp27 = new long[list1.length];\n\tlong[] temp28 = new long[list1.length];\n\tlong[] temp29 = new long[list1.length];\n\tlong[] temp30 = new long[list1.length];\n\tlong[] temp31 = new long[list1.length];\n\tlong[] temp32 = new long[list1.length];\n\tlong[] temp33 = new long[list1.length];\n\t\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666124228,
      "stdout": "",
      "stderr": "/tmp/tmpqzfn7u8q.d(45): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqzfn7u8q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result = new long[list1.length];\n\tint i = 0;\n\tforeach(elem; list1)\n\t{\n\t\tif(!list2.canFind(elem))\n\t\t{\n\t\t\tresult[i] = elem;\n\t\t\ti++;\n\t\t}\n\t}\n\treturn result[0..i];\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666124228,
      "stdout": "",
      "stderr": "/tmp/tmp7vm_951v.d(14): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7vm_951v.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result;\n\tforeach(element; list1)\n\t{\n\t\tif(element in list2)\n\t\t{\n\t\t\tresult ~= element;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517162,
      "stdout": "",
      "stderr": "/tmp/tmpa0r6qj10.d(13): Error: incompatible types for `(element) in (list2)`: `long` and `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa0r6qj10.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] list3 = new long[list1.length];\n\tint j = 0;\n\tforeach(i; list1)\n\t{\n\t\tif(!list2.canFind(i))\n\t\t{\n\t\t\tlist3[j] = i;\n\t\t\tj++;\n\t\t}\n\t}\n\treturn list3[0..j];\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666124228,
      "stdout": "",
      "stderr": "/tmp/tmp0jw6ws45.d(14): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0jw6ws45.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result;\n\tforeach(i; list1)\n\t{\n\t\tif(!list2.canFind(i))\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517162,
      "stdout": "",
      "stderr": "/tmp/tmpgblosclj.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgblosclj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result;\n\tforeach(i; list1)\n\t{\n\t\tif(!list2.canFind(i))\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517162,
      "stdout": "",
      "stderr": "/tmp/tmpgblosclj.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgblosclj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result = new long[list1.length];\n\tint count = 0;\n\tforeach(long i; list1)\n\t{\n\t\tbool found = false;\n\t\tforeach(long j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\tfound = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(!found)\n\t\t{\n\t\t\tresult[count] = i;\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result[0..count];\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666124228,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result;\n\tforeach(e; list1)\n\t{\n\t\tif(e in list2)\n\t\t{\n\t\t\tresult ~= e;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666124228,
      "stdout": "",
      "stderr": "/tmp/tmp_q4qs1xe.d(13): Error: incompatible types for `(e) in (list2)`: `long` and `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_q4qs1xe.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result = new long[list1.length];\n\tint index = 0;\n\tforeach(long i; list1)\n\t{\n\t\tif(!list2.canFind(i))\n\t\t{\n\t\t\tresult[index] = i;\n\t\t\tindex++;\n\t\t}\n\t}\n\treturn result[0..index];\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666124228,
      "stdout": "",
      "stderr": "/tmp/tmp8507kcb4.d(14): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8507kcb4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result = new long[0];\n\tforeach(long i; list1)\n\t{\n\t\tif(list2.canFind(i))\n\t\t\tcontinue;\n\t\tresult ~= i;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517162,
      "stdout": "",
      "stderr": "/tmp/tmp0lxz7zyv.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0lxz7zyv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result = new long[list1.length];\n\tlong[] temp = new long[list1.length];\n\tlong[] temp2 = new long[list1.length];\n\tint j = 0;\n\tint k = 0;\n\tint l = 0;\n\tfor (int i = 0; i < list1.length; i++)\n\t{\n\t\tfor (int m = 0; m < list2.length; m++)\n\t\t{\n\t\t\tif (list1[i] == list2[m])\n\t\t\t{\n\t\t\t\ttemp[j] = list1[i];\n\t\t\t\tj++;\n\t\t\t}\n\t\t}\n\t}\n\tfor (int i = 0; i < list1.length; i++)\n\t{\n\t\tfor (int m = 0; m < temp.length; m++)\n\t\t{\n\t\t\tif (list1[i] == temp[m])\n\t\t\t{\n\t\t\t\ttemp2[k] = list1[i];\n\t\t\t\tk++;\n\t\t\t}\n\t\t}\n\t}\n\tfor (int i = 0; i < list1.length; i++)\n\t{\n\t\tfor (int m = 0; m < temp2.length; m++)\n\t\t{\n\t\t\tif (list1[i] != temp2[m])\n\t\t\t{\n\t\t\t\tresult[l] = list1[i];\n\t\t\t\tl++;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666124228,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp38rpzit5.d(44): Range violation\n----------------\n??:? _d_arrayboundsp [0x42888e]\n??:? long[] tmp38rpzit5.remove_elements(long[], long[]) [0x4280c9]\n??:? void tmp38rpzit5.__unittest_L51_C1() [0x4281f6]\n??:? void tmp38rpzit5.__modtest() [0x428560]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c897]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b72a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309b5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e64]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430941]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b701]\n??:? runModuleUnitTests [0x42c66d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) i",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result = new long[0];\n\tforeach(long i; list1)\n\t{\n\t\tif(list2.canFind(i))\n\t\t{\n\t\t\tcontinue;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666124228,
      "stdout": "",
      "stderr": "/tmp/tmpnqgy0una.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnqgy0una.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result = new long[0];\n\tforeach(long i; list1)\n\t{\n\t\tif(list2.find(i) == -1)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666124228,
      "stdout": "",
      "stderr": "/tmp/tmpji_gg7uf.d(13): Error: no property `find` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpji_gg7uf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result;\n\tforeach(i; list1)\n\t{\n\t\tif(list2.canFind(i))\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517162,
      "stdout": "",
      "stderr": "/tmp/tmp2s8c09gt.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2s8c09gt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result;\n\tforeach(i; list1)\n\t{\n\t\tif(!list2.canFind(i))\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517162,
      "stdout": "",
      "stderr": "/tmp/tmpgblosclj.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgblosclj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result;\n\tforeach(i; list1)\n\t{\n\t\tif(list2.canFind(i))\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517162,
      "stdout": "",
      "stderr": "/tmp/tmp2s8c09gt.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2s8c09gt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result;\n\tforeach(elem; list1)\n\t{\n\t\tif(elem in list2)\n\t\t{\n\t\t\tresult ~= elem;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517162,
      "stdout": "",
      "stderr": "/tmp/tmpn7hz398x.d(13): Error: incompatible types for `(elem) in (list2)`: `long` and `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn7hz398x.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result = new long[];\n\tforeach(element; list1)\n\t{\n\t\tif(element in list2)\n\t\t{\n\t\t\tcontinue;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= element;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666124228,
      "stdout": "",
      "stderr": "/tmp/tmpwjkzu_qs.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\n/tmp/tmpwjkzu_qs.d(13): Error: incompatible types for `(element) in (list2)`: `long` and `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwjkzu_qs.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result;\n\tforeach(long i; list1)\n\t{\n\t\tif(list2.canFind(i))\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666124228,
      "stdout": "",
      "stderr": "/tmp/tmph9vzaeir.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph9vzaeir.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result;\n\tforeach(i; list1)\n\t{\n\t\tif(list2.canFind(i))\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517162,
      "stdout": "",
      "stderr": "/tmp/tmp2s8c09gt.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2s8c09gt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result;\n\tforeach(elem; list1)\n\t{\n\t\tif(elem in list2)\n\t\t{\n\t\t\tresult ~= elem;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517162,
      "stdout": "",
      "stderr": "/tmp/tmpn7hz398x.d(13): Error: incompatible types for `(elem) in (list2)`: `long` and `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn7hz398x.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result;\n\tforeach(element; list1)\n\t{\n\t\tif(!element in list2)\n\t\t{\n\t\t\tresult ~= element;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666124228,
      "stdout": "",
      "stderr": "/tmp/tmpvwa692we.d(13): Error: incompatible types for `(!element) in (list2)`: `bool` and `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvwa692we.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result = new long[0];\n\tforeach(long i; list1)\n\t{\n\t\tif(list2.canFind(i) == false)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666124228,
      "stdout": "",
      "stderr": "/tmp/tmpkik6dqno.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkik6dqno.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] list3 = new long[list1.length];\n\tint j = 0;\n\tfor (int i = 0; i < list1.length; i++) \n\t{\n\t\tif (list1[i] != list2[i]) \n\t\t{\n\t\t\tlist3[j] = list1[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn list3;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666124228,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpkyqr9cz4.d(14): Range violation\n----------------\n??:? _d_arrayboundsp [0x42867e]\n??:? long[] tmpkyqr9cz4.remove_elements(long[], long[]) [0x427e92]\n??:? void tmpkyqr9cz4.__unittest_L22_C1() [0x427fe2]\n??:? void tmpkyqr9cz4.__modtest() [0x42834c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c687]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b51a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c54]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430731]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4f1]\n??:? runModuleUnitTests [0x42c45d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) i",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result;\n\tforeach(elem; list1)\n\t{\n\t\tif(!list2.canFind(elem))\n\t\t{\n\t\t\tresult ~= elem;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517162,
      "stdout": "",
      "stderr": "/tmp/tmpad6khf53.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpad6khf53.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result = new long[list1.length];\n\tint j = 0;\n\tforeach(i; list1)\n\t{\n\t\tbool found = false;\n\t\tforeach(k; list2)\n\t\t{\n\t\t\tif(i == k)\n\t\t\t{\n\t\t\t\tfound = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(!found)\n\t\t{\n\t\t\tresult[j] = i;\n\t\t\tj++;\n\t\t}\n\t}\n\treturn result[0..j];\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666124228,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result;\n\tforeach(element; list1)\n\t{\n\t\tif(element in list2)\n\t\t{\n\t\t\tresult ~= element;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517162,
      "stdout": "",
      "stderr": "/tmp/tmpa0r6qj10.d(13): Error: incompatible types for `(element) in (list2)`: `long` and `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa0r6qj10.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result = new long[0];\n\tforeach(long i; list1)\n\t{\n\t\tif(!list2.canFind(i))\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666124228,
      "stdout": "",
      "stderr": "/tmp/tmpdenaua06.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdenaua06.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result;\n\tforeach(i; list1)\n\t{\n\t\tif(list2.canFind(i))\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517162,
      "stdout": "",
      "stderr": "/tmp/tmp2s8c09gt.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2s8c09gt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result = new long[];\n\tforeach(elem; list1)\n\t{\n\t\tif(!elem in list2)\n\t\t{\n\t\t\tresult ~= elem;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666124228,
      "stdout": "",
      "stderr": "/tmp/tmpul5gcesh.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\n/tmp/tmpul5gcesh.d(13): Error: incompatible types for `(!elem) in (list2)`: `bool` and `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpul5gcesh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result = new long[0];\n\tforeach(long i; list1)\n\t{\n\t\tif(!list2.canFind(i))\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666124228,
      "stdout": "",
      "stderr": "/tmp/tmpdenaua06.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdenaua06.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result;\n\tforeach(i; list1)\n\t{\n\t\tif(!list2.canFind(i))\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517162,
      "stdout": "",
      "stderr": "/tmp/tmpgblosclj.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgblosclj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result;\n\tforeach(i; list1)\n\t{\n\t\tif(list2.canFind(i))\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517162,
      "stdout": "",
      "stderr": "/tmp/tmp2s8c09gt.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2s8c09gt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] list3;\n\tforeach(i; 0 .. list1.length)\n\t{\n\t\tforeach(j; 0 .. list2.length)\n\t\t{\n\t\t\tif(list1[i] == list2[j])\n\t\t\t{\n\t\t\t\tlist1 = list1[0 .. i] ~ list1[i+1 .. $];\n\t\t\t}\n\t\t}\n\t}\n\treturn list1;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666124228,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpybu6sfyz.d(15): Range violation\n----------------\n??:? _d_arrayboundsp [0x4286a6]\n??:? long[] tmpybu6sfyz.remove_elements(long[], long[]) [0x427e7a]\n??:? void tmpybu6sfyz.__unittest_L23_C1() [0x42800e]\n??:? void tmpybu6sfyz.__modtest() [0x428378]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c79b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b62e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430679]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430605]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b605]\n??:? runModuleUnitTests [0x42c571]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) i",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result = new long[0];\n\tforeach(elem; list1)\n\t{\n\t\tif(!list2.canFind(elem))\n\t\t{\n\t\t\tresult ~= elem;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666124228,
      "stdout": "",
      "stderr": "/tmp/tmpgx7zbwe6.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgx7zbwe6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result;\n\tforeach(elem; list1)\n\t{\n\t\tif(!elem in list2)\n\t\t{\n\t\t\tresult ~= elem;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517162,
      "stdout": "",
      "stderr": "/tmp/tmpf94glkrg.d(13): Error: incompatible types for `(!elem) in (list2)`: `bool` and `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf94glkrg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result = new long[list1.length];\n\tint j = 0;\n\tforeach(i; list1)\n\t{\n\t\tif(!list2.canFind(i))\n\t\t{\n\t\t\tresult[j] = i;\n\t\t\tj++;\n\t\t}\n\t}\n\treturn result[0..j];\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666124228,
      "stdout": "",
      "stderr": "/tmp/tmp4cupg0hq.d(14): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4cupg0hq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result = new long[list1.length];\n\tlong[] temp = new long[list1.length];\n\tint count = 0;\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\t\n\twhile(i < list1.length)\n\t{\n\t\tj = 0;\n\t\twhile(j < list2.length)\n\t\t{\n\t\t\tif(list1[i] == list2[j])\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\t\ti++;\n\t}\n\t\n\tresult = new long[list1.length - count];\n\t\n\ti = 0;\n\tj = 0;\n\tk = 0;\n\t\n\twhile(i < list1.length)\n\t{\n\t\tj = 0;\n\t\twhile(j < list2.length)\n\t\t{\n\t\t\tif(list1[i] == list2[j])\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\t\tif(j == list2.length)\n\t\t{\n\t\t\tresult[k] = list1[i];\n\t\t\tk++;\n\t\t}\n\t\ti++;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666124228,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result;\n\tforeach(elem; list1)\n\t{\n\t\tif(!list2.canFind(elem))\n\t\t{\n\t\t\tresult ~= elem;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517162,
      "stdout": "",
      "stderr": "/tmp/tmpad6khf53.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpad6khf53.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result;\n\tforeach(elem; list1)\n\t{\n\t\tif(!list2.canFind(elem))\n\t\t{\n\t\t\tresult ~= elem;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517162,
      "stdout": "",
      "stderr": "/tmp/tmpad6khf53.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpad6khf53.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result;\n\tforeach(element; list1)\n\t{\n\t\tif(element !in list2)\n\t\t{\n\t\t\tresult ~= element;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666124228,
      "stdout": "",
      "stderr": "/tmp/tmplhyifico.d(13): Error: incompatible types for `(element) in (list2)`: `long` and `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplhyifico.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result = new long[list1.length];\n\tint i = 0;\n\tint j = 0;\n\tforeach(element; list1)\n\t{\n\t\tif(element != list2[i])\n\t\t{\n\t\t\tresult[j] = element;\n\t\t\tj++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\ti++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666124228,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp01oh81_z.d(15): Range violation\n----------------\n??:? _d_arrayboundsp [0x42865e]\n??:? long[] tmp01oh81_z.remove_elements(long[], long[]) [0x427e8f]\n??:? void tmp01oh81_z.__unittest_L27_C1() [0x427fc2]\n??:? void tmp01oh81_z.__modtest() [0x42832c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c667]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4fa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430785]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c34]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430711]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4d1]\n??:? runModuleUnitTests [0x42c43d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) i",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result = new long[list1.length];\n\tlong[] temp = new long[list1.length];\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint l = 0;\n\tint m = 0;\n\tint n = 0;\n\tint o = 0;\n\tint p = 0;\n\tint q = 0;\n\tint r = 0;\n\tint s = 0;\n\tint t = 0;\n\tint u = 0;\n\tint v = 0;\n\tint w = 0;\n\tint x = 0;\n\tint y = 0;\n\tint z = 0;\n\tint aa = 0;\n\tint bb = 0;\n\tint cc = 0;\n\tint dd = 0;\n\tint ee = 0;\n\tint ff = 0;\n\tint gg = 0;\n\tint hh = 0;\n\tint ii = 0;\n\tint jj = 0;\n\tint kk = 0;\n\tint ll = 0;\n\tint mm = 0;\n\tint nn = 0;\n\tint oo = 0;\n\tint pp = 0;\n\tint qq = 0;\n\tint rr = 0;\n\tint ss = 0;\n\tint tt = 0;\n\tint uu = 0;\n\tint vv = 0;\n\tint ww = 0;\n\tint xx = 0;\n\tint yy = 0;\n\tint zz = 0;\n\tint aaa = 0;\n\tint bbb = 0;\n\tint ccc = 0;\n\tint ddd = 0;\n\tint eee = 0;\n\tint fff = 0;\n\tint ggg = 0;\n\tint hhh = 0;\n\tint iii = 0;\n\tint jjj = 0;\n\tint kkk = 0;\n\tint lll = 0;\n\tint mmm = 0;\n\tint nnn = 0;\n\tint ooo = 0;\n\tint ppp = 0;\n\tint qqq = 0;\n\tint rrr = 0;\n\tint sss = 0;\n\tint ttt =\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666124228,
      "stdout": "",
      "stderr": "/tmp/tmp05l27s2d.d(76): Error: expression expected, not `unittest`\n/tmp/tmp05l27s2d.d(77): Error: semicolon expected, not `{`\n/tmp/tmp05l27s2d.d(84): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp05l27s2d.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result;\n\tforeach(element; list1)\n\t{\n\t\tif(element in list2)\n\t\t{\n\t\t\tresult ~= element;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517162,
      "stdout": "",
      "stderr": "/tmp/tmpa0r6qj10.d(13): Error: incompatible types for `(element) in (list2)`: `long` and `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa0r6qj10.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result = new long[];\n\tforeach(long item; list1)\n\t{\n\t\tif(!list2.canFind(item))\n\t\t{\n\t\t\tresult ~= item;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666124228,
      "stdout": "",
      "stderr": "/tmp/tmpxdbjpbxb.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\n/tmp/tmpxdbjpbxb.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxdbjpbxb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result = new long[list1.length];\n\tint j = 0;\n\tforeach(i; list1)\n\t{\n\t\tif(!list2.canFind(i))\n\t\t{\n\t\t\tresult[j] = i;\n\t\t\tj++;\n\t\t}\n\t}\n\treturn result[0..j];\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666124228,
      "stdout": "",
      "stderr": "/tmp/tmp4cupg0hq.d(14): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4cupg0hq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result;\n\tforeach(element; list1)\n\t{\n\t\tif(element in list2)\n\t\t{\n\t\t\tresult ~= element;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517162,
      "stdout": "",
      "stderr": "/tmp/tmpa0r6qj10.d(13): Error: incompatible types for `(element) in (list2)`: `long` and `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa0r6qj10.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result = new long[list1.length];\n\tint count = 0;\n\tforeach(i; list1)\n\t{\n\t\tif(!list2.canFind(i))\n\t\t{\n\t\t\tresult[count] = i;\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result[0..count];\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666124228,
      "stdout": "",
      "stderr": "/tmp/tmpx1354avd.d(14): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx1354avd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result;\n\tforeach(elem; list1)\n\t{\n\t\tif(!elem in list2)\n\t\t{\n\t\t\tresult ~= elem;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517162,
      "stdout": "",
      "stderr": "/tmp/tmpf94glkrg.d(13): Error: incompatible types for `(!elem) in (list2)`: `bool` and `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf94glkrg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result = new long[0];\n\tforeach(elem; list1)\n\t{\n\t\tif(!elem in list2)\n\t\t\tresult ~= elem;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666124228,
      "stdout": "",
      "stderr": "/tmp/tmpq1d44ktz.d(13): Error: incompatible types for `(!elem) in (list2)`: `bool` and `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq1d44ktz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result = new long[list1.length];\n\tint j = 0;\n\tforeach(i; list1)\n\t{\n\t\tif(list2.canFind(i))\n\t\t\tcontinue;\n\t\tresult[j++] = i;\n\t}\n\treturn result[0..j];\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666124228,
      "stdout": "",
      "stderr": "/tmp/tmp__eu_w90.d(14): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp__eu_w90.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result = new long[];\n\tforeach(i; list1)\n\t{\n\t\tif(list2.canFind(i))\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666124228,
      "stdout": "",
      "stderr": "/tmp/tmp7jp0jtv4.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\n/tmp/tmp7jp0jtv4.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7jp0jtv4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result = new long[0];\n\tforeach(long i; list1)\n\t{\n\t\tif(list2.canFind(i))\n\t\t\tcontinue;\n\t\tresult ~= i;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517162,
      "stdout": "",
      "stderr": "/tmp/tmp0lxz7zyv.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0lxz7zyv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result;\n\tforeach(i; list1)\n\t{\n\t\tif(list2.canFind(i))\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517162,
      "stdout": "",
      "stderr": "/tmp/tmp2s8c09gt.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2s8c09gt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result;\n\tforeach(elem; list1)\n\t{\n\t\tif(elem in list2)\n\t\t{\n\t\t\tresult ~= elem;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517162,
      "stdout": "",
      "stderr": "/tmp/tmpn7hz398x.d(13): Error: incompatible types for `(elem) in (list2)`: `long` and `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn7hz398x.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result;\n\tforeach(element; list1) \n\t{\n\t\tif(element in list2) \n\t\t{\n\t\t\tresult ~= element;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666124228,
      "stdout": "",
      "stderr": "/tmp/tmpdhh6fjug.d(13): Error: incompatible types for `(element) in (list2)`: `long` and `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdhh6fjug.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result = new long[0];\n\tforeach(i; list1)\n\t{\n\t\tif(!list2.canFind(i))\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517162,
      "stdout": "",
      "stderr": "/tmp/tmpzz9w9z1c.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzz9w9z1c.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result;\n\tforeach(element; list1)\n\t{\n\t\tif(element in list2)\n\t\t{\n\t\t\tresult ~= element;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517162,
      "stdout": "",
      "stderr": "/tmp/tmpa0r6qj10.d(13): Error: incompatible types for `(element) in (list2)`: `long` and `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa0r6qj10.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result = new long[];\n\tforeach(i; list1)\n\t{\n\t\tif(!list2.canFind(i))\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666124228,
      "stdout": "",
      "stderr": "/tmp/tmpfgfqwjc2.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\n/tmp/tmpfgfqwjc2.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfgfqwjc2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result = new long[0];\n\tforeach(long i; list1)\n\t{\n\t\tif(list2.canFind(i))\n\t\t{\n\t\t\tcontinue;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666124228,
      "stdout": "",
      "stderr": "/tmp/tmpnqgy0una.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnqgy0una.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result;\n\tforeach(i; list1)\n\t{\n\t\tif(i in list2)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666124228,
      "stdout": "",
      "stderr": "/tmp/tmp1uq1u66n.d(13): Error: incompatible types for `(i) in (list2)`: `long` and `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1uq1u66n.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result = new long[];\n\tforeach(long i; list1)\n\t{\n\t\tif(!list2.canFind(i))\n\t\t\tresult ~= i;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666124228,
      "stdout": "",
      "stderr": "/tmp/tmpwm2a8smu.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\n/tmp/tmpwm2a8smu.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwm2a8smu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result;\n\tforeach(elem; list1)\n\t{\n\t\tif(!list2.canFind(elem))\n\t\t{\n\t\t\tresult ~= elem;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517162,
      "stdout": "",
      "stderr": "/tmp/tmpad6khf53.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpad6khf53.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] list3 = new long[list1.length];\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\twhile(i < list1.length)\n\t{\n\t\tif(list1[i] != list2[j])\n\t\t{\n\t\t\tlist3[k] = list1[i];\n\t\t\tk++;\n\t\t}\n\t\ti++;\n\t\tif(i == list1.length)\n\t\t{\n\t\t\tj++;\n\t\t\ti = 0;\n\t\t}\n\t\tif(j == list2.length)\n\t\t{\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn list3;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666124228,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmprctkdrsl.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x428696]\n??:? long[] tmprctkdrsl.remove_elements(long[], long[]) [0x427eb9]\n??:? void tmprctkdrsl.__unittest_L34_C1() [0x427ffa]\n??:? void tmprctkdrsl.__modtest() [0x428364]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c69f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b532]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307bd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c6c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430749]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b509]\n??:? runModuleUnitTests [0x42c475]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) i",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result;\n\tforeach(elem; list2)\n\t{\n\t\tresult = list1.remove(elem);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666124228,
      "stdout": "",
      "stderr": "/tmp/tmpuj3xny0e.d(13): Error: no property `remove` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuj3xny0e.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result = new long[list1.length];\n\tint count = 0;\n\tforeach(elem; list1)\n\t{\n\t\tif(elem in list2)\n\t\t{\n\t\t\tresult[count] = elem;\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result[0..count];\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666124228,
      "stdout": "",
      "stderr": "/tmp/tmpoa9dslw2.d(14): Error: incompatible types for `(elem) in (list2)`: `long` and `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoa9dslw2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result = new long[];\n\tforeach(long i; list1)\n\t{\n\t\tif(!list2.canFind(i))\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517162,
      "stdout": "",
      "stderr": "/tmp/tmp0pvvi4ho.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\n/tmp/tmp0pvvi4ho.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0pvvi4ho.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result = new long[];\n\tforeach(long i; list1)\n\t{\n\t\tbool found = false;\n\t\tforeach(long j; list2)\n\t\t{\n\t\t\tif(j == i)\n\t\t\t{\n\t\t\t\tfound = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(!found)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666124228,
      "stdout": "",
      "stderr": "/tmp/tmpr4b8v1d0.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr4b8v1d0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result;\n\tforeach(elem; list1)\n\t{\n\t\tif(!elem in list2)\n\t\t{\n\t\t\tresult ~= elem;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517162,
      "stdout": "",
      "stderr": "/tmp/tmpf94glkrg.d(13): Error: incompatible types for `(!elem) in (list2)`: `bool` and `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf94glkrg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result = new long[0];\n\tforeach(elem; list1)\n\t{\n\t\tif(!list2.canFind(elem))\n\t\t{\n\t\t\tresult ~= elem;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666124228,
      "stdout": "",
      "stderr": "/tmp/tmpgx7zbwe6.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgx7zbwe6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] list3 = new long[list1.length];\n\tint count = 0;\n\tforeach(i; list1)\n\t{\n\t\tif(list2.canFind(i))\n\t\t{\n\t\t\tcontinue;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlist3[count] = i;\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn list3[0..count];\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666124228,
      "stdout": "",
      "stderr": "/tmp/tmps2focr6w.d(14): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps2focr6w.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result;\n\tforeach(element; list1)\n\t{\n\t\tif(element in list2)\n\t\t{\n\t\t\tresult ~= element;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517162,
      "stdout": "",
      "stderr": "/tmp/tmpa0r6qj10.d(13): Error: incompatible types for `(element) in (list2)`: `long` and `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa0r6qj10.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] list3 = new long[list1.length];\n\tint j = 0;\n\tforeach(i; list1)\n\t{\n\t\tif(list2.canFind(i))\n\t\t\tcontinue;\n\t\telse\n\t\t{\n\t\t\tlist3[j] = i;\n\t\t\tj++;\n\t\t}\n\t}\n\treturn list3[0..j];\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666124228,
      "stdout": "",
      "stderr": "/tmp/tmpxp5e5qkm.d(14): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxp5e5qkm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result;\n\tforeach(elem; list1)\n\t{\n\t\tif(!elem in list2)\n\t\t{\n\t\t\tresult ~= elem;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517162,
      "stdout": "",
      "stderr": "/tmp/tmpf94glkrg.d(13): Error: incompatible types for `(!elem) in (list2)`: `bool` and `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf94glkrg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result = new long[list1.length];\n\tint j = 0;\n\tforeach(i; list1)\n\t{\n\t\tif(list2.canFind(i))\n\t\t\tcontinue;\n\t\tresult[j++] = i;\n\t}\n\treturn result[0..j];\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666124228,
      "stdout": "",
      "stderr": "/tmp/tmp__eu_w90.d(14): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp__eu_w90.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result;\n\tforeach(i; list2)\n\t{\n\t\tresult = list1.remove(i);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666124228,
      "stdout": "",
      "stderr": "/tmp/tmpg9qatcrg.d(13): Error: no property `remove` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg9qatcrg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result = new long[];\n\tforeach(i; list1)\n\t{\n\t\tif(list2.canFind(i))\n\t\t{\n\t\t\tcontinue;\n\t\t}\n\t\tresult ~= i;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666124228,
      "stdout": "",
      "stderr": "/tmp/tmp6n2kqyll.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\n/tmp/tmp6n2kqyll.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6n2kqyll.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result;\n\tforeach(elem; list1)\n\t{\n\t\tif(!list2.canFind(elem))\n\t\t{\n\t\t\tresult ~= elem;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517162,
      "stdout": "",
      "stderr": "/tmp/tmpad6khf53.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpad6khf53.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result = new long[];\n\tforeach(elem;list1)\n\t{\n\t\tif(!list2.canFind(elem))\n\t\t{\n\t\t\tresult ~= elem;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666124228,
      "stdout": "",
      "stderr": "/tmp/tmpnj0dpy6z.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\n/tmp/tmpnj0dpy6z.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnj0dpy6z.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result = new long[0];\n\tforeach(long i; list1)\n\t{\n\t\tif(list2.canFind(i))\n\t\t\tcontinue;\n\t\tresult ~= i;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517162,
      "stdout": "",
      "stderr": "/tmp/tmp0lxz7zyv.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0lxz7zyv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] list3;\n\tforeach(element; list1)\n\t{\n\t\tif(element in list2)\n\t\t{\n\t\t\tlist3 ~= element;\n\t\t}\n\t}\n\treturn list3;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666124228,
      "stdout": "",
      "stderr": "/tmp/tmplb0_v7ie.d(13): Error: incompatible types for `(element) in (list2)`: `long` and `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplb0_v7ie.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result;\n\tforeach(element; list1)\n\t{\n\t\tif(!list2.canFind(element))\n\t\t{\n\t\t\tresult ~= element;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666124228,
      "stdout": "",
      "stderr": "/tmp/tmp0kzvm_80.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0kzvm_80.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result;\n\tforeach(i; list1)\n\t{\n\t\tif(list2.canFind(i))\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517162,
      "stdout": "",
      "stderr": "/tmp/tmp2s8c09gt.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2s8c09gt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] list3;\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\tlist3 ~= i;\n\t\t\t}\n\t\t}\n\t}\n\treturn list1.difference(list3);\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666124228,
      "stdout": "",
      "stderr": "/tmp/tmpfwx_oh8d.d(21): Error: no property `difference` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfwx_oh8d.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result = new long[list1.length];\n\tint i = 0;\n\tint j = 0;\n\tforeach(elem; list1)\n\t{\n\t\tif(elem != list2[i])\n\t\t{\n\t\t\tresult[j] = elem;\n\t\t\tj++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\ti++;\n\t\t}\n\t}\n\treturn result[0..j];\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666124228,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp4yokj4_a.d(15): Range violation\n----------------\n??:? _d_arrayboundsp [0x428676]\n??:? long[] tmp4yokj4_a.remove_elements(long[], long[]) [0x427e8f]\n??:? void tmp4yokj4_a.__unittest_L27_C1() [0x427fde]\n??:? void tmp4yokj4_a.__modtest() [0x428348]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c67f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b512]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43079d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c4c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430729]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4e9]\n??:? runModuleUnitTests [0x42c455]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) i",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] list3;\n\tforeach(i; list1)\n\t{\n\t\tif(!list2.canFind(i))\n\t\t{\n\t\t\tlist3 ~= i;\n\t\t}\n\t}\n\treturn list3;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666124228,
      "stdout": "",
      "stderr": "/tmp/tmpranlk4zy.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpranlk4zy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result = new long[0];\n\tforeach(long i; list1)\n\t{\n\t\tif(!list2.canFind(i))\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666124228,
      "stdout": "",
      "stderr": "/tmp/tmpdenaua06.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdenaua06.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result;\n\tforeach(i; list1)\n\t{\n\t\tif(list2.canFind(i))\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517162,
      "stdout": "",
      "stderr": "/tmp/tmp2s8c09gt.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2s8c09gt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result = new long[list1.length];\n\tlong[] temp = new long[list1.length];\n\tint j = 0;\n\tint k = 0;\n\tfor(int i = 0; i < list1.length; i++)\n\t{\n\t\tif(list1[i] != list2[j])\n\t\t{\n\t\t\tresult[k] = list1[i];\n\t\t\tk++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttemp[j] = list1[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666124228,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpj42wvig_.d(16): Range violation\n----------------\n??:? _d_arrayboundsp [0x4286e6]\n??:? long[] tmpj42wvig_.remove_elements(long[], long[]) [0x427ea5]\n??:? void tmpj42wvig_.__unittest_L29_C1() [0x42804a]\n??:? void tmpj42wvig_.__modtest() [0x4283b4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b582]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43080d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430cbc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430799]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b559]\n??:? runModuleUnitTests [0x42c4c5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) i",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] list3;\n\tforeach(i; list1)\n\t{\n\t\tif(list2.find(i) == -1)\n\t\t{\n\t\t\tlist3 ~= i;\n\t\t}\n\t}\n\treturn list3;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666124228,
      "stdout": "",
      "stderr": "/tmp/tmp3zy53r4v.d(13): Error: no property `find` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3zy53r4v.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result = new long[0];\n\tforeach(i; list1)\n\t{\n\t\tif(list2.canFind(i))\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666124228,
      "stdout": "",
      "stderr": "/tmp/tmp7hj75dma.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7hj75dma.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result = new long[0];\n\tforeach(long i; list1)\n\t{\n\t\tif(list2.canFind(i) == false)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666124228,
      "stdout": "",
      "stderr": "/tmp/tmpkik6dqno.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkik6dqno.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result = new long[list1.length];\n\tlong[] temp = new long[list1.length];\n\tlong[] temp2 = new long[list1.length];\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint l = 0;\n\tint m = 0;\n\tint n = 0;\n\tint o = 0;\n\tint p = 0;\n\tint q = 0;\n\tint r = 0;\n\tint s = 0;\n\tint t = 0;\n\tint u = 0;\n\tint v = 0;\n\tint w = 0;\n\tint x = 0;\n\tint y = 0;\n\tint z = 0;\n\t\n\tfor (i = 0; i < list1.length; i++)\n\t{\n\t\tfor (j = 0; j < list2.length; j++)\n\t\t{\n\t\t\tif (list1[i] == list2[j])\n\t\t\t{\n\t\t\t\ttemp[k] = list1[i];\n\t\t\t\tk++;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor (l = 0; l < list1.length; l++)\n\t{\n\t\tfor (m = 0; m < temp.length; m++)\n\t\t{\n\t\t\tif (list1[l] == temp[m])\n\t\t\t{\n\t\t\t\ttemp2[n] = list1[l];\n\t\t\t\tn++;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor (o = 0; o < list1.length; o++)\n\t{\n\t\tfor (p = 0; p < temp2.length; p++)\n\t\t{\n\t\t\tif (list1[o] == temp2[p])\n\t\t\t{\n\t\t\t\tresult[q] = list1[o];\n\t\t\t\tq++;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor (r = 0; r < list1.length; r++)\n\t{\n\t\tfor (s = 0; s < result.length; s++)\n\t\t\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666124228,
      "stdout": "",
      "stderr": "/tmp/tmpgoslc0os.d(72): Error: found `unittest` instead of statement\n/tmp/tmpgoslc0os.d(80): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgoslc0os.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result;\n\tforeach(elem; list1)\n\t{\n\t\tif(!list2.canFind(elem))\n\t\t{\n\t\t\tresult ~= elem;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517162,
      "stdout": "",
      "stderr": "/tmp/tmpad6khf53.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpad6khf53.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result = new long[0];\n\tforeach(long i; list1)\n\t{\n\t\tif(list2.canFind(i) == false)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666124228,
      "stdout": "",
      "stderr": "/tmp/tmpkik6dqno.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkik6dqno.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result = new long[0];\n\tforeach(long i; list1)\n\t{\n\t\tif(list2.canFind(i))\n\t\t{\n\t\t\tcontinue;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666124228,
      "stdout": "",
      "stderr": "/tmp/tmpnqgy0una.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnqgy0una.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result;\n\tforeach(i; list1)\n\t{\n\t\tif(!list2.canFind(i))\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517162,
      "stdout": "",
      "stderr": "/tmp/tmpgblosclj.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgblosclj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] list3 = new long[0];\n\tforeach(long i; list1)\n\t{\n\t\tif(!list2.canFind(i))\n\t\t{\n\t\t\tlist3 ~= i;\n\t\t}\n\t}\n\treturn list3;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666124228,
      "stdout": "",
      "stderr": "/tmp/tmpyl1obmo5.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyl1obmo5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result = new long[0];\n\tforeach(long i; list1)\n\t{\n\t\tif(!list2.canFind(i))\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666124228,
      "stdout": "",
      "stderr": "/tmp/tmpdenaua06.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdenaua06.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result = new long[];\n\tforeach(i; list1)\n\t{\n\t\tif(!list2.canFind(i))\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666124228,
      "stdout": "",
      "stderr": "/tmp/tmpfgfqwjc2.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\n/tmp/tmpfgfqwjc2.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfgfqwjc2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result = new long[0];\n\tforeach(long i; list1)\n\t{\n\t\tif(!list2.canFind(i))\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666124228,
      "stdout": "",
      "stderr": "/tmp/tmpdenaua06.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdenaua06.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result = new long[0];\n\tforeach(long i; list1)\n\t{\n\t\tif(!list2.canFind(i))\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666124228,
      "stdout": "",
      "stderr": "/tmp/tmpdenaua06.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdenaua06.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result = new long[list1.length];\n\tint j = 0;\n\tforeach(i; list1)\n\t{\n\t\tif(list2.canFind(i))\n\t\t{\n\t\t\tresult[j] = i;\n\t\t\tj++;\n\t\t}\n\t}\n\treturn result[0..j];\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666124228,
      "stdout": "",
      "stderr": "/tmp/tmptoojsb22.d(14): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptoojsb22.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] list3;\n\tforeach(i; list1)\n\t{\n\t\tif(i in list2)\n\t\t{\n\t\t\tlist3 ~= i;\n\t\t}\n\t}\n\treturn list3;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666124228,
      "stdout": "",
      "stderr": "/tmp/tmpwako__03.d(13): Error: incompatible types for `(i) in (list2)`: `long` and `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwako__03.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result = new long[list1.length];\n\tint j = 0;\n\tforeach(i; list1)\n\t{\n\t\tif(list2.canFind(i))\n\t\t\tcontinue;\n\t\tresult[j] = i;\n\t\tj++;\n\t}\n\treturn result[0..j];\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666124228,
      "stdout": "",
      "stderr": "/tmp/tmpepd5hgjb.d(14): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpepd5hgjb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result;\n\tforeach(i; list1)\n\t{\n\t\tif(list2.canFind(i))\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517162,
      "stdout": "",
      "stderr": "/tmp/tmp2s8c09gt.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2s8c09gt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result;\n\tforeach(i; list1)\n\t{\n\t\tif(!list2.canFind(i))\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517162,
      "stdout": "",
      "stderr": "/tmp/tmpgblosclj.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgblosclj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result;\n\tforeach(elem; list1)\n\t{\n\t\tif(elem in list2)\n\t\t{\n\t\t\tresult ~= elem;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517162,
      "stdout": "",
      "stderr": "/tmp/tmpn7hz398x.d(13): Error: incompatible types for `(elem) in (list2)`: `long` and `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn7hz398x.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result;\n\tforeach(i; list1)\n\t{\n\t\tif(list2.canFind(i))\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517162,
      "stdout": "",
      "stderr": "/tmp/tmp2s8c09gt.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2s8c09gt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result;\n\tforeach(i; list1)\n\t{\n\t\tif(list2.canFind(i))\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517162,
      "stdout": "",
      "stderr": "/tmp/tmp2s8c09gt.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2s8c09gt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result;\n\tforeach(elem; list2)\n\t{\n\t\tresult = list1.filter!(a => a != elem);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666124228,
      "stdout": "",
      "stderr": "/tmp/tmpnk1h6t2e.d(13): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnk1h6t2e.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result;\n\tforeach(elem; list1)\n\t{\n\t\tif(list2.canFind(elem))\n\t\t{\n\t\t\tresult ~= elem;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666124228,
      "stdout": "",
      "stderr": "/tmp/tmpoj7ca7ft.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoj7ca7ft.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result;\n\tforeach(elem; list1)\n\t{\n\t\tif(elem in list2)\n\t\t\tresult ~= elem;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666124228,
      "stdout": "",
      "stderr": "/tmp/tmp5r_1km54.d(13): Error: incompatible types for `(elem) in (list2)`: `long` and `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5r_1km54.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result;\n\tforeach(elem; list1)\n\t{\n\t\tif(!list2.canFind(elem))\n\t\t{\n\t\t\tresult ~= elem;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517162,
      "stdout": "",
      "stderr": "/tmp/tmpad6khf53.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpad6khf53.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result = new long[0];\n\tforeach(long i; list1)\n\t{\n\t\tif(list2.canFind(i))\n\t\t{\n\t\t\tcontinue;\n\t\t}\n\t\tresult ~= i;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666124228,
      "stdout": "",
      "stderr": "/tmp/tmpxyxydtux.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxyxydtux.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] list3 = new long[0];\n\tforeach(long i; list1)\n\t{\n\t\tif(!list2.canFind(i))\n\t\t{\n\t\t\tlist3 ~= i;\n\t\t}\n\t}\n\treturn list3;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666124228,
      "stdout": "",
      "stderr": "/tmp/tmpyl1obmo5.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyl1obmo5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result;\n\tforeach(elem; list1)\n\t{\n\t\tif(elem in list2)\n\t\t{\n\t\t\tresult ~= elem;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517162,
      "stdout": "",
      "stderr": "/tmp/tmpn7hz398x.d(13): Error: incompatible types for `(elem) in (list2)`: `long` and `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn7hz398x.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] list3;\n\tforeach(i; list1)\n\t{\n\t\tif(list2.canFind(i))\n\t\t{\n\t\t\tlist3 ~= i;\n\t\t}\n\t}\n\treturn list3;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517162,
      "stdout": "",
      "stderr": "/tmp/tmp8q6e0njw.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8q6e0njw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result = new long[];\n\tforeach(long i; list1)\n\t{\n\t\tif(i in list2)\n\t\t\tcontinue;\n\t\telse\n\t\t\tresult ~= i;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666124228,
      "stdout": "",
      "stderr": "/tmp/tmp4zb6k2tv.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\n/tmp/tmp4zb6k2tv.d(13): Error: incompatible types for `(i) in (list2)`: `long` and `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4zb6k2tv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result = new long[];\n\tforeach(i; list1)\n\t{\n\t\tif(list2.find(i) == -1)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666124228,
      "stdout": "",
      "stderr": "/tmp/tmpv5iu9p4h.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\n/tmp/tmpv5iu9p4h.d(13): Error: no property `find` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv5iu9p4h.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result = new long[0];\n\tforeach(long i; list1)\n\t{\n\t\tif(!list2.canFind(i))\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666124228,
      "stdout": "",
      "stderr": "/tmp/tmpdenaua06.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdenaua06.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result = new long[];\n\tforeach(elem; list1)\n\t{\n\t\tif(!elem in list2)\n\t\t\tresult ~= elem;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666124228,
      "stdout": "",
      "stderr": "/tmp/tmpn56vsrmo.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\n/tmp/tmpn56vsrmo.d(13): Error: incompatible types for `(!elem) in (list2)`: `bool` and `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn56vsrmo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result;\n\tforeach(elem; list1)\n\t{\n\t\tif(!list2.canFind(elem))\n\t\t\tresult ~= elem;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666124228,
      "stdout": "",
      "stderr": "/tmp/tmp94j4eyzg.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp94j4eyzg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] list3 = new long[0];\n\tforeach(i; list1)\n\t{\n\t\tif(!list2.canFind(i))\n\t\t{\n\t\t\tlist3 ~= i;\n\t\t}\n\t}\n\treturn list3;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666124228,
      "stdout": "",
      "stderr": "/tmp/tmpyxp6v_mi.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyxp6v_mi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result = new long[0];\n\tforeach(long i; list1)\n\t{\n\t\tif(!list2.canFind(i))\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666124228,
      "stdout": "",
      "stderr": "/tmp/tmpdenaua06.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdenaua06.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result;\n\tforeach(element; list1)\n\t{\n\t\tif(element in list2)\n\t\t{\n\t\t\tresult ~= element;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517162,
      "stdout": "",
      "stderr": "/tmp/tmpa0r6qj10.d(13): Error: incompatible types for `(element) in (list2)`: `long` and `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa0r6qj10.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] list3;\n\tforeach(elem; list1)\n\t{\n\t\tif(elem in list2)\n\t\t{\n\t\t\tlist3 ~= elem;\n\t\t}\n\t}\n\treturn list3;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666124228,
      "stdout": "",
      "stderr": "/tmp/tmpa2ke0wtj.d(13): Error: incompatible types for `(elem) in (list2)`: `long` and `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa2ke0wtj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result;\n\tforeach(i; list1)\n\t{\n\t\tif(list2.canFind(i))\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517162,
      "stdout": "",
      "stderr": "/tmp/tmp2s8c09gt.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2s8c09gt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] list3 = new long[0];\n\tforeach(i; list1)\n\t{\n\t\tif(list2.canFind(i))\n\t\t{\n\t\t\tlist3 ~= i;\n\t\t}\n\t}\n\treturn list3;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666124228,
      "stdout": "",
      "stderr": "/tmp/tmpo9l3siov.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo9l3siov.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result = new long[0];\n\tforeach(l1; list1)\n\t{\n\t\tif(l1 in list2)\n\t\t\tcontinue;\n\t\telse\n\t\t\tresult ~= l1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666124228,
      "stdout": "",
      "stderr": "/tmp/tmp2uvjaapo.d(13): Error: incompatible types for `(l1) in (list2)`: `long` and `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2uvjaapo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result = new long[list1.length];\n\tint count = 0;\n\tforeach(i; list1)\n\t{\n\t\tif(list2.canFind(i))\n\t\t{\n\t\t\tcontinue;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[count] = i;\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn result[0..count];\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666124228,
      "stdout": "",
      "stderr": "/tmp/tmp0oms9mnf.d(14): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0oms9mnf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result;\n\tforeach(elem; list1)\n\t{\n\t\tif(!list2.canFind(elem))\n\t\t{\n\t\t\tresult ~= elem;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517162,
      "stdout": "",
      "stderr": "/tmp/tmpad6khf53.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpad6khf53.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result;\n\tforeach(element; list1)\n\t{\n\t\tif(element in list2)\n\t\t{\n\t\t\tresult ~= element;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517162,
      "stdout": "",
      "stderr": "/tmp/tmpa0r6qj10.d(13): Error: incompatible types for `(element) in (list2)`: `long` and `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa0r6qj10.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result;\n\tforeach(elem; list1)\n\t{\n\t\tif(elem in list2)\n\t\t{\n\t\t\tresult ~= elem;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517162,
      "stdout": "",
      "stderr": "/tmp/tmpn7hz398x.d(13): Error: incompatible types for `(elem) in (list2)`: `long` and `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn7hz398x.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result = new long[list1.length];\n\tint j = 0;\n\tforeach(i; list1)\n\t{\n\t\tif(list2.canFind(i) == false)\n\t\t{\n\t\t\tresult[j] = i;\n\t\t\tj++;\n\t\t}\n\t}\n\treturn result[0..j];\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666124228,
      "stdout": "",
      "stderr": "/tmp/tmpafloer9r.d(14): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpafloer9r.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result;\n\tforeach(i; list1)\n\t{\n\t\tif(list2.canFind(i))\n\t\t{\n\t\t\tlist1 = list1.remove(i);\n\t\t}\n\t}\n\treturn list1;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666124228,
      "stdout": "",
      "stderr": "/tmp/tmp33o6caad.d(13): Error: no property `canFind` for type `long[]`\n/tmp/tmp33o6caad.d(15): Error: no property `remove` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp33o6caad.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result;\n\tforeach(elem; list1)\n\t{\n\t\tif(!list2.canFind(elem))\n\t\t{\n\t\t\tresult ~= elem;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517162,
      "stdout": "",
      "stderr": "/tmp/tmpad6khf53.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpad6khf53.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result;\n\tforeach(i; list1)\n\t{\n\t\tif(list2.canFind(i))\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517162,
      "stdout": "",
      "stderr": "/tmp/tmp2s8c09gt.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2s8c09gt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result;\n\tforeach(elem; list1)\n\t{\n\t\tif(!list2.canFind(elem))\n\t\t{\n\t\t\tresult ~= elem;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517162,
      "stdout": "",
      "stderr": "/tmp/tmpad6khf53.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpad6khf53.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result = new long[0];\n\tforeach(long i; list1)\n\t{\n\t\tif(list2.canFind(i))\n\t\t\tcontinue;\n\t\telse\n\t\t\tresult ~= i;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666124228,
      "stdout": "",
      "stderr": "/tmp/tmp3mkiry1k.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3mkiry1k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result = new long[];\n\tforeach(elem; list1)\n\t{\n\t\tif(!elem in list2)\n\t\t{\n\t\t\tresult ~= elem;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666124228,
      "stdout": "",
      "stderr": "/tmp/tmpul5gcesh.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\n/tmp/tmpul5gcesh.d(13): Error: incompatible types for `(!elem) in (list2)`: `bool` and `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpul5gcesh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result;\n\tforeach(elem; list1)\n\t{\n\t\tif(!elem in list2)\n\t\t{\n\t\t\tresult ~= elem;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517162,
      "stdout": "",
      "stderr": "/tmp/tmpf94glkrg.d(13): Error: incompatible types for `(!elem) in (list2)`: `bool` and `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf94glkrg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result = new long[];\n\tforeach(i; list1)\n\t{\n\t\tif(list2.canFind(i))\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666124228,
      "stdout": "",
      "stderr": "/tmp/tmp7jp0jtv4.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\n/tmp/tmp7jp0jtv4.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7jp0jtv4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result = new long[list1.length];\n\tint j = 0;\n\tforeach(i; list1)\n\t{\n\t\tif(!list2.canFind(i))\n\t\t{\n\t\t\tresult[j] = i;\n\t\t\tj++;\n\t\t}\n\t}\n\treturn result[0..j];\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666124228,
      "stdout": "",
      "stderr": "/tmp/tmp4cupg0hq.d(14): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4cupg0hq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] list3 = new long[list1.length];\n\tint j = 0;\n\tforeach(i; list1)\n\t{\n\t\tif(list2.canFind(i))\n\t\t{\n\t\t\tcontinue;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlist3[j] = i;\n\t\t\tj++;\n\t\t}\n\t}\n\treturn list3;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666124228,
      "stdout": "",
      "stderr": "/tmp/tmpzb6j_w5z.d(14): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzb6j_w5z.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result = new long[0];\n\tforeach(i; list1)\n\t{\n\t\tif(!list2.canFind(i))\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517162,
      "stdout": "",
      "stderr": "/tmp/tmpzz9w9z1c.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzz9w9z1c.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result;\n\tforeach(elem; list1)\n\t{\n\t\tif(elem in list2)\n\t\t{\n\t\t\tresult ~= elem;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517162,
      "stdout": "",
      "stderr": "/tmp/tmpn7hz398x.d(13): Error: incompatible types for `(elem) in (list2)`: `long` and `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn7hz398x.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result = new long[0];\n\tforeach(i; list1)\n\t{\n\t\tif(!list2.canFind(i))\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517162,
      "stdout": "",
      "stderr": "/tmp/tmpzz9w9z1c.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzz9w9z1c.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result = new long[list1.length];\n\tlong[] temp = new long[list1.length];\n\tlong[] temp2 = new long[list1.length];\n\tlong[] temp3 = new long[list1.length];\n\tlong[] temp4 = new long[list1.length];\n\tlong[] temp5 = new long[list1.length];\n\tlong[] temp6 = new long[list1.length];\n\tlong[] temp7 = new long[list1.length];\n\tlong[] temp8 = new long[list1.length];\n\tlong[] temp9 = new long[list1.length];\n\tlong[] temp10 = new long[list1.length];\n\tlong[] temp11 = new long[list1.length];\n\tlong[] temp12 = new long[list1.length];\n\tlong[] temp13 = new long[list1.length];\n\tlong[] temp14 = new long[list1.length];\n\tlong[] temp15 = new long[list1.length];\n\tlong[] temp16 = new long[list1.length];\n\tlong[] temp17 = new long[list1.length];\n\tlong[] temp18 = new long[list1.length];\n\tlong[] temp19 = new long[list1.length];\n\tlong[] temp20 = new long[list1.length];\n\tlong[] temp21 = new long[list1.length];\n\tlong[] temp22 = new long[list1.length];\n\tlong[] temp23 = new long[list1.length];\n\tlong[] temp24 = new long[list1.length];\n\tlong[] temp25 = new long[list1.length];\n\tlong[] temp26 = new long[list1.length];\n\tlong[] temp27 = new long[list1.length];\n\tlong[] temp28 = new long[list1.length];\n\tlong[] temp29 = new long[list1.length];\n\tlong[] temp30 = new long[list1.length];\n\tlong[] temp31 = new long[list1.length];\n\tlong[] temp32 = new long[list1.length];\n\tlong[] temp33 = new long[list1.length];\n\t\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666124228,
      "stdout": "",
      "stderr": "/tmp/tmpqzfn7u8q.d(45): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqzfn7u8q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result;\n\tforeach(element; list1) \n\t{\n\t\tif(element in list2) \n\t\t{\n\t\t\tresult ~= element;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666124228,
      "stdout": "",
      "stderr": "/tmp/tmpdhh6fjug.d(13): Error: incompatible types for `(element) in (list2)`: `long` and `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdhh6fjug.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result = new long[list1.length];\n\tlong[] temp = new long[list1.length];\n\tint j = 0;\n\tint k = 0;\n\tfor (int i = 0; i < list1.length; i++)\n\t{\n\t\tfor (j = 0; j < list2.length; j++)\n\t\t{\n\t\t\tif (list1[i] == list2[j])\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (j == list2.length)\n\t\t{\n\t\t\ttemp[k] = list1[i];\n\t\t\tk++;\n\t\t}\n\t}\n\tresult = temp[0..k];\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666124229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result;\n\tforeach(elem; list1)\n\t{\n\t\tif(elem in list2)\n\t\t{\n\t\t\tresult ~= elem;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517162,
      "stdout": "",
      "stderr": "/tmp/tmpn7hz398x.d(13): Error: incompatible types for `(elem) in (list2)`: `long` and `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn7hz398x.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result = new long[];\n\tforeach(i; list1)\n\t{\n\t\tif(!list2.canFind(i))\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666124228,
      "stdout": "",
      "stderr": "/tmp/tmpfgfqwjc2.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\n/tmp/tmpfgfqwjc2.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfgfqwjc2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result;\n\tforeach(i; 0 .. list1.length)\n\t{\n\t\tforeach(j; 0 .. list2.length)\n\t\t{\n\t\t\tif(list1[i] == list2[j])\n\t\t\t{\n\t\t\t\tlist1 = list1[0 .. i] ~ list1[i+1 .. $];\n\t\t\t}\n\t\t}\n\t}\n\treturn list1;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666124229,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp6b7iiwqz.d(15): Range violation\n----------------\n??:? _d_arrayboundsp [0x4286a6]\n??:? long[] tmp6b7iiwqz.remove_elements(long[], long[]) [0x427e7a]\n??:? void tmp6b7iiwqz.__unittest_L23_C1() [0x42800e]\n??:? void tmp6b7iiwqz.__modtest() [0x428378]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c79b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b62e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430679]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430605]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b605]\n??:? runModuleUnitTests [0x42c571]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) i",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result;\n\tforeach(elem; list1)\n\t{\n\t\tif(elem !in list2)\n\t\t{\n\t\t\tresult ~= elem;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666124228,
      "stdout": "",
      "stderr": "/tmp/tmp1mnl_9ze.d(13): Error: incompatible types for `(elem) in (list2)`: `long` and `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1mnl_9ze.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] list3 = new long[0];\n\tforeach(long i; list1)\n\t{\n\t\tif(!list2.canFind(i))\n\t\t{\n\t\t\tlist3 ~= i;\n\t\t}\n\t}\n\treturn list3;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666124228,
      "stdout": "",
      "stderr": "/tmp/tmpyl1obmo5.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyl1obmo5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result = new long[list1.length];\n\tint i = 0;\n\tforeach(long x; list1)\n\t{\n\t\tif(!list2.canFind(x))\n\t\t{\n\t\t\tresult[i] = x;\n\t\t\ti++;\n\t\t}\n\t}\n\treturn result[0..i];\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666124228,
      "stdout": "",
      "stderr": "/tmp/tmp69ed5bp9.d(14): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp69ed5bp9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result;\n\tforeach(element; list1)\n\t{\n\t\tif(element in list2)\n\t\t{\n\t\t\tresult ~= element;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517162,
      "stdout": "",
      "stderr": "/tmp/tmpa0r6qj10.d(13): Error: incompatible types for `(element) in (list2)`: `long` and `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa0r6qj10.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result;\n\tforeach(element; list1)\n\t{\n\t\tif(element in list2)\n\t\t{\n\t\t\tresult ~= element;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517162,
      "stdout": "",
      "stderr": "/tmp/tmpa0r6qj10.d(13): Error: incompatible types for `(element) in (list2)`: `long` and `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa0r6qj10.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result;\n\tforeach(i; list2)\n\t{\n\t\tresult = list1.filter!(x => x != i);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666124228,
      "stdout": "",
      "stderr": "/tmp/tmpmaranmmj.d(13): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmaranmmj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result = new long[0];\n\tforeach(int i; list1)\n\t{\n\t\tif(list2.find(i) == -1)\n\t\t\tresult ~= i;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666124228,
      "stdout": "",
      "stderr": "/tmp/tmpuyo0z3ec.d(11): Error: cannot implicitly convert expression `__r73[__key74]` of type `long` to `int`\n/tmp/tmpuyo0z3ec.d(13): Error: no property `find` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuyo0z3ec.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result;\n\tforeach(i; list1)\n\t{\n\t\tif(list2.canFind(i))\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517162,
      "stdout": "",
      "stderr": "/tmp/tmp2s8c09gt.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2s8c09gt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result;\n\tforeach(element; list1)\n\t{\n\t\tif(element in list2)\n\t\t{\n\t\t\tresult ~= element;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517162,
      "stdout": "",
      "stderr": "/tmp/tmpa0r6qj10.d(13): Error: incompatible types for `(element) in (list2)`: `long` and `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa0r6qj10.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result = new long[];\n\tforeach(long i; list1)\n\t{\n\t\tif(list2.canFind(i))\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666124228,
      "stdout": "",
      "stderr": "/tmp/tmpjt7u108g.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\n/tmp/tmpjt7u108g.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjt7u108g.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result;\n\tforeach(elem; list1)\n\t{\n\t\tif(elem in list2)\n\t\t{\n\t\t\tresult ~= elem;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517162,
      "stdout": "",
      "stderr": "/tmp/tmpn7hz398x.d(13): Error: incompatible types for `(elem) in (list2)`: `long` and `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn7hz398x.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result = new long[];\n\tforeach(elem; list1)\n\t{\n\t\tif(!list2.canFind(elem))\n\t\t{\n\t\t\tresult ~= elem;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666124228,
      "stdout": "",
      "stderr": "/tmp/tmpfsxjjg5q.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\n/tmp/tmpfsxjjg5q.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfsxjjg5q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result = new long[list1.length];\n\tlong[] temp = new long[list1.length];\n\tint count = 0;\n\tint count2 = 0;\n\t\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tif(count == 0)\n\t\t{\n\t\t\ttemp[count2] = i;\n\t\t\tcount2++;\n\t\t}\n\t\tcount = 0;\n\t}\n\t\n\tresult = temp[0..count2];\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666124229,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result = new long[];\n\tforeach(i; list1)\n\t{\n\t\tif(list2.canFind(i))\n\t\t\tcontinue;\n\t\tresult ~= i;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666124228,
      "stdout": "",
      "stderr": "/tmp/tmp94yu2tj8.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\n/tmp/tmp94yu2tj8.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp94yu2tj8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all elements from a given array present in another array.\n\t\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n{\n\tlong[] result;\n\tforeach(elem; list1)\n\t{\n\t\tif(!list2.canFind(elem))\n\t\t{\n\t\t\tresult ~= elem;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517162,
      "stdout": "",
      "stderr": "/tmp/tmpad6khf53.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpad6khf53.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}