{
  "name": "mbpp_776_count_vowels",
  "language": "d",
  "prompt": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_776_count_vowels.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == 'a' && (test_str[$-1] == 'e' || test_str[$-1] == 'i' || test_str[$-1] == 'o' || test_str[$-1] == 'u'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'e' && (test_str[$-1] == 'a' || test_str[$-1] == 'i' || test_str[$-1] == 'o' || test_str[$-1] == 'u'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'i' && (test_str[$-1] == 'a' || test_str[$-1] == 'e' || test_str[$-1] == 'o' || test_str[$-1] == 'u'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'o' && (test_str[$-1] == 'a' || test_str[$-1] == 'e' || test_str[$-1] == 'i' || test_str[$-1] == 'u'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'u' && (test_str[$-1] == 'a' || test_str[$-1] == 'e' || test_str[$-1] == 'i' || test_str[$-1] == 'o'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == 'a' && test_str[$-1] == 'a')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'e' && test_str[$-1] == 'e')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'i' && test_str[$-1] == 'i')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'o' && test_str[$-1] == 'o')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'u' && test_str[$-1] == 'u')\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == 'a' && (test_str[$-1] == 'e' || test_str[$-1] == 'i' || test_str[$-1] == 'o' || test_str[$-1] == 'u'))\n\t\t\t\tcount++;\n\t\t\telse if(c == 'e' && (test_str[$-1] == 'a' || test_str[$-1] == 'i' || test_str[$-1] == 'o' || test_str[$-1] == 'u'))\n\t\t\t\tcount++;\n\t\t\telse if(c == 'i' && (test_str[$-1] == 'a' || test_str[$-1] == 'e' || test_str[$-1] == 'o' || test_str[$-1] == 'u'))\n\t\t\t\tcount++;\n\t\t\telse if(c == 'o' && (test_str[$-1] == 'a' || test_str[$-1] == 'e' || test_str[$-1] == 'i' || test_str[$-1] == 'u'))\n\t\t\t\tcount++;\n\t\t\telse if(c == 'u' && (test_str[$-1] == 'a' || test_str[$-1] == 'e' || test_str[$-1] == 'i' || test_str[$-1] == 'o'))\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == test_str[0] || c == test_str[$-1])\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(test_str[test_str.indexOf(c)-1] == 'a' || test_str[test_str.indexOf(c)-1] == 'e' || test_str[test_str.indexOf(c)-1] == 'i' || test_str[test_str.indexOf(c)-1] == 'o' || test_str[test_str.indexOf(c)-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t\telse if(test_str[test_str.indexOf(c)+1] == 'a' || test_str[test_str.indexOf(c)+1] == 'e' || test_str[test_str.indexOf(c)+1] == 'i' || test_str[test_str.indexOf(c)+1] == 'o' || test_str[test_str.indexOf(c)+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == test_str[0])\n\t\t\t{\n\t\t\t\tif(test_str[1] == 'a' || test_str[1] == 'e' || test_str[1] == 'i' || test_str[1] == 'o' || test_str[1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(c == test_str[$-1])\n\t\t\t{\n\t\t\t\tif(test_str[$-2] == 'a' || test_str[$-2] == 'e' || test_str[$-2] == 'i' || test_str[$-2] == 'o' || test_str[$-2] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(test_str[test_str.indexOf(c)-1] == 'a' || test_str[test_str.indexOf(c)-1] == 'e' || test_str[test_str.indexOf(c)-1] == 'i' || test_str[test_str.indexOf(c)-1] == 'o' || test_str[test_str.indexOf(c)-1] == 'u' || test_str[test_str.indexOf(c)+1] == 'a' || test_str[test_str.indexOf(c)+1] == 'e' || test_str[test_str.indexOf(c)+1] == 'i' || test_str[test_str.indexOf(c)+1] == 'o' || test_str[test_str.indexOf(c)+1] == 'u')\n\t\t\t\t{\n\t\t\t\t",
    "{\n\tlong count = 0;\n\tlong len = test_str.length;\n\t\n\tforeach(i; 0 .. len)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if(i == len-1)\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i",
    "{\n\tlong count = 0;\n\tlong i = 0;\n\tlong len = test_str.length;\n\twhile (i < len) \n\t{\n\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t{\n\t\t\tif (i == 0) \n\t\t\t{\n\t\t\t\tif (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (i == len - 1) \n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u' || test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t",
    "{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(count == 0)\n\t\t\t{\n\t\t\t\tif(test_str[1] == 'a' || test_str[1] == 'e' || test_str[1] == 'i' || test_str[1] == 'o' || test_str[1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(test_str[count - 1] == 'a' || test_str[count - 1] == 'e' || test_str[count - 1] == 'i' || test_str[count - 1] == 'o' || test_str[count - 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tlong i;\n\tlong length = test_str.length;\n\tfor (i = 0; i < length; i++) \n\t{\n\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t{\n\t\t\tif (i == 0) \n\t\t\t{\n\t\t\t\tif (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t} \n\t\t\telse if (i == length - 1) \n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u' || test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n",
    "{\n\tlong count = 0;\n\tlong i = 0;\n\tlong len = test_str.length;\n\t\n\twhile (i < len)\n\t{\n\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t{\n\t\t\tif (i == 0)\n\t\t\t{\n\t\t\t\tif (test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (i == len-1)\n\t\t\t{\n\t\t\t\tif (test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' || test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n",
    "{\n\tlong count = 0;\n\tlong i = 0;\n\tlong len = test_str.length;\n\t\n\tfor (i = 0; i < len; i++) \n\t{\n\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t{\n\t\t\tif (i == 0) \n\t\t\t{\n\t\t\t\tif (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t} \n\t\t\telse if (i == len - 1) \n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u' || test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t",
    "{\n\tlong count = 0;\n\tforeach(i, c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(i > 0 && (test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u'))\n\t\t\t\tcount++;\n\t\t\tif(i < test_str.length-1 && (test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u'))\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tlong len = test_str.length;\n\tlong i = 0;\n\twhile(i < len) \n\t{\n\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t{\n\t\t\tif(i == 0) \n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(i == len-1) \n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' || test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t",
    "{\n\tlong count = 0;\n\tlong len = test_str.length;\n\tforeach(i,c;test_str)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if(i == len-1)\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1]",
    "{\n\tlong count = 0;\n\tforeach (i, c; test_str) \n\t{\n\t\tif (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') \n\t\t{\n\t\t\tif (i > 0 && (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u')) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tif (i < test_str.length - 1 && (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u')) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == 'a' && test_str[$-1] == 'a')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'e' && test_str[$-1] == 'e')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'i' && test_str[$-1] == 'i')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'o' && test_str[$-1] == 'o')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'u' && test_str[$-1] == 'u')\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tforeach(i, c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(i > 0 && (test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u'))\n\t\t\t\tcount++;\n\t\t\tif(i < test_str.length - 1 && (test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u'))\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tforeach(i, c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(i > 0 && i < test_str.length - 1)\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t\tcount++;\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(i == 0)\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(i == test_str.length - 1)\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tlong len = test_str.length;\n\tfor (long i = 0; i < len; i++) {\n\t\tif (i == 0) {\n\t\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') {\n\t\t\t\tif (test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u') {\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (i == len-1) {\n\t\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') {\n\t\t\t\tif (test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u') {\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') {\n\t\t\t\tif (test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u') {\n\t\t\t\t\tcount++;\n",
    "{\n\tlong count = 0;\n\tlong i = 0;\n\tlong len = test_str.length;\n\t\n\twhile(i < len) \n\t{\n\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t{\n\t\t\tif(i == 0) \n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(i == len-1) \n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u') \n\t\t",
    "{\n\tlong count = 0;\n\tlong len = test_str.length;\n\tfor (long i = 0; i < len; i++) \n\t{\n\t\tif (i == 0 && (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')) \n\t\t{\n\t\t\tcount++;\n\t\t} \n\t\telse if (i == len - 1 && (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')) \n\t\t{\n\t\t\tcount++;\n\t\t} \n\t\telse if (i > 0 && i < len - 1 && (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')) \n\t\t{\n\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u' || test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u') \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong result = 0;\n\tlong i = 0;\n\tlong len = test_str.length;\n\twhile (i < len) \n\t{\n\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t{\n\t\t\tif (i < len - 1 && (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u')) \n\t\t\t{\n\t\t\t\tresult++;\n\t\t\t}\n\t\t\tif (i > 0 && (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u')) \n\t\t\t{\n\t\t\t\tresult++;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}",
    "{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == test_str[0])\n\t\t\t{\n\t\t\t\tif(test_str[1] == 'a' || test_str[1] == 'e' || test_str[1] == 'i' || test_str[1] == 'o' || test_str[1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(c == test_str[$-1])\n\t\t\t{\n\t\t\t\tif(test_str[$-2] == 'a' || test_str[$-2] == 'e' || test_str[$-2] == 'i' || test_str[$-2] == 'o' || test_str[$-2] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(test_str[test_str.indexOf(c)-1] == 'a' || test_str[test_str.indexOf(c)-1] == 'e' || test_str[test_str.indexOf(c)-1] == 'i' || test_str[test_str.indexOf(c)-1] == 'o' || test_str[test_str.indexOf(c)-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tif(test_str[test_str.indexOf(c)+1] == 'a' || test_str[test_str.indexOf(c)+1] == 'e' || test_str[test_str.indexOf(c)+1] == 'i' || test_str[test_str.indexOf(c)+1] == 'o' || test_str[test_str.indexOf(c)+1] == '",
    "{\n\tlong count = 0;\n\tlong len = test_str.length;\n\tfor (long i = 0; i < len; i++) \n\t{\n\t\tif (i == 0) \n\t\t{\n\t\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t\t{\n\t\t\t\tif (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if (i == len - 1) \n\t\t{\n\t\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse \n\t\t{\n\t\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' ||",
    "{\n\tlong count = 0;\n\t\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == 'a' && test_str[$-1] == 'a')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'e' && test_str[$-1] == 'e')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'i' && test_str[$-1] == 'i')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'o' && test_str[$-1] == 'o')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'u' && test_str[$-1] == 'u')\n\t\t\t\tcount++;\n\t\t}\n\t}\n\t\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tlong len = test_str.length;\n\tforeach(i; 0 .. len)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if(i == len - 1)\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' ||",
    "{\n\tlong count = 0;\n\tfor (int i = 0; i < test_str.length; i++) \n\t{\n\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t{\n\t\t\tif (i == 0) \n\t\t\t{\n\t\t\t\tif (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (i == test_str.length - 1) \n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u' || test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn",
    "{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == 'a' && (test_str[$-1] == 'e' || test_str[$-1] == 'i' || test_str[$-1] == 'o' || test_str[$-1] == 'u'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'e' && (test_str[$-1] == 'a' || test_str[$-1] == 'i' || test_str[$-1] == 'o' || test_str[$-1] == 'u'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'i' && (test_str[$-1] == 'a' || test_str[$-1] == 'e' || test_str[$-1] == 'o' || test_str[$-1] == 'u'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'o' && (test_str[$-1] == 'a' || test_str[$-1] == 'e' || test_str[$-1] == 'i' || test_str[$-1] == 'u'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'u' && (test_str[$-1] == 'a' || test_str[$-1] == 'e' || test_str[$-1] == 'i' || test_str[$-1] == 'o'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == 'a' && (test_str[$-1] == 'e' || test_str[$-1] == 'i' || test_str[$-1] == 'o' || test_str[$-1] == 'u'))\n\t\t\t\tcount++;\n\t\t\telse if(c == 'e' && (test_str[$-1] == 'a' || test_str[$-1] == 'i' || test_str[$-1] == 'o' || test_str[$-1] == 'u'))\n\t\t\t\tcount++;\n\t\t\telse if(c == 'i' && (test_str[$-1] == 'a' || test_str[$-1] == 'e' || test_str[$-1] == 'o' || test_str[$-1] == 'u'))\n\t\t\t\tcount++;\n\t\t\telse if(c == 'o' && (test_str[$-1] == 'a' || test_str[$-1] == 'e' || test_str[$-1] == 'i' || test_str[$-1] == 'u'))\n\t\t\t\tcount++;\n\t\t\telse if(c == 'u' && (test_str[$-1] == 'a' || test_str[$-1] == 'e' || test_str[$-1] == 'i' || test_str[$-1] == 'o'))\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tlong i = 0;\n\tlong len = test_str.length;\n\twhile (i < len)\n\t{\n\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t{\n\t\t\tif (i == 0)\n\t\t\t{\n\t\t\t\tif (test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (i == len - 1)\n\t\t\t{\n\t\t\t\tif (test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' || test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn",
    "{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == test_str[0])\n\t\t\t{\n\t\t\t\tif(test_str[1] == 'a' || test_str[1] == 'e' || test_str[1] == 'i' || test_str[1] == 'o' || test_str[1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(c == test_str[$-1])\n\t\t\t{\n\t\t\t\tif(test_str[$-2] == 'a' || test_str[$-2] == 'e' || test_str[$-2] == 'i' || test_str[$-2] == 'o' || test_str[$-2] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(test_str[test_str.indexOf(c)-1] == 'a' || test_str[test_str.indexOf(c)-1] == 'e' || test_str[test_str.indexOf(c)-1] == 'i' || test_str[test_str.indexOf(c)-1] == 'o' || test_str[test_str.indexOf(c)-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tif(test_str[test_str.indexOf(c)+1] == 'a' || test_str[test_str.indexOf(c)+1] == 'e' || test_str[test_str.indexOf(c)+1] == 'i' || test_str[test_str.indexOf(c)+1] == 'o' || test_str[test_str.indexOf(c)+1] == '",
    "{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == test_str[0] || c == test_str[$-1])\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(test_str[test_str.indexOf(c)-1] == 'a' || test_str[test_str.indexOf(c)-1] == 'e' || test_str[test_str.indexOf(c)-1] == 'i' || test_str[test_str.indexOf(c)-1] == 'o' || test_str[test_str.indexOf(c)-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t\tif(test_str[test_str.indexOf(c)+1] == 'a' || test_str[test_str.indexOf(c)+1] == 'e' || test_str[test_str.indexOf(c)+1] == 'i' || test_str[test_str.indexOf(c)+1] == 'o' || test_str[test_str.indexOf(c)+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tforeach(char c; test_str) {\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n\t\t\tif(c == test_str[0]) {\n\t\t\t\tif(test_str[1] == 'a' || test_str[1] == 'e' || test_str[1] == 'i' || test_str[1] == 'o' || test_str[1] == 'u') {\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(c == test_str[$-1]) {\n\t\t\t\tif(test_str[$-2] == 'a' || test_str[$-2] == 'e' || test_str[$-2] == 'i' || test_str[$-2] == 'o' || test_str[$-2] == 'u') {\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif(test_str[$-1] == 'a' || test_str[$-1] == 'e' || test_str[$-1] == 'i' || test_str[$-1] == 'o' || test_str[$-1] == 'u') {\n\t\t\t\t\tif(test_str[1] == 'a' || test_str[1] == 'e' || test_str[1] == 'i' || test_str[1] == 'o' || test_str[1] == 'u') {\n\t\t\t\t\t\tcount++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tfor (int i = 0; i < test_str.length; i++)\n\t{\n\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t{\n\t\t\tif (i == 0)\n\t\t\t{\n\t\t\t\tif (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (i == test_str.length - 1)\n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u' || test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == 'a')\n\t\t\t{\n\t\t\t\tif(c+1 == 'e' || c+1 == 'i' || c+1 == 'o' || c+1 == 'u')\n\t\t\t\t\tcount++;\n\t\t\t\tif(c-1 == 'e' || c-1 == 'i' || c-1 == 'o' || c-1 == 'u')\n\t\t\t\t\tcount++;\n\t\t\t}\n\t\t\tif(c == 'e')\n\t\t\t{\n\t\t\t\tif(c+1 == 'a' || c+1 == 'i' || c+1 == 'o' || c+1 == 'u')\n\t\t\t\t\tcount++;\n\t\t\t\tif(c-1 == 'a' || c-1 == 'i' || c-1 == 'o' || c-1 == 'u')\n\t\t\t\t\tcount++;\n\t\t\t}\n\t\t\tif(c == 'i')\n\t\t\t{\n\t\t\t\tif(c+1 == 'a' || c+1 == 'e' || c+1 == 'o' || c+1 == 'u')\n\t\t\t\t\tcount++;\n\t\t\t\tif(c-1 == 'a' || c-1 == 'e' || c-1 == 'o' || c-1 == 'u')\n\t\t\t\t\tcount++;\n\t\t\t}\n\t\t\tif(c == 'o')\n\t\t\t{\n\t\t\t\tif(c+1 == 'a' || c+1 == 'e' || c+1 == 'i' || c+1 == 'u')\n\t\t\t\t\tcount++;\n\t\t\t\tif(c-1 == 'a' || c-1 == 'e' || c-1 == 'i' || c-1 == 'u')\n\t\t\t\t\tcount++;\n\t\t",
    "{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == test_str[0] || c == test_str[$-1])\n\t\t\t\tcontinue;\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(test_str[test_str.indexOf(c)-1] == 'a' || test_str[test_str.indexOf(c)-1] == 'e' || test_str[test_str.indexOf(c)-1] == 'i' || test_str[test_str.indexOf(c)-1] == 'o' || test_str[test_str.indexOf(c)-1] == 'u')\n\t\t\t\t\tcount++;\n\t\t\t\tif(test_str[test_str.indexOf(c)+1] == 'a' || test_str[test_str.indexOf(c)+1] == 'e' || test_str[test_str.indexOf(c)+1] == 'i' || test_str[test_str.indexOf(c)+1] == 'o' || test_str[test_str.indexOf(c)+1] == 'u')\n\t\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tlong len = test_str.length;\n\tforeach(i; 0..len)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if(i == len-1)\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' ||",
    "{\n\tlong count = 0;\n\tint i = 0;\n\twhile (i < test_str.length)\n\t{\n\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t{\n\t\t\tif (i != 0 && i != test_str.length - 1)\n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t\tif (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (i == 0)\n\t\t\t{\n\t\t\t\tif (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (i == test_str.length - 1)\n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u')\n",
    "{\n\tlong count = 0;\n\tlong i = 0;\n\tlong len = test_str.length;\n\t\n\tfor(i = 0; i < len; i++)\n\t{\n\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t{\n\t\t\tif(i == 0)\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(i == len - 1)\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' || test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}",
    "{\n\tlong count = 0;\n\tlong len = test_str.length;\n\tforeach(i; 0 .. len)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if(i == len-1)\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' ||",
    "{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(test_str.indexOf(c) == 0)\n\t\t\t{\n\t\t\t\tif(test_str[1] == 'a' || test_str[1] == 'e' || test_str[1] == 'i' || test_str[1] == 'o' || test_str[1] == 'u')\n\t\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(test_str.indexOf(c) == test_str.length - 1)\n\t\t\t{\n\t\t\t\tif(test_str[test_str.length - 2] == 'a' || test_str[test_str.length - 2] == 'e' || test_str[test_str.length - 2] == 'i' || test_str[test_str.length - 2] == 'o' || test_str[test_str.length - 2] == 'u')\n\t\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(test_str[test_str.indexOf(c) - 1] == 'a' || test_str[test_str.indexOf(c) - 1] == 'e' || test_str[test_str.indexOf(c) - 1] == 'i' || test_str[test_str.indexOf(c) - 1] == 'o' || test_str[test_str.indexOf(c) - 1] == 'u')\n\t\t\t\t\tcount++;\n\t\t\t\tif(test_str[test_str.indexOf(c) + 1] == 'a' || test_str[test_str.indexOf(c) + 1] == 'e' || test_str[test_str.indexOf(c) + 1] == 'i' || test_str[test_str.indexOf(c) + 1] == 'o'",
    "{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == 'a' && test_str[$-1] == 'a')\n\t\t\t\tcount++;\n\t\t\tif(c == 'e' && test_str[$-1] == 'e')\n\t\t\t\tcount++;\n\t\t\tif(c == 'i' && test_str[$-1] == 'i')\n\t\t\t\tcount++;\n\t\t\tif(c == 'o' && test_str[$-1] == 'o')\n\t\t\t\tcount++;\n\t\t\tif(c == 'u' && test_str[$-1] == 'u')\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tlong length = test_str.length;\n\tforeach (i; 0 .. length)\n\t{\n\t\tif (i == 0)\n\t\t{\n\t\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if (i == length - 1)\n\t\t{\n\t\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' ||",
    "{\n\tlong count = 0;\n\tfor (int i = 0; i < test_str.length; i++) \n\t{\n\t\tif (i == 0) \n\t\t{\n\t\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t\t{\n\t\t\t\tif (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if (i == test_str.length - 1) \n\t\t{\n\t\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse \n\t\t{\n\t\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str",
    "{\n\tlong count = 0;\n\tfor (long i = 0; i < test_str.length; i++)\n\t{\n\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t{\n\t\t\tif (i > 0 && (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tif (i < test_str.length - 1 && (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tlong len = test_str.length;\n\tforeach(i, c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(i > 0)\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(i < len-1)\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tlong len = test_str.length;\n\tfor (long i = 0; i < len; i++) \n\t{\n\t\tif (i == 0) \n\t\t{\n\t\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t\t{\n\t\t\t\tif (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t} \n\t\telse if (i == len - 1) \n\t\t{\n\t\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t\t{\n\t\t\t\tif (test_str[i + 1] == 'a' || test_str[i + 1] == 'e",
    "{\n\tlong count = 0;\n\tlong i = 0;\n\tlong len = test_str.length;\n\twhile(i < len) {\n\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') {\n\t\t\tif(i > 0 && (test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tif(i < len-1 && (test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tlong len = test_str.length;\n\t\n\tforeach(i; 0 .. len)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if(i == len-1)\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i",
    "{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == 'a' && test_str[$-1] == 'a')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'e' && test_str[$-1] == 'e')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'i' && test_str[$-1] == 'i')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'o' && test_str[$-1] == 'o')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'u' && test_str[$-1] == 'u')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tlong len = test_str.length;\n\tfor (long i = 0; i < len; i++) \n\t{\n\t\tif (i == 0) \n\t\t{\n\t\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t\t{\n\t\t\t\tif (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t} \n\t\telse if (i == len - 1) \n\t\t{\n\t\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e",
    "{\n\tlong count = 0;\n\tlong len = test_str.length;\n\tforeach(i; 0 .. len)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if(i == len-1)\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' ||",
    "{\n\tlong count = 0;\n\tlong i = 0;\n\tlong len = test_str.length;\n\t\n\twhile (i < len) \n\t{\n\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t{\n\t\t\tif (i == 0) \n\t\t\t{\n\t\t\t\tif (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (i == len - 1) \n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u' || test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n",
    "{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == 'a' && (test_str[$-1] == 'e' || test_str[$-1] == 'i' || test_str[$-1] == 'o' || test_str[$-1] == 'u'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'e' && (test_str[$-1] == 'a' || test_str[$-1] == 'i' || test_str[$-1] == 'o' || test_str[$-1] == 'u'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'i' && (test_str[$-1] == 'a' || test_str[$-1] == 'e' || test_str[$-1] == 'o' || test_str[$-1] == 'u'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'o' && (test_str[$-1] == 'a' || test_str[$-1] == 'e' || test_str[$-1] == 'i' || test_str[$-1] == 'u'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'u' && (test_str[$-1] == 'a' || test_str[$-1] == 'e' || test_str[$-1] == 'i' || test_str[$-1] == 'o'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == 'a' && (test_str[$-1] == 'e' || test_str[$-1] == 'i' || test_str[$-1] == 'o' || test_str[$-1] == 'u'))\n\t\t\t\tcount++;\n\t\t\telse if(c == 'e' && (test_str[$-1] == 'a' || test_str[$-1] == 'i' || test_str[$-1] == 'o' || test_str[$-1] == 'u'))\n\t\t\t\tcount++;\n\t\t\telse if(c == 'i' && (test_str[$-1] == 'a' || test_str[$-1] == 'e' || test_str[$-1] == 'o' || test_str[$-1] == 'u'))\n\t\t\t\tcount++;\n\t\t\telse if(c == 'o' && (test_str[$-1] == 'a' || test_str[$-1] == 'e' || test_str[$-1] == 'i' || test_str[$-1] == 'u'))\n\t\t\t\tcount++;\n\t\t\telse if(c == 'u' && (test_str[$-1] == 'a' || test_str[$-1] == 'e' || test_str[$-1] == 'i' || test_str[$-1] == 'o'))\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tlong len = test_str.length;\n\tforeach(i; 0 .. len)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if(i == len - 1)\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' ||",
    "{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == test_str[0] || c == test_str[$-1])\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(test_str[test_str.indexOf(c)-1] == 'a' || test_str[test_str.indexOf(c)-1] == 'e' || test_str[test_str.indexOf(c)-1] == 'i' || test_str[test_str.indexOf(c)-1] == 'o' || test_str[test_str.indexOf(c)-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t\tif(test_str[test_str.indexOf(c)+1] == 'a' || test_str[test_str.indexOf(c)+1] == 'e' || test_str[test_str.indexOf(c)+1] == 'i' || test_str[test_str.indexOf(c)+1] == 'o' || test_str[test_str.indexOf(c)+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == test_str[0] || c == test_str[$-1])\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(test_str[test_str.indexOf(c)-1] == 'a' || test_str[test_str.indexOf(c)-1] == 'e' || test_str[test_str.indexOf(c)-1] == 'i' || test_str[test_str.indexOf(c)-1] == 'o' || test_str[test_str.indexOf(c)-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t\tif(test_str[test_str.indexOf(c)+1] == 'a' || test_str[test_str.indexOf(c)+1] == 'e' || test_str[test_str.indexOf(c)+1] == 'i' || test_str[test_str.indexOf(c)+1] == 'o' || test_str[test_str.indexOf(c)+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tlong len = test_str.length;\n\tfor (long i = 0; i < len; i++) \n\t{\n\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t{\n\t\t\tif (i > 0 && (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u')) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tif (i < len - 1 && (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u')) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == test_str[0] || c == test_str[$-1])\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse if(test_str[test_str.indexOf(c)-1] == 'a' || test_str[test_str.indexOf(c)-1] == 'e' || test_str[test_str.indexOf(c)-1] == 'i' || test_str[test_str.indexOf(c)-1] == 'o' || test_str[test_str.indexOf(c)-1] == 'u' || test_str[test_str.indexOf(c)+1] == 'a' || test_str[test_str.indexOf(c)+1] == 'e' || test_str[test_str.indexOf(c)+1] == 'i' || test_str[test_str.indexOf(c)+1] == 'o' || test_str[test_str.indexOf(c)+1] == 'u')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tlong len = test_str.length;\n\tforeach(i; 0 .. len)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if(i == len-1)\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' ||",
    "{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == 'a' && (test_str[$-1] == 'e' || test_str[$-1] == 'i' || test_str[$-1] == 'o' || test_str[$-1] == 'u'))\n\t\t\t\tcount++;\n\t\t\telse if(c == 'e' && (test_str[$-1] == 'a' || test_str[$-1] == 'i' || test_str[$-1] == 'o' || test_str[$-1] == 'u'))\n\t\t\t\tcount++;\n\t\t\telse if(c == 'i' && (test_str[$-1] == 'a' || test_str[$-1] == 'e' || test_str[$-1] == 'o' || test_str[$-1] == 'u'))\n\t\t\t\tcount++;\n\t\t\telse if(c == 'o' && (test_str[$-1] == 'a' || test_str[$-1] == 'e' || test_str[$-1] == 'i' || test_str[$-1] == 'u'))\n\t\t\t\tcount++;\n\t\t\telse if(c == 'u' && (test_str[$-1] == 'a' || test_str[$-1] == 'e' || test_str[$-1] == 'i' || test_str[$-1] == 'o'))\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tlong i = 0;\n\tlong len = test_str.length;\n\twhile(i < len)\n\t{\n\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t{\n\t\t\tif(i == 0)\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(i == len-1)\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' || test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn",
    "{\n\tlong count = 0;\n\tlong i = 0;\n\tlong len = test_str.length;\n\tchar[] vowels = ['a', 'e', 'i', 'o', 'u'];\n\t\n\twhile (i < len) \n\t{\n\t\tif (test_str[i] in vowels) \n\t\t{\n\t\t\tif (i == 0) \n\t\t\t{\n\t\t\t\tif (test_str[i + 1] in vowels) \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t} \n\t\t\telse if (i == len - 1) \n\t\t\t{\n\t\t\t\tif (test_str[i - 1] in vowels) \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tif (test_str[i - 1] in vowels || test_str[i + 1] in vowels) \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tlong len = test_str.length;\n\tfor (long i = 0; i < len; i++) \n\t{\n\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t{\n\t\t\tif (i == 0) \n\t\t\t{\n\t\t\t\tif (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (i == len - 1) \n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u' || test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}",
    "{\n\tlong count = 0;\n\tfor (long i = 0; i < test_str.length; i++) \n\t{\n\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t{\n\t\t\tif (i == 0) \n\t\t\t{\n\t\t\t\tif (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t} \n\t\t\telse if (i == test_str.length - 1) \n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u' || test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n",
    "{\n\tlong count = 0;\n\tforeach(c; test_str) \n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') \n\t\t{\n\t\t\tif(c == test_str[0] || c == test_str[$-1]) \n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tif(test_str[test_str.indexOf(c)-1] == 'a' || test_str[test_str.indexOf(c)-1] == 'e' || test_str[test_str.indexOf(c)-1] == 'i' || test_str[test_str.indexOf(c)-1] == 'o' || test_str[test_str.indexOf(c)-1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t\tif(test_str[test_str.indexOf(c)+1] == 'a' || test_str[test_str.indexOf(c)+1] == 'e' || test_str[test_str.indexOf(c)+1] == 'i' || test_str[test_str.indexOf(c)+1] == 'o' || test_str[test_str.indexOf(c)+1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tforeach(char c; test_str) {\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n\t\t\tif(c == 'a') {\n\t\t\t\tif(c+1 == 'e' || c+1 == 'i' || c+1 == 'o' || c+1 == 'u') {\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(c == 'e') {\n\t\t\t\tif(c+1 == 'i' || c+1 == 'o' || c+1 == 'u') {\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(c == 'i') {\n\t\t\t\tif(c+1 == 'o' || c+1 == 'u') {\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(c == 'o') {\n\t\t\t\tif(c+1 == 'u') {\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(c == 'u') {\n\t\t\t\tif(c+1 == 'a' || c+1 == 'e' || c+1 == 'i' || c+1 == 'o' || c+1 == 'u') {\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == test_str[0])\n\t\t\t{\n\t\t\t\tif(test_str[1] == 'a' || test_str[1] == 'e' || test_str[1] == 'i' || test_str[1] == 'o' || test_str[1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(c == test_str[$-1])\n\t\t\t{\n\t\t\t\tif(test_str[$-2] == 'a' || test_str[$-2] == 'e' || test_str[$-2] == 'i' || test_str[$-2] == 'o' || test_str[$-2] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(test_str[$-1] == 'a' || test_str[$-1] == 'e' || test_str[$-1] == 'i' || test_str[$-1] == 'o' || test_str[$-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t\tif(test_str[1] == 'a' || test_str[1] == 'e' || test_str[1] == 'i' || test_str[1] == 'o' || test_str[1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tlong i = 0;\n\tlong len = test_str.length;\n\twhile (i < len) \n\t{\n\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t{\n\t\t\tif (i == 0) \n\t\t\t{\n\t\t\t\tif (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t} \n\t\t\telse if (i == len - 1) \n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tif (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u' || test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n",
    "{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == test_str[0] || c == test_str[$-1])\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(test_str[test_str.indexOf(c)-1] == 'a' || test_str[test_str.indexOf(c)-1] == 'e' || test_str[test_str.indexOf(c)-1] == 'i' || test_str[test_str.indexOf(c)-1] == 'o' || test_str[test_str.indexOf(c)-1] == 'u' || test_str[test_str.indexOf(c)+1] == 'a' || test_str[test_str.indexOf(c)+1] == 'e' || test_str[test_str.indexOf(c)+1] == 'i' || test_str[test_str.indexOf(c)+1] == 'o' || test_str[test_str.indexOf(c)+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == 'a' && test_str[$-1] == 'a')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'e' && test_str[$-1] == 'e')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'i' && test_str[$-1] == 'i')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'o' && test_str[$-1] == 'o')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'u' && test_str[$-1] == 'u')\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tlong len = test_str.length;\n\tfor (long i = 0; i < len; i++)\n\t{\n\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t{\n\t\t\tif (i > 0 && i < len - 1)\n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u' ||\n\t\t\t\t\ttest_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (i == 0)\n\t\t\t{\n\t\t\t\tif (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (i == len - 1)\n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t",
    "{\n\tlong count = 0;\n\tlong len = test_str.length;\n\tforeach(i; 0 .. len) \n\t{\n\t\tif(i == 0) \n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t\t{\n\t\t\t\tif(test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if(i == len - 1) \n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t\t{\n\t\t\t\tif(test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse \n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t\t{\n\t\t\t\tif(test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[",
    "{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == 'a' && (test_str[$-1] == 'e' || test_str[$-1] == 'i' || test_str[$-1] == 'o' || test_str[$-1] == 'u'))\n\t\t\t\tcount++;\n\t\t\telse if(c == 'e' && (test_str[$-1] == 'a' || test_str[$-1] == 'i' || test_str[$-1] == 'o' || test_str[$-1] == 'u'))\n\t\t\t\tcount++;\n\t\t\telse if(c == 'i' && (test_str[$-1] == 'a' || test_str[$-1] == 'e' || test_str[$-1] == 'o' || test_str[$-1] == 'u'))\n\t\t\t\tcount++;\n\t\t\telse if(c == 'o' && (test_str[$-1] == 'a' || test_str[$-1] == 'e' || test_str[$-1] == 'i' || test_str[$-1] == 'u'))\n\t\t\t\tcount++;\n\t\t\telse if(c == 'u' && (test_str[$-1] == 'a' || test_str[$-1] == 'e' || test_str[$-1] == 'i' || test_str[$-1] == 'o'))\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tfor (long i = 0; i < test_str.length; i++) \n\t{\n\t\tif (i == 0) \n\t\t{\n\t\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t\t{\n\t\t\t\tif (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if (i == test_str.length - 1) \n\t\t{\n\t\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse \n\t\t{\n\t\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t\t{\n\t\t\t\tif (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str",
    "{\n\tlong count = 0;\n\tlong len = test_str.length;\n\tforeach(i, c; test_str)\n\t{\n\t\tif(i < len - 1)\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tlong i = 0;\n\tlong len = test_str.length;\n\twhile(i < len)\n\t{\n\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t{\n\t\t\tif(i == 0)\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(i == len - 1)\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;",
    "{\n\tlong count = 0;\n\tlong len = test_str.length;\n\tfor(long i = 0; i < len; i++)\n\t{\n\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t{\n\t\t\tif(i == 0)\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(i == len-1)\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' || test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\n",
    "{\n\tlong count = 0;\n\tlong i = 0;\n\tlong len = test_str.length;\n\twhile(i < len)\n\t{\n\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t{\n\t\t\tif(i == 0)\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(i == len-1)\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' || test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn",
    "{\n\tlong count = 0;\n\tlong len = test_str.length;\n\tforeach(i, c; test_str)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if(i == len - 1)\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t\tif(test_str[i + 1] == 'a' || test_str[i + 1]",
    "{\n\tlong count = 0;\n\tlong i = 0;\n\tlong len = test_str.length;\n\t\n\twhile (i < len)\n\t{\n\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t{\n\t\t\tif (i == 0)\n\t\t\t{\n\t\t\t\tif (test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (i == len-1)\n\t\t\t{\n\t\t\t\tif (test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' || test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n",
    "{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == test_str[$-1] || c == test_str[$-2])\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tlong i = 0;\n\tlong len = test_str.length;\n\tfor (i = 0; i < len; i++) {\n\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') {\n\t\t\tif (i == 0) {\n\t\t\t\tif (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u') {\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (i == len - 1) {\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u') {\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u' || test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u') {\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == 'a' && (test_str[$-1] == 'e' || test_str[$-1] == 'i' || test_str[$-1] == 'o' || test_str[$-1] == 'u'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'e' && (test_str[$-1] == 'a' || test_str[$-1] == 'i' || test_str[$-1] == 'o' || test_str[$-1] == 'u'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'i' && (test_str[$-1] == 'a' || test_str[$-1] == 'e' || test_str[$-1] == 'o' || test_str[$-1] == 'u'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'o' && (test_str[$-1] == 'a' || test_str[$-1] == 'e' || test_str[$-1] == 'i' || test_str[$-1] == 'u'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'u' && (test_str[$-1] == 'a' || test_str[$-1] == 'e' || test_str[$-1] == 'i' || test_str[$-1] == 'o'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tlong i = 0;\n\tlong len = test_str.length;\n\t\n\twhile (i < len)\n\t{\n\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t{\n\t\t\tif (i == 0)\n\t\t\t{\n\t\t\t\tif (test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (i == len-1)\n\t\t\t{\n\t\t\t\tif (test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' || test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n",
    "{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == 'a' && (test_str[$-1] == 'e' || test_str[$-1] == 'i' || test_str[$-1] == 'o' || test_str[$-1] == 'u'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'e' && (test_str[$-1] == 'a' || test_str[$-1] == 'i' || test_str[$-1] == 'o' || test_str[$-1] == 'u'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'i' && (test_str[$-1] == 'a' || test_str[$-1] == 'e' || test_str[$-1] == 'o' || test_str[$-1] == 'u'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'o' && (test_str[$-1] == 'a' || test_str[$-1] == 'e' || test_str[$-1] == 'i' || test_str[$-1] == 'u'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'u' && (test_str[$-1] == 'a' || test_str[$-1] == 'e' || test_str[$-1] == 'i' || test_str[$-1] == 'o'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == 'a' && test_str[$-1] == 'a')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'e' && test_str[$-1] == 'e')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'i' && test_str[$-1] == 'i')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'o' && test_str[$-1] == 'o')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'u' && test_str[$-1] == 'u')\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tforeach(i, c; test_str)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if(i == test_str.length - 1)\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' || test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_",
    "{\n\tlong count = 0;\n\tlong len = test_str.length;\n\tfor (long i = 0; i < len; i++)\n\t{\n\t\tif (i == 0)\n\t\t{\n\t\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if (i == len - 1)\n\t\t{\n\t\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] ==",
    "{\n\tlong count = 0;\n\tlong len = test_str.length;\n\tfor (long i = 0; i < len; i++)\n\t{\n\t\tif (i == 0)\n\t\t{\n\t\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif (test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if (i == len-1)\n\t\t{\n\t\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif (test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif (test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] ==",
    "{\n\tlong count = 0;\n\tlong len = test_str.length;\n\tforeach(i,c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(i > 0)\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(i < len-1)\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tlong i = 0;\n\tlong len = test_str.length;\n\twhile(i < len)\n\t{\n\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t{\n\t\t\tif(i == 0)\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(i == len-1)\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' || test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn",
    "{\n\tlong count = 0;\n\tlong len = test_str.length;\n\tforeach(i, c; test_str)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if(i == len - 1)\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1]",
    "{\n\tlong count = 0;\n\tlong len = test_str.length;\n\tfor (long i = 0; i < len; i++) \n\t{\n\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t{\n\t\t\tif (i == 0) \n\t\t\t{\n\t\t\t\tif (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (i == len - 1) \n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u' || test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}",
    "{\n\tlong count = 0;\n\tlong len = test_str.length;\n\tforeach(i; 0..len)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if(i == len-1)\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' ||",
    "{\n\tlong count = 0;\n\tlong len = test_str.length;\n\tlong i = 0;\n\tfor (i = 0; i < len; i++) \n\t{\n\t\tif (i == 0) \n\t\t{\n\t\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t\t{\n\t\t\t\tif (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if (i == len - 1) \n\t\t{\n\t\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse \n\t\t{\n\t\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t\t{\n\t\t\t\tif (test_str[i + 1] == 'a' || test_str[i + 1",
    "{\n\tlong count = 0;\n\tlong i = 0;\n\tlong len = test_str.length;\n\twhile(i < len)\n\t{\n\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t{\n\t\t\tif(i == 0)\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(i == len-1)\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' || test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn",
    "{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == 'a' && test_str[$-1] == 'a')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'e' && test_str[$-1] == 'e')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'i' && test_str[$-1] == 'i')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'o' && test_str[$-1] == 'o')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'u' && test_str[$-1] == 'u')\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tlong i = 0;\n\tlong len = test_str.length;\n\twhile (i < len)\n\t{\n\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t{\n\t\t\tif (i == 0)\n\t\t\t{\n\t\t\t\tif (test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (i == len - 1)\n\t\t\t{\n\t\t\t\tif (test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' || test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn",
    "{\n\tlong count = 0;\n\tlong i = 0;\n\tlong len = test_str.length;\n\t\n\twhile (i < len)\n\t{\n\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t{\n\t\t\tif (i == 0)\n\t\t\t{\n\t\t\t\tif (test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (i == len - 1)\n\t\t\t{\n\t\t\t\tif (test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' || test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n",
    "{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == test_str[0] || c == test_str[$-1])\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(test_str[test_str.indexOf(c)-1] == 'a' || test_str[test_str.indexOf(c)-1] == 'e' || test_str[test_str.indexOf(c)-1] == 'i' || test_str[test_str.indexOf(c)-1] == 'o' || test_str[test_str.indexOf(c)-1] == 'u' || test_str[test_str.indexOf(c)+1] == 'a' || test_str[test_str.indexOf(c)+1] == 'e' || test_str[test_str.indexOf(c)+1] == 'i' || test_str[test_str.indexOf(c)+1] == 'o' || test_str[test_str.indexOf(c)+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tint i = 0;\n\tforeach(c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(i > 0 && (test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(i < test_str.length - 1 && (test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == test_str[0])\n\t\t\t\tcount++;\n\t\t\telse if(c == test_str[$-1])\n\t\t\t\tcount++;\n\t\t\telse if(test_str[$-1] == 'a' || test_str[$-1] == 'e' || test_str[$-1] == 'i' || test_str[$-1] == 'o' || test_str[$-1] == 'u')\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tforeach(char c; test_str) \n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == 'a' && (test_str[$ - 1] == 'a' || test_str[$ - 1] == 'e' || test_str[$ - 1] == 'i' || test_str[$ - 1] == 'o' || test_str[$ - 1] == 'u'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'e' && (test_str[$ - 1] == 'a' || test_str[$ - 1] == 'e' || test_str[$ - 1] == 'i' || test_str[$ - 1] == 'o' || test_str[$ - 1] == 'u'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'i' && (test_str[$ - 1] == 'a' || test_str[$ - 1] == 'e' || test_str[$ - 1] == 'i' || test_str[$ - 1] == 'o' || test_str[$ - 1] == 'u'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'o' && (test_str[$ - 1] == 'a' || test_str[$ - 1] == 'e' || test_str[$ - 1] == 'i' || test_str[$ - 1] == 'o' || test_str[$ - 1] == 'u'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'u' && (test_str[$ - 1] == 'a' || test_str[$ - 1] == 'e' || test_str[$ - 1] == 'i' || test_str[$ - 1] == 'o' ||",
    "{\n\tlong count = 0;\n\tlong len = test_str.length;\n\tforeach(i, c; test_str)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if(i == len-1)\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' || test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1]",
    "{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == 'a' && test_str[$-1] == 'a')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'e' && test_str[$-1] == 'e')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'i' && test_str[$-1] == 'i')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'o' && test_str[$-1] == 'o')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'u' && test_str[$-1] == 'u')\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tforeach(char ch; test_str)\n\t{\n\t\tif(ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u')\n\t\t{\n\t\t\tif(ch == 'a' && (test_str[$-1] == 'e' || test_str[$-1] == 'i' || test_str[$-1] == 'o' || test_str[$-1] == 'u'))\n\t\t\t\tcount++;\n\t\t\telse if(ch == 'e' && (test_str[$-1] == 'a' || test_str[$-1] == 'i' || test_str[$-1] == 'o' || test_str[$-1] == 'u'))\n\t\t\t\tcount++;\n\t\t\telse if(ch == 'i' && (test_str[$-1] == 'a' || test_str[$-1] == 'e' || test_str[$-1] == 'o' || test_str[$-1] == 'u'))\n\t\t\t\tcount++;\n\t\t\telse if(ch == 'o' && (test_str[$-1] == 'a' || test_str[$-1] == 'e' || test_str[$-1] == 'i' || test_str[$-1] == 'u'))\n\t\t\t\tcount++;\n\t\t\telse if(ch == 'u' && (test_str[$-1] == 'a' || test_str[$-1] == 'e' || test_str[$-1] == 'i' || test_str[$-1] == 'o'))\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == 'a' && test_str[$-1] == 'a')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'e' && test_str[$-1] == 'e')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'i' && test_str[$-1] == 'i')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'o' && test_str[$-1] == 'o')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'u' && test_str[$-1] == 'u')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tlong len = test_str.length;\n\tfor (long i = 0; i < len; i++) \n\t{\n\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t{\n\t\t\tif (i == 0) \n\t\t\t{\n\t\t\t\tif (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (i == len - 1) \n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u' || test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}",
    "{\n\tlong count = 0;\n\tlong i = 0;\n\tlong len = test_str.length;\n\twhile (i < len)\n\t{\n\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t{\n\t\t\tif (i > 0 && i < len - 1)\n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u' ||\n\t\t\t\t\ttest_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (i == 0)\n\t\t\t{\n\t\t\t\tif (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (i == len - 1)\n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t",
    "{\n\tlong count = 0;\n\tforeach(char c; test_str) \n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') \n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == test_str[0])\n\t\t\t{\n\t\t\t\tif(test_str[1] == 'a' || test_str[1] == 'e' || test_str[1] == 'i' || test_str[1] == 'o' || test_str[1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(c == test_str[$-1])\n\t\t\t{\n\t\t\t\tif(test_str[$-2] == 'a' || test_str[$-2] == 'e' || test_str[$-2] == 'i' || test_str[$-2] == 'o' || test_str[$-2] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(test_str[test_str.indexOf(c)-1] == 'a' || test_str[test_str.indexOf(c)-1] == 'e' || test_str[test_str.indexOf(c)-1] == 'i' || test_str[test_str.indexOf(c)-1] == 'o' || test_str[test_str.indexOf(c)-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tif(test_str[test_str.indexOf(c)+1] == 'a' || test_str[test_str.indexOf(c)+1] == 'e' || test_str[test_str.indexOf(c)+1] == 'i' || test_str[test_str.indexOf(c)+1] == 'o' || test_str[test_str.indexOf(c)+1] == '",
    "{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tlong len = test_str.length;\n\tfor(long i = 0; i < len; i++)\n\t{\n\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t{\n\t\t\tif(i == 0)\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(i == len - 1)\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' || test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\n",
    "{\n\tlong count = 0;\n\tlong len = test_str.length;\n\tforeach(i; 0 .. len)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if(i == len-1)\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' ||",
    "{\n\tlong count = 0;\n\tfor (long i = 0; i < test_str.length; i++) \n\t{\n\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t{\n\t\t\tif (i == 0) \n\t\t\t{\n\t\t\t\tif (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (i == test_str.length - 1) \n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u' || test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn",
    "{\n\tlong count = 0;\n\tlong len = test_str.length;\n\tfor(long i = 0; i < len; i++)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if(i == len-1)\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] ==",
    "{\n\tlong count = 0;\n\tlong i = 0;\n\tlong len = test_str.length;\n\t\n\tif (len == 0)\n\t\treturn 0;\n\t\n\tif (len == 1)\n\t\treturn isVowel(test_str[0]) ? 1 : 0;\n\t\n\tif (isVowel(test_str[0]))\n\t\tcount++;\n\t\n\tif (isVowel(test_str[len - 1]))\n\t\tcount++;\n\t\n\tfor (i = 1; i < len - 1; i++)\n\t{\n\t\tif (isVowel(test_str[i]))\n\t\t{\n\t\t\tif (isVowel(test_str[i - 1]) || isVowel(test_str[i + 1]))\n\t\t\t\tcount++;\n\t\t}\n\t}\n\t\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tfor (long i = 0; i < test_str.length; i++)\n\t{\n\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t{\n\t\t\tif (i > 0 && (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tif (i < test_str.length - 1 && (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == test_str[0])\n\t\t\t{\n\t\t\t\tif(test_str[1] == 'a' || test_str[1] == 'e' || test_str[1] == 'i' || test_str[1] == 'o' || test_str[1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(c == test_str[$-1])\n\t\t\t{\n\t\t\t\tif(test_str[$-2] == 'a' || test_str[$-2] == 'e' || test_str[$-2] == 'i' || test_str[$-2] == 'o' || test_str[$-2] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(test_str[test_str.indexOf(c)-1] == 'a' || test_str[test_str.indexOf(c)-1] == 'e' || test_str[test_str.indexOf(c)-1] == 'i' || test_str[test_str.indexOf(c)-1] == 'o' || test_str[test_str.indexOf(c)-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t\tif(test_str[test_str.indexOf(c)+1] == 'a' || test_str[test_str.indexOf(c)+1] == 'e' || test_str[test_str.indexOf(c)+1] == 'i' || test_str[test_str.indexOf(c)+1] == 'o' || test_str[",
    "{\n\tlong count = 0;\n\tlong len = test_str.length;\n\tforeach(i, c; test_str)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if(i == len - 1)\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u' || test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1]",
    "{\n\tlong count = 0;\n\tlong i = 0;\n\tlong len = test_str.length;\n\twhile(i < len)\n\t{\n\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t{\n\t\t\tif(i == 0)\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(i == len-1)\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' || test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn",
    "{\n\tlong count = 0;\n\tlong i = 0;\n\tlong len = test_str.length;\n\t\n\twhile(i < len)\n\t{\n\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t{\n\t\t\tif(i == 0)\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(i == len-1)\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' || test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n",
    "{\n\tlong count = 0;\n\tlong i = 0;\n\tlong len = test_str.length;\n\twhile(i < len)\n\t{\n\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t{\n\t\t\tif(i == 0)\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(i == len - 1)\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' || test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn",
    "{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == test_str[0] || c == test_str[$-1])\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(test_str[test_str.indexOf(c)-1] == 'a' || test_str[test_str.indexOf(c)-1] == 'e' || test_str[test_str.indexOf(c)-1] == 'i' || test_str[test_str.indexOf(c)-1] == 'o' || test_str[test_str.indexOf(c)-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t\tif(test_str[test_str.indexOf(c)+1] == 'a' || test_str[test_str.indexOf(c)+1] == 'e' || test_str[test_str.indexOf(c)+1] == 'i' || test_str[test_str.indexOf(c)+1] == 'o' || test_str[test_str.indexOf(c)+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tlong len = test_str.length;\n\t\n\tforeach(i; 0 .. len)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if(i == len-1)\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i",
    "{\n\tlong count = 0;\n\tfor (int i = 0; i < test_str.length; i++)\n\t{\n\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t{\n\t\t\tif (i == 0)\n\t\t\t{\n\t\t\t\tif (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (i == test_str.length - 1)\n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u' || test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == 'a' && test_str[$-1] == 'a')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'e' && test_str[$-1] == 'e')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'i' && test_str[$-1] == 'i')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'o' && test_str[$-1] == 'o')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'u' && test_str[$-1] == 'u')\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tforeach(char c; test_str) \n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') \n\t\t{\n\t\t\tif(c == test_str[0] || c == test_str[$ - 1]) \n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tif(test_str[test_str.indexOf(c) - 1] == 'a' || test_str[test_str.indexOf(c) - 1] == 'e' || test_str[test_str.indexOf(c) - 1] == 'i' || test_str[test_str.indexOf(c) - 1] == 'o' || test_str[test_str.indexOf(c) - 1] == 'u' || test_str[test_str.indexOf(c) + 1] == 'a' || test_str[test_str.indexOf(c) + 1] == 'e' || test_str[test_str.indexOf(c) + 1] == 'i' || test_str[test_str.indexOf(c) + 1] == 'o' || test_str[test_str.indexOf(c) + 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tlong i = 0;\n\tlong len = test_str.length;\n\t\n\twhile(i < len)\n\t{\n\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t{\n\t\t\tif(i == 0)\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(i == len-1)\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' || test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n",
    "{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == test_str[0])\n\t\t\t{\n\t\t\t\tif(test_str[1] == 'a' || test_str[1] == 'e' || test_str[1] == 'i' || test_str[1] == 'o' || test_str[1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(c == test_str[$-1])\n\t\t\t{\n\t\t\t\tif(test_str[$-2] == 'a' || test_str[$-2] == 'e' || test_str[$-2] == 'i' || test_str[$-2] == 'o' || test_str[$-2] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(test_str[test_str.indexOf(c)-1] == 'a' || test_str[test_str.indexOf(c)-1] == 'e' || test_str[test_str.indexOf(c)-1] == 'i' || test_str[test_str.indexOf(c)-1] == 'o' || test_str[test_str.indexOf(c)-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tif(test_str[test_str.indexOf(c)+1] == 'a' || test_str[test_str.indexOf(c)+1] == 'e' || test_str[test_str.indexOf(c)+1] == 'i' || test_str[test_str.indexOf(c)+1] == 'o' || test_str[test_str.indexOf(c)+1] == '",
    "{\n\tlong count = 0;\n\tlong len = test_str.length;\n\tforeach(i; 0 .. len) \n\t{\n\t\tif(i > 0 && i < len - 1) \n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t\t{\n\t\t\t\tif(test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t\tif(test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tlong i = 0;\n\tlong len = test_str.length;\n\tfor (i = 0; i < len; i++) {\n\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') {\n\t\t\tif (i > 0 && (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u')) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tif (i < len - 1 && (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u')) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tlong len = test_str.length;\n\tforeach(i; 0 .. len)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if(i == len-1)\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' ||",
    "{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == 'a' && test_str[$-1] == 'a')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'e' && test_str[$-1] == 'e')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'i' && test_str[$-1] == 'i')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'o' && test_str[$-1] == 'o')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'u' && test_str[$-1] == 'u')\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tfor (int i = 0; i < test_str.length; i++) \n\t{\n\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t{\n\t\t\tif (i == 0) \n\t\t\t{\n\t\t\t\tif (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (i == test_str.length - 1) \n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tif (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u' || test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn",
    "{\n\tlong count = 0;\n\tlong len = test_str.length;\n\tforeach(i; 0 .. len) \n\t{\n\t\tif(i == 0) \n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if(i == len-1) \n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse \n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[",
    "{\n\tlong count = 0;\n\tforeach(i, test_str)\n\t{\n\t\tif(i > 0 && i < test_str.length - 1)\n\t\t{\n\t\t\tif(test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u' || test_str[i - 1] == 'A' || test_str[i - 1] == 'E' || test_str[i - 1] == 'I' || test_str[i - 1] == 'O' || test_str[i - 1] == 'U')\n\t\t\t{\n\t\t\t\tif(test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u' || test_str[i + 1] == 'A' || test_str[i + 1] == 'E' || test_str[i + 1] == 'I' || test_str[i + 1] == 'O' || test_str[i + 1] == 'U')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == test_str[0] || c == test_str[$-1])\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(test_str[test_str.indexOf(c)-1] == 'a' || test_str[test_str.indexOf(c)-1] == 'e' || test_str[test_str.indexOf(c)-1] == 'i' || test_str[test_str.indexOf(c)-1] == 'o' || test_str[test_str.indexOf(c)-1] == 'u' || test_str[test_str.indexOf(c)+1] == 'a' || test_str[test_str.indexOf(c)+1] == 'e' || test_str[test_str.indexOf(c)+1] == 'i' || test_str[test_str.indexOf(c)+1] == 'o' || test_str[test_str.indexOf(c)+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong counter = 0;\n\tlong length = test_str.length;\n\t\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == test_str[0])\n\t\t\t{\n\t\t\t\tif(test_str[1] == 'a' || test_str[1] == 'e' || test_str[1] == 'i' || test_str[1] == 'o' || test_str[1] == 'u')\n\t\t\t\t\tcounter++;\n\t\t\t}\n\t\t\telse if(c == test_str[length - 1])\n\t\t\t{\n\t\t\t\tif(test_str[length - 2] == 'a' || test_str[length - 2] == 'e' || test_str[length - 2] == 'i' || test_str[length - 2] == 'o' || test_str[length - 2] == 'u')\n\t\t\t\t\tcounter++;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(test_str[$ - 1] == 'a' || test_str[$ - 1] == 'e' || test_str[$ - 1] == 'i' || test_str[$ - 1] == 'o' || test_str[$ - 1] == 'u')\n\t\t\t\t\tif(test_str[$ + 1] == 'a' || test_str[$ + 1] == 'e' || test_str[$ + 1] == 'i' || test_str[$ + 1] == 'o' || test_str[$ + 1] == 'u')\n\t\t\t\t\t\tcounter++;\n\t\t\t}\n\t\t}\n\t}\n\treturn counter;\n}",
    "{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == 'a' && (test_str[$ - 1] == 'e' || test_str[$ - 1] == 'i' || test_str[$ - 1] == 'o' || test_str[$ - 1] == 'u'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'e' && (test_str[$ - 1] == 'a' || test_str[$ - 1] == 'i' || test_str[$ - 1] == 'o' || test_str[$ - 1] == 'u'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'i' && (test_str[$ - 1] == 'a' || test_str[$ - 1] == 'e' || test_str[$ - 1] == 'o' || test_str[$ - 1] == 'u'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'o' && (test_str[$ - 1] == 'a' || test_str[$ - 1] == 'e' || test_str[$ - 1] == 'i' || test_str[$ - 1] == 'u'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'u' && (test_str[$ - 1] == 'a' || test_str[$ - 1] == 'e' || test_str[$ - 1] == 'i' || test_str[$ - 1] == 'o'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == 'a')\n\t\t\t{\n\t\t\t\tif(test_str[$-1] == 'e' || test_str[$-1] == 'i' || test_str[$-1] == 'o' || test_str[$-1] == 'u')\n\t\t\t\t\tcount++;\n\t\t\t\tif(test_str[$+1] == 'e' || test_str[$+1] == 'i' || test_str[$+1] == 'o' || test_str[$+1] == 'u')\n\t\t\t\t\tcount++;\n\t\t\t}\n\t\t\tif(c == 'e')\n\t\t\t{\n\t\t\t\tif(test_str[$-1] == 'a' || test_str[$-1] == 'i' || test_str[$-1] == 'o' || test_str[$-1] == 'u')\n\t\t\t\t\tcount++;\n\t\t\t\tif(test_str[$+1] == 'a' || test_str[$+1] == 'i' || test_str[$+1] == 'o' || test_str[$+1] == 'u')\n\t\t\t\t\tcount++;\n\t\t\t}\n\t\t\tif(c == 'i')\n\t\t\t{\n\t\t\t\tif(test_str[$-1] == 'a' || test_str[$-1] == 'e' || test_str[$-1] == 'o' || test_str[$-1] == 'u')\n\t\t\t\t\tcount++;\n\t\t\t\tif(test_str[$+1] == 'a' || test_str[$+1] == 'e' || test_str[$+1] == 'o' || test_str[$+1] == 'u')\n\t\t\t",
    "{\n\tlong count = 0;\n\tforeach(i, c; test_str)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if(i == test_str.length - 1)\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_",
    "{\n\tlong count = 0;\n\tlong len = test_str.length;\n\tforeach(i, c; test_str)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if(i == len-1)\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' || test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1]",
    "{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif (c == 'a' && test_str[$-1] == 'a')\n\t\t\t\tcount++;\n\t\t\telse if (c == 'e' && test_str[$-1] == 'e')\n\t\t\t\tcount++;\n\t\t\telse if (c == 'i' && test_str[$-1] == 'i')\n\t\t\t\tcount++;\n\t\t\telse if (c == 'o' && test_str[$-1] == 'o')\n\t\t\t\tcount++;\n\t\t\telse if (c == 'u' && test_str[$-1] == 'u')\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tfor (long i = 0; i < test_str.length; i++) \n\t{\n\t\tif (i == 0) \n\t\t{\n\t\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t\t{\n\t\t\t\tif (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if (i == test_str.length - 1) \n\t\t{\n\t\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse \n\t\t{\n\t\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t\t{\n\t\t\t\tif (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str",
    "{\n\tlong count = 0;\n\tfor (long i = 0; i < test_str.length; i++) \n\t{\n\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t{\n\t\t\tif (i > 0 && i < test_str.length - 1) \n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u' || test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (i == 0) \n\t\t\t{\n\t\t\t\tif (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (i == test_str.length - 1) \n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t",
    "{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif (c == 'a' && test_str[$-1] == 'a')\n\t\t\t\tcount++;\n\t\t\telse if (c == 'e' && test_str[$-1] == 'e')\n\t\t\t\tcount++;\n\t\t\telse if (c == 'i' && test_str[$-1] == 'i')\n\t\t\t\tcount++;\n\t\t\telse if (c == 'o' && test_str[$-1] == 'o')\n\t\t\t\tcount++;\n\t\t\telse if (c == 'u' && test_str[$-1] == 'u')\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == test_str[0] || c == test_str[$-1])\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif(test_str[test_str.indexOf(c)-1] == 'a' || test_str[test_str.indexOf(c)-1] == 'e' || test_str[test_str.indexOf(c)-1] == 'i' || test_str[test_str.indexOf(c)-1] == 'o' || test_str[test_str.indexOf(c)-1] == 'u')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tif(test_str[test_str.indexOf(c)+1] == 'a' || test_str[test_str.indexOf(c)+1] == 'e' || test_str[test_str.indexOf(c)+1] == 'i' || test_str[test_str.indexOf(c)+1] == 'o' || test_str[test_str.indexOf(c)+1] == 'u')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == test_str[0] || c == test_str[$-1])\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(test_str[test_str.indexOf(c)-1] == 'a' || test_str[test_str.indexOf(c)-1] == 'e' || test_str[test_str.indexOf(c)-1] == 'i' || test_str[test_str.indexOf(c)-1] == 'o' || test_str[test_str.indexOf(c)-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t\tif(test_str[test_str.indexOf(c)+1] == 'a' || test_str[test_str.indexOf(c)+1] == 'e' || test_str[test_str.indexOf(c)+1] == 'i' || test_str[test_str.indexOf(c)+1] == 'o' || test_str[test_str.indexOf(c)+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tfor(int i = 0; i < test_str.length; i++)\n\t{\n\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t{\n\t\t\tif(i == 0)\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(i == test_str.length - 1)\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' || test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == 'a')\n\t\t\t{\n\t\t\t\tif(test_str.find(\"e\") != -1 || test_str.find(\"i\") != -1 || test_str.find(\"o\") != -1 || test_str.find(\"u\") != -1)\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(c == 'e')\n\t\t\t{\n\t\t\t\tif(test_str.find(\"a\") != -1 || test_str.find(\"i\") != -1 || test_str.find(\"o\") != -1 || test_str.find(\"u\") != -1)\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(c == 'i')\n\t\t\t{\n\t\t\t\tif(test_str.find(\"a\") != -1 || test_str.find(\"e\") != -1 || test_str.find(\"o\") != -1 || test_str.find(\"u\") != -1)\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(c == 'o')\n\t\t\t{\n\t\t\t\tif(test_str.find(\"a\") != -1 || test_str.find(\"e\") != -1 || test_str.find(\"i\") != -1 || test_str.find(\"u\") != -1)\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(c == 'u')\n\t\t\t{\n\t\t\t\tif(test_str.find(\"a\") != -1 || test_str.find(\"e\") != -1 || test_str.find(\"i\") != -1 || test_str",
    "{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == test_str[0] || c == test_str[$ - 1])\n\t\t\t\tcontinue;\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(test_str[test_str.indexOf(c) - 1] == 'a' || test_str[test_str.indexOf(c) - 1] == 'e' || test_str[test_str.indexOf(c) - 1] == 'i' || test_str[test_str.indexOf(c) - 1] == 'o' || test_str[test_str.indexOf(c) - 1] == 'u')\n\t\t\t\t\tcount++;\n\t\t\t\tif(test_str[test_str.indexOf(c) + 1] == 'a' || test_str[test_str.indexOf(c) + 1] == 'e' || test_str[test_str.indexOf(c) + 1] == 'i' || test_str[test_str.indexOf(c) + 1] == 'o' || test_str[test_str.indexOf(c) + 1] == 'u')\n\t\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tforeach (i, c; test_str)\n\t{\n\t\tif (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif (i != 0)\n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (i != test_str.length - 1)\n\t\t\t{\n\t\t\t\tif (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tlong i = 0;\n\tlong len = test_str.length;\n\twhile(i < len) \n\t{\n\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t{\n\t\t\tif(i > 0 && (test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tif(i < len-1 && (test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tfor (long i = 0; i < test_str.length; i++) \n\t{\n\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t{\n\t\t\tif (i != 0 && i != test_str.length - 1) \n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u' || test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (i == 0) \n\t\t\t{\n\t\t\t\tif (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (i == test_str.length - 1) \n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t",
    "{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == 'a')\n\t\t\t{\n\t\t\t\tif(test_str[$-1] == 'e' || test_str[$-1] == 'i' || test_str[$-1] == 'o' || test_str[$-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t\tif(test_str[$+1] == 'e' || test_str[$+1] == 'i' || test_str[$+1] == 'o' || test_str[$+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(c == 'e')\n\t\t\t{\n\t\t\t\tif(test_str[$-1] == 'a' || test_str[$-1] == 'i' || test_str[$-1] == 'o' || test_str[$-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t\tif(test_str[$+1] == 'a' || test_str[$+1] == 'i' || test_str[$+1] == 'o' || test_str[$+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(c == 'i')\n\t\t\t{\n\t\t\t\tif(test_str[$-1] == 'a' || test_str[$-1] == 'e' || test_str[$-1] == 'o' || test_str[$-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}",
    "{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == 'a' && (test_str[$-1] == 'e' || test_str[$-1] == 'i' || test_str[$-1] == 'o' || test_str[$-1] == 'u'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'e' && (test_str[$-1] == 'a' || test_str[$-1] == 'i' || test_str[$-1] == 'o' || test_str[$-1] == 'u'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'i' && (test_str[$-1] == 'a' || test_str[$-1] == 'e' || test_str[$-1] == 'o' || test_str[$-1] == 'u'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'o' && (test_str[$-1] == 'a' || test_str[$-1] == 'e' || test_str[$-1] == 'i' || test_str[$-1] == 'u'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'u' && (test_str[$-1] == 'a' || test_str[$-1] == 'e' || test_str[$-1] == 'i' || test_str[$-1] == 'o'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong ret = 0;\n\tlong len = test_str.length;\n\tforeach(i, test_str)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tret++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if(i == len - 1)\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tret++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' ||",
    "{\n\tlong count = 0;\n\tlong len = test_str.length;\n\tforeach(i; 0 .. len)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if(i == len-1)\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' ||",
    "{\n\tlong count = 0;\n\tforeach(c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == test_str[0])\n\t\t\t{\n\t\t\t\tif(test_str[1] == 'a' || test_str[1] == 'e' || test_str[1] == 'i' || test_str[1] == 'o' || test_str[1] == 'u')\n\t\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == test_str[test_str.length-1])\n\t\t\t{\n\t\t\t\tif(test_str[test_str.length-2] == 'a' || test_str[test_str.length-2] == 'e' || test_str[test_str.length-2] == 'i' || test_str[test_str.length-2] == 'o' || test_str[test_str.length-2] == 'u')\n\t\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(test_str[$-1] == 'a' || test_str[$-1] == 'e' || test_str[$-1] == 'i' || test_str[$-1] == 'o' || test_str[$-1] == 'u' || test_str[$+1] == 'a' || test_str[$+1] == 'e' || test_str[$+1] == 'i' || test_str[$+1] == 'o' || test_str[$+1] == 'u')\n\t\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tforeach(i, c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(i > 0)\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(i < test_str.length-1)\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tlong i = 0;\n\tlong len = test_str.length;\n\t\n\twhile (i < len) \n\t{\n\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t{\n\t\t\tif (i == 0) \n\t\t\t{\n\t\t\t\tif (test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (i == len - 1) \n\t\t\t{\n\t\t\t\tif (test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tif (test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' || test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n",
    "{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == 'a' && test_str[$-1] == 'a')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'e' && test_str[$-1] == 'e')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'i' && test_str[$-1] == 'i')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'o' && test_str[$-1] == 'o')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'u' && test_str[$-1] == 'u')\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tlong len = test_str.length;\n\tforeach(i, c; test_str)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if(i == len - 1)\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1]",
    "{\n\tlong count = 0;\n\tlong len = test_str.length;\n\tforeach(i, c; test_str)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if(i == len-1)\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1]",
    "{\n\tlong count = 0;\n\tlong len = test_str.length;\n\tforeach(i, c; test_str)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if(i == len - 1)\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t\tif(test_str[i + 1] == 'a' || test_str[i + 1]",
    "{\n\tlong count = 0;\n\tforeach(i, c; test_str)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if(i == test_str.length - 1)\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' || test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_",
    "{\n\tlong count = 0;\n\tlong length = test_str.length;\n\tforeach(i, c; test_str)\n\t{\n\t\tif(i > 0 && i < length - 1)\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u' ||\n\t\t\t\t\ttest_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tlong len = test_str.length;\n\tfor (long i = 0; i < len; i++)\n\t{\n\t\tif (i == 0)\n\t\t{\n\t\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if (i == len - 1)\n\t\t{\n\t\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] ==",
    "{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == test_str[0])\n\t\t\t{\n\t\t\t\tif(test_str[1] == 'a' || test_str[1] == 'e' || test_str[1] == 'i' || test_str[1] == 'o' || test_str[1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(c == test_str[$-1])\n\t\t\t{\n\t\t\t\tif(test_str[$-2] == 'a' || test_str[$-2] == 'e' || test_str[$-2] == 'i' || test_str[$-2] == 'o' || test_str[$-2] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(test_str[test_str.indexOf(c)-1] == 'a' || test_str[test_str.indexOf(c)-1] == 'e' || test_str[test_str.indexOf(c)-1] == 'i' || test_str[test_str.indexOf(c)-1] == 'o' || test_str[test_str.indexOf(c)-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tif(test_str[test_str.indexOf(c)+1] == 'a' || test_str[test_str.indexOf(c)+1] == 'e' || test_str[test_str.indexOf(c)+1] == 'i' || test_str[test_str.indexOf(c)+1] == 'o' || test_str[test_str.indexOf(c)+1] == '",
    "{\n\tlong count = 0;\n\tlong i = 0;\n\tlong len = test_str.length;\n\t\n\twhile (i < len) {\n\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') {\n\t\t\tif (i == 0) {\n\t\t\t\tif (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u') {\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t} else if (i == len - 1) {\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u') {\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u' || test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u') {\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == test_str[0] || c == test_str[$-1])\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(test_str[test_str.indexOf(c)-1] == 'a' || test_str[test_str.indexOf(c)-1] == 'e' || test_str[test_str.indexOf(c)-1] == 'i' || test_str[test_str.indexOf(c)-1] == 'o' || test_str[test_str.indexOf(c)-1] == 'u' || test_str[test_str.indexOf(c)+1] == 'a' || test_str[test_str.indexOf(c)+1] == 'e' || test_str[test_str.indexOf(c)+1] == 'i' || test_str[test_str.indexOf(c)+1] == 'o' || test_str[test_str.indexOf(c)+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tfor(int i = 0; i < test_str.length; i++)\n\t{\n\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t{\n\t\t\tif(i > 0 && i < test_str.length - 1)\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(i == 0)\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(i == test_str.length - 1)\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n",
    "{\n\tlong count = 0;\n\tlong i = 0;\n\tlong len = test_str.length;\n\twhile(i < len)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if(i == len-1)\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] ==",
    "{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == test_str[0] || c == test_str[test_str.length - 1])\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(test_str[test_str.indexOf(c) - 1] == 'a' || test_str[test_str.indexOf(c) - 1] == 'e' || test_str[test_str.indexOf(c) - 1] == 'i' || test_str[test_str.indexOf(c) - 1] == 'o' || test_str[test_str.indexOf(c) - 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t\tif(test_str[test_str.indexOf(c) + 1] == 'a' || test_str[test_str.indexOf(c) + 1] == 'e' || test_str[test_str.indexOf(c) + 1] == 'i' || test_str[test_str.indexOf(c) + 1] == 'o' || test_str[test_str.indexOf(c) + 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tlong i = 0;\n\tlong length = test_str.length;\n\twhile (i < length) \n\t{\n\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t{\n\t\t\tif (i > 0 && (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u')) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tif (i < length - 1 && (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u')) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == 'a' && test_str[$-1] == 'a')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'e' && test_str[$-1] == 'e')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'i' && test_str[$-1] == 'i')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'o' && test_str[$-1] == 'o')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'u' && test_str[$-1] == 'u')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == 'a')\n\t\t\t{\n\t\t\t\tif(c+1 == 'e' || c+1 == 'i' || c+1 == 'o' || c+1 == 'u')\n\t\t\t\t\tcount++;\n\t\t\t\tif(c-1 == 'e' || c-1 == 'i' || c-1 == 'o' || c-1 == 'u')\n\t\t\t\t\tcount++;\n\t\t\t}\n\t\t\tif(c == 'e')\n\t\t\t{\n\t\t\t\tif(c+1 == 'a' || c+1 == 'i' || c+1 == 'o' || c+1 == 'u')\n\t\t\t\t\tcount++;\n\t\t\t\tif(c-1 == 'a' || c-1 == 'i' || c-1 == 'o' || c-1 == 'u')\n\t\t\t\t\tcount++;\n\t\t\t}\n\t\t\tif(c == 'i')\n\t\t\t{\n\t\t\t\tif(c+1 == 'a' || c+1 == 'e' || c+1 == 'o' || c+1 == 'u')\n\t\t\t\t\tcount++;\n\t\t\t\tif(c-1 == 'a' || c-1 == 'e' || c-1 == 'o' || c-1 == 'u')\n\t\t\t\t\tcount++;\n\t\t\t}\n\t\t\tif(c == 'o')\n\t\t\t{\n\t\t\t\tif(c+1 == 'a' || c+1 == 'e' || c+1 == 'i' || c+1 == 'u')\n\t\t\t\t\tcount++;\n\t\t\t\tif(c-1 == 'a' || c-1 == 'e' || c-1 == 'i' || c-1 == 'u')\n\t\t\t\t\tcount++;\n\t\t",
    "{\n\tlong count = 0;\n\tlong len = test_str.length;\n\tfor (long i = 0; i < len; i++)\n\t{\n\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t{\n\t\t\tif (i == 0)\n\t\t\t{\n\t\t\t\tif (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (i == len - 1)\n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u' || test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\n",
    "{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == 'a' && test_str[$-1] == 'a')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'e' && test_str[$-1] == 'e')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'i' && test_str[$-1] == 'i')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'o' && test_str[$-1] == 'o')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'u' && test_str[$-1] == 'u')\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tlong i = 0;\n\tlong len = test_str.length;\n\t\n\twhile (i < len)\n\t{\n\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t{\n\t\t\tif (i == 0)\n\t\t\t{\n\t\t\t\tif (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (i == len - 1)\n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u' || test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n",
    "{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == 'a' && test_str[$-1] == 'a')\n\t\t\t\tcount++;\n\t\t\tif(c == 'e' && test_str[$-1] == 'e')\n\t\t\t\tcount++;\n\t\t\tif(c == 'i' && test_str[$-1] == 'i')\n\t\t\t\tcount++;\n\t\t\tif(c == 'o' && test_str[$-1] == 'o')\n\t\t\t\tcount++;\n\t\t\tif(c == 'u' && test_str[$-1] == 'u')\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tlong len = test_str.length;\n\tfor (long i = 0; i < len; i++) \n\t{\n\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t{\n\t\t\tif (i == 0) \n\t\t\t{\n\t\t\t\tif (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t} \n\t\t\telse if (i == len - 1) \n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u' || test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n",
    "{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == 'a' && (test_str[$-1] == 'e' || test_str[$-1] == 'i' || test_str[$-1] == 'o' || test_str[$-1] == 'u'))\n\t\t\t\tcount++;\n\t\t\telse if(c == 'e' && (test_str[$-1] == 'a' || test_str[$-1] == 'i' || test_str[$-1] == 'o' || test_str[$-1] == 'u'))\n\t\t\t\tcount++;\n\t\t\telse if(c == 'i' && (test_str[$-1] == 'a' || test_str[$-1] == 'e' || test_str[$-1] == 'o' || test_str[$-1] == 'u'))\n\t\t\t\tcount++;\n\t\t\telse if(c == 'o' && (test_str[$-1] == 'a' || test_str[$-1] == 'e' || test_str[$-1] == 'i' || test_str[$-1] == 'u'))\n\t\t\t\tcount++;\n\t\t\telse if(c == 'u' && (test_str[$-1] == 'a' || test_str[$-1] == 'e' || test_str[$-1] == 'i' || test_str[$-1] == 'o'))\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tlong len = test_str.length;\n\tfor (long i = 0; i < len; i++) \n\t{\n\t\tif (i == 0) \n\t\t{\n\t\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t\t{\n\t\t\t\tif (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if (i == len - 1) \n\t\t{\n\t\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse \n\t\t{\n\t\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' ||",
    "{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == test_str[0] || c == test_str[$-1])\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(test_str[test_str.indexOf(c)-1] == 'a' || test_str[test_str.indexOf(c)-1] == 'e' || test_str[test_str.indexOf(c)-1] == 'i' || test_str[test_str.indexOf(c)-1] == 'o' || test_str[test_str.indexOf(c)-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t\tif(test_str[test_str.indexOf(c)+1] == 'a' || test_str[test_str.indexOf(c)+1] == 'e' || test_str[test_str.indexOf(c)+1] == 'i' || test_str[test_str.indexOf(c)+1] == 'o' || test_str[test_str.indexOf(c)+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == 'a' && test_str[$-1] == 'a')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'e' && test_str[$-1] == 'e')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'i' && test_str[$-1] == 'i')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'o' && test_str[$-1] == 'o')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'u' && test_str[$-1] == 'u')\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tforeach(i, c; test_str)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if(i == test_str.length - 1)\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' || test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_",
    "{\n\tlong count = 0;\n\tfor (long i = 0; i < test_str.length; i++)\n\t{\n\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t{\n\t\t\tif (i == 0)\n\t\t\t{\n\t\t\t\tif (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (i == test_str.length - 1)\n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u' || test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == 'a' && (test_str[$-1] == 'e' || test_str[$-1] == 'i' || test_str[$-1] == 'o' || test_str[$-1] == 'u'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'e' && (test_str[$-1] == 'a' || test_str[$-1] == 'i' || test_str[$-1] == 'o' || test_str[$-1] == 'u'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'i' && (test_str[$-1] == 'a' || test_str[$-1] == 'e' || test_str[$-1] == 'o' || test_str[$-1] == 'u'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'o' && (test_str[$-1] == 'a' || test_str[$-1] == 'e' || test_str[$-1] == 'i' || test_str[$-1] == 'u'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'u' && (test_str[$-1] == 'a' || test_str[$-1] == 'e' || test_str[$-1] == 'i' || test_str[$-1] == 'o'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == test_str[0] || c == test_str[$-1])\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(test_str[test_str.indexOf(c)-1] == 'a' || test_str[test_str.indexOf(c)-1] == 'e' || test_str[test_str.indexOf(c)-1] == 'i' || test_str[test_str.indexOf(c)-1] == 'o' || test_str[test_str.indexOf(c)-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t\tif(test_str[test_str.indexOf(c)+1] == 'a' || test_str[test_str.indexOf(c)+1] == 'e' || test_str[test_str.indexOf(c)+1] == 'i' || test_str[test_str.indexOf(c)+1] == 'o' || test_str[test_str.indexOf(c)+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tfor (long i = 0; i < test_str.length; i++) \n\t{\n\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t{\n\t\t\tif (i > 0 && (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u')) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tif (i < test_str.length - 1 && (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u')) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tforeach(i; 0 .. test_str.length)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if(i == test_str.length - 1)\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str"
  ]
}