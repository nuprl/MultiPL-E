{
  "name": "mbpp_772_remove_length",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove all the words with k length in the given string.\n\t\n*/\nstring remove_length(string test_str, long K) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_772_remove_length.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = remove_length;\n\n    assert(candidate(\"The person is most value tet\", 3L) == \"person is most value\");\n    assert(candidate(\"If you told me about this ok\", 4L) == \"If you me about ok\");\n    assert(candidate(\"Forces of darkeness is come into the play\", 4L) == \"Forces of darkeness is the\");\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{ \n    string[] words = test_str.split(\" \"); \n    string result = \"\"; \n    foreach(string word; words) \n    { \n        if (word.length != K) \n            result ~= word ~ \" \"; \n    } \n    return result; \n} ",
    "{ \n\tstring[] words = test_str.split(\" \"); \n\tstring result = \"\"; \n\tforeach(string word; words) \n\t{ \n\t\tif (word.length != K) \n\t\t\tresult ~= word ~ \" \"; \n\t} \n\treturn result; \n} ",
    "{\n\tstring[] words = test_str.split;\n\tstring[] result;\n\tforeach(word; words)\n\t{\n\t\tif(word.length != K)\n\t\t{\n\t\t\tresult ~= word;\n\t\t}\n\t}\n\treturn result.join(\" \");\n}",
    "{ \n\tstring[] words = test_str.split;\n\tstring result = \"\";\n\tforeach(word; words)\n\t{\n\t\tif(word.length != K)\n\t\t{\n\t\t\tresult ~= word ~ \" \";\n\t\t}\n\t}\n\treturn result;\n} ",
    "{\n\tstring[] words = test_str.split;\n\tstring result = \"\";\n\tforeach(word; words)\n\t{\n\t\tif(word.length != K)\n\t\t{\n\t\t\tresult ~= word ~ \" \";\n\t\t}\n\t}\n\treturn result;\n}",
    "{ \n\tstring[] words = split(test_str); \n\tstring result = \"\"; \n\tforeach(string word; words) \n\t{ \n\t\tif (word.length != K) \n\t\t\tresult ~= word ~ \" \"; \n\t} \n\treturn result; \n} ",
    "{\n\tstring[] words = test_str.split;\n\tstring result = \"\";\n\tforeach(word; words)\n\t{\n\t\tif(word.length != K)\n\t\t{\n\t\t\tresult ~= word ~ \" \";\n\t\t}\n\t}\n\treturn result;\n}",
    "{ \n    string[] words = test_str.split(\" \"); \n    string res = \"\"; \n    foreach (string word; words) \n    { \n        if (word.length != K) \n            res += word + \" \"; \n    } \n    return res; \n} ",
    "{ \n    string[] words = test_str.split; \n    string result = \"\"; \n    foreach (string word; words) \n    { \n        if (word.length != K) \n            result ~= word ~ \" \"; \n    } \n    return result; \n} ",
    "{\n\tstring[] words = test_str.split;\n\tstring[] new_words;\n\tforeach(word; words)\n\t{\n\t\tif(word.length != K)\n\t\t{\n\t\t\tnew_words ~= word;\n\t\t}\n\t}\n\treturn new_words.join(\" \");\n}",
    "{ \n\tstring[] words = test_str.split;\n\tstring[] result;\n\tforeach(word; words)\n\t{\n\t\tif(word.length != K)\n\t\t\tresult ~= word;\n\t}\n\treturn result.join(\" \");\n} ",
    "{ \n    string[] words = test_str.split; \n    string result = \"\"; \n    foreach(string word; words) \n    { \n        if (word.length != K) \n            result ~= word ~ \" \"; \n    } \n    return result; \n} ",
    "{ \n    string[] words = test_str.split(\" \"); \n    string result = \"\"; \n    foreach (string word; words) \n    { \n        if (word.length != K) \n            result ~= word ~ \" \"; \n    } \n    return result; \n} ",
    "{ \n    string[] words = test_str.split(\" \"); \n    string result = \"\"; \n    foreach (string word; words) { \n        if (word.length != K) \n            result ~= word ~ \" \"; \n    } \n    return result; \n} ",
    "{ \n    string[] words = test_str.split; \n    string result = \"\"; \n    foreach (string word; words) \n    { \n        if (word.length != K) \n            result ~= word ~ \" \"; \n    } \n    return result; \n} ",
    "{ \n\tstring[] words = test_str.split; \n\tstring result = \"\"; \n\tforeach(string word; words) \n\t{ \n\t\tif (word.length != K) \n\t\t\tresult ~= word ~ \" \"; \n\t} \n\treturn result; \n} ",
    "{\n\tstring[] words = test_str.split;\n\tstring[] new_words;\n\tforeach(word; words)\n\t{\n\t\tif(word.length != K)\n\t\t{\n\t\t\tnew_words ~= word;\n\t\t}\n\t}\n\treturn new_words.join(\" \");\n}",
    "{ \n    string[] words = test_str.split(\" \"); \n    string result = \"\"; \n    foreach(string word; words) \n    { \n        if (word.length != K) \n            result ~= word ~ \" \"; \n    } \n    return result; \n} ",
    "{ \n    string[] words = test_str.split(\" \"); \n    string result = \"\"; \n    foreach (string word; words) \n    { \n        if (word.length != K) \n            result ~= word ~ \" \"; \n    } \n    return result; \n} ",
    "{ \n    string[] words = test_str.split(\" \"); \n    string result = \"\"; \n    foreach (string word; words) \n    { \n        if (word.length != K) \n            result ~= word ~ \" \"; \n    } \n    return result; \n} ",
    "{ \n    string[] words = test_str.split; \n    string result = \"\"; \n    foreach (string word; words) { \n        if (word.length != K) \n            result ~= word ~ \" \"; \n    } \n    return result; \n} ",
    "{ \n    string[] words = test_str.split; \n    string result = \"\"; \n    foreach (string word; words) \n    { \n        if (word.length != K) \n            result ~= word ~ \" \"; \n    } \n    return result; \n} ",
    "{ \n\tstring[] words = test_str.split(\" \");\n\tstring result = \"\";\n\tforeach(word; words)\n\t{\n\t\tif(word.length != K)\n\t\t{\n\t\t\tresult ~= word ~ \" \";\n\t\t}\n\t}\n\treturn result;\n} ",
    "{ \n\tstring[] words = test_str.split(\" \"); \n\tstring result = \"\"; \n\tforeach (string word; words) \n\t{ \n\t\tif (word.length != K) \n\t\t\tresult ~= word ~ \" \"; \n\t} \n\treturn result; \n} ",
    "{ \n    string[] words = test_str.split; \n    string res = \"\"; \n    foreach (string word; words) \n    { \n        if (word.length != K) \n            res ~= word ~ \" \"; \n    } \n    return res; \n} ",
    "{ \n    string[] words = test_str.split; \n    string result = \"\"; \n    foreach (string word; words) \n    { \n        if (word.length != K) \n            result ~= word ~ \" \"; \n    } \n    return result; \n} ",
    "{ \n    string[] words = test_str.split; \n    string result = \"\"; \n    foreach(string word; words) \n    { \n        if (word.length != K) \n            result ~= word ~ \" \"; \n    } \n    return result; \n} ",
    "{ \n    string[] words = test_str.split; \n    string result = \"\"; \n    foreach (string word; words) \n    { \n        if (word.length != K) \n            result ~= word ~ \" \"; \n    } \n    return result; \n} ",
    "{ \n\tstring[] words = test_str.split;\n\tstring result = \"\";\n\tforeach(word; words)\n\t{\n\t\tif(word.length != K)\n\t\t{\n\t\t\tresult ~= word ~ \" \";\n\t\t}\n\t}\n\treturn result;\n} ",
    "{\n\tstring[] words = test_str.split;\n\tstring result = \"\";\n\tforeach(word; words)\n\t{\n\t\tif(word.length != K)\n\t\t\tresult ~= word ~ \" \";\n\t}\n\treturn result;\n}",
    "{ \n    string[] words = test_str.split;\n    string result = \"\";\n    foreach(string word; words)\n    {\n        if(word.length != K)\n        {\n            result ~= word ~ \" \";\n        }\n    }\n    return result;\n} ",
    "{ \n\tstring[] words = test_str.split(\" \");\n\tstring result = \"\";\n\tforeach(word; words)\n\t{\n\t\tif(word.length != K)\n\t\t\tresult ~= word ~ \" \";\n\t}\n\treturn result;\n} ",
    "{ \n\tstring[] words = test_str.split; \n\tstring res = \"\"; \n\tforeach(string word; words) \n\t{ \n\t\tif (word.length != K) \n\t\t\tres ~= word ~ \" \"; \n\t} \n\treturn res; \n} ",
    "{ \n    string[] words; \n    string result = \"\"; \n    words = test_str.split(); \n    foreach(string word; words) \n    { \n        if (word.length != K) \n            result ~= word ~ \" \"; \n    } \n    return result; \n} ",
    "{ \n    string[] words = test_str.split(\" \"); \n    string result = \"\"; \n    foreach (string word; words) \n    { \n        if (word.length != K) \n            result ~= word ~ \" \"; \n    } \n    return result; \n} ",
    "{ \n    string[] words = test_str.split(\" \"); \n    string result = \"\"; \n    foreach(string word; words) \n    { \n        if (word.length != K) \n            result ~= word ~ \" \"; \n    } \n    return result; \n} ",
    "{ \n    string[] words = split(test_str, \" \"); \n    string result = \"\"; \n    foreach(string word; words) \n    { \n        if (word.length != K) \n            result ~= word ~ \" \"; \n    } \n    return result; \n} ",
    "{ \n\tstring[] words = test_str.split(\" \");\n\tstring result = \"\";\n\tforeach(word; words)\n\t{\n\t\tif(word.length != K)\n\t\t{\n\t\t\tresult ~= word ~ \" \";\n\t\t}\n\t}\n\treturn result;\n} ",
    "{ \n    string[] words = test_str.split; \n    string result = \"\"; \n    foreach (string word; words) { \n        if (word.length != K) \n            result ~= word ~ \" \"; \n    } \n    return result; \n} ",
    "{ \n\tstring[] words = test_str.split(\" \"); \n\tstring result = \"\"; \n\tforeach(word; words) \n\t{ \n\t\tif (word.length != K) \n\t\t\tresult ~= word ~ \" \"; \n\t} \n\treturn result; \n} ",
    "{ \n    string[] words = test_str.split(\" \"); \n    string result = \"\"; \n    foreach (string word; words) { \n        if (word.length != K) \n            result ~= word ~ \" \"; \n    } \n    return result; \n} ",
    "{\n\tstring[] words = test_str.split;\n\tstring result = \"\";\n\tforeach(word; words)\n\t{\n\t\tif(word.length != K)\n\t\t{\n\t\t\tresult ~= word ~ \" \";\n\t\t}\n\t}\n\treturn result;\n}",
    "{ \n\tstring[] words = test_str.split(\" \");\n\tstring result = \"\";\n\tforeach(word; words)\n\t{\n\t\tif(word.length != K)\n\t\t{\n\t\t\tresult ~= word ~ \" \";\n\t\t}\n\t}\n\treturn result;\n} ",
    "{ \n    string[] words = test_str.split(); \n    string result = \"\"; \n    foreach(string word; words) \n    { \n        if (word.length != K) \n            result ~= word ~ \" \"; \n    } \n    return result; \n} ",
    "{ \n\tstring[] words = split(test_str); \n\tstring result = \"\"; \n\tforeach(string word; words) \n\t{ \n\t\tif (word.length != K) \n\t\t\tresult ~= word ~ \" \"; \n\t} \n\treturn result; \n} ",
    "{ \n    string[] words = test_str.split; \n    string result = \"\"; \n    foreach (string word; words) { \n        if (word.length != K) \n            result ~= word ~ \" \"; \n    } \n    return result; \n} ",
    "{ \n\tstring[] words = split(test_str, \" \"); \n\tstring result = \"\"; \n\tforeach(string word; words) \n\t{ \n\t\tif (word.length != K) \n\t\t\tresult ~= word ~ \" \"; \n\t} \n\treturn result; \n} ",
    "{ \n    string[] words = test_str.split(\" \"); \n    string result = \"\"; \n    foreach(string word; words) \n    { \n        if (word.length != K) \n            result ~= word ~ \" \"; \n    } \n    return result; \n} ",
    "{\n\tstring[] words = test_str.split;\n\tstring result = \"\";\n\tforeach(word; words)\n\t{\n\t\tif(word.length != K)\n\t\t{\n\t\t\tresult ~= word ~ \" \";\n\t\t}\n\t}\n\treturn result.stripRight;\n}",
    "{ \n    string[] words = test_str.split; \n    string result = \"\"; \n    foreach (string word; words) \n        if (word.length != K) \n            result ~= word ~ \" \"; \n    return result; \n} ",
    "{\n\tstring[] words = test_str.split;\n\tstring[] result;\n\tforeach(word; words)\n\t{\n\t\tif(word.length != K)\n\t\t\tresult ~= word;\n\t}\n\treturn result.join(\" \");\n}",
    "{ \n    string[] words = test_str.split; \n    string result = \"\"; \n    foreach(string word; words) \n    { \n        if (word.length != K) \n            result ~= word ~ \" \"; \n    } \n    return result; \n} ",
    "{ \n\tstring[] words = test_str.split;\n\tstring result = \"\";\n\tforeach(word; words)\n\t{\n\t\tif(word.length != K)\n\t\t{\n\t\t\tresult ~= word ~ \" \";\n\t\t}\n\t}\n\treturn result;\n} ",
    "{ \n\tstring[] words = test_str.split;\n\tstring[] result;\n\tforeach(word; words)\n\t{\n\t\tif(word.length != K)\n\t\t{\n\t\t\tresult ~= word;\n\t\t}\n\t}\n\treturn result.join(\" \");\n} ",
    "{ \n    string[] words = test_str.split; \n    string result = \"\"; \n    foreach (string word; words) { \n        if (word.length != K) \n            result ~= word ~ \" \"; \n    } \n    return result; \n} ",
    "{ \n    string[] words = test_str.split; \n    string result = \"\"; \n    foreach (string word; words) \n        if (word.length != K) \n            result ~= word ~ \" \"; \n    return result; \n} ",
    "{ \n    string[] words = test_str.split; \n    string result = \"\"; \n    foreach (string word; words) \n    { \n        if (word.length != K) \n            result ~= word ~ \" \"; \n    } \n    return result; \n} ",
    "{ \n    string[] words = test_str.split(\" \"); \n    string result = \"\"; \n    foreach (string word; words) { \n        if (word.length != K) \n            result ~= word ~ \" \"; \n    } \n    return result.stripRight; \n} ",
    "{ \n    string[] words = test_str.split(\" \"); \n    string result = \"\"; \n    foreach (string word; words) { \n        if (word.length != K) \n            result ~= word ~ \" \"; \n    } \n    return result; \n} ",
    "{ \n    string[] words = test_str.split(\" \"); \n    string res = \"\"; \n    foreach (string word; words) \n    { \n        if (word.length != K) \n            res += word + \" \"; \n    } \n    return res; \n} ",
    "{ \n\tstring[] words = test_str.split; \n\tstring result = \"\"; \n\tforeach(string word; words) \n\t{ \n\t\tif (word.length != K) \n\t\t\tresult ~= word ~ \" \"; \n\t} \n\treturn result; \n} ",
    "{ \n    string[] words = test_str.split(\" \"); \n    string result = \"\"; \n    foreach(string word; words) \n    { \n        if (word.length != K) \n            result ~= word ~ \" \"; \n    } \n    return result; \n} ",
    "{ \n\tstring[] words = test_str.split(\" \");\n\tstring result = \"\";\n\tforeach(string word; words)\n\t{\n\t\tif(word.length != K)\n\t\t{\n\t\t\tresult ~= word ~ \" \";\n\t\t}\n\t}\n\treturn result;\n}",
    "{ \n    string[] words = test_str.split(\" \"); \n    string result = \"\"; \n    foreach (string word; words) { \n        if (word.length != K) \n            result ~= word ~ \" \"; \n    } \n    return result; \n} ",
    "{ \n\tstring[] words = test_str.split; \n\tstring result = \"\"; \n\tforeach(string word; words) \n\t{ \n\t\tif (word.length != K) \n\t\t\tresult ~= word ~ \" \"; \n\t} \n\treturn result; \n} ",
    "{ \n    string[] words = test_str.split; \n    string result = \"\"; \n    foreach(string word; words) \n    { \n        if (word.length != K) \n            result ~= word ~ \" \"; \n    } \n    return result; \n} ",
    "{ \n    string[] words = test_str.split; \n    string result = \"\"; \n    foreach (string word; words) \n    { \n        if (word.length != K) \n            result ~= word ~ \" \"; \n    } \n    return result; \n} ",
    "{\n\tstring[] words = test_str.split;\n\tstring ret = \"\";\n\tforeach(word; words)\n\t{\n\t\tif(word.length != K)\n\t\t\tret ~= word ~ \" \";\n\t}\n\treturn ret;\n}",
    "{ \n\tstring[] words = test_str.split(\" \"); \n\tstring result = \"\"; \n\tforeach(string word; words) \n\t{ \n\t\tif (word.length != K) \n\t\t\tresult ~= word ~ \" \"; \n\t} \n\treturn result; \n} ",
    "{ \n    string[] words = test_str.split(\" \"); \n    string res = \"\"; \n    foreach(string word; words) \n    { \n        if (word.length != K) \n            res += word + \" \"; \n    } \n    return res; \n} ",
    "{ \n    string[] words = test_str.split(\" \"); \n    string res = \"\"; \n    foreach (string word; words) { \n        if (word.length != K) \n            res ~= word ~ \" \"; \n    } \n    return res; \n} ",
    "{ \n\tstring[] words = test_str.split;\n\tstring result = \"\";\n\tforeach(word; words)\n\t{\n\t\tif(word.length != K)\n\t\t{\n\t\t\tresult ~= word ~ \" \";\n\t\t}\n\t}\n\treturn result;\n} ",
    "{\n\tstring[] words = test_str.split;\n\tstring result = \"\";\n\tforeach(word; words)\n\t{\n\t\tif(word.length != K)\n\t\t{\n\t\t\tresult ~= word ~ \" \";\n\t\t}\n\t}\n\treturn result;\n}",
    "{ \n    string[] words = test_str.split; \n    string res = \"\"; \n    foreach(string word; words) \n    { \n        if (word.length != K) \n            res ~= word ~ \" \"; \n    } \n    return res; \n} ",
    "{ \n    string[] words = test_str.split(\" \"); \n    string result = \"\"; \n    foreach (string word; words) \n    { \n        if (word.length != K) \n            result ~= word ~ \" \"; \n    } \n    return result; \n} ",
    "{ \n\tstring[] words = test_str.split(\" \");\n\tstring result = \"\";\n\tforeach(word; words)\n\t{\n\t\tif(word.length != K)\n\t\t{\n\t\t\tresult ~= word ~ \" \";\n\t\t}\n\t}\n\treturn result;\n} ",
    "{ \n    string[] words = test_str.split(\" \"); \n    string result = \"\"; \n    foreach (string word; words) \n    { \n        if (word.length != K) \n            result ~= word ~ \" \"; \n    } \n    return result; \n} ",
    "{ \n\tstring[] words = test_str.split;\n\tstring result = \"\";\n\tforeach(word; words)\n\t{\n\t\tif(word.length != K)\n\t\t{\n\t\t\tresult ~= word;\n\t\t\tresult ~= \" \";\n\t\t}\n\t}\n\treturn result;\n} ",
    "{ \n    string[] words = test_str.split; \n    string result = \"\"; \n    foreach (string word; words) { \n        if (word.length != K) \n            result ~= word ~ \" \"; \n    } \n    return result; \n} ",
    "{ \n\tstring[] words = test_str.split;\n\tstring result = \"\";\n\tforeach(word; words)\n\t{\n\t\tif(word.length != K)\n\t\t\tresult ~= word ~ \" \";\n\t}\n\treturn result;\n} ",
    "{ \n\tstring[] words = test_str.split; \n\tstring result = \"\"; \n\tforeach(word; words) \n\t{ \n\t\tif(word.length != K) \n\t\t{ \n\t\t\tresult ~= word ~ \" \"; \n\t\t} \n\t} \n\treturn result; \n} ",
    "{ \n    string result = \"\"; \n    string[] words = test_str.split(\" \"); \n    foreach (string word; words) \n    { \n        if (word.length != K) \n            result += word + \" \"; \n    } \n    return result; \n} ",
    "{ \n    string[] words = test_str.split; \n    string result = \"\"; \n    foreach (string word; words) { \n        if (word.length != K) \n            result ~= word ~ \" \"; \n    } \n    return result; \n} ",
    "{\n\tstring[] words = test_str.split(\" \");\n\tstring result = \"\";\n\tforeach(word; words)\n\t{\n\t\tif(word.length != K)\n\t\t{\n\t\t\tresult ~= word ~ \" \";\n\t\t}\n\t}\n\treturn result;\n}",
    "{ \n    string[] words = test_str.split(); \n    string result = \"\"; \n    foreach (string word; words) { \n        if (word.length != K) \n            result ~= word ~ \" \"; \n    } \n    return result; \n} ",
    "{\n\tstring[] words = test_str.split;\n\tstring result = \"\";\n\tforeach(word; words)\n\t{\n\t\tif(word.length != K)\n\t\t{\n\t\t\tresult ~= word ~ \" \";\n\t\t}\n\t}\n\treturn result;\n}",
    "{ \n\tstring[] words = test_str.split(\" \");\n\tstring result = \"\";\n\tforeach(word; words)\n\t{\n\t\tif(word.length != K)\n\t\t{\n\t\t\tresult ~= word ~ \" \";\n\t\t}\n\t}\n\treturn result;\n} ",
    "{ \n    string[] words = test_str.split; \n    string res = \"\"; \n    foreach (string word; words) \n    { \n        if (word.length != K) \n            res ~= word ~ \" \"; \n    } \n    return res; \n} ",
    "{\n\tstring[] words = test_str.split;\n\tstring result = \"\";\n\tforeach(word; words)\n\t{\n\t\tif(word.length != K)\n\t\t\tresult ~= word ~ \" \";\n\t}\n\treturn result;\n}",
    "{ \n    string[] words = test_str.split(\" \"); \n    string result = \"\"; \n    foreach(string word; words) \n    { \n        if (word.length != K) \n            result ~= word ~ \" \"; \n    } \n    return result; \n} ",
    "{ \n    string[] words = test_str.split(\" \"); \n    string result = \"\"; \n    foreach (string word; words) { \n        if (word.length != K) \n            result ~= word ~ \" \"; \n    } \n    return result; \n} ",
    "{ \n    string[] words = test_str.split; \n    string result = \"\"; \n    foreach (string word; words) \n    { \n        if (word.length != K) \n            result ~= word ~ \" \"; \n    } \n    return result; \n} ",
    "{ \n\tstring[] words = test_str.split(\" \"); \n\tstring result = \"\"; \n\tforeach(word; words) \n\t{ \n\t\tif(word.length != K) \n\t\t\tresult ~= word ~ \" \"; \n\t} \n\treturn result; \n} ",
    "{ \n    string[] words = test_str.split(\" \"); \n    string result = \"\"; \n    foreach (string word; words) { \n        if (word.length != K) \n            result ~= word ~ \" \"; \n    } \n    return result; \n} ",
    "{ \n\tstring[] words = test_str.split(\" \");\n\tstring result = \"\";\n\tforeach(word; words)\n\t{\n\t\tif(word.length != K)\n\t\t{\n\t\t\tresult ~= word ~ \" \";\n\t\t}\n\t}\n\treturn result;\n} ",
    "{ \n    string[] words = test_str.split; \n    string result = \"\"; \n    foreach (string word; words) \n    { \n        if (word.length != K) \n            result ~= word ~ \" \"; \n    } \n    return result; \n} ",
    "{\n\tstring[] words = test_str.split;\n\tstring[] new_words;\n\tforeach(string word; words)\n\t{\n\t\tif(word.length != K)\n\t\t{\n\t\t\tnew_words ~= word;\n\t\t}\n\t}\n\treturn new_words.join(\" \");\n}",
    "{ \n    string[] words = test_str.split(\" \"); \n    string result = \"\"; \n    foreach(string word; words) \n    { \n        if (word.length != K) \n            result ~= word ~ \" \"; \n    } \n    return result; \n} ",
    "{ \n\tstring[] words = test_str.split;\n\tstring result = \"\";\n\tforeach(word; words)\n\t{\n\t\tif(word.length != K)\n\t\t{\n\t\t\tresult ~= word ~ \" \";\n\t\t}\n\t}\n\treturn result;\n} ",
    "{ \n\tstring[] words = test_str.split(\" \");\n\tstring result = \"\";\n\tforeach(word; words)\n\t{\n\t\tif(word.length != K)\n\t\t{\n\t\t\tresult ~= word ~ \" \";\n\t\t}\n\t}\n\treturn result;\n} ",
    "{\n\tstring[] words = test_str.split;\n\tstring result = \"\";\n\tforeach(word; words)\n\t{\n\t\tif(word.length != K)\n\t\t{\n\t\t\tresult ~= word ~ \" \";\n\t\t}\n\t}\n\treturn result;\n}",
    "{ \n    string[] words = test_str.split; \n    string result = \"\"; \n    foreach (string word; words) \n    { \n        if (word.length != K) \n            result ~= word ~ \" \"; \n    } \n    return result; \n} ",
    "{\n\tstring[] words = test_str.split;\n\tstring result = \"\";\n\tforeach(word; words)\n\t{\n\t\tif(word.length != K)\n\t\t\tresult ~= word;\n\t}\n\treturn result;\n}",
    "{ \n    string result = \"\"; \n    string[] words = test_str.split; \n    foreach (string word; words) \n    { \n        if (word.length != K) \n            result ~= word ~ \" \"; \n    } \n    return result; \n} ",
    "{ \n\tstring[] words = test_str.split;\n\tstring result = \"\";\n\tforeach(word; words)\n\t{\n\t\tif(word.length != K)\n\t\t\tresult ~= word ~ \" \";\n\t}\n\treturn result;\n} ",
    "{ \n    string[] words = test_str.split; \n    string result = \"\"; \n    foreach (string word; words) \n    { \n        if (word.length != K) \n            result ~= word ~ \" \"; \n    } \n    return result; \n} ",
    "{\n\tstring[] words = test_str.split;\n\tstring result = \"\";\n\tforeach(word; words)\n\t{\n\t\tif(word.length != K)\n\t\t{\n\t\t\tresult ~= word ~ \" \";\n\t\t}\n\t}\n\treturn result;\n}",
    "{ \n    string[] words = test_str.split(); \n    string result = \"\"; \n    foreach (string word; words) \n    { \n        if (word.length != K) \n            result ~= word ~ \" \"; \n    } \n    return result; \n} ",
    "{ \n\tstring[] words = test_str.split;\n\tstring result = \"\";\n\tforeach(word; words)\n\t{\n\t\tif(word.length != K)\n\t\t{\n\t\t\tresult ~= word ~ \" \";\n\t\t}\n\t}\n\treturn result;\n} ",
    "{ \n    string[] words = test_str.split(\" \"); \n    string result = \"\"; \n    foreach (string word; words) \n    { \n        if (word.length != K) \n            result ~= word ~ \" \"; \n    } \n    return result; \n} ",
    "{ \n\tstring[] words = split(test_str); \n\tstring result = \"\"; \n\tforeach(word; words) \n\t{ \n\t\tif(word.length != K) \n\t\t{ \n\t\t\tresult ~= word ~ \" \"; \n\t\t} \n\t} \n\treturn result; \n} ",
    "{\n\tstring[] words = test_str.split();\n\tstring result = \"\";\n\tforeach(word; words)\n\t{\n\t\tif(word.length != K)\n\t\t{\n\t\t\tresult ~= word ~ \" \";\n\t\t}\n\t}\n\treturn result.stripRight;\n}",
    "{ \n    string[] words = test_str.split; \n    string result = \"\"; \n    foreach (string word; words) { \n        if (word.length != K) \n            result ~= word ~ \" \"; \n    } \n    return result; \n} ",
    "{ \n\tauto words = test_str.split;\n\tstring result;\n\tforeach(word; words)\n\t{\n\t\tif(word.length != K)\n\t\t{\n\t\t\tresult ~= word ~ \" \";\n\t\t}\n\t}\n\treturn result;\n} ",
    "{ \n    string[] words = test_str.split(\" \"); \n    string result = \"\"; \n    foreach(string word; words) \n    { \n        if (word.length != K) \n            result ~= word ~ \" \"; \n    } \n    return result; \n} ",
    "{ \n    string[] words = test_str.split(\" \"); \n    string result = \"\"; \n    foreach (string word; words) \n    { \n        if (word.length != K) \n            result ~= word ~ \" \"; \n    } \n    return result; \n} ",
    "{ \n    string[] words = test_str.split; \n    string result = \"\"; \n    foreach (string word; words) \n    { \n        if (word.length != K) \n            result ~= word ~ \" \"; \n    } \n    return result; \n} ",
    "{ \n    string[] words = test_str.split; \n    string result = \"\"; \n    foreach(string word; words) \n    { \n        if (word.length != K) \n            result ~= word ~ \" \"; \n    } \n    return result; \n} ",
    "{\n\tstring[] words = test_str.split;\n\tstring result = \"\";\n\tforeach(word; words)\n\t{\n\t\tif(word.length != K)\n\t\t{\n\t\t\tresult ~= word ~ \" \";\n\t\t}\n\t}\n\treturn result;\n}",
    "{ \n    string[] words = test_str.split; \n    string res = \"\"; \n    foreach (string word; words) { \n        if (word.length != K) \n            res ~= word ~ \" \"; \n    } \n    return res; \n} ",
    "{ \n    string[] words = test_str.split(\" \"); \n    string result = \"\"; \n    foreach(string word; words) \n    { \n        if (word.length != K) \n            result ~= word ~ \" \"; \n    } \n    return result; \n} ",
    "{ \n    string[] words = test_str.split(\" \"); \n    string res = \"\"; \n    foreach(string word; words) \n    { \n        if (word.length != K) \n            res += word + \" \"; \n    } \n    return res; \n} ",
    "{ \n    string[] words = test_str.split; \n    string result = \"\"; \n    foreach (string word; words) { \n        if (word.length != K) \n            result ~= word ~ \" \"; \n    } \n    return result; \n} ",
    "{ \n    string[] words = test_str.split(\" \"); \n    string result = \"\"; \n    foreach (string word; words) \n    { \n        if (word.length != K) \n            result ~= word ~ \" \"; \n    } \n    return result; \n} ",
    "{ \n    string[] words = test_str.split(); \n    string result = \"\"; \n    foreach (string word; words) \n    { \n        if (word.length != K) \n            result ~= word ~ \" \"; \n    } \n    return result; \n} ",
    "{\n\tstring[] words = test_str.split;\n\tstring result = \"\";\n\tforeach(word; words)\n\t{\n\t\tif(word.length != K)\n\t\t\tresult ~= word ~ \" \";\n\t}\n\treturn result;\n}",
    "{ \n\tstring[] words = test_str.split(\" \"); \n\tstring result = \"\"; \n\tforeach(string word; words) { \n\t\tif (word.length != K) \n\t\t\tresult ~= word ~ \" \"; \n\t} \n\treturn result; \n} ",
    "{\n\tstring[] words = test_str.split(\" \");\n\tstring result = \"\";\n\tforeach(word; words)\n\t{\n\t\tif(word.length != K)\n\t\t{\n\t\t\tresult ~= word ~ \" \";\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = test_str.split;\n\tforeach(word; words)\n\t{\n\t\tif(word.length == K)\n\t\t{\n\t\t\ttest_str = test_str.replace(word, \"\");\n\t\t}\n\t}\n\treturn test_str;\n}",
    "{ \n\tstring[] words = test_str.split(\" \");\n\tstring result = \"\";\n\tforeach(word; words)\n\t{\n\t\tif(word.length != K)\n\t\t{\n\t\t\tresult ~= word ~ \" \";\n\t\t}\n\t}\n\treturn result;\n} ",
    "{ \n\tstring[] words = test_str.split(\" \");\n\tstring result = \"\";\n\tforeach(word; words)\n\t{\n\t\tif(word.length != K)\n\t\t{\n\t\t\tresult ~= word ~ \" \";\n\t\t}\n\t}\n\treturn result;\n} ",
    "{ \n    string[] words = test_str.split; \n    string result = \"\"; \n    foreach (string word; words) \n    { \n        if (word.length != K) \n            result ~= word ~ \" \"; \n    } \n    return result; \n} ",
    "{ \n    string[] words = test_str.split; \n    string result = \"\"; \n    foreach (string word; words) \n    { \n        if (word.length != K) \n            result ~= word ~ \" \"; \n    } \n    return result; \n} ",
    "{\n\tstring[] words = test_str.split;\n\tstring result = \"\";\n\tforeach(word; words)\n\t{\n\t\tif(word.length != K)\n\t\t{\n\t\t\tresult ~= word ~ \" \";\n\t\t}\n\t}\n\treturn result;\n}",
    "{ \n\tstring[] words = test_str.split;\n\tstring result = \"\";\n\tforeach(word; words)\n\t{\n\t\tif(word.length != K)\n\t\t{\n\t\t\tresult ~= word ~ \" \";\n\t\t}\n\t}\n\treturn result.stripRight;\n} ",
    "{ \n    string[] words = test_str.split; \n    string result = \"\"; \n    foreach (string word; words) \n    { \n        if (word.length != K) \n            result ~= word ~ \" \"; \n    } \n    return result; \n} ",
    "{\n\tstring[] words = test_str.split;\n\tstring result = \"\";\n\tforeach(word; words)\n\t{\n\t\tif(word.length != K)\n\t\t{\n\t\t\tresult ~= word ~ \" \";\n\t\t}\n\t}\n\treturn result;\n}",
    "{ \n    string[] words = test_str.split; \n    string result = \"\"; \n    foreach (string word; words) \n    { \n        if (word.length != K) \n            result ~= word ~ \" \"; \n    } \n    return result; \n} ",
    "{ \n    string[] words = test_str.split; \n    string result = \"\"; \n    foreach (string word; words) \n    { \n        if (word.length != K) \n            result ~= word ~ \" \"; \n    } \n    return result.stripRight; \n} ",
    "{\n    string[] words = test_str.split;\n    string result = \"\";\n    foreach(word; words)\n    {\n        if(word.length != K)\n        {\n            result ~= word ~ \" \";\n        }\n    }\n    return result;\n}",
    "{\n\tstring[] words = test_str.split;\n\tstring result = \"\";\n\tforeach(word; words)\n\t{\n\t\tif(word.length != K)\n\t\t{\n\t\t\tresult ~= word ~ \" \";\n\t\t}\n\t}\n\treturn result;\n}",
    "{ \n\tstring[] words = split(test_str); \n\tstring result = \"\"; \n\tforeach(string word; words) \n\t{ \n\t\tif (word.length != K) \n\t\t\tresult ~= word ~ \" \"; \n\t} \n\treturn result; \n} ",
    "{ \n    string[] words = test_str.split; \n    string result = \"\"; \n    foreach(string word; words) \n    { \n        if (word.length != K) \n            result ~= word ~ \" \"; \n    } \n    return result; \n} ",
    "{\n\tstring[] words = test_str.split;\n\tstring result = \"\";\n\tforeach(word; words)\n\t{\n\t\tif(word.length != K)\n\t\t{\n\t\t\tresult ~= word ~ \" \";\n\t\t}\n\t}\n\treturn result;\n}",
    "{ \n\tstring[] words = test_str.split;\n\tstring result = \"\";\n\tforeach(word; words)\n\t{\n\t\tif(word.length != K)\n\t\t\tresult ~= word ~ \" \";\n\t}\n\treturn result;\n} ",
    "{\n\tstring[] words = test_str.split;\n\tstring result;\n\tforeach(word; words)\n\t{\n\t\tif(word.length != K)\n\t\t{\n\t\t\tresult ~= word ~ \" \";\n\t\t}\n\t}\n\treturn result;\n}",
    "{ \n\tstring[] words = test_str.split(\" \"); \n\tstring res = \"\"; \n\tforeach(word; words) \n\t{ \n\t\tif (word.length != K) \n\t\t\tres ~= word ~ \" \"; \n\t} \n\treturn res; \n} ",
    "{ \n    string[] words = test_str.split; \n    string result = \"\"; \n    foreach (word; words) \n        if (word.length != K) \n            result ~= word ~ \" \"; \n    return result.stripRight; \n} ",
    "{ \n    string[] words = test_str.split; \n    string result = \"\"; \n    foreach (string word; words) { \n        if (word.length != K) \n            result ~= word ~ \" \"; \n    } \n    return result; \n} ",
    "{\n\tstring[] words = test_str.split;\n\tstring result = \"\";\n\tforeach(word; words)\n\t{\n\t\tif(word.length != K)\n\t\t{\n\t\t\tresult ~= word ~ \" \";\n\t\t}\n\t}\n\treturn result;\n}",
    "{ \n\tstring[] words = test_str.split;\n\tstring result = \"\";\n\tforeach(word; words)\n\t{\n\t\tif(word.length != K)\n\t\t{\n\t\t\tresult ~= word ~ \" \";\n\t\t}\n\t}\n\treturn result;\n} ",
    "{ \n    string[] words = test_str.split; \n    string result = \"\"; \n    foreach(string word; words) \n    { \n        if (word.length != K) \n            result ~= word ~ \" \"; \n    } \n    return result; \n} ",
    "{ \n\tstring[] words = test_str.split;\n\tstring result = \"\";\n\tforeach(word; words)\n\t{\n\t\tif(word.length != K)\n\t\t{\n\t\t\tresult ~= word ~ \" \";\n\t\t}\n\t}\n\treturn result;\n} ",
    "{ \n\tstring[] words = test_str.split(); \n\tstring result = \"\"; \n\tforeach (string word; words) \n\t{ \n\t\tif (word.length != K) \n\t\t\tresult ~= word ~ \" \"; \n\t} \n\treturn result; \n} ",
    "{ \n\tstring[] words = test_str.split();\n\tstring[] result;\n\tforeach(word; words)\n\t{\n\t\tif(word.length != K)\n\t\t\tresult ~= word;\n\t}\n\treturn result.join(\" \");\n} ",
    "{ \n\tstring[] words = test_str.split;\n\tstring result = \"\";\n\tforeach(word; words)\n\t{\n\t\tif(word.length != K)\n\t\t{\n\t\t\tresult ~= word ~ \" \";\n\t\t}\n\t}\n\treturn result;\n} ",
    "{\n\tstring[] words = test_str.split;\n\tstring[] result;\n\tforeach(string word; words)\n\t{\n\t\tif(word.length != K)\n\t\t\tresult ~= word;\n\t}\n\treturn result.join(\" \");\n}",
    "{ \n    string[] words = test_str.split; \n    string result = \"\"; \n    foreach (string word; words) \n    { \n        if (word.length != K) \n            result ~= word ~ \" \"; \n    } \n    return result; \n} ",
    "{ \n    string[] words = test_str.split; \n    string result = \"\"; \n    foreach (string word; words) { \n        if (word.length != K) \n            result ~= word ~ \" \"; \n    } \n    return result; \n} ",
    "{ \n    string[] words = test_str.split; \n    string result = \"\"; \n    foreach (string word; words) \n    { \n        if (word.length != K) \n            result ~= word ~ \" \"; \n    } \n    return result; \n} ",
    "{ \n\tstring[] words = test_str.split(\" \");\n\tstring result = \"\";\n\tforeach(word; words)\n\t{\n\t\tif(word.length != K)\n\t\t{\n\t\t\tresult ~= word ~ \" \";\n\t\t}\n\t}\n\treturn result;\n} ",
    "{ \n\tstring[] words = test_str.split;\n\tstring result = \"\";\n\tforeach(word; words)\n\t{\n\t\tif(word.length != K)\n\t\t{\n\t\t\tresult ~= word ~ \" \";\n\t\t}\n\t}\n\treturn result;\n} ",
    "{\n\tstring[] words = test_str.split;\n\tstring[] result;\n\tforeach(word; words)\n\t{\n\t\tif(word.length != K)\n\t\t{\n\t\t\tresult ~= word;\n\t\t}\n\t}\n\treturn result.join(\" \");\n}",
    "{ \n    string[] words = test_str.split; \n    string res = \"\"; \n    foreach(string word; words) \n    { \n        if (word.length != K) \n            res ~= word ~ \" \"; \n    } \n    return res; \n} ",
    "{ \n    string[] words = test_str.split; \n    string result = \"\"; \n    foreach(string word; words) \n    { \n        if (word.length != K) \n            result ~= word ~ \" \"; \n    } \n    return result; \n} ",
    "{ \n\tstring[] words = test_str.split(\" \"); \n\tstring result = \"\"; \n\tforeach(string word; words) \n\t{ \n\t\tif(word.length != K) \n\t\t{ \n\t\t\tresult ~= word; \n\t\t\tresult ~= \" \"; \n\t\t} \n\t} \n\treturn result; \n} ",
    "{\n\tstring[] words = test_str.split;\n\tstring[] result;\n\tforeach(word; words)\n\t{\n\t\tif(word.length != K)\n\t\t\tresult ~= word;\n\t}\n\treturn result.join;\n}",
    "{ \n    string[] words = test_str.split(\" \"); \n    string result = \"\"; \n    foreach (string word; words) \n    { \n        if (word.length != K) \n            result ~= word ~ \" \"; \n    } \n    return result; \n} ",
    "{\n\tstring[] words = test_str.split;\n\tstring[] new_words;\n\tforeach(word; words)\n\t{\n\t\tif(word.length != K)\n\t\t\tnew_words ~= word;\n\t}\n\treturn new_words.join(\" \");\n}",
    "{ \n    string[] words = test_str.split; \n    string res = \"\"; \n    foreach (string word; words) \n        if (word.length != K) \n            res ~= word ~ \" \"; \n    return res; \n} ",
    "{ \n\tstring[] words = test_str.split;\n\tstring result = \"\";\n\tforeach(word; words)\n\t{\n\t\tif(word.length != K)\n\t\t\tresult ~= word ~ \" \";\n\t}\n\treturn result;\n} ",
    "{ \n    string[] words = test_str.split(\" \"); \n    string result = \"\"; \n    foreach(string word; words) \n    { \n        if (word.length != K) \n            result ~= word ~ \" \"; \n    } \n    return result; \n} ",
    "{ \n    string[] words = test_str.split; \n    string result = \"\"; \n    foreach (string word; words) \n    { \n        if (word.length != K) \n            result ~= word ~ \" \"; \n    } \n    return result; \n} ",
    "{ \n\tstring[] words = test_str.split;\n\tstring result = \"\";\n\tforeach(word; words)\n\t{\n\t\tif(word.length != K)\n\t\t{\n\t\t\tresult ~= word ~ \" \";\n\t\t}\n\t}\n\treturn result;\n} ",
    "{ \n\tstring[] words = test_str.split;\n\tstring result = \"\";\n\tforeach(word; words)\n\t{\n\t\tif(word.length != K)\n\t\t{\n\t\t\tresult ~= word ~ \" \";\n\t\t}\n\t}\n\treturn result;\n} ",
    "{ \n    string[] words = test_str.split; \n    string result = \"\"; \n    foreach(string word; words) \n    { \n        if (word.length != K) \n            result ~= word ~ \" \"; \n    } \n    return result; \n} ",
    "{\n\tstring[] words = test_str.split;\n\tstring result = \"\";\n\tforeach(word; words)\n\t{\n\t\tif(word.length != K)\n\t\t{\n\t\t\tresult ~= word ~ \" \";\n\t\t}\n\t}\n\treturn result;\n}",
    "{ \n\tstring[] words = test_str.split(\" \");\n\tstring result = \"\";\n\tforeach(word; words)\n\t{\n\t\tif(word.length != K)\n\t\t{\n\t\t\tresult ~= word ~ \" \";\n\t\t}\n\t}\n\treturn result;\n} ",
    "{ \n\tstring[] words = test_str.split;\n\tstring result = \"\";\n\tforeach(word; words)\n\t{\n\t\tif(word.length != K)\n\t\t{\n\t\t\tresult ~= word ~ \" \";\n\t\t}\n\t}\n\treturn result;\n} ",
    "{ \n    string[] words = test_str.split; \n    string result = \"\"; \n    foreach (string word; words) \n    { \n        if (word.length != K) \n            result ~= word ~ \" \"; \n    } \n    return result; \n} ",
    "{\n\tstring[] words = test_str.split(\" \");\n\tstring result = \"\";\n\tforeach(word; words)\n\t{\n\t\tif(word.length != K)\n\t\t{\n\t\t\tresult ~= word ~ \" \";\n\t\t}\n\t}\n\treturn result;\n}",
    "{ \n\tstring[] words = test_str.split(\" \");\n\tstring result = \"\";\n\tforeach(word; words)\n\t{\n\t\tif(word.length != K)\n\t\t{\n\t\t\tresult ~= word ~ \" \";\n\t\t}\n\t}\n\treturn result;\n} ",
    "{\n\tstring[] words = test_str.split(\" \");\n\tstring result = \"\";\n\tforeach(word; words)\n\t{\n\t\tif(word.length != K)\n\t\t{\n\t\t\tresult ~= word ~ \" \";\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = test_str.split;\n\tstring[] result;\n\tforeach(word; words)\n\t{\n\t\tif(word.length != K)\n\t\t{\n\t\t\tresult ~= word;\n\t\t}\n\t}\n\treturn result.join(\" \");\n}",
    "{ \n    string[] words = test_str.split; \n    string result = \"\"; \n    foreach (string word; words) { \n        if (word.length != K) { \n            result ~= word ~ \" \"; \n        } \n    } \n    return result; \n} ",
    "{ \n    string[] words = test_str.split; \n    string result = \"\"; \n    foreach(string word; words) \n    { \n        if (word.length != K) \n            result ~= word ~ \" \"; \n    } \n    return result; \n} ",
    "{ \n    string[] words = test_str.split(\" \"); \n    string result = \"\"; \n    foreach (string word; words) { \n        if (word.length != K) \n            result ~= word ~ \" \"; \n    } \n    return result; \n} ",
    "{ \n    string[] words = test_str.split; \n    string result = \"\"; \n    foreach (string word; words) { \n        if (word.length != K) \n            result ~= word ~ \" \"; \n    } \n    return result; \n} ",
    "{ \n\tstring[] words = test_str.split; \n\tstring result = \"\"; \n\tforeach(string word; words) \n\t{ \n\t\tif (word.length != K) \n\t\t\tresult ~= word ~ \" \"; \n\t} \n\treturn result; \n} ",
    "{ \n\tstring[] words = split(test_str, \" \");\n\tstring[] result;\n\tforeach(word; words)\n\t{\n\t\tif(word.length != K)\n\t\t\tresult ~= word;\n\t}\n\treturn join(result, \" \");\n} ",
    "{\n\tstring[] words = test_str.split;\n\tstring result = \"\";\n\tforeach(word; words)\n\t{\n\t\tif(word.length != K)\n\t\t{\n\t\t\tresult ~= word;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = test_str.split;\n\tstring result = \"\";\n\tforeach(word; words)\n\t{\n\t\tif(word.length != K)\n\t\t{\n\t\t\tresult ~= word ~ \" \";\n\t\t}\n\t}\n\treturn result;\n}",
    "{ \n    string[] words = test_str.split; \n    string result = \"\"; \n    foreach (string word; words) \n    { \n        if (word.length != K) \n            result ~= word ~ \" \"; \n    } \n    return result.trim; \n} ",
    "{ \n\tstring[] words = test_str.split;\n\tstring result = \"\";\n\tforeach(word; words)\n\t{\n\t\tif(word.length != K)\n\t\t{\n\t\t\tresult ~= word ~ \" \";\n\t\t}\n\t}\n\treturn result;\n} ",
    "{ \n    string[] words = test_str.split; \n    string result = \"\"; \n    foreach (string word; words) \n    { \n        if (word.length != K) \n            result ~= word ~ \" \"; \n    } \n    return result; \n} ",
    "{ \n    string[] words = test_str.split(\" \"); \n    string res = \"\"; \n    foreach(string word; words) \n    { \n        if (word.length != K) \n            res += word + \" \"; \n    } \n    return res; \n} ",
    "{\n\tstring[] words = test_str.split;\n\tstring result = \"\";\n\tforeach(word; words)\n\t{\n\t\tif(word.length != K)\n\t\t{\n\t\t\tresult ~= word ~ \" \";\n\t\t}\n\t}\n\treturn result;\n}",
    "{ \n    string[] words = test_str.split(\" \"); \n    string result = \"\"; \n    foreach(string word; words) \n    { \n        if (word.length != K) \n            result ~= word ~ \" \"; \n    } \n    return result; \n} ",
    "{ \n    string[] words = test_str.split(\" \"); \n    string result = \"\"; \n    foreach (string word; words) { \n        if (word.length != K) \n            result ~= word ~ \" \"; \n    } \n    return result; \n} ",
    "{ \n\tstring[] words = test_str.split;\n\tstring result = \"\";\n\tforeach(word; words)\n\t{\n\t\tif(word.length != K)\n\t\t{\n\t\t\tresult ~= word ~ \" \";\n\t\t}\n\t}\n\treturn result;\n} "
  ]
}