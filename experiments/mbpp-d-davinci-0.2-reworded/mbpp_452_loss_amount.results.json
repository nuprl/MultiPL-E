{
  "name": "mbpp_452_loss_amount",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_452_loss_amount.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn max(0L, actual_cost - sale_amount);\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "/tmp/tmpj16jxeso.d(10): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj16jxeso.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn max(0L, actual_cost - sale_amount);\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "/tmp/tmpj16jxeso.d(10): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj16jxeso.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn max(0, actual_cost - sale_amount);\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "/tmp/tmpic64n34k.d(10): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpic64n34k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\tif(actual_cost > sale_amount)\n\t\treturn actual_cost - sale_amount;\n\telse\n\t\treturn 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpszz9yo_d.d(19): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmpszz9yo_d.__unittest_L15_C1() [0x427a48]\n??:? void tmpszz9yo_d.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\tif(actual_cost > sale_amount)\n\t{\n\t\treturn actual_cost - sale_amount;\n\t}\n\treturn 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp9kncaipk.d(20): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmp9kncaipk.__unittest_L16_C1() [0x427a48]\n??:? void tmp9kncaipk.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn max(0L, actual_cost - sale_amount);\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "/tmp/tmpj16jxeso.d(10): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj16jxeso.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn (actual_cost - sale_amount) > 0 ? (actual_cost - sale_amount) : 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp94791z_4.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmp94791z_4.__unittest_L12_C1() [0x427a44]\n??:? void tmp94791z_4.__modtest() [0x427aac]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\tif (actual_cost > sale_amount)\n\t{\n\t\treturn actual_cost - sale_amount;\n\t}\n\telse\n\t{\n\t\treturn 0;\n\t}\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpkmnwdjok.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmpkmnwdjok.__unittest_L19_C1() [0x427a48]\n??:? void tmpkmnwdjok.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn max(0L, actual_cost - sale_amount);\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "/tmp/tmpj16jxeso.d(10): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj16jxeso.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn max(0L, actual_cost - sale_amount);\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "/tmp/tmpj16jxeso.d(10): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj16jxeso.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn max(0L, actual_cost - sale_amount);\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "/tmp/tmpj16jxeso.d(10): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj16jxeso.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn max(0L, actual_cost - sale_amount);\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "/tmp/tmpj16jxeso.d(10): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj16jxeso.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\tif (actual_cost > sale_amount)\n\t{\n\t\treturn actual_cost - sale_amount;\n\t}\n\telse\n\t{\n\t\treturn 0;\n\t}\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpkmnwdjok.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmpkmnwdjok.__unittest_L19_C1() [0x427a48]\n??:? void tmpkmnwdjok.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\tif(actual_cost > sale_amount)\n\t\treturn actual_cost - sale_amount;\n\telse\n\t\treturn 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpszz9yo_d.d(19): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmpszz9yo_d.__unittest_L15_C1() [0x427a48]\n??:? void tmpszz9yo_d.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn max(actual_cost - sale_amount, 0L);\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "/tmp/tmpyhxwys0k.d(10): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyhxwys0k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn max(actual_cost - sale_amount, 0L);\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "/tmp/tmpyhxwys0k.d(10): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyhxwys0k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\tif(actual_cost > sale_amount)\n\t\treturn actual_cost - sale_amount;\n\telse\n\t\treturn 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpszz9yo_d.d(19): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmpszz9yo_d.__unittest_L15_C1() [0x427a48]\n??:? void tmpszz9yo_d.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn max(0L, actual_cost - sale_amount);\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "/tmp/tmpj16jxeso.d(10): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj16jxeso.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn (actual_cost - sale_amount);\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpijurlxv4.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d25]\n??:? void tmpijurlxv4.__unittest_L12_C1() [0x427a40]\n??:? void tmpijurlxv4.__modtest() [0x427aa8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff20]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8b5]\n??:? runModuleUnitTests [0x42b821]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428174]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\tif (actual_cost > sale_amount)\n\t\treturn actual_cost - sale_amount;\n\telse\n\t\treturn 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppjo3xlhf.d(19): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmppjo3xlhf.__unittest_L15_C1() [0x427a48]\n??:? void tmppjo3xlhf.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn max(actual_cost - sale_amount, 0L);\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "/tmp/tmpyhxwys0k.d(10): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyhxwys0k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn max(0, actual_cost - sale_amount);\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "/tmp/tmpic64n34k.d(10): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpic64n34k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn max(0L, actual_cost - sale_amount);\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "/tmp/tmpj16jxeso.d(10): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj16jxeso.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn (actual_cost > sale_amount) ? actual_cost - sale_amount : 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1666122634,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpxqbxwtmx.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d25]\n??:? void tmpxqbxwtmx.__unittest_L12_C1() [0x427a40]\n??:? void tmpxqbxwtmx.__modtest() [0x427aa8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff20]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8b5]\n??:? runModuleUnitTests [0x42b821]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428174]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\tif(actual_cost > sale_amount)\n\t{\n\t\treturn actual_cost - sale_amount;\n\t}\n\telse\n\t{\n\t\treturn 0;\n\t}\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1666122634,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp9jiogoiy.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmp9jiogoiy.__unittest_L19_C1() [0x427a48]\n??:? void tmp9jiogoiy.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\tif(actual_cost > sale_amount)\n\t\treturn actual_cost - sale_amount;\n\telse\n\t\treturn 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpszz9yo_d.d(19): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmpszz9yo_d.__unittest_L15_C1() [0x427a48]\n??:? void tmpszz9yo_d.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn max(0L, actual_cost - sale_amount);\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "/tmp/tmpj16jxeso.d(10): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj16jxeso.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn max(actual_cost - sale_amount, 0L);\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "/tmp/tmpyhxwys0k.d(10): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyhxwys0k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn sale_amount < actual_cost ? actual_cost - sale_amount : 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1666122634,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjib6u9ry.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmpjib6u9ry.__unittest_L12_C1() [0x427a48]\n??:? void tmpjib6u9ry.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\tif(actual_cost > sale_amount)\n\t\treturn actual_cost - sale_amount;\n\telse\n\t\treturn 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpszz9yo_d.d(19): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmpszz9yo_d.__unittest_L15_C1() [0x427a48]\n??:? void tmpszz9yo_d.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn max(0L, actual_cost - sale_amount);\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "/tmp/tmpj16jxeso.d(10): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj16jxeso.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\tif (actual_cost > sale_amount)\n\t{\n\t\treturn actual_cost - sale_amount;\n\t}\n\telse\n\t{\n\t\treturn 0;\n\t}\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpkmnwdjok.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmpkmnwdjok.__unittest_L19_C1() [0x427a48]\n??:? void tmpkmnwdjok.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\tif(actual_cost > sale_amount)\n\t\treturn actual_cost - sale_amount;\n\telse\n\t\treturn 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpszz9yo_d.d(19): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmpszz9yo_d.__unittest_L15_C1() [0x427a48]\n??:? void tmpszz9yo_d.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn max(actual_cost - sale_amount, 0L);\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "/tmp/tmpyhxwys0k.d(10): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyhxwys0k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn max(actual_cost - sale_amount, 0L);\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "/tmp/tmpyhxwys0k.d(10): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyhxwys0k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\tif(actual_cost > sale_amount)\n\t{\n\t\treturn actual_cost - sale_amount;\n\t}\n\telse\n\t{\n\t\treturn 0;\n\t}\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1666122634,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp9jiogoiy.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmp9jiogoiy.__unittest_L19_C1() [0x427a48]\n??:? void tmp9jiogoiy.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn max(0L, actual_cost - sale_amount);\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "/tmp/tmpj16jxeso.d(10): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj16jxeso.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\tif(actual_cost > sale_amount)\n\t{\n\t\treturn actual_cost - sale_amount;\n\t}\n\telse\n\t{\n\t\treturn 0;\n\t}\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1666122634,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp9jiogoiy.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmp9jiogoiy.__unittest_L19_C1() [0x427a48]\n??:? void tmp9jiogoiy.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn max(actual_cost - sale_amount, 0L);\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "/tmp/tmpyhxwys0k.d(10): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyhxwys0k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn actual_cost > sale_amount ? actual_cost - sale_amount : 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1666122634,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpzq5t6u6i.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d25]\n??:? void tmpzq5t6u6i.__unittest_L12_C1() [0x427a40]\n??:? void tmpzq5t6u6i.__modtest() [0x427aa8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff20]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8b5]\n??:? runModuleUnitTests [0x42b821]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428174]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn max(0L, actual_cost - sale_amount);\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "/tmp/tmpj16jxeso.d(10): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj16jxeso.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\tif(actual_cost > sale_amount)\n\t{\n\t\treturn actual_cost - sale_amount;\n\t}\n\telse\n\t{\n\t\treturn 0;\n\t}\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1666122634,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp9jiogoiy.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmp9jiogoiy.__unittest_L19_C1() [0x427a48]\n??:? void tmp9jiogoiy.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn (actual_cost - sale_amount) > 0 ? (actual_cost - sale_amount) : 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp94791z_4.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmp94791z_4.__unittest_L12_C1() [0x427a44]\n??:? void tmp94791z_4.__modtest() [0x427aac]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn max(actual_cost - sale_amount, 0L);\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "/tmp/tmpyhxwys0k.d(10): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyhxwys0k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn max(0L, actual_cost - sale_amount);\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "/tmp/tmpj16jxeso.d(10): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj16jxeso.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn max(actual_cost - sale_amount, 0);\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1666122634,
      "stdout": "",
      "stderr": "/tmp/tmpib7yn6hb.d(10): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpib7yn6hb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn max(actual_cost - sale_amount, 0L);\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "/tmp/tmpyhxwys0k.d(10): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyhxwys0k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn max(0L, actual_cost - sale_amount);\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "/tmp/tmpj16jxeso.d(10): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj16jxeso.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn max(0L, actual_cost - sale_amount);\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "/tmp/tmpj16jxeso.d(10): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj16jxeso.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn max(actual_cost - sale_amount, 0L);\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "/tmp/tmpyhxwys0k.d(10): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyhxwys0k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn max(actual_cost - sale_amount, 0L);\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "/tmp/tmpyhxwys0k.d(10): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyhxwys0k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn max(actual_cost - sale_amount, 0L);\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "/tmp/tmpyhxwys0k.d(10): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyhxwys0k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn max(actual_cost - sale_amount, 0L);\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "/tmp/tmpyhxwys0k.d(10): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyhxwys0k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn max(0L, actual_cost - sale_amount);\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "/tmp/tmpj16jxeso.d(10): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj16jxeso.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn max(actual_cost - sale_amount, 0);\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1666122634,
      "stdout": "",
      "stderr": "/tmp/tmpib7yn6hb.d(10): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpib7yn6hb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\tif(actual_cost > sale_amount)\n\t{\n\t\treturn actual_cost - sale_amount;\n\t}\n\telse\n\t{\n\t\treturn 0;\n\t}\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1666122634,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp9jiogoiy.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmp9jiogoiy.__unittest_L19_C1() [0x427a48]\n??:? void tmp9jiogoiy.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn sale_amount < actual_cost ? actual_cost - sale_amount : 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1666122634,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjib6u9ry.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmpjib6u9ry.__unittest_L12_C1() [0x427a48]\n??:? void tmpjib6u9ry.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn max(actual_cost - sale_amount, 0L);\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "/tmp/tmpyhxwys0k.d(10): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyhxwys0k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n    long loss = actual_cost - sale_amount;\n    if (loss > 0)\n        return loss;\n    else\n        return 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1666122634,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpq2v9mg_s.d(20): unittest failure\n----------------\n??:? _d_unittestp [0x427d35]\n??:? void tmpq2v9mg_s.__unittest_L16_C1() [0x427a4c]\n??:? void tmpq2v9mg_s.__modtest() [0x427ab4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8ee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa81]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff30]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa0d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8c5]\n??:? runModuleUnitTests [0x42b831]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428184]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\tlong loss;\n\tif(actual_cost > sale_amount)\n\t{\n\t\tloss = actual_cost - sale_amount;\n\t}\n\telse\n\t{\n\t\tloss = 0;\n\t}\n\treturn loss;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1666122634,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp86fm2e20.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x427d45]\n??:? void tmp86fm2e20.__unittest_L21_C1() [0x427a5c]\n??:? void tmp86fm2e20.__modtest() [0x427ac4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba6b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa91]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff40]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa1d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8d5]\n??:? runModuleUnitTests [0x42b841]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428194]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\tif(actual_cost > sale_amount)\n\t{\n\t\treturn actual_cost - sale_amount;\n\t}\n\telse\n\t{\n\t\treturn 0;\n\t}\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1666122634,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp9jiogoiy.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmp9jiogoiy.__unittest_L19_C1() [0x427a48]\n??:? void tmp9jiogoiy.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn max(0L, actual_cost - sale_amount);\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "/tmp/tmpj16jxeso.d(10): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj16jxeso.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\tif (actual_cost > sale_amount)\n\t{\n\t\treturn actual_cost - sale_amount;\n\t}\n\treturn 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1666122634,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpetv8r99c.d(20): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmpetv8r99c.__unittest_L16_C1() [0x427a48]\n??:? void tmpetv8r99c.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\tif (actual_cost > sale_amount)\n\t{\n\t\treturn actual_cost - sale_amount;\n\t}\n\treturn 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1666122634,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpetv8r99c.d(20): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmpetv8r99c.__unittest_L16_C1() [0x427a48]\n??:? void tmpetv8r99c.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn max(0L, actual_cost - sale_amount);\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "/tmp/tmpj16jxeso.d(10): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj16jxeso.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn (actual_cost > sale_amount) ? actual_cost - sale_amount : 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1666122634,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpxqbxwtmx.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d25]\n??:? void tmpxqbxwtmx.__unittest_L12_C1() [0x427a40]\n??:? void tmpxqbxwtmx.__modtest() [0x427aa8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff20]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8b5]\n??:? runModuleUnitTests [0x42b821]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428174]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn max(0L, actual_cost - sale_amount);\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "/tmp/tmpj16jxeso.d(10): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj16jxeso.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn max(0L, actual_cost - sale_amount);\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "/tmp/tmpj16jxeso.d(10): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj16jxeso.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\tif(actual_cost > sale_amount)\n\t\treturn actual_cost - sale_amount;\n\telse\n\t\treturn 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpszz9yo_d.d(19): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmpszz9yo_d.__unittest_L15_C1() [0x427a48]\n??:? void tmpszz9yo_d.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn max(actual_cost - sale_amount, 0L);\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "/tmp/tmpyhxwys0k.d(10): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyhxwys0k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn sale_amount < actual_cost ? actual_cost - sale_amount : 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1666122634,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjib6u9ry.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmpjib6u9ry.__unittest_L12_C1() [0x427a48]\n??:? void tmpjib6u9ry.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\tif (actual_cost > sale_amount)\n\t\treturn actual_cost - sale_amount;\n\telse\n\t\treturn 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppjo3xlhf.d(19): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmppjo3xlhf.__unittest_L15_C1() [0x427a48]\n??:? void tmppjo3xlhf.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn max(actual_cost - sale_amount, 0L);\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "/tmp/tmpyhxwys0k.d(10): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyhxwys0k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\tif(actual_cost > sale_amount)\n\t\treturn actual_cost - sale_amount;\n\telse\n\t\treturn 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpszz9yo_d.d(19): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmpszz9yo_d.__unittest_L15_C1() [0x427a48]\n??:? void tmpszz9yo_d.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\tif(actual_cost > sale_amount)\n\t{\n\t\treturn actual_cost - sale_amount;\n\t}\n\telse\n\t{\n\t\treturn 0;\n\t}\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1666122634,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp9jiogoiy.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmp9jiogoiy.__unittest_L19_C1() [0x427a48]\n??:? void tmp9jiogoiy.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn (actual_cost > sale_amount) ? actual_cost - sale_amount : 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1666122634,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpxqbxwtmx.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d25]\n??:? void tmpxqbxwtmx.__unittest_L12_C1() [0x427a40]\n??:? void tmpxqbxwtmx.__modtest() [0x427aa8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff20]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8b5]\n??:? runModuleUnitTests [0x42b821]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428174]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn (actual_cost > sale_amount) ? actual_cost - sale_amount : 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1666122634,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpxqbxwtmx.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d25]\n??:? void tmpxqbxwtmx.__unittest_L12_C1() [0x427a40]\n??:? void tmpxqbxwtmx.__modtest() [0x427aa8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff20]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8b5]\n??:? runModuleUnitTests [0x42b821]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428174]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\tif(actual_cost > sale_amount)\n\t{\n\t\treturn actual_cost - sale_amount;\n\t}\n\telse\n\t{\n\t\treturn 0;\n\t}\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1666122634,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp9jiogoiy.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmp9jiogoiy.__unittest_L19_C1() [0x427a48]\n??:? void tmp9jiogoiy.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn max(0, actual_cost - sale_amount);\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "/tmp/tmpic64n34k.d(10): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpic64n34k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\tif(actual_cost > sale_amount)\n\t\treturn actual_cost - sale_amount;\n\telse\n\t\treturn 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpszz9yo_d.d(19): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmpszz9yo_d.__unittest_L15_C1() [0x427a48]\n??:? void tmpszz9yo_d.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\tlong loss;\n\tif(actual_cost > sale_amount)\n\t{\n\t\tloss = actual_cost - sale_amount;\n\t\treturn loss;\n\t}\n\telse\n\t{\n\t\treturn 0;\n\t}\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1666122634,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp2teopvlw.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmp2teopvlw.__unittest_L21_C1() [0x427a48]\n??:? void tmp2teopvlw.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn max(0L, actual_cost - sale_amount);\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "/tmp/tmpj16jxeso.d(10): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj16jxeso.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\tif(actual_cost > sale_amount)\n\t{\n\t\treturn actual_cost - sale_amount;\n\t}\n\telse\n\t{\n\t\treturn 0;\n\t}\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1666122634,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp9jiogoiy.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmp9jiogoiy.__unittest_L19_C1() [0x427a48]\n??:? void tmp9jiogoiy.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\tif (actual_cost > sale_amount) \n\t{\n\t\treturn actual_cost - sale_amount;\n\t}\n\telse \n\t{\n\t\treturn 0;\n\t}\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1666122634,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmptp2g9src.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmptp2g9src.__unittest_L19_C1() [0x427a48]\n??:? void tmptp2g9src.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\tif (actual_cost > sale_amount)\n\t{\n\t\treturn actual_cost - sale_amount;\n\t}\n\telse\n\t{\n\t\treturn 0;\n\t}\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpkmnwdjok.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmpkmnwdjok.__unittest_L19_C1() [0x427a48]\n??:? void tmpkmnwdjok.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\tif (actual_cost > sale_amount) \n\t{\n\t\treturn actual_cost - sale_amount;\n\t}\n\treturn 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1666122634,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp0uhsc7n5.d(20): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmp0uhsc7n5.__unittest_L16_C1() [0x427a48]\n??:? void tmp0uhsc7n5.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn max(0, actual_cost - sale_amount);\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "/tmp/tmpic64n34k.d(10): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpic64n34k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn max(0L, actual_cost - sale_amount);\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "/tmp/tmpj16jxeso.d(10): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj16jxeso.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn max(actual_cost - sale_amount, 0L);\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "/tmp/tmpyhxwys0k.d(10): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyhxwys0k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn max(actual_cost - sale_amount, 0L);\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "/tmp/tmpyhxwys0k.d(10): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyhxwys0k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn max(actual_cost - sale_amount, 0L);\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "/tmp/tmpyhxwys0k.d(10): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyhxwys0k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\tlong loss;\n\tif(actual_cost > sale_amount) \n\t{\n\t\tloss = actual_cost - sale_amount;\n\t\treturn loss;\n\t}\n\telse \n\t{\n\t\treturn 0;\n\t}\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1666122634,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpegmcg2jy.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmpegmcg2jy.__unittest_L21_C1() [0x427a48]\n??:? void tmpegmcg2jy.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn max(0L, actual_cost - sale_amount);\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "/tmp/tmpj16jxeso.d(10): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj16jxeso.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn max(0L, actual_cost - sale_amount);\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "/tmp/tmpj16jxeso.d(10): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj16jxeso.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\tif(actual_cost > sale_amount)\n\t\treturn actual_cost - sale_amount;\n\telse\n\t\treturn 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpszz9yo_d.d(19): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmpszz9yo_d.__unittest_L15_C1() [0x427a48]\n??:? void tmpszz9yo_d.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn max(0L, actual_cost - sale_amount);\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "/tmp/tmpj16jxeso.d(10): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj16jxeso.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn max(0L, actual_cost - sale_amount);\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "/tmp/tmpj16jxeso.d(10): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj16jxeso.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\tif (actual_cost > sale_amount)\n\t{\n\t\treturn actual_cost - sale_amount;\n\t}\n\telse\n\t{\n\t\treturn 0;\n\t}\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpkmnwdjok.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmpkmnwdjok.__unittest_L19_C1() [0x427a48]\n??:? void tmpkmnwdjok.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\tif(actual_cost > sale_amount)\n\t{\n\t\treturn actual_cost - sale_amount;\n\t}\n\treturn 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp9kncaipk.d(20): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmp9kncaipk.__unittest_L16_C1() [0x427a48]\n??:? void tmp9kncaipk.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn max(actual_cost - sale_amount, 0L);\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "/tmp/tmpyhxwys0k.d(10): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyhxwys0k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\tif(actual_cost > sale_amount)\n\t{\n\t\treturn actual_cost - sale_amount;\n\t}\n\telse\n\t{\n\t\treturn 0;\n\t}\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1666122634,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp9jiogoiy.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmp9jiogoiy.__unittest_L19_C1() [0x427a48]\n??:? void tmp9jiogoiy.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn max(0L, actual_cost - sale_amount);\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "/tmp/tmpj16jxeso.d(10): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj16jxeso.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn max(0L, actual_cost - sale_amount);\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "/tmp/tmpj16jxeso.d(10): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj16jxeso.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn max(0L, actual_cost - sale_amount);\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "/tmp/tmpj16jxeso.d(10): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj16jxeso.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn max(0L, actual_cost - sale_amount);\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "/tmp/tmpj16jxeso.d(10): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj16jxeso.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\tif (actual_cost > sale_amount)\n\t\treturn actual_cost - sale_amount;\n\telse\n\t\treturn 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppjo3xlhf.d(19): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmppjo3xlhf.__unittest_L15_C1() [0x427a48]\n??:? void tmppjo3xlhf.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\tif(actual_cost > sale_amount)\n\t{\n\t\treturn actual_cost - sale_amount;\n\t}\n\telse\n\t{\n\t\treturn 0;\n\t}\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1666122634,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp9jiogoiy.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmp9jiogoiy.__unittest_L19_C1() [0x427a48]\n??:? void tmp9jiogoiy.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn max(actual_cost - sale_amount, 0L);\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "/tmp/tmpyhxwys0k.d(10): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyhxwys0k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn sale_amount < actual_cost ? actual_cost - sale_amount : 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1666122634,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjib6u9ry.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmpjib6u9ry.__unittest_L12_C1() [0x427a48]\n??:? void tmpjib6u9ry.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\tif(actual_cost > sale_amount)\n\t\treturn actual_cost - sale_amount;\n\telse\n\t\treturn 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpszz9yo_d.d(19): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmpszz9yo_d.__unittest_L15_C1() [0x427a48]\n??:? void tmpszz9yo_d.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn max(0L, actual_cost - sale_amount);\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "/tmp/tmpj16jxeso.d(10): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj16jxeso.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn max(actual_cost - sale_amount, 0L);\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "/tmp/tmpyhxwys0k.d(10): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyhxwys0k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn max(actual_cost - sale_amount, 0L);\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "/tmp/tmpyhxwys0k.d(10): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyhxwys0k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\tif (actual_cost > sale_amount)\n\t\treturn actual_cost - sale_amount;\n\telse\n\t\treturn 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppjo3xlhf.d(19): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmppjo3xlhf.__unittest_L15_C1() [0x427a48]\n??:? void tmppjo3xlhf.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\tif (actual_cost > sale_amount)\n\t\treturn actual_cost - sale_amount;\n\telse\n\t\treturn 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppjo3xlhf.d(19): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmppjo3xlhf.__unittest_L15_C1() [0x427a48]\n??:? void tmppjo3xlhf.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\tif (actual_cost > sale_amount)\n\t{\n\t\treturn actual_cost - sale_amount;\n\t}\n\telse\n\t{\n\t\treturn 0;\n\t}\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpkmnwdjok.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmpkmnwdjok.__unittest_L19_C1() [0x427a48]\n??:? void tmpkmnwdjok.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\tif(actual_cost > sale_amount)\n\t{\n\t\treturn actual_cost - sale_amount;\n\t}\n\treturn 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp9kncaipk.d(20): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmp9kncaipk.__unittest_L16_C1() [0x427a48]\n??:? void tmp9kncaipk.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\tif(actual_cost > sale_amount)\n\t{\n\t\treturn actual_cost - sale_amount;\n\t}\n\telse\n\t{\n\t\treturn 0;\n\t}\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1666122634,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp9jiogoiy.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmp9jiogoiy.__unittest_L19_C1() [0x427a48]\n??:? void tmp9jiogoiy.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\tif(actual_cost > sale_amount)\n\t{\n\t\treturn actual_cost - sale_amount;\n\t}\n\treturn 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp9kncaipk.d(20): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmp9kncaipk.__unittest_L16_C1() [0x427a48]\n??:? void tmp9kncaipk.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn (actual_cost > sale_amount) ? actual_cost - sale_amount : 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1666122634,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpxqbxwtmx.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d25]\n??:? void tmpxqbxwtmx.__unittest_L12_C1() [0x427a40]\n??:? void tmpxqbxwtmx.__modtest() [0x427aa8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff20]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8b5]\n??:? runModuleUnitTests [0x42b821]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428174]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\tif (actual_cost > sale_amount)\n\t\treturn actual_cost - sale_amount;\n\telse\n\t\treturn 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppjo3xlhf.d(19): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmppjo3xlhf.__unittest_L15_C1() [0x427a48]\n??:? void tmppjo3xlhf.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\tif(actual_cost > sale_amount)\n\t\treturn actual_cost - sale_amount;\n\telse\n\t\treturn 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpszz9yo_d.d(19): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmpszz9yo_d.__unittest_L15_C1() [0x427a48]\n??:? void tmpszz9yo_d.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\tif(actual_cost > sale_amount)\n\t\treturn actual_cost - sale_amount;\n\treturn 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1666122634,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpchl3_zlf.d(18): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmpchl3_zlf.__unittest_L14_C1() [0x427a48]\n??:? void tmpchl3_zlf.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\tif (actual_cost > sale_amount)\n\t{\n\t\treturn actual_cost - sale_amount;\n\t}\n\telse\n\t{\n\t\treturn 0;\n\t}\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpkmnwdjok.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmpkmnwdjok.__unittest_L19_C1() [0x427a48]\n??:? void tmpkmnwdjok.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn sale_amount < actual_cost ? actual_cost - sale_amount : 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1666122634,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjib6u9ry.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmpjib6u9ry.__unittest_L12_C1() [0x427a48]\n??:? void tmpjib6u9ry.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn max(0L, actual_cost - sale_amount);\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "/tmp/tmpj16jxeso.d(10): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj16jxeso.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\tif (actual_cost > sale_amount) \n\t{\n\t\treturn actual_cost - sale_amount;\n\t}\n\treturn 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1666122634,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp0uhsc7n5.d(20): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmp0uhsc7n5.__unittest_L16_C1() [0x427a48]\n??:? void tmp0uhsc7n5.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn max(0L, actual_cost - sale_amount);\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "/tmp/tmpj16jxeso.d(10): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj16jxeso.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn max(actual_cost - sale_amount, 0L);\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "/tmp/tmpyhxwys0k.d(10): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyhxwys0k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn max(0L, actual_cost - sale_amount);\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "/tmp/tmpj16jxeso.d(10): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj16jxeso.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn max(0L, actual_cost - sale_amount);\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "/tmp/tmpj16jxeso.d(10): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj16jxeso.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn max(0L, actual_cost - sale_amount);\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "/tmp/tmpj16jxeso.d(10): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj16jxeso.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn max(0L, actual_cost - sale_amount);\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "/tmp/tmpj16jxeso.d(10): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj16jxeso.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\tif (actual_cost > sale_amount)\n\t{\n\t\treturn actual_cost - sale_amount;\n\t}\n\telse\n\t{\n\t\treturn 0;\n\t}\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpkmnwdjok.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmpkmnwdjok.__unittest_L19_C1() [0x427a48]\n??:? void tmpkmnwdjok.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn max(0L, actual_cost - sale_amount);\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "/tmp/tmpj16jxeso.d(10): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj16jxeso.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\tif (actual_cost > sale_amount)\n\t{\n\t\treturn actual_cost - sale_amount;\n\t}\n\treturn 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1666122634,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpetv8r99c.d(20): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmpetv8r99c.__unittest_L16_C1() [0x427a48]\n??:? void tmpetv8r99c.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn max(0L, actual_cost - sale_amount);\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "/tmp/tmpj16jxeso.d(10): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj16jxeso.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\tif (actual_cost > sale_amount)\n\t{\n\t\treturn actual_cost - sale_amount;\n\t}\n\telse\n\t{\n\t\treturn 0;\n\t}\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpkmnwdjok.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmpkmnwdjok.__unittest_L19_C1() [0x427a48]\n??:? void tmpkmnwdjok.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn max(0L, actual_cost - sale_amount);\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "/tmp/tmpj16jxeso.d(10): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj16jxeso.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\tif(actual_cost > sale_amount)\n\t{\n\t\treturn actual_cost - sale_amount;\n\t}\n\telse\n\t{\n\t\treturn 0;\n\t}\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1666122634,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp9jiogoiy.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmp9jiogoiy.__unittest_L19_C1() [0x427a48]\n??:? void tmp9jiogoiy.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn max(actual_cost - sale_amount, 0);\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1666122634,
      "stdout": "",
      "stderr": "/tmp/tmpib7yn6hb.d(10): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpib7yn6hb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn max(0L, actual_cost - sale_amount);\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "/tmp/tmpj16jxeso.d(10): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj16jxeso.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn max(0L, actual_cost - sale_amount);\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "/tmp/tmpj16jxeso.d(10): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj16jxeso.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\tif(actual_cost > sale_amount)\n\t{\n\t\treturn actual_cost - sale_amount;\n\t}\n\telse\n\t{\n\t\treturn 0;\n\t}\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1666122634,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp9jiogoiy.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmp9jiogoiy.__unittest_L19_C1() [0x427a48]\n??:? void tmp9jiogoiy.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\tif(actual_cost > sale_amount)\n\t{\n\t\treturn actual_cost - sale_amount;\n\t}\n\treturn 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp9kncaipk.d(20): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmp9kncaipk.__unittest_L16_C1() [0x427a48]\n??:? void tmp9kncaipk.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn max(actual_cost - sale_amount, 0L);\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "/tmp/tmpyhxwys0k.d(10): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyhxwys0k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn max(actual_cost - sale_amount, 0L);\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "/tmp/tmpyhxwys0k.d(10): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyhxwys0k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn max(actual_cost - sale_amount, 0L);\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "/tmp/tmpyhxwys0k.d(10): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyhxwys0k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn max(actual_cost - sale_amount, 0L);\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "/tmp/tmpyhxwys0k.d(10): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyhxwys0k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\tif(actual_cost > sale_amount)\n\t\treturn actual_cost - sale_amount;\n\telse\n\t\treturn 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpszz9yo_d.d(19): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmpszz9yo_d.__unittest_L15_C1() [0x427a48]\n??:? void tmpszz9yo_d.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\tif(actual_cost > sale_amount)\n\t\treturn actual_cost - sale_amount;\n\telse\n\t\treturn 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpszz9yo_d.d(19): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmpszz9yo_d.__unittest_L15_C1() [0x427a48]\n??:? void tmpszz9yo_d.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn sale_amount < actual_cost ? actual_cost - sale_amount : 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1666122634,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjib6u9ry.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmpjib6u9ry.__unittest_L12_C1() [0x427a48]\n??:? void tmpjib6u9ry.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn actual_cost > sale_amount ? actual_cost - sale_amount : 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1666122634,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpzq5t6u6i.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d25]\n??:? void tmpzq5t6u6i.__unittest_L12_C1() [0x427a40]\n??:? void tmpzq5t6u6i.__modtest() [0x427aa8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff20]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8b5]\n??:? runModuleUnitTests [0x42b821]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428174]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\tif(actual_cost > sale_amount)\n\t{\n\t\treturn actual_cost - sale_amount;\n\t}\n\telse\n\t{\n\t\treturn 0;\n\t}\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1666122634,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp9jiogoiy.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmp9jiogoiy.__unittest_L19_C1() [0x427a48]\n??:? void tmp9jiogoiy.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn max(0L, actual_cost - sale_amount);\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "/tmp/tmpj16jxeso.d(10): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj16jxeso.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\tif(actual_cost > sale_amount)\n\t\treturn actual_cost - sale_amount;\n\telse\n\t\treturn 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpszz9yo_d.d(19): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmpszz9yo_d.__unittest_L15_C1() [0x427a48]\n??:? void tmpszz9yo_d.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn max(actual_cost - sale_amount, 0L);\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "/tmp/tmpyhxwys0k.d(10): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyhxwys0k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn max(actual_cost - sale_amount, 0L);\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "/tmp/tmpyhxwys0k.d(10): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyhxwys0k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\tif (actual_cost > sale_amount)\n\t{\n\t\treturn actual_cost - sale_amount;\n\t}\n\telse\n\t{\n\t\treturn 0;\n\t}\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpkmnwdjok.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmpkmnwdjok.__unittest_L19_C1() [0x427a48]\n??:? void tmpkmnwdjok.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn max(actual_cost - sale_amount, 0L);\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "/tmp/tmpyhxwys0k.d(10): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyhxwys0k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn (actual_cost > sale_amount) ? actual_cost - sale_amount : 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1666122634,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpxqbxwtmx.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d25]\n??:? void tmpxqbxwtmx.__unittest_L12_C1() [0x427a40]\n??:? void tmpxqbxwtmx.__modtest() [0x427aa8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff20]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8b5]\n??:? runModuleUnitTests [0x42b821]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428174]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn max(actual_cost - sale_amount, 0L);\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "/tmp/tmpyhxwys0k.d(10): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyhxwys0k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn max(0L, actual_cost - sale_amount);\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "/tmp/tmpj16jxeso.d(10): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj16jxeso.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn max(actual_cost - sale_amount, 0L);\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "/tmp/tmpyhxwys0k.d(10): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyhxwys0k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\tif(actual_cost > sale_amount)\n\t{\n\t\treturn actual_cost - sale_amount;\n\t}\n\telse\n\t{\n\t\treturn 0;\n\t}\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1666122634,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp9jiogoiy.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmp9jiogoiy.__unittest_L19_C1() [0x427a48]\n??:? void tmp9jiogoiy.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn max(0L, actual_cost - sale_amount);\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "/tmp/tmpj16jxeso.d(10): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj16jxeso.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn max(actual_cost - sale_amount, 0L);\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "/tmp/tmpyhxwys0k.d(10): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyhxwys0k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn max(actual_cost - sale_amount, 0L);\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "/tmp/tmpyhxwys0k.d(10): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyhxwys0k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\tif (actual_cost > sale_amount)\n\t\treturn actual_cost - sale_amount;\n\telse\n\t\treturn 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppjo3xlhf.d(19): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmppjo3xlhf.__unittest_L15_C1() [0x427a48]\n??:? void tmppjo3xlhf.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn max(actual_cost - sale_amount, 0L);\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "/tmp/tmpyhxwys0k.d(10): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyhxwys0k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn max(actual_cost - sale_amount, 0L);\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "/tmp/tmpyhxwys0k.d(10): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyhxwys0k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn max(actual_cost - sale_amount, 0L);\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "/tmp/tmpyhxwys0k.d(10): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyhxwys0k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn max(actual_cost - sale_amount, 0L);\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "/tmp/tmpyhxwys0k.d(10): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyhxwys0k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\tif(actual_cost > sale_amount)\n\t\treturn actual_cost - sale_amount;\n\telse\n\t\treturn 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpszz9yo_d.d(19): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmpszz9yo_d.__unittest_L15_C1() [0x427a48]\n??:? void tmpszz9yo_d.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn max(0L, actual_cost - sale_amount);\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "/tmp/tmpj16jxeso.d(10): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj16jxeso.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn max(actual_cost - sale_amount, 0L);\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "/tmp/tmpyhxwys0k.d(10): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyhxwys0k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn max(actual_cost - sale_amount, 0L);\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "/tmp/tmpyhxwys0k.d(10): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyhxwys0k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn max(actual_cost - sale_amount, 0L);\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "/tmp/tmpyhxwys0k.d(10): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyhxwys0k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\tif (actual_cost > sale_amount)\n\t\treturn actual_cost - sale_amount;\n\treturn 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1666122634,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp6vsyp95v.d(18): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmp6vsyp95v.__unittest_L14_C1() [0x427a48]\n??:? void tmp6vsyp95v.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn max(0L, actual_cost - sale_amount);\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "/tmp/tmpj16jxeso.d(10): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj16jxeso.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn max(0L, actual_cost - sale_amount);\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "/tmp/tmpj16jxeso.d(10): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj16jxeso.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn max(0L, actual_cost - sale_amount);\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "/tmp/tmpj16jxeso.d(10): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj16jxeso.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn (actual_cost > sale_amount) ? actual_cost - sale_amount : 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1666122634,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpxqbxwtmx.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d25]\n??:? void tmpxqbxwtmx.__unittest_L12_C1() [0x427a40]\n??:? void tmpxqbxwtmx.__modtest() [0x427aa8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff20]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8b5]\n??:? runModuleUnitTests [0x42b821]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428174]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn max(actual_cost - sale_amount, 0L);\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "/tmp/tmpyhxwys0k.d(10): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyhxwys0k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn max(actual_cost - sale_amount, 0L);\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "/tmp/tmpyhxwys0k.d(10): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyhxwys0k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\tif(actual_cost > sale_amount)\n\t{\n\t\treturn actual_cost - sale_amount;\n\t}\n\telse\n\t{\n\t\treturn 0;\n\t}\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1666122634,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp9jiogoiy.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmp9jiogoiy.__unittest_L19_C1() [0x427a48]\n??:? void tmp9jiogoiy.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn max(0L, actual_cost - sale_amount);\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "/tmp/tmpj16jxeso.d(10): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj16jxeso.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\t//TODO: Write - Your - Code\n\treturn max(0, actual_cost - sale_amount);\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1666122634,
      "stdout": "",
      "stderr": "/tmp/tmpg6qzaufw.d(11): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg6qzaufw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn sale_amount < actual_cost ? actual_cost - sale_amount : 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1666122634,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjib6u9ry.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmpjib6u9ry.__unittest_L12_C1() [0x427a48]\n??:? void tmpjib6u9ry.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn max(0L, actual_cost - sale_amount);\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "/tmp/tmpj16jxeso.d(10): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj16jxeso.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn max(0L, actual_cost - sale_amount);\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "/tmp/tmpj16jxeso.d(10): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj16jxeso.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn (actual_cost > sale_amount) ? (actual_cost - sale_amount) : 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1666122634,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmptg8yapv5.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x427d25]\n??:? void tmptg8yapv5.__unittest_L12_C1() [0x427a40]\n??:? void tmptg8yapv5.__modtest() [0x427aa8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba4b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa71]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff20]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8b5]\n??:? runModuleUnitTests [0x42b821]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428174]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn max(0L, actual_cost - sale_amount);\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "/tmp/tmpj16jxeso.d(10): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj16jxeso.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn max(actual_cost - sale_amount, 0L);\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "/tmp/tmpyhxwys0k.d(10): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyhxwys0k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn max(0L, actual_cost - sale_amount);\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "/tmp/tmpj16jxeso.d(10): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj16jxeso.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\tif(actual_cost > sale_amount)\n\t{\n\t\treturn actual_cost - sale_amount;\n\t}\n\telse\n\t{\n\t\treturn 0;\n\t}\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1666122634,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp9jiogoiy.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmp9jiogoiy.__unittest_L19_C1() [0x427a48]\n??:? void tmp9jiogoiy.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\tif(actual_cost > sale_amount)\n\t{\n\t\treturn actual_cost - sale_amount;\n\t}\n\telse\n\t{\n\t\treturn 0;\n\t}\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1666122634,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp9jiogoiy.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmp9jiogoiy.__unittest_L19_C1() [0x427a48]\n??:? void tmp9jiogoiy.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\tif(actual_cost > sale_amount)\n\t\treturn actual_cost - sale_amount;\n\telse\n\t\treturn 0;\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpszz9yo_d.d(19): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmpszz9yo_d.__unittest_L15_C1() [0x427a48]\n??:? void tmpszz9yo_d.__modtest() [0x427ab0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn max(0L, actual_cost - sale_amount);\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "/tmp/tmpj16jxeso.d(10): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj16jxeso.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n{\n\treturn max(0L, actual_cost - sale_amount);\n}\nunittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}",
      "timestamp": 1665517406,
      "stdout": "",
      "stderr": "/tmp/tmpj16jxeso.d(10): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj16jxeso.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}