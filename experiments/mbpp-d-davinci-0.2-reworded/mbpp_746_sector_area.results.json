{
  "name": "mbpp_746_sector_area",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_746_sector_area.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360)\n\t\treturn Nullable!(float).init;\n\treturn (a / 360.0) * PI * r * r;\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1665517194,
      "stdout": "",
      "stderr": "/tmp/tmpw3a5sele.d(12): Error: cannot implicitly convert expression `cast(real)(cast(double)a / 360.000) * 3.14159L * cast(real)r * cast(real)r` of type `real` to `Nullable!float`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw3a5sele.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360)\n\t\treturn Nullable!(float)();\n\treturn Nullable!(float)(r * r * a / 2 * PI / 360);\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1665517196,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp8d21o5bh.d(20): unittest failure\n----------------\n??:? _d_unittestp [0x45b759]\n??:? void tmp8d21o5bh.__unittest_L14_C1() [0x4451aa]\n??:? void tmp8d21o5bh.__modtest() [0x459268]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x4649b7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x45ad86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x460005]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x460094]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45ff91]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x45ad5d]\n??:? runModuleUnitTests [0x46478d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x45c82c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360)\n\t\treturn Nullable!(float)();\n\treturn Nullable!(float)((a / 360.0) * PI * r * r);\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1665517196,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpbqlics2l.d(20): unittest failure\n----------------\n??:? _d_unittestp [0x45b751]\n??:? void tmpbqlics2l.__unittest_L14_C1() [0x44519e]\n??:? void tmpbqlics2l.__modtest() [0x45925c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x4649af]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x45ad7e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45fffd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x46008c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45ff89]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x45ad55]\n??:? runModuleUnitTests [0x464785]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x45c824]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360)\n\t\treturn Nullable!(float).init;\n\telse\n\t\treturn Nullable!(float).init(r * r * a / 2.0f);\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1665517194,
      "stdout": "",
      "stderr": "/tmp/tmpf2wnliy3.d(13): Error: function expected before `()`, not `Nullable(nanF, true).get()` of type `float`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf2wnliy3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360)\n\t\treturn null;\n\treturn (a / 360.0) * PI * r * r;\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1665517194,
      "stdout": "",
      "stderr": "/tmp/tmp6c2mw9sy.d(11): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!float`\n/tmp/tmp6c2mw9sy.d(12): Error: cannot implicitly convert expression `cast(real)(cast(double)a / 360.000) * 3.14159L * cast(real)r * cast(real)r` of type `real` to `Nullable!float`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6c2mw9sy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360)\n\t\treturn Nullable!(float)();\n\t\n\treturn Nullable!(float)((a / 360.0) * PI * r * r);\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1665517196,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp85k9vli6.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x45b751]\n??:? void tmp85k9vli6.__unittest_L15_C1() [0x44519e]\n??:? void tmp85k9vli6.__modtest() [0x45925c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x4649af]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x45ad7e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45fffd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x46008c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45ff89]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x45ad55]\n??:? runModuleUnitTests [0x464785]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x45c824]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360)\n\t\treturn Nullable!(float)();\n\treturn Nullable!(float)((a/360.0f)*PI*r*r);\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1665517196,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp97tzhyvs.d(20): unittest failure\n----------------\n??:? _d_unittestp [0x45b751]\n??:? void tmp97tzhyvs.__unittest_L14_C1() [0x44519e]\n??:? void tmp97tzhyvs.__modtest() [0x45925c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x4649af]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x45ad7e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45fffd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x46008c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45ff89]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x45ad55]\n??:? runModuleUnitTests [0x464785]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x45c824]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360)\n\t\treturn Nullable!(float)();\n\treturn Nullable!(float)((a / 360.0) * PI * r * r);\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1665517196,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpbqlics2l.d(20): unittest failure\n----------------\n??:? _d_unittestp [0x45b751]\n??:? void tmpbqlics2l.__unittest_L14_C1() [0x44519e]\n??:? void tmpbqlics2l.__modtest() [0x45925c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x4649af]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x45ad7e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45fffd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x46008c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45ff89]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x45ad55]\n??:? runModuleUnitTests [0x464785]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x45c824]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360)\n\t\treturn null;\n\treturn (a / 360.0) * PI * r * r;\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1665517194,
      "stdout": "",
      "stderr": "/tmp/tmp6c2mw9sy.d(11): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!float`\n/tmp/tmp6c2mw9sy.d(12): Error: cannot implicitly convert expression `cast(real)(cast(double)a / 360.000) * 3.14159L * cast(real)r * cast(real)r` of type `real` to `Nullable!float`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6c2mw9sy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360)\n\t\treturn Nullable!(float).init;\n\telse\n\t\treturn Nullable!(float).init(r * r * a * PI / 360);\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1665517194,
      "stdout": "",
      "stderr": "/tmp/tmppzpx_roq.d(13): Error: function expected before `()`, not `Nullable(nanF, true).get()` of type `float`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppzpx_roq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360)\n\t\treturn Nullable!(float)();\n\treturn Nullable!(float)((a / 360.0) * PI * r * r);\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1665517196,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpbqlics2l.d(20): unittest failure\n----------------\n??:? _d_unittestp [0x45b751]\n??:? void tmpbqlics2l.__unittest_L14_C1() [0x44519e]\n??:? void tmpbqlics2l.__modtest() [0x45925c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x4649af]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x45ad7e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45fffd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x46008c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45ff89]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x45ad55]\n??:? runModuleUnitTests [0x464785]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x45c824]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360) \n\t{\n\t\treturn Nullable!(float)();\n\t}\n\treturn Nullable!(float)((a / 360.0) * PI * r * r);\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1665517196,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppzo6zjpn.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x45b751]\n??:? void tmppzo6zjpn.__unittest_L16_C1() [0x44519e]\n??:? void tmppzo6zjpn.__modtest() [0x45925c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x4649af]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x45ad7e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45fffd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x46008c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45ff89]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x45ad55]\n??:? runModuleUnitTests [0x464785]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x45c824]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360)\n\t\treturn Nullable!(float).init;\n\telse\n\t\treturn Nullable!(float).init(r * r * a / 2);\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1665517194,
      "stdout": "",
      "stderr": "/tmp/tmp88vxl2bh.d(13): Error: function expected before `()`, not `Nullable(nanF, true).get()` of type `float`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp88vxl2bh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360)\n\t\treturn null;\n\treturn (a / 360.0) * PI * r * r;\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1665517194,
      "stdout": "",
      "stderr": "/tmp/tmp6c2mw9sy.d(11): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!float`\n/tmp/tmp6c2mw9sy.d(12): Error: cannot implicitly convert expression `cast(real)(cast(double)a / 360.000) * 3.14159L * cast(real)r * cast(real)r` of type `real` to `Nullable!float`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6c2mw9sy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360)\n\t\treturn Nullable!(float)();\n\treturn Nullable!(float)((a / 360.0) * PI * r * r);\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1665517196,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpbqlics2l.d(20): unittest failure\n----------------\n??:? _d_unittestp [0x45b751]\n??:? void tmpbqlics2l.__unittest_L14_C1() [0x44519e]\n??:? void tmpbqlics2l.__modtest() [0x45925c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x4649af]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x45ad7e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45fffd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x46008c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45ff89]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x45ad55]\n??:? runModuleUnitTests [0x464785]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x45c824]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360) \n\t{\n\t\treturn Nullable!(float)();\n\t}\n\treturn Nullable!(float)((a / 360.0) * PI * r * r);\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1665517196,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppzo6zjpn.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x45b751]\n??:? void tmppzo6zjpn.__unittest_L16_C1() [0x44519e]\n??:? void tmppzo6zjpn.__modtest() [0x45925c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x4649af]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x45ad7e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45fffd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x46008c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45ff89]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x45ad55]\n??:? runModuleUnitTests [0x464785]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x45c824]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360)\n\t\treturn null;\n\treturn (a / 360.0) * PI * r * r;\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1665517194,
      "stdout": "",
      "stderr": "/tmp/tmp6c2mw9sy.d(11): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!float`\n/tmp/tmp6c2mw9sy.d(12): Error: cannot implicitly convert expression `cast(real)(cast(double)a / 360.000) * 3.14159L * cast(real)r * cast(real)r` of type `real` to `Nullable!float`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6c2mw9sy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360) \n\t{\n\t\treturn Nullable!(float)();\n\t}\n\treturn Nullable!(float)(0.5f * r * r * a * PI / 180);\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1665517196,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpxby4mm8h.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x45b759]\n??:? void tmpxby4mm8h.__unittest_L16_C1() [0x4451a6]\n??:? void tmpxby4mm8h.__modtest() [0x459264]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x4649b7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x45ad86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x460005]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x460094]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45ff91]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x45ad5d]\n??:? runModuleUnitTests [0x46478d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x45c82c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif(a > 360)\n\t\treturn Nullable!(float)();\n\telse\n\t\treturn Nullable!(float)((a/360.0f)*PI*r*r);\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1665517196,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp8p95wddf.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x45b751]\n??:? void tmp8p95wddf.__unittest_L15_C1() [0x44519e]\n??:? void tmp8p95wddf.__modtest() [0x45925c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x4649af]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x45ad7e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45fffd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x46008c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45ff89]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x45ad55]\n??:? runModuleUnitTests [0x464785]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x45c824]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif(a > 360)\n\t\treturn null;\n\treturn (a / 360.0) * PI * r * r;\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1665517194,
      "stdout": "",
      "stderr": "/tmp/tmpxdb1a2ec.d(11): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!float`\n/tmp/tmpxdb1a2ec.d(12): Error: cannot implicitly convert expression `cast(real)(cast(double)a / 360.000) * 3.14159L * cast(real)r * cast(real)r` of type `real` to `Nullable!float`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxdb1a2ec.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif(a > 360) return null;\n\treturn (a / 360.0) * PI * r * r;\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1666122440,
      "stdout": "",
      "stderr": "/tmp/tmprpukak6r.d(10): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!float`\n/tmp/tmprpukak6r.d(11): Error: cannot implicitly convert expression `cast(real)(cast(double)a / 360.000) * 3.14159L * cast(real)r * cast(real)r` of type `real` to `Nullable!float`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprpukak6r.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360)\n\t\treturn Nullable!(float).init;\n\treturn (a / 360.0) * PI * r * r;\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1665517194,
      "stdout": "",
      "stderr": "/tmp/tmpw3a5sele.d(12): Error: cannot implicitly convert expression `cast(real)(cast(double)a / 360.000) * 3.14159L * cast(real)r * cast(real)r` of type `real` to `Nullable!float`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw3a5sele.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360) \n\t{\n\t\treturn Nullable!(float).init;\n\t}\n\telse \n\t{\n\t\treturn Nullable!(float)((a / 360.0) * PI * r * r);\n\t}\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1666122442,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpmi62fugd.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x45b751]\n??:? void tmpmi62fugd.__unittest_L19_C1() [0x44519e]\n??:? void tmpmi62fugd.__modtest() [0x45925c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x4649af]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x45ad7e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45fffd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x46008c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45ff89]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x45ad55]\n??:? runModuleUnitTests [0x464785]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x45c824]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360)\n\t\treturn Nullable!(float)();\n\telse\n\t\treturn Nullable!(float)(r * r * a / 2 * PI / 360);\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1666122442,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp1zzvxufk.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x45b759]\n??:? void tmp1zzvxufk.__unittest_L15_C1() [0x4451aa]\n??:? void tmp1zzvxufk.__modtest() [0x459268]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x4649b7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x45ad86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x460005]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x460094]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45ff91]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x45ad5d]\n??:? runModuleUnitTests [0x46478d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x45c82c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360)\n\t\treturn null;\n\treturn (a/360.0) * PI * r * r;\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1666122440,
      "stdout": "",
      "stderr": "/tmp/tmpp1uy8cta.d(11): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!float`\n/tmp/tmpp1uy8cta.d(12): Error: cannot implicitly convert expression `cast(real)(cast(double)a / 360.000) * 3.14159L * cast(real)r * cast(real)r` of type `real` to `Nullable!float`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp1uy8cta.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360)\n\t\treturn Nullable!(float)();\n\treturn Nullable!(float)((a / 360.0) * PI * r * r);\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1665517196,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpbqlics2l.d(20): unittest failure\n----------------\n??:? _d_unittestp [0x45b751]\n??:? void tmpbqlics2l.__unittest_L14_C1() [0x44519e]\n??:? void tmpbqlics2l.__modtest() [0x45925c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x4649af]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x45ad7e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45fffd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x46008c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45ff89]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x45ad55]\n??:? runModuleUnitTests [0x464785]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x45c824]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360)\n\t\treturn Nullable!(float).init;\n\treturn (a / 360.0) * PI * r * r;\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1665517194,
      "stdout": "",
      "stderr": "/tmp/tmpw3a5sele.d(12): Error: cannot implicitly convert expression `cast(real)(cast(double)a / 360.000) * 3.14159L * cast(real)r * cast(real)r` of type `real` to `Nullable!float`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw3a5sele.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360)\n\t\treturn Nullable!(float).init;\n\telse\n\t\treturn Nullable!(float).init(r * r * a * PI / 360);\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1665517194,
      "stdout": "",
      "stderr": "/tmp/tmppzpx_roq.d(13): Error: function expected before `()`, not `Nullable(nanF, true).get()` of type `float`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppzpx_roq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360)\n\t\treturn Nullable!(float).init;\n\telse\n\t\treturn Nullable!(float).init(r * r * a / 2);\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1665517194,
      "stdout": "",
      "stderr": "/tmp/tmp88vxl2bh.d(13): Error: function expected before `()`, not `Nullable(nanF, true).get()` of type `float`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp88vxl2bh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360)\n\t\treturn Nullable!(float)();\n\treturn Nullable!(float)((a / 360.0) * PI * r * r);\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1665517196,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpbqlics2l.d(20): unittest failure\n----------------\n??:? _d_unittestp [0x45b751]\n??:? void tmpbqlics2l.__unittest_L14_C1() [0x44519e]\n??:? void tmpbqlics2l.__modtest() [0x45925c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x4649af]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x45ad7e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45fffd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x46008c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45ff89]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x45ad55]\n??:? runModuleUnitTests [0x464785]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x45c824]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360)\n\t\treturn Nullable!(float)();\n\telse\n\t\treturn Nullable!(float)((a / 360.0) * PI * r * r);\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1666122442,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpfrawkj_4.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x45b751]\n??:? void tmpfrawkj_4.__unittest_L15_C1() [0x44519e]\n??:? void tmpfrawkj_4.__modtest() [0x45925c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x4649af]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x45ad7e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45fffd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x46008c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45ff89]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x45ad55]\n??:? runModuleUnitTests [0x464785]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x45c824]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360)\n\t\treturn Nullable!(float)();\n\telse\n\t\treturn Nullable!(float)((a / 360.0) * PI * r * r);\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1666122442,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpfrawkj_4.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x45b751]\n??:? void tmpfrawkj_4.__unittest_L15_C1() [0x44519e]\n??:? void tmpfrawkj_4.__modtest() [0x45925c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x4649af]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x45ad7e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45fffd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x46008c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45ff89]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x45ad55]\n??:? runModuleUnitTests [0x464785]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x45c824]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360) return null;\n\treturn (a/360.0) * PI * r * r;\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1666122440,
      "stdout": "",
      "stderr": "/tmp/tmpptoiv2f2.d(10): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!float`\n/tmp/tmpptoiv2f2.d(11): Error: cannot implicitly convert expression `cast(real)(cast(double)a / 360.000) * 3.14159L * cast(real)r * cast(real)r` of type `real` to `Nullable!float`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpptoiv2f2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif(a > 360)\n\t\treturn Nullable!(float)();\n\telse\n\t\treturn Nullable!(float)((a/360.0)*PI*r*r);\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1666122442,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpnfou384m.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x45b751]\n??:? void tmpnfou384m.__unittest_L15_C1() [0x44519e]\n??:? void tmpnfou384m.__modtest() [0x45925c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x4649af]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x45ad7e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45fffd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x46008c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45ff89]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x45ad55]\n??:? runModuleUnitTests [0x464785]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x45c824]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360) \n\t{\n\t\treturn Nullable!(float).init;\n\t}\n\treturn (a / 360.0) * PI * r * r;\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1666122440,
      "stdout": "",
      "stderr": "/tmp/tmpi49_0uyc.d(14): Error: cannot implicitly convert expression `cast(real)(cast(double)a / 360.000) * 3.14159L * cast(real)r * cast(real)r` of type `real` to `Nullable!float`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi49_0uyc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360)\n\t\treturn Nullable!(float)();\n\treturn Nullable!(float)(a / 360.0 * PI * r * r);\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1666122442,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmptjtmnrrp.d(20): unittest failure\n----------------\n??:? _d_unittestp [0x45b751]\n??:? void tmptjtmnrrp.__unittest_L14_C1() [0x44519e]\n??:? void tmptjtmnrrp.__modtest() [0x45925c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x4649af]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x45ad7e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45fffd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x46008c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45ff89]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x45ad55]\n??:? runModuleUnitTests [0x464785]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x45c824]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360)\n\t\treturn Nullable!(float)();\n\treturn Nullable!(float)((a / 360.0) * PI * r * r);\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1665517196,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpbqlics2l.d(20): unittest failure\n----------------\n??:? _d_unittestp [0x45b751]\n??:? void tmpbqlics2l.__unittest_L14_C1() [0x44519e]\n??:? void tmpbqlics2l.__modtest() [0x45925c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x4649af]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x45ad7e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45fffd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x46008c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45ff89]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x45ad55]\n??:? runModuleUnitTests [0x464785]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x45c824]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif(a > 360)\n\t\treturn Nullable!(float).init;\n\treturn Nullable!(float).init(PI * r * r * a / 360);\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1666122440,
      "stdout": "",
      "stderr": "/tmp/tmpwcty1v5a.d(12): Error: function expected before `()`, not `Nullable(nanF, true).get()` of type `float`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwcty1v5a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360) return null;\n\treturn (a / 360.0) * PI * r * r;\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1666122440,
      "stdout": "",
      "stderr": "/tmp/tmpkf2yjphh.d(10): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!float`\n/tmp/tmpkf2yjphh.d(11): Error: cannot implicitly convert expression `cast(real)(cast(double)a / 360.000) * 3.14159L * cast(real)r * cast(real)r` of type `real` to `Nullable!float`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkf2yjphh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360) \n\t{\n\t\treturn Nullable!(float)();\n\t}\n\treturn Nullable!(float)(0.5 * r * r * a * PI / 180);\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1666122442,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmptvsr95xq.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x45b759]\n??:? void tmptvsr95xq.__unittest_L16_C1() [0x4451a6]\n??:? void tmptvsr95xq.__modtest() [0x459264]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x4649b7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x45ad86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x460005]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x460094]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45ff91]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x45ad5d]\n??:? runModuleUnitTests [0x46478d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x45c82c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360)\n\t\treturn Nullable!(float)();\n\telse\n\t\treturn Nullable!(float)((a / 360.0) * PI * r * r);\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1666122442,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpfrawkj_4.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x45b751]\n??:? void tmpfrawkj_4.__unittest_L15_C1() [0x44519e]\n??:? void tmpfrawkj_4.__modtest() [0x45925c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x4649af]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x45ad7e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45fffd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x46008c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45ff89]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x45ad55]\n??:? runModuleUnitTests [0x464785]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x45c824]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360)\n\t\treturn null;\n\treturn (a / 360.0) * PI * r * r;\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1665517194,
      "stdout": "",
      "stderr": "/tmp/tmp6c2mw9sy.d(11): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!float`\n/tmp/tmp6c2mw9sy.d(12): Error: cannot implicitly convert expression `cast(real)(cast(double)a / 360.000) * 3.14159L * cast(real)r * cast(real)r` of type `real` to `Nullable!float`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6c2mw9sy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360)\n\t\treturn Nullable!(float).init;\n\t\n\treturn Nullable!(float).make(0.5f * r * r * a * PI / 180);\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1666122440,
      "stdout": "",
      "stderr": "/tmp/tmpj61nx4do.d(13): Error: no property `make` for type `Nullable!float`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj61nx4do.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360)\n\t\treturn null;\n\treturn (a / 360.0) * PI * r * r;\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1665517194,
      "stdout": "",
      "stderr": "/tmp/tmp6c2mw9sy.d(11): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!float`\n/tmp/tmp6c2mw9sy.d(12): Error: cannot implicitly convert expression `cast(real)(cast(double)a / 360.000) * 3.14159L * cast(real)r * cast(real)r` of type `real` to `Nullable!float`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6c2mw9sy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360)\n\t\treturn Nullable!(float)();\n\telse\n\t\treturn Nullable!(float)((a / 360.0) * PI * r * r);\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1666122442,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpfrawkj_4.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x45b751]\n??:? void tmpfrawkj_4.__unittest_L15_C1() [0x44519e]\n??:? void tmpfrawkj_4.__modtest() [0x45925c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x4649af]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x45ad7e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45fffd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x46008c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45ff89]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x45ad55]\n??:? runModuleUnitTests [0x464785]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x45c824]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360)\n\t\treturn Nullable!(float).init;\n\telse\n\t\treturn Nullable!(float)(PI * r * r * a / 360);\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1666122442,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpzy8vouym.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x45b751]\n??:? void tmpzy8vouym.__unittest_L15_C1() [0x44519e]\n??:? void tmpzy8vouym.__modtest() [0x45925c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x4649af]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x45ad7e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45fffd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x46008c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45ff89]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x45ad55]\n??:? runModuleUnitTests [0x464785]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x45c824]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360) return null;\n\treturn (a/360.0f) * PI * r * r;\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1666122440,
      "stdout": "",
      "stderr": "/tmp/tmpzp4sfsbd.d(10): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!float`\n/tmp/tmpzp4sfsbd.d(11): Error: cannot implicitly convert expression `cast(real)(cast(float)a / 360.000F) * 3.14159L * cast(real)r * cast(real)r` of type `real` to `Nullable!float`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzp4sfsbd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360)\n\t\treturn null;\n\treturn (a/360.0) * PI * r * r;\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1666122440,
      "stdout": "",
      "stderr": "/tmp/tmpp1uy8cta.d(11): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!float`\n/tmp/tmpp1uy8cta.d(12): Error: cannot implicitly convert expression `cast(real)(cast(double)a / 360.000) * 3.14159L * cast(real)r * cast(real)r` of type `real` to `Nullable!float`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp1uy8cta.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif(a > 360)\n\t\treturn null;\n\treturn (a/360.0) * PI * r * r;\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1666122440,
      "stdout": "",
      "stderr": "/tmp/tmp2u5eb85q.d(11): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!float`\n/tmp/tmp2u5eb85q.d(12): Error: cannot implicitly convert expression `cast(real)(cast(double)a / 360.000) * 3.14159L * cast(real)r * cast(real)r` of type `real` to `Nullable!float`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2u5eb85q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360)\n\t\treturn null;\n\telse\n\t\treturn (a / 360.0) * PI * r * r;\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1666122440,
      "stdout": "",
      "stderr": "/tmp/tmp8p24dada.d(11): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!float`\n/tmp/tmp8p24dada.d(13): Error: cannot implicitly convert expression `cast(real)(cast(double)a / 360.000) * 3.14159L * cast(real)r * cast(real)r` of type `real` to `Nullable!float`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8p24dada.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360)\n\t\treturn Nullable!(float).init;\n\telse\n\t\treturn Nullable!(float).init(r * r * a / 2 * PI / 360);\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1666122440,
      "stdout": "",
      "stderr": "/tmp/tmpdeg5aitp.d(13): Error: function expected before `()`, not `Nullable(nanF, true).get()` of type `float`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdeg5aitp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360)\n\t\treturn Nullable!(float)();\n\treturn Nullable!(float)((a / 360.0) * PI * r * r);\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1665517196,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpbqlics2l.d(20): unittest failure\n----------------\n??:? _d_unittestp [0x45b751]\n??:? void tmpbqlics2l.__unittest_L14_C1() [0x44519e]\n??:? void tmpbqlics2l.__modtest() [0x45925c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x4649af]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x45ad7e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45fffd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x46008c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45ff89]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x45ad55]\n??:? runModuleUnitTests [0x464785]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x45c824]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360) \n\t{\n\t\treturn Nullable!(float)();\n\t}\n\treturn Nullable!(float)((a / 360.0) * PI * r * r);\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1665517196,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppzo6zjpn.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x45b751]\n??:? void tmppzo6zjpn.__unittest_L16_C1() [0x44519e]\n??:? void tmppzo6zjpn.__modtest() [0x45925c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x4649af]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x45ad7e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45fffd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x46008c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45ff89]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x45ad55]\n??:? runModuleUnitTests [0x464785]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x45c824]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360)\n\t\treturn Nullable!(float)();\n\telse\n\t\treturn Nullable!(float)(r * r * a / 360.0 * PI);\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1666122442,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp11stixdu.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x45b751]\n??:? void tmp11stixdu.__unittest_L15_C1() [0x44519e]\n??:? void tmp11stixdu.__modtest() [0x45925c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x4649af]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x45ad7e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45fffd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x46008c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45ff89]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x45ad55]\n??:? runModuleUnitTests [0x464785]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x45c824]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360) \n\t{\n\t\treturn Nullable!(float).init;\n\t}\n\treturn Nullable!(float).init(r * r * a * PI / 360);\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1666122440,
      "stdout": "",
      "stderr": "/tmp/tmpqwhaarjx.d(14): Error: function expected before `()`, not `Nullable(nanF, true).get()` of type `float`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqwhaarjx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360) \n\t{\n\t\treturn Nullable!(float)();\n\t}\n\treturn Nullable!(float)((a / 360.0) * PI * r * r);\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1665517196,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppzo6zjpn.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x45b751]\n??:? void tmppzo6zjpn.__unittest_L16_C1() [0x44519e]\n??:? void tmppzo6zjpn.__modtest() [0x45925c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x4649af]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x45ad7e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45fffd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x46008c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45ff89]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x45ad55]\n??:? runModuleUnitTests [0x464785]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x45c824]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360)\n\t\treturn Nullable!(float)();\n\treturn Nullable!(float)((a / 360.0) * PI * r * r);\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1665517196,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpbqlics2l.d(20): unittest failure\n----------------\n??:? _d_unittestp [0x45b751]\n??:? void tmpbqlics2l.__unittest_L14_C1() [0x44519e]\n??:? void tmpbqlics2l.__modtest() [0x45925c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x4649af]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x45ad7e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45fffd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x46008c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45ff89]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x45ad55]\n??:? runModuleUnitTests [0x464785]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x45c824]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360) \n\t{\n\t\treturn Nullable!(float)();\n\t}\n\treturn Nullable!(float)((a * PI * r * r) / 360);\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1666122442,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp910siqy_.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x45b751]\n??:? void tmp910siqy_.__unittest_L16_C1() [0x44519e]\n??:? void tmp910siqy_.__modtest() [0x45925c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x4649af]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x45ad7e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45fffd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x46008c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45ff89]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x45ad55]\n??:? runModuleUnitTests [0x464785]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x45c824]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360)\n\t\treturn Nullable!(float)();\n\treturn Nullable!(float)((a / 360.0) * PI * r * r);\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1665517196,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpbqlics2l.d(20): unittest failure\n----------------\n??:? _d_unittestp [0x45b751]\n??:? void tmpbqlics2l.__unittest_L14_C1() [0x44519e]\n??:? void tmpbqlics2l.__modtest() [0x45925c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x4649af]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x45ad7e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45fffd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x46008c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45ff89]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x45ad55]\n??:? runModuleUnitTests [0x464785]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x45c824]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360) \n\t{\n\t\treturn Nullable!(float).init;\n\t}\n\treturn Nullable!(float).init(0.5f * r * r * a * PI / 180);\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1666122440,
      "stdout": "",
      "stderr": "/tmp/tmpc1wzh0fn.d(14): Error: function expected before `()`, not `Nullable(nanF, true).get()` of type `float`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc1wzh0fn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360)\n\t\treturn Nullable!(float)();\n\treturn Nullable!(float)((a / 360.0) * PI * r * r);\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1665517196,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpbqlics2l.d(20): unittest failure\n----------------\n??:? _d_unittestp [0x45b751]\n??:? void tmpbqlics2l.__unittest_L14_C1() [0x44519e]\n??:? void tmpbqlics2l.__modtest() [0x45925c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x4649af]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x45ad7e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45fffd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x46008c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45ff89]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x45ad55]\n??:? runModuleUnitTests [0x464785]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x45c824]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif(a > 360)\n\t\treturn null;\n\telse\n\t\treturn (a/360.0) * PI * r * r;\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1666122440,
      "stdout": "",
      "stderr": "/tmp/tmp_a8_0z_8.d(11): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!float`\n/tmp/tmp_a8_0z_8.d(13): Error: cannot implicitly convert expression `cast(real)(cast(double)a / 360.000) * 3.14159L * cast(real)r * cast(real)r` of type `real` to `Nullable!float`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_a8_0z_8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360)\n\t\treturn Nullable!(float).init;\n\telse\n\t\treturn Nullable!(float).init(r * r * a / 2.0f * PI / 180.0f);\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1666122441,
      "stdout": "",
      "stderr": "/tmp/tmpssb5sl37.d(13): Error: function expected before `()`, not `Nullable(nanF, true).get()` of type `float`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpssb5sl37.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360)\n\t\treturn null;\n\treturn (a / 360.0) * PI * r * r;\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1665517194,
      "stdout": "",
      "stderr": "/tmp/tmp6c2mw9sy.d(11): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!float`\n/tmp/tmp6c2mw9sy.d(12): Error: cannot implicitly convert expression `cast(real)(cast(double)a / 360.000) * 3.14159L * cast(real)r * cast(real)r` of type `real` to `Nullable!float`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6c2mw9sy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360) return null;\n\treturn (a / 360.0) * PI * r * r;\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1666122440,
      "stdout": "",
      "stderr": "/tmp/tmpkf2yjphh.d(10): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!float`\n/tmp/tmpkf2yjphh.d(11): Error: cannot implicitly convert expression `cast(real)(cast(double)a / 360.000) * 3.14159L * cast(real)r * cast(real)r` of type `real` to `Nullable!float`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkf2yjphh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360) \n\t{\n\t\treturn Nullable!(float)();\n\t}\n\treturn Nullable!(float)((a / 360.0) * PI * r * r);\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1665517196,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppzo6zjpn.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x45b751]\n??:? void tmppzo6zjpn.__unittest_L16_C1() [0x44519e]\n??:? void tmppzo6zjpn.__modtest() [0x45925c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x4649af]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x45ad7e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45fffd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x46008c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45ff89]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x45ad55]\n??:? runModuleUnitTests [0x464785]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x45c824]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360)\n\t\treturn Nullable!(float).init;\n\telse\n\t\treturn Nullable!(float).init(r * r * a * PI / 360);\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1665517194,
      "stdout": "",
      "stderr": "/tmp/tmppzpx_roq.d(13): Error: function expected before `()`, not `Nullable(nanF, true).get()` of type `float`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppzpx_roq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360)\n\t\treturn null;\n\treturn (a / 360.0) * PI * r * r;\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1665517194,
      "stdout": "",
      "stderr": "/tmp/tmp6c2mw9sy.d(11): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!float`\n/tmp/tmp6c2mw9sy.d(12): Error: cannot implicitly convert expression `cast(real)(cast(double)a / 360.000) * 3.14159L * cast(real)r * cast(real)r` of type `real` to `Nullable!float`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6c2mw9sy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360)\n\t\treturn Nullable!(float)();\n\treturn Nullable!(float)((a / 360.0) * PI * r * r);\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1665517196,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpbqlics2l.d(20): unittest failure\n----------------\n??:? _d_unittestp [0x45b751]\n??:? void tmpbqlics2l.__unittest_L14_C1() [0x44519e]\n??:? void tmpbqlics2l.__modtest() [0x45925c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x4649af]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x45ad7e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45fffd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x46008c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45ff89]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x45ad55]\n??:? runModuleUnitTests [0x464785]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x45c824]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360) \n\t{\n\t\treturn Nullable!(float).init;\n\t}\n\treturn (a / 360.0) * PI * r * r;\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1666122440,
      "stdout": "",
      "stderr": "/tmp/tmpi49_0uyc.d(14): Error: cannot implicitly convert expression `cast(real)(cast(double)a / 360.000) * 3.14159L * cast(real)r * cast(real)r` of type `real` to `Nullable!float`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi49_0uyc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360) \n\t{\n\t\treturn Nullable!(float)();\n\t}\n\treturn Nullable!(float)((a / 360.0) * PI * r * r);\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1665517196,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppzo6zjpn.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x45b751]\n??:? void tmppzo6zjpn.__unittest_L16_C1() [0x44519e]\n??:? void tmppzo6zjpn.__modtest() [0x45925c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x4649af]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x45ad7e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45fffd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x46008c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45ff89]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x45ad55]\n??:? runModuleUnitTests [0x464785]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x45c824]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360)\n\t\treturn null;\n\treturn a / 360.0 * PI * r * r;\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1666122441,
      "stdout": "",
      "stderr": "/tmp/tmp_jqm5fdf.d(11): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!float`\n/tmp/tmp_jqm5fdf.d(12): Error: cannot implicitly convert expression `cast(real)(cast(double)a / 360.000) * 3.14159L * cast(real)r * cast(real)r` of type `real` to `Nullable!float`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_jqm5fdf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360) \n\t{\n\t\treturn Nullable!(float).init;\n\t}\n\treturn (a / 360.0) * PI * r * r;\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1666122440,
      "stdout": "",
      "stderr": "/tmp/tmpi49_0uyc.d(14): Error: cannot implicitly convert expression `cast(real)(cast(double)a / 360.000) * 3.14159L * cast(real)r * cast(real)r` of type `real` to `Nullable!float`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi49_0uyc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360) return null;\n\treturn (a / 360.0) * PI * r * r;\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1666122440,
      "stdout": "",
      "stderr": "/tmp/tmpkf2yjphh.d(10): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!float`\n/tmp/tmpkf2yjphh.d(11): Error: cannot implicitly convert expression `cast(real)(cast(double)a / 360.000) * 3.14159L * cast(real)r * cast(real)r` of type `real` to `Nullable!float`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkf2yjphh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360) \n\t{\n\t\treturn Nullable!(float)();\n\t}\n\treturn Nullable!(float)((a / 360.0f) * PI * r * r);\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1666122443,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp0t_dlnxy.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x45b751]\n??:? void tmp0t_dlnxy.__unittest_L16_C1() [0x44519e]\n??:? void tmp0t_dlnxy.__modtest() [0x45925c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x4649af]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x45ad7e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45fffd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x46008c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45ff89]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x45ad55]\n??:? runModuleUnitTests [0x464785]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x45c824]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360) \n\t{\n\t\treturn Nullable!(float)();\n\t}\n\treturn Nullable!(float)((a/360.0f)*PI*r*r);\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1666122443,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpi6bys9tv.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x45b751]\n??:? void tmpi6bys9tv.__unittest_L16_C1() [0x44519e]\n??:? void tmpi6bys9tv.__modtest() [0x45925c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x4649af]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x45ad7e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45fffd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x46008c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45ff89]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x45ad55]\n??:? runModuleUnitTests [0x464785]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x45c824]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360) \n\t{\n\t\treturn Nullable!(float)();\n\t}\n\treturn Nullable!(float)((a / 360.0) * PI * r * r);\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1665517196,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppzo6zjpn.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x45b751]\n??:? void tmppzo6zjpn.__unittest_L16_C1() [0x44519e]\n??:? void tmppzo6zjpn.__modtest() [0x45925c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x4649af]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x45ad7e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45fffd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x46008c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45ff89]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x45ad55]\n??:? runModuleUnitTests [0x464785]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x45c824]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360) return null;\n\treturn (a / 360.0) * PI * r * r;\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1666122440,
      "stdout": "",
      "stderr": "/tmp/tmpkf2yjphh.d(10): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!float`\n/tmp/tmpkf2yjphh.d(11): Error: cannot implicitly convert expression `cast(real)(cast(double)a / 360.000) * 3.14159L * cast(real)r * cast(real)r` of type `real` to `Nullable!float`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkf2yjphh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360)\n\t\treturn Nullable!(float)();\n\treturn Nullable!(float)((a / 360.0) * PI * r * r);\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1665517196,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpbqlics2l.d(20): unittest failure\n----------------\n??:? _d_unittestp [0x45b751]\n??:? void tmpbqlics2l.__unittest_L14_C1() [0x44519e]\n??:? void tmpbqlics2l.__modtest() [0x45925c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x4649af]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x45ad7e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45fffd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x46008c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45ff89]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x45ad55]\n??:? runModuleUnitTests [0x464785]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x45c824]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360) \n\t{\n\t\treturn Nullable!(float)();\n\t}\n\treturn Nullable!(float)((a / 360.0) * PI * r * r);\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1665517196,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppzo6zjpn.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x45b751]\n??:? void tmppzo6zjpn.__unittest_L16_C1() [0x44519e]\n??:? void tmppzo6zjpn.__modtest() [0x45925c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x4649af]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x45ad7e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45fffd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x46008c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45ff89]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x45ad55]\n??:? runModuleUnitTests [0x464785]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x45c824]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360)\n\t\treturn Nullable!(float)();\n\treturn Nullable!(float)(r * r * a * PI / 360);\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1666122443,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3vigwk2r.d(20): unittest failure\n----------------\n??:? _d_unittestp [0x45b751]\n??:? void tmp3vigwk2r.__unittest_L14_C1() [0x44519e]\n??:? void tmp3vigwk2r.__modtest() [0x45925c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x4649af]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x45ad7e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45fffd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x46008c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45ff89]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x45ad55]\n??:? runModuleUnitTests [0x464785]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x45c824]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360)\n\t\treturn Nullable!(float).init;\n\treturn Nullable!(float).init(r * r * a * PI / 360);\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1666122441,
      "stdout": "",
      "stderr": "/tmp/tmpvxzgeiua.d(12): Error: function expected before `()`, not `Nullable(nanF, true).get()` of type `float`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvxzgeiua.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360) \n\t{\n\t\treturn Nullable!(float)();\n\t}\n\treturn Nullable!(float)((a / 360.0) * PI * r * r);\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1665517196,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppzo6zjpn.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x45b751]\n??:? void tmppzo6zjpn.__unittest_L16_C1() [0x44519e]\n??:? void tmppzo6zjpn.__modtest() [0x45925c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x4649af]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x45ad7e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45fffd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x46008c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45ff89]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x45ad55]\n??:? runModuleUnitTests [0x464785]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x45c824]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360) \n\t{\n\t\treturn null;\n\t}\n\treturn (a / 360.0) * PI * r * r;\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1666122441,
      "stdout": "",
      "stderr": "/tmp/tmp4erbz7xz.d(12): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!float`\n/tmp/tmp4erbz7xz.d(14): Error: cannot implicitly convert expression `cast(real)(cast(double)a / 360.000) * 3.14159L * cast(real)r * cast(real)r` of type `real` to `Nullable!float`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4erbz7xz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360)\n\t\treturn Nullable!(float)();\n\treturn Nullable!(float)((a / 360.0) * PI * r * r);\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1665517196,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpbqlics2l.d(20): unittest failure\n----------------\n??:? _d_unittestp [0x45b751]\n??:? void tmpbqlics2l.__unittest_L14_C1() [0x44519e]\n??:? void tmpbqlics2l.__modtest() [0x45925c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x4649af]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x45ad7e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45fffd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x46008c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45ff89]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x45ad55]\n??:? runModuleUnitTests [0x464785]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x45c824]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360)\n\t\treturn null;\n\treturn (a / 360.0) * PI * r * r;\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1665517194,
      "stdout": "",
      "stderr": "/tmp/tmp6c2mw9sy.d(11): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!float`\n/tmp/tmp6c2mw9sy.d(12): Error: cannot implicitly convert expression `cast(real)(cast(double)a / 360.000) * 3.14159L * cast(real)r * cast(real)r` of type `real` to `Nullable!float`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6c2mw9sy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360)\n\t\treturn Nullable!(float)();\n\telse\n\t\treturn Nullable!(float)((a / 360.0) * PI * r * r);\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1666122442,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpfrawkj_4.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x45b751]\n??:? void tmpfrawkj_4.__unittest_L15_C1() [0x44519e]\n??:? void tmpfrawkj_4.__modtest() [0x45925c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x4649af]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x45ad7e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45fffd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x46008c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45ff89]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x45ad55]\n??:? runModuleUnitTests [0x464785]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x45c824]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360)\n\t{\n\t\treturn Nullable!(float)();\n\t}\n\telse\n\t{\n\t\treturn Nullable!(float)((a / 360.0) * PI * r * r);\n\t}\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1666122443,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp1fa1p1hb.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x45b751]\n??:? void tmp1fa1p1hb.__unittest_L19_C1() [0x44519e]\n??:? void tmp1fa1p1hb.__modtest() [0x45925c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x4649af]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x45ad7e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45fffd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x46008c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45ff89]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x45ad55]\n??:? runModuleUnitTests [0x464785]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x45c824]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360)\n\t\treturn Nullable!(float)();\n\treturn Nullable!(float)((a / 360.0) * PI * r * r);\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1665517196,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpbqlics2l.d(20): unittest failure\n----------------\n??:? _d_unittestp [0x45b751]\n??:? void tmpbqlics2l.__unittest_L14_C1() [0x44519e]\n??:? void tmpbqlics2l.__modtest() [0x45925c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x4649af]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x45ad7e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45fffd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x46008c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45ff89]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x45ad55]\n??:? runModuleUnitTests [0x464785]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x45c824]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360)\n\t{\n\t\treturn Nullable!(float).init;\n\t}\n\treturn Nullable!(float).make(0.5f * r * r * a * PI / 180);\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1666122441,
      "stdout": "",
      "stderr": "/tmp/tmpq0t9ol6f.d(14): Error: no property `make` for type `Nullable!float`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq0t9ol6f.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360) \n\t{\n\t\treturn Nullable!(float).init;\n\t}\n\treturn (a / 360.0) * PI * r * r;\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1666122440,
      "stdout": "",
      "stderr": "/tmp/tmpi49_0uyc.d(14): Error: cannot implicitly convert expression `cast(real)(cast(double)a / 360.000) * 3.14159L * cast(real)r * cast(real)r` of type `real` to `Nullable!float`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi49_0uyc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif(a > 360)\n\t\treturn Nullable!(float)();\n\telse\n\t\treturn Nullable!(float)(a * r * r / 2);\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1666122443,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpmc2qlrqc.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x45b741]\n??:? void tmpmc2qlrqc.__unittest_L15_C1() [0x445192]\n??:? void tmpmc2qlrqc.__modtest() [0x459250]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x46499f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x45ad6e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45ffed]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x46007c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45ff79]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x45ad45]\n??:? runModuleUnitTests [0x464775]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x45c814]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif(a > 360)\n\t\treturn null;\n\treturn (a/360.0)*PI*r*r;\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1666122441,
      "stdout": "",
      "stderr": "/tmp/tmpxwpctqty.d(11): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!float`\n/tmp/tmpxwpctqty.d(12): Error: cannot implicitly convert expression `cast(real)(cast(double)a / 360.000) * 3.14159L * cast(real)r * cast(real)r` of type `real` to `Nullable!float`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxwpctqty.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360)\n\t\treturn Nullable!(float).init;\n\treturn (a / 360.0) * PI * r * r;\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1665517194,
      "stdout": "",
      "stderr": "/tmp/tmpw3a5sele.d(12): Error: cannot implicitly convert expression `cast(real)(cast(double)a / 360.000) * 3.14159L * cast(real)r * cast(real)r` of type `real` to `Nullable!float`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw3a5sele.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360)\n\t\treturn null;\n\treturn (a / 360.0) * PI * r * r;\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1665517194,
      "stdout": "",
      "stderr": "/tmp/tmp6c2mw9sy.d(11): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!float`\n/tmp/tmp6c2mw9sy.d(12): Error: cannot implicitly convert expression `cast(real)(cast(double)a / 360.000) * 3.14159L * cast(real)r * cast(real)r` of type `real` to `Nullable!float`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6c2mw9sy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360)\n\t\treturn Nullable!(float)();\n\telse\n\t\treturn Nullable!(float)((a / 360.0) * PI * r * r);\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1666122442,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpfrawkj_4.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x45b751]\n??:? void tmpfrawkj_4.__unittest_L15_C1() [0x44519e]\n??:? void tmpfrawkj_4.__modtest() [0x45925c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x4649af]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x45ad7e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45fffd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x46008c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45ff89]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x45ad55]\n??:? runModuleUnitTests [0x464785]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x45c824]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360)\n\t\treturn null;\n\telse\n\t\treturn (a / 360.0) * PI * r * r;\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1666122440,
      "stdout": "",
      "stderr": "/tmp/tmp8p24dada.d(11): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!float`\n/tmp/tmp8p24dada.d(13): Error: cannot implicitly convert expression `cast(real)(cast(double)a / 360.000) * 3.14159L * cast(real)r * cast(real)r` of type `real` to `Nullable!float`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8p24dada.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360)\n\t\treturn null;\n\treturn (a / 360.0) * PI * r * r;\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1665517194,
      "stdout": "",
      "stderr": "/tmp/tmp6c2mw9sy.d(11): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!float`\n/tmp/tmp6c2mw9sy.d(12): Error: cannot implicitly convert expression `cast(real)(cast(double)a / 360.000) * 3.14159L * cast(real)r * cast(real)r` of type `real` to `Nullable!float`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6c2mw9sy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360)\n\t\treturn Nullable!(float)();\n\treturn Nullable!(float)((a / 360.0) * PI * r * r);\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1665517196,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpbqlics2l.d(20): unittest failure\n----------------\n??:? _d_unittestp [0x45b751]\n??:? void tmpbqlics2l.__unittest_L14_C1() [0x44519e]\n??:? void tmpbqlics2l.__modtest() [0x45925c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x4649af]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x45ad7e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45fffd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x46008c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45ff89]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x45ad55]\n??:? runModuleUnitTests [0x464785]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x45c824]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360)\n\t\treturn Nullable!(float)();\n\telse\n\t\treturn Nullable!(float)((a/360.0)*PI*r*r);\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1666122443,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpis4da1mq.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x45b751]\n??:? void tmpis4da1mq.__unittest_L15_C1() [0x44519e]\n??:? void tmpis4da1mq.__modtest() [0x45925c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x4649af]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x45ad7e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45fffd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x46008c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45ff89]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x45ad55]\n??:? runModuleUnitTests [0x464785]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x45c824]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360) \n\t{\n\t\treturn null;\n\t}\n\treturn (a / 360.0) * PI * r * r;\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1666122441,
      "stdout": "",
      "stderr": "/tmp/tmp4erbz7xz.d(12): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!float`\n/tmp/tmp4erbz7xz.d(14): Error: cannot implicitly convert expression `cast(real)(cast(double)a / 360.000) * 3.14159L * cast(real)r * cast(real)r` of type `real` to `Nullable!float`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4erbz7xz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360)\n\t\treturn Nullable!(float)();\n\treturn Nullable!(float)(a / 360.0f * PI * r * r);\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1666122443,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpgexha4zl.d(20): unittest failure\n----------------\n??:? _d_unittestp [0x45b751]\n??:? void tmpgexha4zl.__unittest_L14_C1() [0x44519e]\n??:? void tmpgexha4zl.__modtest() [0x45925c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x4649af]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x45ad7e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45fffd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x46008c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45ff89]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x45ad55]\n??:? runModuleUnitTests [0x464785]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x45c824]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360)\n\t\treturn Nullable!(float)();\n\telse\n\t\treturn Nullable!(float)((a / 360.0) * PI * r * r);\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1666122442,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpfrawkj_4.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x45b751]\n??:? void tmpfrawkj_4.__unittest_L15_C1() [0x44519e]\n??:? void tmpfrawkj_4.__modtest() [0x45925c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x4649af]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x45ad7e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45fffd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x46008c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45ff89]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x45ad55]\n??:? runModuleUnitTests [0x464785]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x45c824]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif(a > 360)\n\t\treturn null;\n\treturn (a / 360.0) * PI * r * r;\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1665517194,
      "stdout": "",
      "stderr": "/tmp/tmpxdb1a2ec.d(11): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!float`\n/tmp/tmpxdb1a2ec.d(12): Error: cannot implicitly convert expression `cast(real)(cast(double)a / 360.000) * 3.14159L * cast(real)r * cast(real)r` of type `real` to `Nullable!float`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxdb1a2ec.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360) \n\t{\n\t\treturn Nullable!(float)();\n\t}\n\treturn Nullable!(float)((a / 360.0) * PI * r * r);\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1665517196,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppzo6zjpn.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x45b751]\n??:? void tmppzo6zjpn.__unittest_L16_C1() [0x44519e]\n??:? void tmppzo6zjpn.__modtest() [0x45925c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x4649af]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x45ad7e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45fffd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x46008c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45ff89]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x45ad55]\n??:? runModuleUnitTests [0x464785]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x45c824]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360)\n\t\treturn Nullable!(float).init;\n\treturn (a / 360.0) * PI * r * r;\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1665517194,
      "stdout": "",
      "stderr": "/tmp/tmpw3a5sele.d(12): Error: cannot implicitly convert expression `cast(real)(cast(double)a / 360.000) * 3.14159L * cast(real)r * cast(real)r` of type `real` to `Nullable!float`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw3a5sele.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360)\n\t\treturn Nullable!(float).init;\n\treturn (a / 360.0f) * PI * r * r;\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1666122442,
      "stdout": "",
      "stderr": "/tmp/tmpp_5mh584.d(12): Error: cannot implicitly convert expression `cast(real)(cast(float)a / 360.000F) * 3.14159L * cast(real)r * cast(real)r` of type `real` to `Nullable!float`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp_5mh584.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360) \n\t{\n\t\treturn Nullable!(float)();\n\t}\n\treturn Nullable!(float)((a / 360.0) * PI * r * r);\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1665517196,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppzo6zjpn.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x45b751]\n??:? void tmppzo6zjpn.__unittest_L16_C1() [0x44519e]\n??:? void tmppzo6zjpn.__modtest() [0x45925c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x4649af]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x45ad7e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45fffd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x46008c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45ff89]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x45ad55]\n??:? runModuleUnitTests [0x464785]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x45c824]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360)\n\t\treturn null;\n\treturn (a / 360.0) * PI * r * r;\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1665517194,
      "stdout": "",
      "stderr": "/tmp/tmp6c2mw9sy.d(11): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!float`\n/tmp/tmp6c2mw9sy.d(12): Error: cannot implicitly convert expression `cast(real)(cast(double)a / 360.000) * 3.14159L * cast(real)r * cast(real)r` of type `real` to `Nullable!float`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6c2mw9sy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360)\n\t\treturn Nullable!(float)();\n\treturn Nullable!(float)((a / 360.0) * PI * r * r);\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1665517196,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpbqlics2l.d(20): unittest failure\n----------------\n??:? _d_unittestp [0x45b751]\n??:? void tmpbqlics2l.__unittest_L14_C1() [0x44519e]\n??:? void tmpbqlics2l.__modtest() [0x45925c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x4649af]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x45ad7e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45fffd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x46008c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45ff89]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x45ad55]\n??:? runModuleUnitTests [0x464785]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x45c824]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360) \n\t{\n\t\treturn Nullable!(float)();\n\t}\n\treturn Nullable!(float)((a / 360.0) * PI * r * r);\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1665517196,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppzo6zjpn.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x45b751]\n??:? void tmppzo6zjpn.__unittest_L16_C1() [0x44519e]\n??:? void tmppzo6zjpn.__modtest() [0x45925c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x4649af]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x45ad7e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45fffd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x46008c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45ff89]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x45ad55]\n??:? runModuleUnitTests [0x464785]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x45c824]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360) \n\t{\n\t\treturn Nullable!(float)();\n\t}\n\treturn Nullable!(float)((a * PI * r * r) / 360);\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1666122442,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp910siqy_.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x45b751]\n??:? void tmp910siqy_.__unittest_L16_C1() [0x44519e]\n??:? void tmp910siqy_.__modtest() [0x45925c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x4649af]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x45ad7e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45fffd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x46008c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45ff89]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x45ad55]\n??:? runModuleUnitTests [0x464785]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x45c824]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360) \n\t{\n\t\treturn Nullable!(float)();\n\t}\n\treturn Nullable!(float)((a / 360.0) * PI * r * r);\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1665517196,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppzo6zjpn.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x45b751]\n??:? void tmppzo6zjpn.__unittest_L16_C1() [0x44519e]\n??:? void tmppzo6zjpn.__modtest() [0x45925c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x4649af]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x45ad7e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45fffd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x46008c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45ff89]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x45ad55]\n??:? runModuleUnitTests [0x464785]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x45c824]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360)\n\t\treturn Nullable!(float).init;\n\telse\n\t\treturn Nullable!(float).init(r * r * a / 2 * PI / 360);\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1666122440,
      "stdout": "",
      "stderr": "/tmp/tmpdeg5aitp.d(13): Error: function expected before `()`, not `Nullable(nanF, true).get()` of type `float`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdeg5aitp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360)\n\t\treturn Nullable!(float).init;\n\t\n\treturn (a / 360.0f) * PI * r * r;\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1666122442,
      "stdout": "",
      "stderr": "/tmp/tmp4malmplz.d(13): Error: cannot implicitly convert expression `cast(real)(cast(float)a / 360.000F) * 3.14159L * cast(real)r * cast(real)r` of type `real` to `Nullable!float`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4malmplz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360) return null;\n\treturn (a / 360.0) * PI * r * r;\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1666122440,
      "stdout": "",
      "stderr": "/tmp/tmpkf2yjphh.d(10): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!float`\n/tmp/tmpkf2yjphh.d(11): Error: cannot implicitly convert expression `cast(real)(cast(double)a / 360.000) * 3.14159L * cast(real)r * cast(real)r` of type `real` to `Nullable!float`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkf2yjphh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360)\n\t\treturn null;\n\treturn (a / 360.0) * PI * r * r;\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1665517194,
      "stdout": "",
      "stderr": "/tmp/tmp6c2mw9sy.d(11): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!float`\n/tmp/tmp6c2mw9sy.d(12): Error: cannot implicitly convert expression `cast(real)(cast(double)a / 360.000) * 3.14159L * cast(real)r * cast(real)r` of type `real` to `Nullable!float`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6c2mw9sy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif(a > 360)\n\t\treturn Nullable!(float)();\n\treturn Nullable!(float)((a/360.0f)*PI*r*r);\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1666122444,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpyoqdlged.d(20): unittest failure\n----------------\n??:? _d_unittestp [0x45b751]\n??:? void tmpyoqdlged.__unittest_L14_C1() [0x44519e]\n??:? void tmpyoqdlged.__modtest() [0x45925c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x4649af]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x45ad7e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45fffd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x46008c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45ff89]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x45ad55]\n??:? runModuleUnitTests [0x464785]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x45c824]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360)\n\t\treturn Nullable!(float)();\n\telse\n\t\treturn Nullable!(float)(a * r * r / 2);\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1666122444,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp2vwwzn5j.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x45b741]\n??:? void tmp2vwwzn5j.__unittest_L15_C1() [0x445192]\n??:? void tmp2vwwzn5j.__modtest() [0x459250]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x46499f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x45ad6e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45ffed]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x46007c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45ff79]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x45ad45]\n??:? runModuleUnitTests [0x464775]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x45c814]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360) \n\t{\n\t\treturn Nullable!(float).init;\n\t}\n\treturn (a / 360.0) * PI * r * r;\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1666122440,
      "stdout": "",
      "stderr": "/tmp/tmpi49_0uyc.d(14): Error: cannot implicitly convert expression `cast(real)(cast(double)a / 360.000) * 3.14159L * cast(real)r * cast(real)r` of type `real` to `Nullable!float`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi49_0uyc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif(a > 360) \n\t{\n\t\treturn Nullable!(float)();\n\t}\n\telse \n\t{\n\t\treturn Nullable!(float)((a*r*r)/360);\n\t}\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1666122444,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp7iihp14a.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x45b751]\n??:? void tmp7iihp14a.__unittest_L19_C1() [0x44519e]\n??:? void tmp7iihp14a.__modtest() [0x45925c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x4649af]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x45ad7e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45fffd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x46008c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45ff89]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x45ad55]\n??:? runModuleUnitTests [0x464785]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x45c824]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope void delegate",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360)\n\t\treturn Nullable!(float)();\n\treturn Nullable!(float)((a/360.0f)*PI*r*r);\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1665517196,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp97tzhyvs.d(20): unittest failure\n----------------\n??:? _d_unittestp [0x45b751]\n??:? void tmp97tzhyvs.__unittest_L14_C1() [0x44519e]\n??:? void tmp97tzhyvs.__modtest() [0x45925c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x4649af]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x45ad7e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45fffd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x46008c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45ff89]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x45ad55]\n??:? runModuleUnitTests [0x464785]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x45c824]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360)\n\t\treturn Nullable!(float)();\n\telse\n\t\treturn Nullable!(float)((a/360.0)*PI*r*r);\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1666122443,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpis4da1mq.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x45b751]\n??:? void tmpis4da1mq.__unittest_L15_C1() [0x44519e]\n??:? void tmpis4da1mq.__modtest() [0x45925c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x4649af]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x45ad7e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45fffd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x46008c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45ff89]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x45ad55]\n??:? runModuleUnitTests [0x464785]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x45c824]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360) return null;\n\treturn a * r * r / 2;\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1666122442,
      "stdout": "",
      "stderr": "/tmp/tmpebri_3jq.d(10): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!float`\n/tmp/tmpebri_3jq.d(11): Error: cannot implicitly convert expression `a * r * r / 2L` of type `long` to `Nullable!float`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpebri_3jq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360) \n\t{\n\t\treturn Nullable!(float)();\n\t}\n\treturn Nullable!(float)((a / 360.0) * PI * r * r);\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1665517196,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppzo6zjpn.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x45b751]\n??:? void tmppzo6zjpn.__unittest_L16_C1() [0x44519e]\n??:? void tmppzo6zjpn.__modtest() [0x45925c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x4649af]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x45ad7e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45fffd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x46008c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45ff89]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x45ad55]\n??:? runModuleUnitTests [0x464785]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x45c824]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360)\n\t\treturn Nullable!(float)();\n\treturn Nullable!(float)((a / 360.0) * PI * r * r);\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1665517196,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpbqlics2l.d(20): unittest failure\n----------------\n??:? _d_unittestp [0x45b751]\n??:? void tmpbqlics2l.__unittest_L14_C1() [0x44519e]\n??:? void tmpbqlics2l.__modtest() [0x45925c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x4649af]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x45ad7e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45fffd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x46008c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45ff89]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x45ad55]\n??:? runModuleUnitTests [0x464785]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x45c824]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360)\n\t\treturn null;\n\telse\n\t\treturn (a * r * r) / 2;\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1666122443,
      "stdout": "",
      "stderr": "/tmp/tmpl2f4lin5.d(11): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!float`\n/tmp/tmpl2f4lin5.d(13): Error: cannot implicitly convert expression `a * r * r / 2L` of type `long` to `Nullable!float`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl2f4lin5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360) \n\t{\n\t\treturn Nullable!(float)();\n\t}\n\treturn Nullable!(float)((a / 360.0) * PI * r * r);\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1665517196,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppzo6zjpn.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x45b751]\n??:? void tmppzo6zjpn.__unittest_L16_C1() [0x44519e]\n??:? void tmppzo6zjpn.__modtest() [0x45925c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x4649af]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x45ad7e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45fffd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x46008c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45ff89]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x45ad55]\n??:? runModuleUnitTests [0x464785]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x45c824]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360)\n\t\treturn Nullable!(float).init;\n\treturn Nullable!(float).init(r * r * a / 2 * PI / 360);\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1666122443,
      "stdout": "",
      "stderr": "/tmp/tmpq3b0pz24.d(12): Error: function expected before `()`, not `Nullable(nanF, true).get()` of type `float`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq3b0pz24.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360)\n\t\treturn Nullable!(float).init;\n\t\n\treturn (a / 360.0) * PI * r * r;\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1666122443,
      "stdout": "",
      "stderr": "/tmp/tmp4ontubv5.d(13): Error: cannot implicitly convert expression `cast(real)(cast(double)a / 360.000) * 3.14159L * cast(real)r * cast(real)r` of type `real` to `Nullable!float`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4ontubv5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360)\n\t\treturn Nullable!(float).init;\n\telse\n\t\treturn Nullable!(float)((a / 360.0) * PI * r * r);\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1666122444,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp9weuswb1.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x45b751]\n??:? void tmp9weuswb1.__unittest_L15_C1() [0x44519e]\n??:? void tmp9weuswb1.__modtest() [0x45925c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x4649af]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x45ad7e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45fffd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x46008c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45ff89]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x45ad55]\n??:? runModuleUnitTests [0x464785]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x45c824]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif(a > 360)\n\t{\n\t\treturn Nullable!(float).init;\n\t}\n\telse\n\t{\n\t\treturn Nullable!(float).init(0.5 * r * r * a * PI / 180);\n\t}\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1666122443,
      "stdout": "",
      "stderr": "/tmp/tmpjiq4sjnb.d(16): Error: function expected before `()`, not `Nullable(nanF, true).get()` of type `float`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjiq4sjnb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360) \n\t{\n\t\treturn null;\n\t}\n\treturn (a / 360.0) * PI * r * r;\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1666122441,
      "stdout": "",
      "stderr": "/tmp/tmp4erbz7xz.d(12): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!float`\n/tmp/tmp4erbz7xz.d(14): Error: cannot implicitly convert expression `cast(real)(cast(double)a / 360.000) * 3.14159L * cast(real)r * cast(real)r` of type `real` to `Nullable!float`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4erbz7xz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif(a > 360)\n\t\treturn null;\n\treturn 0.5f * r * r * a * PI / 180;\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1666122443,
      "stdout": "",
      "stderr": "/tmp/tmpz685p07r.d(11): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!float`\n/tmp/tmpz685p07r.d(12): Error: cannot implicitly convert expression `cast(real)(0.5F * cast(float)r * cast(float)r * cast(float)a) * 3.14159L / 180.000L` of type `real` to `Nullable!float`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz685p07r.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif(a > 360)\n\t\treturn null;\n\treturn (a/360.0) * PI * r * r;\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1666122440,
      "stdout": "",
      "stderr": "/tmp/tmp2u5eb85q.d(11): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!float`\n/tmp/tmp2u5eb85q.d(12): Error: cannot implicitly convert expression `cast(real)(cast(double)a / 360.000) * 3.14159L * cast(real)r * cast(real)r` of type `real` to `Nullable!float`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2u5eb85q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360)\n\t\treturn Nullable!(float).init;\n\treturn Nullable!(float).init(r * r * a * PI / 360);\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1666122441,
      "stdout": "",
      "stderr": "/tmp/tmpvxzgeiua.d(12): Error: function expected before `()`, not `Nullable(nanF, true).get()` of type `float`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvxzgeiua.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360)\n\t\treturn null;\n\telse\n\t\treturn (a / 360.0) * PI * r * r;\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1666122440,
      "stdout": "",
      "stderr": "/tmp/tmp8p24dada.d(11): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!float`\n/tmp/tmp8p24dada.d(13): Error: cannot implicitly convert expression `cast(real)(cast(double)a / 360.000) * 3.14159L * cast(real)r * cast(real)r` of type `real` to `Nullable!float`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8p24dada.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360)\n\t\treturn Nullable!(float)();\n\treturn Nullable!(float)((a / 360.0) * PI * r * r);\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1665517196,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpbqlics2l.d(20): unittest failure\n----------------\n??:? _d_unittestp [0x45b751]\n??:? void tmpbqlics2l.__unittest_L14_C1() [0x44519e]\n??:? void tmpbqlics2l.__modtest() [0x45925c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x4649af]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x45ad7e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45fffd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x46008c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45ff89]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x45ad55]\n??:? runModuleUnitTests [0x464785]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x45c824]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif(a > 360)\n\t\treturn Nullable!(float)();\n\telse\n\t\treturn Nullable!(float)((a / 360.0) * PI * r * r);\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1666122444,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp1knk_sxj.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x45b751]\n??:? void tmp1knk_sxj.__unittest_L15_C1() [0x44519e]\n??:? void tmp1knk_sxj.__modtest() [0x45925c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x4649af]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x45ad7e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45fffd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x46008c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45ff89]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x45ad55]\n??:? runModuleUnitTests [0x464785]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x45c824]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360)\n\t\treturn Nullable!(float).init;\n\telse\n\t\treturn Nullable!(float).init(r * r * a / 2 * PI / 360);\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1666122440,
      "stdout": "",
      "stderr": "/tmp/tmpdeg5aitp.d(13): Error: function expected before `()`, not `Nullable(nanF, true).get()` of type `float`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdeg5aitp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360) \n\t{\n\t\treturn Nullable!(float).init;\n\t}\n\treturn (a / 360.0) * PI * r * r;\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1666122440,
      "stdout": "",
      "stderr": "/tmp/tmpi49_0uyc.d(14): Error: cannot implicitly convert expression `cast(real)(cast(double)a / 360.000) * 3.14159L * cast(real)r * cast(real)r` of type `real` to `Nullable!float`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi49_0uyc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360)\n\t{\n\t\treturn Nullable!(float).init;\n\t}\n\treturn (a / 360.0) * PI * r * r;\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1666122443,
      "stdout": "",
      "stderr": "/tmp/tmphpkmz5fn.d(14): Error: cannot implicitly convert expression `cast(real)(cast(double)a / 360.000) * 3.14159L * cast(real)r * cast(real)r` of type `real` to `Nullable!float`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphpkmz5fn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360) \n\t{\n\t\treturn Nullable!(float).init;\n\t}\n\treturn Nullable!(float).init(0.5f * r * r * a * PI / 180);\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1666122440,
      "stdout": "",
      "stderr": "/tmp/tmpc1wzh0fn.d(14): Error: function expected before `()`, not `Nullable(nanF, true).get()` of type `float`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc1wzh0fn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360)\n\t\treturn Nullable!(float).init;\n\telse\n\t\treturn Nullable!(float).init(r * r * a * PI / 360);\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1665517194,
      "stdout": "",
      "stderr": "/tmp/tmppzpx_roq.d(13): Error: function expected before `()`, not `Nullable(nanF, true).get()` of type `float`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppzpx_roq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360)\n\t\treturn Nullable!(float)();\n\telse\n\t\treturn Nullable!(float)((a / 360.0) * PI * r * r);\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1666122442,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpfrawkj_4.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x45b751]\n??:? void tmpfrawkj_4.__unittest_L15_C1() [0x44519e]\n??:? void tmpfrawkj_4.__modtest() [0x45925c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x4649af]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x45ad7e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45fffd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x46008c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45ff89]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x45ad55]\n??:? runModuleUnitTests [0x464785]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x45c824]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360)\n\t\treturn Nullable!(float)();\n\t\n\treturn Nullable!(float)((a / 360.0) * PI * r * r);\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1665517196,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp85k9vli6.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x45b751]\n??:? void tmp85k9vli6.__unittest_L15_C1() [0x44519e]\n??:? void tmp85k9vli6.__modtest() [0x45925c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x4649af]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x45ad7e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45fffd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x46008c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45ff89]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x45ad55]\n??:? runModuleUnitTests [0x464785]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x45c824]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360)\n\t\treturn Nullable!(float).init;\n\treturn Nullable!(float).init(r * r * a * PI / 360);\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1666122441,
      "stdout": "",
      "stderr": "/tmp/tmpvxzgeiua.d(12): Error: function expected before `()`, not `Nullable(nanF, true).get()` of type `float`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvxzgeiua.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360)\n\t\treturn Nullable!(float)();\n\telse\n\t\treturn Nullable!(float)(r*r*a/2*PI/360);\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1666122444,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpei5ye8qz.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x45b759]\n??:? void tmpei5ye8qz.__unittest_L15_C1() [0x4451aa]\n??:? void tmpei5ye8qz.__modtest() [0x459268]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x4649b7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x45ad86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x460005]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x460094]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45ff91]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x45ad5d]\n??:? runModuleUnitTests [0x46478d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x45c82c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360) \n\t{\n\t\treturn Nullable!(float).init;\n\t}\n\treturn (a * PI * r * r) / 360;\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1666122443,
      "stdout": "",
      "stderr": "/tmp/tmp9s5xtdnf.d(14): Error: cannot implicitly convert expression `cast(real)a * 3.14159L * cast(real)r * cast(real)r / 360.000L` of type `real` to `Nullable!float`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9s5xtdnf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360)\n\t\treturn Nullable!(float).init;\n\t\n\treturn (a / 360.0f) * PI * r * r;\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1666122442,
      "stdout": "",
      "stderr": "/tmp/tmp4malmplz.d(13): Error: cannot implicitly convert expression `cast(real)(cast(float)a / 360.000F) * 3.14159L * cast(real)r * cast(real)r` of type `real` to `Nullable!float`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4malmplz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360) return null;\n\treturn (a / 360.0) * PI * r * r;\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1666122440,
      "stdout": "",
      "stderr": "/tmp/tmpkf2yjphh.d(10): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!float`\n/tmp/tmpkf2yjphh.d(11): Error: cannot implicitly convert expression `cast(real)(cast(double)a / 360.000) * 3.14159L * cast(real)r * cast(real)r` of type `real` to `Nullable!float`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkf2yjphh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360)\n\t\treturn null;\n\treturn (a / 360.0) * PI * r * r;\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1665517194,
      "stdout": "",
      "stderr": "/tmp/tmp6c2mw9sy.d(11): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!float`\n/tmp/tmp6c2mw9sy.d(12): Error: cannot implicitly convert expression `cast(real)(cast(double)a / 360.000) * 3.14159L * cast(real)r * cast(real)r` of type `real` to `Nullable!float`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6c2mw9sy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360)\n\t\treturn null;\n\telse\n\t\treturn (a / 360.0) * PI * r * r;\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1666122440,
      "stdout": "",
      "stderr": "/tmp/tmp8p24dada.d(11): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!float`\n/tmp/tmp8p24dada.d(13): Error: cannot implicitly convert expression `cast(real)(cast(double)a / 360.000) * 3.14159L * cast(real)r * cast(real)r` of type `real` to `Nullable!float`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8p24dada.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360)\n\t\treturn Nullable!(float).init;\n\treturn (a / 360.0) * PI * r * r;\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1665517194,
      "stdout": "",
      "stderr": "/tmp/tmpw3a5sele.d(12): Error: cannot implicitly convert expression `cast(real)(cast(double)a / 360.000) * 3.14159L * cast(real)r * cast(real)r` of type `real` to `Nullable!float`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw3a5sele.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360) \n\t{\n\t\treturn Nullable!(float).init;\n\t}\n\treturn Nullable!(float).init(0.5f * r * r * a * PI / 180);\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1666122440,
      "stdout": "",
      "stderr": "/tmp/tmpc1wzh0fn.d(14): Error: function expected before `()`, not `Nullable(nanF, true).get()` of type `float`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc1wzh0fn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360)\n\t\treturn Nullable!(float)();\n\treturn Nullable!(float)((a / 360.0) * PI * r * r);\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1665517196,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpbqlics2l.d(20): unittest failure\n----------------\n??:? _d_unittestp [0x45b751]\n??:? void tmpbqlics2l.__unittest_L14_C1() [0x44519e]\n??:? void tmpbqlics2l.__modtest() [0x45925c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x4649af]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x45ad7e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45fffd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x46008c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45ff89]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x45ad55]\n??:? runModuleUnitTests [0x464785]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x45c824]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360)\n\t\treturn Nullable!(float)();\n\treturn Nullable!(float)((a/360.0)*PI*r*r);\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1666122444,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3tsh5x7z.d(20): unittest failure\n----------------\n??:? _d_unittestp [0x45b751]\n??:? void tmp3tsh5x7z.__unittest_L14_C1() [0x44519e]\n??:? void tmp3tsh5x7z.__modtest() [0x45925c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x4649af]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x45ad7e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45fffd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x46008c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45ff89]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x45ad55]\n??:? runModuleUnitTests [0x464785]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x45c824]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360)\n\t\treturn Nullable!(float)();\n\telse\n\t\treturn Nullable!(float)(r * r * a / 2.0f);\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1666122445,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp0qe5sy96.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x45b741]\n??:? void tmp0qe5sy96.__unittest_L15_C1() [0x445192]\n??:? void tmp0qe5sy96.__modtest() [0x459250]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x46499f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x45ad6e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45ffed]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x46007c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45ff79]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x45ad45]\n??:? runModuleUnitTests [0x464775]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x45c814]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360)\n\t\treturn null;\n\treturn (a / 360.0) * PI * r * r;\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1665517194,
      "stdout": "",
      "stderr": "/tmp/tmp6c2mw9sy.d(11): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!float`\n/tmp/tmp6c2mw9sy.d(12): Error: cannot implicitly convert expression `cast(real)(cast(double)a / 360.000) * 3.14159L * cast(real)r * cast(real)r` of type `real` to `Nullable!float`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6c2mw9sy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360)\n\t\treturn null;\n\treturn (a / 360.0f) * PI * r * r;\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1666122444,
      "stdout": "",
      "stderr": "/tmp/tmpfpysb9i5.d(11): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!float`\n/tmp/tmpfpysb9i5.d(12): Error: cannot implicitly convert expression `cast(real)(cast(float)a / 360.000F) * 3.14159L * cast(real)r * cast(real)r` of type `real` to `Nullable!float`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfpysb9i5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360)\n\t\treturn Nullable!(float)();\n\t\n\treturn Nullable!(float)((a / 360.0) * PI * r * r);\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1665517196,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp85k9vli6.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x45b751]\n??:? void tmp85k9vli6.__unittest_L15_C1() [0x44519e]\n??:? void tmp85k9vli6.__modtest() [0x45925c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x4649af]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x45ad7e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45fffd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x46008c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45ff89]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x45ad55]\n??:? runModuleUnitTests [0x464785]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x45c824]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif(a > 360)\n\t\treturn null;\n\treturn (a / 360.0) * PI * r * r;\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1665517194,
      "stdout": "",
      "stderr": "/tmp/tmpxdb1a2ec.d(11): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!float`\n/tmp/tmpxdb1a2ec.d(12): Error: cannot implicitly convert expression `cast(real)(cast(double)a / 360.000) * 3.14159L * cast(real)r * cast(real)r` of type `real` to `Nullable!float`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxdb1a2ec.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360)\n\t\treturn Nullable!(float)();\n\treturn Nullable!(float)((a / 360.0) * PI * r * r);\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1665517196,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpbqlics2l.d(20): unittest failure\n----------------\n??:? _d_unittestp [0x45b751]\n??:? void tmpbqlics2l.__unittest_L14_C1() [0x44519e]\n??:? void tmpbqlics2l.__modtest() [0x45925c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x4649af]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x45ad7e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45fffd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x46008c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45ff89]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x45ad55]\n??:? runModuleUnitTests [0x464785]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x45c824]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360)\n\t{\n\t\treturn Nullable!(float)();\n\t}\n\treturn Nullable!(float)((a / 360.0) * PI * r * r);\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1666122445,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpwh8i7e_z.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x45b751]\n??:? void tmpwh8i7e_z.__unittest_L16_C1() [0x44519e]\n??:? void tmpwh8i7e_z.__modtest() [0x45925c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x4649af]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x45ad7e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45fffd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x46008c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45ff89]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x45ad55]\n??:? runModuleUnitTests [0x464785]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x45c824]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360) \n\t{\n\t\treturn Nullable!(float)();\n\t}\n\telse \n\t{\n\t\treturn Nullable!(float)((a / 360.0) * PI * r * r);\n\t}\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1666122445,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpkjzoc0vm.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x45b751]\n??:? void tmpkjzoc0vm.__unittest_L19_C1() [0x44519e]\n??:? void tmpkjzoc0vm.__modtest() [0x45925c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x4649af]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x45ad7e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45fffd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x46008c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45ff89]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x45ad55]\n??:? runModuleUnitTests [0x464785]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x45c824]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif(a > 360)\n\t\treturn null;\n\telse\n\t\treturn (a / 360.0) * PI * r * r;\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1666122444,
      "stdout": "",
      "stderr": "/tmp/tmp5qdzl6bp.d(11): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!float`\n/tmp/tmp5qdzl6bp.d(13): Error: cannot implicitly convert expression `cast(real)(cast(double)a / 360.000) * 3.14159L * cast(real)r * cast(real)r` of type `real` to `Nullable!float`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5qdzl6bp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360) \n\t{\n\t\treturn null;\n\t}\n\treturn (a / 360.0) * PI * r * r;\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1666122441,
      "stdout": "",
      "stderr": "/tmp/tmp4erbz7xz.d(12): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!float`\n/tmp/tmp4erbz7xz.d(14): Error: cannot implicitly convert expression `cast(real)(cast(double)a / 360.000) * 3.14159L * cast(real)r * cast(real)r` of type `real` to `Nullable!float`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4erbz7xz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360)\n\t\treturn Nullable!(float).init;\n\treturn Nullable!(float).init(r * r * a / 2.0f);\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1666122444,
      "stdout": "",
      "stderr": "/tmp/tmpkd4mwbow.d(12): Error: function expected before `()`, not `Nullable(nanF, true).get()` of type `float`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkd4mwbow.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360) \n\t{\n\t\treturn Nullable!(float)();\n\t}\n\treturn Nullable!(float)((a / 360.0) * PI * r * r);\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1665517196,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppzo6zjpn.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x45b751]\n??:? void tmppzo6zjpn.__unittest_L16_C1() [0x44519e]\n??:? void tmppzo6zjpn.__modtest() [0x45925c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x4649af]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x45ad7e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45fffd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x46008c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45ff89]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x45ad55]\n??:? runModuleUnitTests [0x464785]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x45c824]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360)\n\t\treturn Nullable!(float)();\n\telse\n\t\treturn Nullable!(float)((r * r * a) / 2);\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1666122445,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpkg397vgn.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x45b741]\n??:? void tmpkg397vgn.__unittest_L15_C1() [0x445192]\n??:? void tmpkg397vgn.__modtest() [0x459250]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x46499f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x45ad6e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45ffed]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x46007c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45ff79]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x45ad45]\n??:? runModuleUnitTests [0x464775]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x45c814]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360)\n\t\treturn null;\n\treturn (r * r * a) / 2;\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1666122444,
      "stdout": "",
      "stderr": "/tmp/tmptlapn7w2.d(11): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!float`\n/tmp/tmptlapn7w2.d(12): Error: cannot implicitly convert expression `r * r * a / 2L` of type `long` to `Nullable!float`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptlapn7w2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif(a > 360)\n\t\treturn Nullable!(float)();\n\treturn Nullable!(float)((a/360.0)*PI*r*r);\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1666122445,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpo108pfdy.d(20): unittest failure\n----------------\n??:? _d_unittestp [0x45b751]\n??:? void tmpo108pfdy.__unittest_L14_C1() [0x44519e]\n??:? void tmpo108pfdy.__modtest() [0x45925c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x4649af]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x45ad7e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45fffd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x46008c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45ff89]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x45ad55]\n??:? runModuleUnitTests [0x464785]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x45c824]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif(a > 360)\n\t\treturn Nullable!(float).init;\n\treturn Nullable!(float).init(r * r * a * PI / 360);\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1666122444,
      "stdout": "",
      "stderr": "/tmp/tmptx1cjct3.d(12): Error: function expected before `()`, not `Nullable(nanF, true).get()` of type `float`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptx1cjct3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360) return null;\n\treturn (a / 360.0) * PI * r * r;\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1666122440,
      "stdout": "",
      "stderr": "/tmp/tmpkf2yjphh.d(10): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!float`\n/tmp/tmpkf2yjphh.d(11): Error: cannot implicitly convert expression `cast(real)(cast(double)a / 360.000) * 3.14159L * cast(real)r * cast(real)r` of type `real` to `Nullable!float`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkf2yjphh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif(a > 360)\n\t\treturn Nullable!(float)();\n\telse\n\t\treturn Nullable!(float)((a/360.0f)*PI*r*r);\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1665517196,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp8p95wddf.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x45b751]\n??:? void tmp8p95wddf.__unittest_L15_C1() [0x44519e]\n??:? void tmp8p95wddf.__modtest() [0x45925c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x4649af]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x45ad7e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45fffd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x46008c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45ff89]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x45ad55]\n??:? runModuleUnitTests [0x464785]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x45c824]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif(a > 360)\n\t\treturn Nullable!(float)();\n\telse\n\t\treturn Nullable!(float)((a / 360.0) * PI * r * r);\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1666122444,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp1knk_sxj.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x45b751]\n??:? void tmp1knk_sxj.__unittest_L15_C1() [0x44519e]\n??:? void tmp1knk_sxj.__modtest() [0x45925c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x4649af]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x45ad7e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45fffd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x46008c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45ff89]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x45ad55]\n??:? runModuleUnitTests [0x464785]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x45c824]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360)\n\t\treturn Nullable!(float)();\n\treturn Nullable!(float)((a / 360.0) * PI * r * r);\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1665517196,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpbqlics2l.d(20): unittest failure\n----------------\n??:? _d_unittestp [0x45b751]\n??:? void tmpbqlics2l.__unittest_L14_C1() [0x44519e]\n??:? void tmpbqlics2l.__modtest() [0x45925c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x4649af]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x45ad7e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45fffd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x46008c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45ff89]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x45ad55]\n??:? runModuleUnitTests [0x464785]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x45c824]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360)\n\t\treturn Nullable!(float).init;\n\telse\n\t\treturn Nullable!(float).init(r * r * a * PI / 360);\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1665517194,
      "stdout": "",
      "stderr": "/tmp/tmppzpx_roq.d(13): Error: function expected before `()`, not `Nullable(nanF, true).get()` of type `float`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppzpx_roq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360)\n\t\treturn Nullable!(float)();\n\treturn Nullable!(float)((a / 360.0) * PI * r * r);\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1665517196,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpbqlics2l.d(20): unittest failure\n----------------\n??:? _d_unittestp [0x45b751]\n??:? void tmpbqlics2l.__unittest_L14_C1() [0x44519e]\n??:? void tmpbqlics2l.__modtest() [0x45925c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x4649af]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x45ad7e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45fffd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x46008c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45ff89]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x45ad55]\n??:? runModuleUnitTests [0x464785]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x45c824]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360)\n\t\treturn null;\n\treturn (a / 360.0) * PI * r * r;\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1665517194,
      "stdout": "",
      "stderr": "/tmp/tmp6c2mw9sy.d(11): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!float`\n/tmp/tmp6c2mw9sy.d(12): Error: cannot implicitly convert expression `cast(real)(cast(double)a / 360.000) * 3.14159L * cast(real)r * cast(real)r` of type `real` to `Nullable!float`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6c2mw9sy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif(a > 360)\n\t\treturn null;\n\treturn (a/360.0)*PI*r*r;\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1666122441,
      "stdout": "",
      "stderr": "/tmp/tmpxwpctqty.d(11): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!float`\n/tmp/tmpxwpctqty.d(12): Error: cannot implicitly convert expression `cast(real)(cast(double)a / 360.000) * 3.14159L * cast(real)r * cast(real)r` of type `real` to `Nullable!float`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxwpctqty.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360) \n\t{\n\t\treturn Nullable!(float).init;\n\t}\n\treturn (a / 360.0f) * PI * r * r;\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1666122444,
      "stdout": "",
      "stderr": "/tmp/tmptkqp3tvd.d(14): Error: cannot implicitly convert expression `cast(real)(cast(float)a / 360.000F) * 3.14159L * cast(real)r * cast(real)r` of type `real` to `Nullable!float`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptkqp3tvd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360)\n\t\treturn Nullable!(float)();\n\telse\n\t\treturn Nullable!(float)((a/360.0f)*PI*r*r);\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1666122446,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp8dnvdjx6.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x45b751]\n??:? void tmp8dnvdjx6.__unittest_L15_C1() [0x44519e]\n??:? void tmp8dnvdjx6.__modtest() [0x45925c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x4649af]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x45ad7e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45fffd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x46008c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45ff89]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x45ad55]\n??:? runModuleUnitTests [0x464785]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x45c824]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360)\n\t\treturn null;\n\treturn (a / 360.0f) * PI * r * r;\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1666122444,
      "stdout": "",
      "stderr": "/tmp/tmpfpysb9i5.d(11): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!float`\n/tmp/tmpfpysb9i5.d(12): Error: cannot implicitly convert expression `cast(real)(cast(float)a / 360.000F) * 3.14159L * cast(real)r * cast(real)r` of type `real` to `Nullable!float`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfpysb9i5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360)\n\t\treturn Nullable!(float)();\n\telse\n\t\treturn Nullable!(float)((a / 360.0) * PI * r * r);\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1666122442,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpfrawkj_4.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x45b751]\n??:? void tmpfrawkj_4.__unittest_L15_C1() [0x44519e]\n??:? void tmpfrawkj_4.__modtest() [0x45925c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x4649af]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x45ad7e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45fffd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x46008c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45ff89]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x45ad55]\n??:? runModuleUnitTests [0x464785]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x45c824]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360) \n\t{\n\t\treturn Nullable!(float)();\n\t}\n\treturn Nullable!(float)((r * r * a) / 2);\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1666122445,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp94wzu2ih.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x45b741]\n??:? void tmp94wzu2ih.__unittest_L16_C1() [0x445192]\n??:? void tmp94wzu2ih.__modtest() [0x459250]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x46499f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x45ad6e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45ffed]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x46007c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45ff79]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x45ad45]\n??:? runModuleUnitTests [0x464775]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x45c814]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360)\n\t\treturn null;\n\treturn (a / 360.0) * PI * r * r;\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1665517194,
      "stdout": "",
      "stderr": "/tmp/tmp6c2mw9sy.d(11): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!float`\n/tmp/tmp6c2mw9sy.d(12): Error: cannot implicitly convert expression `cast(real)(cast(double)a / 360.000) * 3.14159L * cast(real)r * cast(real)r` of type `real` to `Nullable!float`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6c2mw9sy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360) return null;\n\treturn (a / 360.0) * PI * r * r;\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1666122440,
      "stdout": "",
      "stderr": "/tmp/tmpkf2yjphh.d(10): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!float`\n/tmp/tmpkf2yjphh.d(11): Error: cannot implicitly convert expression `cast(real)(cast(double)a / 360.000) * 3.14159L * cast(real)r * cast(real)r` of type `real` to `Nullable!float`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkf2yjphh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360)\n\t\treturn null;\n\t\n\treturn (a / 360.0) * PI * r * r;\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1666122444,
      "stdout": "",
      "stderr": "/tmp/tmpuhlbltmr.d(11): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!float`\n/tmp/tmpuhlbltmr.d(13): Error: cannot implicitly convert expression `cast(real)(cast(double)a / 360.000) * 3.14159L * cast(real)r * cast(real)r` of type `real` to `Nullable!float`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuhlbltmr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360)\n\t\treturn null;\n\treturn (a / 360.0) * PI * r * r;\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1665517194,
      "stdout": "",
      "stderr": "/tmp/tmp6c2mw9sy.d(11): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!float`\n/tmp/tmp6c2mw9sy.d(12): Error: cannot implicitly convert expression `cast(real)(cast(double)a / 360.000) * 3.14159L * cast(real)r * cast(real)r` of type `real` to `Nullable!float`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6c2mw9sy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360)\n\t\treturn Nullable!(float)();\n\telse\n\t\treturn Nullable!(float)((a/360.0)*PI*r*r);\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1666122443,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpis4da1mq.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x45b751]\n??:? void tmpis4da1mq.__unittest_L15_C1() [0x44519e]\n??:? void tmpis4da1mq.__modtest() [0x45925c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x4649af]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x45ad7e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45fffd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x46008c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45ff89]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x45ad55]\n??:? runModuleUnitTests [0x464785]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x45c824]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360)\n\t\treturn Nullable!(float)();\n\treturn Nullable!(float)((a / 360.0f) * PI * r * r);\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1666122446,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp7jqrdrvm.d(20): unittest failure\n----------------\n??:? _d_unittestp [0x45b751]\n??:? void tmp7jqrdrvm.__unittest_L14_C1() [0x44519e]\n??:? void tmp7jqrdrvm.__modtest() [0x45925c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x4649af]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x45ad7e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45fffd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x46008c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45ff89]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x45ad55]\n??:? runModuleUnitTests [0x464785]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x45c824]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360) \n\t{\n\t\treturn Nullable!(float).init;\n\t}\n\treturn (a / 360.0) * PI * r * r;\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1666122440,
      "stdout": "",
      "stderr": "/tmp/tmpi49_0uyc.d(14): Error: cannot implicitly convert expression `cast(real)(cast(double)a / 360.000) * 3.14159L * cast(real)r * cast(real)r` of type `real` to `Nullable!float`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi49_0uyc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360) \n\t{\n\t\treturn Nullable!(float)();\n\t}\n\treturn Nullable!(float)((a / 360.0f) * PI * r * r);\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1666122443,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp0t_dlnxy.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x45b751]\n??:? void tmp0t_dlnxy.__unittest_L16_C1() [0x44519e]\n??:? void tmp0t_dlnxy.__modtest() [0x45925c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x4649af]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x45ad7e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45fffd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x46008c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45ff89]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x45ad55]\n??:? runModuleUnitTests [0x464785]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x45c824]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360)\n\t\treturn null;\n\treturn (a / 360.0) * PI * r * r;\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1665517194,
      "stdout": "",
      "stderr": "/tmp/tmp6c2mw9sy.d(11): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!float`\n/tmp/tmp6c2mw9sy.d(12): Error: cannot implicitly convert expression `cast(real)(cast(double)a / 360.000) * 3.14159L * cast(real)r * cast(real)r` of type `real` to `Nullable!float`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6c2mw9sy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360) \n\t{\n\t\treturn Nullable!(float)();\n\t}\n\treturn Nullable!(float)((a / 360.0) * PI * r * r);\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1665517196,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppzo6zjpn.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x45b751]\n??:? void tmppzo6zjpn.__unittest_L16_C1() [0x44519e]\n??:? void tmppzo6zjpn.__modtest() [0x45925c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x4649af]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x45ad7e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45fffd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x46008c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45ff89]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x45ad55]\n??:? runModuleUnitTests [0x464785]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x45c824]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360)\n\t\treturn Nullable!(float)();\n\telse\n\t\treturn Nullable!(float)(a * r * r / 2);\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1666122444,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp2vwwzn5j.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x45b741]\n??:? void tmp2vwwzn5j.__unittest_L15_C1() [0x445192]\n??:? void tmp2vwwzn5j.__modtest() [0x459250]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x46499f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x45ad6e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45ffed]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x46007c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45ff79]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x45ad45]\n??:? runModuleUnitTests [0x464775]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x45c814]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360)\n\t\treturn Nullable!(float)();\n\treturn Nullable!(float)((a / 360.0) * PI * r * r);\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1665517196,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpbqlics2l.d(20): unittest failure\n----------------\n??:? _d_unittestp [0x45b751]\n??:? void tmpbqlics2l.__unittest_L14_C1() [0x44519e]\n??:? void tmpbqlics2l.__modtest() [0x45925c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x4649af]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x45ad7e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45fffd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x46008c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45ff89]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x45ad55]\n??:? runModuleUnitTests [0x464785]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x45c824]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360)\n\t\treturn Nullable!(float)();\n\treturn Nullable!(float)((a / 360.0f) * PI * r * r);\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1666122446,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp7jqrdrvm.d(20): unittest failure\n----------------\n??:? _d_unittestp [0x45b751]\n??:? void tmp7jqrdrvm.__unittest_L14_C1() [0x44519e]\n??:? void tmp7jqrdrvm.__modtest() [0x45925c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x4649af]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x45ad7e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45fffd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x46008c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45ff89]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x45ad55]\n??:? runModuleUnitTests [0x464785]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x45c824]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n\t\n*/\nNullable!(float) sector_area(long r, long a) \n{\n\tif (a > 360)\n\t\treturn Nullable!(float)();\n\treturn Nullable!(float)((a / 360.0f) * PI * r * r);\n}\nunittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}",
      "timestamp": 1666122446,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp7jqrdrvm.d(20): unittest failure\n----------------\n??:? _d_unittestp [0x45b751]\n??:? void tmp7jqrdrvm.__unittest_L14_C1() [0x44519e]\n??:? void tmp7jqrdrvm.__modtest() [0x45925c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x4649af]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x45ad7e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45fffd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x46008c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45ff89]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x45ad55]\n??:? runModuleUnitTests [0x464785]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x45c824]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}