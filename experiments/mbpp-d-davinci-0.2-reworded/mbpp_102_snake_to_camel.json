{
  "name": "mbpp_102_snake_to_camel",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert a snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_102_snake_to_camel.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tstring result;\n\tforeach(i, c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(i, c; word) \n\t{\n\t\tif (c == '_') \n\t\t{\n\t\t\tresult ~= word[i + 1].toUpper;\n\t\t\ti++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tint i = 0;\n\tstring result = \"\";\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(i == 0)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= toUpper(c);\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\ti++;\n\t\t\tresult ~= toUpper(word[i]);\n\t\t}\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tint i = 0;\n\tforeach(c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(i == 0) \n\t\t{\n\t\t\tresult ~= c;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tresult ~= toUpper(c);\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\ti++;\n\t\t\tresult ~= toUpper(word[i]);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tbool is_upper = false;\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tis_upper = true;\n\t\t\tcontinue;\n\t\t}\n\t\tif(is_upper)\n\t\t{\n\t\t\tresult ~= toUpper(c);\n\t\t\tis_upper = false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tbool first = true;\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tfirst = true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(first)\n\t\t\t{\n\t\t\t\tresult ~= toUpper(c);\n\t\t\t\tfirst = false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult ~= toLower(c);\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring camel = \"\";\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tcamel ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tcamel ~= c;\n\t\t}\n\t}\n\treturn camel;\n}",
    "{\n\tstring result = \"\";\n\tbool is_upper = false;\n\tforeach(c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tis_upper = true;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif(is_upper) \n\t\t\t{\n\t\t\t\tresult ~= toUpper(c);\n\t\t\t\tis_upper = false;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tresult ~= c;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(w; word.split(\"_\"))\n\t{\n\t\tresult ~= w[0].toUpper ~ w[1..$];\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(immutable c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[$-1]);\n\t\t\tword = word[0..$-2];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t\tcontinue;\n\t\tif(i > 0 && word[i-1] == '_')\n\t\t\tresult ~= toUpper(c);\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tbool is_upper = false;\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tis_upper = true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(is_upper)\n\t\t\t{\n\t\t\t\tresult ~= toUpper(c);\n\t\t\t\tis_upper = false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult ~= c;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tint i = 0;\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(i == 0)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= toUpper(c);\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach (i, c; word)\n\t{\n\t\tif (c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tbool is_upper = false;\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tis_upper = true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(is_upper)\n\t\t\t{\n\t\t\t\tresult ~= toUpper(c);\n\t\t\t\tis_upper = false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult ~= c;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(i, c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring camel = \"\";\n\tint i = 0;\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\ti++;\n\t\t\tcamel ~= toUpper(word[i]);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tcamel ~= c;\n\t\t}\n\t\ti++;\n\t}\n\treturn camel;\n}",
    "{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(i, c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(i, c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tint i = 0;\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(i == 0)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= toUpper(c);\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring camel_word = \"\";\n\tint i = 0;\n\tforeach(c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(i == 0) \n\t\t{\n\t\t\tcamel_word ~= c;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tcamel_word ~= toUpper(c);\n\t\t}\n\t}\n\treturn camel_word;\n}",
    "{\n\tstring result = \"\";\n\tbool next_upper = false;\n\tforeach(c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tnext_upper = true;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif(next_upper) \n\t\t\t{\n\t\t\t\tresult ~= toUpper(c);\n\t\t\t\tnext_upper = false;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tresult ~= c;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tint i = 0;\n\twhile (i < word.length)\n\t{\n\t\tif (word[i] == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti += 2;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= word[i];\n\t\t\ti++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tbool is_upper = false;\n\tforeach(ch; word) \n\t{\n\t\tif(ch == '_') \n\t\t{\n\t\t\tis_upper = true;\n\t\t\tcontinue;\n\t\t}\n\t\tif(is_upper) \n\t\t{\n\t\t\tresult ~= toUpper(ch);\n\t\t\tis_upper = false;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult ~= ch;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tint len = word.length;\n\tstring result = \"\";\n\tbool is_upper = false;\n\tfor (int i = 0; i < len; i++) \n\t{\n\t\tif (word[i] == '_') \n\t\t{\n\t\t\tis_upper = true;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tif (is_upper) \n\t\t\t{\n\t\t\t\tresult ~= toUpper(word[i]);\n\t\t\t\tis_upper = false;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tresult ~= word[i];\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tbool upper = false;\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tupper = true;\n\t\t\tcontinue;\n\t\t}\n\t\tif(upper)\n\t\t{\n\t\t\tresult ~= toUpper(c);\n\t\t\tupper = false;\n\t\t}\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(i, c; word) \n\t{\n\t\tif (c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\t\n\tforeach(immutable c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[$-1]);\n\t\t\tresult ~= word[$];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tint i = 0;\n\twhile (i < word.length) \n\t{\n\t\tif (word[i] == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti += 2;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult ~= word[i];\n\t\t\ti++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(i, c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(i,c;word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t\tcontinue;\n\t\tif(i > 0 && word[i - 1] == '_')\n\t\t\tresult ~= toUpper(c);\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(i, c; word)\n\t{\n\t\tif (c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\t\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tbool upper = false;\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tupper = true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(upper)\n\t\t\t{\n\t\t\t\tresult ~= toUpper(c);\n\t\t\t\tupper = false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult ~= c;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(i, c; word) \n\t{\n\t\tif (c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tint i = 0;\n\twhile(i < word.length)\n\t{\n\t\tif(word[i] == '_')\n\t\t{\n\t\t\ti++;\n\t\t\tresult ~= toUpper(word[i]);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= word[i];\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tint i = 0;\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(i == 0)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= toUpper(c);\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tbool next_upper = false;\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tnext_upper = true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(next_upper)\n\t\t\t{\n\t\t\t\tresult ~= toUpper(c);\n\t\t\t\tnext_upper = false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult ~= c;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(i, c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tbool is_first = true;\n\tforeach(c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tis_first = true;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif(is_first) \n\t\t\t{\n\t\t\t\tresult ~= toUpper(c);\n\t\t\t\tis_first = false;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tresult ~= c;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tbool is_upper = false;\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tis_upper = true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(is_upper)\n\t\t\t{\n\t\t\t\tresult ~= toUpper(c);\n\t\t\t\tis_upper = false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult ~= c;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tbool is_upper = false;\n\tforeach(c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tis_upper = true;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif(is_upper) \n\t\t\t{\n\t\t\t\tresult ~= toUpper(c);\n\t\t\t\tis_upper = false;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tresult ~= c;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tint i = 0;\n\twhile(i < word.length)\n\t{\n\t\tif(word[i] == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti += 2;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= word[i];\n\t\t\ti++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tbool is_upper = false;\n\tforeach(ch; word) \n\t{\n\t\tif (ch == '_') \n\t\t{\n\t\t\tis_upper = true;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (is_upper) \n\t\t\t{\n\t\t\t\tresult ~= ch.toUpper;\n\t\t\t\tis_upper = false;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tresult ~= ch;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(i, c; word)\n\t{\n\t\tif (c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tint i = 0;\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(i == 0)\n\t\t\tresult ~= c;\n\t\telse\n\t\t\tresult ~= toUpper(c);\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(i, c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tint i = 0;\n\twhile (i < word.length) \n\t{\n\t\tif (word[i] == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti += 2;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult ~= word[i];\n\t\t\ti++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tbool is_first = true;\n\tforeach(ch; word) \n\t{\n\t\tif(ch == '_') \n\t\t{\n\t\t\tis_first = true;\n\t\t\tcontinue;\n\t\t}\n\t\tif(is_first) \n\t\t{\n\t\t\tresult ~= toUpper(ch);\n\t\t\tis_first = false;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult ~= ch;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t\tcontinue;\n\t\telse if(i == 0)\n\t\t\tresult ~= toLower(c);\n\t\telse if(word[i-1] == '_')\n\t\t\tresult ~= toUpper(c);\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tint i = 0;\n\tstring result = \"\";\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\ti++;\n\t\t\tresult ~= toUpper(word[i]);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(i, c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(i, c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach (i, c; word) \n\t{\n\t\tif (c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(immutable c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[$-1]);\n\t\t\tcontinue;\n\t\t}\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(i, c; word)\n\t{\n\t\tif (c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tbool is_upper = false;\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tis_upper = true;\n\t\t\tcontinue;\n\t\t}\n\t\tif(is_upper)\n\t\t{\n\t\t\tresult ~= toUpper(c);\n\t\t\tis_upper = false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\t\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tstring result;\n\tbool next_upper = false;\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tnext_upper = true;\n\t\t\tcontinue;\n\t\t}\n\t\tif(next_upper)\n\t\t{\n\t\t\tresult ~= toUpper(c);\n\t\t\tnext_upper = false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tint i = 0;\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(i == 0)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= toUpper(c);\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(i, c; word) \n\t{\n\t\tif (c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= word[i+1].toUpper;\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(i, c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(i, c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tint i = 0;\n\twhile(i < word.length)\n\t{\n\t\tif(word[i] == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti += 2;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= word[i];\n\t\t\ti++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tbool is_upper = false;\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tis_upper = true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(is_upper)\n\t\t\t{\n\t\t\t\tresult ~= toUpper(c);\n\t\t\t\tis_upper = false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult ~= c;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring camel = \"\";\n\tforeach(i, c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tcamel ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tcamel ~= c;\n\t\t}\n\t}\n\treturn camel;\n}",
    "{\n\tstring result = \"\";\n\tforeach(i, c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(i, ch; word) \n\t{\n\t\tif(ch == '_') \n\t\t{\n\t\t\tresult ~= word[i+1].toUpper();\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult ~= ch;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif (c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(i, c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(ch; word)\n\t{\n\t\tif(ch == '_')\n\t\t{\n\t\t\tresult ~= \"\";\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= ch;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(immutable char c; word) \n\t{\n\t\tif (c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[$]);\n\t\t} \n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tbool is_first = true;\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tis_first = true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(is_first)\n\t\t\t{\n\t\t\t\tresult ~= toUpper(c);\n\t\t\t\tis_first = false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult ~= c;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(immutable c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[$ - 1]);\n\t\t\tcontinue;\n\t\t}\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tbool is_first = true;\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tis_first = true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(is_first)\n\t\t\t{\n\t\t\t\tresult ~= toUpper(c);\n\t\t\t\tis_first = false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult ~= c;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(i, c; word) \n\t{\n\t\tif (c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tint i = 0;\n\tstring result = \"\";\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(i == 0)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= toUpper(c);\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\t\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[$++]);\n\t\t} \n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(i, c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t\tcontinue;\n\t\telse if(i == 0)\n\t\t\tresult ~= toLower(c);\n\t\telse if(word[i-1] == '_')\n\t\t\tresult ~= toUpper(c);\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tint i = 0;\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\ti++;\n\t\t\tresult ~= toUpper(word[i]);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(i, ch; word)\n\t{\n\t\tif(ch == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= ch;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tint i = 0;\n\tint len = word.length;\n\twhile(i < len)\n\t{\n\t\tif(word[i] == '_')\n\t\t{\n\t\t\ti++;\n\t\t\tresult ~= toUpper(word[i]);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= word[i];\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t\tcontinue;\n\t\tif(i > 0 && word[i-1] == '_')\n\t\t\tresult ~= toUpper(c);\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tint i = 0;\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\ti++;\n\t\t\tresult ~= toupper(word[i]);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}",
    "{\n\tstring camel_word = \"\";\n\tbool is_upper = false;\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tis_upper = true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(is_upper)\n\t\t\t{\n\t\t\t\tcamel_word ~= toUpper(c);\n\t\t\t\tis_upper = false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tcamel_word ~= c;\n\t\t\t}\n\t\t}\n\t}\n\treturn camel_word;\n}",
    "{\n\tstring result = \"\";\n\tforeach(i, c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tbool first = true;\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tfirst = true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(first)\n\t\t\t{\n\t\t\t\tresult ~= toupper(c);\n\t\t\t\tfirst = false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult ~= c;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(i, c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tbool is_first = true;\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tis_first = true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(is_first)\n\t\t\t{\n\t\t\t\tresult ~= toUpper(c);\n\t\t\t\tis_first = false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult ~= c;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\t\n\tforeach(immutable c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[$+1]);\n\t\t\tword = word[$+1..$];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(i, c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tbool is_upper = false;\n\tforeach(c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tis_upper = true;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif(is_upper) \n\t\t\t{\n\t\t\t\tresult ~= toUpper(c);\n\t\t\t\tis_upper = false;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tresult ~= c;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(i, c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\t\n\tforeach(c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[$-1]);\n\t\t\tword = word[0..$-2];\n\t\t}\n\t}\n\t\n\treturn result ~ word;\n}",
    "{\n\tstring result;\n\tforeach(immutable c; word)\n\t{\n\t\tif(c == '_')\n\t\t\tcontinue;\n\t\telse if(c == '_' && word[$-1] == '_')\n\t\t\tresult ~= '_';\n\t\telse if(c == '_' && word[$-1] != '_')\n\t\t\tresult ~= to!string(toUpper(word[$-1]));\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tbool is_first_letter = true;\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tis_first_letter = true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(is_first_letter)\n\t\t\t{\n\t\t\t\tresult ~= toUpper(c);\n\t\t\t\tis_first_letter = false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult ~= c;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach (i, c; word) \n\t{\n\t\tif (c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tint i = 0;\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(i == 0)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= toUpper(c);\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\t\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\t\n\tforeach(immutable char c; word)\n\t{\n\t\tif(c == '_')\n\t\t\tcontinue;\n\t\telse if(c == '_' && word[$-1] == '_')\n\t\t\tresult ~= '_';\n\t\telse if(c == '_' && word[$-1] != '_')\n\t\t\tresult ~= toupper(word[$-1]);\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(i, c; word) \n\t{\n\t\tif (c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t\tcontinue;\n\t\tif(i > 0 && word[i-1] == '_')\n\t\t\tresult ~= toUpper(c);\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\t//return word.replace(\"_\", \"\").title();\n\tstring result = \"\";\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t\tcontinue;\n\t\telse if(i == 0)\n\t\t\tresult ~= c.toLower();\n\t\telse if(word[i-1] == '_')\n\t\t\tresult ~= c.toUpper();\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tbool is_upper = false;\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tis_upper = true;\n\t\t\tcontinue;\n\t\t}\n\t\tif(is_upper)\n\t\t{\n\t\t\tresult ~= toUpper(c);\n\t\t\tis_upper = false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tbool upper = false;\n\tforeach(c; word) {\n\t\tif(c == '_') {\n\t\t\tupper = true;\n\t\t} else {\n\t\t\tif(upper) {\n\t\t\t\tresult ~= toUpper(c);\n\t\t\t\tupper = false;\n\t\t\t} else {\n\t\t\t\tresult ~= c;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tint len = word.length;\n\tstring result = \"\";\n\tint i = 0;\n\twhile (i < len)\n\t{\n\t\tif (word[i] == '_')\n\t\t{\n\t\t\ti++;\n\t\t\tresult ~= toUpper(word[i]);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= word[i];\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t\tcontinue;\n\t\telse if(i != 0 && word[i-1] == '_')\n\t\t\tresult ~= toUpper(c);\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(i, c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(immutable c; word)\n\t{\n\t\tif(c == '_')\n\t\t\tcontinue;\n\t\telse if(c == '_' && word[$-1] == '_')\n\t\t\tresult ~= '_';\n\t\telse if(word[$-1] == '_')\n\t\t\tresult ~= toupper(c);\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(i, c; word) \n\t{\n\t\tif (c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tbool upper = false;\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tupper = true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(upper)\n\t\t\t{\n\t\t\t\tresult ~= toUpper(c);\n\t\t\t\tupper = false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult ~= c;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t\tcontinue;\n\t\telse if(i == 0)\n\t\t\tresult ~= toLower(c);\n\t\telse if(word[i-1] == '_')\n\t\t\tresult ~= toUpper(c);\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(i, c; word)\n\t{\n\t\tif (c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= to!string(word[i + 1]).toUpper();\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(i, c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(i, c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tresult ~= to!string(word[i+1]).toUpper;\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\t++i;\n\t\t\tresult ~= toUpper(word[i]);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(i, ch; word)\n\t{\n\t\tif(ch == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t\tresult ~= ch;\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(i, c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tresult ~= word[i + 1].toUpper;\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(i, ch; word)\n\t{\n\t\tif(ch == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= ch;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\t\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(i, c; word) \n\t{\n\t\tif (c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tbool is_upper = false;\n\tforeach(ch; word)\n\t{\n\t\tif(ch == '_')\n\t\t{\n\t\t\tis_upper = true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(is_upper)\n\t\t\t{\n\t\t\t\tresult ~= toUpper(ch);\n\t\t\t\tis_upper = false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult ~= ch;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t\tcontinue;\n\t\telse if(i == 0)\n\t\t\tresult ~= toLower(c);\n\t\telse if(word[i-1] == '_')\n\t\t\tresult ~= toUpper(c);\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tbool is_first = true;\n\tforeach(c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tis_first = true;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif(is_first) \n\t\t\t{\n\t\t\t\tresult ~= toUpper(c);\n\t\t\t\tis_first = false;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tresult ~= c;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tbool is_upper = false;\n\tforeach(c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tis_upper = true;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tif(is_upper) \n\t\t\t{\n\t\t\t\tresult ~= toUpper(c);\n\t\t\t\tis_upper = false;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tresult ~= c;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tbool is_first = true;\n\t\n\tforeach(c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tis_first = true;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tif(is_first) \n\t\t\t{\n\t\t\t\tresult ~= toUpper(c);\n\t\t\t\tis_first = false;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tresult ~= c;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\ti++;\n\t\t\tresult ~= toUpper(word[i]);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(i, c; word) \n\t{\n\t\tif (c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(i, c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tint i = 0;\n\twhile(i < word.length)\n\t{\n\t\tif(word[i] == '_')\n\t\t{\n\t\t\ti++;\n\t\t\tresult ~= toUpper(word[i]);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= word[i];\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tbool is_first = true;\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tis_first = true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(is_first)\n\t\t\t{\n\t\t\t\tresult ~= toUpper(c);\n\t\t\t\tis_first = false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult ~= c;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif (c == '_')\n\t\t{\n\t\t\ti++;\n\t\t\tresult ~= toUpper(word[i]);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tbool upper = false;\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tupper = true;\n\t\t\tcontinue;\n\t\t}\n\t\tif(upper)\n\t\t{\n\t\t\tresult ~= toUpper(c);\n\t\t\tupper = false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tbool is_upper = false;\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tis_upper = true;\n\t\t\tcontinue;\n\t\t}\n\t\tif(is_upper)\n\t\t{\n\t\t\tresult ~= toUpper(c);\n\t\t\tis_upper = false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tint i = 0;\n\twhile(i < word.length)\n\t{\n\t\tif(word[i] == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti += 2;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= word[i];\n\t\t\ti++;\n\t\t}\n\t}\n\treturn result;\n}"
  ]
}