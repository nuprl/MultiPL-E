{
  "name": "mbpp_608_bell_Number",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find nth bell number.\n\t\n*/\nlong bell_Number(long n) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_608_bell_Number.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} ",
    "{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} ",
    "{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} ",
    "{ \n\tlong bell[n + 1][n + 1]; \n\tbell[0][0] = 1; \n\tfor (long i = 1; i <= n; i++) \n\t{ \n\t\t// Explicitly fill for j = 0 \n\t\tbell[i][0] = bell[i - 1][i - 1]; \n\t\t// Fill for remaining values of j \n\t\tfor (long j = 1; j <= i; j++) \n\t\t\tbell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]; \n\t} \n\treturn bell[n][0]; \n} ",
    "{\n\tlong[long][long] bell = new long[n + 1][n + 1];\n\tbell[0][0] = 1;\n\tfor (long i = 1; i <= n; i++) \n\t{\n\t\t// Explicitly fill for j = 0\n\t\tbell[i][0] = bell[i - 1][i - 1];\n\t\t// Fill for remaining values of j\n\t\tfor (long j = 1; j <= i; j++)\n\t\t\tbell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n\t}\n\treturn bell[n][0];\n}",
    "{ \n\tlong bell[n+1][n+1]; \n\tbell[0][0] = 1; \n\tfor (long i=1; i<=n; i++) \n\t{ \n\t\t// Explicitly fill for j = 0 \n\t\tbell[i][0] = bell[i-1][i-1]; ",
    "{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} ",
    "{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} ",
    "{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} ",
    "{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} ",
    "{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} ",
    "{\n\tlong[long] bell = new long[long][n + 1];\n\tbell[0][0] = 1;\n\tfor (long i = 1; i <= n; i++) \n\t{\n\t\tbell[i][0] = bell[i - 1][i - 1];\n\t\tfor (long j = 1; j <= i; j++) \n\t\t{\n\t\t\tbell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n\t\t}\n\t}\n\treturn bell[n][0];\n}",
    "{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} ",
    "{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} ",
    "{ \n\tlong bell[n + 1][n + 1]; \n\tbell[0][0] = 1; \n\tfor (long i = 1; i <= n; i++) \n\t{ \n\t\t// Explicitly fill for j = 0 \n\t\tbell[i][0] = bell[i - 1][i - 1]; ",
    "{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} ",
    "{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} ",
    "{ \n\tlong bell[n + 1][n + 1]; \n\tbell[0][0] = 1; \n\tfor (long i = 1; i <= n; i++) \n\t{ \n\t\t// Explicitly fill for j = 0 \n\t\tbell[i][0] = bell[i - 1][i - 1]; ",
    "{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} ",
    "{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} ",
    "{ \n\tlong bell[n+1][n+1]; \n\tbell[0][0] = 1; \n\tfor (long i=1; i<=n; i++) \n\t{ \n\t\t// Explicitly fill for j = 0 \n\t\tbell[i][0] = bell[i-1][i-1]; \n\t\t// Fill for remaining values of j \n\t\tfor (long j=1; j<=i; j++) \n\t\t\tbell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n\t} \n\treturn bell[n][0]; \n} ",
    "{ \n\tlong bell[n+1][n+1]; \n\tbell[0][0] = 1; \n\tfor (long i=1; i<=n; i++) \n\t{ \n\t\t// Explicitly fill for j = 0 \n\t\tbell[i][0] = bell[i-1][i-1]; \n\t\t// Fill for remaining values of j \n\t\tfor (long j=1; j<=i; j++) \n\t\t\tbell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n\t} \n\treturn bell[n][0]; \n} ",
    "{ \n\tlong bell[n+1][n+1]; \n\tbell[0][0] = 1; \n\tfor (long i=1; i<=n; i++) \n\t{ \n\t\t// Explicitly fill for j = 0 \n\t\tbell[i][0] = bell[i-1][i-1]; ",
    "{ \n\tlong[][] bell = new long[n+1][n+1]; \n\tbell[0][0] = 1; \n\tfor (long i = 1; i <= n; i++) \n\t{ \n\t\t// Explicitly fill for j = 0 \n\t\tbell[i][0] = bell[i-1][i-1]; \n\t\t// Fill for remaining values of j \n\t\tfor (long j = 1; j <= i; j++) \n\t\t\tbell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n\t} \n\treturn bell[n][0]; \n} ",
    "{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} ",
    "{ \n    long[long] bell = new long[long]; \n    bell[0] = 1; \n    for (long i = 1; i <= n; i++) \n    { \n        bell[i] = 0; \n        for (long j = 0; j < i; j++) \n            bell[i] += bell[j] * bell[i-j-1]; \n    } \n    return bell[n]; \n} ",
    "{ \n\tlong bell[n+1][n+1]; \n\tbell[0][0] = 1; \n\tfor (long i=1; i<=n; i++) \n\t{ \n\t\t// Explicitly fill for j = 0 \n\t\tbell[i][0] = bell[i-1][i-1]; \n\t\t// Fill for remaining values of j \n\t\tfor (long j=1; j<=i; j++) \n\t\t\tbell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n\t} \n\treturn bell[n][0]; \n} ",
    "{ \n\tlong bell[n+1][n+1]; \n\tbell[0][0] = 1; \n\tfor (long i=1; i<=n; i++) \n\t{ \n\t\t// Explicitly fill for j = 0 \n\t\tbell[i][0] = bell[i-1][i-1]; \n\t\t// Fill for remaining values of j \n\t\tfor (long j=1; j<=i; j++) \n\t\t\tbell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n\t} \n\treturn bell[n][0]; \n} ",
    "{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} ",
    "{ \n\tlong[long] bell = new long[long]; \n\tbell[0] = 1; \n\tfor (long i = 1; i <= n; i++) \n\t{ \n\t\tbell[i] = 0; \n\t\tfor (long j = 0; j < i; j++) \n\t\t\tbell[i] += bell[j] * bell[i-j-1]; \n\t} \n\treturn bell[n]; \n} ",
    "{ \n\tlong bell[n+1][n+1]; \n\tbell[0][0] = 1; \n\tfor (long i=1; i<=n; i++) \n\t{ \n\t\t// Explicitly fill for j = 0 \n\t\tbell[i][0] = bell[i-1][i-1]; \n\t\t// Fill for remaining values of j \n\t\tfor (long j=1; j<=i; j++) \n\t\t\tbell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n\t} \n\treturn bell[n][0]; \n} ",
    "{ \n    long bell[n + 1][n + 1]; \n    bell[0][0] = 1; \n    for (long i = 1; i <= n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i - 1][i - 1]; \n  \n        // Fill for remaining values of j \n        for (long j = 1; j <= i; j++) \n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]; \n    } \n    return bell[n][0]; \n} \n  \n// Driver code ",
    "{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} ",
    "{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} ",
    "{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} ",
    "{ \n    long bell[n + 1][n + 1]; \n    bell[0][0] = 1; \n    for (long i = 1; i <= n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i - 1][i - 1]; \n  \n        // Fill for remaining values of j \n        for (long j = 1; j <= i; j++) \n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]; \n    } \n    return bell[n][0]; \n} ",
    "{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} ",
    "{ \n\tlong bell[n + 1][n + 1]; \n\tbell[0][0] = 1; \n\tfor (long i = 1; i <= n; i++) { \n\t\t// Explicitly fill for j = 0 \n\t\tbell[i][0] = bell[i - 1][i - 1]; ",
    "{ \n\tlong bell[n+1][n+1]; \n\tbell[0][0] = 1; \n\tfor (long i=1; i<=n; i++) \n\t{ \n\t\t// Explicitly fill for j = 0 \n\t\tbell[i][0] = bell[i-1][i-1]; ",
    "{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} ",
    "{ \n    long bell[n + 1][n + 1]; \n    bell[0][0] = 1; \n    for (long i = 1; i <= n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i - 1][i - 1]; \n  \n        // Fill for remaining values of j \n        for (long j = 1; j <= i; j++) \n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]; \n    } \n    return bell[n][0]; \n} ",
    "{ \n\tlong[long] bell = new long[long]; \n\tbell[0] = 1; \n\tfor (long i = 1; i <= n; i++) \n\t{ \n\t\tbell[i] = 0; \n\t\tfor (long j = 0; j < i; j++) \n\t\t\tbell[i] += bell[j] * bell[i-j-1]; \n\t} \n\treturn bell[n]; \n} ",
    "{ \n\tlong bell[n+1][n+1]; \n\tbell[0][0] = 1; \n\tfor (long i=1; i<=n; i++) \n\t{ \n\t\t// Explicitly fill for j = 0 \n\t\tbell[i][0] = bell[i-1][i-1]; \n\t\t// Fill for remaining values of j \n\t\tfor (long j=1; j<=i; j++) \n\t\t\tbell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n\t} \n\treturn bell[n][0]; \n} ",
    "{ \n    long bell[n + 1][n + 1]; \n    bell[0][0] = 1; \n    for (long i = 1; i <= n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i - 1][i - 1]; \n  \n        // Fill for remaining values of j \n        for (long j = 1; j <= i; j++) \n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]; \n    } \n    return bell[n][0]; \n} ",
    "{ \n    long bell[n + 1][n + 1]; \n    bell[0][0] = 1; \n    for (long i = 1; i <= n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i - 1][i - 1]; \n  \n        // Fill for remaining values of j \n        for (long j = 1; j <= i; j++) \n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]; \n    } \n    return bell[n][0]; \n} ",
    "{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} ",
    "{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} ",
    "{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} ",
    "{ \n\tlong bell[n + 1][n + 1]; \n\tbell[0][0] = 1; \n\tfor (long i = 1; i <= n; i++) \n\t{ \n\t\t// Explicitly fill for j = 0 \n\t\tbell[i][0] = bell[i - 1][i - 1]; \n\t\t// Fill for remaining values of j \n\t\tfor (long j = 1; j <= i; j++) \n\t\t\tbell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]; \n\t} \n\treturn bell[n][0]; \n} ",
    "{\n\tlong[long][long] bell = new long[n+1][n+1];\n\tbell[0][0] = 1;\n\tfor (long i = 1; i <= n; i++) \n\t{\n\t\tbell[i][0] = bell[i-1][i-1];\n\t\tfor (long j = 1; j <= i; j++)\n\t\t\tbell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n\t}\n\treturn bell[n][0];\n}",
    "{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} ",
    "{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} ",
    "{\n\tlong[][] bell = new long[n+1][n+1];\n\tbell[0][0] = 1;\n\tfor (long i = 1; i <= n; i++) \n\t{\n\t\tbell[i][0] = bell[i-1][i-1];\n\t\tfor (long j = 1; j <= i; j++)\n\t\t\tbell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n\t}\n\treturn bell[n][0];\n}",
    "{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} ",
    "{\n\tlong[long] bell = new long[long];\n\tbell[0] = 1;\n\tfor (long i = 1; i <= n; i++) \n\t{\n\t\tbell[i] = 0;\n\t\tfor (long j = 0; j < i; j++) \n\t\t{\n\t\t\tbell[i] += bell[j] * bell[i - j - 1];\n\t\t}\n\t}\n\treturn bell[n];\n}",
    "{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} ",
    "{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} ",
    "{ \n\tlong bell[n + 1][n + 1]; \n\tbell[0][0] = 1; \n\tfor (long i = 1; i <= n; i++) \n\t{ \n\t\t// Explicitly fill for j = 0 \n\t\tbell[i][0] = bell[i - 1][i - 1]; \n\t\t// Fill for remaining values of j \n\t\tfor (long j = 1; j <= i; j++) \n\t\t\tbell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]; \n\t} \n\treturn bell[n][0]; \n} ",
    "{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} ",
    "{ \n\tlong bell[n+1][n+1]; \n\tbell[0][0] = 1; \n\tfor (long i=1; i<=n; i++) \n\t{ \n\t\t// Explicitly fill for j = 0 \n\t\tbell[i][0] = bell[i-1][i-1]; \n\t\t// Fill for remaining values of j \n\t\tfor (long j=1; j<=i; j++) \n\t\t\tbell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n\t} \n\treturn bell[n][0]; \n} ",
    "{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} ",
    "{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} ",
    "{ \n\tlong bell[n+1][n+1]; \n\tbell[0][0] = 1; \n\tfor (long i=1; i<=n; i++) \n\t{ \n\t\t// Explicitly fill for j = 0 \n\t\tbell[i][0] = bell[i-1][i-1]; ",
    "{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} ",
    "{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} ",
    "{ \n\tlong dp[][] = new long[n+1][n+1]; \n\tdp[0][0] = 1; \n\tfor (long i=1; i<=n; i++) \n\t{ \n\t\t// Explicitly fill for j = 0 \n\t\tdp[i][0] = dp[i-1][i-1]; \n\t\t// Fill for remaining values of j \n\t\tfor (long j=1; j<=i; j++) \n\t\t\tdp[i][j] = dp[i-1][j-1] + dp[i][j-1]; \n\t} \n\treturn dp[n][0]; \n} ",
    "{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} ",
    "{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} ",
    "{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} ",
    "{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} ",
    "{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} ",
    "{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} ",
    "{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} ",
    "{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} ",
    "{ \n    long bell[n + 1][n + 1]; \n    bell[0][0] = 1; \n    for (long i = 1; i <= n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i - 1][i - 1]; \n  \n        // Fill for remaining values of j \n        for (long j = 1; j <= i; j++) \n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]; \n    } \n    return bell[n][0]; \n} ",
    "{ \n    long bell[n + 1][n + 1]; \n    bell[0][0] = 1; \n    for (long i = 1; i <= n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i - 1][i - 1]; \n  \n        // Fill for remaining values of j \n        for (long j = 1; j <= i; j++) \n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]; \n    } \n    return bell[n][0]; \n} ",
    "{ \n    long bell[n + 1][n + 1]; \n    bell[0][0] = 1; \n    for (long i = 1; i <= n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i - 1][i - 1]; \n  \n        // Fill for remaining values of j \n        for (long j = 1; j <= i; j++) \n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]; \n    } \n    return bell[n][0]; \n} \n  \n// Driver program ",
    "{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} ",
    "{\n\tlong[long][long] bell = new long[n+1][n+1];\n\tbell[0][0] = 1;\n\tfor (long i = 1; i <= n; i++) \n\t{\n\t\tbell[i][0] = bell[i-1][i-1];\n\t\tfor (long j = 1; j <= i; j++)\n\t\t\tbell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n\t}\n\treturn bell[n][0];\n}",
    "{ \n\tlong bell[n+1][n+1]; \n\tbell[0][0] = 1; \n\tfor (long i=1; i<=n; i++) \n\t{ \n\t\t// Explicitly fill for j = 0 \n\t\tbell[i][0] = bell[i-1][i-1]; ",
    "{ \n\tlong[long] bell = new long[long]; \n\tbell[0] = 1; \n\tfor (long i = 1; i <= n; i++) \n\t{ \n\t\tbell[i] = 0; \n\t\tfor (long j = 0; j < i; j++) \n\t\t\tbell[i] += bell[j] * bell[i-j-1]; \n\t} \n\treturn bell[n]; \n} ",
    "{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} ",
    "{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} ",
    "{ \n\tlong bell[n + 1][n + 1]; \n\tbell[0][0] = 1; \n\tfor (long i = 1; i <= n; i++) \n\t{ \n\t\t// Explicitly fill for j = 0 \n\t\tbell[i][0] = bell[i - 1][i - 1]; ",
    "{ \n    long bell[n + 1][n + 1]; \n    bell[0][0] = 1; \n    for (long i = 1; i <= n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i - 1][i - 1]; \n  \n        // Fill for remaining values of j \n        for (long j = 1; j <= i; j++) \n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]; \n    } \n    return bell[n][0]; \n} ",
    "{ \n\tlong bell[n + 1][n + 1]; \n\tbell[0][0] = 1; \n\tfor (long i = 1; i <= n; i++) \n\t{ \n\t\t// Explicitly fill for j = 0 \n\t\tbell[i][0] = bell[i - 1][i - 1]; \n\t\t// Fill for remaining values of j \n\t\tfor (long j = 1; j <= i; j++) \n\t\t\tbell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]; \n\t} \n\treturn bell[n][0]; \n} ",
    "{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} ",
    "{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} ",
    "{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} ",
    "{ \n    long[long] bell = new long[long][long](n + 1); \n    bell[0][0] = 1; \n    for (long i = 1; i <= n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i - 1][i - 1]; \n  \n        // Fill for remaining values of j \n        for (long j = 1; j <= i; j++) \n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]; \n    } \n    return bell[n][0]; \n} \n  \n// Driver code ",
    "{ \n\tlong bell[n + 1][n + 1]; \n\tbell[0][0] = 1; \n\tfor (long i = 1; i <= n; i++) \n\t{ \n\t\t// Explicitly fill for j = 0 \n\t\tbell[i][0] = bell[i - 1][i - 1]; \n\t\t// Fill for remaining values of j \n\t\tfor (long j = 1; j <= i; j++) \n\t\t\tbell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]; \n\t} \n\treturn bell[n][0]; \n} ",
    "{ \n\tlong bell[n+1][n+1]; \n\tbell[0][0] = 1; \n\tfor (long i=1; i<=n; i++) \n\t{ \n\t\t// Explicitly fill for j = 0 \n\t\tbell[i][0] = bell[i-1][i-1]; ",
    "{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} ",
    "{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} ",
    "{ \n\tlong bell[n+1][n+1]; \n\tbell[0][0] = 1; \n\tfor (long i=1; i<=n; i++) \n\t{ \n\t\t// Explicitly fill for j = 0 \n\t\tbell[i][0] = bell[i-1][i-1]; ",
    "{ \n\tlong bell[n+1][n+1]; \n\tbell[0][0] = 1; \n\tfor (long i=1; i<=n; i++) \n\t{ \n\t\t// Explicitly fill for j = 0 \n\t\tbell[i][0] = bell[i-1][i-1]; ",
    "{ \n\tlong bell[n+1][n+1]; \n\tbell[0][0] = 1; \n\tfor (long i=1; i<=n; i++) \n\t{ \n\t\t// Explicitly fill for j = 0 \n\t\tbell[i][0] = bell[i-1][i-1]; ",
    "{\n\tlong[][] bell = new long[n + 1][n + 1];\n\tbell[0][0] = 1;\n\tfor (long i = 1; i <= n; i++) \n\t{\n\t\t// Explicitly fill for j = 0\n\t\tbell[i][0] = bell[i - 1][i - 1];\n\t\t// Fill for remaining values of j\n\t\tfor (long j = 1; j <= i; j++)\n\t\t\tbell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n\t}\n\treturn bell[n][0];\n}",
    "{ \n    long bell[n + 1][n + 1]; \n    bell[0][0] = 1; \n    for (long i = 1; i <= n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i - 1][i - 1]; \n  \n        // Fill for remaining values of j \n        for (long j = 1; j <= i; j++) \n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]; \n    } \n    return bell[n][0]; \n} ",
    "{ \n    long bell[n + 1][n + 1]; \n    bell[0][0] = 1; \n    for (long i = 1; i <= n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i - 1][i - 1]; \n  \n        // Fill for remaining values of j \n        for (long j = 1; j <= i; j++) \n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]; \n    } \n    return bell[n][0]; \n} ",
    "{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} ",
    "{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} ",
    "{\n\tlong[long] bell = new long[long](n + 1);\n\tbell[0] = 1;\n\tfor (long i = 1; i <= n; i++) \n\t{\n\t\tbell[i] = 0;\n\t\tfor (long j = 0; j < i; j++) \n\t\t{\n\t\t\tbell[i] += bell[j] * bell[i - j - 1];\n\t\t}\n\t}\n\treturn bell[n];\n}",
    "{ \n\tlong bell[n+1][n+1]; \n\tbell[0][0] = 1; \n\tfor (long i=1; i<=n; i++) \n\t{ \n\t\t// Explicitly fill for j = 0 \n\t\tbell[i][0] = bell[i-1][i-1]; \n\t\t// Fill for remaining values of j \n\t\tfor (long j=1; j<=i; j++) \n\t\t\tbell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n\t} \n\treturn bell[n][0]; \n} ",
    "{ \n\tlong bell[n+1][n+1]; \n\tbell[0][0] = 1; \n\tfor (long i=1; i<=n; i++) \n\t{ \n\t\t// Explicitly fill for j = 0 \n\t\tbell[i][0] = bell[i-1][i-1]; ",
    "{ \n\tlong bell[n+1][n+1]; \n\tbell[0][0] = 1; \n\tfor (long i=1; i<=n; i++) \n\t{ \n\t\t// Explicitly fill for j = 0 \n\t\tbell[i][0] = bell[i-1][i-1]; \n\t\t// Fill for remaining values of j \n\t\tfor (long j=1; j<=i; j++) \n\t\t\tbell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n\t} \n\treturn bell[n][0]; \n} ",
    "{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} ",
    "{ \n\tlong bell[n + 1][n + 1]; \n\tbell[0][0] = 1; \n\tfor (long i = 1; i <= n; i++) \n\t{ \n\t\t// Explicitly fill for j = 0 \n\t\tbell[i][0] = bell[i - 1][i - 1]; ",
    "{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} ",
    "{ \n\tlong[][] bell = new long[n+1][n+1]; \n\tbell[0][0] = 1; \n\tfor (long i=1; i<=n; i++) \n\t{ \n\t\t// Explicitly fill for j = 0 \n\t\tbell[i][0] = bell[i-1][i-1]; ",
    "{ \n    long[long] bell = new long[long][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} ",
    "{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} ",
    "{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} ",
    "{ \n    long bell[n + 1][n + 1]; \n    bell[0][0] = 1; \n    for (long i = 1; i <= n; i++) { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i - 1][i - 1]; \n  \n        // Fill for remaining values of j \n        for (long j = 1; j <= i; j++) \n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]; \n    } \n    return bell[n][0]; \n} ",
    "{\n\tlong[long][long] bell = new long[n + 1][n + 1];\n\tbell[0][0] = 1;\n\tfor (long i = 1; i <= n; i++) \n\t{\n\t\tbell[i][0] = bell[i - 1][i - 1];\n\t\tfor (long j = 1; j <= i; j++)\n\t\t\tbell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n\t}\n\treturn bell[n][0];\n}",
    "{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} ",
    "{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} ",
    "{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} ",
    "{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} ",
    "{ \n    long[long] bell = new long[long](n+1); \n  \n    // Initialize first and second number of the series \n    bell[0] = 1; \n    bell[1] = 1; \n  \n    // Calculate the sum and update the series \n    for (long i = 2; i <= n; i++) \n    { \n        bell[i] = 0; \n        for (long j = 0; j < i; j++) \n            bell[i] += bell[j] * bell[i-j-1]; \n    } \n  \n    return bell[n]; \n} ",
    "{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} ",
    "{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} ",
    "{\n\tlong[long] bell = new long[long](n + 1);\n\tbell[0] = 1;\n\tfor (long i = 1; i <= n; i++) \n\t{\n\t\tbell[i] = 0;\n\t\tfor (long j = 0; j < i; j++) \n\t\t{\n\t\t\tbell[i] += bell[j] * bell[i - 1 - j];\n\t\t}\n\t}\n\treturn bell[n];\n}",
    "{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} ",
    "{\n\tlong[long] bell = new long[long](n + 1);\n\tbell[0] = 1;\n\tfor (long i = 1; i <= n; ++i) \n\t{\n\t\tbell[i] = 0;\n\t\tfor (long j = 0; j < i; ++j)\n\t\t\tbell[i] += bell[j] * bell[i - 1 - j];\n\t}\n\treturn bell[n];\n}",
    "{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} ",
    "{ \n\tlong[long] bell = new long[long](n + 1); \n\tbell[0] = 1; \n\tfor (long i = 1; i <= n; i++) \n\t{ \n\t\tbell[i] = 0; \n\t\tfor (long j = 0; j < i; j++) \n\t\t\tbell[i] += bell[j] * bell[i - j - 1]; \n\t} \n\treturn bell[n]; \n} ",
    "{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} ",
    "{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} ",
    "{ \n\tlong[long] bell = new long[long]; \n\tbell[0] = 1; \n\tfor (long i = 1; i <= n; i++) \n\t{ \n\t\tbell[i] = 0; \n\t\tfor (long j = 0; j < i; j++) \n\t\t\tbell[i] += bell[j] * bell[i-j-1]; \n\t} \n\treturn bell[n]; \n} ",
    "{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} ",
    "{ \n\tlong bell[n+1][n+1]; \n\tbell[0][0] = 1; \n\tfor (long i=1; i<=n; i++) \n\t{ \n\t\t// Explicitly fill for j = 0 \n\t\tbell[i][0] = bell[i-1][i-1]; ",
    "{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \n  \n// Driver program ",
    "{ \n\tlong bell[n+1][n+1]; \n\tbell[0][0] = 1; \n\tfor (long i=1; i<=n; i++) \n\t{ \n\t\t// Explicitly fill for j = 0 \n\t\tbell[i][0] = bell[i-1][i-1]; ",
    "{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} ",
    "{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} ",
    "{ \n\tlong bell[n+1][n+1]; \n\tbell[0][0] = 1; \n\tfor (long i=1; i<=n; i++) \n\t{ \n\t\t// Explicitly fill for j = 0 \n\t\tbell[i][0] = bell[i-1][i-1]; ",
    "{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} ",
    "{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} ",
    "{ \n\tlong bell[n+1][n+1]; \n\tbell[0][0] = 1; \n\tfor (long i=1; i<=n; i++) \n\t{ \n\t\t// Explicitly fill for j = 0 \n\t\tbell[i][0] = bell[i-1][i-1]; ",
    "{ \n\tlong bell[n + 1][n + 1]; \n\tbell[0][0] = 1; \n\tfor (long i = 1; i <= n; i++) \n\t{ \n\t\t// Explicitly fill for j = 0 \n\t\tbell[i][0] = bell[i - 1][i - 1]; ",
    "{ \n\tlong[long] dp = new long[long][n + 1]; \n\tdp[0][0] = 1; \n\tfor (long i = 1; i <= n; i++) \n\t{ \n\t\t// Explicitly fill for j = 0 \n\t\tdp[i][0] = dp[i - 1][i - 1]; \n\t\t// Fill for remaining values of j \n\t\tfor (long j = 1; j <= i; j++) \n\t\t\tdp[i][j] = dp[i - 1][j - 1] + dp[i][j - 1]; \n\t} \n\treturn dp[n][0]; \n} ",
    "{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} ",
    "{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} ",
    "{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} ",
    "{\n\tlong[long][long] bell = new long[n + 1][n + 1];\n\tbell[0][0] = 1;\n\tfor (long i = 1; i <= n; i++) \n\t{\n\t\tbell[i][0] = bell[i - 1][i - 1];\n\t\tfor (long j = 1; j <= i; j++)\n\t\t\tbell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n\t}\n\treturn bell[n][0];\n}",
    "{ \n    long bell[n + 1][n + 1]; \n    bell[0][0] = 1; \n    for (long i = 1; i <= n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i - 1][i - 1]; \n  \n        // Fill for remaining values of j \n        for (long j = 1; j <= i; j++) \n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]; \n    } \n    return bell[n][0]; \n} ",
    "{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} ",
    "{ \n\tlong bell[n+1][n+1]; \n\tbell[0][0] = 1; \n\tfor (long i=1; i<=n; i++) \n\t{ \n\t\t// Explicitly fill for j = 0 \n\t\tbell[i][0] = bell[i-1][i-1]; \n\t\t// Fill for remaining values of j \n\t\tfor (long j=1; j<=i; j++) \n\t\t\tbell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n\t} \n\treturn bell[n][0]; \n} ",
    "{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} ",
    "{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} ",
    "{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} ",
    "{\n\tlong[long] bell = new long[long](n + 1);\n\tbell[0] = 1;\n\tfor (long i = 1; i <= n; i++) \n\t{\n\t\tbell[i] = 0;\n\t\tfor (long j = 0; j < i; j++)\n\t\t\tbell[i] += bell[j] * bell[i - 1 - j];\n\t}\n\treturn bell[n];\n}",
    "{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} ",
    "{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} ",
    "{ \n    long bell[n + 1][n + 1]; \n    bell[0][0] = 1; \n    for (long i = 1; i <= n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i - 1][i - 1]; \n  \n        // Fill for remaining values of j \n        for (long j = 1; j <= i; j++) \n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]; \n    } \n    return bell[n][0]; \n} ",
    "{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} ",
    "{\n\tlong[long] bell = new long[long](n + 1);\n\tbell[0] = 1;\n\tfor (long i = 1; i <= n; i++) \n\t{\n\t\tbell[i] = 0;\n\t\tfor (long j = 0; j < i; j++) \n\t\t{\n\t\t\tbell[i] += bell[j] * bell[i - j - 1];\n\t\t}\n\t}\n\treturn bell[n];\n}",
    "{ \n\tlong bell[n+1][n+1]; \n\tbell[0][0] = 1; \n\tfor (long i=1; i<=n; i++) \n\t{ \n\t\t// Explicitly fill for j = 0 \n\t\tbell[i][0] = bell[i-1][i-1]; ",
    "{ \n\tlong bell[n+1][n+1]; \n\tbell[0][0] = 1; \n\tfor (long i=1; i<=n; i++) \n\t{ \n\t\t// Explicitly fill for j = 0 \n\t\tbell[i][0] = bell[i-1][i-1]; ",
    "{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} ",
    "{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} ",
    "{ \n    long bell[n + 1][n + 1]; \n    bell[0][0] = 1; \n    for (long i = 1; i <= n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i - 1][i - 1]; \n  \n        // Fill for remaining values of j \n        for (long j = 1; j <= i; j++) \n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]; \n    } \n    return bell[n][0]; \n} \n  \n// Driver program ",
    "{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} ",
    "{ \n    long[long] bell = new long[long](n + 1); \n    bell[0] = 1; \n  \n    for (long i = 1; i <= n; i++) \n    { \n        bell[i] = 0; \n        for (long j = 0; j < i; j++) \n            bell[i] += bell[j] * bell[i - j - 1]; \n    } \n  \n    return bell[n]; \n} ",
    "{ \n\tlong bell[n+1][n+1]; \n\tbell[0][0] = 1; \n\tfor (long i=1; i<=n; i++) \n\t{ \n\t\t// Explicitly fill for j = 0 \n\t\tbell[i][0] = bell[i-1][i-1]; ",
    "{ \n\tlong[][] bell = new long[n+1][n+1]; \n\tbell[0][0] = 1; \n\tfor (long i=1; i<=n; i++) \n\t{ \n\t\t// Explicitly fill for j = 0 \n\t\tbell[i][0] = bell[i-1][i-1]; \n\t\t// Fill for remaining values of j \n\t\tfor (long j=1; j<=i; j++) \n\t\t\tbell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n\t} \n\treturn bell[n][0]; \n} ",
    "{\n\tlong[long][long] bell = new long[n + 1][n + 1];\n\tbell[0][0] = 1;\n\tfor (long i = 1; i <= n; i++) \n\t{\n\t\tbell[i][0] = bell[i - 1][i - 1];\n\t\tfor (long j = 1; j <= i; j++)\n\t\t\tbell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n\t}\n\treturn bell[n][0];\n}",
    "{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} ",
    "{ \n\tlong bell[n + 1][n + 1]; \n\tbell[0][0] = 1; \n\tfor (long i = 1; i <= n; i++) { \n\t\t// Explicitly fill for j = 0 \n\t\tbell[i][0] = bell[i - 1][i - 1]; \n\t\t// Fill for remaining values of j \n\t\tfor (long j = 1; j <= i; j++) \n\t\t\tbell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]; \n\t} \n\treturn bell[n][0]; \n} ",
    "{ \n    long bell[n + 1][n + 1]; \n    bell[0][0] = 1; \n    for (long i = 1; i <= n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i - 1][i - 1]; \n  \n        // Fill for remaining values of j \n        for (long j = 1; j <= i; j++) \n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]; \n    } \n    return bell[n][0]; \n} \n  \n// Driver program ",
    "{ \n\tlong bell[n+1][n+1]; \n\tbell[0][0] = 1; \n\tfor (long i=1; i<=n; i++) \n\t{ \n\t\t// Explicitly fill for j = 0 \n\t\tbell[i][0] = bell[i-1][i-1]; ",
    "{ \n\tlong bell[n+1][n+1]; \n\tbell[0][0] = 1; \n\tfor (long i=1; i<=n; i++) \n\t{ \n\t\t// Explicitly fill for j = 0 \n\t\tbell[i][0] = bell[i-1][i-1]; \n\t\t// Fill for remaining values of j \n\t\tfor (long j=1; j<=i; j++) \n\t\t\tbell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n\t} \n\treturn bell[n][0]; \n} ",
    "{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} ",
    "{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} ",
    "{ \n    long[long] bell = new long[long][n + 1]; \n    bell[0][0] = 1; \n    for (long i = 1; i <= n; i++) \n    { \n        bell[i][0] = bell[i - 1][i - 1]; \n        for (long j = 1; j <= i; j++) \n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]; \n    } \n    return bell[n][0]; \n} ",
    "{ \n    long bell[n + 1][n + 1]; \n    bell[0][0] = 1; \n    for (long i = 1; i <= n; i++) { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i - 1][i - 1]; \n  \n        // Fill for remaining values of j \n        for (long j = 1; j <= i; j++) \n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]; \n    } \n    return bell[n][0]; \n} ",
    "{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} ",
    "{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} ",
    "{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} ",
    "{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} \n  \n// Driver program ",
    "{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} ",
    "{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} ",
    "{\n\tlong[long] bell = new long[long](n+1);\n\tbell[0] = 1;\n\tfor (long i = 1; i <= n; i++) \n\t{\n\t\tbell[i] = 0;\n\t\tfor (long j = 0; j < i; j++) \n\t\t{\n\t\t\tbell[i] += bell[j] * bell[i-j-1];\n\t\t}\n\t}\n\treturn bell[n];\n}",
    "{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} ",
    "{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} ",
    "{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} ",
    "{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} ",
    "{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} ",
    "{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} ",
    "{\n\tlong bell[n + 1][n + 1];\n\tbell[0][0] = 1;\n\tfor (long i = 1; i <= n; i++) {\n\t\t// Explicitly fill for j = 0\n\t\tbell[i][0] = bell[i - 1][i - 1];\n\t\t// Fill for remaining values of j\n\t\tfor (long j = 1; j <= i; j++)\n\t\t\tbell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n\t}\n\treturn bell[n][0];\n}",
    "{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} ",
    "{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} ",
    "{ \n    long bell[n + 1][n + 1]; \n    bell[0][0] = 1; \n    for (long i = 1; i <= n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i - 1][i - 1]; \n  \n        // Fill for remaining values of j \n        for (long j = 1; j <= i; j++) \n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]; \n    } \n    return bell[n][0]; \n} ",
    "{ \n\tlong bell[n+1][n+1]; \n\tbell[0][0] = 1; \n\tfor (long i=1; i<=n; i++) \n\t{ \n\t\t// Explicitly fill for j = 0 \n\t\tbell[i][0] = bell[i-1][i-1]; \n\t\t// Fill for remaining values of j \n\t\tfor (long j=1; j<=i; j++) \n\t\t\tbell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n\t} \n\treturn bell[n][0]; \n} ",
    "{ \n\tlong bell[n+1][n+1]; \n\tbell[0][0] = 1; \n\tfor (long i=1; i<=n; i++) \n\t{ \n\t\t// Explicitly fill for j = 0 \n\t\tbell[i][0] = bell[i-1][i-1]; ",
    "{ \n\tlong bell[n+1][n+1]; \n\tbell[0][0] = 1; \n\tfor (long i=1; i<=n; i++) \n\t{ \n\t\t// Explicitly fill for j = 0 \n\t\tbell[i][0] = bell[i-1][i-1]; ",
    "{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} ",
    "{ \n    long bell[n+1][n+1]; \n    bell[0][0] = 1; \n    for (long i=1; i<=n; i++) \n    { \n        // Explicitly fill for j = 0 \n        bell[i][0] = bell[i-1][i-1]; \n  \n        // Fill for remaining values of j \n        for (long j=1; j<=i; j++) \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; \n    } \n    return bell[n][0]; \n} ",
    "{ \n\tlong bell[n+1][n+1]; \n\tbell[0][0] = 1; \n\tfor (long i=1; i<=n; i++) \n\t{ \n\t\t// Explicitly fill for j = 0 \n\t\tbell[i][0] = bell[i-1][i-1]; "
  ]
}