{
  "name": "mbpp_3_is_not_prime",
  "language": "d",
  "prompt": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_3_is_not_prime.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\tfor (long i = 3; i <= sqrt(n); i += 2) {\n\t\tif (n % i == 0) return true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpp8oy5fk8.d(12): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp8oy5fk8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\tfor (long i = 3; i <= sqrt(n); i += 2) \n\t{\n\t\tif (n % i == 0) return true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpdajq3c5v.d(12): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdajq3c5v.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1)\n\t\treturn true;\n\telse if (n <= 3)\n\t\treturn false;\n\telse if (n % 2 == 0 || n % 3 == 0)\n\t\treturn true;\n\tlong i = 5;\n\twhile (i * i <= n) \n\t{\n\t\tif (n % i == 0 || n % (i + 2) == 0)\n\t\t\treturn true;\n\t\ti += 6;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2)\n\t\treturn true;\n\t\n\tfor (long i = 2; i < n; i++)\n\t\tif (n % i == 0)\n\t\t\treturn true;\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1) \n\t{\n\t\treturn true;\n\t}\n\telse if (n <= 3) \n\t{\n\t\treturn false;\n\t}\n\telse if (n % 2 == 0 || n % 3 == 0) \n\t{\n\t\treturn true;\n\t}\n\tlong i = 5;\n\twhile (i * i <= n) \n\t{\n\t\tif (n % i == 0 || n % (i + 2) == 0) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\ti = i + 6;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1)\n\t\treturn true;\n\telse if (n <= 3)\n\t\treturn false;\n\telse if (n % 2 == 0 || n % 3 == 0)\n\t\treturn true;\n\tlong i = 5;\n\twhile (i * i <= n) \n\t{\n\t\tif (n % i == 0 || n % (i + 2) == 0)\n\t\t\treturn true;\n\t\ti = i + 6;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\t\n\tlong i = 3;\n\tlong max = sqrt(n);\n\t\n\twhile (i <= max) {\n\t\tif (n % i == 0) return true;\n\t\ti += 2;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpxmtzkx2o.d(14): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxmtzkx2o.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1) \n\t{\n\t\treturn true;\n\t}\n\telse if (n <= 3) \n\t{\n\t\treturn false;\n\t}\n\telse if (n % 2 == 0 || n % 3 == 0) \n\t{\n\t\treturn true;\n\t}\n\tlong i = 5;\n\twhile (i * i <= n) \n\t{\n\t\tif (n % i == 0 || n % (i + 2) == 0) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\ti += 6;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1)\n\t\treturn true;\n\telse if (n <= 3)\n\t\treturn false;\n\telse if (n % 2 == 0 || n % 3 == 0)\n\t\treturn true;\n\tlong i = 5;\n\twhile (i * i <= n) \n\t{\n\t\tif (n % i == 0 || n % (i + 2) == 0)\n\t\t\treturn true;\n\t\ti += 6;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1)\n\t\treturn true;\n\telse if (n <= 3)\n\t\treturn false;\n\telse if (n % 2 == 0 || n % 3 == 0)\n\t\treturn true;\n\tlong i = 5;\n\twhile (i * i <= n) \n\t{\n\t\tif (n % i == 0 || n % (i + 2) == 0)\n\t\t\treturn true;\n\t\ti += 6;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\t\n\tfor (long i = 3; i <= sqrt(n); i += 2) \n\t{\n\t\tif (n % i == 0) return true;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmp3f_p8wdq.d(13): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3f_p8wdq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\tfor (long i = 3; i <= sqrt(n); i += 2) \n\t{\n\t\tif (n % i == 0) return true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpdajq3c5v.d(12): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdajq3c5v.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2) \n\t{\n\t\treturn true;\n\t}\n\telse if (n == 2) \n\t{\n\t\treturn false;\n\t}\n\telse if (n % 2 == 0) \n\t{\n\t\treturn true;\n\t}\n\telse \n\t{\n\t\tfor (long i = 3; i <= sqrt(n); i += 2) \n\t\t{\n\t\t\tif (n % i == 0) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpgi8kq_xy.d(23): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgi8kq_xy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\tfor (long i = 3; i <= sqrt(n); i += 2) {\n\t\tif (n % i == 0) return true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpp8oy5fk8.d(12): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp8oy5fk8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1)\n\t\treturn true;\n\tif (n <= 3)\n\t\treturn false;\n\tif (n % 2 == 0 || n % 3 == 0)\n\t\treturn true;\n\tfor (long i = 5; i * i <= n; i = i + 6)\n\t\tif (n % i == 0 || n % (i + 2) == 0)\n\t\t\treturn true;\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\t\n\tlong i = 3;\n\twhile (i <= sqrt(n)) {\n\t\tif (n % i == 0) return true;\n\t\ti += 2;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpbenidv36.d(14): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbenidv36.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2) \n\t{\n\t\treturn true;\n\t}\n\t\n\tfor (long i = 2; i <= sqrt(n); i++) \n\t{\n\t\tif (n % i == 0) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmp3se8f0m2.d(14): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3se8f0m2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\tfor (long i = 3; i <= sqrt(n); i += 2) \n\t{\n\t\tif (n % i == 0) return true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpdajq3c5v.d(12): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdajq3c5v.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2) \n\t\treturn true;\n\tfor (long i = 2; i <= sqrt(n); i++) \n\t{\n\t\tif (n % i == 0) \n\t\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpenece9v7.d(11): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpenece9v7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2) return true;\n\tfor (long i = 2; i <= sqrt(n); i++) \n\t{\n\t\tif (n % i == 0) return true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmphki3xakh.d(10): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphki3xakh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2)\n\t\treturn true;\n\tfor (long i = 2; i < n; i++)\n\t{\n\t\tif (n % i == 0)\n\t\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1) return true;\n\tif (n <= 3) return false;\n\tif (n % 2 == 0 || n % 3 == 0) return true;\n\t\n\tlong i = 5;\n\twhile (i * i <= n) \n\t{\n\t\tif (n % i == 0 || n % (i + 2) == 0) return true;\n\t\ti = i + 6;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2)\n\t\treturn true;\n\telse if (n == 2)\n\t\treturn false;\n\telse if (n % 2 == 0)\n\t\treturn true;\n\telse\n\t{\n\t\tfor (long i = 3; i <= sqrt(n); i += 2)\n\t\t\tif (n % i == 0)\n\t\t\t\treturn true;\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123981,
      "stdout": "",
      "stderr": "/tmp/tmphqicpq07.d(17): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphqicpq07.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2) \n\t{\n\t\treturn true;\n\t}\n\t\n\tfor (long i = 2; i < n; i++) \n\t{\n\t\tif (n % i == 0) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1)\n\t\treturn true;\n\telse if (n <= 3)\n\t\treturn false;\n\telse if (n % 2 == 0 || n % 3 == 0)\n\t\treturn true;\n\tlong i = 5;\n\twhile (i * i <= n) \n\t{\n\t\tif (n % i == 0 || n % (i + 2) == 0)\n\t\t\treturn true;\n\t\ti = i + 6;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\tfor (long i = 3; i <= sqrt(n); i += 2) \n\t{\n\t\tif (n % i == 0) return true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpdajq3c5v.d(12): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdajq3c5v.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2) return true;\n\tfor (long i = 2; i < n; i++) \n\t{\n\t\tif (n % i == 0) return true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1)\n\t\treturn true;\n\telse if (n <= 3)\n\t\treturn false;\n\telse if (n % 2 == 0 || n % 3 == 0)\n\t\treturn true;\n\tlong i = 5;\n\twhile (i * i <= n) {\n\t\tif (n % i == 0 || n % (i + 2) == 0)\n\t\t\treturn true;\n\t\ti = i + 6;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\t\n\tfor (long i = 3; i <= sqrt(n); i += 2)\n\t{\n\t\tif (n % i == 0)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123981,
      "stdout": "",
      "stderr": "/tmp/tmpow1iyw62.d(13): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpow1iyw62.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1) \n\t\treturn true;\n\telse if (n <= 3) \n\t\treturn false;\n\telse if (n % 2 == 0 || n % 3 == 0) \n\t\treturn true;\n\tlong i = 5;\n\twhile (i * i <= n) \n\t{\n\t\tif (n % i == 0 || n % (i + 2) == 0) \n\t\t\treturn true;\n\t\ti = i + 6;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\t\n\tfor (long i = 3; i <= sqrt(n); i += 2)\n\t{\n\t\tif (n % i == 0)\n\t\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123981,
      "stdout": "",
      "stderr": "/tmp/tmpqwu558p9.d(13): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqwu558p9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2) \n\t{\n\t\treturn true;\n\t}\n\telse if (n == 2) \n\t{\n\t\treturn false;\n\t}\n\telse if (n % 2 == 0) \n\t{\n\t\treturn true;\n\t}\n\telse \n\t{\n\t\tfor (long i = 3; i <= sqrt(n); i += 2) \n\t\t{\n\t\t\tif (n % i == 0) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpgi8kq_xy.d(23): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgi8kq_xy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1)\n\t\treturn true;\n\t\n\tfor (long i = 2; i <= sqrt(n); i++)\n\t{\n\t\tif (n % i == 0)\n\t\t\treturn true;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123981,
      "stdout": "",
      "stderr": "/tmp/tmpuy5g_nki.d(12): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuy5g_nki.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\tfor (long i = 3; i <= sqrt(n); i += 2) \n\t{\n\t\tif (n % i == 0) return true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpdajq3c5v.d(12): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdajq3c5v.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1)\n\t\treturn true;\n\telse if (n <= 3)\n\t\treturn false;\n\telse if (n % 2 == 0 || n % 3 == 0)\n\t\treturn true;\n\tlong i = 5;\n\twhile (i * i <= n)\n\t{\n\t\tif (n % i == 0 || n % (i + 2) == 0)\n\t\t\treturn true;\n\t\ti += 6;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1) \n\t{\n\t\treturn true;\n\t}\n\t\n\tfor (long i = 2; i < n; i++) \n\t{\n\t\tif (n % i == 0) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\t\n\tfor (long i = 3; i <= sqrt(n); i += 2)\n\t{\n\t\tif (n % i == 0) return true;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123981,
      "stdout": "",
      "stderr": "/tmp/tmp_6amka8y.d(13): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_6amka8y.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1)\n\t\treturn true;\n\telse if (n <= 3)\n\t\treturn false;\n\telse if (n % 2 == 0 || n % 3 == 0)\n\t\treturn true;\n\tlong i = 5;\n\twhile (i * i <= n) \n\t{\n\t\tif (n % i == 0 || n % (i + 2) == 0)\n\t\t\treturn true;\n\t\ti = i + 6;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\t\n\tlong m = (long)sqrt(n);\n\t\n\tfor (long i = 3; i <= m; i += 2) \n\t{\n\t\tif (n % i == 0)\n\t\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123981,
      "stdout": "",
      "stderr": "/tmp/tmpa1ta1tiq.d(13): Error: C style cast illegal, use `cast(long)sqrt(n)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa1ta1tiq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\t\n\tfor (long i = 3; i <= sqrt(n); i += 2)\n\t{\n\t\tif (n % i == 0)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123981,
      "stdout": "",
      "stderr": "/tmp/tmpd8l15oyk.d(13): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd8l15oyk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\tfor (long i = 3; i <= sqrt(n); i += 2) \n\t{\n\t\tif (n % i == 0) return true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpdajq3c5v.d(12): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdajq3c5v.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\tfor (long i = 3; i <= sqrt(n); i += 2)\n\t{\n\t\tif (n % i == 0) return true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123981,
      "stdout": "",
      "stderr": "/tmp/tmptvxiln33.d(12): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptvxiln33.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1) \n\t{\n\t\treturn true;\n\t}\n\tfor (long i = 2; i <= sqrt(n); i++) \n\t{\n\t\tif (n % i == 0) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123981,
      "stdout": "",
      "stderr": "/tmp/tmpq4gza1y9.d(13): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq4gza1y9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\tfor (long i = 3; i <= sqrt(n); i += 2) \n\t{\n\t\tif (n % i == 0) return true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpdajq3c5v.d(12): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdajq3c5v.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2) \n\t{\n\t\treturn true;\n\t}\n\tfor (long i = 2; i <= sqrt(n); i++) \n\t{\n\t\tif (n % i == 0) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123981,
      "stdout": "",
      "stderr": "/tmp/tmprmavgu86.d(13): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprmavgu86.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2)\n\t\treturn true;\n\tfor (long i = 2; i < n; i++)\n\t{\n\t\tif (n % i == 0)\n\t\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1) return true;\n\tif (n <= 3) return false;\n\tif (n % 2 == 0 || n % 3 == 0) return true;\n\tfor (long i = 5; i * i <= n; i += 6)\n\t\tif (n % i == 0 || n % (i + 2) == 0)\n\t\t\treturn true;\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2)\n\t\treturn true;\n\tfor (long i = 2; i < n; i++)\n\t{\n\t\tif (n % i == 0)\n\t\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1) \n\t{\n\t\treturn true;\n\t}\n\tfor (long i = 2; i <= sqrt(n); i++) \n\t{\n\t\tif (n % i == 0) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123981,
      "stdout": "",
      "stderr": "/tmp/tmpq4gza1y9.d(13): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq4gza1y9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2) return true;\n\tfor (long i = 2; i <= sqrt(n); i++) \n\t{\n\t\tif (n % i == 0) return true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmphki3xakh.d(10): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphki3xakh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\tfor (long i = 3; i <= sqrt(n); i += 2) \n\t{\n\t\tif (n % i == 0) return true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpdajq3c5v.d(12): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdajq3c5v.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2) return true;\n\tfor (long i = 2; i < n; i++) \n\t{\n\t\tif (n % i == 0) return true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\t\n\tlong m = (long)sqrt(n);\n\t\n\tfor (long i = 3; i <= m; i += 2) \n\t{\n\t\tif (n % i == 0)\n\t\t\treturn true;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123981,
      "stdout": "",
      "stderr": "/tmp/tmpscxjz6bp.d(13): Error: C style cast illegal, use `cast(long)sqrt(n)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpscxjz6bp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1) \n\t{\n\t\treturn true;\n\t}\n\telse if (n <= 3) \n\t{\n\t\treturn false;\n\t}\n\telse if (n % 2 == 0 || n % 3 == 0) \n\t{\n\t\treturn true;\n\t}\n\tlong i = 5;\n\twhile (i * i <= n) \n\t{\n\t\tif (n % i == 0 || n % (i + 2) == 0) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\ti = i + 6;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1)\n\t\treturn true;\n\telse if (n <= 3)\n\t\treturn false;\n\telse if (n % 2 == 0 || n % 3 == 0)\n\t\treturn true;\n\tlong i = 5;\n\twhile (i * i <= n)\n\t{\n\t\tif (n % i == 0 || n % (i + 2) == 0)\n\t\t\treturn true;\n\t\ti = i + 6;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2)\n\t\treturn true;\n\t\n\tfor (long i = 2; i <= sqrt(n); i++)\n\t{\n\t\tif (n % i == 0)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123981,
      "stdout": "",
      "stderr": "/tmp/tmp6lc10hpz.d(12): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6lc10hpz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1)\n\t\treturn true;\n\tif (n == 2)\n\t\treturn false;\n\tif (n % 2 == 0)\n\t\treturn true;\n\tfor (long i = 3; i <= sqrt(n); i += 2)\n\t{\n\t\tif (n % i == 0)\n\t\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123981,
      "stdout": "",
      "stderr": "/tmp/tmppsxa4bj2.d(15): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppsxa4bj2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2)\n\t\treturn true;\n\t\n\tfor (long i = 2; i < n; i++)\n\t{\n\t\tif (n % i == 0)\n\t\t\treturn true;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2)\n\t\treturn true;\n\t\n\tfor (long i = 2; i <= sqrt(n); i++)\n\t{\n\t\tif (n % i == 0)\n\t\t\treturn true;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123981,
      "stdout": "",
      "stderr": "/tmp/tmp5phkd3x_.d(12): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5phkd3x_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2) \n\t{\n\t\treturn true;\n\t}\n\t\n\tfor (long i = 2; i <= sqrt(n); i++) \n\t{\n\t\tif (n % i == 0) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmp3se8f0m2.d(14): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3se8f0m2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\tfor (long i = 3; i <= sqrt(n); i += 2)\n\t{\n\t\tif (n % i == 0) return true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123981,
      "stdout": "",
      "stderr": "/tmp/tmptvxiln33.d(12): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptvxiln33.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2) \n\t{\n\t\treturn true;\n\t}\n\t\n\tfor (long i = 2; i <= sqrt(n); i++) \n\t{\n\t\tif (n % i == 0) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmp3se8f0m2.d(14): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3se8f0m2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tfor (long i = 2; i < n; i++) \n\t{\n\t\tif (n % i == 0) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\tfor (long i = 3; i <= sqrt(n); i += 2) \n\t{\n\t\tif (n % i == 0) return true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpdajq3c5v.d(12): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdajq3c5v.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1)\n\t\treturn true;\n\telse if (n <= 3)\n\t\treturn false;\n\telse if (n % 2 == 0 || n % 3 == 0)\n\t\treturn true;\n\tlong i = 5;\n\twhile (i * i <= n) \n\t{\n\t\tif (n % i == 0 || n % (i + 2) == 0)\n\t\t\treturn true;\n\t\ti += 6;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1)\n\t\treturn true;\n\tfor (long i = 2; i < n; i++)\n\t{\n\t\tif (n % i == 0)\n\t\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2)\n\t\treturn true;\n\t\n\tfor (long i = 2; i < n; i++)\n\t{\n\t\tif (n % i == 0)\n\t\t\treturn true;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1)\n\t\treturn true;\n\telse if (n <= 3)\n\t\treturn false;\n\telse if (n % 2 == 0 || n % 3 == 0)\n\t\treturn true;\n\tlong i = 5;\n\twhile (i * i <= n) {\n\t\tif (n % i == 0 || n % (i + 2) == 0)\n\t\t\treturn true;\n\t\ti += 6;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1)\n\t\treturn true;\n\telse if (n <= 3)\n\t\treturn false;\n\telse if (n % 2 == 0 || n % 3 == 0)\n\t\treturn true;\n\tlong i = 5;\n\twhile (i * i <= n) \n\t{\n\t\tif (n % i == 0 || n % (i + 2) == 0)\n\t\t\treturn true;\n\t\ti = i + 6;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1)\n\t\treturn true;\n\telse if (n <= 3)\n\t\treturn false;\n\telse if (n % 2 == 0 || n % 3 == 0)\n\t\treturn true;\n\tlong i = 5;\n\twhile (i * i <= n)\n\t{\n\t\tif (n % i == 0 || n % (i + 2) == 0)\n\t\t\treturn true;\n\t\ti = i + 6;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2)\n\t\treturn true;\n\t\t\n\tfor (long i = 2; i < n; i++)\n\t{\n\t\tif (n % i == 0)\n\t\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif(n < 2) \n\t\treturn true;\n\tfor(long i = 2; i <= sqrt(n); i++) \n\t{\n\t\tif(n % i == 0) \n\t\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123981,
      "stdout": "",
      "stderr": "/tmp/tmpgf08wso8.d(11): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgf08wso8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1) \n\t{\n\t\treturn true;\n\t}\n\telse if (n <= 3) \n\t{\n\t\treturn false;\n\t}\n\telse if (n % 2 == 0 || n % 3 == 0) \n\t{\n\t\treturn true;\n\t}\n\tlong i = 5;\n\twhile (i * i <= n) \n\t{\n\t\tif (n % i == 0 || n % (i + 2) == 0) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\ti = i + 6;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2)\n\t\treturn true;\n\tif (n == 2)\n\t\treturn false;\n\tif (n % 2 == 0)\n\t\treturn true;\n\tlong m = cast(long)sqrt(n);\n\tfor (long i = 3; i <= m; i += 2)\n\t\tif (n % i == 0)\n\t\t\treturn true;\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123981,
      "stdout": "",
      "stderr": "/tmp/tmpq6buany8.d(15): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq6buany8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1) \n\t{\n\t\treturn true;\n\t}\n\t\n\tfor (long i = 2; i <= sqrt(n); i++) \n\t{\n\t\tif (n % i == 0) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123981,
      "stdout": "",
      "stderr": "/tmp/tmp4ji02wfq.d(14): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4ji02wfq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\tfor (long i = 3; i <= sqrt(n); i += 2) \n\t{\n\t\tif (n % i == 0) return true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpdajq3c5v.d(12): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdajq3c5v.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\t\n\tlong i = 3;\n\tlong limit = sqrt(n);\n\twhile (i <= limit) \n\t{\n\t\tif (n % i == 0) return true;\n\t\ti += 2;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123981,
      "stdout": "",
      "stderr": "/tmp/tmpjdjm3boh.d(14): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjdjm3boh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\tfor (long i = 3; i <= sqrt(n); i += 2)\n\t{\n\t\tif (n % i == 0) return true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123981,
      "stdout": "",
      "stderr": "/tmp/tmptvxiln33.d(12): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptvxiln33.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2) return true;\n\tfor (long i = 2; i < n; i++) \n\t{\n\t\tif (n % i == 0) return true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1) return true;\n\tif (n <= 3) return false;\n\tif (n % 2 == 0 || n % 3 == 0) return true;\n\tfor (long i = 5; i * i <= n; i = i + 6)\n\t\tif (n % i == 0 || n % (i + 2) == 0)\n\t\t\treturn true;\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\t\n\tlong i = 3;\n\twhile (i <= sqrt(n))\n\t{\n\t\tif (n % i == 0) return true;\n\t\ti += 2;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123981,
      "stdout": "",
      "stderr": "/tmp/tmp7xm2q7b1.d(14): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7xm2q7b1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1) \n\t\treturn true;\n\telse if (n <= 3) \n\t\treturn false;\n\telse if (n % 2 == 0 || n % 3 == 0) \n\t\treturn true;\n\tlong i = 5;\n\twhile (i * i <= n) \n\t{\n\t\tif (n % i == 0 || n % (i + 2) == 0) \n\t\t\treturn true;\n\t\ti = i + 6;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1)\n\t\treturn true;\n\tif (n <= 3)\n\t\treturn false;\n\tif (n % 2 == 0 || n % 3 == 0)\n\t\treturn true;\n\tfor (long i = 5; i * i <= n; i += 6)\n\t\tif (n % i == 0 || n % (i + 2) == 0)\n\t\t\treturn true;\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1) \n\t{\n\t\treturn true;\n\t}\n\t\n\tfor (long i = 2; i <= sqrt(n); i++) \n\t{\n\t\tif (n % i == 0) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123981,
      "stdout": "",
      "stderr": "/tmp/tmp4ji02wfq.d(14): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4ji02wfq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2)\n\t\treturn true;\n\tif (n == 2)\n\t\treturn false;\n\tif (n % 2 == 0)\n\t\treturn true;\n\tfor (long i = 3; i <= sqrt(n); i += 2)\n\t\tif (n % i == 0)\n\t\t\treturn true;\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123981,
      "stdout": "",
      "stderr": "/tmp/tmpb701rktj.d(15): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb701rktj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1) return true;\n\tif (n <= 3) return false;\n\tif (n % 2 == 0 || n % 3 == 0) return true;\n\tfor (long i = 5; i * i <= n; i += 6)\n\t\tif (n % i == 0 || n % (i + 2) == 0) return true;\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2)\n\t\treturn true;\n\telse if (n == 2)\n\t\treturn false;\n\telse if (n % 2 == 0)\n\t\treturn true;\n\telse\n\t{\n\t\tfor (long i = 3; i <= sqrt(n); i += 2)\n\t\t{\n\t\t\tif (n % i == 0)\n\t\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123981,
      "stdout": "",
      "stderr": "/tmp/tmptlxtgjou.d(17): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptlxtgjou.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\t\n\tlong m = sqrt(n);\n\t\n\tfor (long i = 3; i <= m; i += 2)\n\t{\n\t\tif (n % i == 0)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123981,
      "stdout": "",
      "stderr": "/tmp/tmpz8gg4jf0.d(13): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz8gg4jf0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1) \n\t{\n\t\treturn true;\n\t}\n\t\n\tfor (long i = 2; i <= sqrt(n); i++) \n\t{\n\t\tif (n % i == 0) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123981,
      "stdout": "",
      "stderr": "/tmp/tmp4ji02wfq.d(14): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4ji02wfq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\tfor (long i = 3; i <= sqrt(n); i += 2)\n\t{\n\t\tif (n % i == 0)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123981,
      "stdout": "",
      "stderr": "/tmp/tmpbo4k8vzy.d(12): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbo4k8vzy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\tfor (long i = 3; i <= sqrt(n); i += 2) \n\t{\n\t\tif (n % i == 0) return true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpdajq3c5v.d(12): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdajq3c5v.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\t\n\tlong m = cast(long) sqrt(n);\n\t\n\tfor (long i = 3; i <= m; i += 2) \n\t{\n\t\tif (n % i == 0)\n\t\t\treturn true;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123981,
      "stdout": "",
      "stderr": "/tmp/tmpdmwm3xpn.d(13): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdmwm3xpn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1)\n\t{\n\t\treturn true;\n\t}\n\telse if (n <= 3)\n\t{\n\t\treturn false;\n\t}\n\telse if (n % 2 == 0 || n % 3 == 0)\n\t{\n\t\treturn true;\n\t}\n\tlong i = 5;\n\twhile (i * i <= n)\n\t{\n\t\tif (n % i == 0 || n % (i + 2) == 0)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\ti += 6;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1)\n\t\treturn true;\n\telse if (n <= 3)\n\t\treturn false;\n\telse if (n % 2 == 0 || n % 3 == 0)\n\t\treturn true;\n\tlong i = 5;\n\twhile (i * i <= n) \n\t{\n\t\tif (n % i == 0 || n % (i + 2) == 0)\n\t\t\treturn true;\n\t\ti = i + 6;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1)\n\t\treturn true;\n\telse if (n <= 3)\n\t\treturn false;\n\telse if (n % 2 == 0 || n % 3 == 0)\n\t\treturn true;\n\tlong i = 5;\n\twhile (i * i <= n)\n\t{\n\t\tif (n % i == 0 || n % (i + 2) == 0)\n\t\t\treturn true;\n\t\ti += 6;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1) \n\t{\n\t\treturn true;\n\t}\n\t\n\tfor (long i = 2; i <= sqrt(n); i++) \n\t{\n\t\tif (n % i == 0) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123981,
      "stdout": "",
      "stderr": "/tmp/tmp4ji02wfq.d(14): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4ji02wfq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1)\n\t\treturn true;\n\tif (n <= 3)\n\t\treturn false;\n\tif (n % 2 == 0 || n % 3 == 0)\n\t\treturn true;\n\tfor (long i = 5; i * i <= n; i = i + 6)\n\t\tif (n % i == 0 || n % (i + 2) == 0)\n\t\t\treturn true;\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\t\n\tfor (long i = 3; i <= sqrt(n); i += 2)\n\t{\n\t\tif (n % i == 0) return true;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123981,
      "stdout": "",
      "stderr": "/tmp/tmphrm01p38.d(13): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphrm01p38.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2) \n\t{\n\t\treturn true;\n\t}\n\t\n\tfor (long i = 2; i <= sqrt(n); i++) \n\t{\n\t\tif (n % i == 0) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmp3se8f0m2.d(14): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3se8f0m2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1)\n\t\treturn true;\n\telse if (n <= 3)\n\t\treturn false;\n\telse if (n % 2 == 0 || n % 3 == 0)\n\t\treturn true;\n\tlong i = 5;\n\twhile (i * i <= n) \n\t{\n\t\tif (n % i == 0 || n % (i + 2) == 0)\n\t\t\treturn true;\n\t\ti = i + 6;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1) \n\t{\n\t\treturn true;\n\t}\n\t\n\tfor (long i = 2; i <= sqrt(n); i++) \n\t{\n\t\tif (n % i == 0) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123981,
      "stdout": "",
      "stderr": "/tmp/tmp4ji02wfq.d(14): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4ji02wfq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2)\n\t\treturn true;\n\tfor (long i = 2; i < n; i++)\n\t{\n\t\tif (n % i == 0)\n\t\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2) return true;\n\tfor (long i = 2; i <= sqrt(n); i++)\n\t{\n\t\tif (n % i == 0) return true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123981,
      "stdout": "",
      "stderr": "/tmp/tmphv_x6cpq.d(10): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphv_x6cpq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1)\n\t\treturn true;\n\tif (n <= 3)\n\t\treturn false;\n\tif (n % 2 == 0 || n % 3 == 0)\n\t\treturn true;\n\tfor (long i = 5; i * i <= n; i = i + 6)\n\t\tif (n % i == 0 || n % (i + 2) == 0)\n\t\t\treturn true;\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1) \n\t{\n\t\treturn true;\n\t}\n\telse if (n <= 3) \n\t{\n\t\treturn false;\n\t}\n\telse if (n % 2 == 0 || n % 3 == 0) \n\t{\n\t\treturn true;\n\t}\n\tlong i = 5;\n\twhile (i * i <= n) \n\t{\n\t\tif (n % i == 0 || n % (i + 2) == 0) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\ti = i + 6;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1)\n\t\treturn true;\n\telse if (n <= 3)\n\t\treturn false;\n\telse if (n % 2 == 0 || n % 3 == 0)\n\t\treturn true;\n\tlong i = 5;\n\twhile (i * i <= n) {\n\t\tif (n % i == 0 || n % (i + 2) == 0)\n\t\t\treturn true;\n\t\ti = i + 6;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1)\n\t\treturn true;\n\telse if (n <= 3)\n\t\treturn false;\n\telse if (n % 2 == 0 || n % 3 == 0)\n\t\treturn true;\n\tlong i = 5;\n\twhile (i * i <= n)\n\t{\n\t\tif (n % i == 0 || n % (i + 2) == 0)\n\t\t\treturn true;\n\t\ti = i + 6;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2) return true;\n\tfor (long i = 2; i < n; i++)\n\t\tif (n % i == 0) return true;\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\tfor (long i = 3; i <= sqrt(n); i += 2) \n\t{\n\t\tif (n % i == 0) return true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpdajq3c5v.d(12): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdajq3c5v.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1) \n\t{\n\t\treturn true;\n\t}\n\telse if (n <= 3) \n\t{\n\t\treturn false;\n\t}\n\telse if (n % 2 == 0 || n % 3 == 0) \n\t{\n\t\treturn true;\n\t}\n\telse \n\t{\n\t\tfor (long i = 5; i * i <= n; i += 6) \n\t\t{\n\t\t\tif (n % i == 0 || n % (i + 2) == 0) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2)\n\t\treturn true;\n\t\n\tfor (long i = 2; i <= sqrt(n); i++)\n\t\tif (n % i == 0)\n\t\t\treturn true;\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123981,
      "stdout": "",
      "stderr": "/tmp/tmpzr8z8x_l.d(12): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzr8z8x_l.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\tfor (long i = 3; i <= sqrt(n); i += 2)\n\t{\n\t\tif (n % i == 0) return true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123981,
      "stdout": "",
      "stderr": "/tmp/tmptvxiln33.d(12): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptvxiln33.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\tfor (long i = 3; i <= sqrt(n); i += 2) \n\t{\n\t\tif (n % i == 0) return true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpdajq3c5v.d(12): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdajq3c5v.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1)\n\t\treturn true;\n\telse if (n <= 3)\n\t\treturn false;\n\telse if (n % 2 == 0 || n % 3 == 0)\n\t\treturn true;\n\tlong i = 5;\n\twhile (i * i <= n) {\n\t\tif (n % i == 0 || n % (i + 2) == 0)\n\t\t\treturn true;\n\t\ti = i + 6;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1)\n\t\treturn true;\n\t\n\tfor (long i = 2; i <= sqrt(n); i++)\n\t{\n\t\tif (n % i == 0)\n\t\t\treturn true;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123981,
      "stdout": "",
      "stderr": "/tmp/tmpuy5g_nki.d(12): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuy5g_nki.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\tfor (long i = 3; i <= sqrt(n); i += 2) \n\t{\n\t\tif (n % i == 0) return true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpdajq3c5v.d(12): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdajq3c5v.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1) \n\t{\n\t\treturn true;\n\t}\n\telse if (n <= 3) \n\t{\n\t\treturn false;\n\t}\n\telse if (n % 2 == 0 || n % 3 == 0) \n\t{\n\t\treturn true;\n\t}\n\telse \n\t{\n\t\tfor (long i = 5; i * i <= n; i += 6) \n\t\t{\n\t\t\tif (n % i == 0 || n % (i + 2) == 0) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1)\n\t\treturn true;\n\t\n\tfor (long i = 2; i <= sqrt(n); i++)\n\t{\n\t\tif (n % i == 0)\n\t\t\treturn true;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123981,
      "stdout": "",
      "stderr": "/tmp/tmpuy5g_nki.d(12): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuy5g_nki.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2) return true;\n\tfor (long i = 2; i < n; i++)\n\t{\n\t\tif (n % i == 0) return true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1)\n\t\treturn true;\n\telse if (n <= 3)\n\t\treturn false;\n\telse if (n % 2 == 0 || n % 3 == 0)\n\t\treturn true;\n\tlong i = 5;\n\twhile (i * i <= n)\n\t{\n\t\tif (n % i == 0 || n % (i + 2) == 0)\n\t\t\treturn true;\n\t\ti += 6;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2) \n\t{\n\t\treturn true;\n\t}\n\tfor (long i = 2; i < n; i++) \n\t{\n\t\tif (n % i == 0) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1)\n\t\treturn true;\n\tif (n == 2)\n\t\treturn false;\n\tif (n % 2 == 0)\n\t\treturn true;\n\tfor (long i = 3; i <= sqrt(n); i += 2)\n\t{\n\t\tif (n % i == 0)\n\t\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123981,
      "stdout": "",
      "stderr": "/tmp/tmppsxa4bj2.d(15): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppsxa4bj2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\tfor (long i = 3; i <= sqrt(n); i += 2) \n\t{\n\t\tif (n % i == 0) return true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpdajq3c5v.d(12): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdajq3c5v.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\t\n\tlong m = cast(long) sqrt(n);\n\tfor (long i = 3; i <= m; i += 2) {\n\t\tif (n % i == 0)\n\t\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123981,
      "stdout": "",
      "stderr": "/tmp/tmpvzqw9p3g.d(13): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvzqw9p3g.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2) \n\t{\n\t\treturn true;\n\t}\n\t\n\tfor (long i = 2; i <= sqrt(n); i++) \n\t{\n\t\tif (n % i == 0) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmp3se8f0m2.d(14): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3se8f0m2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2) \n\t{\n\t\treturn true;\n\t}\n\t\n\tfor (long i = 2; i <= sqrt(n); i++) \n\t{\n\t\tif (n % i == 0) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmp3se8f0m2.d(14): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3se8f0m2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2) return true;\n\tfor (long i = 2; i <= sqrt(n); i++) \n\t{\n\t\tif (n % i == 0) return true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmphki3xakh.d(10): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphki3xakh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\tfor (long i = 3; i <= sqrt(n); i += 2)\n\t{\n\t\tif (n % i == 0) return true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123981,
      "stdout": "",
      "stderr": "/tmp/tmptvxiln33.d(12): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptvxiln33.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2)\n\t\treturn true;\n\tif (n == 2)\n\t\treturn false;\n\tif (n % 2 == 0)\n\t\treturn true;\n\tfor (long i = 3; i <= sqrt(n); i += 2)\n\t\tif (n % i == 0)\n\t\t\treturn true;\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123981,
      "stdout": "",
      "stderr": "/tmp/tmpb701rktj.d(15): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb701rktj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\t\n\tlong i = 3;\n\twhile (i <= sqrt(n))\n\t{\n\t\tif (n % i == 0) return true;\n\t\ti += 2;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123981,
      "stdout": "",
      "stderr": "/tmp/tmpx4rrblx6.d(14): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx4rrblx6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\tfor (long i = 3; i <= sqrt(n); i += 2) \n\t{\n\t\tif (n % i == 0) return true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpdajq3c5v.d(12): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdajq3c5v.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2) return true;\n\tfor (long i = 2; i < n; i++) \n\t{\n\t\tif (n % i == 0) return true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tlong i = 2;\n\twhile (i < n)\n\t{\n\t\tif (n % i == 0)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\ti += 1;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1) \n\t{\n\t\treturn true;\n\t}\n\telse if (n <= 3) \n\t{\n\t\treturn false;\n\t}\n\telse if (n % 2 == 0 || n % 3 == 0) \n\t{\n\t\treturn true;\n\t}\n\tlong i = 5;\n\twhile (i * i <= n) \n\t{\n\t\tif (n % i == 0 || n % (i + 2) == 0) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\ti = i + 6;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1)\n\t\treturn true;\n\telse if (n <= 3)\n\t\treturn false;\n\telse if (n % 2 == 0 || n % 3 == 0)\n\t\treturn true;\n\tlong i = 5;\n\twhile (i * i <= n) \n\t{\n\t\tif (n % i == 0 || n % (i + 2) == 0)\n\t\t\treturn true;\n\t\ti = i + 6;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2)\n\t\treturn true;\n\tif (n == 2)\n\t\treturn false;\n\tif (n % 2 == 0)\n\t\treturn true;\n\tfor (long i = 3; i <= sqrt(n); i += 2)\n\t\tif (n % i == 0)\n\t\t\treturn true;\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123981,
      "stdout": "",
      "stderr": "/tmp/tmpb701rktj.d(15): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb701rktj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\tfor (long i = 3; i <= sqrt(n); i += 2) \n\t{\n\t\tif (n % i == 0) return true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpdajq3c5v.d(12): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdajq3c5v.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1) \n\t{\n\t\treturn true;\n\t}\n\telse if (n <= 3) \n\t{\n\t\treturn false;\n\t}\n\telse if (n % 2 == 0 || n % 3 == 0) \n\t{\n\t\treturn true;\n\t}\n\tlong i = 5;\n\twhile (i * i <= n) \n\t{\n\t\tif (n % i == 0 || n % (i + 2) == 0) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\ti = i + 6;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\t\n\tfor (long i = 3; i <= sqrt(n); i += 2)\n\t{\n\t\tif (n % i == 0)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123981,
      "stdout": "",
      "stderr": "/tmp/tmpow1iyw62.d(13): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpow1iyw62.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1) \n\t{\n\t\treturn true;\n\t}\n\telse if (n <= 3) \n\t{\n\t\treturn false;\n\t}\n\telse if (n % 2 == 0 || n % 3 == 0) \n\t{\n\t\treturn true;\n\t}\n\tlong i = 5;\n\twhile (i * i <= n) \n\t{\n\t\tif (n % i == 0 || n % (i + 2) == 0) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\ti = i + 6;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2) return true;\n\tfor (long i = 2; i < n; i++)\n\t{\n\t\tif (n % i == 0) return true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2)\n\t\treturn true;\n\tfor (long i = 2; i < n; i++)\n\t\tif (n % i == 0)\n\t\t\treturn true;\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1) return true;\n\tif (n <= 3) return false;\n\tif (n % 2 == 0 || n % 3 == 0) return true;\n\t\n\tlong i = 5;\n\twhile (i * i <= n) \n\t{\n\t\tif (n % i == 0 || n % (i + 2) == 0) return true;\n\t\ti += 6;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2) return true;\n\tfor (long i = 2; i < n; i++)\n\t{\n\t\tif (n % i == 0) return true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\tfor (long i = 3; i <= sqrt(n); i += 2)\n\t\tif (n % i == 0) return true;\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123981,
      "stdout": "",
      "stderr": "/tmp/tmpm1_x63mw.d(12): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm1_x63mw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2) \n\t\treturn true;\n\tfor (long i = 2; i <= sqrt(n); i++) \n\t{\n\t\tif (n % i == 0) \n\t\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpenece9v7.d(11): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpenece9v7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1)\n\t\treturn true;\n\tif (n <= 3)\n\t\treturn false;\n\tif (n % 2 == 0 || n % 3 == 0)\n\t\treturn true;\n\tfor (long i = 5; i * i <= n; i = i + 6)\n\t\tif (n % i == 0 || n % (i + 2) == 0)\n\t\t\treturn true;\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2) \n\t{\n\t\treturn true;\n\t}\n\tfor (long i = 2; i <= sqrt(n); i++) \n\t{\n\t\tif (n % i == 0) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123981,
      "stdout": "",
      "stderr": "/tmp/tmprmavgu86.d(13): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprmavgu86.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2) \n\t\treturn true;\n\tfor (long i = 2; i <= sqrt(n); i++) \n\t{\n\t\tif (n % i == 0) \n\t\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpenece9v7.d(11): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpenece9v7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\t\n\tlong m = sqrt(n);\n\t\n\tfor (long i = 3; i <= m; i += 2) \n\t{\n\t\tif (n % i == 0) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123981,
      "stdout": "",
      "stderr": "/tmp/tmpyghqq_ts.d(13): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyghqq_ts.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2) \n\t{\n\t\treturn true;\n\t}\n\tfor (long i = 2; i <= sqrt(n); i++) \n\t{\n\t\tif (n % i == 0) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123981,
      "stdout": "",
      "stderr": "/tmp/tmprmavgu86.d(13): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprmavgu86.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\t\n\tlong m = long(sqrt(n));\n\t\n\tfor (long i = 3; i <= m; i += 2) \n\t{\n\t\tif (n % i == 0) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123981,
      "stdout": "",
      "stderr": "/tmp/tmp3la9mwyq.d(13): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3la9mwyq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2)\n\t\treturn true;\n\t\n\tfor (long i = 2; i < n; i++)\n\t{\n\t\tif (n % i == 0)\n\t\t\treturn true;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\tfor (long i = 3; i <= sqrt(n); i += 2) \n\t{\n\t\tif (n % i == 0) return true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpdajq3c5v.d(12): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdajq3c5v.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2) \n\t{\n\t\treturn true;\n\t}\n\t\n\tfor (long i = 2; i < n; i++) \n\t{\n\t\tif (n % i == 0) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\tfor (long i = 3; i <= sqrt(n); i += 2)\n\t{\n\t\tif (n % i == 0) return true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123981,
      "stdout": "",
      "stderr": "/tmp/tmpm46jest5.d(12): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm46jest5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\tfor (long i = 3; i <= sqrt(n); i += 2)\n\t{\n\t\tif (n % i == 0)\n\t\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123981,
      "stdout": "",
      "stderr": "/tmp/tmp2mq679tj.d(12): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2mq679tj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2) return true;\n\tfor (long i = 2; i <= sqrt(n); i++)\n\t{\n\t\tif (n % i == 0)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123981,
      "stdout": "",
      "stderr": "/tmp/tmpjrqpcd5v.d(10): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjrqpcd5v.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2)\n\t\treturn true;\n\tfor (long i = 2; i < n; i++)\n\t{\n\t\tif (n % i == 0)\n\t\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1) \n\t{\n\t\treturn true;\n\t}\n\t\n\tfor (long i = 2; i <= sqrt(n); i++) \n\t{\n\t\tif (n % i == 0) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123981,
      "stdout": "",
      "stderr": "/tmp/tmp4ji02wfq.d(14): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4ji02wfq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\t\n\tlong m = cast(long)sqrt(n);\n\tfor (long i = 3; i <= m; i += 2) \n\t{\n\t\tif (n % i == 0)\n\t\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123981,
      "stdout": "",
      "stderr": "/tmp/tmpnj22mdtu.d(13): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnj22mdtu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2) return true;\n\tfor (long i = 2; i < n; i++)\n\t{\n\t\tif (n % i == 0) return true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1) \n\t{\n\t\treturn true;\n\t}\n\t\n\tif (n == 2) \n\t{\n\t\treturn false;\n\t}\n\t\n\tif (n % 2 == 0) \n\t{\n\t\treturn true;\n\t}\n\t\n\tlong m = sqrt(n);\n\t\n\tfor (long i = 3; i <= m; i += 2) \n\t{\n\t\tif (n % i == 0) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123981,
      "stdout": "",
      "stderr": "/tmp/tmp0vf03yby.d(24): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0vf03yby.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tbool is_not_prime = false;\n\t\n\tif (n < 2) \n\t{\n\t\tis_not_prime = true;\n\t}\n\telse \n\t{\n\t\tfor (long i = 2; i < n; i++) \n\t\t{\n\t\t\tif (n % i == 0) \n\t\t\t{\n\t\t\t\tis_not_prime = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn is_not_prime;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2)\n\t\treturn true;\n\t\n\tfor (long i = 2; i < n; i++)\n\t{\n\t\tif (n % i == 0)\n\t\t\treturn true;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2)\n\t\treturn true;\n\tfor (long i = 2; i <= sqrt(n); i++)\n\t\tif (n % i == 0)\n\t\t\treturn true;\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123981,
      "stdout": "",
      "stderr": "/tmp/tmpo9tn22im.d(11): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo9tn22im.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\t\n\tlong m = long(sqrt(n));\n\t\n\tfor (long i = 3; i <= m; i += 2)\n\t\tif (n % i == 0)\n\t\t\treturn true;\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123981,
      "stdout": "",
      "stderr": "/tmp/tmp3fqodw1h.d(13): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3fqodw1h.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1) \n\t{\n\t\treturn true;\n\t}\n\telse if (n <= 3) \n\t{\n\t\treturn false;\n\t}\n\telse if (n % 2 == 0 || n % 3 == 0) \n\t{\n\t\treturn true;\n\t}\n\tlong i = 5;\n\twhile (i * i <= n) \n\t{\n\t\tif (n % i == 0 || n % (i + 2) == 0) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\ti = i + 6;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n    if (n <= 1)\n        return true;\n    if (n <= 3)\n        return false;\n    if (n % 2 == 0 || n % 3 == 0)\n        return true;\n    for (long i = 5; i * i <= n; i = i + 6)\n        if (n % i == 0 || n % (i + 2) == 0)\n            return true;\n    return false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1)\n\t\treturn true;\n\telse if (n <= 3)\n\t\treturn false;\n\telse if (n % 2 == 0 || n % 3 == 0)\n\t\treturn true;\n\tlong i = 5;\n\twhile (i * i <= n) \n\t{\n\t\tif (n % i == 0 || n % (i + 2) == 0)\n\t\t\treturn true;\n\t\ti = i + 6;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2)\n\t\treturn true;\n\tfor (long i = 2; i <= sqrt(n); i++)\n\t{\n\t\tif (n % i == 0)\n\t\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123981,
      "stdout": "",
      "stderr": "/tmp/tmp5xp1m0fy.d(11): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5xp1m0fy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\t\n\tfor (long i = 3; i <= sqrt(n); i += 2)\n\t{\n\t\tif (n % i == 0)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123981,
      "stdout": "",
      "stderr": "/tmp/tmprtfd_gam.d(13): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprtfd_gam.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1) \n\t{\n\t\treturn true;\n\t}\n\tfor (long i = 2; i <= sqrt(n); i++) \n\t{\n\t\tif (n % i == 0) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123981,
      "stdout": "",
      "stderr": "/tmp/tmpq4gza1y9.d(13): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq4gza1y9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2) \n\t{\n\t\treturn true;\n\t}\n\tfor (long i = 2; i < n; i++) \n\t{\n\t\tif (n % i == 0) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\t\n\tfor (long i = 3; i <= sqrt(n); i += 2) \n\t{\n\t\tif (n % i == 0) return true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123981,
      "stdout": "",
      "stderr": "/tmp/tmpf8atfp4k.d(13): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf8atfp4k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1) \n\t{\n\t\treturn true;\n\t}\n\tfor (long i = 2; i <= sqrt(n); i++) \n\t{\n\t\tif (n % i == 0) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123981,
      "stdout": "",
      "stderr": "/tmp/tmpq4gza1y9.d(13): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq4gza1y9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\t\n\tfor (long i = 3; i <= sqrt(n); i += 2)\n\t{\n\t\tif (n % i == 0) return true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123981,
      "stdout": "",
      "stderr": "/tmp/tmpp_vkqxsc.d(13): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp_vkqxsc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\t\n\tlong i = 3;\n\tlong limit = sqrt(n);\n\twhile (i <= limit) {\n\t\tif (n % i == 0) return true;\n\t\ti += 2;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123981,
      "stdout": "",
      "stderr": "/tmp/tmphquitiao.d(14): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphquitiao.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1) \n\t{\n\t\treturn true;\n\t}\n\telse if (n <= 3) \n\t{\n\t\treturn false;\n\t}\n\telse if (n % 2 == 0 || n % 3 == 0) \n\t{\n\t\treturn true;\n\t}\n\tlong i = 5;\n\twhile (i * i <= n) \n\t{\n\t\tif (n % i == 0 || n % (i + 2) == 0) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\ti = i + 6;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1) return true;\n\tif (n <= 3) return false;\n\tif (n % 2 == 0 || n % 3 == 0) return true;\n\tfor (long i = 5; i * i <= n; i += 6) \n\t{\n\t\tif (n % i == 0 || n % (i + 2) == 0) return true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1)\n\t\treturn true;\n\tfor (long i = 2; i <= sqrt(n); i++)\n\t{\n\t\tif (n % i == 0)\n\t\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123981,
      "stdout": "",
      "stderr": "/tmp/tmpv90r779y.d(11): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv90r779y.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2) \n\t{\n\t\treturn true;\n\t}\n\t\n\tfor (long i = 2; i <= sqrt(n); i++) \n\t{\n\t\tif (n % i == 0) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmp3se8f0m2.d(14): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3se8f0m2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\t\n\tlong m = cast(long)sqrt(n);\n\tfor (long i = 3; i <= m; i += 2) \n\t{\n\t\tif (n % i == 0) return true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123981,
      "stdout": "",
      "stderr": "/tmp/tmpehjbjt0h.d(13): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpehjbjt0h.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1) \n\t{\n\t\treturn true;\n\t}\n\telse if (n <= 3) \n\t{\n\t\treturn false;\n\t}\n\telse if (n % 2 == 0 || n % 3 == 0) \n\t{\n\t\treturn true;\n\t}\n\tlong i = 5;\n\twhile (i * i <= n) \n\t{\n\t\tif (n % i == 0 || n % (i + 2) == 0) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\ti = i + 6;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2)\n\t\treturn true;\n\tfor (long i = 2; i <= sqrt(n); i++)\n\t{\n\t\tif (n % i == 0)\n\t\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123981,
      "stdout": "",
      "stderr": "/tmp/tmp5xp1m0fy.d(11): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5xp1m0fy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2) return true;\n\tfor (long i = 2; i <= sqrt(n); i++)\n\t{\n\t\tif (n % i == 0) return true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123981,
      "stdout": "",
      "stderr": "/tmp/tmphv_x6cpq.d(10): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphv_x6cpq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2) return true;\n\tfor (long i = 2; i < n; i++)\n\t\tif (n % i == 0) return true;\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1)\n\t\treturn true;\n\tif (n == 2)\n\t\treturn false;\n\tif (n % 2 == 0)\n\t\treturn true;\n\tfor (long i = 3; i <= sqrt(n); i += 2)\n\t{\n\t\tif (n % i == 0)\n\t\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123981,
      "stdout": "",
      "stderr": "/tmp/tmppsxa4bj2.d(15): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppsxa4bj2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\tfor (long i = 3; i <= sqrt(n); i += 2) {\n\t\tif (n % i == 0) return true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpp8oy5fk8.d(12): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp8oy5fk8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\t\n\tfor (long i = 3; i <= sqrt(n); i += 2) \n\t{\n\t\tif (n % i == 0) return true;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmp3f_p8wdq.d(13): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3f_p8wdq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1) \n\t{\n\t\treturn true;\n\t}\n\telse if (n <= 3) \n\t{\n\t\treturn false;\n\t}\n\telse if (n % 2 == 0 || n % 3 == 0) \n\t{\n\t\treturn true;\n\t}\n\tlong i = 5;\n\twhile (i * i <= n) \n\t{\n\t\tif (n % i == 0 || n % (i + 2) == 0) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\ti = i + 6;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1)\n\t\treturn true;\n\telse if (n <= 3)\n\t\treturn false;\n\telse if (n % 2 == 0 || n % 3 == 0)\n\t\treturn true;\n\tlong i = 5;\n\twhile (i * i <= n) {\n\t\tif (n % i == 0 || n % (i + 2) == 0)\n\t\t\treturn true;\n\t\ti = i + 6;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1) return true;\n\tif (n <= 3) return false;\n\tif (n % 2 == 0 || n % 3 == 0) return true;\n\tlong i = 5;\n\twhile (i * i <= n) \n\t{\n\t\tif (n % i == 0 || n % (i + 2) == 0) return true;\n\t\ti += 6;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\tfor (long i = 3; i <= sqrt(n); i += 2) \n\t{\n\t\tif (n % i == 0) return true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmpdajq3c5v.d(12): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdajq3c5v.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2) \n\t{\n\t\treturn true;\n\t}\n\t\n\tfor (long i = 2; i < n; i++) \n\t{\n\t\tif (n % i == 0) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2)\n\t\treturn true;\n\tfor (long i = 2; i < n; i++)\n\t{\n\t\tif (n % i == 0)\n\t\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123981,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif(n <= 1)\n\t\treturn true;\n\t\n\tfor(long i = 2; i <= sqrt(n); ++i)\n\t{\n\t\tif(n % i == 0)\n\t\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123981,
      "stdout": "",
      "stderr": "/tmp/tmp8x3z0tsx.d(12): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8x3z0tsx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n <= 1) return true;\n\tif (n == 2) return false;\n\tif (n % 2 == 0) return true;\n\tfor (long i = 3; i <= sqrt(n); i += 2) \n\t{\n\t\tif (n % i == 0) return true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123981,
      "stdout": "",
      "stderr": "/tmp/tmpwllwjll6.d(12): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwllwjll6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2) \n\t{\n\t\treturn true;\n\t}\n\tfor (long i = 2; i < sqrt(n) + 1; i++) \n\t{\n\t\tif (n % i == 0) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123981,
      "stdout": "",
      "stderr": "/tmp/tmpjn9tnvaw.d(13): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjn9tnvaw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to identify non-prime numbers.\n\t\n*/\nbool is_not_prime(long n) \n{\n\tif (n < 2) \n\t{\n\t\treturn true;\n\t}\n\t\n\tfor (long i = 2; i <= sqrt(n); i++) \n\t{\n\t\tif (n % i == 0) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517130,
      "stdout": "",
      "stderr": "/tmp/tmp3se8f0m2.d(14): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3se8f0m2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}