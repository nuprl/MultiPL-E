{
  "name": "mbpp_395_first_non_repeating_character",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first non-repeated character in a given string.\n\t\n*/\nNullable!(string) first_non_repeating_character(string str1) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_395_first_non_repeating_character.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = first_non_repeating_character;\n\n{\n        auto result = candidate(\"abcabc\");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"abc\");\n        assert(!result.isNull && result.get == \"a\");\n}\n\n{\n        auto result = candidate(\"ababc\");\n        assert(!result.isNull && result.get == \"c\");\n}\n\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tNullable!(string) result = Nullable!(string).init;\n\t\n\tforeach(ch; str1)\n\t{\n\t\tif(str1.count(ch) == 1)\n\t\t{\n\t\t\tresult.set(ch);\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tNullable!(string) result = Nullable!(string).init;\n\t\n\tforeach(ch; str1)\n\t{\n\t\tif(str1.count(ch) == 1)\n\t\t{\n\t\t\tresult = ch;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tstring str = str1.toLower();\n\t\n\tforeach(ch; str)\n\t{\n\t\tif(str.count(ch) == 1)\n\t\t{\n\t\t\treturn ch;\n\t\t}\n\t}\n\t\n\treturn Nullable!(string).init;\n}",
    "{\n\tint[] count = new int[256];\n\tforeach(c; str1)\n\t{\n\t\tcount[c]++;\n\t}\n\tforeach(c; str1)\n\t{\n\t\tif(count[c] == 1)\n\t\t{\n\t\t\treturn c;\n\t\t}\n\t}\n\treturn null;\n}",
    "{\n\tNullable!(string) result;\n\tint[] arr = new int[str1.length];\n\tint i = 0;\n\tforeach(c; str1)\n\t{\n\t\tint count = 0;\n\t\tforeach(c2; str1)\n\t\t{\n\t\t\tif(c == c2)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tarr[i] = count;\n\t\ti++;\n\t}\n\tforeach(c; str1)\n\t{\n\t\tif(arr[i] == 1)\n\t\t{\n\t\t\tresult = c;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}",
    "{\n\tauto result = Nullable!(string)();\n\t\n\tauto char_count = new int[str1.length];\n\t\n\tforeach(i, c; str1)\n\t{\n\t\tchar_count[i] = 0;\n\t}\n\t\n\tforeach(i, c; str1)\n\t{\n\t\tchar_count[c]++;\n\t}\n\t\n\tforeach(i, c; str1)\n\t{\n\t\tif(char_count[c] == 1)\n\t\t{\n\t\t\tresult.set(str1[i..i+1]);\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tstring[] str_arr = str1.split(\"\");\n\tstring[] str_arr_unique = str_arr.dup;\n\tstr_arr_unique.sort;\n\tstr_arr_unique.uniq;\n\t\n\tforeach(str; str_arr_unique)\n\t{\n\t\tif(str_arr.count(str) == 1)\n\t\t\treturn str;\n\t}\n\treturn null;\n}",
    "{\n\tNullable!(string) result = Nullable!(string).init;\n\t\n\tforeach (ch; str1)\n\t{\n\t\tif (str1.count(ch) == 1)\n\t\t{\n\t\t\tresult = ch;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tint[] char_count = new int[256];\n\tint i;\n\t\n\tforeach(c; str1)\n\t{\n\t\ti = cast(int)c;\n\t\tchar_count[i]++;\n\t}\n\t\n\tforeach(c; str1)\n\t{\n\t\ti = cast(int)c;\n\t\tif(char_count[i] == 1)\n\t\t\treturn c;\n\t}\n\t\n\treturn Nullable!(string)();\n}",
    "{\n\tNullable!(string) result;\n\tint[] char_count = new int[256];\n\tint i;\n\t\n\tforeach(c; str1)\n\t{\n\t\tchar_count[cast(int)c]++;\n\t}\n\t\n\tforeach(c; str1)\n\t{\n\t\tif(char_count[cast(int)c] == 1)\n\t\t{\n\t\t\tresult = c;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tstring str = str1.toLower();\n\tint[] count = new int[256];\n\tint i;\n\tforeach(c; str)\n\t{\n\t\tcount[c]++;\n\t}\n\tforeach(c; str)\n\t{\n\t\tif(count[c] == 1)\n\t\t{\n\t\t\treturn c;\n\t\t}\n\t}\n\treturn null;\n}",
    "{\n\tint[] arr = new int[256];\n\tforeach(c; str1)\n\t{\n\t\tarr[cast(int)c]++;\n\t}\n\tforeach(c; str1)\n\t{\n\t\tif(arr[cast(int)c] == 1)\n\t\t{\n\t\t\treturn c;\n\t\t}\n\t}\n\treturn null;\n}",
    "{\n\tstring[] str_arr = str1.split(\"\");\n\tstring[] str_arr_unique = str_arr.unique;\n\tforeach(str; str_arr_unique)\n\t{\n\t\tif(str_arr.count(str) == 1)\n\t\t{\n\t\t\treturn str;\n\t\t}\n\t}\n\treturn null;\n}",
    "{\n\tstring str = str1.toLower();\n\tint[] count = new int[256];\n\tint i;\n\t\n\tforeach(c; str)\n\t{\n\t\tcount[c]++;\n\t}\n\t\n\tforeach(c; str)\n\t{\n\t\tif(count[c] == 1)\n\t\t{\n\t\t\treturn c;\n\t\t}\n\t}\n\t\n\treturn null;\n}",
    "{\n\tstring[] str_array = str1.split();\n\tforeach(str; str_array)\n\t{\n\t\tif(str_array.count(str) == 1)\n\t\t{\n\t\t\treturn str;\n\t\t}\n\t}\n\treturn Nullable!(string).init;\n}",
    "{\n\tNullable!(string) result;\n\t\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(count(str1, c) == 1)\n\t\t{\n\t\t\tresult = c;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tstring[] str_arr = str1.split(\"\");\n\tstring[] str_arr_uniq = str_arr.uniq;\n\t\n\tforeach(str; str_arr_uniq)\n\t{\n\t\tif(str_arr.count(str) == 1)\n\t\t{\n\t\t\treturn str;\n\t\t}\n\t}\n\treturn Nullable!(string).init;\n}",
    "{\n\tNullable!(string) result;\n\tint[] char_count = new int[256];\n\tint i;\n\t\n\tforeach(c; str1)\n\t{\n\t\tchar_count[cast(int)c]++;\n\t}\n\t\n\tfor(i = 0; i < str1.length; i++)\n\t{\n\t\tif(char_count[cast(int)str1[i]] == 1)\n\t\t{\n\t\t\tresult = str1[i];\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tstring[] str_arr = str1.split(\"\");\n\tstring[] str_arr_unique = str_arr.dup;\n\tstr_arr_unique.sort;\n\tstr_arr_unique.unique;\n\t\n\tforeach(i, c; str_arr)\n\t{\n\t\tif(c == str_arr_unique[i])\n\t\t{\n\t\t\treturn c;\n\t\t}\n\t}\n\t\n\treturn null;\n}",
    "{\n\tstring str2 = str1.dup;\n\tstring str3 = str1.dup;\n\t\n\tforeach(char c; str1)\n\t{\n\t\tstr2.replace(c, \"\");\n\t\tstr3.replace(c, \"\");\n\t\tif(str2.length == str3.length)\n\t\t{\n\t\t\treturn c;\n\t\t}\n\t\tstr2 = str1.dup;\n\t\tstr3 = str1.dup;\n\t}\n\treturn null;\n}"
  ]
}