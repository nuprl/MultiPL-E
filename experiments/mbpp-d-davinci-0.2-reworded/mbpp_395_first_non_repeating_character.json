{
  "name": "mbpp_395_first_non_repeating_character",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first non-repeated character in a given string.\n\t\n*/\nNullable!(string) first_non_repeating_character(string str1) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_395_first_non_repeating_character.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = first_non_repeating_character;\n\n{\n        auto result = candidate(\"abcabc\");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"abc\");\n        assert(!result.isNull && result.get == \"a\");\n}\n\n{\n        auto result = candidate(\"ababc\");\n        assert(!result.isNull && result.get == \"c\");\n}\n\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tNullable!(string) result = Nullable!(string).init;\n\t\n\tforeach(ch; str1)\n\t{\n\t\tif(str1.count(ch) == 1)\n\t\t{\n\t\t\tresult.set(ch);\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tNullable!(string) result = Nullable!(string).init;\n\t\n\tforeach(ch; str1)\n\t{\n\t\tif(str1.count(ch) == 1)\n\t\t{\n\t\t\tresult = ch;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tstring str = str1.toLower();\n\t\n\tforeach(ch; str)\n\t{\n\t\tif(str.count(ch) == 1)\n\t\t{\n\t\t\treturn ch;\n\t\t}\n\t}\n\t\n\treturn Nullable!(string).init;\n}",
    "{\n\tint[] count = new int[256];\n\tforeach(c; str1)\n\t{\n\t\tcount[c]++;\n\t}\n\tforeach(c; str1)\n\t{\n\t\tif(count[c] == 1)\n\t\t{\n\t\t\treturn c;\n\t\t}\n\t}\n\treturn null;\n}",
    "{\n\tNullable!(string) result;\n\tint[] arr = new int[str1.length];\n\tint i = 0;\n\tforeach(c; str1)\n\t{\n\t\tint count = 0;\n\t\tforeach(c2; str1)\n\t\t{\n\t\t\tif(c == c2)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tarr[i] = count;\n\t\ti++;\n\t}\n\tforeach(c; str1)\n\t{\n\t\tif(arr[i] == 1)\n\t\t{\n\t\t\tresult = c;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}",
    "{\n\tauto result = Nullable!(string)();\n\t\n\tauto char_count = new int[str1.length];\n\t\n\tforeach(i, c; str1)\n\t{\n\t\tchar_count[i] = 0;\n\t}\n\t\n\tforeach(i, c; str1)\n\t{\n\t\tchar_count[c]++;\n\t}\n\t\n\tforeach(i, c; str1)\n\t{\n\t\tif(char_count[c] == 1)\n\t\t{\n\t\t\tresult.set(str1[i..i+1]);\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tstring[] str_arr = str1.split(\"\");\n\tstring[] str_arr_unique = str_arr.dup;\n\tstr_arr_unique.sort;\n\tstr_arr_unique.uniq;\n\t\n\tforeach(str; str_arr_unique)\n\t{\n\t\tif(str_arr.count(str) == 1)\n\t\t\treturn str;\n\t}\n\treturn null;\n}",
    "{\n\tNullable!(string) result = Nullable!(string).init;\n\t\n\tforeach (ch; str1)\n\t{\n\t\tif (str1.count(ch) == 1)\n\t\t{\n\t\t\tresult = ch;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tint[] char_count = new int[256];\n\tint i;\n\t\n\tforeach(c; str1)\n\t{\n\t\ti = cast(int)c;\n\t\tchar_count[i]++;\n\t}\n\t\n\tforeach(c; str1)\n\t{\n\t\ti = cast(int)c;\n\t\tif(char_count[i] == 1)\n\t\t\treturn c;\n\t}\n\t\n\treturn Nullable!(string)();\n}",
    "{\n\tNullable!(string) result;\n\tint[] char_count = new int[256];\n\tint i;\n\t\n\tforeach(c; str1)\n\t{\n\t\tchar_count[cast(int)c]++;\n\t}\n\t\n\tforeach(c; str1)\n\t{\n\t\tif(char_count[cast(int)c] == 1)\n\t\t{\n\t\t\tresult = c;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tstring str = str1.toLower();\n\tint[] count = new int[256];\n\tint i;\n\tforeach(c; str)\n\t{\n\t\tcount[c]++;\n\t}\n\tforeach(c; str)\n\t{\n\t\tif(count[c] == 1)\n\t\t{\n\t\t\treturn c;\n\t\t}\n\t}\n\treturn null;\n}",
    "{\n\tint[] arr = new int[256];\n\tforeach(c; str1)\n\t{\n\t\tarr[cast(int)c]++;\n\t}\n\tforeach(c; str1)\n\t{\n\t\tif(arr[cast(int)c] == 1)\n\t\t{\n\t\t\treturn c;\n\t\t}\n\t}\n\treturn null;\n}",
    "{\n\tstring[] str_arr = str1.split(\"\");\n\tstring[] str_arr_unique = str_arr.unique;\n\tforeach(str; str_arr_unique)\n\t{\n\t\tif(str_arr.count(str) == 1)\n\t\t{\n\t\t\treturn str;\n\t\t}\n\t}\n\treturn null;\n}",
    "{\n\tstring str = str1.toLower();\n\tint[] count = new int[256];\n\tint i;\n\t\n\tforeach(c; str)\n\t{\n\t\tcount[c]++;\n\t}\n\t\n\tforeach(c; str)\n\t{\n\t\tif(count[c] == 1)\n\t\t{\n\t\t\treturn c;\n\t\t}\n\t}\n\t\n\treturn null;\n}",
    "{\n\tstring[] str_array = str1.split();\n\tforeach(str; str_array)\n\t{\n\t\tif(str_array.count(str) == 1)\n\t\t{\n\t\t\treturn str;\n\t\t}\n\t}\n\treturn Nullable!(string).init;\n}",
    "{\n\tNullable!(string) result;\n\t\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(count(str1, c) == 1)\n\t\t{\n\t\t\tresult = c;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tstring[] str_arr = str1.split(\"\");\n\tstring[] str_arr_uniq = str_arr.uniq;\n\t\n\tforeach(str; str_arr_uniq)\n\t{\n\t\tif(str_arr.count(str) == 1)\n\t\t{\n\t\t\treturn str;\n\t\t}\n\t}\n\treturn Nullable!(string).init;\n}",
    "{\n\tNullable!(string) result;\n\tint[] char_count = new int[256];\n\tint i;\n\t\n\tforeach(c; str1)\n\t{\n\t\tchar_count[cast(int)c]++;\n\t}\n\t\n\tfor(i = 0; i < str1.length; i++)\n\t{\n\t\tif(char_count[cast(int)str1[i]] == 1)\n\t\t{\n\t\t\tresult = str1[i];\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tstring[] str_arr = str1.split(\"\");\n\tstring[] str_arr_unique = str_arr.dup;\n\tstr_arr_unique.sort;\n\tstr_arr_unique.unique;\n\t\n\tforeach(i, c; str_arr)\n\t{\n\t\tif(c == str_arr_unique[i])\n\t\t{\n\t\t\treturn c;\n\t\t}\n\t}\n\t\n\treturn null;\n}",
    "{\n\tstring str2 = str1.dup;\n\tstring str3 = str1.dup;\n\t\n\tforeach(char c; str1)\n\t{\n\t\tstr2.replace(c, \"\");\n\t\tstr3.replace(c, \"\");\n\t\tif(str2.length == str3.length)\n\t\t{\n\t\t\treturn c;\n\t\t}\n\t\tstr2 = str1.dup;\n\t\tstr3 = str1.dup;\n\t}\n\treturn null;\n}",
    "{\n\tstring str = str1.dup;\n\tint len = str.length;\n\tint i = 0;\n\tint j = 0;\n\tint count = 0;\n\t\n\tfor (i = 0; i < len; i++)\n\t{\n\t\tcount = 0;\n\t\tfor (j = 0; j < len; j++)\n\t\t{\n\t\t\tif (str[i] == str[j])\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tif (count == 1)\n\t\t{\n\t\t\treturn str[i];\n\t\t}\n\t}\n\treturn Nullable!(string)();\n}",
    "{\n\t// Create a dictionary to store the count of each character\n\tauto dict = new Dictionary!(string, int)();\n\t\n\t// Iterate through the string\n\tforeach(c; str1)\n\t{\n\t\t// If the character is not in the dictionary, add it with a count of 1\n\t\tif(!dict.contains(c))\n\t\t{\n\t\t\tdict[c] = 1;\n\t\t}\n\t\t// Otherwise, increment the count\n\t\telse\n\t\t{\n\t\t\tdict[c]++;\n\t\t}\n\t}\n\t\n\t// Iterate through the string again\n\tforeach(c; str1)\n\t{\n\t\t// If the count of the character is 1, return it\n\t\tif(dict[c] == 1)\n\t\t{\n\t\t\treturn c;\n\t\t}\n\t}\n\t\n\t// If no character is found, return null\n\treturn null;\n}",
    "{\n\tauto str = str1.dup;\n\t\n\tforeach(i, c; str)\n\t{\n\t\tif(str.count(c) == 1)\n\t\t\treturn c;\n\t}\n\t\n\treturn null;\n}",
    "{\n\tNullable!(string) result = Nullable!(string).init;\n\t\n\tforeach(ch; str1)\n\t{\n\t\tif(str1.count(ch) == 1)\n\t\t{\n\t\t\tresult = ch;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tNullable!(string) result = Nullable!(string).init;\n\t\n\tforeach(ch; str1)\n\t{\n\t\tif(count(str1, ch) == 1)\n\t\t{\n\t\t\tresult = ch;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tNullable!(string) result = Nullable!(string)();\n\t\n\tforeach(ch; str1)\n\t{\n\t\tif(str1.count(ch) == 1)\n\t\t{\n\t\t\tresult = ch;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tstring[] str2 = str1.split();\n\tforeach(i, str; str2)\n\t{\n\t\tif(str1.count(str) == 1)\n\t\t{\n\t\t\treturn str;\n\t\t}\n\t}\n\treturn null;\n}",
    "{\n\tstring str2 = str1.dup;\n\tint count = 0;\n\tint i = 0;\n\tint j = 0;\n\tint len = str1.length;\n\twhile(i < len)\n\t{\n\t\tj = 0;\n\t\tcount = 0;\n\t\twhile(j < len)\n\t\t{\n\t\t\tif(str1[i] == str2[j])\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t\tstr2[j] = 0;\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\t\tif(count == 1)\n\t\t{\n\t\t\treturn str1[i];\n\t\t}\n\t\ti++;\n\t}\n\treturn null;\n}",
    "{\n\tstring[] str_arr = str1.split(\"\");\n\tstring[] str_arr_unique = str_arr.unique;\n\t\n\tforeach(str; str_arr_unique)\n\t{\n\t\tif(str_arr.count(str) == 1)\n\t\t\treturn str;\n\t}\n\t\n\treturn null;\n}",
    "{\n\tauto result = Nullable!(string)();\n\tauto char_count = new int[256];\n\tforeach(i; 0 .. 256)\n\t{\n\t\tchar_count[i] = 0;\n\t}\n\tforeach(i; 0 .. str1.length)\n\t{\n\t\tchar_count[str1[i]]++;\n\t}\n\tforeach(i; 0 .. str1.length)\n\t{\n\t\tif(char_count[str1[i]] == 1)\n\t\t{\n\t\t\tresult = str1[i];\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] str_arr = str1.split(\"\");\n\tstring[] str_arr2 = str1.split(\"\");\n\tint[] count = new int[str_arr.length];\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint l = 0;\n\tint m = 0;\n\tint n = 0;\n\tint o = 0;\n\tint p = 0;\n\tint q = 0;\n\tint r = 0;\n\tint s = 0;\n\tint t = 0;\n\tint u = 0;\n\tint v = 0;\n\tint w = 0;\n\tint x = 0;\n\tint y = 0;\n\tint z = 0;\n\tint a = 0;\n\tint b = 0;\n\tint c = 0;\n\tint d = 0;\n\tint e = 0;\n\tint f = 0;\n\tint g = 0;\n\tint h = 0;\n\tint ii = 0;\n\tint jj = 0;\n\tint kk = 0;\n\tint ll = 0;\n\tint mm = 0;\n\tint nn = 0;\n\tint oo = 0;\n\tint pp = 0;\n\tint qq = 0;\n\tint rr = 0;\n\tint ss = 0;\n\tint tt = 0;\n\tint uu = 0;\n\tint vv = 0;\n\tint ww = 0;\n\tint xx = 0;\n\tint yy = 0;\n\tint zz = 0;\n\tint aa = 0;\n\tint bb = 0;\n\tint cc = 0;\n\tint dd = 0;\n\tint ee = 0;\n\tint ff = 0;\n\tint gg = 0;\n\tint hh = 0;\n\tint iii = 0;\n\tint jjj = 0;\n\tint kkk = 0;\n\tint lll = 0;\n\tint mmm = 0;\n\tint nnn = 0;\n\tint ooo = 0;\n\tint ppp = 0;\n\tint qqq = 0;\n\tint rrr = 0;\n\tint sss =",
    "{\n\tstring[] str2 = str1.split(\"\");\n\tstring[] str3 = str1.split(\"\");\n\t\n\tforeach(i, index; str2)\n\t{\n\t\tif(str2[i] == str3[i])\n\t\t{\n\t\t\treturn str2[i];\n\t\t}\n\t}\n\treturn null;\n}",
    "{\n\tstring str = str1.toLower();\n\tforeach(i, ch; str)\n\t{\n\t\tif(str.count(ch) == 1)\n\t\t{\n\t\t\treturn ch;\n\t\t}\n\t}\n\treturn Nullable!(string)();\n}",
    "{\n\tNullable!(string) result;\n\tint[] char_count = new int[256];\n\tforeach(c; str1)\n\t{\n\t\tchar_count[cast(int)c]++;\n\t}\n\tforeach(c; str1)\n\t{\n\t\tif(char_count[cast(int)c] == 1)\n\t\t{\n\t\t\tresult = c;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tif (str1.length == 0)\n\t\treturn null;\n\t\n\tstring str2 = str1.dup;\n\t\n\tforeach (i, c; str1)\n\t{\n\t\tstr2.remove(c);\n\t\tif (str2.count(c) == 0)\n\t\t\treturn c;\n\t\telse\n\t\t\tstr2.insert(i, c);\n\t}\n\t\n\treturn null;\n}",
    "{\n\tNullable!(string) result = Nullable!(string).init;\n\t\n\tforeach(ch; str1)\n\t{\n\t\tif(count(str1, ch) == 1)\n\t\t{\n\t\t\tresult = ch;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tstring str2 = str1.dup;\n\tstring str3 = str1.dup;\n\tstring str4 = str1.dup;\n\t\n\tstr2.sort();\n\tstr3.sort();\n\tstr4.sort();\n\t\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\t\n\twhile(i < str2.length)\n\t{\n\t\tif(str2[i] == str2[i+1])\n\t\t{\n\t\t\tstr3.remove(j,1);\n\t\t\tstr4.remove(k,1);\n\t\t\tj--;\n\t\t\tk--;\n\t\t}\n\t\ti++;\n\t\tj++;\n\t\tk++;\n\t}\n\t\n\tif(str3.length == 0)\n\t{\n\t\treturn Nullable!(string)();\n\t}\n\telse\n\t{\n\t\treturn Nullable!(string)(str3[0]);\n\t}\n}",
    "{\n\tNullable!(string) result;\n\tint[] count = new int[256];\n\tint i;\n\t\n\tforeach(c; str1)\n\t{\n\t\tcount[cast(int)c]++;\n\t}\n\t\n\tfor(i = 0; i < str1.length; i++)\n\t{\n\t\tif(count[cast(int)str1[i]] == 1)\n\t\t{\n\t\t\tresult = str1[i];\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tNullable!(string) result = Nullable!(string).init;\n\t\n\tforeach(ch; str1)\n\t{\n\t\tif(count(str1, ch) == 1)\n\t\t{\n\t\t\tresult = ch;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tauto char_count = new int[256];\n\tforeach(i, c; str1)\n\t{\n\t\tchar_count[c]++;\n\t}\n\tforeach(i, c; str1)\n\t{\n\t\tif(char_count[c] == 1)\n\t\t{\n\t\t\treturn str1[i..$];\n\t\t}\n\t}\n\treturn null;\n}",
    "{\n\tint[] char_count = new int[256];\n\tforeach(c; str1)\n\t{\n\t\tchar_count[cast(int)c]++;\n\t}\n\tforeach(c; str1)\n\t{\n\t\tif(char_count[cast(int)c] == 1)\n\t\t{\n\t\t\treturn c;\n\t\t}\n\t}\n\treturn null;\n}",
    "{\n\tstring[] str_arr = str1.split(\"\");\n\tstring[] str_arr_unique = str_arr.dup;\n\tstr_arr_unique.sort;\n\tstr_arr_unique.unique;\n\t\n\tforeach(str; str_arr_unique)\n\t{\n\t\tif(str1.count(str) == 1)\n\t\t{\n\t\t\treturn str;\n\t\t}\n\t}\n\treturn null;\n}",
    "{\n\tNullable!(string) result;\n\t\n\tforeach(char c; str1)\n\t{\n\t\tif(count(str1, c) == 1)\n\t\t{\n\t\t\tresult = c;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tstring str2 = str1.dup;\n\tstring str3 = str1.dup;\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint l = 0;\n\tint m = 0;\n\tint n = 0;\n\tint o = 0;\n\tint p = 0;\n\tint q = 0;\n\tint r = 0;\n\tint s = 0;\n\tint t = 0;\n\tint u = 0;\n\tint v = 0;\n\tint w = 0;\n\tint x = 0;\n\tint y = 0;\n\tint z = 0;\n\tint a = 0;\n\tint b = 0;\n\tint c = 0;\n\tint d = 0;\n\tint e = 0;\n\tint f = 0;\n\tint g = 0;\n\tint h = 0;\n\tint ii = 0;\n\tint jj = 0;\n\tint kk = 0;\n\tint ll = 0;\n\tint mm = 0;\n\tint nn = 0;\n\tint oo = 0;\n\tint pp = 0;\n\tint qq = 0;\n\tint rr = 0;\n\tint ss = 0;\n\tint tt = 0;\n\tint uu = 0;\n\tint vv = 0;\n\tint ww = 0;\n\tint xx = 0;\n\tint yy = 0;\n\tint zz = 0;\n\tint aa = 0;\n\tint bb = 0;\n\tint cc = 0;\n\tint dd = 0;\n\tint ee = 0;\n\tint ff = 0;\n\tint gg = 0;\n\tint hh = 0;\n\tint iii = 0;\n\tint jjj = 0;\n\tint kkk = 0;\n\tint lll = 0;\n\tint mmm = 0;\n\tint nnn = 0;\n\tint ooo = 0;\n\tint ppp = 0;\n\tint qqq = 0;\n\tint rrr = 0;\n\tint sss = 0;\n\tint ttt = 0;\n\tint uuu = 0;\n\t",
    "{\n\tNullable!(string) result = Nullable!(string).init;\n\t\n\tforeach(ch; str1)\n\t{\n\t\tif(str1.count(ch) == 1)\n\t\t{\n\t\t\tresult = ch;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tNullable!(string) result = Nullable!(string).init;\n\t\n\t// Create a dictionary to store the count of each character\n\t// in the string\n\tDictionary!(string, int) char_counts = Dictionary!(string, int).init;\n\t\n\t// Iterate through the string and add the character to the dictionary\n\t// if it doesn't exist, or increment the count if it does\n\tforeach(char; str1)\n\t{\n\t\tif(char_counts.contains(char))\n\t\t{\n\t\t\tchar_counts[char]++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tchar_counts[char] = 1;\n\t\t}\n\t}\n\t\n\t// Iterate through the string again and return the first character\n\t// that has a count of 1\n\tforeach(char; str1)\n\t{\n\t\tif(char_counts[char] == 1)\n\t\t{\n\t\t\tresult = char;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tstring[] str_array = str1.split(\"\");\n\tstring[] str_array_unique = str_array.dup;\n\tstr_array_unique.sort;\n\tstr_array_unique = str_array_unique.uniq;\n\t\n\tforeach(char; str_array_unique) \n\t{\n\t\tint count = 0;\n\t\tforeach(char2; str_array) \n\t\t{\n\t\t\tif(char == char2) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tif(count == 1) \n\t\t{\n\t\t\treturn char;\n\t\t}\n\t}\n\treturn null;\n}",
    "{\n\tstring[] str_array = str1.split(\"\");\n\tstring[] unique_array = str1.split(\"\").unique;\n\tforeach(str; unique_array)\n\t{\n\t\tint count = 0;\n\t\tforeach(s; str_array)\n\t\t{\n\t\t\tif(s == str)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tif(count == 1)\n\t\t{\n\t\t\treturn str;\n\t\t}\n\t}\n\treturn null;\n}",
    "{\n\tint[] char_count = new int[256];\n\tint i;\n\tint len = str1.length;\n\tfor (i = 0; i < len; i++)\n\t{\n\t\tchar_count[str1[i]]++;\n\t}\n\tfor (i = 0; i < len; i++)\n\t{\n\t\tif (char_count[str1[i]] == 1)\n\t\t{\n\t\t\treturn str1[i..i+1];\n\t\t}\n\t}\n\treturn null;\n}",
    "{\n\tstring str2 = str1.dup;\n\tint i = 0;\n\tint j = 0;\n\tint len = str2.length;\n\tint count = 0;\n\twhile (i < len)\n\t{\n\t\tj = 0;\n\t\tcount = 0;\n\t\twhile (j < len)\n\t\t{\n\t\t\tif (str2[i] == str2[j])\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\t\tif (count == 1)\n\t\t{\n\t\t\treturn str2[i];\n\t\t}\n\t\ti++;\n\t}\n\treturn Nullable!(string).init;\n}",
    "{\n\tstring str = str1.toLower();\n\tint[] count = new int[str.length];\n\tint i, index;\n\t\n\tfor (i = 0; i < str.length; i++)\n\t{\n\t\tindex = str[i] - 'a';\n\t\tcount[index]++;\n\t}\n\t\n\tfor (i = 0; i < str.length; i++)\n\t{\n\t\tindex = str[i] - 'a';\n\t\tif (count[index] == 1)\n\t\t\treturn str[i];\n\t}\n\treturn null;\n}",
    "{\n\tauto str = str1.dup;\n\tint i, j;\n\t\n\tfor (i = 0; i < str.length; i++) \n\t{\n\t\tfor (j = 0; j < str.length; j++) \n\t\t{\n\t\t\tif (i != j && str[i] == str[j]) \n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (j == str.length) \n\t\t{\n\t\t\treturn str[i..i+1];\n\t\t}\n\t}\n\treturn Nullable!(string).init;\n}",
    "{\n\tNullable!(string) result;\n\tint[] char_count = new int[256];\n\tforeach(c; str1)\n\t{\n\t\tchar_count[cast(int)c]++;\n\t}\n\tforeach(c; str1)\n\t{\n\t\tif(char_count[cast(int)c] == 1)\n\t\t{\n\t\t\tresult = c;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] str2 = str1.split(\"\");\n\tforeach(i, c; str2)\n\t{\n\t\tif(str2.count(c) == 1)\n\t\t{\n\t\t\treturn c;\n\t\t}\n\t}\n\treturn null;\n}",
    "{\n\tstring[] str2 = str1.split(\"\");\n\tint[] counts = new int[str2.length];\n\tint i = 0;\n\tforeach(str; str2)\n\t{\n\t\tcounts[i] = 0;\n\t\tforeach(str3; str2)\n\t\t{\n\t\t\tif(str == str3)\n\t\t\t{\n\t\t\t\tcounts[i]++;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\tint min = minElement(counts);\n\tif(min == 1)\n\t{\n\t\tint index = 0;\n\t\tforeach(count; counts)\n\t\t{\n\t\t\tif(count == min)\n\t\t\t{\n\t\t\t\treturn str2[index];\n\t\t\t}\n\t\t\tindex++;\n\t\t}\n\t}\n\treturn null;\n}",
    "{\n\tint[] count = new int[256];\n\tforeach(c; str1)\n\t{\n\t\tcount[c]++;\n\t}\n\tforeach(c; str1)\n\t{\n\t\tif(count[c] == 1)\n\t\t{\n\t\t\treturn c;\n\t\t}\n\t}\n\treturn null;\n}",
    "{\n\tNullable!(string) result;\n\t\n\tforeach(c; str1)\n\t{\n\t\tif(count(str1, c) == 1)\n\t\t{\n\t\t\tresult = c;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tstring[] str1_array = str1.split();\n\tforeach(str; str1_array)\n\t{\n\t\tif(str1_array.count(str) == 1)\n\t\t{\n\t\t\treturn str;\n\t\t}\n\t}\n\treturn Nullable!(string).init;\n}",
    "{\n\tauto str = str1.dup;\n\t\n\tint[] count = new int[str.length];\n\t\n\tforeach(i, c; str)\n\t{\n\t\tcount[i] = 0;\n\t\tforeach(j, d; str)\n\t\t{\n\t\t\tif(c == d)\n\t\t\t{\n\t\t\t\tcount[i]++;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i, c; str)\n\t{\n\t\tif(count[i] == 1)\n\t\t{\n\t\t\treturn str[i..i+1];\n\t\t}\n\t}\n\t\n\treturn null;\n}",
    "{\n\tstring[] str2 = str1.split(\"\");\n\tforeach(i, c; str2)\n\t{\n\t\tif(str2.count(c) == 1)\n\t\t{\n\t\t\treturn c;\n\t\t}\n\t}\n\treturn null;\n}",
    "{\n\tstring str = str1.toLower();\n\tint[] count = new int[str.length];\n\tforeach(i,c;str)\n\t{\n\t\tcount[i] = 0;\n\t\tforeach(j,c2;str)\n\t\t{\n\t\t\tif(c == c2)\n\t\t\t{\n\t\t\t\tcount[i]++;\n\t\t\t}\n\t\t}\n\t}\n\tforeach(i,c;str)\n\t{\n\t\tif(count[i] == 1)\n\t\t{\n\t\t\treturn str[i..i+1];\n\t\t}\n\t}\n\treturn null;\n}",
    "{\n\tint[] count = new int[256];\n\tforeach(c; str1)\n\t\tcount[c]++;\n\tforeach(c; str1)\n\t\tif(count[c] == 1)\n\t\t\treturn c;\n\treturn null;\n}",
    "{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(str2.count(c) == 0)\n\t\t{\n\t\t\tstr2 ~= c;\n\t\t}\n\t}\n\t\n\tforeach(c; str2)\n\t{\n\t\tif(str1.count(c) == 1)\n\t\t{\n\t\t\treturn c;\n\t\t}\n\t}\n\treturn null;\n}",
    "{\n\tstring[] str_array = str1.split();\n\tforeach(str; str_array)\n\t{\n\t\tif(str.count(str1) == 1)\n\t\t{\n\t\t\treturn str;\n\t\t}\n\t}\n\treturn null;\n}",
    "{\n\tstring[] str2 = str1.split(\"\");\n\tforeach(i, str3; str2)\n\t{\n\t\tif(str1.count(str3) == 1)\n\t\t{\n\t\t\treturn str3;\n\t\t}\n\t}\n\treturn null;\n}",
    "{\n\tstring[] str_arr = str1.split(\"\");\n\tstring[] str_arr_uniq = str_arr.uniq;\n\tforeach(str; str_arr_uniq)\n\t{\n\t\tif(str_arr.count(str) == 1)\n\t\t{\n\t\t\treturn str;\n\t\t}\n\t}\n\treturn null;\n}",
    "{\n\tNullable!(string) result = Nullable!(string).init;\n\t\n\tforeach(ch; str1)\n\t{\n\t\tif(str1.count(ch) == 1)\n\t\t{\n\t\t\tresult = ch;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tstring[] str_arr = str1.split(\"\");\n\tforeach(str; str_arr)\n\t{\n\t\tif(str_arr.count(str) == 1)\n\t\t{\n\t\t\treturn str;\n\t\t}\n\t}\n\treturn Nullable!(string).init;\n}",
    "{\n\tauto str = str1.dup;\n\tauto len = str.length;\n\t\n\tif (len == 0)\n\t\treturn null;\n\t\n\tif (len == 1)\n\t\treturn str1;\n\t\n\tauto char_count = new int[len];\n\t\n\tfor (int i = 0; i < len; i++)\n\t{\n\t\tchar_count[i] = 0;\n\t}\n\t\n\tfor (int i = 0; i < len; i++)\n\t{\n\t\tfor (int j = i + 1; j < len; j++)\n\t\t{\n\t\t\tif (str[i] == str[j])\n\t\t\t{\n\t\t\t\tchar_count[i]++;\n\t\t\t\tchar_count[j]++;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < len; i++)\n\t{\n\t\tif (char_count[i] == 0)\n\t\t\treturn str[i..i+1];\n\t}\n\t\n\treturn null;\n}",
    "{\n\tstring str = str1.dup;\n\tint len = str.length;\n\tint i;\n\tint j;\n\tint count;\n\tint index = -1;\n\t\n\tfor (i = 0; i < len; i++)\n\t{\n\t\tcount = 0;\n\t\tfor (j = 0; j < len; j++)\n\t\t{\n\t\t\tif (str[i] == str[j])\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tif (count == 1)\n\t\t{\n\t\t\tindex = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (index == -1)\n\t{\n\t\treturn Nullable!(string)();\n\t}\n\treturn Nullable!(string)(str[index..$]);\n}",
    "{\n\tauto char_count = new int[256];\n\tforeach(c; str1)\n\t{\n\t\tchar_count[c]++;\n\t}\n\tforeach(c; str1)\n\t{\n\t\tif(char_count[c] == 1)\n\t\t{\n\t\t\treturn c;\n\t\t}\n\t}\n\treturn null;\n}",
    "{\n\tstring[] str_array = str1.split(\"\");\n\tstring[] str_array_unique = str_array.dup;\n\tstr_array_unique.sort;\n\tstr_array_unique.unique;\n\t\n\tforeach(i, str; str_array_unique)\n\t{\n\t\tif(str_array.count(str) == 1)\n\t\t{\n\t\t\treturn str;\n\t\t}\n\t}\n\treturn Nullable!(string).init;\n}",
    "{\n\tauto char_count = new int[256];\n\tforeach(c; str1)\n\t{\n\t\tchar_count[c]++;\n\t}\n\t\n\tforeach(c; str1)\n\t{\n\t\tif(char_count[c] == 1)\n\t\t{\n\t\t\treturn c;\n\t\t}\n\t}\n\treturn null;\n}",
    "{\n\tNullable!(string) result;\n\t\n\tforeach(ch; str1)\n\t{\n\t\tif(count(str1, ch) == 1)\n\t\t{\n\t\t\tresult = ch;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tNullable!(string) result;\n\t\n\tforeach(char c; str1)\n\t{\n\t\tif(str1.count(c) == 1)\n\t\t{\n\t\t\tresult = c;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tstring[] str_arr = str1.split(\"\");\n\tstring[] str_arr_unique = str_arr.dup.uniq;\n\t\n\tforeach(str; str_arr_unique)\n\t{\n\t\tif(str_arr.count(str) == 1)\n\t\t{\n\t\t\treturn str;\n\t\t}\n\t}\n\treturn null;\n}",
    "{\n\tNullable!(string) result = Nullable!(string).init;\n\t\n\tforeach(ch; str1)\n\t{\n\t\tif (str1.count(ch) == 1)\n\t\t{\n\t\t\tresult = ch;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tforeach(c; str1)\n\t{\n\t\tif(count(str1, c) == 1)\n\t\t{\n\t\t\treturn c;\n\t\t}\n\t}\n\treturn Nullable!(string).init;\n}",
    "{\n\tNullable!(string) result;\n\t\n\tforeach(c; str1)\n\t{\n\t\tif(count(str1, c) == 1)\n\t\t{\n\t\t\tresult = c;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tstring[] str_arr = str1.split(\"\");\n\tstring[] str_arr_unique = str_arr.dup;\n\tstr_arr_unique.sort;\n\tstr_arr_unique.unique;\n\t\n\tforeach(str; str_arr_unique)\n\t{\n\t\tif(str_arr.count(str) == 1)\n\t\t{\n\t\t\treturn str;\n\t\t}\n\t}\n\treturn Nullable!(string).init;\n}",
    "{\n\tstring[] str_arr = str1.split(\"\");\n\tstring[] str_arr_unique = str_arr.dup;\n\tstr_arr_unique.sort;\n\tstr_arr_unique.unique;\n\t\n\tforeach(str; str_arr_unique)\n\t{\n\t\tif(str_arr.count(str) == 1)\n\t\t\treturn str;\n\t}\n\treturn Nullable!(string).init;\n}",
    "{\n\tstring[] str1_array = str1.split();\n\tforeach(i, str; str1_array)\n\t{\n\t\tif(str1_array.count(str) == 1)\n\t\t{\n\t\t\treturn str;\n\t\t}\n\t}\n\treturn null;\n}",
    "{\n\tauto char_count = new int[256];\n\tforeach(i, ch; str1)\n\t{\n\t\tchar_count[ch]++;\n\t}\n\tforeach(i, ch; str1)\n\t{\n\t\tif(char_count[ch] == 1)\n\t\t{\n\t\t\treturn ch;\n\t\t}\n\t}\n\treturn null;\n}",
    "{\n\tstring[] str_arr = str1.split(\"\");\n\tforeach(str; str_arr)\n\t{\n\t\tif(str_arr.count(str) == 1)\n\t\t{\n\t\t\treturn str;\n\t\t}\n\t}\n\treturn null;\n}",
    "{\n\tstring str = str1.dup;\n\tint[] count = new int[str.length];\n\tint i, index;\n\t\n\tfor (i = 0; i < str.length; i++) \n\t{\n\t\tindex = str[i] - 'a';\n\t\tcount[index]++;\n\t}\n\t\n\tfor (i = 0; i < str.length; i++) \n\t{\n\t\tif (count[str[i] - 'a'] == 1) \n\t\t{\n\t\t\treturn str[i];\n\t\t}\n\t}\n\t\n\treturn null;\n}",
    "{\n\tNullable!(string) result;\n\t\n\tforeach(character; str1)\n\t{\n\t\tif(str1.count(character) == 1)\n\t\t{\n\t\t\tresult = character;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tauto str = str1.dup;\n\t\n\tint[] char_count = new int[str.length];\n\t\n\tforeach(i, c; str)\n\t{\n\t\tchar_count[i] = 0;\n\t\tforeach(j, c2; str)\n\t\t{\n\t\t\tif(c == c2)\n\t\t\t\tchar_count[i]++;\n\t\t}\n\t}\n\t\n\tforeach(i, c; str)\n\t{\n\t\tif(char_count[i] == 1)\n\t\t\treturn str[i..i+1];\n\t}\n\t\n\treturn null;\n}",
    "{\n\tstring[] str = str1.split(\"\");\n\tstring[] str2 = str1.split(\"\");\n\t\n\tforeach(i,s;str)\n\t{\n\t\tif(str2.count(s) == 1)\n\t\t{\n\t\t\treturn s;\n\t\t}\n\t}\n\treturn null;\n}",
    "{\n\tint[] count = new int[256];\n\tforeach(ch; str1)\n\t{\n\t\tcount[ch]++;\n\t}\n\tforeach(ch; str1)\n\t{\n\t\tif(count[ch] == 1)\n\t\t{\n\t\t\treturn ch;\n\t\t}\n\t}\n\treturn Nullable!(string).init;\n}",
    "{\n\tint[] count = new int[256];\n\tforeach(c; str1)\n\t{\n\t\tcount[cast(int)c]++;\n\t}\n\tforeach(c; str1)\n\t{\n\t\tif(count[cast(int)c] == 1)\n\t\t{\n\t\t\treturn c;\n\t\t}\n\t}\n\treturn Nullable!(string)();\n}",
    "{\n\tauto str = str1.dup;\n\tauto len = str.length;\n\tint i, j;\n\tfor (i = 0; i < len; i++) \n\t{\n\t\tfor (j = 0; j < len; j++) \n\t\t{\n\t\t\tif (i != j) \n\t\t\t{\n\t\t\t\tif (str[i] == str[j]) \n\t\t\t\t{\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (j == len) \n\t\t{\n\t\t\treturn str[i];\n\t\t}\n\t}\n\treturn Nullable!(string)();\n}",
    "{\n\tauto char_count = new int[256];\n\tforeach(i, ch; str1)\n\t{\n\t\tchar_count[ch]++;\n\t}\n\tforeach(i, ch; str1)\n\t{\n\t\tif(char_count[ch] == 1)\n\t\t{\n\t\t\treturn ch;\n\t\t}\n\t}\n\treturn null;\n}",
    "{\n\tauto result = Nullable!(string)();\n\tauto char_count = new int[256];\n\tforeach(i, c; str1)\n\t{\n\t\tchar_count[c]++;\n\t}\n\tforeach(i, c; str1)\n\t{\n\t\tif(char_count[c] == 1)\n\t\t{\n\t\t\tresult = c;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tNullable!(string) result;\n\tforeach(ch; str1)\n\t{\n\t\tif(str1.count(ch) == 1)\n\t\t{\n\t\t\tresult = ch;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] str_arr = str1.split(\"\");\n\tforeach(str; str_arr) \n\t{\n\t\tif(str_arr.count(str) == 1) \n\t\t{\n\t\t\treturn str;\n\t\t}\n\t}\n\treturn null;\n}",
    "{\n\tstring str = str1.dup;\n\t\n\tint[] count = new int[str.length];\n\t\n\tforeach(i, c; str)\n\t{\n\t\tcount[i] = 0;\n\t\tforeach(j, d; str)\n\t\t{\n\t\t\tif(c == d)\n\t\t\t{\n\t\t\t\tcount[i]++;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i, c; str)\n\t{\n\t\tif(count[i] == 1)\n\t\t{\n\t\t\treturn c;\n\t\t}\n\t}\n\t\n\treturn Nullable!(string).init;\n}",
    "{\n\tstring str = str1.toLower();\n\tforeach(i, c; str)\n\t{\n\t\tif(str.count(c) == 1)\n\t\t\treturn c;\n\t}\n\treturn Nullable!(string)();\n}",
    "{\n\tauto char_count = new int[256];\n\tforeach(c; str1)\n\t{\n\t\tchar_count[c]++;\n\t}\n\tforeach(c; str1)\n\t{\n\t\tif(char_count[c] == 1)\n\t\t{\n\t\t\treturn c;\n\t\t}\n\t}\n\treturn null;\n}",
    "{\n\tauto str = str1.dup;\n\tint i = 0;\n\twhile (i < str.length)\n\t{\n\t\tint j = 0;\n\t\twhile (j < str.length)\n\t\t{\n\t\t\tif (i != j && str[i] == str[j])\n\t\t\t{\n\t\t\t\tstr[i] = '\\0';\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\t\ti++;\n\t}\n\ti = 0;\n\twhile (i < str.length)\n\t{\n\t\tif (str[i] != '\\0')\n\t\t{\n\t\t\treturn str[i..i+1];\n\t\t}\n\t\ti++;\n\t}\n\treturn Nullable!(string)();\n}",
    "{\n\tNullable!(string) result;\n\t\n\tforeach(ch; str1)\n\t{\n\t\tif(count(str1, ch) == 1)\n\t\t{\n\t\t\tresult = ch;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tNullable!(string) result;\n\tint[] count = new int[256];\n\tforeach(c; str1)\n\t{\n\t\tcount[cast(int)c]++;\n\t}\n\tforeach(c; str1)\n\t{\n\t\tif(count[cast(int)c] == 1)\n\t\t{\n\t\t\tresult = c;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] str1_arr = str1.split();\n\tforeach(str; str1_arr)\n\t{\n\t\tif(str1.count(str) == 1)\n\t\t{\n\t\t\treturn str;\n\t\t}\n\t}\n\treturn null;\n}",
    "{\n\tstring[] str_array = str1.split(\"\");\n\tstring[] str_array_unique = str_array.dup.uniq;\n\tforeach(str_array_unique; str)\n\t{\n\t\tif(str_array.count(str) == 1)\n\t\t{\n\t\t\treturn str;\n\t\t}\n\t}\n\treturn Nullable!(string)();\n}",
    "{\n\tstring[] str_arr = str1.split(\"\");\n\tforeach(i, str; str_arr)\n\t{\n\t\tif(str_arr.count(str) == 1)\n\t\t{\n\t\t\treturn str;\n\t\t}\n\t}\n\treturn Nullable!(string).init;\n}",
    "{\n\tauto str = str1.dup;\n\t\n\tforeach(i, c; str)\n\t{\n\t\tif(str.count(c) == 1)\n\t\t{\n\t\t\treturn str[i..i+1];\n\t\t}\n\t}\n\treturn null;\n}",
    "{\n\tstring[] str_arr = str1.split();\n\t\n\tforeach(i, str; str_arr)\n\t{\n\t\tif(str_arr.count(str) == 1)\n\t\t{\n\t\t\treturn str;\n\t\t}\n\t}\n\t\n\treturn null;\n}",
    "{\n\tNullable!(string) result = Nullable!(string).init;\n\t\n\tforeach(ch; str1)\n\t{\n\t\tif(str1.count(ch) == 1)\n\t\t{\n\t\t\tresult = ch;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tstring[] str_arr = str1.split();\n\tforeach(string str; str_arr)\n\t{\n\t\tint count = 0;\n\t\tforeach(string str2; str_arr)\n\t\t{\n\t\t\tif(str == str2)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tif(count == 1)\n\t\t{\n\t\t\treturn str;\n\t\t}\n\t}\n\treturn Nullable!(string).init;\n}",
    "{\n\tNullable!(string) result;\n\t\n\tforeach(ch; str1)\n\t{\n\t\tif(count(str1, ch) == 1)\n\t\t{\n\t\t\tresult = ch;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tstring str = str1.toLower();\n\tint[] count = new int[str.length];\n\tint i, index;\n\t\n\tforeach(i, c; str)\n\t{\n\t\tindex = c - 'a';\n\t\tcount[index]++;\n\t}\n\t\n\tforeach(i, c; str)\n\t{\n\t\tindex = c - 'a';\n\t\tif(count[index] == 1)\n\t\t\treturn c;\n\t}\n\t\n\treturn null;\n}",
    "{\n\tstring str = str1.toLower();\n\tint[] counts = new int[str.length];\n\tfor (int i = 0; i < str.length; i++)\n\t{\n\t\tfor (int j = 0; j < str.length; j++)\n\t\t{\n\t\t\tif (str[i] == str[j])\n\t\t\t{\n\t\t\t\tcounts[i]++;\n\t\t\t}\n\t\t}\n\t}\n\tfor (int i = 0; i < str.length; i++)\n\t{\n\t\tif (counts[i] == 1)\n\t\t{\n\t\t\treturn str[i];\n\t\t}\n\t}\n\treturn null;\n}",
    "{\n\tNullable!(string) result;\n\t\n\tforeach(ch; str1)\n\t{\n\t\tif(count(str1, ch) == 1)\n\t\t{\n\t\t\tresult = ch;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tstring[] str_arr = str1.split(\"\");\n\tint[] count = new int[str_arr.length];\n\tint i = 0;\n\tforeach(str; str_arr)\n\t{\n\t\tint j = 0;\n\t\tforeach(str2; str_arr)\n\t\t{\n\t\t\tif(str == str2)\n\t\t\t{\n\t\t\t\tcount[i]++;\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\t\ti++;\n\t}\n\tint k = 0;\n\tforeach(c; count)\n\t{\n\t\tif(c == 1)\n\t\t{\n\t\t\treturn str_arr[k];\n\t\t}\n\t\tk++;\n\t}\n\treturn Nullable!(string).init;\n}",
    "{\n\tstring[] str_arr = str1.split();\n\tforeach(str; str_arr)\n\t{\n\t\tif(str_arr.count(str) == 1)\n\t\t{\n\t\t\treturn str;\n\t\t}\n\t}\n\treturn null;\n}",
    "{\n\tNullable!(string) result = Nullable!(string).init;\n\t\n\tforeach(ch; str1)\n\t{\n\t\tif(count(str1, ch) == 1)\n\t\t{\n\t\t\tresult.set(ch);\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tint[] count = new int[256];\n\tfor (int i = 0; i < str1.length; i++)\n\t{\n\t\tcount[cast(int)str1[i]]++;\n\t}\n\t\n\tfor (int i = 0; i < str1.length; i++)\n\t{\n\t\tif (count[cast(int)str1[i]] == 1)\n\t\t{\n\t\t\treturn str1[i..$];\n\t\t}\n\t}\n\treturn null;\n}",
    "{\n\tint[] char_count = new int[256];\n\tforeach(c; str1)\n\t{\n\t\tchar_count[cast(int)c]++;\n\t}\n\tforeach(c; str1)\n\t{\n\t\tif(char_count[cast(int)c] == 1)\n\t\t{\n\t\t\treturn c;\n\t\t}\n\t}\n\treturn Nullable!(string).init;\n}",
    "{\n\tstring str = str1.toLower();\n\tint[] count = new int[str.length];\n\tint i = 0;\n\tforeach(c; str)\n\t{\n\t\tcount[i] = 0;\n\t\tforeach(c1; str)\n\t\t{\n\t\t\tif(c == c1)\n\t\t\t{\n\t\t\t\tcount[i]++;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\tint min = minElement(count);\n\tif(min == 1)\n\t{\n\t\tint index = 0;\n\t\tforeach(c; count)\n\t\t{\n\t\t\tif(c == min)\n\t\t\t{\n\t\t\t\treturn str1[index..index+1];\n\t\t\t}\n\t\t\tindex++;\n\t\t}\n\t}\n\treturn null;\n}",
    "{\n\tNullable!(string) result;\n\tint[] char_count = new int[256];\n\tforeach(c; str1)\n\t{\n\t\tchar_count[c]++;\n\t}\n\tforeach(c; str1)\n\t{\n\t\tif(char_count[c] == 1)\n\t\t{\n\t\t\tresult = c;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] str_arr = str1.split(\"\");\n\t\n\tforeach(str; str_arr)\n\t{\n\t\tif(str_arr.count(str) == 1)\n\t\t{\n\t\t\treturn str;\n\t\t}\n\t}\n\treturn Nullable!(string).init;\n}",
    "{\n\tNullable!(string) result;\n\tint[] count = new int[256];\n\tint i;\n\t\n\tforeach(c; str1)\n\t{\n\t\tcount[cast(int)c]++;\n\t}\n\t\n\tfor(i = 0; i < str1.length; i++)\n\t{\n\t\tif(count[cast(int)str1[i]] == 1)\n\t\t{\n\t\t\tresult = str1[i];\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tNullable!(string) result;\n\t\n\tforeach(ch; str1)\n\t{\n\t\tif(count(str1, ch) == 1)\n\t\t{\n\t\t\tresult = ch;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tstring str = str1.toLower();\n\tint[] count = new int[str.length];\n\tint i = 0;\n\tforeach(c; str)\n\t{\n\t\tcount[i] = 0;\n\t\tforeach(c1; str)\n\t\t{\n\t\t\tif(c == c1)\n\t\t\t{\n\t\t\t\tcount[i]++;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\tint min = min(count);\n\tint index = 0;\n\tforeach(c; count)\n\t{\n\t\tif(c == min)\n\t\t{\n\t\t\tbreak;\n\t\t}\n\t\tindex++;\n\t}\n\tif(min == 1)\n\t{\n\t\treturn str[index..index+1];\n\t}\n\telse\n\t{\n\t\treturn null;\n\t}\n}",
    "{\n\tNullable!(string) result;\n\tint[] char_count = new int[256];\n\t\n\tforeach(c; str1)\n\t{\n\t\tchar_count[cast(int)c]++;\n\t}\n\t\n\tforeach(c; str1)\n\t{\n\t\tif(char_count[cast(int)c] == 1)\n\t\t{\n\t\t\tresult = c;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tNullable!(string) result;\n\t\n\tforeach(char c; str1)\n\t{\n\t\tif(count(str1, c) == 1)\n\t\t{\n\t\t\tresult = c;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tauto result = Nullable!(string)();\n\tauto char_count = new int[str1.length];\n\tfor (int i = 0; i < str1.length; i++) \n\t{\n\t\tchar_count[i] = 0;\n\t}\n\tfor (int i = 0; i < str1.length; i++) \n\t{\n\t\tfor (int j = i + 1; j < str1.length; j++) \n\t\t{\n\t\t\tif (str1[i] == str1[j]) \n\t\t\t{\n\t\t\t\tchar_count[i]++;\n\t\t\t\tchar_count[j]++;\n\t\t\t}\n\t\t}\n\t}\n\tfor (int i = 0; i < str1.length; i++) \n\t{\n\t\tif (char_count[i] == 0) \n\t\t{\n\t\t\tresult = str1[i];\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tNullable!(string) result;\n\tint[] char_count = new int[256];\n\tforeach(c; str1)\n\t{\n\t\tchar_count[cast(int)c]++;\n\t}\n\tforeach(c; str1)\n\t{\n\t\tif(char_count[cast(int)c] == 1)\n\t\t{\n\t\t\tresult = c;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tint[] char_count = new int[256];\n\tforeach(c; str1)\n\t{\n\t\tchar_count[cast(int)c]++;\n\t}\n\tforeach(c; str1)\n\t{\n\t\tif(char_count[cast(int)c] == 1)\n\t\t{\n\t\t\treturn c;\n\t\t}\n\t}\n\treturn null;\n}",
    "{\n\tstring[] str_arr = str1.split(\"\");\n\tint[] char_count = new int[str_arr.length];\n\tint i = 0;\n\tforeach(str; str_arr)\n\t{\n\t\tchar_count[i] = 0;\n\t\tforeach(str2; str_arr)\n\t\t{\n\t\t\tif(str == str2)\n\t\t\t{\n\t\t\t\tchar_count[i]++;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\tint min_index = minIndex(char_count);\n\tif(char_count[min_index] == 1)\n\t{\n\t\treturn str_arr[min_index];\n\t}\n\telse\n\t{\n\t\treturn Nullable!(string).init;\n\t}\n}",
    "{\n\tstring[] str_arr = str1.split(\"\");\n\tstring[] str_arr_unique = str_arr.dup;\n\tstr_arr_unique.sort;\n\tstr_arr_unique.unique;\n\t\n\tforeach(str; str_arr_unique)\n\t{\n\t\tint count = 0;\n\t\tforeach(str_; str_arr)\n\t\t{\n\t\t\tif(str == str_)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tif(count == 1)\n\t\t{\n\t\t\treturn str;\n\t\t}\n\t}\n\treturn Nullable!(string).init;\n}",
    "{\n\tstring[] str_arr = str1.split(\"\");\n\tstring[] str_arr_copy = str_arr.dup;\n\t\n\tforeach(str; str_arr)\n\t{\n\t\tstr_arr_copy.remove(str);\n\t\tif(str_arr_copy.count(str) == 0)\n\t\t{\n\t\t\treturn str;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr_arr_copy = str_arr.dup;\n\t\t}\n\t}\n\t\n\treturn Nullable!(string)();\n}",
    "{\n\tstring[] str_arr = str1.split(\"\");\n\tstring[] str_arr_unique = str_arr.dup.uniq;\n\tforeach(str_arr_unique_item; str_arr_unique)\n\t{\n\t\tif(str_arr.count(str_arr_unique_item) == 1)\n\t\t{\n\t\t\treturn str_arr_unique_item;\n\t\t}\n\t}\n\treturn Nullable!(string)();\n}",
    "{\n\tstring[] str_array = str1.split();\n\tforeach(str; str_array)\n\t{\n\t\tif(str_array.count(str) == 1)\n\t\t{\n\t\t\treturn str;\n\t\t}\n\t}\n\treturn null;\n}",
    "{\n\tstring[] str_arr = str1.split(\"\");\n\tstring[] str_arr_unique = str_arr.dup.uniq;\n\t\n\tforeach(str_arr_unique_item; str_arr_unique)\n\t{\n\t\tint count = 0;\n\t\tforeach(str_arr_item; str_arr)\n\t\t{\n\t\t\tif(str_arr_item == str_arr_unique_item)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tif(count == 1)\n\t\t{\n\t\t\treturn str_arr_unique_item;\n\t\t}\n\t}\n\treturn null;\n}",
    "{\n\tstring[] str_arr = str1.split(\"\");\n\tstring[] str_arr_unique = str_arr.dup;\n\tstr_arr_unique.sort;\n\tstr_arr_unique.unique;\n\t\n\tforeach(i, str; str_arr_unique)\n\t{\n\t\tif(str_arr.count(str) == 1)\n\t\t{\n\t\t\treturn str;\n\t\t}\n\t}\n\treturn null;\n}",
    "{\n\tint[] char_count = new int[256];\n\tforeach(c; str1)\n\t{\n\t\tchar_count[cast(int)c]++;\n\t}\n\tforeach(c; str1)\n\t{\n\t\tif (char_count[cast(int)c] == 1)\n\t\t{\n\t\t\treturn c;\n\t\t}\n\t}\n\treturn null;\n}",
    "{\n\tNullable!(string) result = Nullable!(string).init;\n\t\n\tforeach(ch; str1)\n\t{\n\t\tif(str1.count(ch) == 1)\n\t\t{\n\t\t\tresult = ch;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tNullable!(string) result;\n\t\n\tforeach(char c; str1)\n\t{\n\t\tif(str1.count(c) == 1)\n\t\t{\n\t\t\tresult = c;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tstring str = str1.dup;\n\tint[] count = new int[str.length];\n\tint i, index;\n\t\n\tforeach(i, c; str)\n\t{\n\t\tindex = c.ord;\n\t\tcount[index]++;\n\t}\n\t\n\tforeach(i, c; str)\n\t{\n\t\tindex = c.ord;\n\t\tif(count[index] == 1)\n\t\t\treturn str[i..$];\n\t}\n\treturn null;\n}",
    "{\n\tstring[] str_arr = str1.split(\"\");\n\tforeach(str; str_arr)\n\t{\n\t\tif(str_arr.count(str) == 1)\n\t\t{\n\t\t\treturn str;\n\t\t}\n\t}\n\treturn Nullable!(string).init;\n}",
    "{\n\tstring[] str_array = str1.split(\"\");\n\tforeach(str; str_array)\n\t{\n\t\tif(str_array.count(str) == 1)\n\t\t{\n\t\t\treturn str;\n\t\t}\n\t}\n\treturn null;\n}",
    "{\n\tint[] count = new int[256];\n\tforeach (c; str1)\n\t{\n\t\tcount[cast(int)c]++;\n\t}\n\t\n\tforeach (c; str1)\n\t{\n\t\tif (count[cast(int)c] == 1)\n\t\t{\n\t\t\treturn c;\n\t\t}\n\t}\n\treturn null;\n}",
    "{\n\t// Nullable!(string) nstr;\n\t// nstr.init(str1);\n\t// return nstr;\n\t\n\tNullable!(string) nstr;\n\tnstr.init(str1);\n\treturn nstr;\n\t\n\t// return Nullable!(string)(str1);\n\t\n\t// return Nullable!(string).init(str1);\n\t\n\t// return Nullable!(string).init(str1);\n\t\n\t// return Nullable!(string).init(str1);\n\t\n\t// return Nullable!(string).init(str1);\n\t\n\t// return Nullable!(string).init(str1);\n\t\n\t// return Nullable!(string).init(str1);\n\t\n\t// return Nullable!(string).init(str1);\n\t\n\t// return Nullable!(string).init(str1);\n\t\n\t// return Nullable!(string).init(str1);\n\t\n\t// return Nullable!(string).init(str1);\n\t\n\t// return Nullable!(string).init(str1);\n\t\n\t// return Nullable!(string).init(str1);\n\t\n\t// return Nullable!(string).init(str1);\n\t\n\t// return Nullable!(string).init(str1);\n\t\n\t// return Nullable!(string).init(str1);\n\t\n\t// return Nullable!(string).init(str1);\n\t\n\t// return Nullable!(string).init(str1);\n\t\n\t// return Nullable!(string).init(str1);\n\t\n\t// return Nullable!(string).init(str1);\n\t\n\t// return Nullable!(string).init(str1);\n\t\n\t// return Nullable!(string).init(str1);\n\t\n\t// return Nullable!(string).init(str1);\n\t\n\t// return Nullable!(string).init(str1);\n\t\n\t// return Nullable!(string).init(str1);\n\t\n\t// return Nullable!(string).init(str1);\n\t\n\t// return Nullable!(string",
    "{\n\tstring[] str_array = str1.split();\n\t\n\tforeach(str; str_array)\n\t{\n\t\tif(str_array.count(str) == 1)\n\t\t{\n\t\t\treturn str;\n\t\t}\n\t}\n\treturn null;\n}",
    "{\n\tNullable!(string) result;\n\t\n\tforeach(ch; str1)\n\t{\n\t\tif(count(str1, ch) == 1)\n\t\t{\n\t\t\tresult = ch;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tNullable!(string) result = Nullable!(string).init;\n\t\n\tforeach(ch; str1)\n\t{\n\t\tif(count(str1, ch) == 1)\n\t\t{\n\t\t\tresult = ch;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tNullable!(string) result = Nullable!(string).init;\n\t\n\tforeach(ch; str1) \n\t{\n\t\tif(count(str1, ch) == 1) \n\t\t{\n\t\t\tresult = ch;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tauto str = str1.dup;\n\tauto len = str.length;\n\t\n\tif (len == 0)\n\t\treturn null;\n\t\n\tfor (int i = 0; i < len; i++) \n\t{\n\t\tauto c = str[i];\n\t\t\n\t\tif (str.count(c) == 1)\n\t\t\treturn c;\n\t}\n\t\n\treturn null;\n}",
    "{\n\tstring str = str1.toLower();\n\tNullable!(string) result = null;\n\t\n\tforeach(char c; str)\n\t{\n\t\tif (str.count(c) == 1)\n\t\t{\n\t\t\tresult = c;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\t// Create a dictionary to store the count of each character\n\tauto dict = new Dictionary!(string, int);\n\t\n\t// Iterate over the string and store the count of each character\n\tforeach(c; str1)\n\t{\n\t\tif(dict.containsKey(c))\n\t\t{\n\t\t\tdict[c]++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdict[c] = 1;\n\t\t}\n\t}\n\t\n\t// Iterate over the string again and return the first character with count 1\n\tforeach(c; str1)\n\t{\n\t\tif(dict[c] == 1)\n\t\t{\n\t\t\treturn c;\n\t\t}\n\t}\n\t\n\treturn null;\n}",
    "{\n\tstring result = \"\";\n\tforeach(i, c; str1)\n\t{\n\t\tif(count(str1, c) == 1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif(result.length == 0)\n\t\treturn Nullable!(string)();\n\telse\n\t\treturn Nullable!(string)(result);\n}",
    "{\n\t// create a dictionary to store the count of each character\n\tauto char_count = new Dictionary!(string, int);\n\t\n\t// loop through the string and count the number of times each character appears\n\tforeach (character; str1)\n\t{\n\t\tif (char_count.containsKey(character))\n\t\t{\n\t\t\tchar_count[character]++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tchar_count[character] = 1;\n\t\t}\n\t}\n\t\n\t// loop through the string again and return the first character that has a count of 1\n\tforeach (character; str1)\n\t{\n\t\tif (char_count[character] == 1)\n\t\t{\n\t\t\treturn character;\n\t\t}\n\t}\n\t\n\t// if no character has a count of 1, return null\n\treturn Nullable!(string).init;\n}",
    "{\n\tstring str = str1.toLower();\n\tint[] count = new int[str.length];\n\tint i = 0;\n\tforeach(c; str)\n\t{\n\t\tcount[i] = 0;\n\t\tforeach(c1; str)\n\t\t{\n\t\t\tif(c == c1)\n\t\t\t{\n\t\t\t\tcount[i]++;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\t\n\tint min = min(count);\n\tif(min == 1)\n\t{\n\t\ti = 0;\n\t\tforeach(c; str)\n\t\t{\n\t\t\tif(count[i] == 1)\n\t\t\t{\n\t\t\t\treturn c;\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\t}\n\treturn null;\n}",
    "{\n\tNullable!(string) result;\n\t\n\tforeach(c; str1)\n\t{\n\t\tif(str1.count(c) == 1)\n\t\t{\n\t\t\tresult = c;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tauto str = str1.dup;\n\tauto len = str.length;\n\tauto result = Nullable!(string)();\n\t\n\tfor (int i = 0; i < len; i++)\n\t{\n\t\tauto c = str[i];\n\t\t\n\t\tif (str.count(c) == 1)\n\t\t{\n\t\t\tresult = c;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tint[] arr = new int[256];\n\tforeach(c; str1)\n\t{\n\t\tarr[cast(int)c]++;\n\t}\n\tforeach(c; str1)\n\t{\n\t\tif(arr[cast(int)c] == 1)\n\t\t{\n\t\t\treturn c;\n\t\t}\n\t}\n\treturn null;\n}",
    "{\n\t// Create a dictionary to store the count of each character\n\tauto dict = new Dictionary!(string, int);\n\t\n\t// Iterate through the string and store the count of each character\n\tforeach(ch; str1)\n\t{\n\t\tif(dict.contains(ch))\n\t\t{\n\t\t\tdict[ch]++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdict[ch] = 1;\n\t\t}\n\t}\n\t\n\t// Iterate through the string again and return the first character with count 1\n\tforeach(ch; str1)\n\t{\n\t\tif(dict[ch] == 1)\n\t\t{\n\t\t\treturn ch;\n\t\t}\n\t}\n\t\n\treturn null;\n}",
    "{\n\tauto str2 = str1.dup;\n\tauto str3 = str1.dup;\n\t\n\tfor (int i = 0; i < str1.length; i++) \n\t{\n\t\tstr2.remove(str1[i]);\n\t\tstr3.remove(str1[i]);\n\t\tstr3.remove(str1[i]);\n\t\t\n\t\tif (str2.length == str3.length) \n\t\t{\n\t\t\treturn str1[i];\n\t\t}\n\t\t\n\t\tstr2 = str1.dup;\n\t\tstr3 = str1.dup;\n\t}\n\t\n\treturn Nullable!(string)();\n}",
    "{\n\tstring result = \"\";\n\tforeach(ch; str1)\n\t{\n\t\tif(str1.count(ch) == 1)\n\t\t{\n\t\t\tresult ~= ch;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif(result.length == 0)\n\t{\n\t\treturn null;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] str_arr = str1.split(\"\");\n\tstring[] str_arr_unique = str_arr.dup;\n\tstr_arr_unique.sort;\n\tstr_arr_unique.uniq;\n\t\n\tforeach(str; str_arr_unique)\n\t{\n\t\tif(str_arr.count(str) == 1)\n\t\t{\n\t\t\treturn str;\n\t\t}\n\t}\n\treturn null;\n}",
    "{\n\tauto str = str1.dup;\n\t\n\tint[] counts = new int[str.length];\n\t\n\tforeach(i, c; str)\n\t{\n\t\tcounts[i] = str.count(c);\n\t}\n\t\n\tforeach(i, c; str)\n\t{\n\t\tif(counts[i] == 1)\n\t\t{\n\t\t\treturn str[i..i+1];\n\t\t}\n\t}\n\t\n\treturn null;\n}",
    "{\n\tstring str = str1.dup;\n\t\n\tint[] count = new int[256];\n\t\n\tforeach(c; str)\n\t{\n\t\tcount[cast(int)c]++;\n\t}\n\t\n\tforeach(c; str)\n\t{\n\t\tif(count[cast(int)c] == 1)\n\t\t{\n\t\t\treturn c;\n\t\t}\n\t}\n\t\n\treturn null;\n}",
    "{\n\tNullable!(string) result = Nullable!(string).init;\n\t\n\tforeach(ch; str1)\n\t{\n\t\tif(str1.count(ch) == 1)\n\t\t{\n\t\t\tresult = ch;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tNullable!(string) result = Nullable!(string).init;\n\t\n\tforeach(c; str1)\n\t{\n\t\tif(count(str1, c) == 1)\n\t\t{\n\t\t\tresult = c;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tNullable!(string) result = Nullable!(string).init;\n\t\n\tforeach(char c; str1)\n\t{\n\t\tif(count(str1, c) == 1)\n\t\t{\n\t\t\tresult.set(c);\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tauto str = str1.dup;\n\tint[] count = new int[str.length];\n\tint i;\n\tint index;\n\t\n\tforeach(c; str)\n\t{\n\t\tindex = c.ord;\n\t\tcount[index]++;\n\t}\n\t\n\tforeach(c; str)\n\t{\n\t\tindex = c.ord;\n\t\tif(count[index] == 1)\n\t\t{\n\t\t\treturn c;\n\t\t}\n\t}\n\t\n\treturn null;\n}",
    "{\n\tNullable!(string) result;\n\tint[] char_count = new int[256];\n\tforeach(c; str1)\n\t{\n\t\tchar_count[c]++;\n\t}\n\tforeach(c; str1)\n\t{\n\t\tif(char_count[c] == 1)\n\t\t{\n\t\t\tresult = c;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] str_arr = str1.split();\n\tforeach(str; str_arr)\n\t{\n\t\tif(str_arr.count(str) == 1)\n\t\t{\n\t\t\treturn str;\n\t\t}\n\t}\n\treturn null;\n}",
    "{\n\tstring str = str1.tolower();\n\tforeach(i, c; str)\n\t{\n\t\tif(str.count(c) == 1)\n\t\t\treturn c;\n\t}\n\treturn Nullable!(string).init;\n}",
    "{\n\tNullable!(string) result = Nullable!(string)();\n\tint[] count = new int[256];\n\tforeach(c; str1)\n\t{\n\t\tcount[cast(int)c]++;\n\t}\n\tforeach(c; str1)\n\t{\n\t\tif(count[cast(int)c] == 1)\n\t\t{\n\t\t\tresult = Nullable!(string)(c);\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring[] str_arr = str1.split(\"\");\n\tstring[] str_arr_unique = str_arr.dup;\n\tstr_arr_unique.sort;\n\tstr_arr_unique = str_arr_unique.uniq;\n\t\n\tforeach(str; str_arr_unique)\n\t{\n\t\tif(str_arr.count(str) == 1)\n\t\t{\n\t\t\treturn str;\n\t\t}\n\t}\n\treturn Nullable!(string).init;\n}",
    "{\n\tNullable!(string) result = Nullable!(string).init;\n\t\n\tforeach(ch; str1)\n\t{\n\t\tif(str1.count(ch) == 1)\n\t\t{\n\t\t\tresult.set(ch);\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tstring str = str1.toLower();\n\tint[] count = new int[str.length];\n\tint i;\n\tint j;\n\t\n\tforeach(i, c; str)\n\t{\n\t\tforeach(j, c2; str)\n\t\t{\n\t\t\tif(c == c2)\n\t\t\t{\n\t\t\t\tcount[i]++;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i, c; str)\n\t{\n\t\tif(count[i] == 1)\n\t\t{\n\t\t\treturn c;\n\t\t}\n\t}\n\t\n\treturn Nullable!(string).init;\n}",
    "{\n\tauto str = str1.dup;\n\tauto len = str.length;\n\t\n\tforeach(i, c; str)\n\t{\n\t\tauto count = 0;\n\t\tforeach(j, d; str)\n\t\t{\n\t\t\tif(c == d)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tif(count == 1)\n\t\t{\n\t\t\treturn str[i..i+1];\n\t\t}\n\t}\n\treturn null;\n}",
    "{\n\tstring[] str2 = str1.split(\"\");\n\tstring[] str3 = str1.split(\"\");\n\tstring[] str4 = str1.split(\"\");\n\t\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\t\n\tforeach(char; str2)\n\t{\n\t\tforeach(char2; str3)\n\t\t{\n\t\t\tif(char == char2)\n\t\t\t{\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(i == 1)\n\t\t{\n\t\t\tstr4[k] = char;\n\t\t\tk++;\n\t\t}\n\t\t\n\t\ti = 0;\n\t\tj++;\n\t}\n\t\n\treturn str4[0];\n}",
    "{\n\tstring[] str_arr = str1.split();\n\tforeach(str; str_arr)\n\t{\n\t\tif(str_arr.count(str) == 1)\n\t\t{\n\t\t\treturn str;\n\t\t}\n\t}\n\treturn null;\n}",
    "{\n\tstring[] arr = str1.split(\"\");\n\tforeach(i, v; arr)\n\t{\n\t\tif(arr.count(v) == 1)\n\t\t{\n\t\t\treturn v;\n\t\t}\n\t}\n\treturn null;\n}",
    "{\n\tstring[] str_arr = str1.split(\"\");\n\tstring[] str_arr_unique = str_arr.unique;\n\tforeach(i, s; str_arr_unique)\n\t{\n\t\tif(str_arr.count(s) == 1)\n\t\t{\n\t\t\treturn s;\n\t\t}\n\t}\n\treturn null;\n}",
    "{\n\tstring[] str_arr = str1.split();\n\tforeach(str; str_arr)\n\t{\n\t\tif(str_arr.count(str) == 1)\n\t\t\treturn str;\n\t}\n\treturn null;\n}",
    "{\n\tstring[] str_array = str1.split(\"\");\n\tint[] count = new int[str_array.length];\n\tint i = 0;\n\tforeach(str; str_array)\n\t{\n\t\tcount[i] = 0;\n\t\tforeach(str2; str_array)\n\t\t{\n\t\t\tif(str == str2)\n\t\t\t{\n\t\t\t\tcount[i]++;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\tint min = min(count);\n\tif(min == 1)\n\t{\n\t\tint index = 0;\n\t\tforeach(c; count)\n\t\t{\n\t\t\tif(c == min)\n\t\t\t{\n\t\t\t\treturn str_array[index];\n\t\t\t}\n\t\t\tindex++;\n\t\t}\n\t}\n\telse\n\t{\n\t\treturn null;\n\t}\n}",
    "{\n\tauto char_count = new int[256];\n\tforeach(ch; str1)\n\t{\n\t\tchar_count[ch]++;\n\t}\n\t\n\tforeach(ch; str1)\n\t{\n\t\tif(char_count[ch] == 1)\n\t\t{\n\t\t\treturn ch;\n\t\t}\n\t}\n\treturn null;\n}",
    "{\n\tstring[] str_arr = str1.split(\"\");\n\tstring[] str_arr_unique = str_arr.dup.uniq;\n\tforeach(i, str; str_arr_unique)\n\t{\n\t\tif(str_arr.count(str) == 1)\n\t\t{\n\t\t\treturn str;\n\t\t}\n\t}\n\treturn null;\n}",
    "{\n\tstring[] str2 = str1.split(\"\");\n\tforeach(i, ch; str2)\n\t{\n\t\tif(str2.count(ch) == 1)\n\t\t\treturn ch;\n\t}\n\treturn null;\n}",
    "{\n\tstring result = \"\";\n\tint[] count = new int[256];\n\tfor(int i = 0; i < str1.length; i++)\n\t{\n\t\tcount[cast(int)str1[i]]++;\n\t}\n\tfor(int i = 0; i < str1.length; i++)\n\t{\n\t\tif(count[cast(int)str1[i]] == 1)\n\t\t{\n\t\t\tresult = str1[i..i+1];\n\t\t\tbreak;\n\t\t}\n\t}\n\tif(result == \"\")\n\t{\n\t\treturn null;\n\t}\n\treturn result;\n}",
    "{\n\tstring str = toLower(str1);\n\tint[] arr = new int[256];\n\tforeach(c; str)\n\t{\n\t\tarr[cast(int)c]++;\n\t}\n\tforeach(c; str)\n\t{\n\t\tif(arr[cast(int)c] == 1)\n\t\t{\n\t\t\treturn c;\n\t\t}\n\t}\n\treturn null;\n}",
    "{\n\tauto str = str1.dup;\n\tint i = 0;\n\tint j = 0;\n\tint len = str.length;\n\tint count = 0;\n\twhile (i < len)\n\t{\n\t\tj = 0;\n\t\tcount = 0;\n\t\twhile (j < len)\n\t\t{\n\t\t\tif (str[i] == str[j])\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\t\tif (count == 1)\n\t\t{\n\t\t\treturn str[i];\n\t\t}\n\t\ti++;\n\t}\n\treturn null;\n}",
    "{\n\tstring[] str_arr = str1.split(\"\");\n\tstring[] str_arr_unique = str_arr.dup;\n\tstr_arr_unique.sort();\n\tstr_arr_unique.unique;\n\t\n\tforeach(str; str_arr_unique)\n\t{\n\t\tif(str_arr.count(str) == 1)\n\t\t{\n\t\t\treturn str;\n\t\t}\n\t}\n\treturn Nullable!(string).init;\n}",
    "{\n\tstring[] str_arr = str1.split(\"\");\n\tint[] count = new int[str_arr.length];\n\tint i = 0;\n\tforeach(str; str_arr)\n\t{\n\t\tcount[i] = 0;\n\t\tforeach(str2; str_arr)\n\t\t{\n\t\t\tif(str == str2)\n\t\t\t{\n\t\t\t\tcount[i]++;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\tint min_index = 0;\n\tint min_value = count[0];\n\tfor(int j = 1; j < count.length; j++)\n\t{\n\t\tif(count[j] < min_value)\n\t\t{\n\t\t\tmin_value = count[j];\n\t\t\tmin_index = j;\n\t\t}\n\t}\n\tif(min_value == 1)\n\t{\n\t\treturn str_arr[min_index];\n\t}\n\telse\n\t{\n\t\treturn Nullable!(string).init;\n\t}\n}",
    "{\n\tstring str2 = str1.dup;\n\tstring str3 = str1.dup;\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint l = 0;\n\tint m = 0;\n\tint n = 0;\n\tint o = 0;\n\tint p = 0;\n\tint q = 0;\n\tint r = 0;\n\tint s = 0;\n\tint t = 0;\n\tint u = 0;\n\tint v = 0;\n\tint w = 0;\n\tint x = 0;\n\tint y = 0;\n\tint z = 0;\n\tint a = 0;\n\tint b = 0;\n\tint c = 0;\n\tint d = 0;\n\tint e = 0;\n\tint f = 0;\n\tint g = 0;\n\tint h = 0;\n\tint ii = 0;\n\tint jj = 0;\n\tint kk = 0;\n\tint ll = 0;\n\tint mm = 0;\n\tint nn = 0;\n\tint oo = 0;\n\tint pp = 0;\n\tint qq = 0;\n\tint rr = 0;\n\tint ss = 0;\n\tint tt = 0;\n\tint uu = 0;\n\tint vv = 0;\n\tint ww = 0;\n\tint xx = 0;\n\tint yy = 0;\n\tint zz = 0;\n\tint aa = 0;\n\tint bb = 0;\n\tint cc = 0;\n\tint dd = 0;\n\tint ee = 0;\n\tint ff = 0;\n\tint gg = 0;\n\tint hh = 0;\n\tint iii = 0;\n\tint jjj = 0;\n\tint kkk = 0;\n\tint lll = 0;\n\tint mmm = 0;\n\tint nnn = 0;\n\tint ooo = 0;\n\tint ppp = 0;\n\tint qqq = 0;\n\tint rrr = 0;\n\tint sss = 0;\n\tint ttt = 0;\n\tint uuu = 0;\n\t",
    "{\n\tauto str = str1.dup;\n\tint[] count = new int[str.length];\n\tforeach(i, c; str)\n\t{\n\t\tcount[i] = 0;\n\t\tforeach(j, d; str)\n\t\t{\n\t\t\tif(c == d)\n\t\t\t{\n\t\t\t\tcount[i]++;\n\t\t\t}\n\t\t}\n\t}\n\tforeach(i, c; str)\n\t{\n\t\tif(count[i] == 1)\n\t\t{\n\t\t\treturn c;\n\t\t}\n\t}\n\treturn null;\n}",
    "{\n\tstring[] str2 = str1.split(\"\");\n\tstring[] str3 = str1.split(\"\");\n\t\n\tforeach(i, c; str2)\n\t{\n\t\tstr3.remove(c);\n\t\tif(str3.count(c) == 0)\n\t\t{\n\t\t\treturn c;\n\t\t}\n\t}\n\treturn null;\n}",
    "{\n\tstring[] str_arr = str1.split(\"\");\n\t\n\tforeach(str; str_arr)\n\t{\n\t\tif(str_arr.count(str) == 1)\n\t\t{\n\t\t\treturn str;\n\t\t}\n\t}\n\t\n\treturn null;\n}",
    "{\n\tstring str = str1.toLower();\n\tint[] char_count = new int[256];\n\tforeach(c; str)\n\t{\n\t\tchar_count[cast(int)c]++;\n\t}\n\t\n\tforeach(c; str)\n\t{\n\t\tif(char_count[cast(int)c] == 1)\n\t\t{\n\t\t\treturn c;\n\t\t}\n\t}\n\treturn null;\n}",
    "{\n\t// Create a dictionary to store the count of each character\n\tauto dict = new Dictionary!(char, int);\n\t\n\t// Iterate through the string and add the count of each character to the dictionary\n\tforeach(char c; str1)\n\t{\n\t\tif(dict.contains(c))\n\t\t{\n\t\t\tdict[c]++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdict[c] = 1;\n\t\t}\n\t}\n\t\n\t// Iterate through the string and find the first character with a count of 1\n\tforeach(char c; str1)\n\t{\n\t\tif(dict[c] == 1)\n\t\t{\n\t\t\treturn c;\n\t\t}\n\t}\n\t\n\treturn null;\n}",
    "{\n\tstring str = str1.toLower();\n\tint[] arr = new int[str.length];\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tforeach(c; str)\n\t{\n\t\tj = 0;\n\t\tk = 1;\n\t\tforeach(d; str)\n\t\t{\n\t\t\tif(c == d)\n\t\t\t{\n\t\t\t\tk++;\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\t\tarr[i] = k;\n\t\ti++;\n\t}\n\ti = 0;\n\tforeach(c; str)\n\t{\n\t\tif(arr[i] == 1)\n\t\t{\n\t\t\treturn str[i..i+1];\n\t\t}\n\t\ti++;\n\t}\n\treturn null;\n}",
    "{\n\tNullable!(string) result = Nullable!(string).init;\n\t\n\tforeach(ch; str1)\n\t{\n\t\tif(str1.count(ch) == 1)\n\t\t{\n\t\t\tresult = ch;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tstring[] str_arr = str1.split(\"\");\n\tforeach(i, str; str_arr)\n\t{\n\t\tif(str_arr.count(str) == 1)\n\t\t{\n\t\t\treturn str;\n\t\t}\n\t}\n\treturn Nullable!(string).init;\n}",
    "{\n\tstring str = str1.toLower();\n\tint[] char_count = new int[256];\n\tforeach(ch; str)\n\t{\n\t\tchar_count[ch]++;\n\t}\n\tforeach(ch; str)\n\t{\n\t\tif(char_count[ch] == 1)\n\t\t{\n\t\t\treturn ch;\n\t\t}\n\t}\n\treturn null;\n}",
    "{\n\tauto char_count = new int[256];\n\tforeach(c; str1)\n\t{\n\t\tchar_count[c]++;\n\t}\n\t\n\tforeach(c; str1)\n\t{\n\t\tif(char_count[c] == 1)\n\t\t{\n\t\t\treturn c;\n\t\t}\n\t}\n\treturn null;\n}",
    "{\n\tstring[] str_array = str1.split(\"\");\n\tstring[] str_array_unique = str_array.unique;\n\t\n\tforeach(str; str_array_unique)\n\t{\n\t\tif(str_array.count(str) == 1)\n\t\t{\n\t\t\treturn str;\n\t\t}\n\t}\n\treturn null;\n}"
  ]
}