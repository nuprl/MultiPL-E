{
  "name": "mbpp_456_reverse_string_list",
  "language": "d",
  "prompt": "import std.math;\n/*\n\n\tWrite a function to reverse each string in a given array of string values.\n\t\n*/\nstring[] reverse_string_list(string[] stringlist) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_456_reverse_string_list.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tstring[] reversed_string_list;\n\tforeach(string s; stringlist)\n\t{\n\t\treversed_string_list ~= s.dup.reverse;\n\t}\n\treturn reversed_string_list;\n}",
    "{\n\tstring[] reversed_list;\n\tforeach(string s; stringlist)\n\t{\n\t\treversed_list ~= s.dup.reverse;\n\t}\n\treturn reversed_list;\n}",
    "{\n\tstring[] result = new string[stringlist.length];\n\tfor (int i = 0; i < stringlist.length; i++) {\n\t\tresult[i] = reverse(stringlist[i]);\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(string s; stringlist)\n\t{\n\t\tresult ~= s.dup.reverse;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result = new string[stringlist.length];\n\tforeach(int i, string s; stringlist)\n\t{\n\t\tresult[i] = s.dup.reverse;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] reversed_stringlist = new string[stringlist.length];\n\tfor (int i = 0; i < stringlist.length; i++)\n\t{\n\t\treversed_stringlist[i] = reverse_string(stringlist[i]);\n\t}\n\treturn reversed_stringlist;\n}",
    "{\n\tstring[] result = new string[stringlist.length];\n\tforeach(string s; stringlist)\n\t{\n\t\tresult ~= s.dup.reverse;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] reversed_list;\n\tforeach(string s; stringlist)\n\t{\n\t\treversed_list ~= s.dup.reverse;\n\t}\n\treturn reversed_list;\n}",
    "{\n\tforeach(string s; stringlist)\n\t{\n\t\tstringlist[s] = reverse(stringlist[s]);\n\t}\n\treturn stringlist;\n}",
    "{\n\tstring[] reversed_list;\n\treversed_list.length = stringlist.length;\n\tforeach(string s; stringlist) \n\t{\n\t\treversed_list ~= s.dup.reverse;\n\t}\n\treturn reversed_list;\n}",
    "{\n\tstring[] reversed_stringlist;\n\tforeach(string s; stringlist)\n\t{\n\t\treversed_stringlist ~= s.dup.reverse;\n\t}\n\treturn reversed_stringlist;\n}",
    "{\n\tstring[] result = new string[stringlist.length];\n\tfor (int i = 0; i < stringlist.length; i++)\n\t{\n\t\tresult[i] = reverse_string(stringlist[i]);\n\t}\n\treturn result;\n}",
    "{\n\tstring[] reversed_list;\n\tforeach(string s; stringlist)\n\t{\n\t\treversed_list ~= s.dup.reverse;\n\t}\n\treturn reversed_list;\n}",
    "{\n\tstring[] reversed_list = new string[stringlist.length];\n\tforeach(string s; stringlist)\n\t{\n\t\treversed_list ~= reverse(s);\n\t}\n\treturn reversed_list;\n}",
    "{\n\tforeach(string s; stringlist)\n\t{\n\t\tstringlist[$-1] = s.dup.reverse;\n\t}\n\treturn stringlist;\n}",
    "{\n\tstring[] reversed_list;\n\tforeach(string s; stringlist)\n\t{\n\t\treversed_list ~= s.dup.reverse;\n\t}\n\treturn reversed_list;\n}",
    "{\n\tstring[] result;\n\tforeach(string s; stringlist)\n\t{\n\t\tresult ~= s.dup.reverse;\n\t}\n\treturn result;\n}",
    "{\n\tstring[] result;\n\tforeach(string s; stringlist)\n\t{\n\t\tresult ~= s.dup.reverse;\n\t}\n\treturn result;\n}",
    "{\n\tforeach(string s; stringlist)\n\t{\n\t\tstringlist[s] = reverse(s);\n\t}\n\treturn stringlist;\n}",
    "{\n\tstring[] reversed_stringlist = new string[stringlist.length];\n\t\n\tforeach(string s; stringlist)\n\t{\n\t\treversed_stringlist ~= s.dup.reverse;\n\t}\n\t\n\treturn reversed_stringlist;\n}"
  ]
}