{
  "name": "mbpp_296_get_Inv_Count",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count inversions in an array.\n\t\n*/\nlong get_Inv_Count(long[] arr) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_296_get_Inv_Count.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{ \n    long inv_count = 0; \n    for (long i = 0; i < arr.length - 1; i++) \n        for (long j = i + 1; j < arr.length; j++) \n            if (arr[i] > arr[j]) \n                inv_count++; \n  \n    return inv_count; \n} ",
    "{ \n    long inv_count = 0; \n    for (long i = 0; i < arr.length - 1; i++) \n        for (long j = i+1; j < arr.length; j++) \n            if (arr[i] > arr[j]) \n                inv_count++; \n  \n    return inv_count; \n} ",
    "{ \n    long inv_count = 0; \n    for (long i = 0; i < arr.length - 1; i++) \n        for (long j = i + 1; j < arr.length; j++) \n            if (arr[i] > arr[j]) \n                inv_count++; \n  \n    return inv_count; \n} ",
    "{ \n    long inv_count = 0; \n    for (long i = 0; i < arr.length - 1; i++) \n        for (long j = i+1; j < arr.length; j++) \n            if (arr[i] > arr[j]) \n                inv_count++; \n  \n    return inv_count; \n} ",
    "{ \n    long inv_count = 0; \n    for (long i = 0; i < arr.length - 1; i++) \n        for (long j = i+1; j < arr.length; j++) \n            if (arr[i] > arr[j]) \n                inv_count++; \n  \n    return inv_count; \n} ",
    "{ \n    long inv_count = 0; \n    for (long i = 0; i < arr.length - 1; i++) \n        for (long j = i+1; j < arr.length; j++) \n            if (arr[i] > arr[j]) \n                inv_count++; \n  \n    return inv_count; \n} ",
    "{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tinv_count++;\n\t\t\t}\n\t\t}\n\t}\n\treturn inv_count;\n}",
    "{ \n    long inv_count = 0; \n    for (long i = 0; i < arr.length - 1; i++) \n        for (long j = i + 1; j < arr.length; j++) \n            if (arr[i] > arr[j]) \n                inv_count++; \n  \n    return inv_count; \n} ",
    "{ \n    long inv_count = 0; \n    for (long i = 0; i < arr.length - 1; i++) \n        for (long j = i+1; j < arr.length; j++) \n            if (arr[i] > arr[j]) \n                inv_count++; \n  \n    return inv_count; \n} ",
    "{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t\tinv_count++;\n\t\t}\n\t}\n\treturn inv_count;\n}",
    "{ \n    long inv_count = 0; \n    for (long i = 0; i < arr.length - 1; i++) \n        for (long j = i+1; j < arr.length; j++) \n            if (arr[i] > arr[j]) \n                inv_count++; \n  \n    return inv_count; \n} ",
    "{ \n    long inv_count = 0; \n    for (long i = 0; i < arr.length - 1; i++) \n        for (long j = i+1; j < arr.length; j++) \n            if (arr[i] > arr[j]) \n                inv_count++; \n  \n    return inv_count; \n} ",
    "{ \n    long inv_count = 0; \n    for (long i = 0; i < arr.length - 1; i++) \n        for (long j = i+1; j < arr.length; j++) \n            if (arr[i] > arr[j]) \n                inv_count++; \n  \n    return inv_count; \n} ",
    "{\n\tlong inv_count = 0;\n\tlong[] temp = new long[arr.length];\n\treturn _mergeSort(arr, temp, 0, arr.length - 1);\n}",
    "{ \n    long inv_count = 0; \n    for (long i = 0; i < arr.length - 1; i++) \n        for (long j = i+1; j < arr.length; j++) \n            if (arr[i] > arr[j]) \n                inv_count++; \n  \n    return inv_count; \n} ",
    "{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t\tinv_count++;\n\t\t}\n\t}\n\treturn inv_count;\n}",
    "{ \n    long inv_count = 0; \n    for (long i = 0; i < arr.length - 1; i++) \n        for (long j = i+1; j < arr.length; j++) \n            if (arr[i] > arr[j]) \n                inv_count++; \n  \n    return inv_count; \n} ",
    "{ \n    long inv_count = 0; \n    for (long i = 0; i < arr.length - 1; i++) \n        for (long j = i+1; j < arr.length; j++) \n            if (arr[i] > arr[j]) \n                inv_count++; \n    return inv_count; \n} ",
    "{\n    long inv_count = 0;\n    long n = arr.length;\n    for (long i = 0; i < n - 1; i++)\n        for (long j = i + 1; j < n; j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n    return inv_count;\n}",
    "{\n\tlong inv_count = 0;\n\tlong n = arr.length;\n\tfor (long i = 0; i < n - 1; i++)\n\t{\n\t\tfor (long j = i + 1; j < n; j++)\n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t\tinv_count++;\n\t\t}\n\t}\n\treturn inv_count;\n}",
    "{ \n    long inv_count = 0; \n    for (long i = 0; i < arr.length - 1; i++) \n        for (long j = i+1; j < arr.length; j++) \n            if (arr[i] > arr[j]) \n                inv_count++; \n  \n    return inv_count; \n} ",
    "{\n\tlong inv_count = 0;\n\tlong[] temp = new long[arr.length];\n\treturn _mergeSort(arr, temp, 0, arr.length - 1);\n}",
    "{ \n    long inv_count = 0; \n    for (long i = 0; i < arr.length - 1; i++) \n        for (long j = i + 1; j < arr.length; j++) \n            if (arr[i] > arr[j]) \n                inv_count++; \n  \n    return inv_count; \n} ",
    "{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t\tinv_count++;\n\t\t}\n\t}\n\treturn inv_count;\n}",
    "{ \n    long inv_count = 0; \n    for (long i = 0; i < arr.length - 1; i++) \n        for (long j = i+1; j < arr.length; j++) \n            if (arr[i] > arr[j]) \n                inv_count++; \n  \n    return inv_count; \n} ",
    "{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t\tinv_count++;\n\t\t}\n\t}\n\treturn inv_count;\n}",
    "{ \n    long inv_count = 0; \n    for (long i = 0; i < arr.length - 1; i++) \n        for (long j = i+1; j < arr.length; j++) \n            if (arr[i] > arr[j]) \n                inv_count++; \n  \n    return inv_count; \n} ",
    "{ \n    long inv_count = 0; \n    for (long i = 0; i < arr.length - 1; i++) \n        for (long j = i+1; j < arr.length; j++) \n            if (arr[i] > arr[j]) \n                inv_count++; \n  \n    return inv_count; \n} ",
    "{ \n    long inv_count = 0; \n    for (long i = 0; i < arr.length - 1; i++) \n        for (long j = i+1; j < arr.length; j++) \n            if (arr[i] > arr[j]) \n                inv_count++; \n  \n    return inv_count; \n} ",
    "{ \n    long inv_count = 0; \n    for (long i = 0; i < arr.length - 1; i++) \n        for (long j = i+1; j < arr.length; j++) \n            if (arr[i] > arr[j]) \n                inv_count++; \n  \n    return inv_count; \n} ",
    "{ \n    long inv_count = 0; \n    for (long i = 0; i < arr.length - 1; i++) \n        for (long j = i+1; j < arr.length; j++) \n            if (arr[i] > arr[j]) \n                inv_count++; \n  \n    return inv_count; \n} ",
    "{\n\tlong inv_count = 0;\n\tfor(long i = 0; i < arr.length; i++) \n\t{\n\t\tfor(long j = i+1; j < arr.length; j++) \n\t\t{\n\t\t\tif(arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tinv_count++;\n\t\t\t}\n\t\t}\n\t}\n\treturn inv_count;\n}",
    "{\n\tlong inv_count = 0;\n\tlong[] temp = new long[arr.length];\n\treturn _mergeSort(arr, temp, 0, arr.length - 1);\n}",
    "{\n\tlong inv_count = 0;\n\tlong[] temp = new long[arr.length];\n\treturn _mergeSort(arr, temp, 0, arr.length - 1);\n}",
    "{ \n    long inv_count = 0; \n    for (long i = 0; i < arr.length - 1; i++) \n        for (long j = i+1; j < arr.length; j++) \n            if (arr[i] > arr[j]) \n                inv_count++; \n  \n    return inv_count; \n} ",
    "{ \n    long inv_count = 0; \n    for (long i = 0; i < arr.length - 1; i++) \n        for (long j = i+1; j < arr.length; j++) \n            if (arr[i] > arr[j]) \n                inv_count++; \n  \n    return inv_count; \n} ",
    "{ \n    long inv_count = 0; \n    for (long i = 0; i < arr.length - 1; i++) \n        for (long j = i+1; j < arr.length; j++) \n            if (arr[i] > arr[j]) \n                inv_count++; \n  \n    return inv_count; \n} ",
    "{\n\tlong inv_count = 0;\n\tforeach(i, a; arr)\n\t{\n\t\tforeach(j, b; arr[i+1..$])\n\t\t{\n\t\t\tif(a > b)\n\t\t\t\tinv_count++;\n\t\t}\n\t}\n\treturn inv_count;\n}",
    "{\n\tlong inv_count = 0;\n\tlong[] temp = new long[arr.length];\n\treturn _mergeSort(arr, temp, 0, arr.length - 1);\n}",
    "{\n\tlong inv_count = 0;\n\tlong n = arr.length;\n\tfor (long i = 0; i < n - 1; i++) \n\t{\n\t\tfor (long j = i + 1; j < n; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t\tinv_count++;\n\t\t}\n\t}\n\treturn inv_count;\n}",
    "{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t\tinv_count++;\n\t\t}\n\t}\n\treturn inv_count;\n}",
    "{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t\tinv_count++;\n\t\t}\n\t}\n\treturn inv_count;\n}",
    "{ \n    long inv_count = 0; \n    for (long i = 0; i < arr.length - 1; i++) \n        for (long j = i + 1; j < arr.length; j++) \n            if (arr[i] > arr[j]) \n                inv_count++; \n  \n    return inv_count; \n} ",
    "{ \n    long inv_count = 0; \n    for (long i = 0; i < arr.length - 1; i++) \n        for (long j = i+1; j < arr.length; j++) \n            if (arr[i] > arr[j]) \n                inv_count++; \n  \n    return inv_count; \n} ",
    "{\n\tlong inv_count = 0;\n\tlong[] temp = new long[arr.length];\n\treturn _mergeSort(arr, temp, 0, arr.length - 1);\n}",
    "{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length - 1; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tinv_count++;\n\t\t\t}\n\t\t}\n\t}\n\treturn inv_count;\n}",
    "{ \n    long inv_count = 0; \n    for (long i = 0; i < arr.length - 1; i++) \n        for (long j = i + 1; j < arr.length; j++) \n            if (arr[i] > arr[j]) \n                inv_count++; \n  \n    return inv_count; \n} ",
    "{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t\tinv_count++;\n\t\t}\n\t}\n\treturn inv_count;\n}",
    "{ \n\tlong inv_count = 0; \n\tfor (long i = 0; i < arr.length - 1; i++) \n\t\tfor (long j = i+1; j < arr.length; j++) \n\t\t\tif (arr[i] > arr[j]) \n\t\t\t\tinv_count++; ",
    "{ \n    long inv_count = 0; \n    for (long i = 0; i < arr.length - 1; i++) \n        for (long j = i+1; j < arr.length; j++) \n            if (arr[i] > arr[j]) \n                inv_count++; \n  \n    return inv_count; \n} ",
    "{ \n    long inv_count = 0; \n    for (long i = 0; i < arr.length - 1; i++) \n        for (long j = i+1; j < arr.length; j++) \n            if (arr[i] > arr[j]) \n                inv_count++; \n  \n    return inv_count; \n} ",
    "{ \n    long inv_count = 0; \n    for (long i = 0; i < arr.length - 1; i++) \n        for (long j = i + 1; j < arr.length; j++) \n            if (arr[i] > arr[j]) \n                inv_count++; \n  \n    return inv_count; \n} ",
    "{\n\tlong inv_count = 0;\n\tlong[] temp = new long[arr.length];\n\treturn _mergeSort(arr, temp, 0, arr.length - 1);\n}",
    "{ \n    long inv_count = 0; \n    for (long i = 0; i < arr.length - 1; i++) \n        for (long j = i + 1; j < arr.length; j++) \n            if (arr[i] > arr[j]) \n                inv_count++; \n  \n    return inv_count; \n} ",
    "{ \n\tlong inv_count = 0; \n\tfor (long i = 0; i < arr.length - 1; i++) \n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t\tif (arr[i] > arr[j]) \n\t\t\t\tinv_count++; ",
    "{ \n    long inv_count = 0; \n    for (long i = 0; i < arr.length - 1; i++) \n        for (long j = i + 1; j < arr.length; j++) \n            if (arr[i] > arr[j]) \n                inv_count++; \n  \n    return inv_count; \n} ",
    "{ \n    long inv_count = 0; \n    for (long i = 0; i < arr.length - 1; i++) \n        for (long j = i+1; j < arr.length; j++) \n            if (arr[i] > arr[j]) \n                inv_count++; \n  \n    return inv_count; \n} ",
    "{ \n    long inv_count = 0; \n    for (long i = 0; i < arr.length - 1; i++) \n        for (long j = i+1; j < arr.length; j++) \n            if (arr[i] > arr[j]) \n                inv_count++; \n  \n    return inv_count; \n} ",
    "{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t\tinv_count++;\n\t\t}\n\t}\n\treturn inv_count;\n}",
    "{ \n    long inv_count = 0; \n    for (long i = 0; i < arr.length - 1; i++) \n        for (long j = i + 1; j < arr.length; j++) \n            if (arr[i] > arr[j]) \n                inv_count++; \n  \n    return inv_count; \n} ",
    "{\n\tlong inv_count = 0;\n\tlong n = arr.length;\n\tfor (long i = 0; i < n - 1; i++)\n\t{\n\t\tfor (long j = i + 1; j < n; j++)\n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tinv_count++;\n\t\t\t}\n\t\t}\n\t}\n\treturn inv_count;\n}",
    "{ \n    long inv_count = 0; \n    for (long i = 0; i < arr.length - 1; i++) \n        for (long j = i+1; j < arr.length; j++) \n            if (arr[i] > arr[j]) \n                inv_count++; \n  \n    return inv_count; \n} ",
    "{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t\tinv_count++;\n\t\t}\n\t}\n\treturn inv_count;\n}",
    "{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t\tinv_count++;\n\t\t}\n\t}\n\treturn inv_count;\n}",
    "{ \n    long inv_count = 0; \n    for (long i = 0; i < arr.length - 1; i++) \n        for (long j = i+1; j < arr.length; j++) \n            if (arr[i] > arr[j]) \n                inv_count++; \n  \n    return inv_count; \n} ",
    "{\n\tlong inv_count = 0;\n\tlong n = arr.length;\n\tfor (long i = 0; i < n - 1; i++) \n\t{\n\t\tfor (long j = i + 1; j < n; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tinv_count++;\n\t\t\t}\n\t\t}\n\t}\n\treturn inv_count;\n}",
    "{ \n    long inv_count = 0; \n    for (long i = 0; i < arr.length - 1; i++) \n        for (long j = i+1; j < arr.length; j++) \n            if (arr[i] > arr[j]) \n                inv_count++; \n  \n    return inv_count; \n} ",
    "{\n\tlong inv_count = 0;\n\tlong i, j;\n\t\n\tfor (i = 0; i < arr.length - 1; i++)\n\t{\n\t\tfor (j = i + 1; j < arr.length; j++)\n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t\tinv_count++;\n\t\t}\n\t}\n\t\n\treturn inv_count;\n}",
    "{ \n    long inv_count = 0; \n    for (long i = 0; i < arr.length - 1; i++) \n        for (long j = i + 1; j < arr.length; j++) \n            if (arr[i] > arr[j]) \n                inv_count++; \n  \n    return inv_count; \n} ",
    "{ \n    long inv_count = 0; \n    for (long i = 0; i < arr.length - 1; i++) \n        for (long j = i+1; j < arr.length; j++) \n            if (arr[i] > arr[j]) \n                inv_count++; \n  \n    return inv_count; \n} ",
    "{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t\tinv_count++;\n\t\t}\n\t}\n\treturn inv_count;\n}",
    "{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t\tinv_count++;\n\t\t}\n\t}\n\treturn inv_count;\n}",
    "{ \n    long inv_count = 0; \n    for (long i = 0; i < arr.length - 1; i++) \n        for (long j = i + 1; j < arr.length; j++) \n            if (arr[i] > arr[j]) \n                inv_count++; \n  \n    return inv_count; \n} ",
    "{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t\tinv_count++;\n\t\t}\n\t}\n\treturn inv_count;\n}",
    "{\n\tlong inv_count = 0;\n\tlong len = arr.length;\n\tfor (long i = 0; i < len - 1; i++) \n\t{\n\t\tfor (long j = i + 1; j < len; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t\tinv_count++;\n\t\t}\n\t}\n\treturn inv_count;\n}",
    "{ \n    long inv_count = 0; \n    for (long i = 0; i < arr.length - 1; i++) \n        for (long j = i+1; j < arr.length; j++) \n            if (arr[i] > arr[j]) \n                inv_count++; \n  \n    return inv_count; \n} ",
    "{ \n    long inv_count = 0; \n    for (long i = 0; i < arr.length - 1; i++) \n        for (long j = i+1; j < arr.length; j++) \n            if (arr[i] > arr[j]) \n                inv_count++; \n  \n    return inv_count; \n} ",
    "{ \n    long inv_count = 0; \n    for (long i = 0; i < arr.length - 1; i++) \n        for (long j = i+1; j < arr.length; j++) \n            if (arr[i] > arr[j]) \n                inv_count++; \n  \n    return inv_count; \n} ",
    "{ \n    long inv_count = 0; \n    for (long i = 0; i < arr.length - 1; i++) \n        for (long j = i+1; j < arr.length; j++) \n            if (arr[i] > arr[j]) \n                inv_count++; \n  \n    return inv_count; \n} ",
    "{ \n    long inv_count = 0; \n    for (long i = 0; i < arr.length - 1; i++) \n        for (long j = i+1; j < arr.length; j++) \n            if (arr[i] > arr[j]) \n                inv_count++; \n  \n    return inv_count; \n} ",
    "{\n\tlong inv_count = 0;\n\tlong n = arr.length;\n\tfor (long i = 0; i < n - 1; i++) \n\t{\n\t\tfor (long j = i + 1; j < n; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t\tinv_count++;\n\t\t}\n\t}\n\treturn inv_count;\n}",
    "{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t\tinv_count++;\n\t\t}\n\t}\n\treturn inv_count;\n}",
    "{ \n    long inv_count = 0; \n    for (long i = 0; i < arr.length - 1; i++) \n        for (long j = i + 1; j < arr.length; j++) \n            if (arr[i] > arr[j]) \n                inv_count++; \n  \n    return inv_count; \n} ",
    "{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t\tinv_count++;\n\t\t}\n\t}\n\treturn inv_count;\n}",
    "{ \n    long inv_count = 0; \n    for (long i = 0; i < arr.length - 1; i++) \n        for (long j = i+1; j < arr.length; j++) \n            if (arr[i] > arr[j]) \n                inv_count++; \n  \n    return inv_count; \n} ",
    "{ \n    long inv_count = 0; \n    for (long i = 0; i < arr.length - 1; i++) \n        for (long j = i+1; j < arr.length; j++) \n            if (arr[i] > arr[j]) \n                inv_count++; \n  \n    return inv_count; \n} ",
    "{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tinv_count++;\n\t\t\t}\n\t\t}\n\t}\n\treturn inv_count;\n}",
    "{ \n    long inv_count = 0; \n    for (long i = 0; i < arr.length - 1; i++) \n        for (long j = i + 1; j < arr.length; j++) \n            if (arr[i] > arr[j]) \n                inv_count++; \n  \n    return inv_count; \n} ",
    "{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length - 1; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tinv_count++;\n\t\t\t}\n\t\t}\n\t}\n\treturn inv_count;\n}",
    "{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t\tinv_count++;\n\t\t}\n\t}\n\treturn inv_count;\n}",
    "{\n\tlong inv_count = 0;\n\tlong[] temp = new long[arr.length];\n\treturn _mergeSort(arr, temp, 0, arr.length - 1);\n}",
    "{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t\tinv_count++;\n\t\t}\n\t}\n\treturn inv_count;\n}",
    "{ \n    long inv_count = 0; \n    for (long i = 0; i < arr.length - 1; i++) \n        for (long j = i+1; j < arr.length; j++) \n            if (arr[i] > arr[j]) \n                inv_count++; \n  \n    return inv_count; \n} ",
    "{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t\tinv_count++;\n\t\t}\n\t}\n\treturn inv_count;\n}",
    "{ \n    long inv_count = 0; \n    for (long i = 0; i < arr.length - 1; i++) \n        for (long j = i+1; j < arr.length; j++) \n            if (arr[i] > arr[j]) \n                inv_count++; \n  \n    return inv_count; \n} ",
    "{\n\tlong inv_count = 0;\n\tlong[] temp = new long[arr.length];\n\treturn _mergeSort(arr, temp, 0, arr.length - 1);\n}",
    "{ \n    long inv_count = 0; \n    for (long i = 0; i < arr.length - 1; i++) \n        for (long j = i+1; j < arr.length; j++) \n            if (arr[i] > arr[j]) \n                inv_count++; \n  \n    return inv_count; \n} ",
    "{ \n    long inv_count = 0; \n    long n = arr.length;\n    for (long i = 0; i < n - 1; i++) \n        for (long j = i + 1; j < n; j++) \n            if (arr[i] > arr[j]) \n                inv_count++; \n  \n    return inv_count; \n} ",
    "{ \n    long inv_count = 0; \n    for (long i = 0; i < arr.length - 1; i++) \n        for (long j = i+1; j < arr.length; j++) \n            if (arr[i] > arr[j]) \n                inv_count++; \n  \n    return inv_count; \n} ",
    "{ \n    long inv_count = 0; \n    for (long i = 0; i < arr.length - 1; i++) \n        for (long j = i + 1; j < arr.length; j++) \n            if (arr[i] > arr[j]) \n                inv_count++; \n  \n    return inv_count; \n} ",
    "{ \n    long inv_count = 0; \n    for (long i = 0; i < arr.length - 1; i++) \n        for (long j = i+1; j < arr.length; j++) \n            if (arr[i] > arr[j]) \n                inv_count++; \n  \n    return inv_count; \n} ",
    "{\n\tlong inv_count = 0;\n\tlong[] temp = new long[arr.length];\n\treturn _mergeSort(arr, temp, 0, arr.length - 1);\n}",
    "{ \n    long inv_count = 0; \n    for (long i = 0; i < arr.length - 1; i++) \n        for (long j = i+1; j < arr.length; j++) \n            if (arr[i] > arr[j]) \n                inv_count++; \n  \n    return inv_count; \n} ",
    "{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tinv_count++;\n\t\t\t}\n\t\t}\n\t}\n\treturn inv_count;\n}",
    "{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t\tinv_count++;\n\t\t}\n\t}\n\treturn inv_count;\n}",
    "{\n\tlong inv_count = 0;\n\tlong i, j;\n\t\n\tfor (i = 0; i < arr.length; i++) \n\t{\n\t\tfor (j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t\tinv_count++;\n\t\t}\n\t}\n\treturn inv_count;\n}",
    "{ \n    long inv_count = 0; \n    for (long i = 0; i < arr.length - 1; i++) \n        for (long j = i+1; j < arr.length; j++) \n            if (arr[i] > arr[j]) \n                inv_count++; \n  \n    return inv_count; \n} ",
    "{ \n    long inv_count = 0; \n    for (long i = 0; i < arr.length - 1; i++) \n        for (long j = i+1; j < arr.length; j++) \n            if (arr[i] > arr[j]) \n                inv_count++; \n  \n    return inv_count; \n} ",
    "{ \n\tlong inv_count = 0; \n\tfor (long i = 0; i < arr.length - 1; i++) \n\t\tfor (long j = i+1; j < arr.length; j++) \n\t\t\tif (arr[i] > arr[j]) \n\t\t\t\tinv_count++; ",
    "{\n\tlong inv_count = 0;\n\tlong i, j;\n\t\n\tfor (i = 0; i < arr.length - 1; i++) \n\t{\n\t\tfor (j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t\tinv_count++;\n\t\t}\n\t}\n\treturn inv_count;\n}",
    "{ \n    long inv_count = 0; \n    for (long i = 0; i < arr.length - 1; i++) \n        for (long j = i+1; j < arr.length; j++) \n            if (arr[i] > arr[j]) \n                inv_count++; \n  \n    return inv_count; \n} ",
    "{ \n    long inv_count = 0; \n    for (long i = 0; i < arr.length - 1; i++) \n        for (long j = i+1; j < arr.length; j++) \n            if (arr[i] > arr[j]) \n                inv_count++; \n  \n    return inv_count; \n} ",
    "{ \n    long inv_count = 0; \n    for (long i = 0; i < arr.length - 1; i++) \n        for (long j = i+1; j < arr.length; j++) \n            if (arr[i] > arr[j]) \n                inv_count++; \n  \n    return inv_count; \n} ",
    "{ \n    long inv_count = 0; \n    for (long i = 0; i < arr.length - 1; i++) \n        for (long j = i+1; j < arr.length; j++) \n            if (arr[i] > arr[j]) \n                inv_count++; \n  \n    return inv_count; \n} ",
    "{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length - 1; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t\tinv_count++;\n\t\t}\n\t}\n\treturn inv_count;\n}\n/*\n\tWrite a dthon function to count the number of pairs of integers in a given array of integers whose sum is equal to a given number.\n*/\nlong get_Pairs_Count(long[] arr, long sum) \n{\n\tlong count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] + arr[j] == sum)\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n/*\n\tWrite a dthon function to find the first duplicate element in a given array of integers.\n*/\nlong get_First_Duplicate(long[] arr) \n{\n\tlong first_dup = -1;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] == arr[j]) \n\t\t\t{\n\t\t\t\tfirst_dup = arr[i];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn first_dup;\n}\n/*\n\tWrite a dthon function to find the first duplicate element in a given array of integers.\n*/\nlong get_First_Duplicate_2(long[] arr) \n{\n\tlong first_dup = -1;\n\tlong[] arr_count = new long[arr.length];\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tif (arr_count[arr[i]]",
    "{ \n    long inv_count = 0; \n    for (long i = 0; i < arr.length - 1; i++) \n        for (long j = i+1; j < arr.length; j++) \n            if (arr[i] > arr[j]) \n                inv_count++; \n  \n    return inv_count; \n} ",
    "{ \n    long inv_count = 0; \n    for (long i = 0; i < arr.length - 1; i++) \n        for (long j = i+1; j < arr.length; j++) \n            if (arr[i] > arr[j]) \n                inv_count++; \n  \n    return inv_count; \n} ",
    "{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t\tinv_count++;\n\t\t}\n\t}\n\treturn inv_count;\n}",
    "{\n\tlong inv_count = 0;\n\tlong n = arr.length;\n\tfor (long i = 0; i < n - 1; i++) \n\t{\n\t\tfor (long j = i + 1; j < n; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t\tinv_count++;\n\t\t}\n\t}\n\treturn inv_count;\n}",
    "{ \n    long inv_count = 0; \n    for (long i = 0; i < arr.length - 1; i++) \n        for (long j = i+1; j < arr.length; j++) \n            if (arr[i] > arr[j]) \n                inv_count++; \n  \n    return inv_count; \n} ",
    "{\n\tlong inv_count = 0;\n\tlong[] temp = new long[arr.length];\n\treturn _mergeSort(arr, temp, 0, arr.length - 1);\n}",
    "{ \n    long inv_count = 0; \n    for (long i = 0; i < arr.length - 1; i++) \n        for (long j = i+1; j < arr.length; j++) \n            if (arr[i] > arr[j]) \n                inv_count++; \n  \n    return inv_count; \n} ",
    "{ \n    long inv_count = 0; \n    for (long i = 0; i < arr.length - 1; i++) \n        for (long j = i+1; j < arr.length; j++) \n            if (arr[i] > arr[j]) \n                inv_count++; \n  \n    return inv_count; \n} ",
    "{ \n    long inv_count = 0; \n    for (long i = 0; i < arr.length - 1; i++) \n        for (long j = i+1; j < arr.length; j++) \n            if (arr[i] > arr[j]) \n                inv_count++; \n  \n    return inv_count; \n} ",
    "{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t\tinv_count++;\n\t\t}\n\t}\n\treturn inv_count;\n}",
    "{ \n    long inv_count = 0; \n    for (long i = 0; i < arr.length - 1; i++) \n        for (long j = i+1; j < arr.length; j++) \n            if (arr[i] > arr[j]) \n                inv_count++; \n  \n    return inv_count; \n} ",
    "{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t\tinv_count++;\n\t\t}\n\t}\n\treturn inv_count;\n}",
    "{ \n    long inv_count = 0; \n    for (long i = 0; i < arr.length - 1; i++) \n        for (long j = i+1; j < arr.length; j++) \n            if (arr[i] > arr[j]) \n                inv_count++; \n  \n    return inv_count; \n} ",
    "{ \n\tlong inv_count = 0; \n\tfor (long i = 0; i < arr.length - 1; i++) \n\t\tfor (long j = i+1; j < arr.length; j++) \n\t\t\tif (arr[i] > arr[j]) \n\t\t\t\tinv_count++; ",
    "{\n\tlong inv_count = 0;\n\tlong[] temp = new long[arr.length];\n\treturn _mergeSort(arr, temp, 0, arr.length - 1);\n}",
    "{ \n    long inv_count = 0; \n    for (long i = 0; i < arr.length - 1; i++) \n        for (long j = i+1; j < arr.length; j++) \n            if (arr[i] > arr[j]) \n                inv_count++; \n  \n    return inv_count; \n} ",
    "{ \n    long inv_count = 0; \n    for (long i = 0; i < arr.length - 1; i++) \n        for (long j = i+1; j < arr.length; j++) \n            if (arr[i] > arr[j]) \n                inv_count++; \n  \n    return inv_count; \n} ",
    "{\n\tlong inv_count = 0;\n\tlong n = arr.length;\n\tfor (long i = 0; i < n - 1; i++)\n\t\tfor (long j = i + 1; j < n; j++)\n\t\t\tif (arr[i] > arr[j])\n\t\t\t\tinv_count++;\n\treturn inv_count;\n}",
    "{\n\tlong inv_count = 0;\n\tlong n = arr.length;\n\tfor (long i = 0; i < n - 1; i++)\n\t\tfor (long j = i + 1; j < n; j++)\n\t\t\tif (arr[i] > arr[j])\n\t\t\t\tinv_count++;\n\treturn inv_count;\n}",
    "{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++)\n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++)\n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tinv_count++;\n\t\t\t}\n\t\t}\n\t}\n\treturn inv_count;\n}",
    "{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t\tinv_count++;\n\t\t}\n\t}\n\treturn inv_count;\n}",
    "{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t\tinv_count++;\n\t\t}\n\t}\n\treturn inv_count;\n}",
    "{\n\tlong inv_count = 0;\n\tlong n = arr.length;\n\tfor (long i = 0; i < n - 1; i++) \n\t{\n\t\tfor (long j = i + 1; j < n; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t\tinv_count++;\n\t\t}\n\t}\n\treturn inv_count;\n}",
    "{\n    long inv_count = 0;\n    for (long i = 0; i < arr.length - 1; i++)\n        for (long j = i + 1; j < arr.length; j++)\n            if (arr[i] > arr[j])\n                inv_count++;",
    "{ \n    long inv_count = 0; \n    for (long i = 0; i < arr.length - 1; i++) \n        for (long j = i+1; j < arr.length; j++) \n            if (arr[i] > arr[j]) \n                inv_count++; \n  \n    return inv_count; \n} ",
    "{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t\tinv_count++;\n\t\t}\n\t}\n\treturn inv_count;\n}",
    "{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t\tinv_count++;\n\t\t}\n\t}\n\treturn inv_count;\n}",
    "{ \n    long inv_count = 0; \n    for (long i = 0; i < arr.length - 1; i++) \n        for (long j = i+1; j < arr.length; j++) \n            if (arr[i] > arr[j]) \n                inv_count++; \n  \n    return inv_count; \n} ",
    "{ \n    long inv_count = 0; \n    for (long i = 0; i < arr.length - 1; i++) \n        for (long j = i+1; j < arr.length; j++) \n            if (arr[i] > arr[j]) \n                inv_count++; \n  \n    return inv_count; \n} ",
    "{ \n    long inv_count = 0; \n    for (long i = 0; i < arr.length - 1; i++) \n        for (long j = i + 1; j < arr.length; j++) \n            if (arr[i] > arr[j]) \n                inv_count++; \n  \n    return inv_count; \n} ",
    "{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t\tinv_count++;\n\t\t}\n\t}\n\treturn inv_count;\n}",
    "{ \n    long inv_count = 0; \n    for (long i = 0; i < arr.length - 1; i++) \n        for (long j = i+1; j < arr.length; j++) \n            if (arr[i] > arr[j]) \n                inv_count++; \n  \n    return inv_count; \n} ",
    "{ \n    long inv_count = 0; \n    for (long i = 0; i < arr.length - 1; i++) \n        for (long j = i+1; j < arr.length; j++) \n            if (arr[i] > arr[j]) \n                inv_count++; \n  \n    return inv_count; \n} ",
    "{ \n    long inv_count = 0; \n    for (long i = 0; i < arr.length - 1; i++) \n        for (long j = i + 1; j < arr.length; j++) \n            if (arr[i] > arr[j]) \n                inv_count++; \n  \n    return inv_count; \n} ",
    "{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tinv_count++;\n\t\t\t}\n\t\t}\n\t}\n\treturn inv_count;\n}",
    "{ \n    long inv_count = 0; \n    for (long i = 0; i < arr.length - 1; i++) \n        for (long j = i+1; j < arr.length; j++) \n            if (arr[i] > arr[j]) \n                inv_count++; \n  \n    return inv_count; \n} ",
    "{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t\tinv_count++;\n\t\t}\n\t}\n\treturn inv_count;\n}",
    "{ \n\tlong inv_count = 0; \n\tfor (long i = 0; i < arr.length - 1; i++) \n\t\tfor (long j = i+1; j < arr.length; j++) \n\t\t\tif (arr[i] > arr[j]) \n\t\t\t\tinv_count++; \n\treturn inv_count; \n} ",
    "{\n\tlong inv_count = 0;\n\tlong[] temp = new long[arr.length];\n\treturn _mergeSort(arr, temp, 0, arr.length - 1);\n}",
    "{ \n    long inv_count = 0; \n    for (long i = 0; i < arr.length - 1; i++) \n        for (long j = i+1; j < arr.length; j++) \n            if (arr[i] > arr[j]) \n                inv_count++; \n  \n    return inv_count; \n} ",
    "{\n\tlong inv_count = 0;\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\tfor (int j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t\tinv_count++;\n\t\t}\n\t}\n\treturn inv_count;\n}",
    "{ \n    long inv_count = 0; \n    for (long i = 0; i < arr.length - 1; i++) \n        for (long j = i+1; j < arr.length; j++) \n            if (arr[i] > arr[j]) \n                inv_count++; \n  \n    return inv_count; \n} ",
    "{ \n    long inv_count = 0; \n    for (long i = 0; i < arr.length - 1; i++) \n        for (long j = i+1; j < arr.length; j++) \n            if (arr[i] > arr[j]) \n                inv_count++; \n  \n    return inv_count; \n} ",
    "{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t\tinv_count++;\n\t\t}\n\t}\n\treturn inv_count;\n}",
    "{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t\tinv_count++;\n\t\t}\n\t}\n\treturn inv_count;\n}",
    "{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t\tinv_count++;\n\t\t}\n\t}\n\treturn inv_count;\n}",
    "{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t\tinv_count++;\n\t\t}\n\t}\n\treturn inv_count;\n}",
    "{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t\tinv_count++;\n\t\t}\n\t}\n\treturn inv_count;\n}",
    "{ \n    long inv_count = 0; \n    for (long i = 0; i < arr.length - 1; i++) \n        for (long j = i+1; j < arr.length; j++) \n            if (arr[i] > arr[j]) \n                inv_count++; \n  \n    return inv_count; \n} ",
    "{ \n    long inv_count = 0; \n    for (long i = 0; i < arr.length - 1; i++) \n        for (long j = i + 1; j < arr.length; j++) \n            if (arr[i] > arr[j]) \n                inv_count++; \n  \n    return inv_count; \n} ",
    "{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t\tinv_count++;\n\t\t}\n\t}\n\treturn inv_count;\n}",
    "{ \n    long inv_count = 0; \n    for (long i = 0; i < arr.length - 1; i++) \n        for (long j = i+1; j < arr.length; j++) \n            if (arr[i] > arr[j]) \n                inv_count++; \n  \n    return inv_count; \n} ",
    "{ \n    long inv_count = 0; \n    for (long i = 0; i < arr.length - 1; i++) \n        for (long j = i + 1; j < arr.length; j++) \n            if (arr[i] > arr[j]) \n                inv_count++; \n  \n    return inv_count; \n} ",
    "{\n\tlong inv_count = 0;\n\tlong n = arr.length;\n\tfor (long i = 0; i < n - 1; i++)\n\t\tfor (long j = i + 1; j < n; j++)\n\t\t\tif (arr[i] > arr[j])\n\t\t\t\tinv_count++;\n\treturn inv_count;\n}",
    "{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i+1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t\tinv_count++;\n\t\t}\n\t}\n\treturn inv_count;\n}",
    "{\n\tlong inv_count = 0;\n\tlong n = arr.length;\n\tfor (long i = 0; i < n - 1; i++)\n\t\tfor (long j = i + 1; j < n; j++)\n\t\t\tif (arr[i] > arr[j])\n\t\t\t\tinv_count++;\n\treturn inv_count;\n}",
    "{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tinv_count++;\n\t\t\t}\n\t\t}\n\t}\n\treturn inv_count;\n}",
    "{ \n    long inv_count = 0; \n    for (int i = 0; i < arr.length - 1; i++) \n        for (int j = i+1; j < arr.length; j++) \n            if (arr[i] > arr[j]) \n                inv_count++; \n  \n    return inv_count; \n} ",
    "{ \n    long inv_count = 0; \n    for (long i = 0; i < arr.length - 1; i++) \n        for (long j = i+1; j < arr.length; j++) \n            if (arr[i] > arr[j]) \n                inv_count++; \n  \n    return inv_count; \n} ",
    "{ \n\tlong inv_count = 0; \n\tfor (long i = 0; i < arr.length - 1; i++) \n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t\tif (arr[i] > arr[j]) \n\t\t\t\tinv_count++; ",
    "{ \n\tlong inv_count = 0; \n\tfor (long i = 0; i < arr.length - 1; i++) \n\t\tfor (long j = i+1; j < arr.length; j++) \n\t\t\tif (arr[i] > arr[j]) \n\t\t\t\tinv_count++; ",
    "{ \n    long inv_count = 0; \n    for (long i = 0; i < arr.length - 1; i++) \n        for (long j = i+1; j < arr.length; j++) \n            if (arr[i] > arr[j]) \n                inv_count++; \n  \n    return inv_count; \n} ",
    "{ \n    long inv_count = 0; \n    for (long i = 0; i < arr.length - 1; i++) \n        for (long j = i+1; j < arr.length; j++) \n            if (arr[i] > arr[j]) \n                inv_count++; \n  \n    return inv_count; \n} ",
    "{\n\tlong inv_count = 0;\n\tlong n = arr.length;\n\tfor (long i = 0; i < n - 1; i++) \n\t{\n\t\tfor (long j = i + 1; j < n; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t\tinv_count++;\n\t\t}\n\t}\n\treturn inv_count;\n}",
    "{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t\tinv_count++;\n\t\t}\n\t}\n\treturn inv_count;\n}",
    "{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t\tinv_count++;\n\t\t}\n\t}\n\treturn inv_count;\n}",
    "{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t\tinv_count++;\n\t\t}\n\t}\n\treturn inv_count;\n}",
    "{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t\tinv_count++;\n\t\t}\n\t}\n\treturn inv_count;\n}",
    "{ \n    long inv_count = 0; \n    for (long i = 0; i < arr.length - 1; i++) \n        for (long j = i+1; j < arr.length; j++) \n            if (arr[i] > arr[j]) \n                inv_count++; \n  \n    return inv_count; \n} ",
    "{\n\tlong inv_count = 0;\n\tlong n = arr.length;\n\tfor (long i = 0; i < n - 1; i++) \n\t{\n\t\tfor (long j = i + 1; j < n; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tinv_count++;\n\t\t\t}\n\t\t}\n\t}\n\treturn inv_count;\n}",
    "{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t\tinv_count++;\n\t\t}\n\t}\n\treturn inv_count;\n}",
    "{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t\tinv_count++;\n\t\t}\n\t}\n\treturn inv_count;\n}",
    "{ \n    long inv_count = 0; \n    for (long i = 0; i < arr.length - 1; i++) \n        for (long j = i+1; j < arr.length; j++) \n            if (arr[i] > arr[j]) \n                inv_count++; \n  \n    return inv_count; \n} ",
    "{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t\tinv_count++;\n\t\t}\n\t}\n\treturn inv_count;\n}",
    "{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t\tinv_count++;\n\t\t}\n\t}\n\treturn inv_count;\n}",
    "{ \n    long inv_count = 0; \n    for (long i = 0; i < arr.length - 1; i++) \n        for (long j = i+1; j < arr.length; j++) \n            if (arr[i] > arr[j]) \n                inv_count++; \n  \n    return inv_count; \n} ",
    "{ \n    long inv_count = 0; \n    for (long i = 0; i < arr.length - 1; i++) \n        for (long j = i+1; j < arr.length; j++) \n            if (arr[i] > arr[j]) \n                inv_count++; \n  \n    return inv_count; \n} ",
    "{ \n    long inv_count = 0; \n    for (long i = 0; i < arr.length - 1; i++) \n        for (long j = i+1; j < arr.length; j++) \n            if (arr[i] > arr[j]) \n                inv_count++; \n  \n    return inv_count; \n} ",
    "{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t\tinv_count++;\n\t\t}\n\t}\n\treturn inv_count;\n}",
    "{\n\tlong inv_count = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t\tinv_count++;\n\t\t}\n\t}\n\treturn inv_count;\n}",
    "{ \n    long inv_count = 0; \n    for (long i = 0; i < arr.length - 1; i++) \n        for (long j = i+1; j < arr.length; j++) \n            if (arr[i] > arr[j]) \n                inv_count++; \n  \n    return inv_count; \n} ",
    "{ \n    long inv_count = 0; \n    for (long i = 0; i < arr.length - 1; i++) \n        for (long j = i+1; j < arr.length; j++) \n            if (arr[i] > arr[j]) \n                inv_count++; \n  \n    return inv_count; \n} ",
    "{ \n    long inv_count = 0; \n    for (long i = 0; i < arr.length - 1; i++) \n        for (long j = i+1; j < arr.length; j++) \n            if (arr[i] > arr[j]) \n                inv_count++; \n  \n    return inv_count; \n} ",
    "{ \n    long inv_count = 0; \n    for (long i = 0; i < arr.length - 1; i++) \n        for (long j = i+1; j < arr.length; j++) \n            if (arr[i] > arr[j]) \n                inv_count++; \n  \n    return inv_count; \n} ",
    "{ \n\tlong inv_count = 0; \n\tfor (long i = 0; i < arr.length - 1; i++) \n\t\tfor (long j = i+1; j < arr.length; j++) \n\t\t\tif (arr[i] > arr[j]) \n\t\t\t\tinv_count++; "
  ]
}