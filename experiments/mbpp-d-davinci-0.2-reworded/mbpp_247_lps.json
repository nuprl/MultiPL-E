{
  "name": "mbpp_247_lps",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_247_lps.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tlong n = str.length;\n\tlong[][] L = new long[n][n];\n\tlong i, j, cl;\n\tfor (i = 0; i < n; i++)\n\t\tL[i][i] = 1;\n\tfor (cl = 2; cl <= n; cl++) {\n\t\tfor (i = 0; i < n - cl + 1; i++) {\n\t\t\tj = i + cl - 1;\n\t\t\tif (str[i] == str[j] && cl == 2)\n\t\t\t\tL[i][j] = 2;\n\t\t\telse if (str[i] == str[j])\n\t\t\t\tL[i][j] = L[i + 1][j - 1] + 2;\n\t\t\telse\n\t\t\t\tL[i][j] = max(L[i][j - 1], L[i + 1][j]);\n\t\t}\n\t}\n\treturn L[0][n - 1];\n}",
    "{\n\tlong n = str.length;\n\tlong[long][long] dp = new long[n][n];\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tdp[i][i] = 1;\n\t}\n\tfor (long l = 2; l <= n; l++) \n\t{\n\t\tfor (long i = 0; i < n - l + 1; i++) \n\t\t{\n\t\t\tlong j = i + l - 1;\n\t\t\tif (str[i] == str[j] && l == 2) \n\t\t\t{\n\t\t\t\tdp[i][j] = 2;\n\t\t\t} \n\t\t\telse if (str[i] == str[j]) \n\t\t\t{\n\t\t\t\tdp[i][j] = dp[i + 1][j - 1] + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tdp[i][j] = max(dp[i][j - 1], dp[i + 1][j]);\n\t\t\t}\n\t\t}\n\t}\n\treturn dp[0][n - 1];\n}",
    "{\n\tlong n = str.length;\n\tlong[][] L = new long[n][n];\n\t\n\tfor (long i = 0; i < n; i++) \n\t\tL[i][i] = 1;\n\t\t\n\tfor (long cl = 2; cl <= n; cl++) \n\t{\n\t\tfor (long i = 0; i < n - cl + 1; i++) \n\t\t{\n\t\t\tlong j = i + cl - 1;\n\t\t\tif (str[i] == str[j] && cl == 2) \n\t\t\t\tL[i][j] = 2;\n\t\t\telse if (str[i] == str[j]) \n\t\t\t\tL[i][j] = L[i + 1][j - 1] + 2;\n\t\t\telse \n\t\t\t\tL[i][j] = max(L[i][j - 1], L[i + 1][j]);\n\t\t}\n\t}\n\t\n\treturn L[0][n - 1];\n}",
    "{ \n    long n = str.length; \n    long i, j, cl; \n    long L[][] = new long[n][n];\n  \n    // Strings of length 1 are palindrome of lentgh 1 \n    for (i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    // Build the table. Note that the lower  \n    // diagonal values of table are \n    // useless and not filled in the process.  \n    // The values are filled in a manner similar \n    //  to Matrix Chain Multiplication DP solution (See \n    // https://www.geeksforgeeks.org/dynamic-programming-set-8-matrix-chain-multiplication/ \n    // cl is length of substring \n    for (cl=2; cl<=n; cl++) \n    { \n        for (i=0; i<n-cl+1; i++) \n        { \n            j = i+cl-1; \n            if (str[i] == str[j] && cl == 2) \n               L[i][j] = 2; \n            else if (str[i] == str[j]) \n               L[i][j] = L[i+1][j-1] + 2; \n            else\n               L[i][j] = max(L[i][j-1], L[i+1][j]); \n        } \n    } \n  \n    return L[0][n-1]; \n} ",
    "{ \n    long n = str.length; \n    long[][] L = new long[n][n]; \n  \n    for (long i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    for (long cl = 2; cl <= n; cl++) \n    { \n        for (long i = 0; i < n - cl + 1; i++) \n        { \n            long j = i + cl - 1; \n            if (str[i] == str[j] && cl == 2) \n                L[i][j] = 2; \n            else if (str[i] == str[j]) \n                L[i][j] = L[i + 1][j - 1] + 2; \n            else\n                L[i][j] = max(L[i][j - 1], L[i + 1][j]); \n        } \n    } \n  \n    return L[0][n - 1]; \n} ",
    "{ \n\tlong n = str.length; \n\tlong i, j, cl; \n\tlong L[n][n]; \n\t\n\tfor (i = 0; i < n; i++) \n\t\tL[i][i] = 1; ",
    "{ \n\tlong n = str.length; \n\tlong i, j, cl; \n\tlong L[][] = new long[n][n]; \n\t\n\tfor (i = 0; i < n; i++) \n\t\tL[i][i] = 1; \n\t\n\tfor (cl=2; cl<=n; cl++) \n\t{ \n\t\tfor (i=0; i<n-cl+1; i++) \n\t\t{ \n\t\t\tj = i+cl-1; \n\t\t\tif (str[i] == str[j] && cl == 2) \n\t\t\t\tL[i][j] = 2; \n\t\t\telse if (str[i] == str[j]) \n\t\t\t\tL[i][j] = L[i+1][j-1] + 2; \n\t\t\telse\n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \n\t\t} \n\t} \n\t\n\treturn L[0][n-1]; \n} ",
    "{ \n    long n = str.length; \n    long i, j, cl; \n    long L[][] = new long[n][n]; \n  \n    for (i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    for (cl = 2; cl <= n; cl++) \n    { \n        for (i = 0; i < n - cl + 1; i++) \n        { \n            j = i + cl - 1; \n            if (str[i] == str[j] && cl == 2) \n                L[i][j] = 2; \n            else if (str[i] == str[j]) \n                L[i][j] = L[i + 1][j - 1] + 2; \n            else\n                L[i][j] = max(L[i][j - 1], L[i + 1][j]); \n        } \n    } \n  \n    return L[0][n - 1]; \n} ",
    "{ \n\tint n = str.length; \n\tint i, j, cl; \n\tint L[][] = new int[n][n]; \n\t\n\tfor (i = 0; i < n; i++) \n\t\tL[i][i] = 1; \n\t\n\tfor (cl=2; cl<=n; cl++) \n\t{ \n\t\tfor (i=0; i<n-cl+1; i++) \n\t\t{ \n\t\t\tj = i+cl-1; \n\t\t\tif (str[i] == str[j] && cl == 2) \n\t\t\t\tL[i][j] = 2; \n\t\t\telse if (str[i] == str[j]) \n\t\t\t\tL[i][j] = L[i+1][j-1] + 2; \n\t\t\telse\n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \n\t\t} \n\t} \n\t\n\treturn L[0][n-1]; \n} ",
    "{ \n\tlong n = str.length; \n\tlong i, j, cl; \n\tlong L[][] = new long[n][n];\n\t\n\tfor (i = 0; i < n; i++) \n\t\tL[i][i] = 1; ",
    "{ \n\tlong n = str.length; \n\tlong i, j, cl; \n\t\n\t// Create a table to store results of subproblems \n\tlong L[n][n]; \n\t\n\t// Strings of length 1 are palindrome of lentgh 1 \n\tforeach (i; 0 .. n) \n\t\tL[i][i] = 1; \n\t\n\t// Build the table. Note that the lower diagonal values of table are \n\t// useless and not filled in the process. The values are filled in a \n\t// manner similar to Matrix Chain Multiplication DP solution (See \n\t// https://www.geeksforgeeks.org/dynamic-programming-set-8-matrix-chain-multiplication/ \n\t// cl is length of substring \n\tforeach (cl; 2 .. n + 1) \n\t{ \n\t\tforeach (i; 0 .. n - cl + 1) \n\t\t{ \n\t\t\tj = i + cl - 1; \n\t\t\tif (str[i] == str[j] && cl == 2) \n\t\t\t\tL[i][j] = 2; \n\t\t\telse if (str[i] == str[j]) \n\t\t\t\tL[i][j] = L[i + 1][j - 1] + 2; \n\t\t\telse\n\t\t\t\tL[i][j] = max(L[i][j - 1], L[i + 1][j]); \n\t\t} \n\t} \n\t\n\treturn L[0][n - 1]; \n} ",
    "{ \n    long n = str.length; \n    long[][] L = new long[n][n]; \n  \n    // Strings of length 1 are palindrome of lentgh 1 \n    for (long i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    // Build the table. Note that the lower  \n    // diagonal values of table are \n    // useless and not filled in the process.  \n    // The values are filled in a manner similar \n    // to Matrix Chain Multiplication DP solution (See \n    // https://www.geeksforgeeks.org/dynamic-programming-set-8-matrix-chain-multiplication/).  \n    // cl is length of substring \n    for (long cl = 2; cl <= n; cl++) \n    { \n        for (long i = 0; i < n - cl + 1; i++) \n        { \n            long j = i + cl - 1; \n            if (str[i] == str[j] && cl == 2) \n                L[i][j] = 2; \n            else if (str[i] == str[j]) \n                L[i][j] = L[i + 1][j - 1] + 2; \n            else\n                L[i][j] = max(L[i][j - 1], L[i + 1][j]); \n        } \n    } \n  \n    return L[0][n - 1]; \n} ",
    "{\n\tlong n = str.length;\n\tlong[][] dp = new long[n][n];\n\t\n\tforeach(i; 0 .. n)\n\t{\n\t\tdp[i][i] = 1;\n\t}\n\t\n\tforeach(i; 0 .. n)\n\t{\n\t\tforeach(j; 0 .. n)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t\tcontinue;\n\t\t\t\n\t\t\tif(str[i] == str[j])\n\t\t\t{\n\t\t\t\tdp[i][j] = 2 + dp[i+1][j-1];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdp[i][j] = max(dp[i+1][j], dp[i][j-1]);\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn dp[0][n-1];\n}",
    "{ \n\tlong n = str.length; \n\tlong i, j, cl; \n\tlong L[][] = new long[n][n]; // Create a table to store results of subproblems \n\t\n\t// Strings of length 1 are palindrome of lentgh 1 \n\tfor (i = 0; i < n; i++) \n\t\tL[i][i] = 1; \n\t\n\t// Build the table. Note that the lower diagonal values of table are \n\t// useless and not filled in the process. The values are filled in a \n\t// manner similar to Matrix Chain Multiplication DP solution (See \n\t// https://www.geeksforgeeks.org/dynamic-programming-set-8-matrix-chain-multiplication/ \n\t// cl is length of substring \n\tfor (cl=2; cl<=n; cl++) \n\t{ \n\t\tfor (i=0; i<n-cl+1; i++) \n\t\t{ \n\t\t\tj = i+cl-1; \n\t\t\tif (str[i] == str[j] && cl == 2) \n\t\t\t\tL[i][j] = 2; \n\t\t\telse if (str[i] == str[j]) \n\t\t\t\tL[i][j] = L[i+1][j-1] + 2; \n\t\t\telse\n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \n\t\t} \n\t} \n\t\n\treturn L[0][n-1]; \n} ",
    "{ \n\tlong n = str.length; \n\tlong i, j, cl; \n\tlong L[][] = new long[n][n]; // Create a table to store results of subproblems \n  \n  \n\t// Strings of length 1 are palindrome of lentgh 1 \n\tfor (i = 0; i < n; i++) \n\t\tL[i][i] = 1; \n  \n    // Build the table. Note that the lower diagonal values of table are \n    // useless and not filled in the process. The values are filled in a \n    // manner similar to Matrix Chain Multiplication DP solution (See \n    // https://www.geeksforgeeks.org/dynamic-programming-set-8-matrix-chain-multiplication/ \n    // cl is length of substring \n\tfor (cl=2; cl<=n; cl++) \n\t{ \n\t\tfor (i=0; i<n-cl+1; i++) \n\t\t{ \n\t\t\tj = i+cl-1; \n\t\t\tif (str[i] == str[j] && cl == 2) \n\t\t\t\tL[i][j] = 2; \n\t\t\telse if (str[i] == str[j]) \n\t\t\t\tL[i][j] = L[i+1][j-1] + 2; \n\t\t\telse\n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \n\t\t} \n\t} \n  \n\treturn L[0][n-1]; \n} ",
    "{ \n    long n = str.length; \n    long[][] L = new long[n][n]; \n  \n    for (long i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    for (long cl = 2; cl <= n; cl++) \n    { \n        for (long i = 0; i < n - cl + 1; i++) \n        { \n            long j = i + cl - 1; \n            if (str[i] == str[j] && cl == 2) \n                L[i][j] = 2; \n            else if (str[i] == str[j]) \n                L[i][j] = L[i + 1][j - 1] + 2; \n            else\n                L[i][j] = max(L[i][j - 1], L[i + 1][j]); \n        } \n    } \n  \n    return L[0][n - 1]; \n} ",
    "{ \n    long n = str.length; \n    long[][] L = new long[n][n]; \n  \n    for (long i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    for (long cl = 2; cl <= n; cl++) \n    { \n        for (long i = 0; i < n - cl + 1; i++) \n        { \n            long j = i + cl - 1; \n            if (str[i] == str[j] && cl == 2) \n                L[i][j] = 2; \n            else if (str[i] == str[j]) \n                L[i][j] = L[i + 1][j - 1] + 2; \n            else\n                L[i][j] = max(L[i][j - 1], L[i + 1][j]); \n        } \n    } \n  \n    return L[0][n - 1]; \n} ",
    "{\n\tlong n = str.length;\n\tlong[][] L = new long[n][n];\n\tlong i, j, cl;\n\tfor (i = 0; i < n; i++)\n\t\tL[i][i] = 1;\n\tfor (cl = 2; cl <= n; cl++) \n\t{\n\t\tfor (i = 0; i < n - cl + 1; i++) \n\t\t{\n\t\t\tj = i + cl - 1;\n\t\t\tif (str[i] == str[j] && cl == 2)\n\t\t\t\tL[i][j] = 2;\n\t\t\telse if (str[i] == str[j])\n\t\t\t\tL[i][j] = L[i + 1][j - 1] + 2;\n\t\t\telse\n\t\t\t\tL[i][j] = max(L[i][j - 1], L[i + 1][j]);\n\t\t}\n\t}\n\treturn L[0][n - 1];\n}",
    "{\n\tlong n = str.length;\n\tlong[][] L = new long[n][n];\n\t\n\tfor (long i = 0; i < n; i++)\n\t\tL[i][i] = 1;\n\t\n\tfor (long cl = 2; cl <= n; cl++) \n\t{\n\t\tfor (long i = 0; i < n - cl + 1; i++) \n\t\t{\n\t\t\tlong j = i + cl - 1;\n\t\t\tif (str[i] == str[j] && cl == 2)\n\t\t\t\tL[i][j] = 2;\n\t\t\telse if (str[i] == str[j])\n\t\t\t\tL[i][j] = L[i + 1][j - 1] + 2;\n\t\t\telse\n\t\t\t\tL[i][j] = max(L[i][j - 1], L[i + 1][j]);\n\t\t}\n\t}\n\treturn L[0][n - 1];\n}",
    "{ \n   int n = str.length; \n   int i, j, cl; \n   int L[n][n];  \n  \n   for (i = 0; i < n; i++) \n      L[i][i] = 1; \n  \n    for (cl=2; cl<=n; cl++) \n    { \n        for (i=0; i<n-cl+1; i++) \n        { \n            j = i+cl-1; \n            if (str[i] == str[j] && cl == 2) \n               L[i][j] = 2; \n            else if (str[i] == str[j]) \n               L[i][j] = L[i+1][j-1] + 2; \n            else\n               L[i][j] = max(L[i][j-1], L[i+1][j]); \n        } \n    } \n  \n    return L[0][n-1]; \n} "
  ]
}