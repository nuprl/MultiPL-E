{
  "name": "mbpp_775_odd_position",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_775_odd_position.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0 && n % 2 == 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmps84wa08c.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428105]\n??:? void tmps84wa08c.__unittest_L17_C1() [0x427dda]\n??:? void tmps84wa08c.__modtest() [0x427e84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430115]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af59]\n??:? runModuleUnitTests [0x42bec5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428554]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i,n; nums) \n\t{\n\t\tif(i % 2 != 0 && n % 2 == 0) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 1 && num % 2 == 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 1 && n % 2 == 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 1 && n % 2 == 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums) \n\t{\n\t\tif(i % 2 == 0 && num % 2 == 0) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpiewartr3.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x428105]\n??:? void tmpiewartr3.__unittest_L19_C1() [0x427dda]\n??:? void tmpiewartr3.__modtest() [0x427e84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430115]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af59]\n??:? runModuleUnitTests [0x42bec5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428554]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tif(num % 2 == 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5x0a780o.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x42810d]\n??:? void tmp5x0a780o.__unittest_L22_C1() [0x427de2]\n??:? void tmp5x0a780o.__modtest() [0x427e8c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af8a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43011d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305cc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af61]\n??:? runModuleUnitTests [0x42becd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42855c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tbool odd_position = true;\n\tforeach(i; 0..nums.length)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tif(nums[i] % 2 == 0)\n\t\t\t{\n\t\t\t\todd_position = false;\n\t\t\t}\n\t\t}\n\t}\n\treturn odd_position;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp_xflb7m8.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x42810d]\n??:? void tmp_xflb7m8.__unittest_L23_C1() [0x427de2]\n??:? void tmp_xflb7m8.__modtest() [0x427e8c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c16b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42affe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430191]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430640]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43011d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afd5]\n??:? runModuleUnitTests [0x42bf41]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(idx, num; nums)\n\t{\n\t\tif(idx % 2 == 1 && num % 2 == 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, n; nums) \n\t{\n\t\tif(i % 2 == 0 && n % 2 == 0) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpbuw62fb7.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x428105]\n??:? void tmpbuw62fb7.__unittest_L19_C1() [0x427dda]\n??:? void tmpbuw62fb7.__modtest() [0x427e84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430115]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af59]\n??:? runModuleUnitTests [0x42bec5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428554]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 1 && num % 2 == 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 1 && num % 2 == 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\tif(num % 2 == 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i; 0..nums.length)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tif(nums[i] % 2 == 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpm9f_os0s.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x428105]\n??:? void tmpm9f_os0s.__unittest_L22_C1() [0x427dda]\n??:? void tmpm9f_os0s.__modtest() [0x427e84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c163]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aff6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430189]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430638]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430115]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afcd]\n??:? runModuleUnitTests [0x42bf39]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285c8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 1 && n % 2 == 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tif(num % 2 == 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5x0a780o.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x42810d]\n??:? void tmp5x0a780o.__unittest_L22_C1() [0x427de2]\n??:? void tmp5x0a780o.__modtest() [0x427e8c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af8a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43011d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305cc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af61]\n??:? runModuleUnitTests [0x42becd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42855c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i,n; nums)\n\t{\n\t\tif(i%2==1)\n\t\t{\n\t\t\tif(n%2==0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 1 && num % 2 == 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tif(n % 2 == 0)\n\t\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp0sgn_2m7.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x42810d]\n??:? void tmp0sgn_2m7.__unittest_L20_C1() [0x427de2]\n??:? void tmp0sgn_2m7.__modtest() [0x427e8c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af8a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43011d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305cc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af61]\n??:? runModuleUnitTests [0x42becd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42855c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums) \n\t{\n\t\tif(i % 2 == 0 && num % 2 == 0) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpiewartr3.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x428105]\n??:? void tmpiewartr3.__unittest_L19_C1() [0x427dda]\n??:? void tmpiewartr3.__modtest() [0x427e84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430115]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af59]\n??:? runModuleUnitTests [0x42bec5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428554]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tint i = 0;\n\tforeach(n; nums)\n\t{\n\t\tif (i % 2 == 0)\n\t\t{\n\t\t\tif (n % 2 == 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123316,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp7pil40t0.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428115]\n??:? void tmp7pil40t0.__unittest_L24_C1() [0x427dee]\n??:? void tmp7pil40t0.__modtest() [0x427e98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0ff]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af92]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430125]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305d4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300b1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af69]\n??:? runModuleUnitTests [0x42bed5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428564]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 == 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123316,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmprbrdbo69.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x428105]\n??:? void tmprbrdbo69.__unittest_L19_C1() [0x427dda]\n??:? void tmprbrdbo69.__modtest() [0x427e84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430115]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af59]\n??:? runModuleUnitTests [0x42bec5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428554]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, v; nums)\n\t{\n\t\tif(i % 2 == 1 && v % 2 == 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 == 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123316,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmprbrdbo69.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x428105]\n??:? void tmprbrdbo69.__unittest_L19_C1() [0x427dda]\n??:? void tmprbrdbo69.__modtest() [0x427e84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430115]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af59]\n??:? runModuleUnitTests [0x42bec5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428554]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0 && n % 2 == 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123316,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpq8794r74.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x428105]\n??:? void tmpq8794r74.__unittest_L19_C1() [0x427dda]\n??:? void tmpq8794r74.__modtest() [0x427e84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430115]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af59]\n??:? runModuleUnitTests [0x42bec5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428554]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 != 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 == 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123316,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpzohfygxh.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428105]\n??:? void tmpzohfygxh.__unittest_L17_C1() [0x427dda]\n??:? void tmpzohfygxh.__modtest() [0x427e84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430115]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af59]\n??:? runModuleUnitTests [0x42bec5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428554]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 == 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123316,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmprbrdbo69.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x428105]\n??:? void tmprbrdbo69.__unittest_L19_C1() [0x427dda]\n??:? void tmprbrdbo69.__modtest() [0x427e84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430115]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af59]\n??:? runModuleUnitTests [0x42bec5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428554]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 1 && n % 2 == 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tif(num % 2 == 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5x0a780o.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x42810d]\n??:? void tmp5x0a780o.__unittest_L22_C1() [0x427de2]\n??:? void tmp5x0a780o.__modtest() [0x427e8c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af8a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43011d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305cc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af61]\n??:? runModuleUnitTests [0x42becd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42855c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, v; nums)\n\t{\n\t\tif(i % 2 == 1 && v % 2 == 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0 && n % 2 == 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123316,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpq8794r74.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x428105]\n??:? void tmpq8794r74.__unittest_L19_C1() [0x427dda]\n??:? void tmpq8794r74.__modtest() [0x427e84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430115]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af59]\n??:? runModuleUnitTests [0x42bec5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428554]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i,n; nums)\n\t{\n\t\tif(i%2==1)\n\t\t{\n\t\t\tif(n%2==0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, n; nums) \n\t{\n\t\tif(i % 2 == 1 && n % 2 == 0) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 == 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123316,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpzohfygxh.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428105]\n??:? void tmpzohfygxh.__unittest_L17_C1() [0x427dda]\n??:? void tmpzohfygxh.__modtest() [0x427e84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430115]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af59]\n??:? runModuleUnitTests [0x42bec5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428554]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 1 && n % 2 == 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 1 && n % 2 == 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 1 && n % 2 == 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0 && n % 2 == 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmps84wa08c.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428105]\n??:? void tmps84wa08c.__unittest_L17_C1() [0x427dda]\n??:? void tmps84wa08c.__modtest() [0x427e84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430115]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af59]\n??:? runModuleUnitTests [0x42bec5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428554]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i,v;nums)\n\t{\n\t\tif(i%2==0 && v%2==0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123316,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpfg4pvyd_.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x428105]\n??:? void tmpfg4pvyd_.__unittest_L19_C1() [0x427dda]\n??:? void tmpfg4pvyd_.__modtest() [0x427e84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430115]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af59]\n??:? runModuleUnitTests [0x42bec5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428554]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, e; nums)\n\t{\n\t\tif(i % 2 == 0 && e % 2 == 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123317,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpykqxdg70.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x428105]\n??:? void tmpykqxdg70.__unittest_L19_C1() [0x427dda]\n??:? void tmpykqxdg70.__modtest() [0x427e84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430115]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af59]\n??:? runModuleUnitTests [0x42bec5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428554]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 == 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123316,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmprbrdbo69.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x428105]\n??:? void tmprbrdbo69.__unittest_L19_C1() [0x427dda]\n??:? void tmprbrdbo69.__modtest() [0x427e84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430115]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af59]\n??:? runModuleUnitTests [0x42bec5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428554]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i,n; nums)\n\t{\n\t\tif(i%2==1 && n%2==0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i,n; nums)\n\t{\n\t\tif(i%2==1 && n%2==0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tif(n % 2 == 0)\n\t\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp0sgn_2m7.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x42810d]\n??:? void tmp0sgn_2m7.__unittest_L20_C1() [0x427de2]\n??:? void tmp0sgn_2m7.__modtest() [0x427e8c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af8a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43011d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305cc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af61]\n??:? runModuleUnitTests [0x42becd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42855c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i,n;nums)\n\t{\n\t\tif(i%2!=0 && n%2==0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123317,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums) \n\t{\n\t\tif (i % 2 == 0 && num % 2 != 0) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0 && n % 2 == 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmps84wa08c.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428105]\n??:? void tmps84wa08c.__unittest_L17_C1() [0x427dda]\n??:? void tmps84wa08c.__modtest() [0x427e84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430115]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af59]\n??:? runModuleUnitTests [0x42bec5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428554]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tif(num % 2 == 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5x0a780o.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x42810d]\n??:? void tmp5x0a780o.__unittest_L22_C1() [0x427de2]\n??:? void tmp5x0a780o.__modtest() [0x427e8c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af8a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43011d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305cc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af61]\n??:? runModuleUnitTests [0x42becd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42855c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 1 && num % 2 == 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 1 && n % 2 == 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 1 && n % 2 == 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 1 && num % 2 == 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i,n; nums)\n\t{\n\t\tif(i%2!=0 && n%2!=0)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123317,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 1 && num % 2 == 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 1 && n % 2 == 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums) \n\t{\n\t\tif(i % 2 == 0 && num % 2 == 0) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpiewartr3.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x428105]\n??:? void tmpiewartr3.__unittest_L19_C1() [0x427dda]\n??:? void tmpiewartr3.__modtest() [0x427e84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430115]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af59]\n??:? runModuleUnitTests [0x42bec5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428554]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0 && n % 2 == 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123316,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpq8794r74.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x428105]\n??:? void tmpq8794r74.__unittest_L19_C1() [0x427dda]\n??:? void tmpq8794r74.__modtest() [0x427e84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430115]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af59]\n??:? runModuleUnitTests [0x42bec5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428554]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, n; nums) \n\t{\n\t\tif(i % 2 == 0 && n % 2 == 0) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpbuw62fb7.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x428105]\n??:? void tmpbuw62fb7.__unittest_L19_C1() [0x427dda]\n??:? void tmpbuw62fb7.__modtest() [0x427e84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430115]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af59]\n??:? runModuleUnitTests [0x42bec5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428554]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i,n;nums)\n\t{\n\t\tif(i%2==0)\n\t\t{\n\t\t\tif(n%2==0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123317,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpsdk0hlqy.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x42810d]\n??:? void tmpsdk0hlqy.__unittest_L22_C1() [0x427de2]\n??:? void tmpsdk0hlqy.__modtest() [0x427e8c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af8a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43011d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305cc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af61]\n??:? runModuleUnitTests [0x42becd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42855c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 1 && n % 2 == 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tif(num % 2 == 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5x0a780o.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x42810d]\n??:? void tmp5x0a780o.__unittest_L22_C1() [0x427de2]\n??:? void tmp5x0a780o.__modtest() [0x427e8c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af8a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43011d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305cc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af61]\n??:? runModuleUnitTests [0x42becd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42855c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 == 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123316,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmprbrdbo69.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x428105]\n??:? void tmprbrdbo69.__unittest_L19_C1() [0x427dda]\n??:? void tmprbrdbo69.__modtest() [0x427e84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430115]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af59]\n??:? runModuleUnitTests [0x42bec5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428554]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 1 && n % 2 == 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, n; nums) \n\t{\n\t\tif(i % 2 == 1 && n % 2 == 0) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach (i, num; nums)\n\t{\n\t\tif (i % 2 == 1 && num % 2 == 1)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123317,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 1 && num % 2 == 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif (i % 2 == 1 && n % 2 == 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123317,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i,n; nums)\n\t{\n\t\tif(i%2==1 && n%2==0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 1)\n\t\t{\n\t\t\tif(num % 2 == 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123317,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 1 && n % 2 == 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 != 0 && num % 2 != 0)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123317,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i,n; nums)\n\t{\n\t\tif(i%2 == 1 && n%2 == 1)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123317,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(idx, num; nums)\n\t{\n\t\tif(idx % 2 == 1 && num % 2 == 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, n; nums) \n\t{\n\t\tif(i % 2 == 1 && n % 2 == 0) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 1 && n % 2 == 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 != 0 && n % 2 == 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123317,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 1 && num % 2 == 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 != 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 1 && n % 2 == 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 == 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123316,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpzohfygxh.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428105]\n??:? void tmpzohfygxh.__unittest_L17_C1() [0x427dda]\n??:? void tmpzohfygxh.__modtest() [0x427e84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430115]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af59]\n??:? runModuleUnitTests [0x42bec5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428554]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, n; nums) \n\t{\n\t\tif(i % 2 == 1 && n % 2 == 0) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 1)\n\t\t{\n\t\t\tif(num % 2 == 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123317,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tif(num % 2 == 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5x0a780o.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x42810d]\n??:? void tmp5x0a780o.__unittest_L22_C1() [0x427de2]\n??:? void tmp5x0a780o.__modtest() [0x427e8c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af8a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43011d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305cc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af61]\n??:? runModuleUnitTests [0x42becd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42855c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0 && n % 2 == 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmps84wa08c.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428105]\n??:? void tmps84wa08c.__unittest_L17_C1() [0x427dda]\n??:? void tmps84wa08c.__modtest() [0x427e84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430115]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af59]\n??:? runModuleUnitTests [0x42bec5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428554]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i,n; nums)\n\t{\n\t\tif(i%2!=0 && n%2==0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123317,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, n; nums) \n\t{\n\t\tif(i % 2 == 1 && n % 2 == 0) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 == 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123316,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpzohfygxh.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428105]\n??:? void tmpzohfygxh.__unittest_L17_C1() [0x427dda]\n??:? void tmpzohfygxh.__modtest() [0x427e84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430115]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af59]\n??:? runModuleUnitTests [0x42bec5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428554]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 1 && num % 2 == 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tif(num % 2 == 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5x0a780o.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x42810d]\n??:? void tmp5x0a780o.__unittest_L22_C1() [0x427de2]\n??:? void tmp5x0a780o.__modtest() [0x427e8c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af8a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43011d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305cc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af61]\n??:? runModuleUnitTests [0x42becd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42855c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 1 && n % 2 == 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 1 && n % 2 == 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 1 && n % 2 == 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tif(num % 2 == 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5x0a780o.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x42810d]\n??:? void tmp5x0a780o.__unittest_L22_C1() [0x427de2]\n??:? void tmp5x0a780o.__modtest() [0x427e8c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af8a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43011d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305cc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af61]\n??:? runModuleUnitTests [0x42becd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42855c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, n; nums) \n\t{\n\t\tif(i % 2 == 0) \n\t\t{\n\t\t\tif(n % 2 == 0) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123317,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp31pho_bi.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x42810d]\n??:? void tmp31pho_bi.__unittest_L22_C1() [0x427de2]\n??:? void tmp31pho_bi.__modtest() [0x427e8c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af8a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43011d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305cc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af61]\n??:? runModuleUnitTests [0x42becd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42855c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, n; nums) \n\t{\n\t\tif(i % 2 == 1 && n % 2 == 0) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 1 && n % 2 == 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i; 0 .. nums.length)\n\t{\n\t\tif(i % 2 == 1 && nums[i] % 2 == 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123317,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 1 && n % 2 == 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i,n; nums)\n\t{\n\t\tif(i%2!=0 && n%2==0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\n/*\n\tWrite a dthon function to create a new array of length 2 from two given arrays of integers, each length 2.\n\tThe first element in the new array should be the sum of the first elements in the two given arrays, and the second element should be the sum of the second elements in the two given arrays.\n*/\nlong[] sum_array(long[] nums1, long[] nums2)\n{\n\tlong[] result = new long[2];\n\tresult[0] = nums1[0] + nums2[0];\n\tresult[1] = nums1[1] + nums2[1];\n\treturn result;\n}\n/*\n\tWrite a dthon function to find the maximum and minimum numbers from a sequence of numbers.\n*/\nlong[] min_max(long[] nums)\n{\n\tlong[] result = new long[2];\n\tresult[0] = nums[0];\n\tresult[1] = nums[0];\n\tforeach(n; nums)\n\t{\n\t\tif(n > result[1])\n\t\t\tresult[1] = n;\n\t\tif(n < result[0])\n\t\t\tresult[0] = n;\n\t}\n\treturn result;\n}\n/*\n\tWrite a dthon function to find the maximum and minimum numbers from a sequence of numbers.\n*/\nlong[] min_max(long[] nums)\n{\n\tlong[] result = new long[2];\n\tresult[0] = nums[0];\n\tresult[1] = nums[0];\n\tforeach(n; nums)\n\t{\n\t\tif(n > result[1])\n\t\t\tresult[1] = n;\n\t\tif(n < result[0])\n\t\t\tresult[0] = n;\n\t}\n\treturn result;\n}\n/*\n\tWrite a dthon function to find the kth smallest number in a given list.\n*/\nlong k\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123317,
      "stdout": "",
      "stderr": "/tmp/tmp283twyh8.d(66): Error: semicolon expected, not `unittest`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp283twyh8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, n; nums) \n\t{\n\t\tif(i % 2 == 0 && n % 2 == 0) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpbuw62fb7.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x428105]\n??:? void tmpbuw62fb7.__unittest_L19_C1() [0x427dda]\n??:? void tmpbuw62fb7.__modtest() [0x427e84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430115]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af59]\n??:? runModuleUnitTests [0x42bec5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428554]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 != 0 && num % 2 == 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123317,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 1 && n % 2 == 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i,n;nums)\n\t{\n\t\tif(i%2!=0)\n\t\t{\n\t\t\tif(n%2==0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123317,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 == 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123316,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmprbrdbo69.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x428105]\n??:? void tmprbrdbo69.__unittest_L19_C1() [0x427dda]\n??:? void tmprbrdbo69.__modtest() [0x427e84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430115]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af59]\n??:? runModuleUnitTests [0x42bec5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428554]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, n; nums) \n\t{\n\t\tif(i % 2 != 0) \n\t\t{\n\t\t\tif(n % 2 == 0) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123317,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i,n; nums)\n\t{\n\t\tif(i%2 != 0)\n\t\t{\n\t\t\tif(n%2 != 0)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123317,
      "stdout": "",
      "stderr": "/tmp/tmpsgq95mut.d(8): Error: function `tmpsgq95mut.odd_position` no `return exp;` or `assert(0);` at end of function\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsgq95mut.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 1 && n % 2 == 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 1 && num % 2 == 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 1 && num % 2 == 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 1 && n % 2 == 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i; 0 .. nums.length)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tif(nums[i] % 2 == 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123317,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpxfx2fjt5.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x428105]\n??:? void tmpxfx2fjt5.__unittest_L22_C1() [0x427dda]\n??:? void tmpxfx2fjt5.__modtest() [0x427e84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c163]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aff6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430189]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430638]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430115]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afcd]\n??:? runModuleUnitTests [0x42bf39]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285c8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, e; nums)\n\t{\n\t\tif(i % 2 == 0 && e % 2 != 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123317,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0 && n % 2 == 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmps84wa08c.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428105]\n??:? void tmps84wa08c.__unittest_L17_C1() [0x427dda]\n??:? void tmps84wa08c.__modtest() [0x427e84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430115]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af59]\n??:? runModuleUnitTests [0x42bec5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428554]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 1 && num % 2 == 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t\tif(i % 2 == 0 && n % 2 == 0)\n\t\t\treturn false;\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123317,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpzh3fngj4.d(19): unittest failure\n----------------\n??:? _d_unittestp [0x428105]\n??:? void tmpzh3fngj4.__unittest_L15_C1() [0x427dda]\n??:? void tmpzh3fngj4.__modtest() [0x427e84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430115]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af59]\n??:? runModuleUnitTests [0x42bec5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428554]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 1 && num % 2 == 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i; 0..nums.length)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tif(nums[i] % 2 == 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpm9f_os0s.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x428105]\n??:? void tmpm9f_os0s.__unittest_L22_C1() [0x427dda]\n??:? void tmpm9f_os0s.__modtest() [0x427e84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c163]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aff6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430189]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430638]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430115]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afcd]\n??:? runModuleUnitTests [0x42bf39]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285c8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t\tif (i % 2 == 0 && n % 2 == 0)\n\t\t\treturn false;\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123317,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5w6rd2uf.d(19): unittest failure\n----------------\n??:? _d_unittestp [0x428105]\n??:? void tmp5w6rd2uf.__unittest_L15_C1() [0x427dda]\n??:? void tmp5w6rd2uf.__modtest() [0x427e84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430115]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af59]\n??:? runModuleUnitTests [0x42bec5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428554]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 1 && n % 2 == 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 1 && n % 2 == 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\tif(num % 2 == 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0 && n % 2 == 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmps84wa08c.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428105]\n??:? void tmps84wa08c.__unittest_L17_C1() [0x427dda]\n??:? void tmps84wa08c.__modtest() [0x427e84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430115]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af59]\n??:? runModuleUnitTests [0x42bec5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428554]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums) \n\t{\n\t\tif(i % 2 == 1 && num % 2 == 0) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123317,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 != 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i,n; nums)\n\t{\n\t\tif(i%2!=0 && n%2==0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123317,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i,n; nums)\n\t{\n\t\tif(i%2 != 0 && n%2 == 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123317,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tif(num % 2 == 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5x0a780o.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x42810d]\n??:? void tmp5x0a780o.__unittest_L22_C1() [0x427de2]\n??:? void tmp5x0a780o.__modtest() [0x427e8c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af8a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43011d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305cc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af61]\n??:? runModuleUnitTests [0x42becd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42855c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 1 && num % 2 == 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums) \n\t{\n\t\tif(i % 2 == 1 && num % 2 == 0) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123317,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i,n; nums)\n\t{\n\t\tif(i%2==1 && n%2==0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 1 && n % 2 == 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tif(n % 2 == 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123317,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpwr1mutm4.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x42810d]\n??:? void tmpwr1mutm4.__unittest_L22_C1() [0x427de2]\n??:? void tmpwr1mutm4.__modtest() [0x427e8c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af8a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43011d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305cc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af61]\n??:? runModuleUnitTests [0x42becd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42855c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 1 && n % 2 == 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i; 0..nums.length)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tif(nums[i] % 2 == 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpm9f_os0s.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x428105]\n??:? void tmpm9f_os0s.__unittest_L22_C1() [0x427dda]\n??:? void tmpm9f_os0s.__modtest() [0x427e84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c163]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aff6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430189]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430638]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430115]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afcd]\n??:? runModuleUnitTests [0x42bf39]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285c8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 1)\n\t\t{\n\t\t\tif(n % 2 == 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123317,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0 && n % 2 == 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmps84wa08c.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428105]\n??:? void tmps84wa08c.__unittest_L17_C1() [0x427dda]\n??:? void tmps84wa08c.__modtest() [0x427e84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430115]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af59]\n??:? runModuleUnitTests [0x42bec5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428554]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums) \n\t{\n\t\tif(i % 2 == 1 && num % 2 == 0) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123317,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 != 0 && num % 2 == 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123317,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 1 && num % 2 == 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 != 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123317,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i,n;nums)\n\t{\n\t\tif(i%2!=0 && n%2==0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123317,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 1 && n % 2 == 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tif(num % 2 == 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5x0a780o.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x42810d]\n??:? void tmp5x0a780o.__unittest_L22_C1() [0x427de2]\n??:? void tmp5x0a780o.__modtest() [0x427e8c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af8a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43011d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305cc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af61]\n??:? runModuleUnitTests [0x42becd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42855c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 1 && n % 2 == 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0 && n % 2 == 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123316,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpq8794r74.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x428105]\n??:? void tmpq8794r74.__unittest_L19_C1() [0x427dda]\n??:? void tmpq8794r74.__modtest() [0x427e84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430115]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af59]\n??:? runModuleUnitTests [0x42bec5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428554]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i,n;nums)\n\t{\n\t\tif(i%2!=0 && n%2==0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123317,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 1)\n\t\t{\n\t\t\tif(n % 2 == 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123317,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 1 && n % 2 == 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach (i, num; nums)\n\t{\n\t\tif (i % 2 == 1 && num % 2 == 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123317,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 1 && n % 2 == 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif (i % 2 == 1 && n % 2 == 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123317,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tbool result = true;\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 1)\n\t\t{\n\t\t\tif(n % 2 == 0)\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123317,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tbool result = true;\n\tforeach(index, value; nums)\n\t{\n\t\tif(index % 2 != 0)\n\t\t{\n\t\t\tif(value % 2 != 0)\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123317,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0 && n % 2 == 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123316,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpq8794r74.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x428105]\n??:? void tmpq8794r74.__unittest_L19_C1() [0x427dda]\n??:? void tmpq8794r74.__modtest() [0x427e84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430115]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af59]\n??:? runModuleUnitTests [0x42bec5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428554]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, n; nums) \n\t{\n\t\tif(i % 2 == 0 && n % 2 == 0) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpbuw62fb7.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x428105]\n??:? void tmpbuw62fb7.__unittest_L19_C1() [0x427dda]\n??:? void tmpbuw62fb7.__modtest() [0x427e84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430115]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af59]\n??:? runModuleUnitTests [0x42bec5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428554]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0 && n % 2 == 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123316,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpq8794r74.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x428105]\n??:? void tmpq8794r74.__unittest_L19_C1() [0x427dda]\n??:? void tmpq8794r74.__modtest() [0x427e84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430115]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af59]\n??:? runModuleUnitTests [0x42bec5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428554]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, e; nums)\n\t{\n\t\tif(i % 2 == 1 && e % 2 == 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123317,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\tif(n % 2 != 0)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123317,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 != 0 && num % 2 == 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123317,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 1 && n % 2 == 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 1 && n % 2 == 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 1 && n % 2 == 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 1 && num % 2 == 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, n; nums) \n\t{\n\t\tif (i % 2 == 0 && n % 2 == 0) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123317,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpikrvot_1.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x428105]\n??:? void tmpikrvot_1.__unittest_L19_C1() [0x427dda]\n??:? void tmpikrvot_1.__modtest() [0x427e84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430115]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af59]\n??:? runModuleUnitTests [0x42bec5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428554]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tif(num % 2 == 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5x0a780o.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x42810d]\n??:? void tmp5x0a780o.__unittest_L22_C1() [0x427de2]\n??:? void tmp5x0a780o.__modtest() [0x427e8c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af8a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43011d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305cc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af61]\n??:? runModuleUnitTests [0x42becd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42855c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach (i, v; nums)\n\t{\n\t\tif (i % 2 == 0 && v % 2 != 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123317,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tbool result = true;\n\tforeach(i, num; nums) \n\t{\n\t\tif (i % 2 == 1 && num % 2 == 0) \n\t\t{\n\t\t\tresult = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123317,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums) \n\t{\n\t\tif(i % 2 == 0 && num % 2 == 0) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpiewartr3.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x428105]\n??:? void tmpiewartr3.__unittest_L19_C1() [0x427dda]\n??:? void tmpiewartr3.__modtest() [0x427e84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430115]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af59]\n??:? runModuleUnitTests [0x42bec5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428554]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 1 && n % 2 == 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tbool odd = true;\n\tforeach(i,n; nums)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tif(n % 2 == 0)\n\t\t\t{\n\t\t\t\todd = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123317,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpsvtqn42c.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x42810d]\n??:? void tmpsvtqn42c.__unittest_L24_C1() [0x427de2]\n??:? void tmpsvtqn42c.__modtest() [0x427e8c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af8a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43011d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305cc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af61]\n??:? runModuleUnitTests [0x42becd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42855c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 1 && num % 2 == 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 == 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123316,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpzohfygxh.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428105]\n??:? void tmpzohfygxh.__unittest_L17_C1() [0x427dda]\n??:? void tmpzohfygxh.__modtest() [0x427e84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430115]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af59]\n??:? runModuleUnitTests [0x42bec5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428554]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 1 && num % 2 == 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 == 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123316,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpzohfygxh.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428105]\n??:? void tmpzohfygxh.__unittest_L17_C1() [0x427dda]\n??:? void tmpzohfygxh.__modtest() [0x427e84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430115]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af59]\n??:? runModuleUnitTests [0x42bec5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428554]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i,n; nums)\n\t{\n\t\tif(i%2==0 && n%2==0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123318,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpwomz4yqe.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428105]\n??:? void tmpwomz4yqe.__unittest_L17_C1() [0x427dda]\n??:? void tmpwomz4yqe.__modtest() [0x427e84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430115]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af59]\n??:? runModuleUnitTests [0x42bec5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428554]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 1 && n % 2 == 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 1 && num % 2 == 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0 && n % 2 != 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123317,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, v; nums)\n\t{\n\t\tif(i % 2 == 1 && v % 2 == 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123318,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 1 && num % 2 == 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i,v; nums)\n\t{\n\t\tif(i % 2 == 0 && v % 2 != 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123318,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 1 && num % 2 == 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tif(num % 2 == 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5x0a780o.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x42810d]\n??:? void tmp5x0a780o.__unittest_L22_C1() [0x427de2]\n??:? void tmp5x0a780o.__modtest() [0x427e8c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af8a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43011d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305cc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af61]\n??:? runModuleUnitTests [0x42becd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42855c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 1 && num % 2 == 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, e; nums)\n\t{\n\t\tif(i % 2 == 0 && e % 2 == 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123318,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmprwz8bfal.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428105]\n??:? void tmprwz8bfal.__unittest_L17_C1() [0x427dda]\n??:? void tmprwz8bfal.__modtest() [0x427e84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430115]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af59]\n??:? runModuleUnitTests [0x42bec5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428554]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(index, value; nums)\n\t{\n\t\tif(index % 2 == 0)\n\t\t{\n\t\t\tif(value % 2 == 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123318,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpel6l5774.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x42810d]\n??:? void tmpel6l5774.__unittest_L22_C1() [0x427de2]\n??:? void tmpel6l5774.__modtest() [0x427e8c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af8a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43011d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305cc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af61]\n??:? runModuleUnitTests [0x42becd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42855c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 1)\n\t\t{\n\t\t\tif(num % 2 == 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123317,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 1 && num % 2 == 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 == 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123316,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmprbrdbo69.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x428105]\n??:? void tmprbrdbo69.__unittest_L19_C1() [0x427dda]\n??:? void tmprbrdbo69.__modtest() [0x427e84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430115]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af59]\n??:? runModuleUnitTests [0x42bec5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428554]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0 && num % 2 == 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123316,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmprbrdbo69.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x428105]\n??:? void tmprbrdbo69.__unittest_L19_C1() [0x427dda]\n??:? void tmprbrdbo69.__modtest() [0x427e84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430115]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af59]\n??:? runModuleUnitTests [0x42bec5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428554]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i,n;nums)\n\t{\n\t\tif(i%2==1)\n\t\t{\n\t\t\tif(n%2==0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123318,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 1)\n\t\t{\n\t\t\tif(num % 2 == 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123317,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 1 && num % 2 == 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach (i, v; nums)\n\t{\n\t\tif (i % 2 == 0 && v % 2 == 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123318,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp6g8bub6r.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x428105]\n??:? void tmp6g8bub6r.__unittest_L19_C1() [0x427dda]\n??:? void tmp6g8bub6r.__modtest() [0x427e84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430115]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af59]\n??:? runModuleUnitTests [0x42bec5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428554]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0 && n % 2 == 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123316,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpq8794r74.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x428105]\n??:? void tmpq8794r74.__unittest_L19_C1() [0x427dda]\n??:? void tmpq8794r74.__modtest() [0x427e84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430115]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af59]\n??:? runModuleUnitTests [0x42bec5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428554]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tif(num % 2 == 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5x0a780o.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x42810d]\n??:? void tmp5x0a780o.__unittest_L22_C1() [0x427de2]\n??:? void tmp5x0a780o.__modtest() [0x427e8c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af8a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43011d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305cc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af61]\n??:? runModuleUnitTests [0x42becd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42855c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, n; nums) \n\t{\n\t\tif(i % 2 == 1 && n % 2 == 0) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0 && n % 2 != 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123317,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n{\n\tforeach(i, n; nums)\n\t{\n\t\tif (i % 2 == 0 && n % 2 == 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123318,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpi8fmmjng.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428105]\n??:? void tmpi8fmmjng.__unittest_L17_C1() [0x427dda]\n??:? void tmpi8fmmjng.__modtest() [0x427e84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430115]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af59]\n??:? runModuleUnitTests [0x42bec5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428554]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}