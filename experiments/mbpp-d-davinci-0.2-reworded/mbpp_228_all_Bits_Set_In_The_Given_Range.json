{
  "name": "mbpp_228_all_Bits_Set_In_The_Given_Range",
  "language": "d",
  "prompt": "import std.math;\n/*\n\n\tWrite a dthon function to check whether all the bits are unset in the given range or not.\n\t\n*/\nbool all_Bits_Set_In_The_Given_Range(long n, long l, long r) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_228_all_Bits_Set_In_The_Given_Range.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = all_Bits_Set_In_The_Given_Range;\n\n    assert(candidate(4L, 1L, 2L) == true);\n    assert(candidate(17L, 2L, 4L) == true);\n    assert(candidate(39L, 4L, 6L) == false);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{ \n    long num = pow(2, r) - pow(2, l - 1); \n    return (num & n) == num; \n} ",
    "{ \n    long x = pow(2, r - l + 1) - 1; \n    x = x << (l - 1); \n    return ((n & x) == x); \n} ",
    "{ \n    long long int x = pow(2, r - l + 1) - 1; \n    x = x << (l - 1); \n    if ((n & x) == x) \n        return true; \n    return false; \n} ",
    "{ \n    long m = pow(2, r - l + 1) - 1; \n    m = m << (l - 1); \n    return (n & m) == m; \n} ",
    "{ \n    long long x = pow(2, r - l + 1) - 1; \n    x = x << (l - 1); \n    return (n & x) == x; \n} ",
    "{ \n    long x = (1 << r) - 1; \n    x = x ^ ((1 << (l - 1)) - 1); \n    return ((x & n) == x); \n} ",
    "{ \n    long long int mask = (1 << (r - l + 1)) - 1; \n    mask = mask << (l - 1); \n    if ((n & mask) == mask) \n        return true; \n    else\n        return false; \n} ",
    "{ \n\tlong long int x = pow(2, r - l + 1) - 1; \n\treturn ((n >> l) & x) == x; \n} ",
    "{ \n    long long int num = (1 << r) - 1; \n    num = num - ((1 << (l - 1)) - 1); \n    return (num & n) == num; \n} ",
    "{ \n    long max = pow(2, r - l + 1) - 1; \n    return ((n >> l) & max) == max; \n} ",
    "{ \n    long long int x = pow(2, r - l + 1) - 1; \n    return ((n >> l) & x) == x; \n} ",
    "{ \n    long long int x = pow(2, r - l + 1) - 1; \n    x = x << (l - 1); \n    return ((n & x) == x); \n} ",
    "{ \n    long max = pow(2, r - l + 1) - 1; \n    long mask = max << (l - 1); \n    return ((n & mask) == mask); \n} ",
    "{ \n    long long int x = pow(2, r - l + 1) - 1; \n    return ((n >> l) & x) == x; \n} ",
    "{ \n    long long int num = (1 << r) - 1; \n    num = num - ((1 << (l - 1)) - 1); \n    return ((num & n) == num); \n} ",
    "{ \n    long long x = (1 << r) - 1; \n    x = x ^ ((1 << (l - 1)) - 1); \n    return !(x & n); \n} ",
    "{ \n    long x = pow(2, r - l + 1) - 1; \n    x = x << (l - 1); \n    return ((n & x) == x); \n} ",
    "{ \n    long max_ele = (1 << r) - 1; \n    long min_ele = (1 << (l - 1)) - 1; \n    long mask = max_ele - min_ele; \n    return (n & mask) == mask; \n} ",
    "{ \n    long x = (1 << r) - 1; \n    x = x ^ ((1 << (l - 1)) - 1); \n    return ((n & x) == 0); \n} ",
    "{ \n    long long int x = pow(2, r - l + 1) - 1; \n    x = x << (l - 1); \n    if ((n & x) == x) \n        return true; \n    else\n        return false; \n} ",
    "{ \n    long long num = pow(2, r - l + 1) - 1; \n    return ((n >> l) & num) == num; \n} ",
    "{ \n    long long int x = (1 << r) - 1; \n    x = x ^ ((1 << (l - 1)) - 1); \n    return ((n & x) == x); \n} ",
    "{ \n    long long int x = pow(2, r - l + 1) - 1; \n    x = x << (l - 1); \n    if ((n & x) == x) \n        return true; \n    else\n        return false; \n} ",
    "{ \n    long x = pow(2, r - l + 1) - 1; \n    x = x << (l - 1); \n    return (n & x) == x; \n} ",
    "{ \n    // To check if all bits are set in the given range \n    // we need to check if all bits are set in the range \n    // [0, r] and [0, l - 1] are unset. \n    // So we need to check if the bits in the range [0, r] \n    // are set and bits in the range [0, l - 1] are unset. \n    // To check if bits in the range [0, r] are set, we need \n    // to check if the number (2^r - 1) is a subset of n. \n    // To check if bits in the range [0, l - 1] are unset, \n    // we need to check if the number (2^l - 1) is not a \n    // subset of n. \n    // So the final condition is (2^r - 1) & n == (2^r - 1) \n    // and (2^l - 1) & n != (2^l - 1) \n    return (pow(2, r) - 1) & n == (pow(2, r) - 1) && \n           (pow(2, l) - 1) & n != (pow(2, l) - 1); \n} ",
    "{ \n    long long int x = pow(2, r - l + 1) - 1; \n    x = x << (l - 1); \n    return ((n & x) == x); \n} ",
    "{ \n    long long int x = pow(2, r - l + 1) - 1; \n    return ((n >> l) & x) == x; \n} ",
    "{ \n    long long int num = pow(2, r - l + 1) - 1; \n    num = num << (l - 1); \n    return ((num & n) == num); \n} ",
    "{ \n    long num = (1 << r) - (1 << l-1); \n    return ((num & n) == num); \n} ",
    "{ \n    long temp = pow(2, r - l + 1) - 1; \n    temp = temp << (l - 1); \n    if ((n & temp) == temp) \n        return true; \n    else\n        return false; \n} ",
    "{ \n    long max_ele = pow(2, r - l + 1) - 1; \n    return ((n >> l) & max_ele) == max_ele; \n} ",
    "{ \n    long x = pow(2, r - l + 1) - 1; \n    x = x << (l - 1); \n    return !(n & x); \n} ",
    "{ \n    long num = (1 << r) - 1; \n    num = num ^ ((1 << (l - 1)) - 1); \n    return ((num & n) == num); \n} ",
    "{ \n    long long int x = pow(2, r - l + 1) - 1; \n    x = x << (l - 1); \n    return !(n & x); \n} ",
    "{ \n    long x = (1 << r) - 1; \n    x = x ^ ((1 << (l - 1)) - 1); \n    return (n & x) == 0; \n} ",
    "{ \n    // If all bits are set in the range \n    if (((n >> l) & ((1 << (r - l + 1)) - 1)) == ((1 << (r - l + 1)) - 1)) \n        return true; \n    else\n        return false; \n} ",
    "{ \n    long x = pow(2, r - l + 1) - 1; \n    x = x << (l - 1); \n    return ((n & x) == x); \n} ",
    "{ \n    long max = (1 << r) - 1; \n    long min = (1 << (l - 1)) - 1; \n    return ((n & max) == max) && ((n & min) == 0); \n} ",
    "{ \n    long long int x = pow(2, r - l + 1) - 1; \n    x = x << (l - 1); \n  \n    if ((n & x) == x) \n        return true; \n    else\n        return false; \n} ",
    "{ \n    long x = pow(2, r - l + 1) - 1; \n    x = x << (l - 1); \n    return (n & x) == x; \n} ",
    "{ \n    long x = pow(2, r - l + 1) - 1; \n    return !(n & x << l); \n} ",
    "{ \n    long x = (1 << r) - 1; \n    long y = (1 << (l - 1)) - 1; \n    long z = x ^ y; \n    return ((n & z) == z); \n} ",
    "{ \n    long num = pow(2, r - l + 1) - 1; \n    return ((n & num) == num); \n} ",
    "{ \n    long num = (1 << r) - 1; \n    num = num - ((1 << (l - 1)) - 1); \n    return ((num & n) == num); \n} ",
    "{ \n    long long int x = pow(2, r - l + 1) - 1; \n    x = x << (l - 1); \n    if ((x & n) == x) \n        return true; \n    else\n        return false; \n} ",
    "{ \n    long x = pow(2, r - l + 1) - 1; \n    x = x << (l - 1); \n    return !(n & x); \n} ",
    "{ \n    long num = (1 << (r - l + 1)) - 1; \n    num = num << (l - 1); \n    return ((num & n) == num); \n} ",
    "{ \n    long long int x = pow(2, r - l + 1) - 1; \n    x = x << (l - 1); \n    if ((n & x) == x) \n        return true; \n    else\n        return false; \n} ",
    "{ \n    long long int x = pow(2, r - l + 1) - 1; \n    x = x << (l - 1); \n    if ((n & x) == x) \n        return true; \n    else\n        return false; \n} ",
    "{ \n    long num = (1 << (r - l + 1)) - 1; \n    num = num << (l - 1); \n    return ((num & n) == num); \n} ",
    "{ \n    long num = pow(2, r - l + 1) - 1; \n    return ((num << l) & n) == num; \n} ",
    "{ \n    long long int x = pow(2, r - l + 1) - 1; \n    return ((n >> l) & x) == x; \n} ",
    "{ \n    // To check whether all the bits are set in the given range \n    // or not. \n    for (long i = l; i <= r; i++) \n        if (!(n & (1 << i))) \n            return false; \n  \n    return true; \n} \n  \n// Driver code ",
    "{\n\tlong x = pow(2, r - l + 1) - 1;\n\treturn (n & x) == x;\n}",
    "{ \n    long x = pow(2, r - l + 1) - 1; \n    x = x << (l - 1); \n    return !(n & x); \n} ",
    "{ \n    long x = pow(2, r - l + 1) - 1; \n    return ((n >> l) & x) == x; \n} ",
    "{ \n    long x = (1 << r) - 1; \n    x = x ^ ((1 << (l - 1)) - 1); \n    return (n & x) == 0; \n} ",
    "{ \n    long long int x = pow(2, r - l + 1) - 1; \n    x = x << (l - 1); \n    if ((n & x) == x) \n        return true; \n    else\n        return false; \n} ",
    "{ \n    long long int x = pow(2, r - l + 1) - 1; \n    long long int y = x << (l - 1); \n    return ((n & y) == y); \n} ",
    "{ \n    long long num = pow(2, r - l + 1) - 1; \n    return ((num << l) & n) == (num << l); \n} ",
    "{ \n    // If the number is negative, \n    // then it is not possible to \n    // check all bits are set or not \n    if (n < 0) \n        return false; \n  \n    // If the number is 0, then \n    // all bits are unset \n    if (n == 0) \n        return true; \n  \n    // If the number is not 0, then \n    // check if all bits are set \n    // in the given range \n    long num = n; \n    for (long i = l; i <= r; i++) { \n        // If the bit is not set, \n        // then return false \n        if ((num & (1 << i)) == 0) \n            return false; \n    } \n  \n    // If all bits are set, \n    // then return true \n    return true; \n} \n  \n// Driver code ",
    "{ \n    long m = pow(2, r - l + 1) - 1; \n    m = m << (l - 1); \n    return ((n & m) == m); \n} ",
    "{ \n    long x = pow(2, r - l + 1) - 1; \n    x = x << (l - 1); \n    return ((n & x) == x); \n} ",
    "{ \n    long x = pow(2, r - l + 1) - 1; \n    x = x << (l - 1); \n    return (n & x) == x; \n} ",
    "{ \n    long num = pow(2, r - l + 1) - 1; \n    return ((n >> l) & num) == num; \n} ",
    "{ \n    long max = (1 << (r - l + 1)) - 1; \n    return ((n >> l) & max) == max; \n} ",
    "{ \n    long long int x = pow(2, r - l + 1) - 1; \n    long long int y = x << (l - 1); \n    return ((n & y) == y); \n} ",
    "{ \n    long x = pow(2, r - l + 1) - 1; \n    return (n & x) == x; \n} ",
    "{ \n    long long int x = pow(2, r - l + 1) - 1; \n    long long int y = x << (l - 1); \n    return ((n & y) == y); \n} ",
    "{ \n    long long int num = pow(2, r - l + 1) - 1; \n    return ((num << l) & n) == num ? true : false; \n} ",
    "{ \n    long long int num = (1 << r) - 1; \n    num = num - ((1 << (l - 1)) - 1); \n    return ((num & n) == num); \n} ",
    "{ \n\tlong num = pow(2, r - l + 1) - 1; \n\tnum = num << (l - 1); \n\treturn ((n & num) == num); \n} ",
    "{ \n    long max = (1 << r) - 1; \n    long min = (1 << (l - 1)) - 1; \n    return (n & max) == max && (n & min) == 0; \n} ",
    "{ \n    long long int x = pow(2, r - l + 1) - 1; \n    x = x << (l - 1); \n    return !(n & x); \n} ",
    "{ \n    long long num = pow(2, r - l + 1) - 1; \n    return (n & num) == num; \n} ",
    "{ \n    long long int x = pow(2, r - l + 1) - 1; \n    x = x << (l - 1); \n    return !(n & x); \n} ",
    "{ \n    long x = (1 << r) - 1; \n    x = x ^ ((1 << (l - 1)) - 1); \n    return ((x & n) == x); \n} ",
    "{ \n    long long int x = pow(2, r - l + 1) - 1; \n    x = x << (l - 1); \n    return !(n & x); \n} ",
    "{ \n    long long int x = pow(2, r - l + 1) - 1; \n    x = x << (l - 1); \n    return !(n & x); \n} ",
    "{ \n    long long int x = pow(2, r - l + 1) - 1; \n    x = x << (l - 1); \n    return ((n & x) == x); \n} ",
    "{ \n    long long int mask = (1 << r) - 1; \n    mask = mask - ((1 << (l - 1)) - 1); \n    return ((n & mask) == mask); \n} ",
    "{ \n    long x = pow(2, r - l + 1) - 1; \n    return ((n & x) == x); \n} ",
    "{ \n    long num = pow(2, r - l + 1) - 1; \n    return ((n & num) == num); \n} ",
    "{ \n    long x = pow(2, r - l + 1) - 1; \n    x = x << (l - 1); \n    return !(n & x); \n} ",
    "{ \n    long x = (1 << r) - 1; \n    x = x ^ ((1 << (l - 1)) - 1); \n    return ((n & x) == x); \n} ",
    "{ \n    long long int x = (1 << r) - 1; \n    x = x ^ ((1 << (l - 1)) - 1); \n    return !(x & n); \n} ",
    "{ \n    long long int num = pow(2, r - l + 1) - 1; \n    num = num << (l - 1); \n    return ((num & n) == num); \n} ",
    "{\n\tlong x = (1 << r) - 1;\n\tx = x ^ ((1 << (l - 1)) - 1);\n\treturn (n & x) == x;\n}",
    "{ \n\tlong long int num = pow(2, r - l + 1) - 1; \n\tnum = num << (l - 1); \n\treturn ((n & num) == num); \n} ",
    "{ \n    long long int x = (1 << (r - l + 1)) - 1; \n    x = x << (l - 1); \n    return !(n & x); \n} ",
    "{ \n    long x = pow(2, r - l + 1) - 1; \n    return ((n >> l) & x) == x; \n} ",
    "{ \n    long x = (1 << r) - 1; \n    x = x ^ ((1 << (l - 1)) - 1); \n    return ((n & x) == x); \n} ",
    "{ \n    long long int num = pow(2, r - l + 1) - 1; \n    return (n & num) == num; \n} ",
    "{ \n    long long int num = pow(2, r - l + 1) - 1; \n    num = num << (l - 1); \n    if ((num & n) == num) \n        return true; \n    else\n        return false; \n} ",
    "{ \n    long x = pow(2, r - l + 1) - 1; \n    x = x << (l - 1); \n    return (n & x) == x; \n} ",
    "{ \n    long x = pow(2, r - l + 1) - 1; \n    x = x << (l - 1); \n    return !(n & x); \n} ",
    "{ \n    long x = pow(2, r - l + 1) - 1; \n    return ((n >> l) & x) == x; \n} ",
    "{ \n    long num = pow(2, r - l + 1) - 1; \n    return (n & num) == num; \n} ",
    "{ \n    long x = pow(2, r - l + 1) - 1; \n    x = x << (l - 1); \n    return (n & x) == x; \n} ",
    "{ \n    long long num = pow(2, r - l + 1) - 1; \n    return (num & n) == num; \n} ",
    "{ \n    // To check whether all bits are set in the given range \n    // or not, we will check whether the bitwise AND of \n    // the number and the number obtained by left shifting \n    // 1 by (r - l + 1) is 0 or not. \n  \n    // Left shifting 1 by (r - l + 1) \n    long num = 1 << (r - l + 1); \n  \n    // Subtracting 1 from the number \n    num = num - 1; \n  \n    // Left shifting the number by l - 1 \n    num = num << (l - 1); \n  \n    // If the bitwise AND of the number and the given \n    // number is 0, then all bits are set in the given \n    // range, else not. \n    return (n & num) == 0; \n} \n  \n// Driver code ",
    "{ \n    long num = 0; \n    for (long i = l; i <= r; i++) \n        num |= (1 << i); \n    return ((num & n) == num); \n} ",
    "{ \n    long x = pow(2, r - l + 1) - 1; \n    x = x << (l - 1); \n    return (n & x) == x; \n} ",
    "{ \n    long long int x = (1 << (r - l + 1)) - 1; \n    x = x << (l - 1); \n    return (n & x) == x; \n} ",
    "{\n\t// Write your code here\n\t// To print results to the standard output you can use print\n\t// Example: print \"Hello world!\"\n\tlong x = (1 << (r - l + 1)) - 1;\n\tx <<= l - 1;\n\treturn (n & x) == x;\n}",
    "{ \n    long x = (1 << r) - 1; \n    x = x ^ ((1 << (l - 1)) - 1); \n    return ((n & x) == x); \n} ",
    "{ \n    long long int num = pow(2, r - l + 1) - 1; \n    return ((num << l) & n) == num; \n} ",
    "{ \n    long x = (1 << r) - 1; \n    x = x ^ ((1 << (l - 1)) - 1); \n    return ((x & n) == x); \n} ",
    "{ \n    long num = pow(2, r - l + 1) - 1; \n    num = num << (l - 1); \n    return ((n & num) == num); \n} ",
    "{ \n    long long num = pow(2, r - l + 1) - 1; \n    return (n & num) == num; \n} ",
    "{ \n    long long int mask = (1 << r) - 1; \n    mask = mask ^ ((1 << (l - 1)) - 1); \n    return ((n & mask) == mask); \n} ",
    "{ \n    long long num = (1 << (r - l + 1)) - 1; \n    num = num << (l - 1); \n    return ((num & n) == num); \n} ",
    "{ \n\tlong long int x = pow(2, r - l + 1) - 1; \n\tx = x << (l - 1); \n\tif ((n & x) == x) \n\t\treturn true; \n\telse\n\t\treturn false; \n} ",
    "{ \n    long x = pow(2, r - l + 1) - 1; \n    x = x << (l - 1); \n    return !(n & x); \n} ",
    "{ \n    long x = pow(2, r - l + 1) - 1; \n    return ((n >> l) & x) == x; \n} ",
    "{ \n    long long int num = pow(2, r - l + 1) - 1; \n    return ((n >> l) & num) == num; \n} ",
    "{ \n    long long int x = (1 << (r - l + 1)) - 1; \n    x = x << (l - 1); \n    return (n & x) == x; \n} ",
    "{ \n    long x = pow(2, r - l + 1) - 1; \n    x = x << (l - 1); \n    return (n & x) == x; \n} ",
    "{ \n\t// To check whether all the bits are unset in the given range or not \n\t// we need to check whether the given number is divisible by 2^(r-l+1) or not. \n\t// If the given number is divisible by 2^(r-l+1) then all the bits are unset in the given range. \n\t// If the given number is not divisible by 2^(r-l+1) then all the bits are not unset in the given range. \n\t\n\t// Calculate 2^(r-l+1) \n\tlong x = pow(2, (r - l + 1)); \n\t\n\t// Check whether the given number is divisible by 2^(r-l+1) or not \n\tif (n % x == 0) \n\t\treturn true; \n\telse\n\t\treturn false; \n} ",
    "{ \n    long num = pow(2, r - l + 1) - 1; \n    return ((n >> l) & num) == num; \n} ",
    "{ \n    long long int num = pow(2, r - l + 1) - 1; \n    num = num << (l - 1); \n    return ((num & n) == num); \n} ",
    "{ \n    long num = pow(2, r - l + 1) - 1; \n    return ((n >> l) & num) == num; \n} ",
    "{ \n    long num = pow(2, r - l + 1) - 1; \n    num = num << (l - 1); \n    return ((num & n) == num); \n} ",
    "{ \n    long num = pow(2, r - l + 1) - 1; \n    return ((n >> l) & num) == num; \n} ",
    "{ \n    long x = pow(2, r - l + 1) - 1; \n    x = x << (l - 1); \n    return (n & x) == x; \n} ",
    "{ \n    long num = pow(2, r - l + 1) - 1; \n    return ((num << l) & n) == num; \n} ",
    "{ \n    long long int mask = (1 << (r - l + 1)) - 1; \n    mask = mask << (l - 1); \n    return ((n & mask) == mask); \n} ",
    "{ \n    // Check if all bits are set in the given range \n    for (long i = l; i <= r; i++) \n        if (!(n & (1 << i))) \n            return false; \n    return true; \n} ",
    "{ \n    long long int num = (1 << (r - l + 1)) - 1; \n    num = num << (l - 1); \n    return ((num & n) == num); \n} ",
    "{ \n    long long int x = pow(2, r - l + 1) - 1; \n    x = x << (l - 1); \n    if ((n & x) == x) \n        return true; \n    return false; \n} ",
    "{ \n    long x = pow(2, r - l + 1) - 1; \n    x = x << (l - 1); \n    return (n & x) == x; \n} ",
    "{ \n    long long int x = pow(2, r - l + 1) - 1; \n    x = x << (l - 1); \n    return ((n & x) == x); \n} ",
    "{ \n    long x = pow(2, r - l + 1) - 1; \n    x = x << (l - 1); \n    return !(n & x); \n} ",
    "{ \n\tlong long x = pow(2, r - l + 1) - 1; \n\tx = x << (l - 1); \n\treturn ((n & x) == x); \n} ",
    "{ \n    long x = (1 << (r - l + 1)) - 1; \n    x = x << (l - 1); \n    return (n & x) == x; \n} ",
    "{ \n    long long int num = pow(2, r - l + 1) - 1; \n    return ((n >> l) & num) == num; \n} ",
    "{ \n    long x = pow(2, r - l + 1) - 1; \n    return ((n >> l) & x) == x; \n} ",
    "{ \n    long x = pow(2, r - l + 1) - 1; \n    x = x << (l - 1); \n    return !(x & n); \n} ",
    "{ \n    long x = pow(2, r - l + 1) - 1; \n    x = x << (l - 1); \n    return !(x & n); \n} ",
    "{ \n    long long int num = pow(2, r - l + 1) - 1; \n    num = num << (l - 1); \n    if ((num & n) == num) \n        return true; \n    else\n        return false; \n} ",
    "{\n\tlong x = pow(2, r - l + 1) - 1;\n\treturn (n & x) == x;\n}",
    "{ \n    long x = pow(2, r - l + 1) - 1; \n    return ((n >> l) & x) == x; \n} ",
    "{ \n    long x = pow(2, r - l + 1) - 1; \n    return (n & (x << (l - 1))) == 0; \n} ",
    "{ \n\tlong long int num = pow(2, r - l + 1) - 1; \n\treturn ((n >> l) & num) == num; \n} ",
    "{ \n    long x = (1 << r) - 1; \n    x = x ^ ((1 << (l - 1)) - 1); \n    return ((n & x) == x); \n} ",
    "{ \n    long num = pow(2, r - l + 1) - 1; \n    return (n & num) == num; \n} ",
    "{ \n    long x = (1 << r) - 1; \n    x = x ^ ((1 << (l - 1)) - 1); \n    return ((n & x) == x); \n} ",
    "{ \n    // To check if all the bits are set in the given range \n    // or not. \n    for (long i = l; i <= r; i++) \n        if (!(n & (1 << i))) \n            return false; \n  \n    return true; \n} \n  \n// Driver code ",
    "{ \n    long long int x = (1 << r) - 1; \n    x = x ^ ((1 << (l - 1)) - 1); \n    return !(x & n); \n} ",
    "{ \n    long long int num = pow(2, r - l + 1) - 1; \n    return ((num << l) & n) == num; \n} ",
    "{ \n    long long int num = pow(2, r - l + 1) - 1; \n    num = num << (l - 1); \n    if ((num & n) == num) \n        return true; \n    else\n        return false; \n} ",
    "{ \n    long num = pow(2, r - l + 1) - 1; \n    return ((num << l) & n) == num; \n} ",
    "{ \n    long x = pow(2, r - l + 1) - 1; \n    x = x << (l - 1); \n    return (n & x) == x; \n} ",
    "{ \n    long long int num = pow(2, r - l + 1) - 1; \n    return ((num << l) & n) == (num << l); \n} ",
    "{\n\tint count = 0;\n\tfor (int i = l; i <= r; i++)\n\t{\n\t\tif (n & (1 << i))\n\t\t\tcount++;\n\t}\n\treturn count == (r - l + 1);\n}",
    "{ \n    long long int x = (1 << r) - 1; \n    x = x ^ ((1 << (l - 1)) - 1); \n    return !(n & x); \n} ",
    "{ \n    long long int num = (1 << (r - l + 1)) - 1; \n    num = num << (l - 1); \n    if ((num & n) == num) \n        return true; \n    else\n        return false; \n} ",
    "{ \n    long x = (1 << r) - 1; \n    x = x ^ ((1 << (l - 1)) - 1); \n    return (n & x) == 0; \n} ",
    "{ \n    long long num = pow(2, r - l + 1) - 1; \n    return ((n >> l) & num) == num; \n} ",
    "{ \n    long x = pow(2, r - l + 1) - 1; \n    return ((n >> l) & x) == x; \n} ",
    "{ \n    long num = (1 << r) - 1; \n    num = num - ((1 << (l - 1)) - 1); \n    return ((num & n) == num); \n} ",
    "{ \n    long max = (1 << (r - l + 1)) - 1; \n    return ((n >> l) & max) == max; \n} ",
    "{ \n    long long int m = pow(2, r - l + 1) - 1; \n    m = m << (l - 1); \n    return ((n & m) == m); \n} ",
    "{ \n    long m = pow(2, r - l + 1) - 1; \n    m = m << (l - 1); \n    return ((n & m) == m); \n} ",
    "{ \n    // Initialize result \n    bool result = true; \n  \n    // Check all bits in the given range \n    for (long i = l; i <= r; i++) \n        result &= ((n & (1 << i)) != 0); \n  \n    return result; \n} ",
    "{ \n    long x = pow(2, r - l + 1) - 1; \n    x = x << (l - 1); \n    return (n & x) == x; \n} ",
    "{ \n\tlong long num = pow(2, r - l + 1) - 1; \n\treturn ((n >> l) & num) == num; \n} ",
    "{ \n    long long int mask = (1 << r) - 1; \n    mask = mask ^ ((1 << (l - 1)) - 1); \n    return ((n & mask) == mask); \n} ",
    "{\n\tlong x = (1 << r) - 1;\n\tx = x - ((1 << (l - 1)) - 1);\n\treturn (x & n) == x;\n}",
    "{ \n    // To check if all bits are set in the given range \n    // we can use the following formula \n    // (2^(r-l+1))-1 \n    long num = (1 << (r - l + 1)) - 1; \n  \n    // If the given number is greater than the number \n    // then all bits are not set in the given range \n    if (n > num) \n        return false; \n  \n    // If the given number is less than the number \n    // then all bits are set in the given range \n    else if (n < num) \n        return true; \n  \n    // If the given number is equal to the number \n    // then all bits are set in the given range \n    else\n        return true; \n} \n  \n// Driver code ",
    "{ \n    long x = (1 << r) - 1; \n    x = x ^ ((1 << (l - 1)) - 1); \n    return ((n & x) == x); \n} ",
    "{ \n    long long x = (1 << r) - 1; \n    x = x ^ ((1 << (l - 1)) - 1); \n    return !(n & x); \n} ",
    "{ \n    long num = pow(2, r - l + 1) - 1; \n    return (n & num) == num; \n} ",
    "{ \n    long long int mask = (1 << (r - l + 1)) - 1; \n    mask = mask << (l - 1); \n    return ((n & mask) == mask); \n} ",
    "{ \n    long x = pow(2, r - l + 1) - 1; \n    x = x << (l - 1); \n    return !(n & x); \n} ",
    "{ \n    long x = pow(2, r - l + 1) - 1; \n    x = x << (l - 1); \n    return ((x & n) == x); \n} ",
    "{ \n    long long int x = pow(2, r - l + 1) - 1; \n    long long int y = x << (l - 1); \n    return ((n & y) == y); \n} ",
    "{ \n    // To check if all bits are set in the given range \n    // we can use the following formula \n    // (2^(r-l+1))-1 \n    // if the result of the above formula is equal \n    // to the result of the following formula then \n    // all bits are set in the given range \n    // (n>>l)&((2^(r-l+1))-1) \n    return (((1 << (r - l + 1)) - 1) == ((n >> l) & ((1 << (r - l + 1)) - 1))); \n} ",
    "{ \n    long long int mask = (1 << r) - 1; \n    mask = mask ^ ((1 << (l - 1)) - 1); \n    return ((n & mask) == mask); \n} ",
    "{ \n    long long int x = pow(2, r - l + 1) - 1; \n    return ((n >> l) & x) == x; \n} ",
    "{ \n    long long num = pow(2, r - l + 1) - 1; \n    return ((num << l) & n) == num; \n} ",
    "{ \n    long x = pow(2, r) - pow(2, l - 1); \n    return (n & x) == x; \n} ",
    "{ \n    long long x = (1 << (r - l + 1)) - 1; \n    x = x << (l - 1); \n    return (n & x) == x; \n} ",
    "{ \n    long long int num = pow(2, r) - pow(2, l - 1); \n    return ((num & n) == num); \n} ",
    "{ \n    long long int x = pow(2, r - l + 1) - 1; \n    x = x << (l - 1); \n    if ((n & x) == x) \n        return true; \n    else\n        return false; \n} ",
    "{ \n    long long int num = pow(2, r - l + 1) - 1; \n    return ((num << l) & n) == num ? true : false; \n} ",
    "{\n\tlong x = pow(2, r - l + 1) - 1;\n\treturn (n & x) == x;\n}",
    "{ \n    long x = pow(2, r - l + 1) - 1; \n    return ((n & x) == x); \n} ",
    "{ \n    long num = pow(2, r) - pow(2, l-1); \n    return (num & n) == num; \n} ",
    "{ \n    long num = (1 << r) - 1; \n    num = num - ((1 << (l - 1)) - 1); \n    return ((num & n) == num); \n} ",
    "{ \n    long long int x = 1; \n    x = x << r; \n    x = x - 1; \n    x = x << (l - r + 1); \n    return (n & x) == x; \n} ",
    "{ \n    long long int x = pow(2, r - l + 1) - 1; \n    x = x << (l - 1); \n    if ((n & x) == x) \n        return true; \n    else\n        return false; \n} ",
    "{ \n    long long int mask = (1 << (r - l + 1)) - 1; \n    mask = mask << (l - 1); \n    return ((n & mask) == mask); \n} ",
    "{ \n    long long num = pow(2, r - l + 1) - 1; \n    num = num << (l - 1); \n    return ((n & num) == num); \n} ",
    "{ \n    long long x = pow(2, r - l + 1) - 1; \n    x = x << (l - 1); \n    return ((n & x) == x); \n} ",
    "{ \n    long long int num = pow(2, r - l + 1) - 1; \n    num = num << (l - 1); \n  \n    if ((num & n) == num) \n        return true; \n    else\n        return false; \n} ",
    "{ \n    long max_ele = pow(2, r) - 1; \n    long min_ele = pow(2, l) - 1; \n    return ((n & max_ele) == max_ele && \n            (n & min_ele) == 0); \n} ",
    "{ \n    long num = pow(2, r - l + 1) - 1; \n    return ((num << l) & n) == num; \n} ",
    "{ \n    // Traverse the bits in the given range \n    for (long i = l; i <= r; i++) \n        if (!(n & (1 << i))) \n            return false; \n  \n    return true; \n} \n  \n// Driver code ",
    "{ \n    long long int x = pow(2, r - l + 1) - 1; \n    x = x << (l - 1); \n    if ((n & x) == x) \n        return true; \n    else\n        return false; \n} "
  ]
}