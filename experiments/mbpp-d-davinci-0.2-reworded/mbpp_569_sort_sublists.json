{
  "name": "mbpp_569_sort_sublists",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to sort each subarray of strings in a given array of arrays.\n\t\n*/\nstring[][] sort_sublists(string[][] list1) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_569_sort_sublists.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = sort_sublists;\n\n    assert(candidate([[\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]]) == [[\"green\", \"orange\"], [\"black\", \"white\"], [\"black\", \"orange\", \"white\"]]);\n    assert(candidate([[\"green\", \"orange\"], [\"black\"], [\"green\", \"orange\"], [\"white\"]]) == [[\"green\", \"orange\"], [\"black\"], [\"green\", \"orange\"], [\"white\"]]);\n    assert(candidate([[\"a\", \"b\"], [\"d\", \"c\"], [\"g\", \"h\"], [\"f\", \"e\"]]) == [[\"a\", \"b\"], [\"c\", \"d\"], [\"g\", \"h\"], [\"e\", \"f\"]]);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tforeach(i; 0 .. list1.length)\n\t{\n\t\tlist1[i] = list1[i].sort;\n\t}\n\treturn list1;\n}",
    "{\n\tforeach(i; 0 .. list1.length)\n\t{\n\t\tlist1[i] = list1[i].sort;\n\t}\n\treturn list1;\n}",
    "{\n\tforeach(i; 0 .. list1.length)\n\t{\n\t\tlist1[i] = list1[i].sort;\n\t}\n\treturn list1;\n}",
    "{\n\tforeach(i; 0 .. list1.length)\n\t{\n\t\tlist1[i] = list1[i].sort;\n\t}\n\treturn list1;\n}",
    "{\n\tforeach(i; 0 .. list1.length)\n\t{\n\t\tlist1[i] = list1[i].sort;\n\t}\n\treturn list1;\n}",
    "{\n\tforeach(i, sublist; list1)\n\t{\n\t\tsort(sublist);\n\t}\n\treturn list1;\n}",
    "{\n\tforeach(i; 0..list1.length)\n\t{\n\t\tlist1[i] = list1[i].sort;\n\t}\n\treturn list1;\n}",
    "{\n\tstring[][] list2 = new string[list1.length][];\n\tforeach(i, list; list1)\n\t{\n\t\tlist2[i] = list.dup;\n\t\tlist2[i].sort;\n\t}\n\treturn list2;\n}",
    "{\n\tforeach(i; 0 .. list1.length)\n\t{\n\t\tlist1[i] = list1[i].sort();\n\t}\n\treturn list1;\n}",
    "{\n\tforeach(i; 0 .. list1.length)\n\t{\n\t\tlist1[i] = list1[i].sort;\n\t}\n\treturn list1;\n}",
    "{\n\tforeach(i; 0 .. list1.length)\n\t{\n\t\tlist1[i] = list1[i].sort;\n\t}\n\treturn list1;\n}",
    "{\n\tforeach(i; 0 .. list1.length)\n\t{\n\t\tlist1[i] = list1[i].sort;\n\t}\n\treturn list1;\n}",
    "{\n\tforeach(i;0..list1.length)\n\t{\n\t\tlist1[i] = sort(list1[i]);\n\t}\n\treturn list1;\n}",
    "{\n\tforeach(i; 0 .. list1.length)\n\t{\n\t\tlist1[i] = list1[i].sort;\n\t}\n\treturn list1;\n}",
    "{\n\tforeach(i; 0..list1.length)\n\t{\n\t\tlist1[i] = list1[i].sort;\n\t}\n\treturn list1;\n}",
    "{\n\tforeach(i; 0 .. list1.length)\n\t{\n\t\tlist1[i] = sort(list1[i]);\n\t}\n\treturn list1;\n}",
    "{\n\tforeach(i; 0 .. list1.length)\n\t{\n\t\tlist1[i] = list1[i].sort;\n\t}\n\treturn list1;\n}",
    "{\n\tforeach(i; 0 .. list1.length)\n\t{\n\t\tlist1[i] = list1[i].sort;\n\t}\n\treturn list1;\n}",
    "{\n\tforeach(i; 0 .. list1.length)\n\t{\n\t\tlist1[i] = list1[i].sort();\n\t}\n\treturn list1;\n}",
    "{\n\tforeach(i; 0 .. list1.length)\n\t{\n\t\tlist1[i] = list1[i].sort;\n\t}\n\treturn list1;\n}"
  ]
}