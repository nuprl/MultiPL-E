{
  "name": "mbpp_641_is_nonagonal",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the nth nonagonal number.\n\t\n*/\nlong is_nonagonal(long n) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_641_is_nonagonal.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = is_nonagonal;\n\n    assert(candidate(10L) == 325L);\n    assert(candidate(15L) == 750L);\n    assert(candidate(18L) == 1089L);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tlong nth_nonagonal = n * (3 * n - 2);\n\treturn nth_nonagonal;\n}",
    "{\n\tlong a = (long)sqrt(n);\n\treturn a*a == n;\n}",
    "{\n\tlong nn = (long)sqrt(2*n);\n\treturn nn*(nn+1) == 2*n;\n}",
    "{\n\tlong a = (sqrt(8*n+1)-1)/2;\n\treturn a*(a+1)/2 == n;\n}",
    "{\n\tlong x = (long)sqrt(1 + 8 * n);\n\treturn x * x == 1 + 8 * n && (x - 1) % 2 == 0;\n}",
    "{\n\treturn (sqrt(1 + 8 * n) - 1) / 2 == (long)(sqrt(1 + 8 * n) - 1) / 2;\n}",
    "{\n\tlong x = (sqrt(1 + 8 * n) - 1) / 2;\n\treturn x * (x + 1) / 2 == n;\n}",
    "{\n\tlong nth_nonagonal = 0;\n\tlong nth_term = 0;\n\tlong nth_term_count = 0;\n\tlong nth_term_count_prev = 0;\n\tlong nth_term_count_prev_prev = 0;\n\tlong nth_term_count_prev_prev_prev = 0;\n\tlong nth_term_count_prev_prev_prev_prev = 0;\n\tlong nth_term_count_prev_prev_prev_prev_prev = 0;\n\tlong nth_term_count_prev_prev_prev_prev_prev_prev = 0;\n\tlong nth_term_count_prev_prev_prev_prev_prev_prev_prev = 0;\n\tlong nth_term_count_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n\tlong nth_term_count_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n\tlong nth_term_count_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n\tlong nth_term_count_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n\tlong nth_term_count_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n\tlong nth_term_count_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n\tlong nth_term_count_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n\tlong nth_term_count_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n\tlong nth_term_count_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n\tlong nth_term_count_prev_prev",
    "{\n\tlong n1 = (sqrt(1 + 8 * n) - 1) / 2;\n\treturn n1 * (n1 + 1) / 2 == n;\n}",
    "{\n\tlong n2 = n * 2;\n\tlong n3 = n * 3;\n\tlong n4 = n * 4;\n\tlong n5 = n * 5;\n\tlong n6 = n * 6;\n\tlong n7 = n * 7;\n\tlong n8 = n * 8;\n\tlong n9 = n * 9;\n\tlong n10 = n * 10;\n\tlong n11 = n * 11;\n\tlong n12 = n * 12;\n\tlong n13 = n * 13;\n\tlong n14 = n * 14;\n\tlong n15 = n * 15;\n\tlong n16 = n * 16;\n\tlong n17 = n * 17;\n\tlong n18 = n * 18;\n\tlong n19 = n * 19;\n\tlong n20 = n * 20;\n\tlong n21 = n * 21;\n\tlong n22 = n * 22;\n\tlong n23 = n * 23;\n\tlong n24 = n * 24;\n\tlong n25 = n * 25;\n\tlong n26 = n * 26;\n\tlong n27 = n * 27;\n\tlong n28 = n * 28;\n\tlong n29 = n * 29;\n\tlong n30 = n * 30;\n\tlong n31 = n * 31;\n\tlong n32 = n * 32;\n\tlong n33 = n * 33;\n\tlong n34 = n * 34;\n\tlong n35 = n * 35;\n\tlong n36 = n * 36;\n\tlong n37 = n * 37;\n\tlong n38 = n * 38;\n\tlong n39 = n * 39;\n\tlong n40 = n * 40;\n\tlong n41 = n * 41;\n\tlong n42 = n * 42;\n\tlong n43 = n * 43;\n\tlong n44 = n * 44;\n\tlong n45 = n * 45;\n\tlong n46 = n * 46;\n\tlong n47 = n * 47;\n\tlong n48 = n * 48;\n\tlong n49 = n * 49;\n\tlong n50 = n * 50;\n\tlong n51 = n * 51;\n\tlong n52 = n * 52;",
    "{\n\tlong x = (sqrt(1 + 8 * n) - 1) / 2;\n\treturn x * (x + 1) / 2 == n;\n}",
    "{\n\tlong nth = 0;\n\tlong nth_prev = 0;\n\tlong nth_prev_prev = 0;\n\tlong nth_prev_prev_prev = 0;\n\tlong nth_prev_prev_prev_prev = 0;\n\t\n\tif (n == 1) return 1;\n\t\n\tnth_prev = is_nonagonal(n - 1);\n\t\n\tif (n == 2) return nth_prev + 1;\n\t\n\tnth_prev_prev = is_nonagonal(n - 2);\n\t\n\tif (n == 3) return nth_prev + nth_prev_prev + 1;\n\t\n\tnth_prev_prev_prev = is_nonagonal(n - 3);\n\t\n\tif (n == 4) return nth_prev + nth_prev_prev + nth_prev_prev_prev + 1;\n\t\n\tnth_prev_prev_prev_prev = is_nonagonal(n - 4);\n\t\n\treturn nth_prev + nth_prev_prev + nth_prev_prev_prev + nth_prev_prev_prev_prev + 1;\n}",
    "{\n\tlong nth_nonagonal = (n * (3 * n - 1)) / 2;\n\treturn nth_nonagonal;\n}",
    "{\n\treturn (sqrt(1 + 8 * n) - 1) / 2;\n}",
    "{\n\tlong a = (sqrt(1 + 8 * n) - 1) / 2;\n\treturn a * (a + 1) / 2 == n;\n}",
    "{\n\treturn (sqrt(1 + 8 * n) - 1) / 2;\n}",
    "{\n\tlong n_sqrt = sqrt(1 + 8 * n);\n\treturn (n_sqrt * n_sqrt == 1 + 8 * n) && (n_sqrt % 2 == 1);\n}",
    "{\n\tlong a = (long)sqrt(1 + 8*n);\n\treturn a*a == 1 + 8*n;\n}",
    "{\n\tlong x = (sqrt(8*n+1)-1)/2;\n\treturn x*(x+1)/2 == n;\n}",
    "{\n\tlong nth_nonagonal = 0;\n\tlong nth_nonagonal_plus_1 = 0;\n\tlong nth_nonagonal_plus_2 = 0;\n\tlong nth_nonagonal_plus_3 = 0;\n\tlong nth_nonagonal_plus_4 = 0;\n\tlong nth_nonagonal_plus_5 = 0;\n\tlong nth_nonagonal_plus_6 = 0;\n\tlong nth_nonagonal_plus_7 = 0;\n\tlong nth_nonagonal_plus_8 = 0;\n\tlong nth_nonagonal_plus_9 = 0;\n\t\n\tif (n == 0) \n\t{\n\t\treturn 0;\n\t}\n\t\n\tnth_nonagonal = is_nonagonal(n - 1);\n\tnth_nonagonal_plus_1 = nth_nonagonal + 1;\n\tnth_nonagonal_plus_2 = nth_nonagonal_plus_1 + 1;\n\tnth_nonagonal_plus_3 = nth_nonagonal_plus_2 + 1;\n\tnth_nonagonal_plus_4 = nth_nonagonal_plus_3 + 1;\n\tnth_nonagonal_plus_5 = nth_nonagonal_plus_4 + 1;\n\tnth_nonagonal_plus_6 = nth_nonagonal_plus_5 + 1;\n\tnth_nonagonal_plus_7 = nth_nonagonal_plus_6 + 1;\n\tnth_nonagonal_plus_8 = nth_nonagonal_plus_7 + 1;\n\tnth_nonagonal_plus_9 = nth_nonagonal_plus_8 + 1;\n\t\n\treturn nth_nonagonal_plus_9;\n}"
  ]
}