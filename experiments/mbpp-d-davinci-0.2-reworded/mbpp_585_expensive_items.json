{
  "name": "mbpp_585_expensive_items",
  "language": "d",
  "prompt": "import std.math;\n/*\n\n\tWrite a function to find the n most expensive items in a given dataset.\n\t\n*/\nNone[] expensive_items(None[] items, long n) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_585_expensive_items.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = expensive_items;\n\n    assert(candidate([[\"name\": \"Item-1\", \"price\": 101.1].nullable, [\"name\": \"Item-2\", \"price\": 555.22].nullable], 1L) == [[\"name\": \"Item-2\", \"price\": 555.22].nullable]);\n    assert(candidate([[\"name\": \"Item-1\", \"price\": 101.1].nullable, [\"name\": \"Item-2\", \"price\": 555.22].nullable, [\"name\": \"Item-3\", \"price\": 45.09].nullable], 2L) == [[\"name\": \"Item-2\", \"price\": 555.22].nullable, [\"name\": \"Item-1\", \"price\": 101.1].nullable]);\n    assert(candidate([[\"name\": \"Item-1\", \"price\": 101.1].nullable, [\"name\": \"Item-2\", \"price\": 555.22].nullable, [\"name\": \"Item-3\", \"price\": 45.09].nullable, [\"name\": \"Item-4\", \"price\": 22.75].nullable], 1L) == [[\"name\": \"Item-2\", \"price\": 555.22].nullable]);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tNone[] result;\n\tresult = new None[n];\n\t\n\tforeach(item; items)\n\t{\n\t\tif(item.price > result[0].price)\n\t\t{\n\t\t\tresult[0] = item;\n\t\t\t\n\t\t\tsort(result);\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tNone[] result;\n\tlong i;\n\t\n\tresult = new None[n];\n\t\n\tfor (i = 0; i < n; i++)\n\t{\n\t\tresult[i] = items[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tNone[] result;\n\tlong i;\n\t\n\tresult = new None[n];\n\t\n\tforeach(item; items)\n\t{\n\t\tif(item.price > result[0].price)\n\t\t{\n\t\t\tresult[0] = item;\n\t\t\t\n\t\t\tfor(i = 1; i < n; i++)\n\t\t\t{\n\t\t\t\tif(result[i].price > result[i - 1].price)\n\t\t\t\t{\n\t\t\t\t\tNone tmp = result[i];\n\t\t\t\t\tresult[i] = result[i - 1];\n\t\t\t\t\tresult[i - 1] = tmp;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tauto sorted_items = sort(items, (a, b) => a.price > b.price);\n\treturn sorted_items[0 .. n];\n}",
    "{\n\tNone[] result;\n\tforeach(None item; items) \n\t{\n\t\tif (item.price > 100) \n\t\t{\n\t\t\tresult ~= item;\n\t\t}\n\t}\n\treturn result[0..n];\n}",
    "{\n\tNone[] result;\n\t\n\tforeach(item; items) \n\t{\n\t\tif(item.price > 100) \n\t\t{\n\t\t\tresult ~= item;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tNone[] result;\n\tNone[] sorted;\n\tNone[] reversed;\n\t\n\tsorted = sort(items);\n\treversed = reverse(sorted);\n\t\n\tresult = take(reversed, n);\n\t\n\treturn result;\n}",
    "{\n\tif (n < 1) \n\t{\n\t\treturn None[];\n\t}\n\t\n\tNone[] result = None[];\n\t\n\tforeach (item; items) \n\t{\n\t\tif (result.length < n) \n\t\t{\n\t\t\tresult ~= item;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tresult[$] = min(result, item);\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tNone[] result;\n\tforeach(item; items)\n\t{\n\t\tif(item.price > n)\n\t\t{\n\t\t\tresult ~= item;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tNone[] result;\n\tNone[] sorted;\n\t\n\tsorted = sort(items, &compare_items);\n\t\n\tresult = sorted[0..n];\n\t\n\treturn result;\n}",
    "{\n\tNone[] result;\n\t\n\t// sort the items by price\n\tsort(items);\n\t\n\t// get the last n items\n\tresult = items[$-n..$];\n\t\n\treturn result;\n}",
    "{\n\tNone[] result;\n\tlong i;\n\t\n\tresult = new None[n];\n\t\n\tfor (i = 0; i < n; i++) \n\t{\n\t\tresult[i] = items[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tNone[] result;\n\tNone[] sorted;\n\t\n\tsorted = sort(items);\n\t\n\tresult = sorted[0..n];\n\t\n\treturn result;\n}",
    "{\n\tNone[] result;\n\t\n\tforeach(item; items)\n\t{\n\t\tif(result.length < n)\n\t\t{\n\t\t\tresult ~= item;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tforeach(i, r; result)\n\t\t\t{\n\t\t\t\tif(item.price > r.price)\n\t\t\t\t{\n\t\t\t\t\tresult[i] = item;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\t// TODO: implement\n\treturn None[];\n}",
    "{\n\tNone[] result;\n\tNone[] sorted_items;\n\t\n\tsorted_items = sort(items);\n\tresult = sorted_items[0..n];\n\t\n\treturn result;\n}",
    "{\n\t// Sort the items by price.\n\tsort(items, (a, b) => a.price < b.price);\n\t\n\t// Return the n most expensive items.\n\treturn items[0..n];\n}",
    "{\n\tNone[] result;\n\t\n\tforeach(None item; items)\n\t{\n\t\tif(item.price > 100)\n\t\t{\n\t\t\tresult ~= item;\n\t\t}\n\t}\n\t\n\treturn result[0..n];\n}",
    "{\n\treturn items[0..n];\n}",
    "{\n\tNone[] result;\n\tresult.reserve(n);\n\tforeach(item; items)\n\t{\n\t\tif(result.length < n)\n\t\t{\n\t\t\tresult ~= item;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tauto min = min_element(result, (a, b) => a.price > b.price);\n\t\t\tif(item.price > min.price)\n\t\t\t{\n\t\t\t\tresult[min.index] = item;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}"
  ]
}