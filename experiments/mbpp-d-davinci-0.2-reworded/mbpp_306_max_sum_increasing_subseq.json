{
  "name": "mbpp_306_max_sum_increasing_subseq",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n\t\n*/\nlong max_sum_increasing_subseq(long[] a, long n, long index, long k) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_306_max_sum_increasing_subseq.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = max_sum_increasing_subseq;\n\n    assert(candidate([1L, 101L, 2L, 3L, 100L, 4L, 5L], 7L, 4L, 6L) == 11L);\n    assert(candidate([1L, 101L, 2L, 3L, 100L, 4L, 5L], 7L, 2L, 5L) == 7L);\n    assert(candidate([11L, 15L, 19L, 21L, 26L, 28L, 31L], 7L, 2L, 4L) == 71L);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tlong max = 0;\n\tlong sum = 0;\n\tlong i = 0;\n\t\n\tif (index == n - 1)\n\t\treturn a[index];\n\t\n\tfor (i = index; i < k; i++)\n\t{\n\t\tsum = max_sum_increasing_subseq(a, n, i, k);\n\t\tif (a[k] > a[i] && sum + a[k] > max)\n\t\t\tmax = sum + a[k];\n\t}\n\t\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tlong max_sum = 0;\n\tlong sum = 0;\n\tlong[] dp = new long[n];\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tdp[i] = a[i];\n\t}\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tfor (long j = 0; j < i; j++)\n\t\t{\n\t\t\tif (a[i] > a[j])\n\t\t\t{\n\t\t\t\tdp[i] = max(dp[i], dp[j] + a[i]);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tif (dp[i] > max_sum)\n\t\t{\n\t\t\tmax_sum = dp[i];\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < index; i++)\n\t{\n\t\tsum += a[i];\n\t}\n\t\n\tmax = max_sum + sum + a[k];\n\t\n\treturn max;\n}",
    "{\n\tif (index == n)\n\t\treturn 0;\n\t\n\tlong max_sum = 0;\n\tfor (long i = index; i < n; i++) {\n\t\tif (a[i] < a[k]) {\n\t\t\tlong sum = max_sum_increasing_subseq(a, n, i + 1, k) + a[i];\n\t\t\tmax_sum = max(max_sum, sum);\n\t\t}\n\t}\n\treturn max_sum;\n}",
    "{\n\tlong[] dp = new long[n];\n\tforeach(i; 0 .. n)\n\t\tdp[i] = a[i];\n\tforeach(i; 1 .. n)\n\t{\n\t\tforeach(j; 0 .. i)\n\t\t{\n\t\t\tif(a[j] < a[i] && dp[i] < dp[j] + a[i])\n\t\t\t\tdp[i] = dp[j] + a[i];\n\t\t}\n\t}\n\tlong max = 0;\n\tforeach(i; 0 .. n)\n\t{\n\t\tif(dp[i] > max)\n\t\t\tmax = dp[i];\n\t}\n\treturn max;\n}",
    "{ \n\tif (index == n) \n\t\treturn 0; \n\t\n\t// If the kth element is greater than the current element \n\t// then we can consider it for the maximum sum. \n\tlong sum1 = 0; \n\tif (a[index] < a[k]) \n\t\tsum1 = a[index] + max_sum_increasing_subseq(a, n, index + 1, k); \n\t\n\t// If the kth element is not greater than the current element \n\t// then we can not consider it for the maximum sum. \n\tlong sum2 = max_sum_increasing_subseq(a, n, index + 1, k); \n\t\n\treturn max(sum1, sum2); \n} ",
    "{\n\tlong max_sum = 0;\n\tlong sum = 0;\n\tlong max_sum_k = 0;\n\tlong sum_k = 0;\n\t\n\tif (index == 0) \n\t{\n\t\treturn a[0];\n\t}\n\telse \n\t{\n\t\tfor (long i = 0; i < index; i++) \n\t\t{\n\t\t\tif (a[i] < a[index]) \n\t\t\t{\n\t\t\t\tsum = max_sum_increasing_subseq(a, n, i, k) + a[index];\n\t\t\t\tif (sum > max_sum) \n\t\t\t\t{\n\t\t\t\t\tmax_sum = sum;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (k > index) \n\t\t{\n\t\t\tfor (long i = 0; i < index; i++) \n\t\t\t{\n\t\t\t\tif (a[i] < a[k]) \n\t\t\t\t{\n\t\t\t\t\tsum_k = max_sum_increasing_subseq(a, n, i, k) + a[k];\n\t\t\t\t\tif (sum_k > max_sum_k) \n\t\t\t\t\t{\n\t\t\t\t\t\tmax_sum_k = sum_k;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn max(max_sum, max_sum_k);\n\t}\n}",
    "{\n\tif (index == n)\n\t\treturn 0;\n\t\n\tif (k == n)\n\t\treturn 0;\n\t\n\tif (a[index] > a[k])\n\t\treturn max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1));\n\telse\n\t\treturn max_sum_increasing_subseq(a, n, index + 1, k);\n}",
    "{\n\tlong max_sum = 0;\n\tlong sum = 0;\n\tlong[] dp = new long[n];\n\t\n\tfor (long i = 0; i < n; i++) {\n\t\tdp[i] = a[i];\n\t}\n\t\n\tfor (long i = 1; i < n; i++) {\n\t\tfor (long j = 0; j < i; j++) {\n\t\t\tif (a[i] > a[j] && i < k) {\n\t\t\t\tdp[i] = max(dp[i], dp[j] + a[i]);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < n; i++) {\n\t\tmax_sum = max(max_sum, dp[i]);\n\t}\n\t\n\treturn max_sum;\n}",
    "{\n\tlong max_sum = 0;\n\tfor (long i = 0; i < index; i++) \n\t{\n\t\tif (a[i] < a[k]) \n\t\t{\n\t\t\tmax_sum = max(max_sum, a[k] + max_sum_increasing_subseq(a, n, i, k));\n\t\t}\n\t}\n\treturn max_sum;\n}",
    "{\n\tlong sum = 0;\n\tlong max = 0;\n\tlong max_sum = 0;\n\tfor (long i = 0; i < index; i++) \n\t{\n\t\tif (a[i] < a[index]) \n\t\t{\n\t\t\tsum = max_sum_increasing_subseq(a, n, i, index);\n\t\t\tif (sum > max_sum) \n\t\t\t{\n\t\t\t\tmax_sum = sum;\n\t\t\t}\n\t\t}\n\t}\n\tif (a[index] < a[k]) \n\t{\n\t\tmax = max_sum_increasing_subseq(a, n, k, n);\n\t}\n\treturn max_sum + a[index] + max;\n}",
    "{\n\tlong max = 0;\n\tlong sum = 0;\n\tlong[] dp = new long[n];\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tdp[i] = a[i];\n\t}\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tfor (long j = 0; j < i; j++) \n\t\t{\n\t\t\tif (a[j] < a[i]) \n\t\t\t{\n\t\t\t\tdp[i] = max(dp[i], dp[j] + a[i]);\n\t\t\t}\n\t\t}\n\t}\n\tfor (long i = 0; i < index; i++) \n\t{\n\t\tsum += dp[i];\n\t}\n\tsum += a[k];\n\tmax = sum;\n\tfor (long i = index; i < n; i++) \n\t{\n\t\tsum = sum - dp[i - 1] + dp[i];\n\t\tmax = max(max, sum);\n\t}\n\treturn max;\n}",
    "{\n\tlong max_sum = 0;\n\tlong sum = 0;\n\tlong i = 0;\n\twhile (i < index) \n\t{\n\t\tif (a[i] < a[k]) \n\t\t{\n\t\t\tsum = max_sum_increasing_subseq(a, n, i, k) + a[k];\n\t\t\tif (sum > max_sum) \n\t\t\t{\n\t\t\t\tmax_sum = sum;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn max_sum;\n}",
    "{\n\tlong max = 0;\n\tfor (long i = 0; i < index; i++) \n\t{\n\t\tif (a[i] < a[k]) \n\t\t{\n\t\t\tmax = max(max, a[k] + max_sum_increasing_subseq(a, n, i, k));\n\t\t}\n\t}\n\treturn max;\n}",
    "{\n\tif(index == n)\n\t\treturn 0;\n\t\n\tif(k == n)\n\t\treturn 0;\n\t\n\tif(a[index] > a[k])\n\t\treturn max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1));\n\telse\n\t\treturn max_sum_increasing_subseq(a, n, index + 1, k);\n}",
    "{\n\tlong sum = 0;\n\tlong max = 0;\n\tfor (long i = 0; i < index; i++) \n\t{\n\t\tif (a[i] < a[k]) \n\t\t{\n\t\t\tsum = a[i] + a[k];\n\t\t\tif (sum > max) \n\t\t\t{\n\t\t\t\tmax = sum;\n\t\t\t}\n\t\t}\n\t}\n\treturn max;\n}",
    "{\n\tif (index == n)\n\t\treturn 0;\n\tif (k == n)\n\t\treturn 0;\n\tif (a[index] > a[k])\n\t\treturn max(max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, index) + a[index]);\n\telse\n\t\treturn max_sum_increasing_subseq(a, n, index + 1, k);\n}",
    "{\n\tlong max_sum = 0;\n\tlong sum = 0;\n\tlong i = 0;\n\twhile (i < index) \n\t{\n\t\tif (a[i] < a[k]) \n\t\t{\n\t\t\tsum += a[i];\n\t\t}\n\t\ti++;\n\t}\n\tmax_sum = max(max_sum, sum + a[k]);\n\treturn max_sum;\n}",
    "{\n\tlong max = 0;\n\tlong sum = 0;\n\tfor (long i = 0; i < index; i++) \n\t{\n\t\tif (a[i] < a[k]) \n\t\t{\n\t\t\tsum = max_sum_increasing_subseq(a, n, i, k);\n\t\t\tif (sum > max) \n\t\t\t{\n\t\t\t\tmax = sum;\n\t\t\t}\n\t\t}\n\t}\n\treturn a[k] + max;\n}",
    "{ \n\t// Base case \n\tif (index == 0) \n\t\treturn a[0]; ",
    "{\n\tlong max_sum = 0;\n\tfor (long i = 0; i < index; i++) \n\t{\n\t\tif (a[i] < a[k]) \n\t\t{\n\t\t\tmax_sum = max(max_sum, a[k] + max_sum_increasing_subseq(a, n, i, k));\n\t\t}\n\t}\n\treturn max_sum;\n}"
  ]
}