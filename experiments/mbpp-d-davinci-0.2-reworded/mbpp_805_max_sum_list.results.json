{
  "name": "mbpp_805_max_sum_list",
  "language": "d",
  "prompt": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_805_max_sum_list.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "/tmp/tmp92ro1hrx.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp92ro1hrx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[0];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[0];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong max = 0;\n\tlong[] max_list = new long[];\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max)\n\t\t{\n\t\t\tmax = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "/tmp/tmp62_fofyy.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp62_fofyy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[0];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[0];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "/tmp/tmp92ro1hrx.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp92ro1hrx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong max_sum = 0;\n\tlong[] max_sum_list;\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_sum_list = list;\n\t\t}\n\t}\n\treturn max_sum_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long i; list)\n\t\t{\n\t\t\tsum += i;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "/tmp/tmp82anafob.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp82anafob.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong max = 0;\n\tlong[] max_list = new long[];\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max)\n\t\t{\n\t\t\tmax = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "/tmp/tmp9ot2goij.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9ot2goij.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[0];\n\tlong max_sum = 0;\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[0];\n\tlong max_sum = 0;\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "/tmp/tmp92ro1hrx.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp92ro1hrx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong max_sum = 0;\n\tlong[] max_list = new long[0];\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "/tmp/tmp7g_kd0rs.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7g_kd0rs.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long element; list)\n\t\t\tsum += element;\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "/tmp/tmp0t68v3hi.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0t68v3hi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "/tmp/tmp92ro1hrx.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp92ro1hrx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[0];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "/tmp/tmp92ro1hrx.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp92ro1hrx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[0];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long i; list)\n\t\t{\n\t\t\tsum += i;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long i; list)\n\t\t{\n\t\t\tsum += i;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "/tmp/tmp82anafob.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp82anafob.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = lists[0];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122579,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = lists[0];\n\tlong max_sum = 0;\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122579,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n    long[] max_list = new long[0];\n    long max_sum = 0;\n    foreach(list; lists) \n    {\n        long sum = 0;\n        foreach(elem; list) \n        {\n            sum += elem;\n        }\n        if(sum > max_sum) \n        {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    return max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122579,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long num; list)\n\t\t{\n\t\t\tsum += num;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122578,
      "stdout": "",
      "stderr": "/tmp/tmpoxbpnelr.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoxbpnelr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[0];\n\tlong max_sum = 0;\n\t\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\t\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\t\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122579,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[0];\n\tlong max_sum = 0;\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list)\n\t\t\tsum += element;\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122579,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "/tmp/tmp7g_kd0rs.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7g_kd0rs.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong max_sum = 0;\n\tlong[] max_list = null;\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(elem; list)\n\t\t{\n\t\t\tsum += elem;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122579,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong max_sum = 0;\n\tlong[] max_list;\n\tforeach (list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach (element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif (sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122579,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_sum_list = null;\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_sum_list = list;\n\t\t}\n\t}\n\treturn max_sum_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122579,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong max = 0;\n\tlong[] max_list = new long[0];\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max)\n\t\t{\n\t\t\tmax = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122579,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[0];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "/tmp/tmp92ro1hrx.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp92ro1hrx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "/tmp/tmp92ro1hrx.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp92ro1hrx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[0];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[0];\n\tlong max_sum = 0;\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong max = 0;\n\tlong[] max_list = new long[];\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max)\n\t\t{\n\t\t\tmax = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "/tmp/tmp9ot2goij.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9ot2goij.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[0];\n\tlong max_sum = 0;\n\tforeach(list; lists) \n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list) \n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum) \n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122579,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[0];\n\tlong max_sum = 0;\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(elem; list)\n\t\t{\n\t\t\tsum += elem;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122579,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong max_sum = 0;\n\tlong[] max_list = new long[0];\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[0];\n\tlong max_sum = 0;\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list)\n\t\t\tsum += element;\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122579,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max = new long[0];\n\tlong max_sum = 0;\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(i; list)\n\t\t\tsum += i;\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax = list;\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122579,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = lists[0];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long i; list)\n\t\t{\n\t\t\tsum += i;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122579,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long i; list)\n\t\t{\n\t\t\tsum += i;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "/tmp/tmp82anafob.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp82anafob.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong max_sum = 0;\n\tlong[] max_list = new long[0];\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[0];\n\tlong max_sum = 0;\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "/tmp/tmp92ro1hrx.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp92ro1hrx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "/tmp/tmp7g_kd0rs.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7g_kd0rs.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n    long[] max_list = lists[0];\n    long max_sum = 0;\n    foreach(list; lists)\n    {\n        long sum = 0;\n        foreach(element; list)\n        {\n            sum += element;\n        }\n        if(sum > max_sum)\n        {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    return max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122579,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n    long[] max_list = lists[0];\n    long max_sum = 0;\n    foreach(long[] list; lists)\n    {\n        long sum = 0;\n        foreach(long element; list)\n        {\n            sum += element;\n        }\n        if(sum > max_sum)\n        {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    return max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122579,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong max_sum = 0;\n\tlong[] max_list = new long[0];\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong max = 0;\n\tlong[] max_list = new long[];\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(elem; list)\n\t\t\tsum += elem;\n\t\tif(sum > max)\n\t\t{\n\t\t\tmax = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122579,
      "stdout": "",
      "stderr": "/tmp/tmpihxm7c1x.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpihxm7c1x.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[0];\n\tlong max_sum = 0;\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "/tmp/tmp92ro1hrx.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp92ro1hrx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list;\n\tlong max_sum = 0;\n\t\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\t\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\t\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122579,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[0];\n\tlong max_sum = 0;\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list)\n\t\t\tsum += element;\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122579,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong max_sum = 0;\n\tlong[] max_list = new long[];\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(elem; list)\n\t\t{\n\t\t\tsum += elem;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122579,
      "stdout": "",
      "stderr": "/tmp/tmpu4ycurzu.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu4ycurzu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long i; list)\n\t\t\tsum += i;\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122579,
      "stdout": "",
      "stderr": "/tmp/tmp5_0za9bp.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5_0za9bp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "/tmp/tmp92ro1hrx.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp92ro1hrx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[0];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[0];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[0];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[0];\n\tlong max_sum = 0;\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list)\n\t\t\tsum += element;\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122579,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong max_sum = 0;\n\tlong[] max_list = null;\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122579,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "/tmp/tmp7g_kd0rs.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7g_kd0rs.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n    long max = 0;\n    long[] max_list = new long[0];\n    foreach(list; lists) \n    {\n        long sum = 0;\n        foreach(element; list) \n        {\n            sum += element;\n        }\n        if(sum > max) \n        {\n            max = sum;\n            max_list = list;\n        }\n    }\n    return max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122579,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = lists[0];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122579,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "/tmp/tmp7g_kd0rs.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7g_kd0rs.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "/tmp/tmp92ro1hrx.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp92ro1hrx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong max_sum = 0;\n\tlong[] max_list = null;\n\tforeach(list; lists) \n\t{\n\t\tlong sum = 0;\n\t\tforeach(elem; list) \n\t\t{\n\t\t\tsum += elem;\n\t\t}\n\t\tif(sum > max_sum) \n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122579,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "/tmp/tmp92ro1hrx.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp92ro1hrx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "/tmp/tmp92ro1hrx.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp92ro1hrx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong max_sum = 0;\n\tlong[] max_list = new long[0];\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122579,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = lists[0];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122579,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long i; list)\n\t\t{\n\t\t\tsum += i;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "/tmp/tmp82anafob.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp82anafob.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong max_sum = 0;\n\tlong[] max_list = new long[];\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122579,
      "stdout": "",
      "stderr": "/tmp/tmp38fe81tv.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp38fe81tv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "/tmp/tmp92ro1hrx.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp92ro1hrx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong max = 0;\n\tlong[] max_list = new long[];\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max)\n\t\t{\n\t\t\tmax = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "/tmp/tmp9ot2goij.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9ot2goij.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong max = 0;\n\tlong[] max_list = new long[];\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long i; list)\n\t\t{\n\t\t\tsum += i;\n\t\t}\n\t\tif(sum > max)\n\t\t{\n\t\t\tmax = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122579,
      "stdout": "",
      "stderr": "/tmp/tmpw56p060p.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw56p060p.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_sum_list = lists[0];\n\tlong max_sum = 0;\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_sum_list = list;\n\t\t}\n\t}\n\treturn max_sum_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122579,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = lists[0];\n\tlong max_sum = 0;\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122579,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong max_sum = 0;\n\tlong[] max_list = new long[0];\n\tforeach(list; lists) {\n\t\tlong sum = 0;\n\t\tforeach(item; list) {\n\t\t\tsum += item;\n\t\t}\n\t\tif(sum > max_sum) {\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122579,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list;\n\tlong max_sum = 0;\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122579,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong max = 0;\n\tlong[] max_list = new long[];\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max)\n\t\t{\n\t\t\tmax = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "/tmp/tmp62_fofyy.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp62_fofyy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "/tmp/tmp92ro1hrx.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp92ro1hrx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long i; list)\n\t\t\tsum += i;\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122579,
      "stdout": "",
      "stderr": "/tmp/tmp5_0za9bp.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5_0za9bp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = lists[0];\n\tlong max_sum = 0;\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(elem; list)\n\t\t{\n\t\t\tsum += elem;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122579,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[0];\n\tlong max_sum = 0;\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long num; list)\n\t\t{\n\t\t\tsum += num;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122578,
      "stdout": "",
      "stderr": "/tmp/tmpoxbpnelr.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoxbpnelr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[0];\n\tlong max_sum = 0;\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "/tmp/tmp7g_kd0rs.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7g_kd0rs.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long i; list)\n\t\t\tsum += i;\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122579,
      "stdout": "",
      "stderr": "/tmp/tmp5_0za9bp.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5_0za9bp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long i; list)\n\t\t{\n\t\t\tsum += i;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "/tmp/tmp82anafob.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp82anafob.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(item; list)\n\t\t{\n\t\t\tsum += item;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122579,
      "stdout": "",
      "stderr": "/tmp/tmp96tvuwco.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp96tvuwco.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = null;\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122579,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong max = 0;\n\tlong[] max_list = new long[];\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long i; list)\n\t\t{\n\t\t\tsum += i;\n\t\t}\n\t\tif(sum > max)\n\t\t{\n\t\t\tmax = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122579,
      "stdout": "",
      "stderr": "/tmp/tmpw56p060p.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw56p060p.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "/tmp/tmp92ro1hrx.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp92ro1hrx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long num; list)\n\t\t{\n\t\t\tsum += num;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122578,
      "stdout": "",
      "stderr": "/tmp/tmpoxbpnelr.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoxbpnelr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "/tmp/tmp92ro1hrx.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp92ro1hrx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[0];\n\tlong max_sum = 0;\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n    long[] max_list = lists[0];\n    long max_sum = 0;\n    foreach(list; lists)\n    {\n        long sum = 0;\n        foreach(element; list)\n        {\n            sum += element;\n        }\n        if(sum > max_sum)\n        {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    return max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122579,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long l; list)\n\t\t{\n\t\t\tsum += l;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122579,
      "stdout": "",
      "stderr": "/tmp/tmp57pz3hos.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp57pz3hos.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "/tmp/tmp7g_kd0rs.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7g_kd0rs.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "/tmp/tmp92ro1hrx.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp92ro1hrx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong max_sum = 0;\n\tlong[] max_list = new long[0];\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list)\n\t\t\tsum += element;\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122579,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "/tmp/tmp92ro1hrx.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp92ro1hrx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "/tmp/tmp92ro1hrx.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp92ro1hrx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[0];\n\tlong max_sum = 0;\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[0];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "/tmp/tmp92ro1hrx.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp92ro1hrx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong max_sum = 0;\n\tlong[] max_list = new long[];\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long n; list)\n\t\t{\n\t\t\tsum += n;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122579,
      "stdout": "",
      "stderr": "/tmp/tmp3ob23bpj.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3ob23bpj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[0];\n\tlong max_sum = 0;\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "/tmp/tmp92ro1hrx.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp92ro1hrx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "/tmp/tmp7g_kd0rs.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7g_kd0rs.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long i; list)\n\t\t\tsum += i;\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122579,
      "stdout": "",
      "stderr": "/tmp/tmp5_0za9bp.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5_0za9bp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[0];\n\tlong max_sum = 0;\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "/tmp/tmp92ro1hrx.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp92ro1hrx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong max = 0;\n\tlong[] max_list = new long[];\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max)\n\t\t{\n\t\t\tmax = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "/tmp/tmp62_fofyy.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp62_fofyy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong sum = 0;\n\tlong max_sum = 0;\n\tlong[] max_list;\n\t\n\tforeach(list; lists)\n\t{\n\t\tsum = 0;\n\t\tforeach(element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[0];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long i; list)\n\t\t{\n\t\t\tsum += i;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "/tmp/tmp82anafob.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp82anafob.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = lists[0];\n\tlong max_sum = 0;\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(elem; list)\n\t\t{\n\t\t\tsum += elem;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122579,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong max_sum = 0;\n\tlong[] max_list = new long[];\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122579,
      "stdout": "",
      "stderr": "/tmp/tmpk_pj4gge.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk_pj4gge.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[0];\n\tlong max_sum = 0;\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong max_sum = 0;\n\tlong[] max_list = new long[];\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122579,
      "stdout": "",
      "stderr": "/tmp/tmpk_pj4gge.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk_pj4gge.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong max = 0;\n\tlong[] max_list = new long[];\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long num; list)\n\t\t{\n\t\t\tsum += num;\n\t\t}\n\t\tif(sum > max)\n\t\t{\n\t\t\tmax = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122579,
      "stdout": "",
      "stderr": "/tmp/tmpkxemlxrp.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkxemlxrp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "/tmp/tmp92ro1hrx.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp92ro1hrx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[0];\n\tlong max_sum = 0;\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "/tmp/tmp92ro1hrx.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp92ro1hrx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong max_sum = 0;\n\tlong[] max_list = new long[];\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(item; list)\n\t\t{\n\t\t\tsum += item;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122579,
      "stdout": "",
      "stderr": "/tmp/tmpz5aue8yv.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz5aue8yv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong max_sum = 0;\n\tlong[] max_list = null;\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122579,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[0];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long n; list)\n\t\t\tsum += n;\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong max = 0;\n\tlong[] max_list = new long[];\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long i; list)\n\t\t{\n\t\t\tsum += i;\n\t\t}\n\t\tif(sum > max)\n\t\t{\n\t\t\tmax = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122579,
      "stdout": "",
      "stderr": "/tmp/tmpw56p060p.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw56p060p.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong max_sum = 0;\n\tlong[] max_list = new long[0];\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long num; list)\n\t\t{\n\t\t\tsum += num;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122578,
      "stdout": "",
      "stderr": "/tmp/tmpoxbpnelr.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoxbpnelr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "/tmp/tmp92ro1hrx.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp92ro1hrx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list;\n\tlong max_sum = 0;\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122579,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong max = 0;\n\tlong[] max_list = new long[];\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max)\n\t\t{\n\t\t\tmax = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "/tmp/tmp62_fofyy.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp62_fofyy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong max_sum = 0;\n\tlong[] max_list = new long[0];\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "/tmp/tmp92ro1hrx.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp92ro1hrx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "/tmp/tmp92ro1hrx.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp92ro1hrx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong max_sum = 0;\n\tlong[] max_list = new long[];\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long i; list)\n\t\t{\n\t\t\tsum += i;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122579,
      "stdout": "",
      "stderr": "/tmp/tmp9e8z53ju.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9e8z53ju.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[0];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong max_sum = 0;\n\tlong[] max_list = new long[];\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long i; list)\n\t\t{\n\t\t\tsum += i;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122579,
      "stdout": "",
      "stderr": "/tmp/tmp9e8z53ju.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9e8z53ju.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "/tmp/tmp92ro1hrx.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp92ro1hrx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[0];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long element; list)\n\t\t\tsum += element;\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "/tmp/tmp0t68v3hi.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0t68v3hi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list;\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long i; list)\n\t\t\tsum += i;\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long element; list)\n\t\t\tsum += element;\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "/tmp/tmp0t68v3hi.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0t68v3hi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[0];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = null;\n\tlong max_sum = 0;\n\tforeach(list; lists) \n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list) \n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum) \n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122579,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long num; list)\n\t\t\tsum += num;\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122579,
      "stdout": "",
      "stderr": "/tmp/tmpuqvj_z_o.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuqvj_z_o.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong max_sum = 0;\n\tlong[] max_list = new long[0];\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long i; list)\n\t\t\tsum += i;\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122579,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong max_sum = 0;\n\tlong[] max_list = new long[0];\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong max = 0;\n\tlong[] max_list = new long[];\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list)\n\t\t\tsum += element;\n\t\tif(sum > max)\n\t\t{\n\t\t\tmax = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122579,
      "stdout": "",
      "stderr": "/tmp/tmprpy21n0o.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprpy21n0o.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong max = 0;\n\tlong[] max_list = null;\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(elem; list)\n\t\t{\n\t\t\tsum += elem;\n\t\t}\n\t\tif(sum > max)\n\t\t{\n\t\t\tmax = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "/tmp/tmp92ro1hrx.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp92ro1hrx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[0];\n\tlong max_sum = 0;\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(elem; list)\n\t\t{\n\t\t\tsum += elem;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122579,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = lists[0];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122579,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long i; list)\n\t\t\tsum += i;\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122579,
      "stdout": "",
      "stderr": "/tmp/tmp5_0za9bp.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5_0za9bp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong max_sum = 0;\n\tlong[] max_list;\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long i; list)\n\t\t{\n\t\t\tsum += i;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "/tmp/tmp82anafob.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp82anafob.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[0];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long i; list)\n\t\t\tsum += i;\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[0];\n\tlong max_sum = 0;\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists) {\n\t\tlong sum = 0;\n\t\tforeach(long element; list) {\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum) {\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122579,
      "stdout": "",
      "stderr": "/tmp/tmpt1_9co47.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt1_9co47.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong max_sum = 0;\n\tlong[] max_list = new long[];\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long item; list)\n\t\t{\n\t\t\tsum += item;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122579,
      "stdout": "",
      "stderr": "/tmp/tmprqv7rp8z.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprqv7rp8z.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong max = 0;\n\tlong[] max_list = new long[];\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max)\n\t\t{\n\t\t\tmax = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "/tmp/tmp9ot2goij.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9ot2goij.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long i; list)\n\t\t\tsum += i;\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122579,
      "stdout": "",
      "stderr": "/tmp/tmp5_0za9bp.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5_0za9bp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong max = 0;\n\tlong[] max_list = new long[];\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long i; list)\n\t\t{\n\t\t\tsum += i;\n\t\t}\n\t\tif(sum > max)\n\t\t{\n\t\t\tmax = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122579,
      "stdout": "",
      "stderr": "/tmp/tmpw56p060p.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw56p060p.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[0];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists) \n\t{\n\t\tlong sum = 0;\n\t\tforeach(long x; list) \n\t\t{\n\t\t\tsum += x;\n\t\t}\n\t\tif(sum > max_sum) \n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list;\n\tlong max_sum = 0;\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122579,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = {};\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122579,
      "stdout": "",
      "stderr": "/tmp/tmpkatomux3.d(9): Error: a struct is not a valid initializer for a `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkatomux3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[0];\n\tlong max_sum = 0;\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong max = 0;\n\tlong[] max_list = new long[];\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max)\n\t\t{\n\t\t\tmax = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "/tmp/tmp9ot2goij.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9ot2goij.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "/tmp/tmp92ro1hrx.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp92ro1hrx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong max_sum = 0;\n\tlong[] max_list = null;\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122579,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[0];\n\tlong max_sum = 0;\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(elem; list)\n\t\t\tsum += elem;\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong max = 0;\n\tlong[] max_list = new long[];\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long i; list)\n\t\t{\n\t\t\tsum += i;\n\t\t}\n\t\tif(sum > max)\n\t\t{\n\t\t\tmax = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122579,
      "stdout": "",
      "stderr": "/tmp/tmpw56p060p.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw56p060p.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach (long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach (long i; list)\n\t\t{\n\t\t\tsum += i;\n\t\t}\n\t\tif (sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122579,
      "stdout": "",
      "stderr": "/tmp/tmpptb1tm6w.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpptb1tm6w.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = lists[0];\n\tlong max_sum = 0;\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122579,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = null;\n\tlong max_sum = 0;\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(elem; list)\n\t\t{\n\t\t\tsum += elem;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n    long[] max_list = lists[0];\n    long max_sum = 0;\n    foreach(list; lists)\n    {\n        long sum = 0;\n        foreach(element; list)\n        {\n            sum += element;\n        }\n        if(sum > max_sum)\n        {\n            max_sum = sum;\n            max_list = list;\n        }\n    }\n    return max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122579,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long num; list)\n\t\t{\n\t\t\tsum += num;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122578,
      "stdout": "",
      "stderr": "/tmp/tmpoxbpnelr.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoxbpnelr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong max_sum = 0;\n\tlong[] max_list = null;\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122579,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long i; list)\n\t\t{\n\t\t\tsum += i;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "/tmp/tmp82anafob.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp82anafob.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong max = 0;\n\tlong[] max_list = null;\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(item; list)\n\t\t{\n\t\t\tsum += item;\n\t\t}\n\t\tif(sum > max)\n\t\t{\n\t\t\tmax = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[0];\n\tlong max_sum = 0;\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(elem; list)\n\t\t{\n\t\t\tsum += elem;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122579,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[0];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(elem; list)\n\t\t{\n\t\t\tsum += elem;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122579,
      "stdout": "",
      "stderr": "/tmp/tmpmz0ljle3.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmz0ljle3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "/tmp/tmp7g_kd0rs.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7g_kd0rs.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong max_sum = 0;\n\tlong[] max_list = new long[0];\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(element; list)\n\t\t\tsum += element;\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122579,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "/tmp/tmp92ro1hrx.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp92ro1hrx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long i; list)\n\t\t\tsum += i;\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122579,
      "stdout": "",
      "stderr": "/tmp/tmp5_0za9bp.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5_0za9bp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(elem; list)\n\t\t\tsum += elem;\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122579,
      "stdout": "",
      "stderr": "/tmp/tmp0w__iarp.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0w__iarp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "/tmp/tmp92ro1hrx.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp92ro1hrx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = {};\n\tlong max_sum = 0;\n\tforeach(list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(elem; list)\n\t\t{\n\t\t\tsum += elem;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122579,
      "stdout": "",
      "stderr": "/tmp/tmp_p01drb2.d(9): Error: a struct is not a valid initializer for a `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_p01drb2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "/tmp/tmp92ro1hrx.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp92ro1hrx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong maxSum = 0;\n\tlong[] maxList = new long[];\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long i; list)\n\t\t{\n\t\t\tsum += i;\n\t\t}\n\t\tif(sum > maxSum)\n\t\t{\n\t\t\tmaxSum = sum;\n\t\t\tmaxList = list;\n\t\t}\n\t}\n\treturn maxList;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666122579,
      "stdout": "",
      "stderr": "/tmp/tmpf4kpqya0.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf4kpqya0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n\t\n*/\nlong[] max_sum_list(long[][] lists) \n{\n\tlong[] max_list = new long[];\n\tlong max_sum = 0;\n\tforeach(long[] list; lists)\n\t{\n\t\tlong sum = 0;\n\t\tforeach(long element; list)\n\t\t{\n\t\t\tsum += element;\n\t\t}\n\t\tif(sum > max_sum)\n\t\t{\n\t\t\tmax_sum = sum;\n\t\t\tmax_list = list;\n\t\t}\n\t}\n\treturn max_list;\n}\nunittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "/tmp/tmp92ro1hrx.d(9): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp92ro1hrx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}