{
  "name": "mbpp_558_digit_distance_nums",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_558_digit_distance_nums.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\twhile (n1_copy > 0)\n\t{\n\t\tsum += abs(n1_copy % 10 - n2_copy % 10);\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong diff = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\tlong n1_digit = 0;\n\tlong n2_digit = 0;\n\t\n\twhile (n1_copy > 0) \n\t{\n\t\tn1_digit = n1_copy % 10;\n\t\tn2_digit = n2_copy % 10;\n\t\tdiff = abs(n1_digit - n2_digit);\n\t\tsum += diff;\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\tlong n1_digit = 0;\n\tlong n2_digit = 0;\n\tlong n1_digit_count = 0;\n\tlong n2_digit_count = 0;\n\tlong n1_digit_count_copy = 0;\n\tlong n2_digit_count_copy = 0;\n\t\n\twhile (n1_copy > 0) \n\t{\n\t\tn1_copy /= 10;\n\t\tn1_digit_count++;\n\t}\n\t\n\twhile (n2_copy > 0) \n\t{\n\t\tn2_copy /= 10;\n\t\tn2_digit_count++;\n\t}\n\t\n\tn1_digit_count_copy = n1_digit_count;\n\tn2_digit_count_copy = n2_digit_count;\n\t\n\twhile (n1_digit_count > 0) \n\t{\n\t\tn1_digit = n1 % 10;\n\t\tn1 /= 10;\n\t\tn1_digit_count--;\n\t\t\n\t\tn2_digit = n2 % 10;\n\t\tn2 /= 10;\n\t\tn2_digit_count--;\n\t\t\n\t\tsum += abs(n1_digit - n2_digit);\n\t}\n\t\n\twhile (n2_digit_count_copy > n1_digit_count_copy) \n\t{\n\t\tn2_digit = n2 % 10;\n\t\tn2 /= 10;\n\t\tn2_digit_count_copy--;\n\t\t\n\t\tsum += n2_digit;\n\t}\n\t\n\twhile (n1_digit_count_copy > n2_digit_count_copy) \n\t{\n\t\tn1_digit = n1 % 10;\n\t\tn1 /= 10;\n\t\tn1_digit_count_copy--;\n\t\t\n\t\tsum += n1_digit;\n\t}\n\t\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_digits = n1.digits();\n\tlong n2_digits = n2.digits();\n\tlong n1_digit, n2_digit;\n\t\n\tforeach(i; 0..max(n1_digits, n2_digits))\n\t{\n\t\tn1_digit = n1_digits > i ? n1.digits(i) : 0;\n\t\tn2_digit = n2_digits > i ? n2.digits(i) : 0;\n\t\tsum += abs(n1_digit - n2_digit);\n\t}\n\t\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_digits = 0;\n\tlong n2_digits = 0;\n\tlong n1_digit = 0;\n\tlong n2_digit = 0;\n\t\n\tn1_digits = n1.to!string.length;\n\tn2_digits = n2.to!string.length;\n\t\n\tif (n1_digits > n2_digits) \n\t{\n\t\tfor (long i = 0; i < n1_digits; i++) \n\t\t{\n\t\t\tn1_digit = n1.to!string[i].to!long;\n\t\t\tif (i < n2_digits) \n\t\t\t{\n\t\t\t\tn2_digit = n2.to!string[i].to!long;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tn2_digit = 0;\n\t\t\t}\n\t\t\tsum += abs(n1_digit - n2_digit);\n\t\t}\n\t}\n\telse \n\t{\n\t\tfor (long i = 0; i < n2_digits; i++) \n\t\t{\n\t\t\tn2_digit = n2.to!string[i].to!long;\n\t\t\tif (i < n1_digits) \n\t\t\t{\n\t\t\t\tn1_digit = n1.to!string[i].to!long;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tn1_digit = 0;\n\t\t\t}\n\t\t\tsum += abs(n1_digit - n2_digit);\n\t\t}\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_digits = n1.digits();\n\tlong n2_digits = n2.digits();\n\tlong n1_digits_len = n1_digits.length;\n\tlong n2_digits_len = n2_digits.length;\n\t\n\tif(n1_digits_len > n2_digits_len)\n\t{\n\t\tlong diff = n1_digits_len - n2_digits_len;\n\t\tfor(long i = 0; i < diff; i++)\n\t\t{\n\t\t\tn2_digits.insert(0, 0);\n\t\t}\n\t}\n\telse if(n2_digits_len > n1_digits_len)\n\t{\n\t\tlong diff = n2_digits_len - n1_digits_len;\n\t\tfor(long i = 0; i < diff; i++)\n\t\t{\n\t\t\tn1_digits.insert(0, 0);\n\t\t}\n\t}\n\t\n\tfor(long i = 0; i < n1_digits.length; i++)\n\t{\n\t\tsum += abs(n1_digits[i] - n2_digits[i]);\n\t}\n\t\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_digits = n1.digits();\n\tlong n2_digits = n2.digits();\n\tlong n1_digit;\n\tlong n2_digit;\n\tlong n1_digit_index = 0;\n\tlong n2_digit_index = 0;\n\twhile (n1_digit_index < n1_digits && n2_digit_index < n2_digits) \n\t{\n\t\tn1_digit = n1.digits(n1_digit_index);\n\t\tn2_digit = n2.digits(n2_digit_index);\n\t\tsum += abs(n1_digit - n2_digit);\n\t\tn1_digit_index++;\n\t\tn2_digit_index++;\n\t}\n\twhile (n1_digit_index < n1_digits) \n\t{\n\t\tn1_digit = n1.digits(n1_digit_index);\n\t\tsum += abs(n1_digit);\n\t\tn1_digit_index++;\n\t}\n\twhile (n2_digit_index < n2_digits) \n\t{\n\t\tn2_digit = n2.digits(n2_digit_index);\n\t\tsum += abs(n2_digit);\n\t\tn2_digit_index++;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\tlong n1_digit = 0;\n\tlong n2_digit = 0;\n\t\n\twhile (n1_copy > 0)\n\t{\n\t\tn1_digit = n1_copy % 10;\n\t\tn2_digit = n2_copy % 10;\n\t\t\n\t\tsum += abs(n1_digit - n2_digit);\n\t\t\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\t\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\t\n\tforeach(d1; n1.digits)\n\t{\n\t\tforeach(d2; n2.digits)\n\t\t{\n\t\t\tsum += abs(d1 - d2);\n\t\t}\n\t}\n\t\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\twhile(n1_copy > 0 || n2_copy > 0)\n\t{\n\t\tsum += abs(n1_copy % 10 - n2_copy % 10);\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong diff = 0;\n\t\n\twhile(n1 > 0 || n2 > 0)\n\t{\n\t\tdiff = abs(n1 % 10 - n2 % 10);\n\t\tsum += diff;\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\t\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\twhile (n1_copy > 0 && n2_copy > 0) \n\t{\n\t\tsum += abs(n1_copy % 10 - n2_copy % 10);\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\twhile(n1_copy > 0)\n\t{\n\t\tsum += abs(n1_copy % 10 - n2_copy % 10);\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\t\n\twhile (n1_copy != 0 || n2_copy != 0)\n\t{\n\t\tsum += abs(n1_copy % 10 - n2_copy % 10);\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\t\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\twhile (n1_copy != 0 || n2_copy != 0) \n\t{\n\t\tsum += abs((n1_copy % 10) - (n2_copy % 10));\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\t\n\twhile(n1_copy != 0 || n2_copy != 0)\n\t{\n\t\tsum += abs(n1_copy % 10 - n2_copy % 10);\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\t\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\twhile(n1_copy > 0)\n\t{\n\t\tsum += abs(n1_copy % 10 - n2_copy % 10);\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_digits = 0;\n\tlong n2_digits = 0;\n\t\n\tif (n1 == n2)\n\t\treturn 0;\n\t\n\tif (n1 < n2)\n\t{\n\t\tlong temp = n1;\n\t\tn1 = n2;\n\t\tn2 = temp;\n\t}\n\t\n\twhile (n1 > 0)\n\t{\n\t\tn1_digits = n1 % 10;\n\t\tn2_digits = n2 % 10;\n\t\tsum += abs(n1_digits - n2_digits);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\t\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\twhile (n1 > 0 || n2 > 0) \n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\twhile(n1_copy > 0 || n2_copy > 0)\n\t{\n\t\tlong n1_digit = n1_copy % 10;\n\t\tlong n2_digit = n2_copy % 10;\n\t\tsum += abs(n1_digit - n2_digit);\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\twhile (n1_copy > 0) {\n\t\tsum += abs(n1_copy % 10 - n2_copy % 10);\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\twhile (n1_copy != 0) \n\t{\n\t\tsum += abs(n1_copy % 10 - n2_copy % 10);\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\twhile(n1_copy > 0 || n2_copy > 0)\n\t{\n\t\tlong n1_digit = n1_copy % 10;\n\t\tlong n2_digit = n2_copy % 10;\n\t\tsum += abs(n1_digit - n2_digit);\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\twhile (n1 > 0 || n2 > 0) \n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_digits = n1.digits();\n\tlong n2_digits = n2.digits();\n\tlong max_digits = max(n1_digits, n2_digits);\n\tfor (long i = 0; i < max_digits; i++)\n\t{\n\t\tlong n1_digit = n1.getDigit(i);\n\t\tlong n2_digit = n2.getDigit(i);\n\t\tsum += abs(n1_digit - n2_digit);\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_digits = log10(n1) + 1;\n\tlong n2_digits = log10(n2) + 1;\n\t\n\tif (n1_digits > n2_digits)\n\t{\n\t\tlong diff = n1_digits - n2_digits;\n\t\tn2 *= pow(10, diff);\n\t}\n\telse if (n2_digits > n1_digits)\n\t{\n\t\tlong diff = n2_digits - n1_digits;\n\t\tn1 *= pow(10, diff);\n\t}\n\t\n\twhile (n1 > 0)\n\t{\n\t\tlong n1_digit = n1 % 10;\n\t\tlong n2_digit = n2 % 10;\n\t\t\n\t\tsum += abs(n1_digit - n2_digit);\n\t\t\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\t\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_digits = log10(n1) + 1;\n\tlong n2_digits = log10(n2) + 1;\n\t\n\tif (n1_digits != n2_digits)\n\t{\n\t\treturn -1;\n\t}\n\t\n\tforeach (i; 0 .. n1_digits)\n\t{\n\t\tlong n1_digit = n1 % 10;\n\t\tlong n2_digit = n2 % 10;\n\t\t\n\t\tsum += abs(n1_digit - n2_digit);\n\t\t\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\t\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_digits = log10(n1);\n\tlong n2_digits = log10(n2);\n\tlong n1_digit;\n\tlong n2_digit;\n\tlong n1_temp = n1;\n\tlong n2_temp = n2;\n\twhile (n1_digits >= 0 && n2_digits >= 0) {\n\t\tn1_digit = n1_temp / pow(10, n1_digits);\n\t\tn2_digit = n2_temp / pow(10, n2_digits);\n\t\tsum += abs(n1_digit - n2_digit);\n\t\tn1_temp = n1_temp % pow(10, n1_digits);\n\t\tn2_temp = n2_temp % pow(10, n2_digits);\n\t\tn1_digits -= 1;\n\t\tn2_digits -= 1;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n = n1 - n2;\n\twhile(n != 0)\n\t{\n\t\tsum += abs(n % 10);\n\t\tn /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tforeach(i; zip(n1.digits, n2.digits))\n\t{\n\t\tsum += abs(i[0] - i[1]);\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\twhile (n1 != 0 || n2 != 0) \n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tint sum = 0;\n\tint n1_len = n1.toString().length;\n\tint n2_len = n2.toString().length;\n\tint max_len = max(n1_len, n2_len);\n\tint min_len = min(n1_len, n2_len);\n\t\n\tint n1_arr[];\n\tint n2_arr[];\n\t\n\tif (n1_len > n2_len)\n\t{\n\t\tn1_arr = n1.toString().toArray.to!int;\n\t\tn2_arr = n2.toString().toArray.to!int;\n\t}\n\telse\n\t{\n\t\tn1_arr = n2.toString().toArray.to!int;\n\t\tn2_arr = n1.toString().toArray.to!int;\n\t}\n\t\n\tfor (int i = 0; i < max_len; i++)\n\t{\n\t\tif (i < min_len)\n\t\t{\n\t\t\tsum += abs(n1_arr[i] - n2_arr[i]);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tsum += n1_arr[i];\n\t\t}\n\t}\n\t\n\treturn sum;\n}",
    "{\n\tlong distance = 0;\n\tlong n1_digits = n1.digits();\n\tlong n2_digits = n2.digits();\n\t\n\tif(n1_digits > n2_digits)\n\t{\n\t\tdistance = n1_digits - n2_digits;\n\t\tn2 = n2.pow(n1_digits);\n\t}\n\telse if(n2_digits > n1_digits)\n\t{\n\t\tdistance = n2_digits - n1_digits;\n\t\tn1 = n1.pow(n2_digits);\n\t}\n\t\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\t\n\twhile(n1_copy != 0)\n\t{\n\t\tdistance += abs(n1_copy % 10 - n2_copy % 10);\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\t\n\treturn distance;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_digits = n1.digits;\n\tlong n2_digits = n2.digits;\n\tlong n1_len = n1_digits.length;\n\tlong n2_len = n2_digits.length;\n\tlong n1_digit;\n\tlong n2_digit;\n\tlong n1_digit_index;\n\tlong n2_digit_index;\n\tlong n1_digit_index_max = n1_len - 1;\n\tlong n2_digit_index_max = n2_len - 1;\n\tlong n1_digit_index_min = 0;\n\tlong n2_digit_index_min = 0;\n\tlong n1_digit_index_diff = n1_digit_index_max - n1_digit_index_min;\n\tlong n2_digit_index_diff = n2_digit_index_max - n2_digit_index_min;\n\tlong n1_digit_index_diff_abs = abs(n1_digit_index_diff);\n\tlong n2_digit_index_diff_abs = abs(n2_digit_index_diff);\n\tlong n1_digit_index_diff_abs_max = max(n1_digit_index_diff_abs, n2_digit_index_diff_abs);\n\tlong n1_digit_index_diff_abs_max_plus_one = n1_digit_index_diff_abs_max + 1;\n\tlong i = 0;\n\twhile (i < n1_digit_index_diff_abs_max_plus_one)\n\t{\n\t\tn1_digit_index = n1_digit_index_min + i;\n\t\tn2_digit_index = n2_digit_index_min + i;\n\t\tif (n1_digit_index < n1_len)\n\t\t{\n\t\t\tn1_digit = n1_digits[n1_digit_index];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tn1_digit = 0;\n\t\t}\n\t\tif (n2_digit",
    "{\n\tlong sum = 0;\n\tint n1_len = n1.length;\n\tint n2_len = n2.length;\n\tint max_len = max(n1_len, n2_len);\n\tint min_len = min(n1_len, n2_len);\n\tint i = 0;\n\twhile(i < min_len)\n\t{\n\t\tsum += abs(n1[i] - n2[i]);\n\t\ti++;\n\t}\n\twhile(i < max_len)\n\t{\n\t\tif(n1_len > n2_len)\n\t\t{\n\t\t\tsum += n1[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tsum += n2[i];\n\t\t}\n\t\ti++;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_digits = log10(n1) + 1;\n\tlong n2_digits = log10(n2) + 1;\n\tlong n1_digits_left = n1_digits;\n\tlong n2_digits_left = n2_digits;\n\twhile (n1_digits_left > 0 || n2_digits_left > 0) \n\t{\n\t\tlong n1_digit = n1_digits_left > 0 ? n1 % 10 : 0;\n\t\tlong n2_digit = n2_digits_left > 0 ? n2 % 10 : 0;\n\t\tsum += abs(n1_digit - n2_digit);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t\tn1_digits_left--;\n\t\tn2_digits_left--;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\twhile (n1_copy > 0) {\n\t\tsum += abs(n1_copy % 10 - n2_copy % 10);\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tforeach(i; 0 .. max(n1.digits, n2.digits))\n\t{\n\t\tsum += abs(n1.digits[i] - n2.digits[i]);\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\tlong n1_len = 0;\n\tlong n2_len = 0;\n\tlong n1_digit = 0;\n\tlong n2_digit = 0;\n\t\n\twhile(n1_copy > 0)\n\t{\n\t\tn1_len++;\n\t\tn1_copy /= 10;\n\t}\n\t\n\twhile(n2_copy > 0)\n\t{\n\t\tn2_len++;\n\t\tn2_copy /= 10;\n\t}\n\t\n\twhile(n1_len > 0 && n2_len > 0)\n\t{\n\t\tn1_digit = n1 % 10;\n\t\tn2_digit = n2 % 10;\n\t\tsum += abs(n1_digit - n2_digit);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t\tn1_len--;\n\t\tn2_len--;\n\t}\n\t\n\twhile(n1_len > 0)\n\t{\n\t\tn1_digit = n1 % 10;\n\t\tsum += abs(n1_digit);\n\t\tn1 /= 10;\n\t\tn1_len--;\n\t}\n\t\n\twhile(n2_len > 0)\n\t{\n\t\tn2_digit = n2 % 10;\n\t\tsum += abs(n2_digit);\n\t\tn2 /= 10;\n\t\tn2_len--;\n\t}\n\t\n\treturn sum;\n}",
    "{\n\tlong result = 0;\n\t\n\tforeach(d1; n1.digits)\n\t\tforeach(d2; n2.digits)\n\t\t\tresult += abs(d1 - d2);\n\t\n\treturn result;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_digits = log10(n1) + 1;\n\tlong n2_digits = log10(n2) + 1;\n\tlong n1_digits_left = n1_digits;\n\tlong n2_digits_left = n2_digits;\n\twhile (n1_digits_left > 0 && n2_digits_left > 0)\n\t{\n\t\tlong n1_digit = n1 % 10;\n\t\tlong n2_digit = n2 % 10;\n\t\tsum += abs(n1_digit - n2_digit);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t\tn1_digits_left--;\n\t\tn2_digits_left--;\n\t}\n\twhile (n1_digits_left > 0)\n\t{\n\t\tlong n1_digit = n1 % 10;\n\t\tsum += n1_digit;\n\t\tn1 /= 10;\n\t\tn1_digits_left--;\n\t}\n\twhile (n2_digits_left > 0)\n\t{\n\t\tlong n2_digit = n2 % 10;\n\t\tsum += n2_digit;\n\t\tn2 /= 10;\n\t\tn2_digits_left--;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\twhile (n1 != 0 || n2 != 0) \n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n = max(n1, n2);\n\twhile (n > 0) {\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t\tn /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\twhile (n1_copy != 0) \n\t{\n\t\tsum += abs(n1_copy % 10 - n2_copy % 10);\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\twhile (n1_copy > 0 || n2_copy > 0)\n\t{\n\t\tsum += abs(n1_copy % 10 - n2_copy % 10);\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tforeach(i; 0 .. max(n1.digits, n2.digits))\n\t{\n\t\tsum += abs(n1.digits[i] - n2.digits[i]);\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tforeach(i; 0 .. max(n1.length, n2.length))\n\t{\n\t\tsum += abs(n1[i] - n2[i]);\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tforeach(i; 0 .. max(n1.length, n2.length))\n\t{\n\t\tsum += abs(n1[i] - n2[i]);\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tforeach(d1, d2; zip(n1.digits, n2.digits))\n\t{\n\t\tsum += abs(d1 - d2);\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\t\n\twhile (n1_copy > 0) \n\t{\n\t\tsum += abs(n1_copy % 10 - n2_copy % 10);\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\t\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\twhile(n1_copy != 0 || n2_copy != 0)\n\t{\n\t\tlong n1_digit = n1_copy % 10;\n\t\tlong n2_digit = n2_copy % 10;\n\t\tsum += abs(n1_digit - n2_digit);\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\twhile(n1_copy > 0)\n\t{\n\t\tsum += abs(n1_copy % 10 - n2_copy % 10);\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_digits = n1.digits();\n\tlong n2_digits = n2.digits();\n\tlong n1_digit, n2_digit;\n\t\n\tforeach(i; 0..max(n1_digits, n2_digits))\n\t{\n\t\tn1_digit = n1.digits(i);\n\t\tn2_digit = n2.digits(i);\n\t\t\n\t\tif(n1_digit == n2_digit)\n\t\t\tcontinue;\n\t\t\n\t\tif(n1_digit > n2_digit)\n\t\t\tsum += n1_digit - n2_digit;\n\t\telse\n\t\t\tsum += n2_digit - n1_digit;\n\t}\n\t\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\twhile (n1_copy > 0)\n\t{\n\t\tsum += abs(n1_copy % 10 - n2_copy % 10);\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\twhile (n1 > 0 || n2 > 0) \n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_digits = n1.digits();\n\tlong n2_digits = n2.digits();\n\tlong n1_digit = 0;\n\tlong n2_digit = 0;\n\t\n\tif (n1_digits > n2_digits)\n\t{\n\t\tfor (long i = 0; i < n1_digits; i++)\n\t\t{\n\t\t\tn1_digit = n1.digits(i);\n\t\t\tif (i < n2_digits)\n\t\t\t{\n\t\t\t\tn2_digit = n2.digits(i);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tn2_digit = 0;\n\t\t\t}\n\t\t\tsum += abs(n1_digit - n2_digit);\n\t\t}\n\t}\n\telse\n\t{\n\t\tfor (long i = 0; i < n2_digits; i++)\n\t\t{\n\t\t\tn2_digit = n2.digits(i);\n\t\t\tif (i < n1_digits)\n\t\t\t{\n\t\t\t\tn1_digit = n1.digits(i);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tn1_digit = 0;\n\t\t\t}\n\t\t\tsum += abs(n1_digit - n2_digit);\n\t\t}\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_digits = log10(n1) + 1;\n\tlong n2_digits = log10(n2) + 1;\n\t\n\tif (n1_digits > n2_digits)\n\t{\n\t\tlong diff = n1_digits - n2_digits;\n\t\tn2 *= pow(10, diff);\n\t}\n\telse if (n2_digits > n1_digits)\n\t{\n\t\tlong diff = n2_digits - n1_digits;\n\t\tn1 *= pow(10, diff);\n\t}\n\t\n\twhile (n1 > 0)\n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\t\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\t\n\twhile (n1_copy != 0 || n2_copy != 0)\n\t{\n\t\tsum += abs(n1_copy % 10 - n2_copy % 10);\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\t\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_digits = log10(n1);\n\tlong n2_digits = log10(n2);\n\tlong max_digits = max(n1_digits, n2_digits);\n\t\n\tfor(long i = 0; i <= max_digits; i++)\n\t{\n\t\tlong n1_digit = n1 % 10;\n\t\tlong n2_digit = n2 % 10;\n\t\tsum += abs(n1_digit - n2_digit);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\twhile (n1_copy != 0 || n2_copy != 0) \n\t{\n\t\tsum += abs(n1_copy % 10 - n2_copy % 10);\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_digits = n1.digits;\n\tlong n2_digits = n2.digits;\n\tlong n1_len = n1_digits.length;\n\tlong n2_len = n2_digits.length;\n\tlong max_len = max(n1_len, n2_len);\n\tlong min_len = min(n1_len, n2_len);\n\tlong i = 0;\n\twhile (i < min_len) \n\t{\n\t\tsum += abs(n1_digits[i] - n2_digits[i]);\n\t\ti++;\n\t}\n\twhile (i < max_len) \n\t{\n\t\tif (n1_len > n2_len) \n\t\t{\n\t\t\tsum += n1_digits[i];\n\t\t}\n\t\telse \n\t\t{\n\t\t\tsum += n2_digits[i];\n\t\t}\n\t\ti++;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tforeach(d1; n1.digits)\n\t{\n\t\tforeach(d2; n2.digits)\n\t\t{\n\t\t\tsum += abs(d1 - d2);\n\t\t}\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\twhile(n1 > 0 || n2 > 0)\n\t{\n\t\tlong n1_digit = n1 % 10;\n\t\tlong n2_digit = n2 % 10;\n\t\tsum += abs(n1_digit - n2_digit);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_digits = log10(n1);\n\tlong n2_digits = log10(n2);\n\tlong n1_digit = 0;\n\tlong n2_digit = 0;\n\t\n\tif (n1_digits != n2_digits)\n\t{\n\t\tif (n1_digits > n2_digits)\n\t\t{\n\t\t\tfor (long i = 0; i < n1_digits - n2_digits; i++)\n\t\t\t{\n\t\t\t\tn2 *= 10;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tfor (long i = 0; i < n2_digits - n1_digits; i++)\n\t\t\t{\n\t\t\t\tn1 *= 10;\n\t\t\t}\n\t\t}\n\t}\n\t\n\twhile (n1 > 0)\n\t{\n\t\tn1_digit = n1 % 10;\n\t\tn2_digit = n2 % 10;\n\t\tsum += abs(n1_digit - n2_digit);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\t\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\twhile(n1_copy > 0 || n2_copy > 0)\n\t{\n\t\tlong n1_digit = n1_copy % 10;\n\t\tlong n2_digit = n2_copy % 10;\n\t\tsum += abs(n1_digit - n2_digit);\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_digits = n1.digits();\n\tlong n2_digits = n2.digits();\n\t\n\tif(n1_digits > n2_digits)\n\t{\n\t\tforeach(i; 0..n1_digits)\n\t\t{\n\t\t\tif(i < n2_digits)\n\t\t\t{\n\t\t\t\tsum += abs(n1.digits[i] - n2.digits[i]);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tsum += n1.digits[i];\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\tforeach(i; 0..n2_digits)\n\t\t{\n\t\t\tif(i < n1_digits)\n\t\t\t{\n\t\t\t\tsum += abs(n1.digits[i] - n2.digits[i]);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tsum += n2.digits[i];\n\t\t\t}\n\t\t}\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\twhile (n1 > 0 && n2 > 0) \n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\t\n\tforeach(i; 0 .. max(n1.digits.length, n2.digits.length))\n\t{\n\t\tif(i < n1.digits.length && i < n2.digits.length)\n\t\t{\n\t\t\tsum += abs(n1.digits[i] - n2.digits[i]);\n\t\t}\n\t\telse if(i < n1.digits.length)\n\t\t{\n\t\t\tsum += n1.digits[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tsum += n2.digits[i];\n\t\t}\n\t}\n\t\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_digits = n1.digits;\n\tlong n2_digits = n2.digits;\n\tlong n1_len = n1_digits.length;\n\tlong n2_len = n2_digits.length;\n\tlong max_len = max(n1_len, n2_len);\n\tlong min_len = min(n1_len, n2_len);\n\t\n\tfor (long i = 0; i < max_len; i++)\n\t{\n\t\tif (i < min_len)\n\t\t{\n\t\t\tsum += abs(n1_digits[i] - n2_digits[i]);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (n1_len > n2_len)\n\t\t\t{\n\t\t\t\tsum += n1_digits[i];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tsum += n2_digits[i];\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_digits = n1.digits();\n\tlong n2_digits = n2.digits();\n\tlong max_digits = max(n1_digits, n2_digits);\n\t\n\tfor (long i = 0; i < max_digits; i++) {\n\t\tlong n1_digit = n1.digit(i);\n\t\tlong n2_digit = n2.digit(i);\n\t\t\n\t\tsum += abs(n1_digit - n2_digit);\n\t}\n\t\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_digits = 0;\n\tlong n2_digits = 0;\n\t\n\tn1_digits = n1.toString().length;\n\tn2_digits = n2.toString().length;\n\t\n\tif (n1_digits > n2_digits)\n\t{\n\t\tlong diff = n1_digits - n2_digits;\n\t\tn2 = n2 * pow(10, diff);\n\t}\n\telse if (n2_digits > n1_digits)\n\t{\n\t\tlong diff = n2_digits - n1_digits;\n\t\tn1 = n1 * pow(10, diff);\n\t}\n\t\n\twhile (n1 > 0)\n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\t\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tforeach(d1; n1.digits)\n\t{\n\t\tlong d2 = n2.digits.front;\n\t\tn2.digits.popFront();\n\t\tsum += abs(d1 - d2);\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\twhile(n1_copy > 0)\n\t{\n\t\tsum += abs(n1_copy % 10 - n2_copy % 10);\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\twhile (n1_copy > 0) \n\t{\n\t\tsum += abs(n1_copy % 10 - n2_copy % 10);\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\twhile(n1 > 0 || n2 > 0)\n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\twhile (n1_copy > 0)\n\t{\n\t\tsum += abs(n1_copy % 10 - n2_copy % 10);\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_digits = n1.digits;\n\tlong n2_digits = n2.digits;\n\t\n\tif (n1_digits > n2_digits)\n\t{\n\t\tlong n2_digits_diff = n1_digits - n2_digits;\n\t\tn2 = n2 * pow(10, n2_digits_diff);\n\t}\n\telse if (n2_digits > n1_digits)\n\t{\n\t\tlong n1_digits_diff = n2_digits - n1_digits;\n\t\tn1 = n1 * pow(10, n1_digits_diff);\n\t}\n\t\n\twhile (n1 > 0)\n\t{\n\t\tlong n1_digit = n1 % 10;\n\t\tlong n2_digit = n2 % 10;\n\t\tsum += abs(n1_digit - n2_digit);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\t\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tforeach(i; 0 .. max(n1.digits.length, n2.digits.length))\n\t{\n\t\tsum += abs(n1.digits[i] - n2.digits[i]);\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\twhile(n1_copy > 0)\n\t{\n\t\tsum += abs(n1_copy % 10 - n2_copy % 10);\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\twhile (n1_copy > 0 || n2_copy > 0) \n\t{\n\t\tlong n1_digit = n1_copy % 10;\n\t\tlong n2_digit = n2_copy % 10;\n\t\tsum += abs(n1_digit - n2_digit);\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_digits = log10(n1) + 1;\n\tlong n2_digits = log10(n2) + 1;\n\t\n\tif (n1_digits == n2_digits)\n\t{\n\t\tfor (long i = 0; i < n1_digits; i++)\n\t\t{\n\t\t\tsum += abs((n1 % 10) - (n2 % 10));\n\t\t\tn1 /= 10;\n\t\t\tn2 /= 10;\n\t\t}\n\t}\n\telse\n\t{\n\t\tlong n1_copy = n1;\n\t\tlong n2_copy = n2;\n\t\t\n\t\tif (n1_digits > n2_digits)\n\t\t{\n\t\t\tfor (long i = 0; i < n2_digits; i++)\n\t\t\t{\n\t\t\t\tsum += abs((n1 % 10) - (n2 % 10));\n\t\t\t\tn1 /= 10;\n\t\t\t\tn2 /= 10;\n\t\t\t}\n\t\t\t\n\t\t\tfor (long i = 0; i < n1_digits - n2_digits; i++)\n\t\t\t{\n\t\t\t\tsum += abs(n1_copy % 10);\n\t\t\t\tn1_copy /= 10;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tfor (long i = 0; i < n1_digits; i++)\n\t\t\t{\n\t\t\t\tsum += abs((n1 % 10) - (n2 % 10));\n\t\t\t\tn1 /= 10;\n\t\t\t\tn2 /= 10;\n\t\t\t}\n\t\t\t\n\t\t\tfor (long i = 0; i < n2_digits - n1_digits; i++)\n\t\t\t{\n\t\t\t\tsum += abs(n2_copy % 10);\n\t\t\t\tn2_copy /= 10;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\twhile(n1 != 0 || n2 != 0)\n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_digits = log10(n1) + 1;\n\tlong n2_digits = log10(n2) + 1;\n\tlong n1_digits_left = n1_digits;\n\tlong n2_digits_left = n2_digits;\n\t\n\twhile (n1_digits_left != 0 || n2_digits_left != 0)\n\t{\n\t\tlong n1_digit = n1 % 10;\n\t\tlong n2_digit = n2 % 10;\n\t\t\n\t\tsum += abs(n1_digit - n2_digit);\n\t\t\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t\t\n\t\tn1_digits_left--;\n\t\tn2_digits_left--;\n\t}\n\t\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\twhile (n1_copy != 0 || n2_copy != 0)\n\t{\n\t\tsum += abs(n1_copy % 10 - n2_copy % 10);\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\t\n\twhile (n1_copy != 0 || n2_copy != 0)\n\t{\n\t\tsum += abs(n1_copy % 10 - n2_copy % 10);\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\t\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_digits = n1.digits();\n\tlong n2_digits = n2.digits();\n\t\n\tif(n1_digits > n2_digits)\n\t{\n\t\tlong diff = n1_digits - n2_digits;\n\t\tn2 = n2 * 10.pow(diff);\n\t}\n\telse if(n2_digits > n1_digits)\n\t{\n\t\tlong diff = n2_digits - n1_digits;\n\t\tn1 = n1 * 10.pow(diff);\n\t}\n\t\n\twhile(n1 > 0)\n\t{\n\t\tsum += abs(n1.popFront() - n2.popFront());\n\t}\n\t\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n = n1;\n\twhile (n != 0)\n\t{\n\t\tsum += abs(n % 10 - n2 % 10);\n\t\tn /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\twhile (n1_copy > 0) \n\t{\n\t\tsum += abs(n1_copy % 10 - n2_copy % 10);\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\twhile (n1_copy > 0) \n\t{\n\t\tsum += abs(n1_copy % 10 - n2_copy % 10);\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_digits = n1.digits();\n\tlong n2_digits = n2.digits();\n\tlong max_digits = max(n1_digits, n2_digits);\n\t\n\tfor(long i = 0; i < max_digits; i++)\n\t{\n\t\tlong n1_digit = n1.getDigit(i);\n\t\tlong n2_digit = n2.getDigit(i);\n\t\t\n\t\tsum += abs(n1_digit - n2_digit);\n\t}\n\t\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_digits = n1.digits;\n\tlong n2_digits = n2.digits;\n\t\n\tif (n1_digits != n2_digits)\n\t{\n\t\tif (n1_digits > n2_digits)\n\t\t{\n\t\t\tn2 *= pow(10, n1_digits - n2_digits);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tn1 *= pow(10, n2_digits - n1_digits);\n\t\t}\n\t}\n\t\n\tforeach (i; 0 .. n1.digits)\n\t{\n\t\tsum += abs(n1.digits[i] - n2.digits[i]);\n\t}\n\t\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\t\n\twhile (n1_copy != 0 || n2_copy != 0)\n\t{\n\t\tsum += abs(n1_copy % 10 - n2_copy % 10);\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\t\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tforeach (digit1, digit2; zip(n1.digits, n2.digits))\n\t{\n\t\tsum += abs(digit1 - digit2);\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\tlong n1_digit = 0;\n\tlong n2_digit = 0;\n\t\n\twhile (n1_copy > 0)\n\t{\n\t\tn1_digit = n1_copy % 10;\n\t\tn2_digit = n2_copy % 10;\n\t\tsum += abs(n1_digit - n2_digit);\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\twhile (n1 > 0 || n2 > 0)\n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tforeach(d1; n1.digits)\n\t{\n\t\tforeach(d2; n2.digits)\n\t\t{\n\t\t\tsum += abs(d1 - d2);\n\t\t}\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong diff = 0;\n\t\n\twhile (n1 > 0 || n2 > 0)\n\t{\n\t\tdiff = abs(n1 % 10 - n2 % 10);\n\t\tsum += diff;\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\t\n\twhile (n1 > 0 || n2 > 0)\n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\t\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\t\n\twhile (n1_copy != 0 || n2_copy != 0)\n\t{\n\t\tsum += abs(n1_copy % 10 - n2_copy % 10);\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\t\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\twhile (n1_copy != 0) \n\t{\n\t\tsum += abs(n1_copy % 10 - n2_copy % 10);\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tforeach(i; 0 .. max(n1.length, n2.length))\n\t{\n\t\tlong d1 = n1.length > i ? n1[i] : 0;\n\t\tlong d2 = n2.length > i ? n2[i] : 0;\n\t\tsum += abs(d1 - d2);\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\twhile (n1_copy != 0 || n2_copy != 0) \n\t{\n\t\tsum += abs(n1_copy % 10 - n2_copy % 10);\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_digits = n1.digits;\n\tlong n2_digits = n2.digits;\n\t\n\tif(n1_digits < n2_digits)\n\t{\n\t\tlong temp = n1;\n\t\tn1 = n2;\n\t\tn2 = temp;\n\t\t\n\t\tn1_digits = n1.digits;\n\t\tn2_digits = n2.digits;\n\t}\n\t\n\tlong n1_digits_copy = n1_digits;\n\tlong n2_digits_copy = n2_digits;\n\t\n\twhile(n1_digits_copy > 0)\n\t{\n\t\tlong n1_digit = n1.getDigit(n1_digits_copy);\n\t\tlong n2_digit = n2.getDigit(n2_digits_copy);\n\t\t\n\t\tsum += abs(n1_digit - n2_digit);\n\t\t\n\t\tn1_digits_copy--;\n\t\tn2_digits_copy--;\n\t}\n\t\n\treturn sum;\n}",
    "{\n\tlong result = 0;\n\t\n\tforeach(i; 0 .. max(n1.digits, n2.digits))\n\t{\n\t\tresult += abs(n1.digits[i] - n2.digits[i]);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong sum = 0;\n\tlong n = n1;\n\tlong m = n2;\n\twhile (n > 0) {\n\t\tsum += abs(n % 10 - m % 10);\n\t\tn /= 10;\n\t\tm /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\twhile (n1_copy > 0)\n\t{\n\t\tsum += abs(n1_copy % 10 - n2_copy % 10);\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_digits = n1.digits();\n\tlong n2_digits = n2.digits();\n\t\n\tif(n1_digits > n2_digits)\n\t{\n\t\tlong diff = n1_digits - n2_digits;\n\t\tn2 = n2 * pow(10, diff);\n\t}\n\telse if(n2_digits > n1_digits)\n\t{\n\t\tlong diff = n2_digits - n1_digits;\n\t\tn1 = n1 * pow(10, diff);\n\t}\n\t\n\twhile(n1 > 0)\n\t{\n\t\tlong n1_digit = n1 % 10;\n\t\tlong n2_digit = n2 % 10;\n\t\tsum += abs(n1_digit - n2_digit);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\t\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\twhile (n1_copy > 0 || n2_copy > 0) \n\t{\n\t\tsum += abs(n1_copy % 10 - n2_copy % 10);\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_digits = log10(n1);\n\tlong n2_digits = log10(n2);\n\tlong n1_digit;\n\tlong n2_digit;\n\t\n\tif (n1_digits > n2_digits)\n\t{\n\t\tfor (long i = 0; i < n1_digits; i++)\n\t\t{\n\t\t\tn1_digit = n1 % 10;\n\t\t\tn2_digit = n2 % 10;\n\t\t\tsum += abs(n1_digit - n2_digit);\n\t\t\tn1 /= 10;\n\t\t\tn2 /= 10;\n\t\t}\n\t}\n\telse\n\t{\n\t\tfor (long i = 0; i < n2_digits; i++)\n\t\t{\n\t\t\tn1_digit = n1 % 10;\n\t\t\tn2_digit = n2 % 10;\n\t\t\tsum += abs(n1_digit - n2_digit);\n\t\t\tn1 /= 10;\n\t\t\tn2 /= 10;\n\t\t}\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\twhile (n1_copy != 0 || n2_copy != 0)\n\t{\n\t\tsum += abs(n1_copy % 10 - n2_copy % 10);\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\twhile (n1_copy > 0) \n\t{\n\t\tsum += abs(n1_copy % 10 - n2_copy % 10);\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\t\n\twhile (n1 > 0 || n2 > 0)\n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\t\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\twhile (n1_copy > 0) \n\t{\n\t\tsum += abs(n1_copy % 10 - n2_copy % 10);\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\twhile(n1_copy > 0)\n\t{\n\t\tsum += abs(n1_copy % 10 - n2_copy % 10);\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\twhile (n1 > 0 || n2 > 0) \n\t{\n\t\tsum += abs((n1 % 10) - (n2 % 10));\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_digits = n1.digits();\n\tlong n2_digits = n2.digits();\n\tlong max_digits = max(n1_digits, n2_digits);\n\t\n\tfor (long i = 0; i < max_digits; i++)\n\t{\n\t\tlong n1_digit = n1.getDigit(i);\n\t\tlong n2_digit = n2.getDigit(i);\n\t\tsum += abs(n1_digit - n2_digit);\n\t}\n\t\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_digits = n1.digits();\n\tlong n2_digits = n2.digits();\n\tlong max_digits = max(n1_digits, n2_digits);\n\t\n\tforeach(i; 0 .. max_digits)\n\t{\n\t\tlong n1_digit = 0;\n\t\tlong n2_digit = 0;\n\t\t\n\t\tif(i < n1_digits)\n\t\t{\n\t\t\tn1_digit = n1.digits()[i];\n\t\t}\n\t\t\n\t\tif(i < n2_digits)\n\t\t{\n\t\t\tn2_digit = n2.digits()[i];\n\t\t}\n\t\t\n\t\tsum += abs(n1_digit - n2_digit);\n\t}\n\t\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\t\n\twhile (n1 > 0 || n2 > 0)\n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\t\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tint n1_len = n1.length;\n\tint n2_len = n2.length;\n\tint len = max(n1_len, n2_len);\n\t\n\tfor(int i = 0; i < len; i++)\n\t{\n\t\tint n1_digit = n1_len > i ? n1[i] : 0;\n\t\tint n2_digit = n2_len > i ? n2[i] : 0;\n\t\t\n\t\tsum += abs(n1_digit - n2_digit);\n\t}\n\t\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_digits = 0;\n\tlong n2_digits = 0;\n\tlong n1_digit = 0;\n\tlong n2_digit = 0;\n\t\n\tif (n1 < 0)\n\t\tn1 = -n1;\n\tif (n2 < 0)\n\t\tn2 = -n2;\n\t\n\twhile (n1 > 0)\n\t{\n\t\tn1_digits++;\n\t\tn1 /= 10;\n\t}\n\twhile (n2 > 0)\n\t{\n\t\tn2_digits++;\n\t\tn2 /= 10;\n\t}\n\t\n\tn1 = n1_digits;\n\tn2 = n2_digits;\n\t\n\twhile (n1 > 0)\n\t{\n\t\tn1_digit = n1 % 10;\n\t\tn2_digit = n2 % 10;\n\t\t\n\t\tsum += abs(n1_digit - n2_digit);\n\t\t\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\t\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\twhile (n1_copy > 0 || n2_copy > 0)\n\t{\n\t\tlong n1_digit = n1_copy % 10;\n\t\tlong n2_digit = n2_copy % 10;\n\t\tsum += abs(n1_digit - n2_digit);\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_digits = log10(n1) + 1;\n\tlong n2_digits = log10(n2) + 1;\n\tlong n1_digit;\n\tlong n2_digit;\n\tlong n1_mod;\n\tlong n2_mod;\n\t\n\twhile (n1_digits > 0 || n2_digits > 0) \n\t{\n\t\tn1_mod = n1 % 10;\n\t\tn2_mod = n2 % 10;\n\t\t\n\t\tif (n1_digits > 0) \n\t\t{\n\t\t\tn1_digit = n1_mod;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tn1_digit = 0;\n\t\t}\n\t\t\n\t\tif (n2_digits > 0) \n\t\t{\n\t\t\tn2_digit = n2_mod;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tn2_digit = 0;\n\t\t}\n\t\t\n\t\tsum += abs(n1_digit - n2_digit);\n\t\t\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t\tn1_digits--;\n\t\tn2_digits--;\n\t}\n\t\n\treturn sum;\n}",
    "{\n\tlong result = 0;\n\tlong n1_digits = n1.digits();\n\tlong n2_digits = n2.digits();\n\tlong max_digits = max(n1_digits, n2_digits);\n\t\n\tforeach(i; 0..max_digits)\n\t{\n\t\tlong n1_digit = 0;\n\t\tlong n2_digit = 0;\n\t\t\n\t\tif(i < n1_digits)\n\t\t{\n\t\t\tn1_digit = n1.digits(i);\n\t\t}\n\t\t\n\t\tif(i < n2_digits)\n\t\t{\n\t\t\tn2_digit = n2.digits(i);\n\t\t}\n\t\t\n\t\tresult += abs(n1_digit - n2_digit);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_digits = 0;\n\tlong n2_digits = 0;\n\tlong n1_digit = 0;\n\tlong n2_digit = 0;\n\t\n\t// Get the number of digits in n1\n\tn1_digits = (long)log10(n1) + 1;\n\t\n\t// Get the number of digits in n2\n\tn2_digits = (long)log10(n2) + 1;\n\t\n\t// Get the digits of n1 and n2\n\tfor (long i = 0; i < n1_digits; i++)\n\t{\n\t\tn1_digit = n1 % 10;\n\t\tn2_digit = n2 % 10;\n\t\t\n\t\t// Add the difference between the digits to the sum\n\t\tsum += abs(n1_digit - n2_digit);\n\t\t\n\t\t// Remove the last digit from n1 and n2\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\t\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\twhile (n1 > 0 || n2 > 0) \n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\twhile(n1_copy != 0 || n2_copy != 0)\n\t{\n\t\tsum += abs(n1_copy % 10 - n2_copy % 10);\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\twhile(n1_copy > 0 || n2_copy > 0)\n\t{\n\t\tlong n1_digit = n1_copy % 10;\n\t\tlong n2_digit = n2_copy % 10;\n\t\tsum += abs(n1_digit - n2_digit);\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n = max(n1, n2);\n\twhile(n > 0) \n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t\tn /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\twhile (n1_copy > 0 || n2_copy > 0)\n\t{\n\t\tsum += abs(n1_copy % 10 - n2_copy % 10);\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_digits = log10(n1) + 1;\n\tlong n2_digits = log10(n2) + 1;\n\tlong n1_digits_copy = n1_digits;\n\tlong n2_digits_copy = n2_digits;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\tlong n1_digit;\n\tlong n2_digit;\n\t\n\twhile (n1_digits != 0 && n2_digits != 0)\n\t{\n\t\tn1_digit = n1_copy % 10;\n\t\tn2_digit = n2_copy % 10;\n\t\t\n\t\tsum += abs(n1_digit - n2_digit);\n\t\t\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t\t\n\t\tn1_digits--;\n\t\tn2_digits--;\n\t}\n\t\n\tif (n1_digits_copy > n2_digits_copy)\n\t{\n\t\twhile (n1_digits_copy != 0)\n\t\t{\n\t\t\tn1_digit = n1_copy % 10;\n\t\t\t\n\t\t\tsum += n1_digit;\n\t\t\t\n\t\t\tn1_copy /= 10;\n\t\t\t\n\t\t\tn1_digits_copy--;\n\t\t}\n\t}\n\telse if (n1_digits_copy < n2_digits_copy)\n\t{\n\t\twhile (n2_digits_copy != 0)\n\t\t{\n\t\t\tn2_digit = n2_copy % 10;\n\t\t\t\n\t\t\tsum += n2_digit;\n\t\t\t\n\t\t\tn2_copy /= 10;\n\t\t\t\n\t\t\tn2_digits_copy--;\n\t\t}\n\t}\n\t\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\twhile (n1 != 0 || n2 != 0) \n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tint n1_size = n1.stringof.length;\n\tint n2_size = n2.stringof.length;\n\tint size = max(n1_size, n2_size);\n\tint n1_digit, n2_digit;\n\t\n\tforeach(i; 0 .. size)\n\t{\n\t\tif(i < n1_size)\n\t\t\tn1_digit = n1.stringof[i] - '0';\n\t\telse\n\t\t\tn1_digit = 0;\n\t\t\t\n\t\tif(i < n2_size)\n\t\t\tn2_digit = n2.stringof[i] - '0';\n\t\telse\n\t\t\tn2_digit = 0;\n\t\t\t\n\t\tsum += abs(n1_digit - n2_digit);\n\t}\n\t\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\twhile(n1_copy > 0)\n\t{\n\t\tsum += abs(n1_copy % 10 - n2_copy % 10);\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong result = 0;\n\tlong n1_digits = n1.digits();\n\tlong n2_digits = n2.digits();\n\tlong n1_digits_len = n1_digits.length;\n\tlong n2_digits_len = n2_digits.length;\n\tlong n1_digits_len_min = min(n1_digits_len, n2_digits_len);\n\tlong n1_digits_len_max = max(n1_digits_len, n2_digits_len);\n\t\n\tforeach(i, n1_digit; n1_digits)\n\t{\n\t\tif(i < n1_digits_len_min)\n\t\t{\n\t\t\tresult += abs(n1_digit - n2_digits[i]);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult += n1_digit;\n\t\t}\n\t}\n\t\n\tforeach(i, n2_digit; n2_digits)\n\t{\n\t\tif(i >= n1_digits_len_min)\n\t\t{\n\t\t\tresult += n2_digit;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong sum = 0;\n\tlong n = max(n1, n2);\n\twhile(n > 0)\n\t{\n\t\tlong d1 = n1 % 10;\n\t\tlong d2 = n2 % 10;\n\t\tsum += abs(d1 - d2);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t\tn /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\t\n\tforeach(i; 0 .. max(n1.digits.length, n2.digits.length))\n\t{\n\t\tsum += abs(n1.digits[i] - n2.digits[i]);\n\t}\n\t\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_digits = log10(n1) + 1;\n\tlong n2_digits = log10(n2) + 1;\n\tlong n1_digits_copy = n1_digits;\n\tlong n2_digits_copy = n2_digits;\n\t\n\twhile(n1_digits > 0 && n2_digits > 0)\n\t{\n\t\tlong n1_digit = n1 % 10;\n\t\tlong n2_digit = n2 % 10;\n\t\t\n\t\tif(n1_digits > n2_digits)\n\t\t{\n\t\t\tn2_digit = 0;\n\t\t}\n\t\telse if(n2_digits > n1_digits)\n\t\t{\n\t\t\tn1_digit = 0;\n\t\t}\n\t\t\n\t\tsum += abs(n1_digit - n2_digit);\n\t\t\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t\tn1_digits--;\n\t\tn2_digits--;\n\t}\n\t\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\twhile(n1_copy > 0 || n2_copy > 0)\n\t{\n\t\tsum += abs(n1_copy % 10 - n2_copy % 10);\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_digits = n1.digits();\n\tlong n2_digits = n2.digits();\n\tlong n1_digit = 0;\n\tlong n2_digit = 0;\n\tlong n1_digit_index = 0;\n\tlong n2_digit_index = 0;\n\t\n\twhile (n1_digit_index < n1_digits && n2_digit_index < n2_digits)\n\t{\n\t\tn1_digit = n1.getDigit(n1_digit_index);\n\t\tn2_digit = n2.getDigit(n2_digit_index);\n\t\tsum += abs(n1_digit - n2_digit);\n\t\tn1_digit_index++;\n\t\tn2_digit_index++;\n\t}\n\t\n\twhile (n1_digit_index < n1_digits)\n\t{\n\t\tn1_digit = n1.getDigit(n1_digit_index);\n\t\tsum += abs(n1_digit);\n\t\tn1_digit_index++;\n\t}\n\t\n\twhile (n2_digit_index < n2_digits)\n\t{\n\t\tn2_digit = n2.getDigit(n2_digit_index);\n\t\tsum += abs(n2_digit);\n\t\tn2_digit_index++;\n\t}\n\t\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_digits = n1.digits();\n\tlong n2_digits = n2.digits();\n\tlong n1_digits_len = n1_digits.length;\n\tlong n2_digits_len = n2_digits.length;\n\tlong n1_digits_len_min = min(n1_digits_len, n2_digits_len);\n\t\n\tfor (long i = 0; i < n1_digits_len_min; i++) \n\t{\n\t\tsum += abs(n1_digits[i] - n2_digits[i]);\n\t}\n\t\n\tif (n1_digits_len > n2_digits_len) \n\t{\n\t\tfor (long i = n2_digits_len; i < n1_digits_len; i++) \n\t\t{\n\t\t\tsum += n1_digits[i];\n\t\t}\n\t}\n\telse if (n1_digits_len < n2_digits_len) \n\t{\n\t\tfor (long i = n1_digits_len; i < n2_digits_len; i++) \n\t\t{\n\t\t\tsum += n2_digits[i];\n\t\t}\n\t}\n\t\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_digits = n1.digits;\n\tlong n2_digits = n2.digits;\n\tlong n1_digit, n2_digit;\n\t\n\tforeach(i; 0 .. max(n1_digits, n2_digits))\n\t{\n\t\tn1_digit = n1_digits > i ? n1.digits[i] : 0;\n\t\tn2_digit = n2_digits > i ? n2.digits[i] : 0;\n\t\tsum += abs(n1_digit - n2_digit);\n\t}\n\t\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\twhile (n1 > 0 || n2 > 0) \n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n = n1;\n\twhile(n != 0)\n\t{\n\t\tsum += abs(n % 10 - n2 % 10);\n\t\tn /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\twhile (n1_copy != 0 || n2_copy != 0) \n\t{\n\t\tsum += abs(n1_copy % 10 - n2_copy % 10);\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\twhile(n1 > 0 || n2 > 0)\n\t{\n\t\tlong d1 = n1 % 10;\n\t\tlong d2 = n2 % 10;\n\t\tsum += abs(d1 - d2);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\twhile(n1_copy > 0 || n2_copy > 0)\n\t{\n\t\tif(n1_copy > 0)\n\t\t{\n\t\t\tsum += abs(n1_copy % 10 - n2_copy % 10);\n\t\t\tn1_copy /= 10;\n\t\t}\n\t\tif(n2_copy > 0)\n\t\t{\n\t\t\tsum += abs(n1_copy % 10 - n2_copy % 10);\n\t\t\tn2_copy /= 10;\n\t\t}\n\t}\n\treturn sum;\n}",
    "{\n\tlong result = 0;\n\tlong n1_digits = n1.digits();\n\tlong n2_digits = n2.digits();\n\tlong max_digits = max(n1_digits, n2_digits);\n\t\n\tforeach(i; 0..max_digits)\n\t{\n\t\tlong n1_digit = 0;\n\t\tlong n2_digit = 0;\n\t\t\n\t\tif(i < n1_digits)\n\t\t{\n\t\t\tn1_digit = n1.digits(i);\n\t\t}\n\t\t\n\t\tif(i < n2_digits)\n\t\t{\n\t\t\tn2_digit = n2.digits(i);\n\t\t}\n\t\t\n\t\tresult += abs(n1_digit - n2_digit);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_digits = log10(n1) + 1;\n\tlong n2_digits = log10(n2) + 1;\n\tlong n1_digits_left = n1_digits;\n\tlong n2_digits_left = n2_digits;\n\t\n\twhile (n1_digits_left > 0 || n2_digits_left > 0)\n\t{\n\t\tlong n1_digit = n1_digits_left > 0 ? n1 % 10 : 0;\n\t\tlong n2_digit = n2_digits_left > 0 ? n2 % 10 : 0;\n\t\t\n\t\tsum += abs(n1_digit - n2_digit);\n\t\t\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t\tn1_digits_left--;\n\t\tn2_digits_left--;\n\t}\n\t\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\twhile (n1_copy > 0) \n\t{\n\t\tsum += abs(n1_copy % 10 - n2_copy % 10);\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\twhile (n1 > 0 || n2 > 0) \n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\twhile (n1 > 0 || n2 > 0) \n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\t\n\tforeach(i; 0 .. max(n1.length, n2.length))\n\t{\n\t\tlong n1_digit = n1.length > i ? n1[$-i-1] : 0;\n\t\tlong n2_digit = n2.length > i ? n2[$-i-1] : 0;\n\t\t\n\t\tsum += abs(n1_digit - n2_digit);\n\t}\n\t\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_digits = n1.digits();\n\tlong n2_digits = n2.digits();\n\tlong max_digits = max(n1_digits, n2_digits);\n\t\n\tfor(long i = 0; i < max_digits; i++)\n\t{\n\t\tlong n1_digit = n1.digit(i);\n\t\tlong n2_digit = n2.digit(i);\n\t\t\n\t\tsum += abs(n1_digit - n2_digit);\n\t}\n\t\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\twhile (n1_copy > 0 || n2_copy > 0) \n\t{\n\t\tlong n1_digit = n1_copy % 10;\n\t\tlong n2_digit = n2_copy % 10;\n\t\tsum += abs(n1_digit - n2_digit);\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\twhile (n1_copy != 0 || n2_copy != 0)\n\t{\n\t\tsum += abs(n1_copy % 10 - n2_copy % 10);\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\twhile(n1 > 0 || n2 > 0)\n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tforeach(i; 0 .. max(n1.digits, n2.digits))\n\t{\n\t\tsum += abs(n1.digits[i] - n2.digits[i]);\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\t\n\twhile (n1_copy != 0 || n2_copy != 0) \n\t{\n\t\tsum += abs(n1_copy % 10 - n2_copy % 10);\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\t\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\t\n\twhile(n1_copy > 0)\n\t{\n\t\tlong n1_digit = n1_copy % 10;\n\t\tlong n2_digit = n2_copy % 10;\n\t\t\n\t\tsum += abs(n1_digit - n2_digit);\n\t\t\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\t\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_digits = n1.digits();\n\tlong n2_digits = n2.digits();\n\tlong max_digits = max(n1_digits, n2_digits);\n\t\n\tforeach(i; 0..max_digits)\n\t{\n\t\tlong n1_digit = n1_digits > i ? n1.digits[i] : 0;\n\t\tlong n2_digit = n2_digits > i ? n2.digits[i] : 0;\n\t\tsum += abs(n1_digit - n2_digit);\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong num1 = n1;\n\tlong num2 = n2;\n\twhile(num1 > 0 || num2 > 0)\n\t{\n\t\tsum += abs(num1 % 10 - num2 % 10);\n\t\tnum1 /= 10;\n\t\tnum2 /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tforeach(i; 0 .. max(n1.length, n2.length))\n\t{\n\t\tsum += abs(n1[i] - n2[i]);\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_digits = n1.digits();\n\tlong n2_digits = n2.digits();\n\t\n\tif (n1_digits > n2_digits)\n\t{\n\t\tlong diff = n1_digits - n2_digits;\n\t\tn2 *= 10.pow(diff);\n\t}\n\telse if (n2_digits > n1_digits)\n\t{\n\t\tlong diff = n2_digits - n1_digits;\n\t\tn1 *= 10.pow(diff);\n\t}\n\t\n\twhile (n1 > 0)\n\t{\n\t\tsum += abs(n1.popFront() - n2.popFront());\n\t}\n\t\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\twhile (n1_copy > 0 || n2_copy > 0) \n\t{\n\t\tlong n1_digit = n1_copy % 10;\n\t\tlong n2_digit = n2_copy % 10;\n\t\tsum += abs(n1_digit - n2_digit);\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\twhile (n1_copy > 0 || n2_copy > 0) \n\t{\n\t\tlong n1_digit = n1_copy % 10;\n\t\tlong n2_digit = n2_copy % 10;\n\t\tsum += abs(n1_digit - n2_digit);\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_digits = log10(n1);\n\tlong n2_digits = log10(n2);\n\t\n\tif (n1_digits > n2_digits)\n\t{\n\t\tlong diff = n1_digits - n2_digits;\n\t\tn2 *= pow(10, diff);\n\t}\n\telse if (n2_digits > n1_digits)\n\t{\n\t\tlong diff = n2_digits - n1_digits;\n\t\tn1 *= pow(10, diff);\n\t}\n\t\n\twhile (n1 > 0)\n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\t\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\tlong n1_digit = 0;\n\tlong n2_digit = 0;\n\t\n\twhile (n1_copy > 0) \n\t{\n\t\tn1_digit = n1_copy % 10;\n\t\tn2_digit = n2_copy % 10;\n\t\tsum += abs(n1_digit - n2_digit);\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\t\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_digits = 0;\n\tlong n2_digits = 0;\n\t\n\tn1_digits = n1.toString().length;\n\tn2_digits = n2.toString().length;\n\t\n\tif(n1_digits == n2_digits)\n\t{\n\t\tfor(int i = 0; i < n1_digits; i++)\n\t\t{\n\t\t\tsum += abs(n1.toString()[i] - n2.toString()[i]);\n\t\t}\n\t}\n\telse\n\t{\n\t\tif(n1_digits > n2_digits)\n\t\t{\n\t\t\tfor(int i = 0; i < n2_digits; i++)\n\t\t\t{\n\t\t\t\tsum += abs(n1.toString()[i] - n2.toString()[i]);\n\t\t\t}\n\t\t\tfor(int i = n2_digits; i < n1_digits; i++)\n\t\t\t{\n\t\t\t\tsum += abs(n1.toString()[i] - 0);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tfor(int i = 0; i < n1_digits; i++)\n\t\t\t{\n\t\t\t\tsum += abs(n1.toString()[i] - n2.toString()[i]);\n\t\t\t}\n\t\t\tfor(int i = n1_digits; i < n2_digits; i++)\n\t\t\t{\n\t\t\t\tsum += abs(0 - n2.toString()[i]);\n\t\t\t}\n\t\t}\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong diff = 0;\n\t\n\tforeach(d1; n1.digits)\n\t{\n\t\tforeach(d2; n2.digits)\n\t\t{\n\t\t\tdiff = abs(d1 - d2);\n\t\t\tsum += diff;\n\t\t}\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tforeach(i; zip(n1.digits(), n2.digits()))\n\t{\n\t\tsum += abs(i[0] - i[1]);\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tforeach(d1; n1.digits)\n\t{\n\t\tforeach(d2; n2.digits)\n\t\t{\n\t\t\tsum += abs(d1 - d2);\n\t\t}\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_digits = n1.digits;\n\tlong n2_digits = n2.digits;\n\t\n\tif (n1_digits == n2_digits)\n\t{\n\t\tforeach (i, n; n1_digits)\n\t\t{\n\t\t\tsum += abs(n1[i] - n2[i]);\n\t\t}\n\t}\n\telse\n\t{\n\t\tlong diff = abs(n1_digits - n2_digits);\n\t\t\n\t\tif (n1_digits > n2_digits)\n\t\t{\n\t\t\tforeach (i, n; n2_digits)\n\t\t\t{\n\t\t\t\tsum += abs(n1[i] - n2[i]);\n\t\t\t}\n\t\t\t\n\t\t\tforeach (i, n; diff)\n\t\t\t{\n\t\t\t\tsum += n1[n2_digits + i];\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tforeach (i, n; n1_digits)\n\t\t\t{\n\t\t\t\tsum += abs(n1[i] - n2[i]);\n\t\t\t}\n\t\t\t\n\t\t\tforeach (i, n; diff)\n\t\t\t{\n\t\t\t\tsum += n2[n1_digits + i];\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_digits = 0;\n\tlong n2_digits = 0;\n\tlong n1_digit = 0;\n\tlong n2_digit = 0;\n\t\n\tn1_digits = log10(n1);\n\tn2_digits = log10(n2);\n\t\n\tif (n1_digits > n2_digits)\n\t{\n\t\twhile (n1 > 0)\n\t\t{\n\t\t\tn1_digit = n1 % 10;\n\t\t\tn2_digit = n2 % 10;\n\t\t\tsum += abs(n1_digit - n2_digit);\n\t\t\tn1 /= 10;\n\t\t\tn2 /= 10;\n\t\t}\n\t}\n\telse\n\t{\n\t\twhile (n2 > 0)\n\t\t{\n\t\t\tn1_digit = n1 % 10;\n\t\t\tn2_digit = n2 % 10;\n\t\t\tsum += abs(n1_digit - n2_digit);\n\t\t\tn1 /= 10;\n\t\t\tn2 /= 10;\n\t\t}\n\t}\n\t\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_digits = n1.digits;\n\tlong n2_digits = n2.digits;\n\t\n\tif (n1_digits > n2_digits) \n\t{\n\t\tlong diff = n1_digits - n2_digits;\n\t\tn2 = n2 * pow(10, diff);\n\t}\n\telse if (n2_digits > n1_digits) \n\t{\n\t\tlong diff = n2_digits - n1_digits;\n\t\tn1 = n1 * pow(10, diff);\n\t}\n\t\n\twhile (n1 > 0) \n\t{\n\t\tlong n1_digit = n1 % 10;\n\t\tlong n2_digit = n2 % 10;\n\t\tsum += abs(n1_digit - n2_digit);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\t\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\twhile(n1_copy > 0 || n2_copy > 0)\n\t{\n\t\tsum += abs(n1_copy % 10 - n2_copy % 10);\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\t\n\twhile (n1 > 0 || n2 > 0) \n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\t\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_digits = log10(n1) + 1;\n\tlong n2_digits = log10(n2) + 1;\n\tlong n1_digit = 0;\n\tlong n2_digit = 0;\n\t\n\tif (n1_digits > n2_digits)\n\t{\n\t\tfor (long i = 0; i < n1_digits; i++)\n\t\t{\n\t\t\tn1_digit = n1 % 10;\n\t\t\tn2_digit = n2 % 10;\n\t\t\tsum += abs(n1_digit - n2_digit);\n\t\t\tn1 /= 10;\n\t\t\tn2 /= 10;\n\t\t}\n\t}\n\telse\n\t{\n\t\tfor (long i = 0; i < n2_digits; i++)\n\t\t{\n\t\t\tn1_digit = n1 % 10;\n\t\t\tn2_digit = n2 % 10;\n\t\t\tsum += abs(n1_digit - n2_digit);\n\t\t\tn1 /= 10;\n\t\t\tn2 /= 10;\n\t\t}\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tint n1_size = n1.stringof.length;\n\tint n2_size = n2.stringof.length;\n\tint max_size = max(n1_size, n2_size);\n\t\n\tforeach(i; 0..max_size)\n\t{\n\t\tif(i < n1_size && i < n2_size)\n\t\t{\n\t\t\tint n1_digit = n1.stringof[i] - '0';\n\t\t\tint n2_digit = n2.stringof[i] - '0';\n\t\t\tsum += abs(n1_digit - n2_digit);\n\t\t}\n\t\telse if(i < n1_size)\n\t\t{\n\t\t\tint n1_digit = n1.stringof[i] - '0';\n\t\t\tsum += n1_digit;\n\t\t}\n\t\telse if(i < n2_size)\n\t\t{\n\t\t\tint n2_digit = n2.stringof[i] - '0';\n\t\t\tsum += n2_digit;\n\t\t}\n\t}\n\t\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\twhile (n1_copy > 0 || n2_copy > 0)\n\t{\n\t\tlong n1_digit = n1_copy % 10;\n\t\tlong n2_digit = n2_copy % 10;\n\t\tsum += abs(n1_digit - n2_digit);\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_digits = n1.digits();\n\tlong n2_digits = n2.digits();\n\tlong max_digits = max(n1_digits, n2_digits);\n\t\n\tforeach(i; 0 .. max_digits)\n\t{\n\t\tlong n1_digit = n1_digits > i ? n1.digits[i] : 0;\n\t\tlong n2_digit = n2_digits > i ? n2.digits[i] : 0;\n\t\tsum += abs(n1_digit - n2_digit);\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_digits = n1.digits;\n\tlong n2_digits = n2.digits;\n\tlong n1_len = n1_digits.length;\n\tlong n2_len = n2_digits.length;\n\tlong n1_digit;\n\tlong n2_digit;\n\tlong diff;\n\t\n\tforeach(i; 0 .. max(n1_len, n2_len))\n\t{\n\t\tn1_digit = n1_digits[i];\n\t\tn2_digit = n2_digits[i];\n\t\tdiff = abs(n1_digit - n2_digit);\n\t\tsum += diff;\n\t}\n\t\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\t\n\t//convert to strings\n\tstring n1_str = to!string(n1);\n\tstring n2_str = to!string(n2);\n\t\n\t//make sure they are the same length\n\tif(n1_str.length > n2_str.length)\n\t{\n\t\tn2_str = n2_str.padLeft(n1_str.length, '0');\n\t}\n\telse if(n2_str.length > n1_str.length)\n\t{\n\t\tn1_str = n1_str.padLeft(n2_str.length, '0');\n\t}\n\t\n\t//loop through and get the difference\n\tforeach(i, c; n1_str)\n\t{\n\t\tsum += abs(c - n2_str[i]);\n\t}\n\t\n\treturn sum;\n}",
    "{\n\tlong result = 0;\n\tlong n1_digits = log10(n1) + 1;\n\tlong n2_digits = log10(n2) + 1;\n\tlong n1_digits_copy = n1_digits;\n\tlong n2_digits_copy = n2_digits;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\tlong n1_digit;\n\tlong n2_digit;\n\twhile(n1_digits_copy > 0)\n\t{\n\t\tn1_digit = n1_copy % 10;\n\t\tn1_copy /= 10;\n\t\tn1_digits_copy--;\n\t\tif(n2_digits_copy > 0)\n\t\t{\n\t\t\tn2_digit = n2_copy % 10;\n\t\t\tn2_copy /= 10;\n\t\t\tn2_digits_copy--;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tn2_digit = 0;\n\t\t}\n\t\tresult += abs(n1_digit - n2_digit);\n\t}\n\twhile(n2_digits_copy > 0)\n\t{\n\t\tn2_digit = n2_copy % 10;\n\t\tn2_copy /= 10;\n\t\tn2_digits_copy--;\n\t\tresult += abs(n2_digit);\n\t}\n\treturn result;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\t\n\twhile (n1_copy != 0)\n\t{\n\t\tsum += abs(n1_copy % 10 - n2_copy % 10);\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\t\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\t\n\twhile (n1_copy > 0)\n\t{\n\t\tsum += abs(n1_copy % 10 - n2_copy % 10);\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\t\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_digits = n1.digits();\n\tlong n2_digits = n2.digits();\n\tlong n1_digits_len = n1_digits.length;\n\tlong n2_digits_len = n2_digits.length;\n\tlong n1_digits_len_max = max(n1_digits_len, n2_digits_len);\n\t\n\tfor (long i = 0; i < n1_digits_len_max; i++)\n\t{\n\t\tlong n1_digit = 0;\n\t\tlong n2_digit = 0;\n\t\t\n\t\tif (i < n1_digits_len)\n\t\t{\n\t\t\tn1_digit = n1_digits[i];\n\t\t}\n\t\t\n\t\tif (i < n2_digits_len)\n\t\t{\n\t\t\tn2_digit = n2_digits[i];\n\t\t}\n\t\t\n\t\tsum += abs(n1_digit - n2_digit);\n\t}\n\t\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_digits = n1.digits();\n\tlong n2_digits = n2.digits();\n\tlong max_digits = max(n1_digits, n2_digits);\n\t\n\tfor(long i = 0; i < max_digits; i++)\n\t{\n\t\tlong n1_digit = n1.getDigit(i);\n\t\tlong n2_digit = n2.getDigit(i);\n\t\t\n\t\tsum += abs(n1_digit - n2_digit);\n\t}\n\t\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tforeach(digit1; n1.digits)\n\t{\n\t\tforeach(digit2; n2.digits)\n\t\t{\n\t\t\tsum += abs(digit1 - digit2);\n\t\t}\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\twhile (n1_copy > 0 || n2_copy > 0) \n\t{\n\t\tsum += abs(n1_copy % 10 - n2_copy % 10);\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\twhile(n1_copy != 0 || n2_copy != 0)\n\t{\n\t\tsum += abs(n1_copy % 10 - n2_copy % 10);\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\twhile(n1 > 0 || n2 > 0) \n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\twhile (n1 > 0 || n2 > 0)\n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tforeach(i; 0 .. max(n1.length, n2.length))\n\t{\n\t\tsum += abs(n1[i] - n2[i]);\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\t\n\twhile(n1 > 0 || n2 > 0)\n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\t\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_digits = log10(n1) + 1;\n\tlong n2_digits = log10(n2) + 1;\n\t\n\tif (n1_digits > n2_digits)\n\t{\n\t\tlong diff = n1_digits - n2_digits;\n\t\tn2 *= pow(10, diff);\n\t}\n\telse if (n2_digits > n1_digits)\n\t{\n\t\tlong diff = n2_digits - n1_digits;\n\t\tn1 *= pow(10, diff);\n\t}\n\t\n\twhile (n1 > 0)\n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\t\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_digits = log10(n1);\n\tlong n2_digits = log10(n2);\n\tlong n1_temp = n1;\n\tlong n2_temp = n2;\n\t\n\twhile (n1_digits >= 0 || n2_digits >= 0)\n\t{\n\t\tlong n1_digit = n1_temp / pow(10, n1_digits);\n\t\tlong n2_digit = n2_temp / pow(10, n2_digits);\n\t\t\n\t\tsum += abs(n1_digit - n2_digit);\n\t\t\n\t\tn1_temp -= n1_digit * pow(10, n1_digits);\n\t\tn2_temp -= n2_digit * pow(10, n2_digits);\n\t\t\n\t\tn1_digits--;\n\t\tn2_digits--;\n\t}\n\t\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_digits = n1.digits;\n\tlong n2_digits = n2.digits;\n\t\n\tif (n1_digits > n2_digits)\n\t{\n\t\tlong diff = n1_digits - n2_digits;\n\t\tn2 *= 10.pow(diff);\n\t}\n\telse if (n2_digits > n1_digits)\n\t{\n\t\tlong diff = n2_digits - n1_digits;\n\t\tn1 *= 10.pow(diff);\n\t}\n\t\n\twhile (n1 > 0)\n\t{\n\t\tlong n1_digit = n1 % 10;\n\t\tlong n2_digit = n2 % 10;\n\t\t\n\t\tsum += abs(n1_digit - n2_digit);\n\t\t\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\t\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_digits = 0;\n\tlong n2_digits = 0;\n\tlong n1_digit = 0;\n\tlong n2_digit = 0;\n\t\n\tn1_digits = log10(n1) + 1;\n\tn2_digits = log10(n2) + 1;\n\t\n\tif (n1_digits > n2_digits)\n\t{\n\t\tfor (int i = 0; i < n1_digits; i++)\n\t\t{\n\t\t\tn1_digit = n1 % 10;\n\t\t\tn2_digit = n2 % 10;\n\t\t\tsum += abs(n1_digit - n2_digit);\n\t\t\tn1 /= 10;\n\t\t\tn2 /= 10;\n\t\t}\n\t}\n\telse\n\t{\n\t\tfor (int i = 0; i < n2_digits; i++)\n\t\t{\n\t\t\tn1_digit = n1 % 10;\n\t\t\tn2_digit = n2 % 10;\n\t\t\tsum += abs(n1_digit - n2_digit);\n\t\t\tn1 /= 10;\n\t\t\tn2 /= 10;\n\t\t}\n\t}\n\t\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\t\n\twhile (n1_copy != 0 || n2_copy != 0) \n\t{\n\t\tlong n1_digit = n1_copy % 10;\n\t\tlong n2_digit = n2_copy % 10;\n\t\t\n\t\tsum += abs(n1_digit - n2_digit);\n\t\t\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\t\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_digits = log10(n1) + 1;\n\tlong n2_digits = log10(n2) + 1;\n\t\n\tif (n1_digits > n2_digits)\n\t{\n\t\tlong diff = n1_digits - n2_digits;\n\t\tn2 *= pow(10, diff);\n\t}\n\telse if (n2_digits > n1_digits)\n\t{\n\t\tlong diff = n2_digits - n1_digits;\n\t\tn1 *= pow(10, diff);\n\t}\n\t\n\twhile (n1 > 0)\n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn sum;\n}"
  ]
}