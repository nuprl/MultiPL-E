{
  "name": "mbpp_558_digit_distance_nums",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n\t\n*/\nlong digit_distance_nums(long n1, long n2) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_558_digit_distance_nums.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\twhile (n1_copy > 0)\n\t{\n\t\tsum += abs(n1_copy % 10 - n2_copy % 10);\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong diff = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\tlong n1_digit = 0;\n\tlong n2_digit = 0;\n\t\n\twhile (n1_copy > 0) \n\t{\n\t\tn1_digit = n1_copy % 10;\n\t\tn2_digit = n2_copy % 10;\n\t\tdiff = abs(n1_digit - n2_digit);\n\t\tsum += diff;\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\tlong n1_digit = 0;\n\tlong n2_digit = 0;\n\tlong n1_digit_count = 0;\n\tlong n2_digit_count = 0;\n\tlong n1_digit_count_copy = 0;\n\tlong n2_digit_count_copy = 0;\n\t\n\twhile (n1_copy > 0) \n\t{\n\t\tn1_copy /= 10;\n\t\tn1_digit_count++;\n\t}\n\t\n\twhile (n2_copy > 0) \n\t{\n\t\tn2_copy /= 10;\n\t\tn2_digit_count++;\n\t}\n\t\n\tn1_digit_count_copy = n1_digit_count;\n\tn2_digit_count_copy = n2_digit_count;\n\t\n\twhile (n1_digit_count > 0) \n\t{\n\t\tn1_digit = n1 % 10;\n\t\tn1 /= 10;\n\t\tn1_digit_count--;\n\t\t\n\t\tn2_digit = n2 % 10;\n\t\tn2 /= 10;\n\t\tn2_digit_count--;\n\t\t\n\t\tsum += abs(n1_digit - n2_digit);\n\t}\n\t\n\twhile (n2_digit_count_copy > n1_digit_count_copy) \n\t{\n\t\tn2_digit = n2 % 10;\n\t\tn2 /= 10;\n\t\tn2_digit_count_copy--;\n\t\t\n\t\tsum += n2_digit;\n\t}\n\t\n\twhile (n1_digit_count_copy > n2_digit_count_copy) \n\t{\n\t\tn1_digit = n1 % 10;\n\t\tn1 /= 10;\n\t\tn1_digit_count_copy--;\n\t\t\n\t\tsum += n1_digit;\n\t}\n\t\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_digits = n1.digits();\n\tlong n2_digits = n2.digits();\n\tlong n1_digit, n2_digit;\n\t\n\tforeach(i; 0..max(n1_digits, n2_digits))\n\t{\n\t\tn1_digit = n1_digits > i ? n1.digits(i) : 0;\n\t\tn2_digit = n2_digits > i ? n2.digits(i) : 0;\n\t\tsum += abs(n1_digit - n2_digit);\n\t}\n\t\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_digits = 0;\n\tlong n2_digits = 0;\n\tlong n1_digit = 0;\n\tlong n2_digit = 0;\n\t\n\tn1_digits = n1.to!string.length;\n\tn2_digits = n2.to!string.length;\n\t\n\tif (n1_digits > n2_digits) \n\t{\n\t\tfor (long i = 0; i < n1_digits; i++) \n\t\t{\n\t\t\tn1_digit = n1.to!string[i].to!long;\n\t\t\tif (i < n2_digits) \n\t\t\t{\n\t\t\t\tn2_digit = n2.to!string[i].to!long;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tn2_digit = 0;\n\t\t\t}\n\t\t\tsum += abs(n1_digit - n2_digit);\n\t\t}\n\t}\n\telse \n\t{\n\t\tfor (long i = 0; i < n2_digits; i++) \n\t\t{\n\t\t\tn2_digit = n2.to!string[i].to!long;\n\t\t\tif (i < n1_digits) \n\t\t\t{\n\t\t\t\tn1_digit = n1.to!string[i].to!long;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tn1_digit = 0;\n\t\t\t}\n\t\t\tsum += abs(n1_digit - n2_digit);\n\t\t}\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_digits = n1.digits();\n\tlong n2_digits = n2.digits();\n\tlong n1_digits_len = n1_digits.length;\n\tlong n2_digits_len = n2_digits.length;\n\t\n\tif(n1_digits_len > n2_digits_len)\n\t{\n\t\tlong diff = n1_digits_len - n2_digits_len;\n\t\tfor(long i = 0; i < diff; i++)\n\t\t{\n\t\t\tn2_digits.insert(0, 0);\n\t\t}\n\t}\n\telse if(n2_digits_len > n1_digits_len)\n\t{\n\t\tlong diff = n2_digits_len - n1_digits_len;\n\t\tfor(long i = 0; i < diff; i++)\n\t\t{\n\t\t\tn1_digits.insert(0, 0);\n\t\t}\n\t}\n\t\n\tfor(long i = 0; i < n1_digits.length; i++)\n\t{\n\t\tsum += abs(n1_digits[i] - n2_digits[i]);\n\t}\n\t\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_digits = n1.digits();\n\tlong n2_digits = n2.digits();\n\tlong n1_digit;\n\tlong n2_digit;\n\tlong n1_digit_index = 0;\n\tlong n2_digit_index = 0;\n\twhile (n1_digit_index < n1_digits && n2_digit_index < n2_digits) \n\t{\n\t\tn1_digit = n1.digits(n1_digit_index);\n\t\tn2_digit = n2.digits(n2_digit_index);\n\t\tsum += abs(n1_digit - n2_digit);\n\t\tn1_digit_index++;\n\t\tn2_digit_index++;\n\t}\n\twhile (n1_digit_index < n1_digits) \n\t{\n\t\tn1_digit = n1.digits(n1_digit_index);\n\t\tsum += abs(n1_digit);\n\t\tn1_digit_index++;\n\t}\n\twhile (n2_digit_index < n2_digits) \n\t{\n\t\tn2_digit = n2.digits(n2_digit_index);\n\t\tsum += abs(n2_digit);\n\t\tn2_digit_index++;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\tlong n1_digit = 0;\n\tlong n2_digit = 0;\n\t\n\twhile (n1_copy > 0)\n\t{\n\t\tn1_digit = n1_copy % 10;\n\t\tn2_digit = n2_copy % 10;\n\t\t\n\t\tsum += abs(n1_digit - n2_digit);\n\t\t\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\t\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\t\n\tforeach(d1; n1.digits)\n\t{\n\t\tforeach(d2; n2.digits)\n\t\t{\n\t\t\tsum += abs(d1 - d2);\n\t\t}\n\t}\n\t\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\twhile(n1_copy > 0 || n2_copy > 0)\n\t{\n\t\tsum += abs(n1_copy % 10 - n2_copy % 10);\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong diff = 0;\n\t\n\twhile(n1 > 0 || n2 > 0)\n\t{\n\t\tdiff = abs(n1 % 10 - n2 % 10);\n\t\tsum += diff;\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\t\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\twhile (n1_copy > 0 && n2_copy > 0) \n\t{\n\t\tsum += abs(n1_copy % 10 - n2_copy % 10);\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\twhile(n1_copy > 0)\n\t{\n\t\tsum += abs(n1_copy % 10 - n2_copy % 10);\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\t\n\twhile (n1_copy != 0 || n2_copy != 0)\n\t{\n\t\tsum += abs(n1_copy % 10 - n2_copy % 10);\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\t\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\twhile (n1_copy != 0 || n2_copy != 0) \n\t{\n\t\tsum += abs((n1_copy % 10) - (n2_copy % 10));\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\t\n\twhile(n1_copy != 0 || n2_copy != 0)\n\t{\n\t\tsum += abs(n1_copy % 10 - n2_copy % 10);\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\t\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\twhile(n1_copy > 0)\n\t{\n\t\tsum += abs(n1_copy % 10 - n2_copy % 10);\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_digits = 0;\n\tlong n2_digits = 0;\n\t\n\tif (n1 == n2)\n\t\treturn 0;\n\t\n\tif (n1 < n2)\n\t{\n\t\tlong temp = n1;\n\t\tn1 = n2;\n\t\tn2 = temp;\n\t}\n\t\n\twhile (n1 > 0)\n\t{\n\t\tn1_digits = n1 % 10;\n\t\tn2_digits = n2 % 10;\n\t\tsum += abs(n1_digits - n2_digits);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\t\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\twhile (n1 > 0 || n2 > 0) \n\t{\n\t\tsum += abs(n1 % 10 - n2 % 10);\n\t\tn1 /= 10;\n\t\tn2 /= 10;\n\t}\n\treturn sum;\n}",
    "{\n\tlong sum = 0;\n\tlong n1_copy = n1;\n\tlong n2_copy = n2;\n\twhile(n1_copy > 0 || n2_copy > 0)\n\t{\n\t\tlong n1_digit = n1_copy % 10;\n\t\tlong n2_digit = n2_copy % 10;\n\t\tsum += abs(n1_digit - n2_digit);\n\t\tn1_copy /= 10;\n\t\tn2_copy /= 10;\n\t}\n\treturn sum;\n}"
  ]
}