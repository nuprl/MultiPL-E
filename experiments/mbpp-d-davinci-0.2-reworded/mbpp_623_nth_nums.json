{
  "name": "mbpp_623_nth_nums",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to compute the n-th power of each number in an array.\n\t\n*/\nlong[] nth_nums(long[] nums, long n) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_623_nth_nums.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tlong[] result = new long[nums.length];\n\tforeach (i, num; nums) \n\t{\n\t\tresult[i] = pow(num, n);\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = pow(num, n);\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = pow(num, n);\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = pow(num, n);\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums) \n\t{\n\t\tresult[i] = pow(num, n);\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = pow(num, n);\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = pow(num, n);\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = pow(num, n);\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = pow(num, n);\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[nums.length];\n\tforeach(i, v; nums)\n\t{\n\t\tresult[i] = pow(v, n);\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = pow(num, n);\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = pow(num, n);\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = pow(num, n);\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = pow(num, n);\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = pow(num, n);\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = pow(num, n);\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = pow(num, n);\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = pow(num, n);\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result;\n\tforeach(num; nums)\n\t{\n\t\tresult ~= pow(num, n);\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums) \n\t{\n\t\tresult[i] = pow(num, n);\n\t}\n\treturn result;\n}"
  ]
}