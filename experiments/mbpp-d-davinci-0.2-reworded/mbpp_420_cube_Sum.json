{
  "name": "mbpp_420_cube_Sum",
  "language": "d",
  "prompt": "import std.math;\n/*\n\n\tWrite a dthon function to find the cube sum of first n even natural numbers.\n\t\n*/\nlong cube_Sum(long n) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_420_cube_Sum.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = cube_Sum;\n\n    assert(candidate(2L) == 72L);\n    assert(candidate(3L) == 288L);\n    assert(candidate(4L) == 800L);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{ \n    long sum = 0; \n    for (long i = 1; i <= n; i++) \n        sum += pow(i, 3); \n    return sum; \n} ",
    "{ \n    long sum = 0; \n    for (long i = 1; i <= n; i++) \n        sum += pow(i, 3); \n    return sum; \n} ",
    "{ \n    long sum = 0; \n    for (long i = 1; i <= n; i++) \n        sum += pow(2 * i - 1, 3); \n    return sum; \n} ",
    "{ \n    long sum = 0; \n    for (long i = 1; i <= n; i++) \n        sum += pow(2*i-1, 3); \n    return sum; \n} ",
    "{ \n    long sum = 0; \n    for (long i = 1; i <= n; i++) \n        sum += pow(i, 3); \n    return sum; \n} ",
    "{ \n    long sum = 0; \n    for (long i = 1; i <= n; i++) \n        sum = sum + (i * i * i); \n    return sum; \n} ",
    "{ \n    long sum = 0; \n    for (long i = 1; i <= n; i++) \n        sum += pow(i, 3); \n    return sum; \n} ",
    "{ \n    long sum = 0; \n    for (long i = 1; i <= n; i++) \n        sum += pow(i, 3); \n    return sum; \n} ",
    "{ \n    long sum = 0; \n    for (long i = 1; i <= n; i++) \n        sum += pow(2 * i - 1, 3); \n    return sum; \n} ",
    "{ \n    return (n * (n + 1) / 2) * (2 * n + 1) / 3; \n} ",
    "{ \n    long sum = 0; \n    for (long i = 1; i <= n; i++) \n        sum += pow(i, 3); \n    return sum; \n} ",
    "{ \n    long sum = 0; \n    for (long i = 1; i <= n; i++) \n        sum += pow(i, 3); \n    return sum; \n} ",
    "{ \n    return ((n * (n + 1) / 2) * (3 * n * n - n - 2)) / 3; \n} ",
    "{ \n    long sum = 0; \n    for (long i = 1; i <= n; i++) \n        sum += pow(i, 3); \n    return sum; \n} ",
    "{ \n    long sum = 0; \n    for (long i = 1; i <= n; i++) \n        sum += pow(i, 3); \n    return sum; \n} ",
    "{ \n    return ((n * (n + 1) / 2) * (3 * n * n - n - 2) / 3); \n} \n  \n// Driver code ",
    "{ \n    long sum = 0; \n    for (long i = 1; i <= n; i++) \n        sum += pow(i, 3); \n    return sum; \n} ",
    "{ \n    long sum = 0; \n    for (long i = 2; i <= n; i += 2) \n        sum += pow(i, 3); \n    return sum; \n} ",
    "{ \n    long sum = 0; \n  \n    for (long i = 1; i <= n; i++) \n        sum += pow(i, 3); \n  \n    return sum; \n} \n  \n// Driver code ",
    "{ \n    long sum = 0; \n    for (long i = 1; i <= n; i++) \n        sum = sum + (i * i * i); \n    return sum; \n} "
  ]
}