{
  "name": "mbpp_238_number_of_substrings",
  "language": "d",
  "prompt": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of non-empty substrings of a given string.\n\t\n*/\nlong number_of_substrings(string str) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_238_number_of_substrings.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = number_of_substrings;\n\n    assert(candidate(\"abc\") == 6L);\n    assert(candidate(\"abcd\") == 10L);\n    assert(candidate(\"abcde\") == 15L);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{ \n    long n = str.length; \n  \n    // substring are n(n+1)/2 \n    return n * (n + 1) / 2; \n} ",
    "{ \n    long n = str.length(); \n    return n * (n + 1) / 2; \n} ",
    "{ \n    long n = str.length(); \n    return n * (n + 1) / 2; \n} ",
    "{ \n    long n = str.length(); \n    return n * (n + 1) / 2; \n} ",
    "{ \n\tlong n = str.length(); \n\treturn n * (n + 1) / 2; \n} ",
    "{\n\tlong count = 0;\n\tfor (int i = 0; i < str.length(); i++)\n\t{\n\t\tfor (int j = i + 1; j <= str.length(); j++)\n\t\t{\n\t\t\tif (str.substr(i, j - i) != \"\")\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{ \n    long n = str.length(); \n    return n * (n + 1) / 2; \n} ",
    "{ \n    long n = str.length(); \n  \n    // substring are formed by its length \n    // from 1 to n. \n    long result = 0; \n    for (long i = 1; i <= n; i++) \n        result += i; \n  \n    return result; \n} ",
    "{ \n    long n = str.length(); \n    return n * (n + 1) / 2; \n} ",
    "{ \n    long n = str.length(); \n    return n * (n + 1) / 2; \n} ",
    "{ \n    long n = str.length(); \n    return n * (n + 1) / 2; \n} ",
    "{ \n    long n = str.length(); \n    return n * (n + 1) / 2; \n} ",
    "{ \n    long n = str.length(); \n  \n    // substring are n(n+1)/2 \n    return (n * (n + 1)) / 2; \n} \n  \n// Driver code ",
    "{ \n    long n = str.length(); \n  \n    // To store count of substrings with \n    // exactly i unique characters \n    long[] cnt = new long[n+1]; \n  \n    // Pick starting point \n    for (long i = 0; i < n; i++) \n    { \n        // Pick ending point \n        for (long j = i; j < n; j++) \n        { \n            // Increment count if this is a new \n            // character for this substring \n            long[] sub_count = new long[256]; \n            for (long k = i; k <= j; k++) \n                sub_count[str[k]]++; \n  \n            // If there are more than k unique characters \n            // in current substring, then increment count \n            long num_unique_char = 0; \n            for (long k = 0; k < 256; k++) \n                if (sub_count[k] > 0) \n                    num_unique_char++; \n  \n            if (num_unique_char == j - i + 1) \n                cnt[num_unique_char]++; \n        } \n    } \n  \n    // Summation of all unique characters \n    long sum = 0; \n    for (long i = 1; i <= n; i++) \n        sum += cnt[i] * i; \n  \n    return sum; \n} ",
    "{ \n    long n = str.length(); \n    return n * (n + 1) / 2; \n} ",
    "{ \n    long n = str.length; \n    return n * (n + 1) / 2; \n} ",
    "{ \n    long n = str.length(); \n  \n    // substring are n*(n+1)/2 \n    return n * (n + 1) / 2; \n} ",
    "{ \n    long n = str.length(); \n    return n * (n + 1) / 2; \n} ",
    "{ \n    long n = str.length(); \n  \n    // substring are n(n+1)/2 \n    return (n * (n + 1)) / 2; \n} \n  \n// Driver code ",
    "{ \n    long n = str.length(); \n  \n    // substring are n(n+1)/2 \n    return (n * (n + 1)) / 2; \n} ",
    "{ \n    long n = str.length(); \n    return n * (n + 1) / 2; \n} ",
    "{ \n    long n = str.length(); \n    return n * (n + 1) / 2; \n} ",
    "{ \n    int n = str.length(); \n    return n * (n + 1) / 2; \n} ",
    "{ \n    long n = str.length(); \n    return n * (n + 1) / 2; \n} ",
    "{ \n    long n = str.length(); \n  \n    // substring are n(n+1)/2 \n    return (n * (n + 1)) / 2; \n} ",
    "{ \n    long n = str.length(); \n  \n    // substring are n(n+1)/2 \n    return (n * (n + 1)) / 2; \n} ",
    "{ \n    long n = str.length(); \n    return n * (n + 1) / 2; \n} ",
    "{\n\tlong n = str.length;\n\treturn n * (n + 1) / 2;\n}",
    "{ \n    long n = str.length; \n    return n * (n + 1) / 2; \n} ",
    "{ \n    long n = str.length(); \n  \n    // substring are n(n+1)/2 \n    return (n * (n + 1)) / 2; \n} ",
    "{ \n    long n = str.length(); \n    return n * (n + 1) / 2; \n} ",
    "{ \n    long n = str.length(); \n    return n * (n + 1) / 2; \n} ",
    "{ \n    long n = str.length(); \n    return n * (n + 1) / 2; \n} ",
    "{ \n    long n = str.length(); \n  \n    // substring are n(n+1)/2 \n    return n * (n + 1) / 2; \n} ",
    "{ \n    long n = str.length(); \n  \n    // substring are n(n+1)/2 \n    return n * (n + 1) / 2; \n} ",
    "{\n\tlong count = 0;\n\tfor (int i = 0; i < str.length(); i++) \n\t{\n\t\tfor (int j = i + 1; j <= str.length(); j++) \n\t\t{\n\t\t\tif (str.substr(i, j - i) != \"\") \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{ \n    long n = str.length(); \n    return n * (n + 1) / 2; \n} ",
    "{ \n    long n = str.length(); \n    return n * (n + 1) / 2; \n} ",
    "{\n\tlong n = str.length;\n\treturn n * (n + 1) / 2;\n}",
    "{ \n    long n = str.length(); \n  \n    // substring are n(n+1)/2 \n    return (n * (n + 1)) / 2; \n} ",
    "{ \n    long n = str.length(); \n  \n    // substring are formed by its length \n    // from 1 to n. \n    long result = 0; \n    for (long i = 1; i <= n; i++) \n        result += i; \n  \n    return result; \n} ",
    "{ \n\tlong n = str.length; \n\treturn n * (n + 1) / 2; \n} ",
    "{ \n    long n = str.length(); \n  \n    return n * (n + 1) / 2; \n} ",
    "{ \n    long n = str.length(); \n  \n    // substring are n(n+1)/2 \n    return (n * (n + 1)) / 2; \n} ",
    "{ \n    long n = str.length(); \n  \n    // substring are n(n+1)/2 \n    return (n * (n + 1)) / 2; \n} ",
    "{ \n    long n = str.length(); \n    return n * (n + 1) / 2; \n} ",
    "{ \n    long n = str.length(); \n    return n * (n + 1) / 2; \n} ",
    "{ \n    long n = str.length(); \n  \n    // substring are n(n+1)/2 \n    return (n * (n + 1)) / 2; \n} ",
    "{ \n    long n = str.length(); \n  \n    // substring are n(n+1)/2 \n    return (n * (n + 1)) / 2; \n} ",
    "{ \n    long n = str.length(); \n  \n    // substring are n(n+1)/2 \n    return (n * (n + 1)) / 2; \n} ",
    "{ \n    long n = str.length(); \n  \n    // substring are n(n+1)/2 \n    return (n * (n + 1)) / 2; \n} ",
    "{ \n    long n = str.length(); \n    return n * (n + 1) / 2; \n} ",
    "{ \n    long n = str.length(); \n    return n * (n + 1) / 2; \n} ",
    "{ \n    int n = str.length(); \n    return n * (n + 1) / 2; \n} ",
    "{ \n    long n = str.length(); \n    return n * (n + 1) / 2; \n} ",
    "{ \n    long n = str.length(); \n  \n    // substring are n(n+1)/2 \n    return (n * (n + 1)) / 2; \n} ",
    "{ \n    long n = str.length(); \n    return n * (n + 1) / 2; \n} ",
    "{ \n    long n = str.length(); \n    return n * (n + 1) / 2; \n} ",
    "{ \n    long n = str.length(); \n    return n * (n + 1) / 2; \n} ",
    "{ \n    long n = str.length(); \n  \n    return n * (n + 1) / 2; \n} ",
    "{ \n    long n = str.length(); \n    return n * (n + 1) / 2; \n} ",
    "{ \n\tint n = str.length(); \n\treturn n * (n + 1) / 2; \n} ",
    "{ \n    long n = str.length(); \n    return n * (n + 1) / 2; \n} ",
    "{ \n    long n = str.length(); \n  \n    // substring are n(n+1)/2 \n    return (n * (n + 1)) / 2; \n} ",
    "{ \n    long n = str.length(); \n  \n    // substring are formed by its starting \n    // point i and its length j \n    long cnt = 0; \n    for (long i = 0; i < n; i++) \n        for (long j = 1; j <= n - i; j++) \n            cnt++; \n  \n    return cnt; \n} ",
    "{ \n    long n = str.length(); \n    return n * (n + 1) / 2; \n} ",
    "{ \n    long n = str.length(); \n  \n    // substring are formed by its length \n    // from 1 to n. \n    long result = 0; \n    for (long i = 1; i <= n; i++) \n        result += i; \n  \n    return result; \n} ",
    "{ \n    long n = str.length(); \n  \n    // substring are n(n+1)/2 \n    return (n * (n + 1)) / 2; \n} ",
    "{ \n    long n = str.length(); \n  \n    // substring are n(n+1)/2 \n    return n * (n + 1) / 2; \n} ",
    "{ \n    long n = str.length(); \n  \n    // substring are formed by its length \n    // starting from 1 and going upto n \n    long count = 0; \n    for (long i = 1; i <= n; i++) \n        count += i; \n  \n    return count; \n} \n  \n// Driver code ",
    "{ \n    long n = str.length(); \n  \n    // substring are n(n+1)/2 \n    return (n * (n + 1)) / 2; \n} ",
    "{ \n    long n = str.length(); \n    return n * (n + 1) / 2; \n} ",
    "{ \n    long n = str.length(); \n  \n    // substring are n(n+1)/2 \n    return (n * (n + 1)) / 2; \n} ",
    "{\n\tlong n = str.length;\n\treturn n * (n + 1) / 2;\n}",
    "{\n\treturn str.length * (str.length + 1) / 2;\n}",
    "{ \n    long n = str.length(); \n  \n    // substring are n(n+1)/2 \n    return (n * (n + 1)) / 2; \n} ",
    "{\n\tlong count = 0;\n\tfor (long i = 0; i < str.length(); i++)\n\t{\n\t\tfor (long j = i + 1; j <= str.length(); j++)\n\t\t{\n\t\t\tif (str.substr(i, j - i) != \"\")\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}",
    "{ \n    long n = str.length(); \n  \n    // substring are n(n+1)/2 \n    return (n * (n + 1)) / 2; \n} ",
    "{ \n    long n = str.length(); \n    return n * (n + 1) / 2; \n} ",
    "{ \n    long n = str.length(); \n  \n    // substring are n(n+1)/2 \n    return (n * (n + 1)) / 2; \n} ",
    "{ \n    long n = str.length(); \n    return n * (n + 1) / 2; \n} ",
    "{ \n    long n = str.length(); \n  \n    // substring are n(n+1)/2 \n    return (n * (n + 1)) / 2; \n} ",
    "{ \n    long n = str.length(); \n    return n * (n + 1) / 2; \n} ",
    "{ \n    long n = str.length(); \n  \n    // substring are n*(n+1)/2 \n    return n * (n + 1) / 2; \n} ",
    "{ \n    long n = str.length(); \n  \n    // substring are formed by its starting point \n    // with every possible length \n    return n * (n + 1) / 2; \n} \n  \n// Driver code ",
    "{ \n\tlong n = str.length; \n\treturn n * (n + 1) / 2; \n} ",
    "{ \n    long n = str.length(); \n    return n * (n + 1) / 2; \n} ",
    "{ \n    long n = str.length(); \n    return n * (n + 1) / 2; \n} ",
    "{ \n    long n = str.length(); \n  \n    // substring are n(n+1)/2 \n    return (n * (n + 1)) / 2; \n} ",
    "{\n\tlong count = 0;\n\tfor (int i = 0; i < str.length(); i++)\n\t{\n\t\tfor (int j = i + 1; j <= str.length(); j++)\n\t\t{\n\t\t\tif (str.substr(i, j).length() > 0)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{ \n    long n = str.length(); \n  \n    return n * (n + 1) / 2; \n} ",
    "{ \n    long n = str.length(); \n    return n * (n + 1) / 2; \n} ",
    "{ \n    long n = str.length(); \n  \n    // substring are n(n+1)/2 \n    return (n * (n + 1)) / 2; \n} ",
    "{ \n    long n = str.length(); \n    return n * (n + 1) / 2; \n} ",
    "{ \n    long n = str.length(); \n  \n    // substring are n(n+1)/2 \n    return (n * (n + 1)) / 2; \n} ",
    "{ \n    long n = str.length(); \n  \n    // substring are n(n+1)/2 \n    return (n * (n + 1)) / 2; \n} ",
    "{\n\tlong result = 0;\n\tlong n = str.length();\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tfor (long j = i + 1; j <= n; j++) \n\t\t{\n\t\t\tif (str[i..j]) \n\t\t\t{\n\t\t\t\tresult++;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{ \n    long n = str.length(); \n  \n    // substring are n(n+1)/2 \n    return (n * (n + 1)) / 2; \n} ",
    "{ \n    long n = str.length(); \n  \n    // To store count of substrings with \n    // exactly i unique characters \n    long[] cnt = new long[n + 1]; \n  \n    // Pick starting point \n    for (long i = 0; i < n; i++) { \n  \n        // Pick ending point \n        for (long j = i; j < n; j++) { \n  \n            // Increment count if this is a new \n            // character for this substring \n            long sub_len = j - i + 1; \n            if (str[j] == '1') \n                cnt[sub_len]++; \n        } \n    } \n  \n    // If current length is 'i' \n    for (long i = n - 1; i >= 1; i--) \n  \n        // Add current count to the previous \n        // count \n        cnt[i] = cnt[i] + cnt[i + 1]; \n  \n    // required count \n    return cnt[1]; \n} \n  \n// Driver code ",
    "{ \n    long n = str.length(); \n    return n * (n + 1) / 2; \n} ",
    "{ \n\tlong n = str.length(); \n\treturn n * (n + 1) / 2; \n} ",
    "{ \n    long n = str.length; \n  \n    // substring are formed by its length \n    // from 1 to n \n    long result = 0; \n    for (long i = 1; i <= n; i++) \n        result += i; \n  \n    return result; \n} ",
    "{ \n    long n = str.length(); \n    return n * (n + 1) / 2; \n} ",
    "{ \n    return str.length() * (str.length() + 1) / 2; \n} ",
    "{ \n    long n = str.length(); \n  \n    // substring are n(n+1)/2 \n    return n * (n + 1) / 2; \n} ",
    "{ \n    long n = str.length(); \n  \n    // substring are n(n+1)/2 \n    return (n * (n + 1)) / 2; \n} ",
    "{ \n    long n = str.length(); \n    return n * (n + 1) / 2; \n} ",
    "{ \n    long n = str.length(); \n    return n * (n + 1) / 2; \n} ",
    "{ \n    long n = str.length(); \n    return n * (n + 1) / 2; \n} ",
    "{ \n    int n = str.length(); \n    return n * (n + 1) / 2; \n} ",
    "{\n\tlong count = 0;\n\tfor (long i = 0; i < str.length(); i++) \n\t{\n\t\tfor (long j = i + 1; j <= str.length(); j++) \n\t\t{\n\t\t\tif (str.substr(i, j - i) != \"\") \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{ \n    long n = str.length(); \n  \n    return n * (n + 1) / 2; \n} ",
    "{ \n    long n = str.length(); \n    return n * (n + 1) / 2; \n} ",
    "{ \n    long n = str.length(); \n    return n * (n + 1) / 2; \n} ",
    "{ \n    long n = str.length(); \n  \n    // substring are n(n+1)/2 \n    return n * (n + 1) / 2; \n} ",
    "{\n\tlong count = 0;\n\tfor (int i = 0; i < str.length(); i++) \n\t{\n\t\tfor (int j = i + 1; j <= str.length(); j++) \n\t\t{\n\t\t\tif (str.substr(i, j).length() > 0) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{ \n    long n = str.length(); \n    return n * (n + 1) / 2; \n} ",
    "{ \n    long n = str.length(); \n  \n    // substring are n(n+1)/2 \n    return n * (n + 1) / 2; \n} ",
    "{ \n    long n = str.length(); \n  \n    // substring are n(n+1)/2 \n    return n * (n + 1) / 2; \n} ",
    "{ \n    long n = str.length(); \n  \n    // To store result \n    long result = 0; \n  \n    // Iterate through all characters of input string \n    for (long i = 0; i < n; i++) { \n  \n        // Iterate from i + 1 to end \n        for (long j = i + 1; j <= n; j++) { \n  \n            // Substring [i..j-1] \n            string sub = str[i..j]; \n  \n            // If current substring is not \n            // present in hash, increment count \n            if (sub.length > 0) \n                result++; \n        } \n    } \n  \n    return result; \n} ",
    "{ \n    long n = str.length(); \n  \n    // substring are n(n+1)/2 \n    return (n * (n + 1)) / 2; \n} ",
    "{ \n    long n = str.length(); \n  \n    // substring are n(n+1)/2 \n    return (n * (n + 1)) / 2; \n} ",
    "{ \n    long n = str.length(); \n    return n * (n + 1) / 2; \n} ",
    "{ \n    long n = str.length(); \n    return n * (n + 1) / 2; \n} ",
    "{ \n\tlong n = str.length(); \n\treturn n * (n + 1) / 2; \n} ",
    "{ \n    long n = str.length(); \n  \n    return n * (n + 1) / 2; \n} ",
    "{ \n    long n = str.length(); \n    return n * (n + 1) / 2; \n} ",
    "{ \n    long n = str.length(); \n    return n * (n + 1) / 2; \n} ",
    "{ \n    long count = 0; \n    for (long i = 0; i < str.length(); i++) { \n        for (long j = i + 1; j <= str.length(); j++) { \n            if (str.substr(i, j).length() > 0) \n                count++; \n        } \n    } \n    return count; \n} ",
    "{\n\tlong n = str.length();\n\treturn n * (n + 1) / 2;\n}",
    "{ \n    long n = str.length(); \n  \n    // substring are n(n+1)/2 \n    return (n * (n + 1)) / 2; \n} \n  \n// Driver code ",
    "{ \n    long n = str.length(); \n  \n    // substring are n(n+1)/2 \n    return (n * (n + 1)) / 2; \n} ",
    "{ \n    long n = str.length(); \n    return n * (n + 1) / 2; \n} ",
    "{ \n    long n = str.length(); \n  \n    // substring are n(n+1)/2 \n    return (n * (n + 1)) / 2; \n} ",
    "{ \n    long n = str.length(); \n  \n    // substring are n(n+1)/2 \n    return (n * (n + 1)) / 2; \n} ",
    "{\n\tlong count = 0;\n\tlong n = str.length();\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tfor (long j = i + 1; j <= n; j++) \n\t\t{\n\t\t\tif (str[i..j].length() > 0) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}",
    "{ \n    long n = str.length(); \n  \n    // substring are n(n+1)/2 \n    return (n * (n + 1)) / 2; \n} ",
    "{ \n\tlong n = str.length(); \n\treturn n * (n + 1) / 2; \n} ",
    "{ \n    long n = str.length(); \n  \n    // substring are n(n+1)/2 \n    return (n * (n + 1)) / 2; \n} ",
    "{ \n    long n = str.length(); \n  \n    // substring are n(n+1)/2 \n    return (n * (n + 1)) / 2; \n} ",
    "{ \n    long n = str.length(); \n  \n    // substring are n(n+1)/2 \n    return n * (n + 1) / 2; \n} ",
    "{ \n    long n = str.length(); \n  \n    // substring are n(n+1)/2 \n    return (n * (n + 1)) / 2; \n} ",
    "{ \n    long n = str.length(); \n    return n * (n + 1) / 2; \n} ",
    "{ \n    long n = str.length(); \n  \n    // substring are n(n+1)/2 \n    return (n * (n + 1)) / 2; \n} ",
    "{ \n    long n = str.length(); \n    return n * (n + 1) / 2; \n} ",
    "{ \n    long n = str.length(); \n    return n * (n + 1) / 2; \n} ",
    "{ \n    long n = str.length(); \n    return n * (n + 1) / 2; \n} ",
    "{ \n    long n = str.length(); \n    return n * (n + 1) / 2; \n} ",
    "{ \n    long n = str.length(); \n  \n    // substring are n(n+1)/2 \n    return (n * (n + 1)) / 2; \n} ",
    "{ \n    long n = str.length(); \n  \n    // substring are n(n+1)/2 \n    return (n * (n + 1)) / 2; \n} ",
    "{ \n    long n = str.length(); \n  \n    // substring are formed by its starting point \n    // with every possible length \n    return n * (n + 1) / 2; \n} ",
    "{ \n    long n = str.length(); \n    return n * (n + 1) / 2; \n} ",
    "{ \n    long n = str.length(); \n    return n * (n + 1) / 2; \n} ",
    "{\n\tlong n = str.length;\n\treturn n * (n + 1) / 2;\n}",
    "{ \n    long n = str.length(); \n  \n    return n * (n + 1) / 2; \n} ",
    "{ \n\tint n = str.length(); \n\treturn n * (n + 1) / 2; \n} ",
    "{ \n\tint n = str.length(); \n\treturn n * (n + 1) / 2; \n} ",
    "{ \n    long n = str.length; \n    return n * (n + 1) / 2; \n} ",
    "{\n\tlong n = str.length();\n\treturn n * (n + 1) / 2;\n}",
    "{ \n    long n = str.length(); \n  \n    // substring are n(n+1)/2 \n    return (n * (n + 1)) / 2; \n} ",
    "{ \n    long n = str.length(); \n    return n * (n + 1) / 2; \n} ",
    "{ \n    long n = str.length(); \n    return n * (n + 1) / 2; \n} ",
    "{ \n    long n = str.length(); \n  \n    return n * (n + 1) / 2; \n} ",
    "{ \n    long n = str.length(); \n    return n * (n + 1) / 2; \n} ",
    "{ \n\tlong n = str.length(); \n\treturn n * (n + 1) / 2; \n} ",
    "{ \n    long n = str.length(); \n    return n * (n + 1) / 2; \n} ",
    "{ \n\tint n = str.length(); \n\treturn n * (n + 1) / 2; \n} ",
    "{ \n    long n = str.length(); \n    return n * (n + 1) / 2; \n} ",
    "{ \n    long n = str.length(); \n    return n * (n + 1) / 2; \n} ",
    "{ \n    long n = str.length(); \n    return n * (n + 1) / 2; \n} ",
    "{ \n    long n = str.length(); \n    return n * (n + 1) / 2; \n} ",
    "{ \n    long n = str.length(); \n    return n * (n + 1) / 2; \n} ",
    "{ \n    long n = str.length(); \n  \n    // substring are formed by its length \n    // substring length vary from 1 to n \n    long result = 0; \n    for (long i = 1; i <= n; i++) \n        result += i; \n  \n    return result; \n} ",
    "{ \n    long n = str.length(); \n    return n * (n + 1) / 2; \n} ",
    "{ \n    long n = str.length(); \n  \n    // substring are n(n+1)/2 \n    return (n * (n + 1)) / 2; \n} ",
    "{ \n    int n = str.length(); \n    return n * (n + 1) / 2; \n} ",
    "{ \n    long n = str.length(); \n    return n * (n + 1) / 2; \n} ",
    "{ \n    long n = str.length(); \n    return n * (n + 1) / 2; \n} ",
    "{ \n    long n = str.length(); \n  \n    return n * (n + 1) / 2; \n} ",
    "{ \n    long n = str.length(); \n    return n * (n + 1) / 2; \n} \n  \n// Driver code ",
    "{ \n    long n = str.length(); \n  \n    // substring are n(n+1)/2 \n    return n * (n + 1) / 2; \n} ",
    "{ \n    long n = str.length(); \n    return n * (n + 1) / 2; \n} ",
    "{ \n    long n = str.length(); \n  \n    // substring are n(n+1)/2 \n    return (n * (n + 1)) / 2; \n} ",
    "{ \n    long n = str.length(); \n  \n    // substring are n(n+1)/2 \n    return (n * (n + 1)) / 2; \n} ",
    "{ \n    long n = str.length(); \n    return n * (n + 1) / 2; \n} ",
    "{ \n    long n = str.length(); \n  \n    // substring are n(n+1)/2 \n    return (n * (n + 1)) / 2; \n} ",
    "{ \n    long n = str.length(); \n    return n * (n + 1) / 2; \n} ",
    "{ \n    long n = str.length(); \n  \n    // To store count of substrings with \n    // exactly i unique characters \n    long[] cnt = new long[n + 1]; \n  \n    // Pick starting point \n    for (long i = 0; i < n; i++) { \n  \n        // Pick ending point \n        for (long j = i; j < n; j++) { \n  \n            // Count of different characters in \n            // current substring \n            long sub_cnt = 0; \n  \n            // Hash array to store count of \n            // characters. Initially count of \n            // every character is 0. \n            long[] curr_cnt = new long[26]; \n  \n            // Traverse through every character \n            // of current substring \n            for (long k = i; k <= j; k++) { \n  \n                // If this is first occurrence, \n                // increment sub_cnt. \n                if (curr_cnt[str[k] - 'a'] == 0) \n                    sub_cnt++; \n  \n                // Increment count of current \n                // character \n                curr_cnt[str[k] - 'a']++; \n            } \n  \n            // Add number of substrings with \n            // sub_cnt unique characters \n            cnt[sub_cnt]++; \n        } \n    } \n  \n    // Initialize result \n    long result = 0; \n  \n    // Traverse through all possible values \n    // of sub_cnt \n    for (long i = 1; i <= n; i++) \n  \n        // If number of substrings with \n        // i unique characters is not 0 \n        if (cnt[i] != 0) \n  \n            // Add all possible combinations \n            // of substrings \n            result += (cnt[i] * (cnt[i] + 1) / 2); \n  \n    // Return result \n    return result; \n} ",
    "{ \n    long n = str.length(); \n  \n    return n * (n + 1) / 2; \n} ",
    "{\n\tlong n = str.length();\n\treturn n * (n + 1) / 2;\n}",
    "{ \n    long n = str.length(); \n    return n * (n + 1) / 2; \n} ",
    "{ \n    long n = str.length(); \n    return n * (n + 1) / 2; \n} ",
    "{ \n    long n = str.length(); \n    return n * (n + 1) / 2; \n} ",
    "{ \n\tlong n = str.length(); \n\treturn n * (n + 1) / 2; \n} ",
    "{ \n\tlong n = str.length; \n\treturn n * (n + 1) / 2; \n} ",
    "{ \n    long n = str.length(); \n  \n    // substring are n(n+1)/2 \n    return (n * (n + 1)) / 2; \n} ",
    "{ \n    long n = str.length(); \n    return n * (n + 1) / 2; \n} ",
    "{\n\tlong n = str.length();\n\treturn n * (n + 1) / 2;\n}",
    "{ \n\tlong n = str.length(); \n\treturn n * (n + 1) / 2; \n} ",
    "{\n\tlong count = 0;\n\tfor (int i = 0; i < str.length(); i++)\n\t{\n\t\tfor (int j = i + 1; j <= str.length(); j++)\n\t\t{\n\t\t\tif (str.substr(i, j) != \"\")\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}"
  ]
}