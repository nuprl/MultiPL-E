{
  "name": "mbpp_130_max_occurrences",
  "language": "d",
  "prompt": "import std.math;\n/*\n\n\tWrite a function to find the item with maximum frequency in a given array.\n\t\n*/\nlong max_occurrences(long[] nums) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_130_max_occurrences.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tlong max_count = 0;\n\tlong max_item = 0;\n\tlong[] counts = new long[nums.length];\n\tlong[] items = new long[nums.length];\n\tlong count = 0;\n\tlong item = 0;\n\tlong i = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tcount = 0;\n\t\titem = num;\n\t\t\n\t\tforeach(num2; nums)\n\t\t{\n\t\t\tif(num2 == item)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(count > max_count)\n\t\t{\n\t\t\tmax_count = count;\n\t\t\tmax_item = item;\n\t\t}\n\t}\n\t\n\treturn max_item;\n}",
    "{\n\tlong max_count = 0;\n\tlong max_item = 0;\n\tlong[] counts;\n\tlong[] items;\n\tlong count;\n\tlong item;\n\tlong i;\n\t\n\tcounts = new long[nums.length];\n\titems = new long[nums.length];\n\t\n\tfor (i = 0; i < nums.length; i++)\n\t{\n\t\titem = nums[i];\n\t\tcount = 0;\n\t\t\n\t\tfor (j = 0; j < nums.length; j++)\n\t\t{\n\t\t\tif (item == nums[j])\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (count > max_count)\n\t\t{\n\t\t\tmax_count = count;\n\t\t\tmax_item = item;\n\t\t}\n\t}\n\t\n\treturn max_item;\n}",
    "{\n\tlong max = 0;\n\tlong max_num = 0;\n\tlong[] count = new long[nums.length];\n\tfor (long i = 0; i < nums.length; i++)\n\t{\n\t\tfor (long j = 0; j < nums.length; j++)\n\t\t{\n\t\t\tif (nums[i] == nums[j])\n\t\t\t{\n\t\t\t\tcount[i]++;\n\t\t\t}\n\t\t}\n\t\tif (count[i] > max)\n\t\t{\n\t\t\tmax = count[i];\n\t\t\tmax_num = nums[i];\n\t\t}\n\t}\n\treturn max_num;\n}",
    "{\n\tlong max = 0;\n\tlong max_num = 0;\n\tforeach(num; nums)\n\t{\n\t\tlong count = 0;\n\t\tforeach(n; nums)\n\t\t{\n\t\t\tif(n == num)\n\t\t\t\tcount++;\n\t\t}\n\t\tif(count > max)\n\t\t{\n\t\t\tmax = count;\n\t\t\tmax_num = num;\n\t\t}\n\t}\n\treturn max_num;\n}",
    "{\n\tlong max = 0;\n\tlong max_count = 0;\n\tlong count = 0;\n\t\n\tforeach(n; nums)\n\t{\n\t\tif(n == max)\n\t\t{\n\t\t\tmax_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tcount = 0;\n\t\t\tforeach(m; nums)\n\t\t\t{\n\t\t\t\tif(n == m)\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(count > max_count)\n\t\t\t{\n\t\t\t\tmax_count = count;\n\t\t\t\tmax = n;\n\t\t\t}\n\t\t}\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tlong max_occurrences = 0;\n\tforeach(num; nums)\n\t{\n\t\tlong occurrences = 0;\n\t\tforeach(n; nums)\n\t\t{\n\t\t\tif(n == num)\n\t\t\t{\n\t\t\t\toccurrences++;\n\t\t\t}\n\t\t}\n\t\tif(occurrences > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = occurrences;\n\t\t\tmax = num;\n\t\t}\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tlong max_count = 0;\n\tlong[] counts = new long[nums.length];\n\t\n\tfor (long i = 0; i < nums.length; i++)\n\t{\n\t\tcounts[nums[i]]++;\n\t\tif (counts[nums[i]] > max_count)\n\t\t{\n\t\t\tmax_count = counts[nums[i]];\n\t\t\tmax = nums[i];\n\t\t}\n\t}\n\t\n\treturn max;\n}",
    "{\n\tlong max_occurrences = 0;\n\tlong max_occurrences_item = 0;\n\tlong[] occurrences = new long[nums.length];\n\t\n\tforeach(long num; nums)\n\t{\n\t\toccurrences[num]++;\n\t}\n\t\n\tforeach(long num; occurrences)\n\t{\n\t\tif(num > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = num;\n\t\t\tmax_occurrences_item = num;\n\t\t}\n\t}\n\t\n\treturn max_occurrences_item;\n}",
    "{\n\tlong max_occurrences = 0;\n\tlong max_item = 0;\n\tlong[] occurrences = new long[nums.length];\n\tfor (int i = 0; i < nums.length; i++)\n\t{\n\t\toccurrences[i] = 0;\n\t\tfor (int j = 0; j < nums.length; j++)\n\t\t{\n\t\t\tif (nums[i] == nums[j])\n\t\t\t{\n\t\t\t\toccurrences[i]++;\n\t\t\t}\n\t\t}\n\t\tif (occurrences[i] > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = occurrences[i];\n\t\t\tmax_item = nums[i];\n\t\t}\n\t}\n\treturn max_item;\n}",
    "{\n\tlong max_occurrences = 0;\n\tlong max_occurrences_num = 0;\n\tlong[] occurrences = new long[nums.length];\n\tforeach(num; nums)\n\t{\n\t\toccurrences[num]++;\n\t\tif(occurrences[num] > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = occurrences[num];\n\t\t\tmax_occurrences_num = num;\n\t\t}\n\t}\n\treturn max_occurrences_num;\n}",
    "{\n\tlong max_occurrences = 0;\n\tlong max_occurrences_value = 0;\n\tlong[] occurrences = new long[nums.length];\n\tforeach(i; 0 .. nums.length)\n\t{\n\t\tforeach(j; 0 .. nums.length)\n\t\t{\n\t\t\tif(nums[i] == nums[j])\n\t\t\t{\n\t\t\t\toccurrences[i]++;\n\t\t\t}\n\t\t}\n\t\tif(occurrences[i] > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = occurrences[i];\n\t\t\tmax_occurrences_value = nums[i];\n\t\t}\n\t}\n\treturn max_occurrences_value;\n}",
    "{\n\tlong max_occurrences = 0;\n\tlong max_occurrences_num = 0;\n\tlong[] occurrences = new long[nums.length];\n\t\n\tforeach(num; nums)\n\t{\n\t\toccurrences[num]++;\n\t\tif(occurrences[num] > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = occurrences[num];\n\t\t\tmax_occurrences_num = num;\n\t\t}\n\t}\n\t\n\treturn max_occurrences_num;\n}",
    "{\n\tlong[] counts = new long[nums.length];\n\tlong max = 0;\n\tlong max_index = 0;\n\t\n\tforeach(i, v; nums)\n\t{\n\t\tcounts[v]++;\n\t\tif(counts[v] > max)\n\t\t{\n\t\t\tmax = counts[v];\n\t\t\tmax_index = v;\n\t\t}\n\t}\n\t\n\treturn max_index;\n}",
    "{\n\tlong max_occurrences = 0;\n\tlong max_occurrences_item = 0;\n\tlong[] occurrences = new long[nums.length];\n\tforeach(long num; nums)\n\t{\n\t\toccurrences[num]++;\n\t\tif(occurrences[num] > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = occurrences[num];\n\t\t\tmax_occurrences_item = num;\n\t\t}\n\t}\n\treturn max_occurrences_item;\n}",
    "{\n\tlong max_count = 0;\n\tlong max_item = 0;\n\tforeach(num; nums)\n\t{\n\t\tlong count = 0;\n\t\tforeach(n; nums)\n\t\t{\n\t\t\tif(n == num)\n\t\t\t\tcount++;\n\t\t}\n\t\tif(count > max_count)\n\t\t{\n\t\t\tmax_count = count;\n\t\t\tmax_item = num;\n\t\t}\n\t}\n\treturn max_item;\n}",
    "{\n\tlong max_count = 0;\n\tlong max_num = 0;\n\tlong[] counts = new long[nums.length];\n\t\n\tforeach(num; nums)\n\t{\n\t\tcounts[num]++;\n\t\tif(counts[num] > max_count)\n\t\t{\n\t\t\tmax_count = counts[num];\n\t\t\tmax_num = num;\n\t\t}\n\t}\n\treturn max_num;\n}",
    "{\n\tlong max_count = 0;\n\tlong max_num = 0;\n\tforeach(num; nums)\n\t{\n\t\tlong count = 0;\n\t\tforeach(n; nums)\n\t\t{\n\t\t\tif(n == num)\n\t\t\t\tcount++;\n\t\t}\n\t\tif(count > max_count)\n\t\t{\n\t\t\tmax_count = count;\n\t\t\tmax_num = num;\n\t\t}\n\t}\n\treturn max_num;\n}",
    "{\n\tlong max_count = 0;\n\tlong max_item = 0;\n\tlong count = 0;\n\tforeach(num; nums)\n\t{\n\t\tcount = 0;\n\t\tforeach(num2; nums)\n\t\t{\n\t\t\tif(num == num2)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tif(count > max_count)\n\t\t{\n\t\t\tmax_count = count;\n\t\t\tmax_item = num;\n\t\t}\n\t}\n\treturn max_item;\n}",
    "{\n\tlong max_occurrences = 0;\n\tlong max_occurrences_num = 0;\n\tlong[] occurrences = new long[nums.length];\n\t\n\tfor (long i = 0; i < nums.length; i++)\n\t{\n\t\tfor (long j = 0; j < nums.length; j++)\n\t\t{\n\t\t\tif (nums[i] == nums[j])\n\t\t\t{\n\t\t\t\toccurrences[i]++;\n\t\t\t}\n\t\t}\n\t\tif (occurrences[i] > max_occurrences)\n\t\t{\n\t\t\tmax_occurrences = occurrences[i];\n\t\t\tmax_occurrences_num = nums[i];\n\t\t}\n\t}\n\treturn max_occurrences_num;\n}",
    "{\n\tlong max_count = 0;\n\tlong max_item = 0;\n\tlong[] counts = new long[nums.length];\n\tforeach(long num; nums)\n\t{\n\t\tcounts[num]++;\n\t\tif(counts[num] > max_count)\n\t\t{\n\t\t\tmax_count = counts[num];\n\t\t\tmax_item = num;\n\t\t}\n\t}\n\treturn max_item;\n}"
  ]
}