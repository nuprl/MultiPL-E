{
  "name": "mbpp_279_is_num_decagonal",
  "language": "d",
  "prompt": "import std.math;\n/*\n\n\tWrite a function to find the nth decagonal number.\n\t\n*/\nlong is_num_decagonal(long n) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_279_is_num_decagonal.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = is_num_decagonal;\n\n    assert(candidate(3L) == 27L);\n    assert(candidate(7L) == 175L);\n    assert(candidate(10L) == 370L);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tdouble x = (sqrt(1 + 4 * 2 * n) - 1) / 2;\n\treturn x == (long)x;\n}",
    "{\n\tlong x = sqrt(2*n);\n\treturn x*(x+1) == 2*n;\n}",
    "{\n\tdouble x = (sqrt(1 + 4 * 2 * n) - 1) / 2;\n\treturn (x == (long)x);\n}",
    "{\n\t// n = (3*n^2 - n)/2\n\t// n^2 - 3n + 2n = 0\n\t// n^2 - n = 0\n\t// n(n-1) = 0\n\t// n = 0 or n = 1\n\t// n = 0 is not a decagonal number\n\t// n = 1 is a decagonal number\n\t// so, n = 1 is the only solution\n\t// n = 1 is the only decagonal number\n\t// so, n = 1 is the only solution\n\t// n = 1 is the only decagonal number\n\t// so, n = 1 is the only solution\n\t// n = 1 is the only decagonal number\n\t// so, n = 1 is the only solution\n\t// n = 1 is the only decagonal number\n\t// so, n = 1 is the only solution\n\t// n = 1 is the only decagonal number\n\t// so, n = 1 is the only solution\n\t// n = 1 is the only decagonal number\n\t// so, n = 1 is the only solution\n\t// n = 1 is the only decagonal number\n\t// so, n = 1 is the only solution\n\t// n = 1 is the only decagonal number\n\t// so, n = 1 is the only solution\n\t// n = 1 is the only decagonal number\n\t// so, n = 1 is the only solution\n\t// n = 1 is the only decagonal number\n\t// so, n = 1 is the only solution\n\t// n = 1 is the only decagonal number\n\t// so, n = 1 is the only solution\n\t// n = 1 is the only decagonal number\n\t// so, n = 1 is the only solution\n\t// n = 1 is the only decagonal number\n\t// so, n = 1 is the only solution\n\t// n = 1 is the only decagonal number\n\t// so, n = 1 is the only solution\n\t// n = 1 is the only decagonal number\n\t// so, n = 1 is the only solution\n\t// n = 1 is the only decagonal number\n\t// so, n = 1 is the only solution\n\t// n = 1 is the only decagonal number\n\t// so, n = 1 is the only solution\n\t// n = 1 is",
    "{\n\tlong a = (sqrt(1 + 4 * 2 * n) - 1) / 2;\n\treturn a * (3 * a - 1) / 2 == n;\n}",
    "{\n\t// n = (3 * n * n - n) / 2\n\t// n = (3 * n^2 - n) / 2\n\t// 2 * n = 3 * n^2 - n\n\t// 2 * n + n = 3 * n^2\n\t// n^2 + 2 * n + 1 = 3 * n^2\n\t// n^2 - n^2 + 2 * n + 1 = 3 * n^2\n\t// 2 * n + 1 = 3 * n^2\n\t// 2 * n + 1 = 3 * n^2\n\t// 2 * n + 1 = 3 * n^2\n\t// 2 * n + 1 = 3 * n^2\n\t// 2 * n + 1 = 3 * n^2\n\t// 2 * n + 1 = 3 * n^2\n\t// 2 * n + 1 = 3 * n^2\n\t// 2 * n + 1 = 3 * n^2\n\t// 2 * n + 1 = 3 * n^2\n\t// 2 * n + 1 = 3 * n^2\n\t// 2 * n + 1 = 3 * n^2\n\t// 2 * n + 1 = 3 * n^2\n\t// 2 * n + 1 = 3 * n^2\n\t// 2 * n + 1 = 3 * n^2\n\t// 2 * n + 1 = 3 * n^2\n\t// 2 * n + 1 = 3 * n^2\n\t// 2 * n + 1 = 3 * n^2\n\t// 2 * n + 1 = 3 * n^2\n\t// 2 * n + 1 = 3 * n^2\n\t// 2 * n + 1 = 3 * n^2\n\t// 2 * n + 1 = 3 * n^2\n\t// 2 * n + 1 = 3 * n^2\n\t// 2 * n + 1 = 3 * n^2\n\t// 2 * n + 1 = 3 * n^2\n\t// 2 * n + 1 = 3 * n^2\n\t// 2 * n + 1 = 3 * n^2\n\t// 2 * n + 1 = 3 * n^2\n\t// 2 * n + 1 = 3 * n^2\n\t// 2 * n + 1 = 3 * n^2\n\t// 2",
    "{\n\tlong a = (sqrt(1 + 4 * 2 * n) - 1) / 2;\n\treturn a * (3 * a - 1) / 2 == n;\n}",
    "{\n\tlong a = (sqrt(1 + 4 * 2 * n) - 1) / 2;\n\treturn a * (3 * a - 1) / 2 == n;\n}",
    "{\n\tdouble x = (sqrt(1 + 4 * 2 * n) - 1) / 2;\n\treturn x == (long)x;\n}",
    "{\n\tlong num = n;\n\tlong x = (sqrt(1 + 4 * 2 * num) - 1) / 2;\n\treturn x * (3 * x - 1) / 2 == num;\n}",
    "{\n\tdouble x = (sqrt(1 + 4 * 2 * n) - 1) / 2;\n\treturn x == (long)x;\n}",
    "{\n\tlong a = (sqrt(1 + 4 * 2 * n) - 1) / 2;\n\treturn a * (3 * a - 1) / 2 == n;\n}",
    "{\n\treturn (sqrt(1 + 4 * 2 * n) - 1) % 4 == 0;\n}",
    "{\n\tlong a = (sqrt(1 + 4 * 2 * n) - 1) / 2;\n\treturn a * (3 * a - 1) / 2 == n;\n}",
    "{\n\tdouble x = (sqrt(1 + 4 * 2 * n) - 1) / 2;\n\treturn x == (long)x;\n}",
    "{\n\tlong x = sqrt(n*2);\n\treturn x*(x+1) == n*2;\n}",
    "{\n\tlong a = (sqrt(1 + 4 * 2 * n) - 1) / 2;\n\treturn a * (3 * a - 1) / 2 == n;\n}",
    "{\n    return (sqrt(1 + 4 * 2 * n) - 1) % 4 == 0;\n}",
    "{\n\tlong x = (sqrt(1 + 4 * 2 * n) - 1) / 2;\n\treturn x * (3 * x - 1) / 2 == n;\n}",
    "{\n\tlong nth_decagonal = 0;\n\tlong nth_decagonal_test = 0;\n\t\n\tnth_decagonal = (long) (n * (3 * n - 2)) / 2;\n\tnth_decagonal_test = (long) (sqrt(1 + 4 * 3 * 2 * nth_decagonal) + 1) / 6;\n\t\n\tif (nth_decagonal_test == n)\n\t{\n\t\treturn nth_decagonal;\n\t}\n\telse\n\t{\n\t\treturn 0;\n\t}\n}"
  ]
}