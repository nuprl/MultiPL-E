{
  "name": "mbpp_396_check_char",
  "language": "d",
  "prompt": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_396_check_char.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif(string[0] == string[string.length-1])\n\t{\n\t\treturn \"true\";\n\t}\n\telse\n\t{\n\t\treturn \"false\";\n\t}\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpt1835dth.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmpt1835dth.__unittest_L18_C1() [0x427b3e]\n??:? void tmpt1835dth.__modtest() [0x427c80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif (string[0] == string[string.length - 1])\n\t\treturn \"true\";\n\telse\n\t\treturn \"false\";\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpbev4sz51.d(18): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmpbev4sz51.__unittest_L14_C1() [0x427b3e]\n??:? void tmpbev4sz51.__modtest() [0x427c80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif (string[0] == string[string.length - 1])\n\t{\n\t\treturn \"True\";\n\t}\n\telse\n\t{\n\t\treturn \"False\";\n\t}\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpamew7bzf.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmpamew7bzf.__unittest_L18_C1() [0x427b3e]\n??:? void tmpamew7bzf.__modtest() [0x427c80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif(string[0] == string[string.length()-1])\n\t\treturn \"true\";\n\telse\n\t\treturn \"false\";\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1665517101,
      "stdout": "",
      "stderr": "/tmp/tmp3nhjp80r.d(9): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3nhjp80r.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif (string[0] == string[string.length()-1])\n\t\treturn \"true\";\n\telse\n\t\treturn \"false\";\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1665517101,
      "stdout": "",
      "stderr": "/tmp/tmpj1weoy9g.d(9): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj1weoy9g.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif (string[0] == string[string.length - 1])\n\t\treturn \"true\";\n\telse\n\t\treturn \"false\";\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpbev4sz51.d(18): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmpbev4sz51.__unittest_L14_C1() [0x427b3e]\n??:? void tmpbev4sz51.__modtest() [0x427c80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif (string[0] == string[string.length - 1])\n\t\treturn \"True\";\n\telse\n\t\treturn \"False\";\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjj138uen.d(18): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmpjj138uen.__unittest_L14_C1() [0x427b3e]\n??:? void tmpjj138uen.__modtest() [0x427c80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif(string[0] == string[string.length - 1])\n\t{\n\t\treturn \"True\";\n\t}\n\telse\n\t{\n\t\treturn \"False\";\n\t}\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpkc3eobkr.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmpkc3eobkr.__unittest_L18_C1() [0x427b3e]\n??:? void tmpkc3eobkr.__modtest() [0x427c80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif(string[0] == string[string.length-1])\n\t{\n\t\treturn \"true\";\n\t}\n\telse\n\t{\n\t\treturn \"false\";\n\t}\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpt1835dth.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmpt1835dth.__unittest_L18_C1() [0x427b3e]\n??:? void tmpt1835dth.__modtest() [0x427c80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif(string[0] == string[string.length()-1])\n\t\treturn \"true\";\n\telse\n\t\treturn \"false\";\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1665517101,
      "stdout": "",
      "stderr": "/tmp/tmp3nhjp80r.d(9): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3nhjp80r.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif(string[0] == string[string.length-1])\n\t{\n\t\treturn \"true\";\n\t}\n\telse\n\t{\n\t\treturn \"false\";\n\t}\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpt1835dth.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmpt1835dth.__unittest_L18_C1() [0x427b3e]\n??:? void tmpt1835dth.__modtest() [0x427c80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif(string[0] == string[string.length - 1])\n\t\treturn \"true\";\n\telse\n\t\treturn \"false\";\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp1zbginib.d(18): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmp1zbginib.__unittest_L14_C1() [0x427b3e]\n??:? void tmp1zbginib.__modtest() [0x427c80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif(string[0] == string[string.length-1])\n\t\treturn \"True\";\n\telse\n\t\treturn \"False\";\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp56b3hl29.d(18): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmp56b3hl29.__unittest_L14_C1() [0x427b3e]\n??:? void tmp56b3hl29.__modtest() [0x427c80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif (string[0] == string[string.length - 1])\n\t{\n\t\treturn \"true\";\n\t}\n\telse\n\t{\n\t\treturn \"false\";\n\t}\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqr7exbni.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmpqr7exbni.__unittest_L18_C1() [0x427b3e]\n??:? void tmpqr7exbni.__modtest() [0x427c80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif (string[0] == string[string.length - 1])\n\t\treturn \"true\";\n\treturn \"false\";\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp68qpkvry.d(17): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmp68qpkvry.__unittest_L13_C1() [0x427b3e]\n??:? void tmp68qpkvry.__modtest() [0x427c80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif (string[0] == string[string.length - 1])\n\t{\n\t\treturn \"true\";\n\t}\n\telse\n\t{\n\t\treturn \"false\";\n\t}\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqr7exbni.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmpqr7exbni.__unittest_L18_C1() [0x427b3e]\n??:? void tmpqr7exbni.__modtest() [0x427c80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif(string[0] == string[string.length() - 1])\n\t\treturn \"Yes\";\n\telse\n\t\treturn \"No\";\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1665517101,
      "stdout": "",
      "stderr": "/tmp/tmpdflfa2zv.d(9): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdflfa2zv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif (string[0] == string[string.length - 1])\n\t\treturn \"True\";\n\telse\n\t\treturn \"False\";\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjj138uen.d(18): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmpjj138uen.__unittest_L14_C1() [0x427b3e]\n??:? void tmpjj138uen.__modtest() [0x427c80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif(string[0] == string[string.length - 1])\n\t{\n\t\treturn \"True\";\n\t}\n\telse\n\t{\n\t\treturn \"False\";\n\t}\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpkc3eobkr.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmpkc3eobkr.__unittest_L18_C1() [0x427b3e]\n??:? void tmpkc3eobkr.__modtest() [0x427c80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif(string[0] == string[string.length - 1])\n\t{\n\t\treturn \"true\";\n\t}\n\telse\n\t{\n\t\treturn \"false\";\n\t}\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqh43d48c.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmpqh43d48c.__unittest_L18_C1() [0x427b3e]\n??:? void tmpqh43d48c.__modtest() [0x427c80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif(string[0] == string[string.length - 1])\n\t{\n\t\treturn \"True\";\n\t}\n\telse\n\t{\n\t\treturn \"False\";\n\t}\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpkc3eobkr.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmpkc3eobkr.__unittest_L18_C1() [0x427b3e]\n??:? void tmpkc3eobkr.__modtest() [0x427c80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif (string[0] == string[string.length - 1])\n\t{\n\t\treturn \"True\";\n\t}\n\telse\n\t{\n\t\treturn \"False\";\n\t}\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpamew7bzf.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmpamew7bzf.__unittest_L18_C1() [0x427b3e]\n??:? void tmpamew7bzf.__modtest() [0x427c80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif(string[0] == string[string.length - 1])\n\t{\n\t\treturn \"True\";\n\t}\n\telse\n\t{\n\t\treturn \"False\";\n\t}\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpkc3eobkr.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmpkc3eobkr.__unittest_L18_C1() [0x427b3e]\n??:? void tmpkc3eobkr.__modtest() [0x427c80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\treturn (string[0] == string[string.length - 1]) ? \"true\" : \"false\";\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1666124313,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpc_ug1cds.d(15): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmpc_ug1cds.__unittest_L11_C1() [0x427b3a]\n??:? void tmpc_ug1cds.__modtest() [0x427c7c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif (string[0] == string[string.length - 1])\n\t\treturn \"True\";\n\telse\n\t\treturn \"False\";\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjj138uen.d(18): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmpjj138uen.__unittest_L14_C1() [0x427b3e]\n??:? void tmpjj138uen.__modtest() [0x427c80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif (string[0] == string[string.length - 1])\n\t\treturn \"True\";\n\telse\n\t\treturn \"False\";\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjj138uen.d(18): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmpjj138uen.__unittest_L14_C1() [0x427b3e]\n??:? void tmpjj138uen.__modtest() [0x427c80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif (string[0] == string[string.length - 1])\n\t{\n\t\treturn \"true\";\n\t}\n\telse\n\t{\n\t\treturn \"false\";\n\t}\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqr7exbni.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmpqr7exbni.__unittest_L18_C1() [0x427b3e]\n??:? void tmpqr7exbni.__modtest() [0x427c80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif(string[0] == string[string.length-1])\n\t\treturn \"True\";\n\telse\n\t\treturn \"False\";\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp56b3hl29.d(18): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmp56b3hl29.__unittest_L14_C1() [0x427b3e]\n??:? void tmp56b3hl29.__modtest() [0x427c80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif(string[0] == string[string.length-1])\n\t{\n\t\treturn \"true\";\n\t}\n\telse\n\t{\n\t\treturn \"false\";\n\t}\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpt1835dth.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmpt1835dth.__unittest_L18_C1() [0x427b3e]\n??:? void tmpt1835dth.__modtest() [0x427c80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif(string[0] == string[string.length()-1])\n\t{\n\t\treturn \"True\";\n\t}\n\telse\n\t{\n\t\treturn \"False\";\n\t}\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1666124313,
      "stdout": "",
      "stderr": "/tmp/tmp4_aujinf.d(9): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4_aujinf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif (string[0] == string[string.length - 1])\n\t{\n\t\treturn \"true\";\n\t}\n\telse\n\t{\n\t\treturn \"false\";\n\t}\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqr7exbni.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmpqr7exbni.__unittest_L18_C1() [0x427b3e]\n??:? void tmpqr7exbni.__modtest() [0x427c80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif(string[0] == string[string.length - 1])\n\t{\n\t\treturn \"true\";\n\t}\n\telse\n\t{\n\t\treturn \"false\";\n\t}\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqh43d48c.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmpqh43d48c.__unittest_L18_C1() [0x427b3e]\n??:? void tmpqh43d48c.__modtest() [0x427c80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif(string[0] == string[string.length-1])\n\t{\n\t\treturn \"true\";\n\t}\n\telse\n\t{\n\t\treturn \"false\";\n\t}\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpt1835dth.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmpt1835dth.__unittest_L18_C1() [0x427b3e]\n??:? void tmpt1835dth.__modtest() [0x427c80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif(string[0] == string[string.length - 1])\n\t{\n\t\treturn \"True\";\n\t}\n\telse\n\t{\n\t\treturn \"False\";\n\t}\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpkc3eobkr.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmpkc3eobkr.__unittest_L18_C1() [0x427b3e]\n??:? void tmpkc3eobkr.__modtest() [0x427c80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif (string[0] == string[string.length - 1])\n\t{\n\t\treturn \"True\";\n\t}\n\telse\n\t{\n\t\treturn \"False\";\n\t}\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpamew7bzf.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmpamew7bzf.__unittest_L18_C1() [0x427b3e]\n??:? void tmpamew7bzf.__modtest() [0x427c80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif (string[0] == string[string.length - 1])\n\t\treturn \"True\";\n\telse\n\t\treturn \"False\";\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjj138uen.d(18): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmpjj138uen.__unittest_L14_C1() [0x427b3e]\n??:? void tmpjj138uen.__modtest() [0x427c80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif (string[0] == string[string.length - 1]) \n\t{\n\t\treturn \"true\";\n\t}\n\telse \n\t{\n\t\treturn \"false\";\n\t}\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1666124313,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpneq5v813.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmpneq5v813.__unittest_L18_C1() [0x427b3e]\n??:? void tmpneq5v813.__modtest() [0x427c80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif (string[0] == string[string.length - 1])\n\t{\n\t\treturn \"true\";\n\t}\n\telse\n\t{\n\t\treturn \"false\";\n\t}\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqr7exbni.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmpqr7exbni.__unittest_L18_C1() [0x427b3e]\n??:? void tmpqr7exbni.__modtest() [0x427c80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif (string[0] == string[string.length - 1])\n\t\treturn \"true\";\n\telse\n\t\treturn \"false\";\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpbev4sz51.d(18): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmpbev4sz51.__unittest_L14_C1() [0x427b3e]\n??:? void tmpbev4sz51.__modtest() [0x427c80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif(string[0] == string[string.length() - 1])\n\t{\n\t\treturn \"true\";\n\t}\n\telse\n\t{\n\t\treturn \"false\";\n\t}\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1666124313,
      "stdout": "",
      "stderr": "/tmp/tmpr8fgeqtp.d(9): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr8fgeqtp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\treturn string[0] == string[string.length - 1] ? \"True\" : \"False\";\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1666124313,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpgrduic42.d(15): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmpgrduic42.__unittest_L11_C1() [0x427b3a]\n??:? void tmpgrduic42.__modtest() [0x427c7c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif(string[0] == string[string.length-1])\n\t\treturn \"true\";\n\telse\n\t\treturn \"false\";\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1666124313,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3i77q5er.d(18): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmp3i77q5er.__unittest_L14_C1() [0x427b3e]\n??:? void tmp3i77q5er.__modtest() [0x427c80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif(string[0] == string[string.length()-1])\n\t{\n\t\treturn \"true\";\n\t}\n\telse\n\t{\n\t\treturn \"false\";\n\t}\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1666124313,
      "stdout": "",
      "stderr": "/tmp/tmpoips4a49.d(9): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoips4a49.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif(string[0] == string[string.length - 1])\n\t{\n\t\treturn \"True\";\n\t}\n\telse\n\t{\n\t\treturn \"False\";\n\t}\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpkc3eobkr.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmpkc3eobkr.__unittest_L18_C1() [0x427b3e]\n??:? void tmpkc3eobkr.__modtest() [0x427c80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif (string[0] == string[string.length - 1])\n\t\treturn \"True\";\n\telse\n\t\treturn \"False\";\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjj138uen.d(18): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmpjj138uen.__unittest_L14_C1() [0x427b3e]\n??:? void tmpjj138uen.__modtest() [0x427c80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif(string[0] == string[string.length - 1])\n\t\treturn \"True\";\n\telse\n\t\treturn \"False\";\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1666124313,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpd_2l78tg.d(18): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmpd_2l78tg.__unittest_L14_C1() [0x427b3e]\n??:? void tmpd_2l78tg.__modtest() [0x427c80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif(string[0] == string[string.length - 1])\n\t{\n\t\treturn \"true\";\n\t}\n\telse\n\t{\n\t\treturn \"false\";\n\t}\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqh43d48c.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmpqh43d48c.__unittest_L18_C1() [0x427b3e]\n??:? void tmpqh43d48c.__modtest() [0x427c80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif(string.front == string.back)\n\t{\n\t\treturn \"Yes\";\n\t}\n\telse\n\t{\n\t\treturn \"No\";\n\t}\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1666124313,
      "stdout": "",
      "stderr": "/tmp/tmpvbnfkvkq.d(9): Error: no property `front` for type `string`\n/tmp/tmpvbnfkvkq.d(9): Error: no property `back` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvbnfkvkq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif(string[0] == string[string.length - 1])\n\t{\n\t\treturn \"true\";\n\t}\n\telse\n\t{\n\t\treturn \"false\";\n\t}\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqh43d48c.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmpqh43d48c.__unittest_L18_C1() [0x427b3e]\n??:? void tmpqh43d48c.__modtest() [0x427c80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif(string[0] == string[string.length - 1])\n\t{\n\t\treturn \"true\";\n\t}\n\telse\n\t{\n\t\treturn \"false\";\n\t}\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqh43d48c.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmpqh43d48c.__unittest_L18_C1() [0x427b3e]\n??:? void tmpqh43d48c.__modtest() [0x427c80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif(string.front == string.back)\n\t{\n\t\treturn \"True\";\n\t}\n\telse\n\t{\n\t\treturn \"False\";\n\t}\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1666124313,
      "stdout": "",
      "stderr": "/tmp/tmpi1vj01yo.d(9): Error: no property `front` for type `string`\n/tmp/tmpi1vj01yo.d(9): Error: no property `back` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi1vj01yo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\treturn string[0] == string[string.length - 1] ? \"true\" : \"false\";\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1666124313,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjb2jykkv.d(15): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmpjb2jykkv.__unittest_L11_C1() [0x427b3a]\n??:? void tmpjb2jykkv.__modtest() [0x427c7c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif(string[0] == string[string.length()-1])\n\t{\n\t\treturn \"true\";\n\t}\n\telse\n\t{\n\t\treturn \"false\";\n\t}\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1666124313,
      "stdout": "",
      "stderr": "/tmp/tmpoips4a49.d(9): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoips4a49.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif (string[0] == string[string.length() - 1])\n\t{\n\t\treturn \"True\";\n\t}\n\telse\n\t{\n\t\treturn \"False\";\n\t}\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1666124313,
      "stdout": "",
      "stderr": "/tmp/tmpsl8pci4h.d(9): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsl8pci4h.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif(string[0] == string[string.length-1])\n\t{\n\t\treturn \"true\";\n\t}\n\telse\n\t{\n\t\treturn \"false\";\n\t}\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpt1835dth.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmpt1835dth.__unittest_L18_C1() [0x427b3e]\n??:? void tmpt1835dth.__modtest() [0x427c80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif(string[0] == string[string.length - 1])\n\t{\n\t\treturn \"Yes\";\n\t}\n\telse\n\t{\n\t\treturn \"No\";\n\t}\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1666124313,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpmc4590uj.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmpmc4590uj.__unittest_L18_C1() [0x427b3e]\n??:? void tmpmc4590uj.__modtest() [0x427c80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif(string[0] == string[string.length-1])\n\t{\n\t\treturn \"true\";\n\t}\n\telse\n\t{\n\t\treturn \"false\";\n\t}\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpt1835dth.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmpt1835dth.__unittest_L18_C1() [0x427b3e]\n??:? void tmpt1835dth.__modtest() [0x427c80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif (string[0] == string[string.length - 1])\n\t{\n\t\treturn \"True\";\n\t}\n\telse\n\t{\n\t\treturn \"False\";\n\t}\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpamew7bzf.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmpamew7bzf.__unittest_L18_C1() [0x427b3e]\n??:? void tmpamew7bzf.__modtest() [0x427c80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif (string[0] == string[string.length() - 1])\n\t{\n\t\treturn \"true\";\n\t}\n\telse\n\t{\n\t\treturn \"false\";\n\t}\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1666124313,
      "stdout": "",
      "stderr": "/tmp/tmpbn2th27g.d(9): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbn2th27g.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif(string[0] == string[string.length-1])\n\t{\n\t\treturn \"true\";\n\t}\n\telse\n\t{\n\t\treturn \"false\";\n\t}\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpt1835dth.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmpt1835dth.__unittest_L18_C1() [0x427b3e]\n??:? void tmpt1835dth.__modtest() [0x427c80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tstring first_char = string[0];\n\tstring last_char = string[string.length - 1];\n\t\n\tif (first_char == last_char)\n\t{\n\t\treturn \"True\";\n\t}\n\telse\n\t{\n\t\treturn \"False\";\n\t}\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1666124313,
      "stdout": "",
      "stderr": "/tmp/tmplypkl8cc.d(9): Error: `string` is used as a type\n/tmp/tmplypkl8cc.d(10): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplypkl8cc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif(string[0] == string[string.length - 1])\n\t{\n\t\treturn \"true\";\n\t}\n\telse\n\t{\n\t\treturn \"false\";\n\t}\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqh43d48c.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmpqh43d48c.__unittest_L18_C1() [0x427b3e]\n??:? void tmpqh43d48c.__modtest() [0x427c80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif (string[0] == string[string.length - 1])\n\t\treturn \"True\";\n\telse\n\t\treturn \"False\";\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjj138uen.d(18): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmpjj138uen.__unittest_L14_C1() [0x427b3e]\n??:? void tmpjj138uen.__modtest() [0x427c80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif(string[0] == string[string.length() - 1])\n\t{\n\t\treturn \"True\";\n\t}\n\telse\n\t{\n\t\treturn \"False\";\n\t}\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1666124313,
      "stdout": "",
      "stderr": "/tmp/tmp394q2gh4.d(9): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp394q2gh4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif (string[0] == string[string.length() - 1])\n\t{\n\t\treturn \"True\";\n\t}\n\telse\n\t{\n\t\treturn \"False\";\n\t}\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1666124313,
      "stdout": "",
      "stderr": "/tmp/tmpsl8pci4h.d(9): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsl8pci4h.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif (string[0] == string[string.length-1])\n\t\treturn \"True\";\n\telse\n\t\treturn \"False\";\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1666124313,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp6ep5uf1k.d(18): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmp6ep5uf1k.__unittest_L14_C1() [0x427b3e]\n??:? void tmp6ep5uf1k.__modtest() [0x427c80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif (string[0] == string[string.length - 1])\n\t{\n\t\treturn \"true\";\n\t}\n\telse\n\t{\n\t\treturn \"false\";\n\t}\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqr7exbni.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmpqr7exbni.__unittest_L18_C1() [0x427b3e]\n??:? void tmpqr7exbni.__modtest() [0x427c80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tstring result;\n\tif (string[0] == string[string.length - 1])\n\t{\n\t\tresult = \"True\";\n\t}\n\telse\n\t{\n\t\tresult = \"False\";\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1666124313,
      "stdout": "",
      "stderr": "/tmp/tmp__8l3yip.d(9): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp__8l3yip.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif (string[0] == string[string.length - 1])\n\t{\n\t\treturn \"true\";\n\t}\n\telse\n\t{\n\t\treturn \"false\";\n\t}\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqr7exbni.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmpqr7exbni.__unittest_L18_C1() [0x427b3e]\n??:? void tmpqr7exbni.__modtest() [0x427c80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif(string[0] == string[string.length()-1])\n\t{\n\t\treturn \"true\";\n\t}\n\telse\n\t{\n\t\treturn \"false\";\n\t}\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1666124313,
      "stdout": "",
      "stderr": "/tmp/tmpoips4a49.d(9): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoips4a49.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif(string[0] == string[string.length - 1])\n\t{\n\t\treturn \"true\";\n\t}\n\telse\n\t{\n\t\treturn \"false\";\n\t}\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqh43d48c.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmpqh43d48c.__unittest_L18_C1() [0x427b3e]\n??:? void tmpqh43d48c.__modtest() [0x427c80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif (string[0] == string[string.length - 1])\n\t{\n\t\treturn \"true\";\n\t}\n\telse\n\t{\n\t\treturn \"false\";\n\t}\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqr7exbni.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmpqr7exbni.__unittest_L18_C1() [0x427b3e]\n??:? void tmpqr7exbni.__modtest() [0x427c80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif (string[0] == string[string.length - 1])\n\t\treturn \"true\";\n\telse\n\t\treturn \"false\";\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpbev4sz51.d(18): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmpbev4sz51.__unittest_L14_C1() [0x427b3e]\n??:? void tmpbev4sz51.__modtest() [0x427c80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif(string.front == string.back)\n\t{\n\t\treturn \"True\";\n\t}\n\telse\n\t{\n\t\treturn \"False\";\n\t}\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1666124313,
      "stdout": "",
      "stderr": "/tmp/tmpi1vj01yo.d(9): Error: no property `front` for type `string`\n/tmp/tmpi1vj01yo.d(9): Error: no property `back` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi1vj01yo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif(string[0] == string[string.length-1])\n\t{\n\t\treturn \"true\";\n\t}\n\telse\n\t{\n\t\treturn \"false\";\n\t}\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpt1835dth.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmpt1835dth.__unittest_L18_C1() [0x427b3e]\n??:? void tmpt1835dth.__modtest() [0x427c80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif(string[0] == string[string.length - 1])\n\t{\n\t\treturn \"True\";\n\t}\n\telse\n\t{\n\t\treturn \"False\";\n\t}\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpkc3eobkr.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmpkc3eobkr.__unittest_L18_C1() [0x427b3e]\n??:? void tmpkc3eobkr.__modtest() [0x427c80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif(string[0] == string[string.length()-1])\n\t{\n\t\treturn \"True\";\n\t}\n\telse\n\t{\n\t\treturn \"False\";\n\t}\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1666124313,
      "stdout": "",
      "stderr": "/tmp/tmp4_aujinf.d(9): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4_aujinf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif(string[0] == string[string.length-1])\n\t{\n\t\treturn \"true\";\n\t}\n\telse\n\t{\n\t\treturn \"false\";\n\t}\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpt1835dth.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmpt1835dth.__unittest_L18_C1() [0x427b3e]\n??:? void tmpt1835dth.__modtest() [0x427c80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif(string[0] == string[string.length()-1])\n\t{\n\t\treturn \"true\";\n\t}\n\telse\n\t{\n\t\treturn \"false\";\n\t}\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1666124313,
      "stdout": "",
      "stderr": "/tmp/tmpoips4a49.d(9): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoips4a49.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif (string[0] == string[string.length - 1])\n\t{\n\t\treturn \"True\";\n\t}\n\telse\n\t{\n\t\treturn \"False\";\n\t}\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpamew7bzf.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmpamew7bzf.__unittest_L18_C1() [0x427b3e]\n??:? void tmpamew7bzf.__modtest() [0x427c80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif(string[0] == string[string.length()-1])\n\t\treturn \"true\";\n\telse\n\t\treturn \"false\";\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1665517101,
      "stdout": "",
      "stderr": "/tmp/tmp3nhjp80r.d(9): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3nhjp80r.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif(string[0] == string[string.length-1])\n\t\treturn \"true\";\n\telse\n\t\treturn \"false\";\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1666124313,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3i77q5er.d(18): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmp3i77q5er.__unittest_L14_C1() [0x427b3e]\n??:? void tmp3i77q5er.__modtest() [0x427c80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif(string[0] == string[string.length-1])\n\t\treturn \"True\";\n\telse\n\t\treturn \"False\";\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp56b3hl29.d(18): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmp56b3hl29.__unittest_L14_C1() [0x427b3e]\n??:? void tmp56b3hl29.__modtest() [0x427c80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif(string[0] == string[string.length()-1])\n\t\treturn \"true\";\n\telse\n\t\treturn \"false\";\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1665517101,
      "stdout": "",
      "stderr": "/tmp/tmp3nhjp80r.d(9): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3nhjp80r.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif(string[0] == string[string.length-1])\n\t{\n\t\treturn \"True\";\n\t}\n\telse\n\t{\n\t\treturn \"False\";\n\t}\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1666124313,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpa6wbvg6p.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmpa6wbvg6p.__unittest_L18_C1() [0x427b3e]\n??:? void tmpa6wbvg6p.__modtest() [0x427c80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif(string[0] == string[string.length - 1])\n\t{\n\t\treturn \"True\";\n\t}\n\telse\n\t{\n\t\treturn \"False\";\n\t}\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpkc3eobkr.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmpkc3eobkr.__unittest_L18_C1() [0x427b3e]\n??:? void tmpkc3eobkr.__modtest() [0x427c80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif (string[0] == string[string.length - 1])\n\t\treturn \"True\";\n\telse\n\t\treturn \"False\";\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjj138uen.d(18): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmpjj138uen.__unittest_L14_C1() [0x427b3e]\n??:? void tmpjj138uen.__modtest() [0x427c80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif(string[0] == string[string.length - 1])\n\t{\n\t\treturn \"True\";\n\t}\n\telse\n\t{\n\t\treturn \"False\";\n\t}\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpkc3eobkr.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmpkc3eobkr.__unittest_L18_C1() [0x427b3e]\n??:? void tmpkc3eobkr.__modtest() [0x427c80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif(string[0] == string[string.length()-1])\n\t{\n\t\treturn \"Yes\";\n\t}\n\telse\n\t{\n\t\treturn \"No\";\n\t}\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1666124313,
      "stdout": "",
      "stderr": "/tmp/tmpyaz7u54g.d(9): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyaz7u54g.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif (string[0] == string[string.length - 1])\n\t{\n\t\treturn \"True\";\n\t}\n\telse\n\t{\n\t\treturn \"False\";\n\t}\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpamew7bzf.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmpamew7bzf.__unittest_L18_C1() [0x427b3e]\n??:? void tmpamew7bzf.__modtest() [0x427c80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif(string[0] == string[string.length - 1])\n\t{\n\t\treturn \"true\";\n\t}\n\telse\n\t{\n\t\treturn \"false\";\n\t}\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqh43d48c.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmpqh43d48c.__unittest_L18_C1() [0x427b3e]\n??:? void tmpqh43d48c.__modtest() [0x427c80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif (string[0] == string[string.length - 1])\n\t\treturn \"true\";\n\telse\n\t\treturn \"false\";\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpbev4sz51.d(18): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmpbev4sz51.__unittest_L14_C1() [0x427b3e]\n??:? void tmpbev4sz51.__modtest() [0x427c80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif(string[0] == string[string.length-1])\n\t\treturn \"true\";\n\telse\n\t\treturn \"false\";\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1666124313,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3i77q5er.d(18): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmp3i77q5er.__unittest_L14_C1() [0x427b3e]\n??:? void tmp3i77q5er.__modtest() [0x427c80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif(string[0] == string[string.length-1])\n\t{\n\t\treturn \"true\";\n\t}\n\telse\n\t{\n\t\treturn \"false\";\n\t}\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpt1835dth.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmpt1835dth.__unittest_L18_C1() [0x427b3e]\n??:? void tmpt1835dth.__modtest() [0x427c80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif(string[0] == string[string.length-1])\n\t{\n\t\treturn \"true\";\n\t}\n\telse\n\t{\n\t\treturn \"false\";\n\t}\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpt1835dth.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmpt1835dth.__unittest_L18_C1() [0x427b3e]\n??:? void tmpt1835dth.__modtest() [0x427c80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif (string[0] == string[string.length - 1])\n\t\treturn \"Yes\";\n\telse\n\t\treturn \"No\";\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1666124313,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpiu6uevol.d(18): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmpiu6uevol.__unittest_L14_C1() [0x427b3e]\n??:? void tmpiu6uevol.__modtest() [0x427c80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif (string[0] == string[string.length - 1])\n\t{\n\t\treturn \"True\";\n\t}\n\telse\n\t{\n\t\treturn \"False\";\n\t}\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpamew7bzf.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmpamew7bzf.__unittest_L18_C1() [0x427b3e]\n??:? void tmpamew7bzf.__modtest() [0x427c80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif (string[0] == string[string.length - 1])\n\t\treturn \"true\";\n\telse\n\t\treturn \"false\";\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpbev4sz51.d(18): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmpbev4sz51.__unittest_L14_C1() [0x427b3e]\n??:? void tmpbev4sz51.__modtest() [0x427c80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif(string[0] == string[string.length - 1])\n\t\treturn \"true\";\n\telse\n\t\treturn \"false\";\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp1zbginib.d(18): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmp1zbginib.__unittest_L14_C1() [0x427b3e]\n??:? void tmp1zbginib.__modtest() [0x427c80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif(string[0] == string[string.length-1])\n\t{\n\t\treturn \"True\";\n\t}\n\telse\n\t{\n\t\treturn \"False\";\n\t}\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1666124313,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpa6wbvg6p.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmpa6wbvg6p.__unittest_L18_C1() [0x427b3e]\n??:? void tmpa6wbvg6p.__modtest() [0x427c80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif(string[0] == string[string.length-1])\n\t{\n\t\treturn \"Yes\";\n\t}\n\telse\n\t{\n\t\treturn \"No\";\n\t}\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1666124313,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmph7nn63lg.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmph7nn63lg.__unittest_L18_C1() [0x427b3e]\n??:? void tmph7nn63lg.__modtest() [0x427c80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif(string[0] == string[string.length() - 1])\n\t{\n\t\treturn \"true\";\n\t}\n\telse\n\t{\n\t\treturn \"false\";\n\t}\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1666124313,
      "stdout": "",
      "stderr": "/tmp/tmpr8fgeqtp.d(9): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr8fgeqtp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif(string.front == string.back)\n\t{\n\t\treturn \"true\";\n\t}\n\telse\n\t{\n\t\treturn \"false\";\n\t}\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1666124313,
      "stdout": "",
      "stderr": "/tmp/tmpovlc7px_.d(9): Error: no property `front` for type `string`\n/tmp/tmpovlc7px_.d(9): Error: no property `back` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpovlc7px_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif(string[0] == string[string.length()-1])\n\t{\n\t\treturn \"True\";\n\t}\n\telse\n\t{\n\t\treturn \"False\";\n\t}\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1666124313,
      "stdout": "",
      "stderr": "/tmp/tmp4_aujinf.d(9): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4_aujinf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif(string[0] == string[string.length - 1])\n\t{\n\t\treturn \"true\";\n\t}\n\telse\n\t{\n\t\treturn \"false\";\n\t}\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqh43d48c.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmpqh43d48c.__unittest_L18_C1() [0x427b3e]\n??:? void tmpqh43d48c.__modtest() [0x427c80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif(string[0] == string[string.length - 1])\n\t{\n\t\treturn \"true\";\n\t}\n\telse\n\t{\n\t\treturn \"false\";\n\t}\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqh43d48c.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmpqh43d48c.__unittest_L18_C1() [0x427b3e]\n??:? void tmpqh43d48c.__modtest() [0x427c80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tstring first = string[0];\n\tstring last = string[string.length - 1];\n\tif (first == last)\n\t{\n\t\treturn \"true\";\n\t}\n\telse\n\t{\n\t\treturn \"false\";\n\t}\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1666124313,
      "stdout": "",
      "stderr": "/tmp/tmpzz93a7wt.d(9): Error: `string` is used as a type\n/tmp/tmpzz93a7wt.d(10): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzz93a7wt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif(string[0] == string[string.length-1])\n\t{\n\t\treturn \"true\";\n\t}\n\telse\n\t{\n\t\treturn \"false\";\n\t}\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpt1835dth.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmpt1835dth.__unittest_L18_C1() [0x427b3e]\n??:? void tmpt1835dth.__modtest() [0x427c80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif(string[0] == string[string.length - 1])\n\t{\n\t\treturn \"True\";\n\t}\n\telse\n\t{\n\t\treturn \"False\";\n\t}\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpkc3eobkr.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmpkc3eobkr.__unittest_L18_C1() [0x427b3e]\n??:? void tmpkc3eobkr.__modtest() [0x427c80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif (string[0] == string[string.length() - 1])\n\t\treturn \"true\";\n\telse\n\t\treturn \"false\";\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1666124313,
      "stdout": "",
      "stderr": "/tmp/tmpngr9wesz.d(9): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpngr9wesz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif (string[0] == string[string.length() - 1])\n\t{\n\t\treturn \"true\";\n\t}\n\telse\n\t{\n\t\treturn \"false\";\n\t}\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1666124313,
      "stdout": "",
      "stderr": "/tmp/tmpbn2th27g.d(9): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbn2th27g.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif(string[0] == string[string.length-1])\n\t{\n\t\treturn \"true\";\n\t}\n\telse\n\t{\n\t\treturn \"false\";\n\t}\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpt1835dth.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmpt1835dth.__unittest_L18_C1() [0x427b3e]\n??:? void tmpt1835dth.__modtest() [0x427c80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif(string[0] == string[string.length - 1])\n\t{\n\t\treturn \"true\";\n\t}\n\telse\n\t{\n\t\treturn \"false\";\n\t}\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqh43d48c.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmpqh43d48c.__unittest_L18_C1() [0x427b3e]\n??:? void tmpqh43d48c.__modtest() [0x427c80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif(string[0] == string[string.length - 1])\n\t{\n\t\treturn \"true\";\n\t}\n\telse\n\t{\n\t\treturn \"false\";\n\t}\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqh43d48c.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmpqh43d48c.__unittest_L18_C1() [0x427b3e]\n??:? void tmpqh43d48c.__modtest() [0x427c80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif (string[0] == string[string.length - 1])\n\t{\n\t\treturn \"true\";\n\t}\n\telse\n\t{\n\t\treturn \"false\";\n\t}\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqr7exbni.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmpqr7exbni.__unittest_L18_C1() [0x427b3e]\n??:? void tmpqr7exbni.__modtest() [0x427c80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif(string[0] == string[string.length()-1])\n\t{\n\t\treturn \"true\";\n\t}\n\telse\n\t{\n\t\treturn \"false\";\n\t}\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1666124313,
      "stdout": "",
      "stderr": "/tmp/tmpoips4a49.d(9): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoips4a49.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif (string[0] == string[string.length - 1])\n\t\treturn \"true\";\n\telse\n\t\treturn \"false\";\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpbev4sz51.d(18): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmpbev4sz51.__unittest_L14_C1() [0x427b3e]\n??:? void tmpbev4sz51.__modtest() [0x427c80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif (string[0] == string[string.length()-1])\n\t{\n\t\treturn \"true\";\n\t}\n\telse\n\t{\n\t\treturn \"false\";\n\t}\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1666124313,
      "stdout": "",
      "stderr": "/tmp/tmp7xikuzqq.d(9): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7xikuzqq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif (string[0] == string[string.length - 1])\n\t\treturn \"true\";\n\telse\n\t\treturn \"false\";\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpbev4sz51.d(18): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmpbev4sz51.__unittest_L14_C1() [0x427b3e]\n??:? void tmpbev4sz51.__modtest() [0x427c80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif (string[0] == string[string.length - 1]) \n\t{\n\t\treturn \"true\";\n\t}\n\telse \n\t{\n\t\treturn \"false\";\n\t}\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1666124313,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpneq5v813.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmpneq5v813.__unittest_L18_C1() [0x427b3e]\n??:? void tmpneq5v813.__modtest() [0x427c80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif(string[0] == string[string.length()-1])\n\t{\n\t\treturn \"true\";\n\t}\n\telse\n\t{\n\t\treturn \"false\";\n\t}\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1666124313,
      "stdout": "",
      "stderr": "/tmp/tmpoips4a49.d(9): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoips4a49.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif(string[0] == string[string.length-1])\n\t\treturn \"true\";\n\telse\n\t\treturn \"false\";\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1666124313,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3i77q5er.d(18): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmp3i77q5er.__unittest_L14_C1() [0x427b3e]\n??:? void tmp3i77q5er.__modtest() [0x427c80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif(string[0] == string[string.length - 1])\n\t{\n\t\treturn \"True\";\n\t}\n\telse\n\t{\n\t\treturn \"False\";\n\t}\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpkc3eobkr.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmpkc3eobkr.__unittest_L18_C1() [0x427b3e]\n??:? void tmpkc3eobkr.__modtest() [0x427c80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif(string[0] == string[string.length-1])\n\t{\n\t\treturn \"True\";\n\t}\n\telse\n\t{\n\t\treturn \"False\";\n\t}\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1666124313,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpa6wbvg6p.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmpa6wbvg6p.__unittest_L18_C1() [0x427b3e]\n??:? void tmpa6wbvg6p.__modtest() [0x427c80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif(string[0] == string[string.length - 1])\n\t\treturn \"true\";\n\telse\n\t\treturn \"false\";\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp1zbginib.d(18): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmp1zbginib.__unittest_L14_C1() [0x427b3e]\n??:? void tmp1zbginib.__modtest() [0x427c80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif (string[0] == string[string.length - 1])\n\t\treturn \"true\";\n\telse\n\t\treturn \"false\";\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpbev4sz51.d(18): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmpbev4sz51.__unittest_L14_C1() [0x427b3e]\n??:? void tmpbev4sz51.__modtest() [0x427c80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif(string[0] == string[string.length - 1])\n\t\treturn \"TRUE\";\n\telse\n\t\treturn \"FALSE\";\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1666124313,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpdc6s2p7w.d(18): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmpdc6s2p7w.__unittest_L14_C1() [0x427b3e]\n??:? void tmpdc6s2p7w.__modtest() [0x427c80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif(string[0] == string[string.length-1])\n\t{\n\t\treturn \"true\";\n\t}\n\telse\n\t{\n\t\treturn \"false\";\n\t}\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpt1835dth.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmpt1835dth.__unittest_L18_C1() [0x427b3e]\n??:? void tmpt1835dth.__modtest() [0x427c80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif(string[0] == string[string.length()-1])\n\t{\n\t\treturn \"true\";\n\t}\n\telse\n\t{\n\t\treturn \"false\";\n\t}\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1666124313,
      "stdout": "",
      "stderr": "/tmp/tmpoips4a49.d(9): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoips4a49.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif(string[0] == string[string.length-1])\n\t{\n\t\treturn \"true\";\n\t}\n\telse\n\t{\n\t\treturn \"false\";\n\t}\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpt1835dth.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmpt1835dth.__unittest_L18_C1() [0x427b3e]\n??:? void tmpt1835dth.__modtest() [0x427c80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif (string[0] == string[string.length() - 1])\n\t\treturn \"true\";\n\telse\n\t\treturn \"false\";\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1666124313,
      "stdout": "",
      "stderr": "/tmp/tmpngr9wesz.d(9): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpngr9wesz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif(string[0] == string[string.length - 1])\n\t\treturn \"True\";\n\telse\n\t\treturn \"False\";\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1666124313,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpd_2l78tg.d(18): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmpd_2l78tg.__unittest_L14_C1() [0x427b3e]\n??:? void tmpd_2l78tg.__modtest() [0x427c80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif(string[0] == string[string.length - 1])\n\t{\n\t\treturn \"true\";\n\t}\n\telse\n\t{\n\t\treturn \"false\";\n\t}\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqh43d48c.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmpqh43d48c.__unittest_L18_C1() [0x427b3e]\n??:? void tmpqh43d48c.__modtest() [0x427c80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif(string.front == string.back)\n\t\treturn \"true\";\n\telse\n\t\treturn \"false\";\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1666124313,
      "stdout": "",
      "stderr": "/tmp/tmphf8_qlg7.d(9): Error: no property `front` for type `string`\n/tmp/tmphf8_qlg7.d(9): Error: no property `back` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphf8_qlg7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif(string[0] == string[string.length - 1])\n\t{\n\t\treturn \"True\";\n\t}\n\telse\n\t{\n\t\treturn \"False\";\n\t}\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpkc3eobkr.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmpkc3eobkr.__unittest_L18_C1() [0x427b3e]\n??:? void tmpkc3eobkr.__modtest() [0x427c80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif (string[0] == string[string.length - 1])\n\t{\n\t\treturn \"true\";\n\t}\n\telse\n\t{\n\t\treturn \"false\";\n\t}\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqr7exbni.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmpqr7exbni.__unittest_L18_C1() [0x427b3e]\n??:? void tmpqr7exbni.__modtest() [0x427c80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif (string[0] == string[string.length - 1])\n\t\treturn \"true\";\n\telse\n\t\treturn \"false\";\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpbev4sz51.d(18): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmpbev4sz51.__unittest_L14_C1() [0x427b3e]\n??:? void tmpbev4sz51.__modtest() [0x427c80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif(string[0] == string[string.length - 1])\n\t{\n\t\treturn \"True\";\n\t}\n\telse\n\t{\n\t\treturn \"False\";\n\t}\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpkc3eobkr.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmpkc3eobkr.__unittest_L18_C1() [0x427b3e]\n??:? void tmpkc3eobkr.__modtest() [0x427c80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif (string[0] == string[string.length() - 1])\n\t\treturn \"True\";\n\telse\n\t\treturn \"False\";\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1666124313,
      "stdout": "",
      "stderr": "/tmp/tmpjw6p4_tw.d(9): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjw6p4_tw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif(string[0] == string[string.length - 1])\n\t{\n\t\treturn \"True\";\n\t}\n\telse\n\t{\n\t\treturn \"False\";\n\t}\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpkc3eobkr.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmpkc3eobkr.__unittest_L18_C1() [0x427b3e]\n??:? void tmpkc3eobkr.__modtest() [0x427c80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif(string[0] == string[string.length-1])\n\t{\n\t\treturn \"True\";\n\t}\n\telse\n\t{\n\t\treturn \"False\";\n\t}\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1666124313,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpa6wbvg6p.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmpa6wbvg6p.__unittest_L18_C1() [0x427b3e]\n??:? void tmpa6wbvg6p.__modtest() [0x427c80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif(string[0] == string[string.length - 1]) \n\t{\n\t\treturn \"true\";\n\t}\n\telse \n\t{\n\t\treturn \"false\";\n\t}\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1666124313,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpcp7vz1ud.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmpcp7vz1ud.__unittest_L18_C1() [0x427b3e]\n??:? void tmpcp7vz1ud.__modtest() [0x427c80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tstring first = string[0..1];\n\tstring last = string[$-1..$];\n\tif (first == last)\n\t{\n\t\treturn \"true\";\n\t}\n\telse\n\t{\n\t\treturn \"false\";\n\t}\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1666124313,
      "stdout": "",
      "stderr": "/tmp/tmpugsqdhje.d(9): Error: `string` is used as a type\n/tmp/tmpugsqdhje.d(10): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpugsqdhje.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif (string[0] == string[string.length - 1])\n\t{\n\t\treturn \"true\";\n\t}\n\telse\n\t{\n\t\treturn \"false\";\n\t}\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqr7exbni.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmpqr7exbni.__unittest_L18_C1() [0x427b3e]\n??:? void tmpqr7exbni.__modtest() [0x427c80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif(string[0] == string[string.length - 1])\n\t{\n\t\treturn \"True\";\n\t}\n\telse\n\t{\n\t\treturn \"False\";\n\t}\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpkc3eobkr.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmpkc3eobkr.__unittest_L18_C1() [0x427b3e]\n??:? void tmpkc3eobkr.__modtest() [0x427c80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif(string[0] == string[string.length()-1])\n\t{\n\t\treturn \"true\";\n\t}\n\telse\n\t{\n\t\treturn \"false\";\n\t}\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1666124313,
      "stdout": "",
      "stderr": "/tmp/tmpoips4a49.d(9): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoips4a49.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif(string[0] == string[string.length - 1])\n\t{\n\t\treturn \"true\";\n\t}\n\telse\n\t{\n\t\treturn \"false\";\n\t}\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqh43d48c.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmpqh43d48c.__unittest_L18_C1() [0x427b3e]\n??:? void tmpqh43d48c.__modtest() [0x427c80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif (string[0] == string[string.length - 1])\n\t{\n\t\treturn \"true\";\n\t}\n\telse\n\t{\n\t\treturn \"false\";\n\t}\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqr7exbni.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmpqr7exbni.__unittest_L18_C1() [0x427b3e]\n??:? void tmpqr7exbni.__modtest() [0x427c80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif(string[0] == string[string.length() - 1])\n\t{\n\t\treturn \"true\";\n\t}\n\telse\n\t{\n\t\treturn \"false\";\n\t}\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1666124313,
      "stdout": "",
      "stderr": "/tmp/tmpr8fgeqtp.d(9): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr8fgeqtp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif(string[0] == string[string.length - 1])\n\t{\n\t\treturn \"true\";\n\t}\n\telse\n\t{\n\t\treturn \"false\";\n\t}\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqh43d48c.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmpqh43d48c.__unittest_L18_C1() [0x427b3e]\n??:? void tmpqh43d48c.__modtest() [0x427c80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif(string[0] == string[string.length-1])\n\t{\n\t\treturn \"True\";\n\t}\n\telse\n\t{\n\t\treturn \"False\";\n\t}\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1666124313,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpa6wbvg6p.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmpa6wbvg6p.__unittest_L18_C1() [0x427b3e]\n??:? void tmpa6wbvg6p.__modtest() [0x427c80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif(string[0] == string[string.length - 1])\n\t{\n\t\treturn \"True\";\n\t}\n\telse\n\t{\n\t\treturn \"False\";\n\t}\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpkc3eobkr.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmpkc3eobkr.__unittest_L18_C1() [0x427b3e]\n??:? void tmpkc3eobkr.__modtest() [0x427c80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif (string[0] == string[string.length() - 1])\n\t{\n\t\treturn \"true\";\n\t}\n\telse\n\t{\n\t\treturn \"false\";\n\t}\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1666124313,
      "stdout": "",
      "stderr": "/tmp/tmpbn2th27g.d(9): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbn2th27g.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif (string[0] == string[string.length - 1])\n\t{\n\t\treturn \"True\";\n\t}\n\telse\n\t{\n\t\treturn \"False\";\n\t}\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpamew7bzf.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmpamew7bzf.__unittest_L18_C1() [0x427b3e]\n??:? void tmpamew7bzf.__modtest() [0x427c80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif(string[0] == string[string.length - 1])\n\t\treturn \"True\";\n\telse\n\t\treturn \"False\";\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1666124313,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpd_2l78tg.d(18): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmpd_2l78tg.__unittest_L14_C1() [0x427b3e]\n??:? void tmpd_2l78tg.__modtest() [0x427c80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif(string[0] == string[string.length-1])\n\t{\n\t\treturn \"true\";\n\t}\n\telse\n\t{\n\t\treturn \"false\";\n\t}\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpt1835dth.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmpt1835dth.__unittest_L18_C1() [0x427b3e]\n??:? void tmpt1835dth.__modtest() [0x427c80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif(string[0] == string[string.length - 1])\n\t{\n\t\treturn \"True\";\n\t}\n\telse\n\t{\n\t\treturn \"False\";\n\t}\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpkc3eobkr.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmpkc3eobkr.__unittest_L18_C1() [0x427b3e]\n??:? void tmpkc3eobkr.__modtest() [0x427c80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif (string[0] == string[string.length - 1])\n\t\treturn \"true\";\n\telse\n\t\treturn \"false\";\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpbev4sz51.d(18): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmpbev4sz51.__unittest_L14_C1() [0x427b3e]\n??:? void tmpbev4sz51.__modtest() [0x427c80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif(string[0] == string[string.length - 1])\n\t{\n\t\treturn \"true\";\n\t}\n\telse\n\t{\n\t\treturn \"false\";\n\t}\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqh43d48c.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmpqh43d48c.__unittest_L18_C1() [0x427b3e]\n??:? void tmpqh43d48c.__modtest() [0x427c80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif(string[0] == string[string.length - 1])\n\t{\n\t\treturn \"True\";\n\t}\n\telse\n\t{\n\t\treturn \"False\";\n\t}\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpkc3eobkr.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmpkc3eobkr.__unittest_L18_C1() [0x427b3e]\n??:? void tmpkc3eobkr.__modtest() [0x427c80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif (string[0] == string[string.length - 1])\n\t\treturn \"true\";\n\telse\n\t\treturn \"false\";\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpbev4sz51.d(18): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmpbev4sz51.__unittest_L14_C1() [0x427b3e]\n??:? void tmpbev4sz51.__modtest() [0x427c80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif (string[0] == string[string.length - 1])\n\t{\n\t\treturn \"True\";\n\t}\n\telse\n\t{\n\t\treturn \"False\";\n\t}\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpamew7bzf.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmpamew7bzf.__unittest_L18_C1() [0x427b3e]\n??:? void tmpamew7bzf.__modtest() [0x427c80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif(string[0] == string[string.length-1])\n\t{\n\t\treturn \"true\";\n\t}\n\telse\n\t{\n\t\treturn \"false\";\n\t}\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpt1835dth.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmpt1835dth.__unittest_L18_C1() [0x427b3e]\n??:? void tmpt1835dth.__modtest() [0x427c80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif (string[0] == string[string.length - 1])\n\t{\n\t\treturn \"True\";\n\t}\n\telse\n\t{\n\t\treturn \"False\";\n\t}\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpamew7bzf.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmpamew7bzf.__unittest_L18_C1() [0x427b3e]\n??:? void tmpamew7bzf.__modtest() [0x427c80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif(string[0] == string[string.length - 1])\n\t{\n\t\treturn \"True\";\n\t}\n\telse\n\t{\n\t\treturn \"False\";\n\t}\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpkc3eobkr.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmpkc3eobkr.__unittest_L18_C1() [0x427b3e]\n??:? void tmpkc3eobkr.__modtest() [0x427c80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif (string[0] == string[string.length()-1])\n\t\treturn \"true\";\n\telse\n\t\treturn \"false\";\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1665517101,
      "stdout": "",
      "stderr": "/tmp/tmpj1weoy9g.d(9): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj1weoy9g.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif(string[0] == string[string.length - 1])\n\t{\n\t\treturn \"true\";\n\t}\n\telse\n\t{\n\t\treturn \"false\";\n\t}\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqh43d48c.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmpqh43d48c.__unittest_L18_C1() [0x427b3e]\n??:? void tmpqh43d48c.__modtest() [0x427c80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tstring result = \"\";\n\tif(string[0] == string[string.length - 1])\n\t{\n\t\tresult = \"true\";\n\t}\n\telse\n\t{\n\t\tresult = \"false\";\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1666124313,
      "stdout": "",
      "stderr": "/tmp/tmpdvjuobj8.d(9): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdvjuobj8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif (string[0] == string[string.length - 1])\n\t{\n\t\treturn \"Yes\";\n\t}\n\telse\n\t{\n\t\treturn \"No\";\n\t}\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1666124313,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpk31m876n.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmpk31m876n.__unittest_L18_C1() [0x427b3e]\n??:? void tmpk31m876n.__modtest() [0x427c80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif (string[0] == string[string.length - 1])\n\t{\n\t\treturn \"Yes\";\n\t}\n\telse\n\t{\n\t\treturn \"No\";\n\t}\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1666124313,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpk31m876n.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmpk31m876n.__unittest_L18_C1() [0x427b3e]\n??:? void tmpk31m876n.__modtest() [0x427c80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif(string[0] == string[string.length-1])\n\t{\n\t\treturn \"true\";\n\t}\n\telse\n\t{\n\t\treturn \"false\";\n\t}\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpt1835dth.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmpt1835dth.__unittest_L18_C1() [0x427b3e]\n??:? void tmpt1835dth.__modtest() [0x427c80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif (string[0] == string[string.length - 1])\n\t\treturn \"true\";\n\telse\n\t\treturn \"false\";\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpbev4sz51.d(18): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmpbev4sz51.__unittest_L14_C1() [0x427b3e]\n??:? void tmpbev4sz51.__modtest() [0x427c80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif (string[0] == string[string.length - 1])\n\t\treturn \"true\";\n\telse\n\t\treturn \"false\";\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpbev4sz51.d(18): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmpbev4sz51.__unittest_L14_C1() [0x427b3e]\n??:? void tmpbev4sz51.__modtest() [0x427c80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif(string[0] == string[string.length - 1])\n\t\treturn \"true\";\n\telse\n\t\treturn \"false\";\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp1zbginib.d(18): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmp1zbginib.__unittest_L14_C1() [0x427b3e]\n??:? void tmp1zbginib.__modtest() [0x427c80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif(string[0] == string[string.length - 1])\n\t{\n\t\treturn \"True\";\n\t}\n\telse\n\t{\n\t\treturn \"False\";\n\t}\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpkc3eobkr.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmpkc3eobkr.__unittest_L18_C1() [0x427b3e]\n??:? void tmpkc3eobkr.__modtest() [0x427c80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif(string[0] == string[string.length-1])\n\t\treturn \"true\";\n\telse\n\t\treturn \"false\";\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1666124313,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3i77q5er.d(18): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmp3i77q5er.__unittest_L14_C1() [0x427b3e]\n??:? void tmp3i77q5er.__modtest() [0x427c80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif(string[0] == string[string.length()-1])\n\t{\n\t\treturn \"true\";\n\t}\n\telse\n\t{\n\t\treturn \"false\";\n\t}\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1666124313,
      "stdout": "",
      "stderr": "/tmp/tmpoips4a49.d(9): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoips4a49.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif(string[0] == string[string.length - 1])\n\t\treturn \"true\";\n\telse\n\t\treturn \"false\";\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp1zbginib.d(18): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmp1zbginib.__unittest_L14_C1() [0x427b3e]\n??:? void tmp1zbginib.__modtest() [0x427c80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif (string[0] == string[string.length - 1]) \n\t{\n\t\treturn \"True\";\n\t}\n\telse \n\t{\n\t\treturn \"False\";\n\t}\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1666124313,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp7n3187lz.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmp7n3187lz.__unittest_L18_C1() [0x427b3e]\n??:? void tmp7n3187lz.__modtest() [0x427c80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif (string[0] == string[string.length - 1])\n\t\treturn \"true\";\n\telse\n\t\treturn \"false\";\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpbev4sz51.d(18): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmpbev4sz51.__unittest_L14_C1() [0x427b3e]\n??:? void tmpbev4sz51.__modtest() [0x427c80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tstring result = \"\";\n\tif(string[0] == string[string.length-1])\n\t{\n\t\tresult = \"true\";\n\t}\n\telse\n\t{\n\t\tresult = \"false\";\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1666124313,
      "stdout": "",
      "stderr": "/tmp/tmpwyafmwm8.d(9): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwyafmwm8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif (string[0] == string[string.length - 1])\n\t{\n\t\treturn \"true\";\n\t}\n\telse\n\t{\n\t\treturn \"false\";\n\t}\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqr7exbni.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmpqr7exbni.__unittest_L18_C1() [0x427b3e]\n??:? void tmpqr7exbni.__modtest() [0x427c80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif(string[0] == string[string.length - 1])\n\t{\n\t\treturn \"true\";\n\t}\n\telse\n\t{\n\t\treturn \"false\";\n\t}\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqh43d48c.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmpqh43d48c.__unittest_L18_C1() [0x427b3e]\n??:? void tmpqh43d48c.__modtest() [0x427c80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif(string[0] == string[string.length - 1])\n\t\treturn \"True\";\n\telse\n\t\treturn \"False\";\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1666124313,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpd_2l78tg.d(18): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmpd_2l78tg.__unittest_L14_C1() [0x427b3e]\n??:? void tmpd_2l78tg.__modtest() [0x427c80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif (string[0] == string[string.length - 1])\n\t{\n\t\treturn \"true\";\n\t}\n\telse\n\t{\n\t\treturn \"false\";\n\t}\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqr7exbni.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmpqr7exbni.__unittest_L18_C1() [0x427b3e]\n??:? void tmpqr7exbni.__modtest() [0x427c80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif (string[0] == string[string.length - 1])\n\t{\n\t\treturn \"True\";\n\t}\n\telse\n\t{\n\t\treturn \"False\";\n\t}\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpamew7bzf.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmpamew7bzf.__unittest_L18_C1() [0x427b3e]\n??:? void tmpamew7bzf.__modtest() [0x427c80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif(string[0] == string[string.length - 1])\n\t{\n\t\treturn \"same\";\n\t}\n\telse\n\t{\n\t\treturn \"not same\";\n\t}\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1666124313,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpmz3ye128.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmpmz3ye128.__unittest_L18_C1() [0x427b3e]\n??:? void tmpmz3ye128.__modtest() [0x427c80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\treturn string[0] == string[string.length - 1] ? \"true\" : \"false\";\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1666124313,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjb2jykkv.d(15): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmpjb2jykkv.__unittest_L11_C1() [0x427b3a]\n??:? void tmpjb2jykkv.__modtest() [0x427c7c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif (string[0] == string[string.length - 1])\n\t{\n\t\treturn \"true\";\n\t}\n\telse\n\t{\n\t\treturn \"false\";\n\t}\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqr7exbni.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmpqr7exbni.__unittest_L18_C1() [0x427b3e]\n??:? void tmpqr7exbni.__modtest() [0x427c80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif(string[0] == string[string.length()-1])\n\t{\n\t\treturn \"true\";\n\t}\n\telse\n\t{\n\t\treturn \"false\";\n\t}\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1666124313,
      "stdout": "",
      "stderr": "/tmp/tmpoips4a49.d(9): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoips4a49.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif (string[0] == string[string.length - 1])\n\t{\n\t\treturn \"true\";\n\t}\n\telse\n\t{\n\t\treturn \"false\";\n\t}\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqr7exbni.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmpqr7exbni.__unittest_L18_C1() [0x427b3e]\n??:? void tmpqr7exbni.__modtest() [0x427c80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif(string[0] == string[string.length-1])\n\t{\n\t\treturn \"true\";\n\t}\n\telse\n\t{\n\t\treturn \"false\";\n\t}\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpt1835dth.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmpt1835dth.__unittest_L18_C1() [0x427b3e]\n??:? void tmpt1835dth.__modtest() [0x427c80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif (string[0] == string[string.length() - 1])\n\t\treturn \"True\";\n\telse\n\t\treturn \"False\";\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1666124313,
      "stdout": "",
      "stderr": "/tmp/tmpjw6p4_tw.d(9): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjw6p4_tw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif(string[0] == string[string.length-1])\n\t\treturn \"true\";\n\treturn \"false\";\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1666124313,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmperbg620t.d(17): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmperbg620t.__unittest_L13_C1() [0x427b3e]\n??:? void tmperbg620t.__modtest() [0x427c80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif(string[0] == string[string.length - 1])\n\t{\n\t\treturn \"True\";\n\t}\n\telse\n\t{\n\t\treturn \"False\";\n\t}\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpkc3eobkr.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmpkc3eobkr.__unittest_L18_C1() [0x427b3e]\n??:? void tmpkc3eobkr.__modtest() [0x427c80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif(string[0] == string[string.length() - 1])\n\t{\n\t\treturn \"Yes\";\n\t}\n\telse\n\t{\n\t\treturn \"No\";\n\t}\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1666124313,
      "stdout": "",
      "stderr": "/tmp/tmpvjpjod7g.d(9): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvjpjod7g.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif(string[0] == string[string.length - 1])\n\t{\n\t\treturn \"true\";\n\t}\n\telse\n\t{\n\t\treturn \"false\";\n\t}\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqh43d48c.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmpqh43d48c.__unittest_L18_C1() [0x427b3e]\n??:? void tmpqh43d48c.__modtest() [0x427c80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif(string[0] == string[string.length - 1])\n\t{\n\t\treturn \"true\";\n\t}\n\telse\n\t{\n\t\treturn \"false\";\n\t}\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqh43d48c.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmpqh43d48c.__unittest_L18_C1() [0x427b3e]\n??:? void tmpqh43d48c.__modtest() [0x427c80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif (string[0] == string[string.length()-1])\n\t{\n\t\treturn \"true\";\n\t}\n\telse\n\t{\n\t\treturn \"false\";\n\t}\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1666124313,
      "stdout": "",
      "stderr": "/tmp/tmp7xikuzqq.d(9): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7xikuzqq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\n*/\nstring check_char(string string) \n{\n\tif(string[0] == string[string.length - 1])\n\t\treturn \"true\";\n\telse\n\t\treturn \"false\";\n}\nunittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp1zbginib.d(18): unittest failure\n----------------\n??:? _d_unittestp [0x427efd]\n??:? void tmp1zbginib.__unittest_L14_C1() [0x427b3e]\n??:? void tmp1zbginib.__modtest() [0x427c80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbcd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab01]\n??:? runModuleUnitTests [0x42b9f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}