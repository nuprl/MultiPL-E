{
  "name": "mbpp_776_count_vowels",
  "language": "d",
  "prompt": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_776_count_vowels.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == 'a' && (test_str[$-1] == 'e' || test_str[$-1] == 'i' || test_str[$-1] == 'o' || test_str[$-1] == 'u'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'e' && (test_str[$-1] == 'a' || test_str[$-1] == 'i' || test_str[$-1] == 'o' || test_str[$-1] == 'u'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'i' && (test_str[$-1] == 'a' || test_str[$-1] == 'e' || test_str[$-1] == 'o' || test_str[$-1] == 'u'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'o' && (test_str[$-1] == 'a' || test_str[$-1] == 'e' || test_str[$-1] == 'i' || test_str[$-1] == 'u'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'u' && (test_str[$-1] == 'a' || test_str[$-1] == 'e' || test_str[$-1] == 'i' || test_str[$-1] == 'o'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpvbagq7bf.d(42): unittest failure\n----------------\n??:? _d_unittestp [0x42817d]\n??:? void tmpvbagq7bf.__unittest_L38_C1() [0x427e92]\n??:? void tmpvbagq7bf.__modtest() [0x427efc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bf17]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42adaa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ff3d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4303ec]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fec9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ad81]\n??:? runModuleUnitTests [0x42bced]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428640]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == 'a' && test_str[$-1] == 'a')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'e' && test_str[$-1] == 'e')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'i' && test_str[$-1] == 'i')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'o' && test_str[$-1] == 'o')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'u' && test_str[$-1] == 'u')\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp10rywk3h.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x427eed]\n??:? void tmp10rywk3h.__unittest_L28_C1() [0x427c02]\n??:? void tmp10rywk3h.__modtest() [0x427c6c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc87]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab1a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fcad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43015c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fc39]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aaf1]\n??:? runModuleUnitTests [0x42ba5d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283b0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == 'a' && (test_str[$-1] == 'e' || test_str[$-1] == 'i' || test_str[$-1] == 'o' || test_str[$-1] == 'u'))\n\t\t\t\tcount++;\n\t\t\telse if(c == 'e' && (test_str[$-1] == 'a' || test_str[$-1] == 'i' || test_str[$-1] == 'o' || test_str[$-1] == 'u'))\n\t\t\t\tcount++;\n\t\t\telse if(c == 'i' && (test_str[$-1] == 'a' || test_str[$-1] == 'e' || test_str[$-1] == 'o' || test_str[$-1] == 'u'))\n\t\t\t\tcount++;\n\t\t\telse if(c == 'o' && (test_str[$-1] == 'a' || test_str[$-1] == 'e' || test_str[$-1] == 'i' || test_str[$-1] == 'u'))\n\t\t\t\tcount++;\n\t\t\telse if(c == 'u' && (test_str[$-1] == 'a' || test_str[$-1] == 'e' || test_str[$-1] == 'i' || test_str[$-1] == 'o'))\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpvgcnqib5.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x42817d]\n??:? void tmpvgcnqib5.__unittest_L28_C1() [0x427e92]\n??:? void tmpvgcnqib5.__modtest() [0x427efc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bf17]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42adaa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ff3d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4303ec]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fec9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ad81]\n??:? runModuleUnitTests [0x42bced]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428640]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == test_str[0] || c == test_str[$-1])\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(test_str[test_str.indexOf(c)-1] == 'a' || test_str[test_str.indexOf(c)-1] == 'e' || test_str[test_str.indexOf(c)-1] == 'i' || test_str[test_str.indexOf(c)-1] == 'o' || test_str[test_str.indexOf(c)-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t\telse if(test_str[test_str.indexOf(c)+1] == 'a' || test_str[test_str.indexOf(c)+1] == 'e' || test_str[test_str.indexOf(c)+1] == 'i' || test_str[test_str.indexOf(c)+1] == 'o' || test_str[test_str.indexOf(c)+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "/tmp/tmpg5hb7ytk.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmpg5hb7ytk.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmpg5hb7ytk.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmpg5hb7ytk.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmpg5hb7ytk.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmpg5hb7ytk.d(24): Error: no property `indexOf` for type `string`\n/tmp/tmpg5hb7ytk.d(24): Error: no property `indexOf` for type `string`\n/tmp/tmpg5hb7ytk.d(24): Error: no property `indexOf` for type `string`\n/tmp/tmpg5hb7ytk.d(24): Error: no property `indexOf` for type `string`\n/tmp/tmpg5hb7ytk.d(24): Error: no property `indexOf` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg5hb7ytk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == test_str[0])\n\t\t\t{\n\t\t\t\tif(test_str[1] == 'a' || test_str[1] == 'e' || test_str[1] == 'i' || test_str[1] == 'o' || test_str[1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(c == test_str[$-1])\n\t\t\t{\n\t\t\t\tif(test_str[$-2] == 'a' || test_str[$-2] == 'e' || test_str[$-2] == 'i' || test_str[$-2] == 'o' || test_str[$-2] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(test_str[test_str.indexOf(c)-1] == 'a' || test_str[test_str.indexOf(c)-1] == 'e' || test_str[test_str.indexOf(c)-1] == 'i' || test_str[test_str.indexOf(c)-1] == 'o' || test_str[test_str.indexOf(c)-1] == 'u' || test_str[test_str.indexOf(c)+1] == 'a' || test_str[test_str.indexOf(c)+1] == 'e' || test_str[test_str.indexOf(c)+1] == 'i' || test_str[test_str.indexOf(c)+1] == 'o' || test_str[test_str.indexOf(c)+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "/tmp/tmpq22cll9e.d(33): Error: found `unittest` instead of statement\n/tmp/tmpq22cll9e.d(41): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpq22cll9e.d(41): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpq22cll9e.d(41): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpq22cll9e.d(41): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq22cll9e.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong len = test_str.length;\n\t\n\tforeach(i; 0 .. len)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if(i == len-1)\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "/tmp/tmpztkwwmoc.d(38): Error: unterminated character constant\n/tmp/tmpztkwwmoc.d(39): Error: found `unittest` when expecting `)`\n/tmp/tmpztkwwmoc.d(47): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpztkwwmoc.d(47): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpztkwwmoc.d(47): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpztkwwmoc.d(47): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpztkwwmoc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong i = 0;\n\tlong len = test_str.length;\n\twhile (i < len) \n\t{\n\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t{\n\t\t\tif (i == 0) \n\t\t\t{\n\t\t\t\tif (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (i == len - 1) \n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u' || test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "/tmp/tmpwci597b7.d(39): Error: found `unittest` instead of statement\n/tmp/tmpwci597b7.d(47): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwci597b7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp6wqp902z.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x427d9d]\n??:? void tmp6wqp902z.__unittest_L19_C1() [0x427ab6]\n??:? void tmp6wqp902z.__modtest() [0x427b20]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bac3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a956]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fae9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a92d]\n??:? runModuleUnitTests [0x42b899]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281ec]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(count == 0)\n\t\t\t{\n\t\t\t\tif(test_str[1] == 'a' || test_str[1] == 'e' || test_str[1] == 'i' || test_str[1] == 'o' || test_str[1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(test_str[count - 1] == 'a' || test_str[count - 1] == 'e' || test_str[count - 1] == 'i' || test_str[count - 1] == 'o' || test_str[count - 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpmqzdinen.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x427f25]\n??:? void tmpmqzdinen.__unittest_L32_C1() [0x427c3a]\n??:? void tmpmqzdinen.__modtest() [0x427ca4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bcbf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab52]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fce5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430194]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fc71]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab29]\n??:? runModuleUnitTests [0x42ba95]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283e8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong i;\n\tlong length = test_str.length;\n\tfor (i = 0; i < length; i++) \n\t{\n\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t{\n\t\t\tif (i == 0) \n\t\t\t{\n\t\t\t\tif (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t} \n\t\t\telse if (i == length - 1) \n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u' || test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "/tmp/tmp28hr4ktl.d(38): Error: found `unittest` instead of statement\n/tmp/tmp28hr4ktl.d(46): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp28hr4ktl.d(46): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp28hr4ktl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong i = 0;\n\tlong len = test_str.length;\n\t\n\twhile (i < len)\n\t{\n\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t{\n\t\t\tif (i == 0)\n\t\t\t{\n\t\t\t\tif (test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (i == len-1)\n\t\t\t{\n\t\t\t\tif (test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' || test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "/tmp/tmp2p4u848t.d(42): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2p4u848t.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong i = 0;\n\tlong len = test_str.length;\n\t\n\tfor (i = 0; i < len; i++) \n\t{\n\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t{\n\t\t\tif (i == 0) \n\t\t\t{\n\t\t\t\tif (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t} \n\t\t\telse if (i == len - 1) \n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u' || test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "/tmp/tmphycmogvm.d(38): Error: found `unittest` instead of statement\n/tmp/tmphycmogvm.d(46): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmphycmogvm.d(46): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmphycmogvm.d(46): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphycmogvm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(i, c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(i > 0 && (test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u'))\n\t\t\t\tcount++;\n\t\t\tif(i < test_str.length-1 && (test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u'))\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5pw98x2w.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x427f35]\n??:? void tmp5pw98x2w.__unittest_L22_C1() [0x427c4a]\n??:? void tmp5pw98x2w.__modtest() [0x427cb4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bccf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab62]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fcf5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4301a4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fc81]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab39]\n??:? runModuleUnitTests [0x42baa5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283f8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong len = test_str.length;\n\tlong i = 0;\n\twhile(i < len) \n\t{\n\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t{\n\t\t\tif(i == 0) \n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(i == len-1) \n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' || test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "/tmp/tmpsgvp6qky.d(39): Error: found `unittest` instead of statement\n/tmp/tmpsgvp6qky.d(47): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsgvp6qky.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong len = test_str.length;\n\tforeach(i,c;test_str)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if(i == len-1)\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1]\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "/tmp/tmpu_y8up_7.d(42): Error: found `unittest` when expecting `)`\n/tmp/tmpu_y8up_7.d(50): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpu_y8up_7.d(50): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpu_y8up_7.d(50): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpu_y8up_7.d(50): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu_y8up_7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach (i, c; test_str) \n\t{\n\t\tif (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') \n\t\t{\n\t\t\tif (i > 0 && (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u')) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tif (i < test_str.length - 1 && (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u')) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp0e13bl3z.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427f35]\n??:? void tmp0e13bl3z.__unittest_L26_C1() [0x427c4a]\n??:? void tmp0e13bl3z.__modtest() [0x427cb4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bccf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab62]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fcf5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4301a4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fc81]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab39]\n??:? runModuleUnitTests [0x42baa5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283f8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == 'a' && test_str[$-1] == 'a')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'e' && test_str[$-1] == 'e')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'i' && test_str[$-1] == 'i')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'o' && test_str[$-1] == 'o')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'u' && test_str[$-1] == 'u')\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp10rywk3h.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x427eed]\n??:? void tmp10rywk3h.__unittest_L28_C1() [0x427c02]\n??:? void tmp10rywk3h.__modtest() [0x427c6c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc87]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab1a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fcad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43015c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fc39]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aaf1]\n??:? runModuleUnitTests [0x42ba5d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283b0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(i, c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(i > 0 && (test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u'))\n\t\t\t\tcount++;\n\t\t\tif(i < test_str.length - 1 && (test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u'))\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpw09cx2h2.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x427f35]\n??:? void tmpw09cx2h2.__unittest_L22_C1() [0x427c4a]\n??:? void tmpw09cx2h2.__modtest() [0x427cb4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bccf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab62]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fcf5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4301a4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fc81]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab39]\n??:? runModuleUnitTests [0x42baa5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283f8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmprn519e0p.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x427dbd]\n??:? void tmprn519e0p.__unittest_L22_C1() [0x427ad6]\n??:? void tmprn519e0p.__modtest() [0x427b40]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bae3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a976]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb09]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa95]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a94d]\n??:? runModuleUnitTests [0x42b8b9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42820c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(i, c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(i > 0 && i < test_str.length - 1)\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t\tcount++;\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(i == 0)\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(i == test_str.length - 1)\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpwzbyl3tn.d(39): unittest failure\n----------------\n??:? _d_unittestp [0x4280c5]\n??:? void tmpwzbyl3tn.__unittest_L35_C1() [0x427dda]\n??:? void tmpwzbyl3tn.__modtest() [0x427e44]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42be5f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42acf2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fe85]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430334]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fe11]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42acc9]\n??:? runModuleUnitTests [0x42bc35]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428588]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong len = test_str.length;\n\tfor (long i = 0; i < len; i++) {\n\t\tif (i == 0) {\n\t\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') {\n\t\t\t\tif (test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u') {\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (i == len-1) {\n\t\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') {\n\t\t\t\tif (test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u') {\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') {\n\t\t\t\tif (test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u') {\n\t\t\t\t\tcount++;\n\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "/tmp/tmpb7t9ncxu.d(29): Error: found `unittest` instead of statement\n/tmp/tmpb7t9ncxu.d(37): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpb7t9ncxu.d(37): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpb7t9ncxu.d(37): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpb7t9ncxu.d(37): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb7t9ncxu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong i = 0;\n\tlong len = test_str.length;\n\t\n\twhile(i < len) \n\t{\n\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t{\n\t\t\tif(i == 0) \n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(i == len-1) \n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u') \n\t\t\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "/tmp/tmpkav2kuax.d(39): Error: found `unittest` instead of statement\n/tmp/tmpkav2kuax.d(47): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpkav2kuax.d(47): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpkav2kuax.d(47): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkav2kuax.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong len = test_str.length;\n\tfor (long i = 0; i < len; i++) \n\t{\n\t\tif (i == 0 && (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')) \n\t\t{\n\t\t\tcount++;\n\t\t} \n\t\telse if (i == len - 1 && (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')) \n\t\t{\n\t\t\tcount++;\n\t\t} \n\t\telse if (i > 0 && i < len - 1 && (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')) \n\t\t{\n\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u' || test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u') \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpx3phvd6t.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x428135]\n??:? void tmpx3phvd6t.__unittest_L31_C1() [0x427e4a]\n??:? void tmpx3phvd6t.__modtest() [0x427eb4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42becf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ad62]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fef5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4303a4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fe81]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ad39]\n??:? runModuleUnitTests [0x42bca5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285f8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong result = 0;\n\tlong i = 0;\n\tlong len = test_str.length;\n\twhile (i < len) \n\t{\n\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t{\n\t\t\tif (i < len - 1 && (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u')) \n\t\t\t{\n\t\t\t\tresult++;\n\t\t\t}\n\t\t\tif (i > 0 && (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u')) \n\t\t\t{\n\t\t\t\tresult++;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpctlioi8s.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x427f85]\n??:? void tmpctlioi8s.__unittest_L29_C1() [0x427c9a]\n??:? void tmpctlioi8s.__modtest() [0x427d04]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bd1f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42abb2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fd45]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4301f4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fcd1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab89]\n??:? runModuleUnitTests [0x42baf5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428448]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == test_str[0])\n\t\t\t{\n\t\t\t\tif(test_str[1] == 'a' || test_str[1] == 'e' || test_str[1] == 'i' || test_str[1] == 'o' || test_str[1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(c == test_str[$-1])\n\t\t\t{\n\t\t\t\tif(test_str[$-2] == 'a' || test_str[$-2] == 'e' || test_str[$-2] == 'i' || test_str[$-2] == 'o' || test_str[$-2] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(test_str[test_str.indexOf(c)-1] == 'a' || test_str[test_str.indexOf(c)-1] == 'e' || test_str[test_str.indexOf(c)-1] == 'i' || test_str[test_str.indexOf(c)-1] == 'o' || test_str[test_str.indexOf(c)-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tif(test_str[test_str.indexOf(c)+1] == 'a' || test_str[test_str.indexOf(c)+1] == 'e' || test_str[test_str.indexOf(c)+1] == 'i' || test_str[test_str.indexOf(c)+1] == 'o' || test_str[test_str.indexOf(c)+1] == '\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "/tmp/tmprqu7coge.d(32): Error: unterminated character constant\n/tmp/tmprqu7coge.d(33): Error: found `unittest` when expecting `)`\n/tmp/tmprqu7coge.d(41): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmprqu7coge.d(41): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmprqu7coge.d(41): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmprqu7coge.d(41): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmprqu7coge.d(41): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprqu7coge.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong len = test_str.length;\n\tfor (long i = 0; i < len; i++) \n\t{\n\t\tif (i == 0) \n\t\t{\n\t\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t\t{\n\t\t\t\tif (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if (i == len - 1) \n\t\t{\n\t\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse \n\t\t{\n\t\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' ||\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "/tmp/tmp0013ymtr.d(38): Error: expression expected, not `unittest`\n/tmp/tmp0013ymtr.d(39): Error: found `{` when expecting `)`\n/tmp/tmp0013ymtr.d(46): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp0013ymtr.d(46): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp0013ymtr.d(46): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0013ymtr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\t\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == 'a' && test_str[$-1] == 'a')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'e' && test_str[$-1] == 'e')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'i' && test_str[$-1] == 'i')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'o' && test_str[$-1] == 'o')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'u' && test_str[$-1] == 'u')\n\t\t\t\tcount++;\n\t\t}\n\t}\n\t\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpbkol8j3e.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427eed]\n??:? void tmpbkol8j3e.__unittest_L30_C1() [0x427c02]\n??:? void tmpbkol8j3e.__modtest() [0x427c6c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc87]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab1a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fcad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43015c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fc39]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aaf1]\n??:? runModuleUnitTests [0x42ba5d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283b0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp6wqp902z.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x427d9d]\n??:? void tmp6wqp902z.__unittest_L19_C1() [0x427ab6]\n??:? void tmp6wqp902z.__modtest() [0x427b20]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bac3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a956]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fae9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a92d]\n??:? runModuleUnitTests [0x42b899]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281ec]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong len = test_str.length;\n\tforeach(i; 0 .. len)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if(i == len - 1)\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' ||\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "/tmp/tmpywp2fc7g.d(38): Error: expression expected, not `unittest`\n/tmp/tmpywp2fc7g.d(39): Error: found `{` when expecting `)`\n/tmp/tmpywp2fc7g.d(46): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpywp2fc7g.d(46): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpywp2fc7g.d(46): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpywp2fc7g.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tfor (int i = 0; i < test_str.length; i++) \n\t{\n\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t{\n\t\t\tif (i == 0) \n\t\t\t{\n\t\t\t\tif (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (i == test_str.length - 1) \n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u' || test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "/tmp/tmp4cs2nh1s.d(38): Error: expression expected, not `unittest`\n/tmp/tmp4cs2nh1s.d(39): Error: found `{` when expecting `;` following `return` statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4cs2nh1s.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == 'a' && (test_str[$-1] == 'e' || test_str[$-1] == 'i' || test_str[$-1] == 'o' || test_str[$-1] == 'u'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'e' && (test_str[$-1] == 'a' || test_str[$-1] == 'i' || test_str[$-1] == 'o' || test_str[$-1] == 'u'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'i' && (test_str[$-1] == 'a' || test_str[$-1] == 'e' || test_str[$-1] == 'o' || test_str[$-1] == 'u'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'o' && (test_str[$-1] == 'a' || test_str[$-1] == 'e' || test_str[$-1] == 'i' || test_str[$-1] == 'u'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'u' && (test_str[$-1] == 'a' || test_str[$-1] == 'e' || test_str[$-1] == 'i' || test_str[$-1] == 'o'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpvbagq7bf.d(42): unittest failure\n----------------\n??:? _d_unittestp [0x42817d]\n??:? void tmpvbagq7bf.__unittest_L38_C1() [0x427e92]\n??:? void tmpvbagq7bf.__modtest() [0x427efc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bf17]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42adaa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ff3d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4303ec]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fec9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ad81]\n??:? runModuleUnitTests [0x42bced]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428640]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == 'a' && (test_str[$-1] == 'e' || test_str[$-1] == 'i' || test_str[$-1] == 'o' || test_str[$-1] == 'u'))\n\t\t\t\tcount++;\n\t\t\telse if(c == 'e' && (test_str[$-1] == 'a' || test_str[$-1] == 'i' || test_str[$-1] == 'o' || test_str[$-1] == 'u'))\n\t\t\t\tcount++;\n\t\t\telse if(c == 'i' && (test_str[$-1] == 'a' || test_str[$-1] == 'e' || test_str[$-1] == 'o' || test_str[$-1] == 'u'))\n\t\t\t\tcount++;\n\t\t\telse if(c == 'o' && (test_str[$-1] == 'a' || test_str[$-1] == 'e' || test_str[$-1] == 'i' || test_str[$-1] == 'u'))\n\t\t\t\tcount++;\n\t\t\telse if(c == 'u' && (test_str[$-1] == 'a' || test_str[$-1] == 'e' || test_str[$-1] == 'i' || test_str[$-1] == 'o'))\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpvgcnqib5.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x42817d]\n??:? void tmpvgcnqib5.__unittest_L28_C1() [0x427e92]\n??:? void tmpvgcnqib5.__modtest() [0x427efc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bf17]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42adaa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ff3d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4303ec]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fec9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ad81]\n??:? runModuleUnitTests [0x42bced]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428640]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong i = 0;\n\tlong len = test_str.length;\n\twhile (i < len)\n\t{\n\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t{\n\t\t\tif (i == 0)\n\t\t\t{\n\t\t\t\tif (test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (i == len - 1)\n\t\t\t{\n\t\t\t\tif (test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' || test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "/tmp/tmpckd3vjf5.d(41): Error: expression expected, not `unittest`\n/tmp/tmpckd3vjf5.d(42): Error: found `{` when expecting `;` following `return` statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpckd3vjf5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == test_str[0])\n\t\t\t{\n\t\t\t\tif(test_str[1] == 'a' || test_str[1] == 'e' || test_str[1] == 'i' || test_str[1] == 'o' || test_str[1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(c == test_str[$-1])\n\t\t\t{\n\t\t\t\tif(test_str[$-2] == 'a' || test_str[$-2] == 'e' || test_str[$-2] == 'i' || test_str[$-2] == 'o' || test_str[$-2] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(test_str[test_str.indexOf(c)-1] == 'a' || test_str[test_str.indexOf(c)-1] == 'e' || test_str[test_str.indexOf(c)-1] == 'i' || test_str[test_str.indexOf(c)-1] == 'o' || test_str[test_str.indexOf(c)-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tif(test_str[test_str.indexOf(c)+1] == 'a' || test_str[test_str.indexOf(c)+1] == 'e' || test_str[test_str.indexOf(c)+1] == 'i' || test_str[test_str.indexOf(c)+1] == 'o' || test_str[test_str.indexOf(c)+1] == '\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "/tmp/tmprqu7coge.d(32): Error: unterminated character constant\n/tmp/tmprqu7coge.d(33): Error: found `unittest` when expecting `)`\n/tmp/tmprqu7coge.d(41): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmprqu7coge.d(41): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmprqu7coge.d(41): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmprqu7coge.d(41): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmprqu7coge.d(41): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprqu7coge.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == test_str[0] || c == test_str[$-1])\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(test_str[test_str.indexOf(c)-1] == 'a' || test_str[test_str.indexOf(c)-1] == 'e' || test_str[test_str.indexOf(c)-1] == 'i' || test_str[test_str.indexOf(c)-1] == 'o' || test_str[test_str.indexOf(c)-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t\tif(test_str[test_str.indexOf(c)+1] == 'a' || test_str[test_str.indexOf(c)+1] == 'e' || test_str[test_str.indexOf(c)+1] == 'i' || test_str[test_str.indexOf(c)+1] == 'o' || test_str[test_str.indexOf(c)+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "/tmp/tmpmw0p58v9.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmpmw0p58v9.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmpmw0p58v9.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmpmw0p58v9.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmpmw0p58v9.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmpmw0p58v9.d(24): Error: no property `indexOf` for type `string`\n/tmp/tmpmw0p58v9.d(24): Error: no property `indexOf` for type `string`\n/tmp/tmpmw0p58v9.d(24): Error: no property `indexOf` for type `string`\n/tmp/tmpmw0p58v9.d(24): Error: no property `indexOf` for type `string`\n/tmp/tmpmw0p58v9.d(24): Error: no property `indexOf` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmw0p58v9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp6wqp902z.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x427d9d]\n??:? void tmp6wqp902z.__unittest_L19_C1() [0x427ab6]\n??:? void tmp6wqp902z.__modtest() [0x427b20]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bac3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a956]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fae9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a92d]\n??:? runModuleUnitTests [0x42b899]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281ec]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(char c; test_str) {\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n\t\t\tif(c == test_str[0]) {\n\t\t\t\tif(test_str[1] == 'a' || test_str[1] == 'e' || test_str[1] == 'i' || test_str[1] == 'o' || test_str[1] == 'u') {\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(c == test_str[$-1]) {\n\t\t\t\tif(test_str[$-2] == 'a' || test_str[$-2] == 'e' || test_str[$-2] == 'i' || test_str[$-2] == 'o' || test_str[$-2] == 'u') {\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif(test_str[$-1] == 'a' || test_str[$-1] == 'e' || test_str[$-1] == 'i' || test_str[$-1] == 'o' || test_str[$-1] == 'u') {\n\t\t\t\t\tif(test_str[1] == 'a' || test_str[1] == 'e' || test_str[1] == 'i' || test_str[1] == 'o' || test_str[1] == 'u') {\n\t\t\t\t\t\tcount++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp2jey7esw.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x42814d]\n??:? void tmp2jey7esw.__unittest_L33_C1() [0x427e62]\n??:? void tmp2jey7esw.__modtest() [0x427ecc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bee7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ad7a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ff0d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4303bc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fe99]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ad51]\n??:? runModuleUnitTests [0x42bcbd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428610]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tfor (int i = 0; i < test_str.length; i++)\n\t{\n\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t{\n\t\t\tif (i == 0)\n\t\t\t{\n\t\t\t\tif (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (i == test_str.length - 1)\n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u' || test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpefz70o2f.d(43): unittest failure\n----------------\n??:? _d_unittestp [0x42812d]\n??:? void tmpefz70o2f.__unittest_L39_C1() [0x427e46]\n??:? void tmpefz70o2f.__modtest() [0x427eb0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bec7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ad5a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42feed]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43039c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fe79]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ad31]\n??:? runModuleUnitTests [0x42bc9d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285f0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == 'a')\n\t\t\t{\n\t\t\t\tif(c+1 == 'e' || c+1 == 'i' || c+1 == 'o' || c+1 == 'u')\n\t\t\t\t\tcount++;\n\t\t\t\tif(c-1 == 'e' || c-1 == 'i' || c-1 == 'o' || c-1 == 'u')\n\t\t\t\t\tcount++;\n\t\t\t}\n\t\t\tif(c == 'e')\n\t\t\t{\n\t\t\t\tif(c+1 == 'a' || c+1 == 'i' || c+1 == 'o' || c+1 == 'u')\n\t\t\t\t\tcount++;\n\t\t\t\tif(c-1 == 'a' || c-1 == 'i' || c-1 == 'o' || c-1 == 'u')\n\t\t\t\t\tcount++;\n\t\t\t}\n\t\t\tif(c == 'i')\n\t\t\t{\n\t\t\t\tif(c+1 == 'a' || c+1 == 'e' || c+1 == 'o' || c+1 == 'u')\n\t\t\t\t\tcount++;\n\t\t\t\tif(c-1 == 'a' || c-1 == 'e' || c-1 == 'o' || c-1 == 'u')\n\t\t\t\t\tcount++;\n\t\t\t}\n\t\t\tif(c == 'o')\n\t\t\t{\n\t\t\t\tif(c+1 == 'a' || c+1 == 'e' || c+1 == 'i' || c+1 == 'u')\n\t\t\t\t\tcount++;\n\t\t\t\tif(c-1 == 'a' || c-1 == 'e' || c-1 == 'i' || c-1 == 'u')\n\t\t\t\t\tcount++;\n\t\t\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "/tmp/tmp6cf4kpc9.d(42): Error: found `unittest` instead of statement\n/tmp/tmp6cf4kpc9.d(50): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp6cf4kpc9.d(50): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp6cf4kpc9.d(50): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6cf4kpc9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == test_str[0] || c == test_str[$-1])\n\t\t\t\tcontinue;\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(test_str[test_str.indexOf(c)-1] == 'a' || test_str[test_str.indexOf(c)-1] == 'e' || test_str[test_str.indexOf(c)-1] == 'i' || test_str[test_str.indexOf(c)-1] == 'o' || test_str[test_str.indexOf(c)-1] == 'u')\n\t\t\t\t\tcount++;\n\t\t\t\tif(test_str[test_str.indexOf(c)+1] == 'a' || test_str[test_str.indexOf(c)+1] == 'e' || test_str[test_str.indexOf(c)+1] == 'i' || test_str[test_str.indexOf(c)+1] == 'o' || test_str[test_str.indexOf(c)+1] == 'u')\n\t\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "/tmp/tmpe9obdmks.d(18): Error: no property `indexOf` for type `string`\n/tmp/tmpe9obdmks.d(18): Error: no property `indexOf` for type `string`\n/tmp/tmpe9obdmks.d(18): Error: no property `indexOf` for type `string`\n/tmp/tmpe9obdmks.d(18): Error: no property `indexOf` for type `string`\n/tmp/tmpe9obdmks.d(18): Error: no property `indexOf` for type `string`\n/tmp/tmpe9obdmks.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmpe9obdmks.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmpe9obdmks.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmpe9obdmks.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmpe9obdmks.d(20): Error: no property `indexOf` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe9obdmks.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong len = test_str.length;\n\tforeach(i; 0..len)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if(i == len-1)\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' ||\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "/tmp/tmphs3riksj.d(38): Error: expression expected, not `unittest`\n/tmp/tmphs3riksj.d(39): Error: found `{` when expecting `)`\n/tmp/tmphs3riksj.d(46): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmphs3riksj.d(46): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmphs3riksj.d(46): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphs3riksj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tint i = 0;\n\twhile (i < test_str.length)\n\t{\n\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t{\n\t\t\tif (i != 0 && i != test_str.length - 1)\n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t\tif (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (i == 0)\n\t\t\t{\n\t\t\t\tif (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (i == test_str.length - 1)\n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u')\n\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "/tmp/tmpl42l83tt.d(37): Error: found `unittest` instead of statement\n/tmp/tmpl42l83tt.d(45): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpl42l83tt.d(45): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpl42l83tt.d(45): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl42l83tt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong i = 0;\n\tlong len = test_str.length;\n\t\n\tfor(i = 0; i < len; i++)\n\t{\n\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t{\n\t\t\tif(i == 0)\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(i == len - 1)\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' || test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "/tmp/tmpf8ado_eh.d(40): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf8ado_eh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong len = test_str.length;\n\tforeach(i; 0 .. len)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if(i == len-1)\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' ||\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "/tmp/tmpj5kp7mlu.d(38): Error: expression expected, not `unittest`\n/tmp/tmpj5kp7mlu.d(39): Error: found `{` when expecting `)`\n/tmp/tmpj5kp7mlu.d(46): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpj5kp7mlu.d(46): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpj5kp7mlu.d(46): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj5kp7mlu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(test_str.indexOf(c) == 0)\n\t\t\t{\n\t\t\t\tif(test_str[1] == 'a' || test_str[1] == 'e' || test_str[1] == 'i' || test_str[1] == 'o' || test_str[1] == 'u')\n\t\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(test_str.indexOf(c) == test_str.length - 1)\n\t\t\t{\n\t\t\t\tif(test_str[test_str.length - 2] == 'a' || test_str[test_str.length - 2] == 'e' || test_str[test_str.length - 2] == 'i' || test_str[test_str.length - 2] == 'o' || test_str[test_str.length - 2] == 'u')\n\t\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(test_str[test_str.indexOf(c) - 1] == 'a' || test_str[test_str.indexOf(c) - 1] == 'e' || test_str[test_str.indexOf(c) - 1] == 'i' || test_str[test_str.indexOf(c) - 1] == 'o' || test_str[test_str.indexOf(c) - 1] == 'u')\n\t\t\t\t\tcount++;\n\t\t\t\tif(test_str[test_str.indexOf(c) + 1] == 'a' || test_str[test_str.indexOf(c) + 1] == 'e' || test_str[test_str.indexOf(c) + 1] == 'i' || test_str[test_str.indexOf(c) + 1] == 'o'\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "/tmp/tmpp_flz5tg.d(29): Error: found `unittest` when expecting `)`\n/tmp/tmpp_flz5tg.d(37): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpp_flz5tg.d(37): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpp_flz5tg.d(37): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpp_flz5tg.d(37): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp_flz5tg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == 'a' && test_str[$-1] == 'a')\n\t\t\t\tcount++;\n\t\t\tif(c == 'e' && test_str[$-1] == 'e')\n\t\t\t\tcount++;\n\t\t\tif(c == 'i' && test_str[$-1] == 'i')\n\t\t\t\tcount++;\n\t\t\tif(c == 'o' && test_str[$-1] == 'o')\n\t\t\t\tcount++;\n\t\t\tif(c == 'u' && test_str[$-1] == 'u')\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmptsv2xhgu.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x427ed5]\n??:? void tmptsv2xhgu.__unittest_L28_C1() [0x427bee]\n??:? void tmptsv2xhgu.__modtest() [0x427c58]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc6f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab02]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc95]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430144]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fc21]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aad9]\n??:? runModuleUnitTests [0x42ba45]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428398]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong length = test_str.length;\n\tforeach (i; 0 .. length)\n\t{\n\t\tif (i == 0)\n\t\t{\n\t\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if (i == length - 1)\n\t\t{\n\t\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' ||\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "/tmp/tmpxan88pt3.d(38): Error: expression expected, not `unittest`\n/tmp/tmpxan88pt3.d(39): Error: found `{` when expecting `)`\n/tmp/tmpxan88pt3.d(46): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpxan88pt3.d(46): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpxan88pt3.d(46): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxan88pt3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tfor (int i = 0; i < test_str.length; i++) \n\t{\n\t\tif (i == 0) \n\t\t{\n\t\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t\t{\n\t\t\t\tif (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if (i == test_str.length - 1) \n\t\t{\n\t\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse \n\t\t{\n\t\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "/tmp/tmpd9e8zsvr.d(37): Error: found `unittest` when expecting `)`\n/tmp/tmpd9e8zsvr.d(45): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpd9e8zsvr.d(45): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpd9e8zsvr.d(45): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpd9e8zsvr.d(45): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd9e8zsvr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tfor (long i = 0; i < test_str.length; i++)\n\t{\n\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t{\n\t\t\tif (i > 0 && (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tif (i < test_str.length - 1 && (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp2dym5tpn.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427f85]\n??:? void tmp2dym5tpn.__unittest_L26_C1() [0x427c9a]\n??:? void tmp2dym5tpn.__modtest() [0x427d04]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bd1f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42abb2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fd45]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4301f4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fcd1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab89]\n??:? runModuleUnitTests [0x42baf5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428448]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong len = test_str.length;\n\tforeach(i, c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(i > 0)\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(i < len-1)\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpzm_ly7aa.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x427f2d]\n??:? void tmpzm_ly7aa.__unittest_L33_C1() [0x427c42]\n??:? void tmpzm_ly7aa.__modtest() [0x427cac]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bcc7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab5a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fced]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43019c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fc79]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab31]\n??:? runModuleUnitTests [0x42ba9d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283f0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong len = test_str.length;\n\tfor (long i = 0; i < len; i++) \n\t{\n\t\tif (i == 0) \n\t\t{\n\t\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t\t{\n\t\t\t\tif (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t} \n\t\telse if (i == len - 1) \n\t\t{\n\t\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t\t{\n\t\t\t\tif (test_str[i + 1] == 'a' || test_str[i + 1] == 'e\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "/tmp/tmpte3k3y8i.d(37): Error: unterminated character constant\n/tmp/tmpte3k3y8i.d(38): Error: found `unittest` when expecting `)`\n/tmp/tmpte3k3y8i.d(46): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpte3k3y8i.d(46): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpte3k3y8i.d(46): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpte3k3y8i.d(46): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpte3k3y8i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong i = 0;\n\tlong len = test_str.length;\n\twhile(i < len) {\n\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') {\n\t\t\tif(i > 0 && (test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tif(i < len-1 && (test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp38z0mtdp.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x427f85]\n??:? void tmp38z0mtdp.__unittest_L25_C1() [0x427c9e]\n??:? void tmp38z0mtdp.__modtest() [0x427d08]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bd1f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42abb2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fd45]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4301f4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fcd1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab89]\n??:? runModuleUnitTests [0x42baf5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428448]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong len = test_str.length;\n\t\n\tforeach(i; 0 .. len)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if(i == len-1)\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "/tmp/tmph91pb_3r.d(38): Error: unterminated character constant\n/tmp/tmph91pb_3r.d(39): Error: found `unittest` when expecting `)`\n/tmp/tmph91pb_3r.d(47): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmph91pb_3r.d(47): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmph91pb_3r.d(47): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmph91pb_3r.d(47): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph91pb_3r.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == 'a' && test_str[$-1] == 'a')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'e' && test_str[$-1] == 'e')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'i' && test_str[$-1] == 'i')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'o' && test_str[$-1] == 'o')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'u' && test_str[$-1] == 'u')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp9psr6tn3.d(42): unittest failure\n----------------\n??:? _d_unittestp [0x427eed]\n??:? void tmp9psr6tn3.__unittest_L38_C1() [0x427c02]\n??:? void tmp9psr6tn3.__modtest() [0x427c6c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc87]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab1a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fcad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43015c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fc39]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aaf1]\n??:? runModuleUnitTests [0x42ba5d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283b0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong len = test_str.length;\n\tfor (long i = 0; i < len; i++) \n\t{\n\t\tif (i == 0) \n\t\t{\n\t\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t\t{\n\t\t\t\tif (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t} \n\t\telse if (i == len - 1) \n\t\t{\n\t\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "/tmp/tmptelwajg7.d(37): Error: unterminated character constant\n/tmp/tmptelwajg7.d(38): Error: found `unittest` when expecting `)`\n/tmp/tmptelwajg7.d(46): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmptelwajg7.d(46): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmptelwajg7.d(46): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmptelwajg7.d(46): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptelwajg7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong len = test_str.length;\n\tforeach(i; 0 .. len)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if(i == len-1)\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' ||\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "/tmp/tmpj5kp7mlu.d(38): Error: expression expected, not `unittest`\n/tmp/tmpj5kp7mlu.d(39): Error: found `{` when expecting `)`\n/tmp/tmpj5kp7mlu.d(46): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpj5kp7mlu.d(46): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpj5kp7mlu.d(46): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj5kp7mlu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong i = 0;\n\tlong len = test_str.length;\n\t\n\twhile (i < len) \n\t{\n\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t{\n\t\t\tif (i == 0) \n\t\t\t{\n\t\t\t\tif (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (i == len - 1) \n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u' || test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "/tmp/tmpxoa67nw3.d(40): Error: found `unittest` instead of statement\n/tmp/tmpxoa67nw3.d(48): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxoa67nw3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == 'a' && (test_str[$-1] == 'e' || test_str[$-1] == 'i' || test_str[$-1] == 'o' || test_str[$-1] == 'u'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'e' && (test_str[$-1] == 'a' || test_str[$-1] == 'i' || test_str[$-1] == 'o' || test_str[$-1] == 'u'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'i' && (test_str[$-1] == 'a' || test_str[$-1] == 'e' || test_str[$-1] == 'o' || test_str[$-1] == 'u'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'o' && (test_str[$-1] == 'a' || test_str[$-1] == 'e' || test_str[$-1] == 'i' || test_str[$-1] == 'u'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'u' && (test_str[$-1] == 'a' || test_str[$-1] == 'e' || test_str[$-1] == 'i' || test_str[$-1] == 'o'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpvbagq7bf.d(42): unittest failure\n----------------\n??:? _d_unittestp [0x42817d]\n??:? void tmpvbagq7bf.__unittest_L38_C1() [0x427e92]\n??:? void tmpvbagq7bf.__modtest() [0x427efc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bf17]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42adaa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ff3d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4303ec]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fec9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ad81]\n??:? runModuleUnitTests [0x42bced]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428640]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == 'a' && (test_str[$-1] == 'e' || test_str[$-1] == 'i' || test_str[$-1] == 'o' || test_str[$-1] == 'u'))\n\t\t\t\tcount++;\n\t\t\telse if(c == 'e' && (test_str[$-1] == 'a' || test_str[$-1] == 'i' || test_str[$-1] == 'o' || test_str[$-1] == 'u'))\n\t\t\t\tcount++;\n\t\t\telse if(c == 'i' && (test_str[$-1] == 'a' || test_str[$-1] == 'e' || test_str[$-1] == 'o' || test_str[$-1] == 'u'))\n\t\t\t\tcount++;\n\t\t\telse if(c == 'o' && (test_str[$-1] == 'a' || test_str[$-1] == 'e' || test_str[$-1] == 'i' || test_str[$-1] == 'u'))\n\t\t\t\tcount++;\n\t\t\telse if(c == 'u' && (test_str[$-1] == 'a' || test_str[$-1] == 'e' || test_str[$-1] == 'i' || test_str[$-1] == 'o'))\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpvgcnqib5.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x42817d]\n??:? void tmpvgcnqib5.__unittest_L28_C1() [0x427e92]\n??:? void tmpvgcnqib5.__modtest() [0x427efc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bf17]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42adaa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ff3d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4303ec]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fec9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ad81]\n??:? runModuleUnitTests [0x42bced]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428640]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong len = test_str.length;\n\tforeach(i; 0 .. len)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if(i == len - 1)\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' ||\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "/tmp/tmpumv_1rei.d(38): Error: expression expected, not `unittest`\n/tmp/tmpumv_1rei.d(39): Error: found `{` when expecting `)`\n/tmp/tmpumv_1rei.d(46): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpumv_1rei.d(46): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpumv_1rei.d(46): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpumv_1rei.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == test_str[0] || c == test_str[$-1])\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(test_str[test_str.indexOf(c)-1] == 'a' || test_str[test_str.indexOf(c)-1] == 'e' || test_str[test_str.indexOf(c)-1] == 'i' || test_str[test_str.indexOf(c)-1] == 'o' || test_str[test_str.indexOf(c)-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t\tif(test_str[test_str.indexOf(c)+1] == 'a' || test_str[test_str.indexOf(c)+1] == 'e' || test_str[test_str.indexOf(c)+1] == 'i' || test_str[test_str.indexOf(c)+1] == 'o' || test_str[test_str.indexOf(c)+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "/tmp/tmpjqfnezjt.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmpjqfnezjt.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmpjqfnezjt.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmpjqfnezjt.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmpjqfnezjt.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmpjqfnezjt.d(24): Error: no property `indexOf` for type `string`\n/tmp/tmpjqfnezjt.d(24): Error: no property `indexOf` for type `string`\n/tmp/tmpjqfnezjt.d(24): Error: no property `indexOf` for type `string`\n/tmp/tmpjqfnezjt.d(24): Error: no property `indexOf` for type `string`\n/tmp/tmpjqfnezjt.d(24): Error: no property `indexOf` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjqfnezjt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == test_str[0] || c == test_str[$-1])\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(test_str[test_str.indexOf(c)-1] == 'a' || test_str[test_str.indexOf(c)-1] == 'e' || test_str[test_str.indexOf(c)-1] == 'i' || test_str[test_str.indexOf(c)-1] == 'o' || test_str[test_str.indexOf(c)-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t\tif(test_str[test_str.indexOf(c)+1] == 'a' || test_str[test_str.indexOf(c)+1] == 'e' || test_str[test_str.indexOf(c)+1] == 'i' || test_str[test_str.indexOf(c)+1] == 'o' || test_str[test_str.indexOf(c)+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "/tmp/tmpmw0p58v9.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmpmw0p58v9.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmpmw0p58v9.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmpmw0p58v9.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmpmw0p58v9.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmpmw0p58v9.d(24): Error: no property `indexOf` for type `string`\n/tmp/tmpmw0p58v9.d(24): Error: no property `indexOf` for type `string`\n/tmp/tmpmw0p58v9.d(24): Error: no property `indexOf` for type `string`\n/tmp/tmpmw0p58v9.d(24): Error: no property `indexOf` for type `string`\n/tmp/tmpmw0p58v9.d(24): Error: no property `indexOf` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmw0p58v9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong len = test_str.length;\n\tfor (long i = 0; i < len; i++) \n\t{\n\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t{\n\t\t\tif (i > 0 && (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u')) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tif (i < len - 1 && (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u')) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpoq7yntp3.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x427f85]\n??:? void tmpoq7yntp3.__unittest_L27_C1() [0x427c9e]\n??:? void tmpoq7yntp3.__modtest() [0x427d08]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bd1f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42abb2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fd45]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4301f4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fcd1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab89]\n??:? runModuleUnitTests [0x42baf5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428448]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == test_str[0] || c == test_str[$-1])\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse if(test_str[test_str.indexOf(c)-1] == 'a' || test_str[test_str.indexOf(c)-1] == 'e' || test_str[test_str.indexOf(c)-1] == 'i' || test_str[test_str.indexOf(c)-1] == 'o' || test_str[test_str.indexOf(c)-1] == 'u' || test_str[test_str.indexOf(c)+1] == 'a' || test_str[test_str.indexOf(c)+1] == 'e' || test_str[test_str.indexOf(c)+1] == 'i' || test_str[test_str.indexOf(c)+1] == 'o' || test_str[test_str.indexOf(c)+1] == 'u')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "/tmp/tmp2tsbslei.d(18): Error: no property `indexOf` for type `string`\n/tmp/tmp2tsbslei.d(18): Error: no property `indexOf` for type `string`\n/tmp/tmp2tsbslei.d(18): Error: no property `indexOf` for type `string`\n/tmp/tmp2tsbslei.d(18): Error: no property `indexOf` for type `string`\n/tmp/tmp2tsbslei.d(18): Error: no property `indexOf` for type `string`\n/tmp/tmp2tsbslei.d(18): Error: no property `indexOf` for type `string`\n/tmp/tmp2tsbslei.d(18): Error: no property `indexOf` for type `string`\n/tmp/tmp2tsbslei.d(18): Error: no property `indexOf` for type `string`\n/tmp/tmp2tsbslei.d(18): Error: no property `indexOf` for type `string`\n/tmp/tmp2tsbslei.d(18): Error: no property `indexOf` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2tsbslei.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong len = test_str.length;\n\tforeach(i; 0 .. len)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if(i == len-1)\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' ||\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "/tmp/tmpr3t148c3.d(38): Error: expression expected, not `unittest`\n/tmp/tmpr3t148c3.d(39): Error: found `{` when expecting `)`\n/tmp/tmpr3t148c3.d(46): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpr3t148c3.d(46): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpr3t148c3.d(46): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr3t148c3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == 'a' && (test_str[$-1] == 'e' || test_str[$-1] == 'i' || test_str[$-1] == 'o' || test_str[$-1] == 'u'))\n\t\t\t\tcount++;\n\t\t\telse if(c == 'e' && (test_str[$-1] == 'a' || test_str[$-1] == 'i' || test_str[$-1] == 'o' || test_str[$-1] == 'u'))\n\t\t\t\tcount++;\n\t\t\telse if(c == 'i' && (test_str[$-1] == 'a' || test_str[$-1] == 'e' || test_str[$-1] == 'o' || test_str[$-1] == 'u'))\n\t\t\t\tcount++;\n\t\t\telse if(c == 'o' && (test_str[$-1] == 'a' || test_str[$-1] == 'e' || test_str[$-1] == 'i' || test_str[$-1] == 'u'))\n\t\t\t\tcount++;\n\t\t\telse if(c == 'u' && (test_str[$-1] == 'a' || test_str[$-1] == 'e' || test_str[$-1] == 'i' || test_str[$-1] == 'o'))\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpvgcnqib5.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x42817d]\n??:? void tmpvgcnqib5.__unittest_L28_C1() [0x427e92]\n??:? void tmpvgcnqib5.__modtest() [0x427efc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bf17]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42adaa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ff3d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4303ec]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fec9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ad81]\n??:? runModuleUnitTests [0x42bced]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428640]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong i = 0;\n\tlong len = test_str.length;\n\twhile(i < len)\n\t{\n\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t{\n\t\t\tif(i == 0)\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(i == len-1)\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' || test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "/tmp/tmpad61hpbn.d(41): Error: expression expected, not `unittest`\n/tmp/tmpad61hpbn.d(42): Error: found `{` when expecting `;` following `return` statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpad61hpbn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong i = 0;\n\tlong len = test_str.length;\n\tchar[] vowels = ['a', 'e', 'i', 'o', 'u'];\n\t\n\twhile (i < len) \n\t{\n\t\tif (test_str[i] in vowels) \n\t\t{\n\t\t\tif (i == 0) \n\t\t\t{\n\t\t\t\tif (test_str[i + 1] in vowels) \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t} \n\t\t\telse if (i == len - 1) \n\t\t\t{\n\t\t\t\tif (test_str[i - 1] in vowels) \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tif (test_str[i - 1] in vowels || test_str[i + 1] in vowels) \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "/tmp/tmp9fzpqg3d.d(16): Error: incompatible types for `(test_str[cast(ulong)i]) in (vowels)`: `immutable(char)` and `char[]`\n/tmp/tmp9fzpqg3d.d(20): Error: incompatible types for `(test_str[cast(ulong)(i + 1L)]) in (vowels)`: `immutable(char)` and `char[]`\n/tmp/tmp9fzpqg3d.d(27): Error: incompatible types for `(test_str[cast(ulong)(i - 1L)]) in (vowels)`: `immutable(char)` and `char[]`\n/tmp/tmp9fzpqg3d.d(34): Error: incompatible types for `(test_str[cast(ulong)(i - 1L)]) in (vowels)`: `immutable(char)` and `char[]`\n/tmp/tmp9fzpqg3d.d(34): Error: incompatible types for `(test_str[cast(ulong)(i + 1L)]) in (vowels)`: `immutable(char)` and `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9fzpqg3d.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong len = test_str.length;\n\tfor (long i = 0; i < len; i++) \n\t{\n\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t{\n\t\t\tif (i == 0) \n\t\t\t{\n\t\t\t\tif (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (i == len - 1) \n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u' || test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "/tmp/tmpzq7n4lqn.d(38): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzq7n4lqn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tfor (long i = 0; i < test_str.length; i++) \n\t{\n\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t{\n\t\t\tif (i == 0) \n\t\t\t{\n\t\t\t\tif (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t} \n\t\t\telse if (i == test_str.length - 1) \n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u' || test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "/tmp/tmptqn0dlg6.d(38): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptqn0dlg6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(c; test_str) \n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') \n\t\t{\n\t\t\tif(c == test_str[0] || c == test_str[$-1]) \n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tif(test_str[test_str.indexOf(c)-1] == 'a' || test_str[test_str.indexOf(c)-1] == 'e' || test_str[test_str.indexOf(c)-1] == 'i' || test_str[test_str.indexOf(c)-1] == 'o' || test_str[test_str.indexOf(c)-1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t\tif(test_str[test_str.indexOf(c)+1] == 'a' || test_str[test_str.indexOf(c)+1] == 'e' || test_str[test_str.indexOf(c)+1] == 'i' || test_str[test_str.indexOf(c)+1] == 'o' || test_str[test_str.indexOf(c)+1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "/tmp/tmpa5mfgqz5.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmpa5mfgqz5.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmpa5mfgqz5.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmpa5mfgqz5.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmpa5mfgqz5.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmpa5mfgqz5.d(24): Error: no property `indexOf` for type `string`\n/tmp/tmpa5mfgqz5.d(24): Error: no property `indexOf` for type `string`\n/tmp/tmpa5mfgqz5.d(24): Error: no property `indexOf` for type `string`\n/tmp/tmpa5mfgqz5.d(24): Error: no property `indexOf` for type `string`\n/tmp/tmpa5mfgqz5.d(24): Error: no property `indexOf` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa5mfgqz5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(char c; test_str) {\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n\t\t\tif(c == 'a') {\n\t\t\t\tif(c+1 == 'e' || c+1 == 'i' || c+1 == 'o' || c+1 == 'u') {\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(c == 'e') {\n\t\t\t\tif(c+1 == 'i' || c+1 == 'o' || c+1 == 'u') {\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(c == 'i') {\n\t\t\t\tif(c+1 == 'o' || c+1 == 'u') {\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(c == 'o') {\n\t\t\t\tif(c+1 == 'u') {\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(c == 'u') {\n\t\t\t\tif(c+1 == 'a' || c+1 == 'e' || c+1 == 'i' || c+1 == 'o' || c+1 == 'u') {\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpv5gi7lg2.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x427e45]\n??:? void tmpv5gi7lg2.__unittest_L41_C1() [0x427b5a]\n??:? void tmpv5gi7lg2.__modtest() [0x427bc4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb6b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb91]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430040]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb1d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9d5]\n??:? runModuleUnitTests [0x42b941]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428294]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == test_str[0])\n\t\t\t{\n\t\t\t\tif(test_str[1] == 'a' || test_str[1] == 'e' || test_str[1] == 'i' || test_str[1] == 'o' || test_str[1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(c == test_str[$-1])\n\t\t\t{\n\t\t\t\tif(test_str[$-2] == 'a' || test_str[$-2] == 'e' || test_str[$-2] == 'i' || test_str[$-2] == 'o' || test_str[$-2] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(test_str[$-1] == 'a' || test_str[$-1] == 'e' || test_str[$-1] == 'i' || test_str[$-1] == 'o' || test_str[$-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t\tif(test_str[1] == 'a' || test_str[1] == 'e' || test_str[1] == 'i' || test_str[1] == 'o' || test_str[1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpg9gmwreg.d(47): unittest failure\n----------------\n??:? _d_unittestp [0x42814d]\n??:? void tmpg9gmwreg.__unittest_L43_C1() [0x427e62]\n??:? void tmpg9gmwreg.__modtest() [0x427ecc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bee7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ad7a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ff0d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4303bc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fe99]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ad51]\n??:? runModuleUnitTests [0x42bcbd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428610]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong i = 0;\n\tlong len = test_str.length;\n\twhile (i < len) \n\t{\n\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t{\n\t\t\tif (i == 0) \n\t\t\t{\n\t\t\t\tif (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t} \n\t\t\telse if (i == len - 1) \n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tif (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u' || test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "/tmp/tmp3ii8bz9k.d(39): Error: found `unittest` instead of statement\n/tmp/tmp3ii8bz9k.d(47): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3ii8bz9k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == test_str[0] || c == test_str[$-1])\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(test_str[test_str.indexOf(c)-1] == 'a' || test_str[test_str.indexOf(c)-1] == 'e' || test_str[test_str.indexOf(c)-1] == 'i' || test_str[test_str.indexOf(c)-1] == 'o' || test_str[test_str.indexOf(c)-1] == 'u' || test_str[test_str.indexOf(c)+1] == 'a' || test_str[test_str.indexOf(c)+1] == 'e' || test_str[test_str.indexOf(c)+1] == 'i' || test_str[test_str.indexOf(c)+1] == 'o' || test_str[test_str.indexOf(c)+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "/tmp/tmp84ti_p9b.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmp84ti_p9b.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmp84ti_p9b.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmp84ti_p9b.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmp84ti_p9b.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmp84ti_p9b.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmp84ti_p9b.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmp84ti_p9b.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmp84ti_p9b.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmp84ti_p9b.d(20): Error: no property `indexOf` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp84ti_p9b.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == 'a' && test_str[$-1] == 'a')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'e' && test_str[$-1] == 'e')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'i' && test_str[$-1] == 'i')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'o' && test_str[$-1] == 'o')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'u' && test_str[$-1] == 'u')\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp10rywk3h.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x427eed]\n??:? void tmp10rywk3h.__unittest_L28_C1() [0x427c02]\n??:? void tmp10rywk3h.__modtest() [0x427c6c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc87]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab1a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fcad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43015c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fc39]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aaf1]\n??:? runModuleUnitTests [0x42ba5d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283b0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong len = test_str.length;\n\tfor (long i = 0; i < len; i++)\n\t{\n\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t{\n\t\t\tif (i > 0 && i < len - 1)\n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u' ||\n\t\t\t\t\ttest_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (i == 0)\n\t\t\t{\n\t\t\t\tif (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (i == len - 1)\n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "/tmp/tmpu2364whe.d(37): Error: found `unittest` instead of statement\n/tmp/tmpu2364whe.d(45): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpu2364whe.d(45): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpu2364whe.d(45): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu2364whe.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong len = test_str.length;\n\tforeach(i; 0 .. len) \n\t{\n\t\tif(i == 0) \n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t\t{\n\t\t\t\tif(test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if(i == len - 1) \n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t\t{\n\t\t\t\tif(test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse \n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t\t{\n\t\t\t\tif(test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "/tmp/tmpsr3ab2kr.d(38): Error: expression expected, not `unittest`\n/tmp/tmpsr3ab2kr.d(39): Error: found `{` when expecting `,`\n/tmp/tmpsr3ab2kr.d(40): Error: expression expected, not `alias`\n/tmp/tmpsr3ab2kr.d(40): Error: found `candidate` when expecting `,`\n/tmp/tmpsr3ab2kr.d(40): Error: expression expected, not `=`\n/tmp/tmpsr3ab2kr.d(40): Error: found `count_vowels` when expecting `,`\n/tmp/tmpsr3ab2kr.d(40): Error: expression expected, not `;`\n/tmp/tmpsr3ab2kr.d(42): Error: found `assert` when expecting `,`\n/tmp/tmpsr3ab2kr.d(42): Error: found `;` when expecting `,`\n/tmp/tmpsr3ab2kr.d(43): Error: found `;` when expecting `,`\n/tmp/tmpsr3ab2kr.d(44): Error: found `;` when expecting `,`\n/tmp/tmpsr3ab2kr.d(45): Error: expression expected, not `}`\n/tmp/tmpsr3ab2kr.d(46): Error: found `void` when expecting `,`\n/tmp/tmpsr3ab2kr.d(46): Error: found `{` when expecting `,`\n/tmp/tmpsr3ab2kr.d(46): Error: expression expected, not `}`\n/tmp/tmpsr3ab2kr.d(46): Error: found `End of File` when expecting `,`\n/tmp/tmpsr3ab2kr",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == 'a' && (test_str[$-1] == 'e' || test_str[$-1] == 'i' || test_str[$-1] == 'o' || test_str[$-1] == 'u'))\n\t\t\t\tcount++;\n\t\t\telse if(c == 'e' && (test_str[$-1] == 'a' || test_str[$-1] == 'i' || test_str[$-1] == 'o' || test_str[$-1] == 'u'))\n\t\t\t\tcount++;\n\t\t\telse if(c == 'i' && (test_str[$-1] == 'a' || test_str[$-1] == 'e' || test_str[$-1] == 'o' || test_str[$-1] == 'u'))\n\t\t\t\tcount++;\n\t\t\telse if(c == 'o' && (test_str[$-1] == 'a' || test_str[$-1] == 'e' || test_str[$-1] == 'i' || test_str[$-1] == 'u'))\n\t\t\t\tcount++;\n\t\t\telse if(c == 'u' && (test_str[$-1] == 'a' || test_str[$-1] == 'e' || test_str[$-1] == 'i' || test_str[$-1] == 'o'))\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpvgcnqib5.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x42817d]\n??:? void tmpvgcnqib5.__unittest_L28_C1() [0x427e92]\n??:? void tmpvgcnqib5.__modtest() [0x427efc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bf17]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42adaa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ff3d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4303ec]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fec9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ad81]\n??:? runModuleUnitTests [0x42bced]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428640]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tfor (long i = 0; i < test_str.length; i++) \n\t{\n\t\tif (i == 0) \n\t\t{\n\t\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t\t{\n\t\t\t\tif (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if (i == test_str.length - 1) \n\t\t{\n\t\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse \n\t\t{\n\t\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t\t{\n\t\t\t\tif (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "/tmp/tmpmstwlyma.d(37): Error: found `unittest` when expecting `)`\n/tmp/tmpmstwlyma.d(45): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpmstwlyma.d(45): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpmstwlyma.d(45): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpmstwlyma.d(45): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmstwlyma.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong len = test_str.length;\n\tforeach(i, c; test_str)\n\t{\n\t\tif(i < len - 1)\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpx18i_0b0.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427e6d]\n??:? void tmpx18i_0b0.__unittest_L26_C1() [0x427b82]\n??:? void tmpx18i_0b0.__modtest() [0x427bec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc07]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa9a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc2d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300dc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbb9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa71]\n??:? runModuleUnitTests [0x42b9dd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428330]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong i = 0;\n\tlong len = test_str.length;\n\twhile(i < len)\n\t{\n\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t{\n\t\t\tif(i == 0)\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(i == len - 1)\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "/tmp/tmpnyeve0d2.d(39): Error: found `unittest` instead of statement\n/tmp/tmpnyeve0d2.d(47): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpnyeve0d2.d(47): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpnyeve0d2.d(47): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpnyeve0d2.d(47): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnyeve0d2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong len = test_str.length;\n\tfor(long i = 0; i < len; i++)\n\t{\n\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t{\n\t\t\tif(i == 0)\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(i == len-1)\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' || test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\n\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp7peh3dj1.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x428125]\n??:? void tmp7peh3dj1.__unittest_L41_C1() [0x427e3e]\n??:? void tmp7peh3dj1.__modtest() [0x427ea8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bebf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ad52]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fee5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430394]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fe71]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ad29]\n??:? runModuleUnitTests [0x42bc95]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285e8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong i = 0;\n\tlong len = test_str.length;\n\twhile(i < len)\n\t{\n\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t{\n\t\t\tif(i == 0)\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(i == len-1)\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' || test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "/tmp/tmpad61hpbn.d(41): Error: expression expected, not `unittest`\n/tmp/tmpad61hpbn.d(42): Error: found `{` when expecting `;` following `return` statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpad61hpbn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong len = test_str.length;\n\tforeach(i, c; test_str)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if(i == len - 1)\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t\tif(test_str[i + 1] == 'a' || test_str[i + 1]\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "/tmp/tmp6isr0zb7.d(42): Error: found `unittest` when expecting `)`\n/tmp/tmp6isr0zb7.d(50): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp6isr0zb7.d(50): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp6isr0zb7.d(50): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp6isr0zb7.d(50): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6isr0zb7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong i = 0;\n\tlong len = test_str.length;\n\t\n\twhile (i < len)\n\t{\n\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t{\n\t\t\tif (i == 0)\n\t\t\t{\n\t\t\t\tif (test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (i == len-1)\n\t\t\t{\n\t\t\t\tif (test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' || test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "/tmp/tmp2p4u848t.d(42): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2p4u848t.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == test_str[$-1] || c == test_str[$-2])\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmptnhfuw6d.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x427e05]\n??:? void tmptnhfuw6d.__unittest_L22_C1() [0x427b1e]\n??:? void tmptnhfuw6d.__modtest() [0x427b88]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb9f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa32]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbc5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430074]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb51]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa09]\n??:? runModuleUnitTests [0x42b975]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282c8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong i = 0;\n\tlong len = test_str.length;\n\tfor (i = 0; i < len; i++) {\n\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') {\n\t\t\tif (i == 0) {\n\t\t\t\tif (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u') {\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (i == len - 1) {\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u') {\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u' || test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u') {\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpr1m6nxld.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x42812d]\n??:? void tmpr1m6nxld.__unittest_L33_C1() [0x427e42]\n??:? void tmpr1m6nxld.__modtest() [0x427eac]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bec7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ad5a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42feed]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43039c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fe79]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ad31]\n??:? runModuleUnitTests [0x42bc9d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285f0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == 'a' && (test_str[$-1] == 'e' || test_str[$-1] == 'i' || test_str[$-1] == 'o' || test_str[$-1] == 'u'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'e' && (test_str[$-1] == 'a' || test_str[$-1] == 'i' || test_str[$-1] == 'o' || test_str[$-1] == 'u'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'i' && (test_str[$-1] == 'a' || test_str[$-1] == 'e' || test_str[$-1] == 'o' || test_str[$-1] == 'u'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'o' && (test_str[$-1] == 'a' || test_str[$-1] == 'e' || test_str[$-1] == 'i' || test_str[$-1] == 'u'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'u' && (test_str[$-1] == 'a' || test_str[$-1] == 'e' || test_str[$-1] == 'i' || test_str[$-1] == 'o'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpvbagq7bf.d(42): unittest failure\n----------------\n??:? _d_unittestp [0x42817d]\n??:? void tmpvbagq7bf.__unittest_L38_C1() [0x427e92]\n??:? void tmpvbagq7bf.__modtest() [0x427efc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bf17]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42adaa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ff3d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4303ec]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fec9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ad81]\n??:? runModuleUnitTests [0x42bced]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428640]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong i = 0;\n\tlong len = test_str.length;\n\t\n\twhile (i < len)\n\t{\n\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t{\n\t\t\tif (i == 0)\n\t\t\t{\n\t\t\t\tif (test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (i == len-1)\n\t\t\t{\n\t\t\t\tif (test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' || test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "/tmp/tmp2p4u848t.d(42): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2p4u848t.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == 'a' && (test_str[$-1] == 'e' || test_str[$-1] == 'i' || test_str[$-1] == 'o' || test_str[$-1] == 'u'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'e' && (test_str[$-1] == 'a' || test_str[$-1] == 'i' || test_str[$-1] == 'o' || test_str[$-1] == 'u'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'i' && (test_str[$-1] == 'a' || test_str[$-1] == 'e' || test_str[$-1] == 'o' || test_str[$-1] == 'u'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'o' && (test_str[$-1] == 'a' || test_str[$-1] == 'e' || test_str[$-1] == 'i' || test_str[$-1] == 'u'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'u' && (test_str[$-1] == 'a' || test_str[$-1] == 'e' || test_str[$-1] == 'i' || test_str[$-1] == 'o'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpvbagq7bf.d(42): unittest failure\n----------------\n??:? _d_unittestp [0x42817d]\n??:? void tmpvbagq7bf.__unittest_L38_C1() [0x427e92]\n??:? void tmpvbagq7bf.__modtest() [0x427efc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bf17]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42adaa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ff3d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4303ec]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fec9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ad81]\n??:? runModuleUnitTests [0x42bced]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428640]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == 'a' && test_str[$-1] == 'a')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'e' && test_str[$-1] == 'e')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'i' && test_str[$-1] == 'i')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'o' && test_str[$-1] == 'o')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'u' && test_str[$-1] == 'u')\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp10rywk3h.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x427eed]\n??:? void tmp10rywk3h.__unittest_L28_C1() [0x427c02]\n??:? void tmp10rywk3h.__modtest() [0x427c6c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc87]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab1a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fcad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43015c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fc39]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aaf1]\n??:? runModuleUnitTests [0x42ba5d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283b0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(i, c; test_str)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if(i == test_str.length - 1)\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' || test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "/tmp/tmphwupb0gm.d(37): Error: found `unittest` when expecting `)`\n/tmp/tmphwupb0gm.d(45): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmphwupb0gm.d(45): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmphwupb0gm.d(45): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmphwupb0gm.d(45): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphwupb0gm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong len = test_str.length;\n\tfor (long i = 0; i < len; i++)\n\t{\n\t\tif (i == 0)\n\t\t{\n\t\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if (i == len - 1)\n\t\t{\n\t\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] ==\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "/tmp/tmp0znmqv6g.d(38): Error: expression expected, not `unittest`\n/tmp/tmp0znmqv6g.d(39): Error: found `{` when expecting `)`\n/tmp/tmp0znmqv6g.d(46): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp0znmqv6g.d(46): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp0znmqv6g.d(46): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0znmqv6g.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong len = test_str.length;\n\tfor (long i = 0; i < len; i++)\n\t{\n\t\tif (i == 0)\n\t\t{\n\t\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif (test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if (i == len-1)\n\t\t{\n\t\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif (test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif (test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] ==\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "/tmp/tmp6tyes6el.d(38): Error: expression expected, not `unittest`\n/tmp/tmp6tyes6el.d(39): Error: found `{` when expecting `)`\n/tmp/tmp6tyes6el.d(46): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp6tyes6el.d(46): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp6tyes6el.d(46): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6tyes6el.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong len = test_str.length;\n\tforeach(i,c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(i > 0)\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(i < len-1)\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp6wa3ak17.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x427f2d]\n??:? void tmp6wa3ak17.__unittest_L33_C1() [0x427c42]\n??:? void tmp6wa3ak17.__modtest() [0x427cac]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bcc7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab5a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fced]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43019c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fc79]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab31]\n??:? runModuleUnitTests [0x42ba9d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283f0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong i = 0;\n\tlong len = test_str.length;\n\twhile(i < len)\n\t{\n\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t{\n\t\t\tif(i == 0)\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(i == len-1)\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' || test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "/tmp/tmpad61hpbn.d(41): Error: expression expected, not `unittest`\n/tmp/tmpad61hpbn.d(42): Error: found `{` when expecting `;` following `return` statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpad61hpbn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong len = test_str.length;\n\tforeach(i, c; test_str)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if(i == len - 1)\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1]\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "/tmp/tmpkjj_cl7e.d(42): Error: found `unittest` when expecting `)`\n/tmp/tmpkjj_cl7e.d(50): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpkjj_cl7e.d(50): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpkjj_cl7e.d(50): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpkjj_cl7e.d(50): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkjj_cl7e.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong len = test_str.length;\n\tfor (long i = 0; i < len; i++) \n\t{\n\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t{\n\t\t\tif (i == 0) \n\t\t\t{\n\t\t\t\tif (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (i == len - 1) \n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u' || test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "/tmp/tmpzq7n4lqn.d(38): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzq7n4lqn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong len = test_str.length;\n\tforeach(i; 0..len)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if(i == len-1)\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' ||\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "/tmp/tmp0wipbz_5.d(38): Error: expression expected, not `unittest`\n/tmp/tmp0wipbz_5.d(39): Error: found `{` when expecting `)`\n/tmp/tmp0wipbz_5.d(46): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp0wipbz_5.d(46): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp0wipbz_5.d(46): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0wipbz_5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong len = test_str.length;\n\tlong i = 0;\n\tfor (i = 0; i < len; i++) \n\t{\n\t\tif (i == 0) \n\t\t{\n\t\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t\t{\n\t\t\t\tif (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if (i == len - 1) \n\t\t{\n\t\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse \n\t\t{\n\t\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t\t{\n\t\t\t\tif (test_str[i + 1] == 'a' || test_str[i + 1\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "/tmp/tmp54attu0x.d(39): Error: found `unittest` when expecting `,`\n/tmp/tmp54attu0x.d(47): Error: found `void` when expecting `,`\n/tmp/tmp54attu0x.d(47): Error: found `{` when expecting `,`\n/tmp/tmp54attu0x.d(47): Error: expression expected, not `}`\n/tmp/tmp54attu0x.d(47): Error: found `End of File` when expecting `,`\n/tmp/tmp54attu0x.d(47): Error: found `End of File` when expecting `]`\n/tmp/tmp54attu0x.d(47): Error: found `End of File` when expecting `)`\n/tmp/tmp54attu0x.d(47): Error: found `End of File` instead of statement\n/tmp/tmp54attu0x.d(47): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp54attu0x.d(47): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp54attu0x.d(47): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp54attu0x.d(47): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp54attu0x.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong i = 0;\n\tlong len = test_str.length;\n\twhile(i < len)\n\t{\n\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t{\n\t\t\tif(i == 0)\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(i == len-1)\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' || test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "/tmp/tmpad61hpbn.d(41): Error: expression expected, not `unittest`\n/tmp/tmpad61hpbn.d(42): Error: found `{` when expecting `;` following `return` statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpad61hpbn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == 'a' && test_str[$-1] == 'a')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'e' && test_str[$-1] == 'e')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'i' && test_str[$-1] == 'i')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'o' && test_str[$-1] == 'o')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'u' && test_str[$-1] == 'u')\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp10rywk3h.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x427eed]\n??:? void tmp10rywk3h.__unittest_L28_C1() [0x427c02]\n??:? void tmp10rywk3h.__modtest() [0x427c6c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc87]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab1a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fcad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43015c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fc39]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aaf1]\n??:? runModuleUnitTests [0x42ba5d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283b0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong i = 0;\n\tlong len = test_str.length;\n\twhile (i < len)\n\t{\n\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t{\n\t\t\tif (i == 0)\n\t\t\t{\n\t\t\t\tif (test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (i == len - 1)\n\t\t\t{\n\t\t\t\tif (test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' || test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "/tmp/tmpckd3vjf5.d(41): Error: expression expected, not `unittest`\n/tmp/tmpckd3vjf5.d(42): Error: found `{` when expecting `;` following `return` statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpckd3vjf5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong i = 0;\n\tlong len = test_str.length;\n\t\n\twhile (i < len)\n\t{\n\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t{\n\t\t\tif (i == 0)\n\t\t\t{\n\t\t\t\tif (test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (i == len - 1)\n\t\t\t{\n\t\t\t\tif (test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' || test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "/tmp/tmpsbt1xdhj.d(42): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsbt1xdhj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == test_str[0] || c == test_str[$-1])\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(test_str[test_str.indexOf(c)-1] == 'a' || test_str[test_str.indexOf(c)-1] == 'e' || test_str[test_str.indexOf(c)-1] == 'i' || test_str[test_str.indexOf(c)-1] == 'o' || test_str[test_str.indexOf(c)-1] == 'u' || test_str[test_str.indexOf(c)+1] == 'a' || test_str[test_str.indexOf(c)+1] == 'e' || test_str[test_str.indexOf(c)+1] == 'i' || test_str[test_str.indexOf(c)+1] == 'o' || test_str[test_str.indexOf(c)+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "/tmp/tmp84ti_p9b.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmp84ti_p9b.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmp84ti_p9b.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmp84ti_p9b.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmp84ti_p9b.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmp84ti_p9b.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmp84ti_p9b.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmp84ti_p9b.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmp84ti_p9b.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmp84ti_p9b.d(20): Error: no property `indexOf` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp84ti_p9b.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tint i = 0;\n\tforeach(c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(i > 0 && (test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(i < test_str.length - 1 && (test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpdukxu8zh.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x427f35]\n??:? void tmpdukxu8zh.__unittest_L28_C1() [0x427c4e]\n??:? void tmpdukxu8zh.__modtest() [0x427cb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bccf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab62]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fcf5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4301a4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fc81]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab39]\n??:? runModuleUnitTests [0x42baa5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283f8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == test_str[0])\n\t\t\t\tcount++;\n\t\t\telse if(c == test_str[$-1])\n\t\t\t\tcount++;\n\t\t\telse if(test_str[$-1] == 'a' || test_str[$-1] == 'e' || test_str[$-1] == 'i' || test_str[$-1] == 'o' || test_str[$-1] == 'u')\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5b4dkfgm.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x427ef5]\n??:? void tmp5b4dkfgm.__unittest_L24_C1() [0x427c0a]\n??:? void tmp5b4dkfgm.__modtest() [0x427c74]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc8f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab22]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fcb5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430164]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fc41]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aaf9]\n??:? runModuleUnitTests [0x42ba65]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283b8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(char c; test_str) \n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == 'a' && (test_str[$ - 1] == 'a' || test_str[$ - 1] == 'e' || test_str[$ - 1] == 'i' || test_str[$ - 1] == 'o' || test_str[$ - 1] == 'u'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'e' && (test_str[$ - 1] == 'a' || test_str[$ - 1] == 'e' || test_str[$ - 1] == 'i' || test_str[$ - 1] == 'o' || test_str[$ - 1] == 'u'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'i' && (test_str[$ - 1] == 'a' || test_str[$ - 1] == 'e' || test_str[$ - 1] == 'i' || test_str[$ - 1] == 'o' || test_str[$ - 1] == 'u'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'o' && (test_str[$ - 1] == 'a' || test_str[$ - 1] == 'e' || test_str[$ - 1] == 'i' || test_str[$ - 1] == 'o' || test_str[$ - 1] == 'u'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'u' && (test_str[$ - 1] == 'a' || test_str[$ - 1] == 'e' || test_str[$ - 1] == 'i' || test_str[$ - 1] == 'o' ||\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "/tmp/tmpesbthm0o.d(31): Error: expression expected, not `unittest`\n/tmp/tmpesbthm0o.d(30): Error: found `{` when expecting `)`\n/tmp/tmpesbthm0o.d(33): Error: found `alias` when expecting `)`\n/tmp/tmpesbthm0o.d(39): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpesbthm0o.d(39): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpesbthm0o.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong len = test_str.length;\n\tforeach(i, c; test_str)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if(i == len-1)\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' || test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1]\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "/tmp/tmp23_d349_.d(38): Error: found `unittest` when expecting `)`\n/tmp/tmp23_d349_.d(46): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp23_d349_.d(46): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp23_d349_.d(46): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp23_d349_.d(46): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp23_d349_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == 'a' && test_str[$-1] == 'a')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'e' && test_str[$-1] == 'e')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'i' && test_str[$-1] == 'i')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'o' && test_str[$-1] == 'o')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'u' && test_str[$-1] == 'u')\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp10rywk3h.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x427eed]\n??:? void tmp10rywk3h.__unittest_L28_C1() [0x427c02]\n??:? void tmp10rywk3h.__modtest() [0x427c6c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc87]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab1a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fcad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43015c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fc39]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aaf1]\n??:? runModuleUnitTests [0x42ba5d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283b0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(char ch; test_str)\n\t{\n\t\tif(ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u')\n\t\t{\n\t\t\tif(ch == 'a' && (test_str[$-1] == 'e' || test_str[$-1] == 'i' || test_str[$-1] == 'o' || test_str[$-1] == 'u'))\n\t\t\t\tcount++;\n\t\t\telse if(ch == 'e' && (test_str[$-1] == 'a' || test_str[$-1] == 'i' || test_str[$-1] == 'o' || test_str[$-1] == 'u'))\n\t\t\t\tcount++;\n\t\t\telse if(ch == 'i' && (test_str[$-1] == 'a' || test_str[$-1] == 'e' || test_str[$-1] == 'o' || test_str[$-1] == 'u'))\n\t\t\t\tcount++;\n\t\t\telse if(ch == 'o' && (test_str[$-1] == 'a' || test_str[$-1] == 'e' || test_str[$-1] == 'i' || test_str[$-1] == 'u'))\n\t\t\t\tcount++;\n\t\t\telse if(ch == 'u' && (test_str[$-1] == 'a' || test_str[$-1] == 'e' || test_str[$-1] == 'i' || test_str[$-1] == 'o'))\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpzuemg6p8.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x42817d]\n??:? void tmpzuemg6p8.__unittest_L28_C1() [0x427e92]\n??:? void tmpzuemg6p8.__modtest() [0x427efc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bf17]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42adaa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ff3d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4303ec]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fec9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ad81]\n??:? runModuleUnitTests [0x42bced]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428640]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == 'a' && test_str[$-1] == 'a')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'e' && test_str[$-1] == 'e')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'i' && test_str[$-1] == 'i')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'o' && test_str[$-1] == 'o')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'u' && test_str[$-1] == 'u')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp9psr6tn3.d(42): unittest failure\n----------------\n??:? _d_unittestp [0x427eed]\n??:? void tmp9psr6tn3.__unittest_L38_C1() [0x427c02]\n??:? void tmp9psr6tn3.__modtest() [0x427c6c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc87]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab1a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fcad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43015c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fc39]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aaf1]\n??:? runModuleUnitTests [0x42ba5d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283b0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong len = test_str.length;\n\tfor (long i = 0; i < len; i++) \n\t{\n\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t{\n\t\t\tif (i == 0) \n\t\t\t{\n\t\t\t\tif (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (i == len - 1) \n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u' || test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "/tmp/tmpzq7n4lqn.d(38): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzq7n4lqn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong i = 0;\n\tlong len = test_str.length;\n\twhile (i < len)\n\t{\n\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t{\n\t\t\tif (i > 0 && i < len - 1)\n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u' ||\n\t\t\t\t\ttest_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (i == 0)\n\t\t\t{\n\t\t\t\tif (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (i == len - 1)\n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "/tmp/tmp2ourcof8.d(38): Error: found `unittest` instead of statement\n/tmp/tmp2ourcof8.d(46): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp2ourcof8.d(46): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp2ourcof8.d(46): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2ourcof8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(char c; test_str) \n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') \n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpr11q5x5a.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x427d9d]\n??:? void tmpr11q5x5a.__unittest_L19_C1() [0x427ab6]\n??:? void tmpr11q5x5a.__modtest() [0x427b20]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bac3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a956]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fae9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a92d]\n??:? runModuleUnitTests [0x42b899]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281ec]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == test_str[0])\n\t\t\t{\n\t\t\t\tif(test_str[1] == 'a' || test_str[1] == 'e' || test_str[1] == 'i' || test_str[1] == 'o' || test_str[1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(c == test_str[$-1])\n\t\t\t{\n\t\t\t\tif(test_str[$-2] == 'a' || test_str[$-2] == 'e' || test_str[$-2] == 'i' || test_str[$-2] == 'o' || test_str[$-2] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(test_str[test_str.indexOf(c)-1] == 'a' || test_str[test_str.indexOf(c)-1] == 'e' || test_str[test_str.indexOf(c)-1] == 'i' || test_str[test_str.indexOf(c)-1] == 'o' || test_str[test_str.indexOf(c)-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tif(test_str[test_str.indexOf(c)+1] == 'a' || test_str[test_str.indexOf(c)+1] == 'e' || test_str[test_str.indexOf(c)+1] == 'i' || test_str[test_str.indexOf(c)+1] == 'o' || test_str[test_str.indexOf(c)+1] == '\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "/tmp/tmprqu7coge.d(32): Error: unterminated character constant\n/tmp/tmprqu7coge.d(33): Error: found `unittest` when expecting `)`\n/tmp/tmprqu7coge.d(41): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmprqu7coge.d(41): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmprqu7coge.d(41): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmprqu7coge.d(41): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmprqu7coge.d(41): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprqu7coge.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp6wqp902z.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x427d9d]\n??:? void tmp6wqp902z.__unittest_L19_C1() [0x427ab6]\n??:? void tmp6wqp902z.__modtest() [0x427b20]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bac3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a956]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fae9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a92d]\n??:? runModuleUnitTests [0x42b899]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281ec]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong len = test_str.length;\n\tfor(long i = 0; i < len; i++)\n\t{\n\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t{\n\t\t\tif(i == 0)\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(i == len - 1)\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' || test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\n\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpowwj98an.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x428125]\n??:? void tmpowwj98an.__unittest_L41_C1() [0x427e3e]\n??:? void tmpowwj98an.__modtest() [0x427ea8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bebf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ad52]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fee5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430394]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fe71]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ad29]\n??:? runModuleUnitTests [0x42bc95]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285e8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong len = test_str.length;\n\tforeach(i; 0 .. len)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if(i == len-1)\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' ||\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "/tmp/tmpj5kp7mlu.d(38): Error: expression expected, not `unittest`\n/tmp/tmpj5kp7mlu.d(39): Error: found `{` when expecting `)`\n/tmp/tmpj5kp7mlu.d(46): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpj5kp7mlu.d(46): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpj5kp7mlu.d(46): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj5kp7mlu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tfor (long i = 0; i < test_str.length; i++) \n\t{\n\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t{\n\t\t\tif (i == 0) \n\t\t\t{\n\t\t\t\tif (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (i == test_str.length - 1) \n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u' || test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "/tmp/tmpuocg7ej3.d(38): Error: expression expected, not `unittest`\n/tmp/tmpuocg7ej3.d(39): Error: found `{` when expecting `;` following `return` statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuocg7ej3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong len = test_str.length;\n\tfor(long i = 0; i < len; i++)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if(i == len-1)\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] ==\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "/tmp/tmp_boqlujj.d(38): Error: expression expected, not `unittest`\n/tmp/tmp_boqlujj.d(39): Error: found `{` when expecting `)`\n/tmp/tmp_boqlujj.d(46): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp_boqlujj.d(46): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp_boqlujj.d(46): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_boqlujj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong i = 0;\n\tlong len = test_str.length;\n\t\n\tif (len == 0)\n\t\treturn 0;\n\t\n\tif (len == 1)\n\t\treturn isVowel(test_str[0]) ? 1 : 0;\n\t\n\tif (isVowel(test_str[0]))\n\t\tcount++;\n\t\n\tif (isVowel(test_str[len - 1]))\n\t\tcount++;\n\t\n\tfor (i = 1; i < len - 1; i++)\n\t{\n\t\tif (isVowel(test_str[i]))\n\t\t{\n\t\t\tif (isVowel(test_str[i - 1]) || isVowel(test_str[i + 1]))\n\t\t\t\tcount++;\n\t\t}\n\t}\n\t\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "/tmp/tmpsnbcps8y.d(17): Error: undefined identifier `isVowel`\n/tmp/tmpsnbcps8y.d(19): Error: undefined identifier `isVowel`\n/tmp/tmpsnbcps8y.d(22): Error: undefined identifier `isVowel`\n/tmp/tmpsnbcps8y.d(27): Error: undefined identifier `isVowel`\n/tmp/tmpsnbcps8y.d(29): Error: undefined identifier `isVowel`\n/tmp/tmpsnbcps8y.d(29): Error: undefined identifier `isVowel`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsnbcps8y.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tfor (long i = 0; i < test_str.length; i++)\n\t{\n\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t{\n\t\t\tif (i > 0 && (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tif (i < test_str.length - 1 && (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp2dym5tpn.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427f85]\n??:? void tmp2dym5tpn.__unittest_L26_C1() [0x427c9a]\n??:? void tmp2dym5tpn.__modtest() [0x427d04]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bd1f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42abb2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fd45]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4301f4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fcd1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab89]\n??:? runModuleUnitTests [0x42baf5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428448]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == test_str[0])\n\t\t\t{\n\t\t\t\tif(test_str[1] == 'a' || test_str[1] == 'e' || test_str[1] == 'i' || test_str[1] == 'o' || test_str[1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(c == test_str[$-1])\n\t\t\t{\n\t\t\t\tif(test_str[$-2] == 'a' || test_str[$-2] == 'e' || test_str[$-2] == 'i' || test_str[$-2] == 'o' || test_str[$-2] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(test_str[test_str.indexOf(c)-1] == 'a' || test_str[test_str.indexOf(c)-1] == 'e' || test_str[test_str.indexOf(c)-1] == 'i' || test_str[test_str.indexOf(c)-1] == 'o' || test_str[test_str.indexOf(c)-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t\tif(test_str[test_str.indexOf(c)+1] == 'a' || test_str[test_str.indexOf(c)+1] == 'e' || test_str[test_str.indexOf(c)+1] == 'i' || test_str[test_str.indexOf(c)+1] == 'o' || test_str[\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "/tmp/tmpiidtwrx8.d(35): Error: expression expected, not `unittest`\n/tmp/tmpiidtwrx8.d(36): Error: found `{` when expecting `,`\n/tmp/tmpiidtwrx8.d(37): Error: expression expected, not `alias`\n/tmp/tmpiidtwrx8.d(37): Error: found `candidate` when expecting `,`\n/tmp/tmpiidtwrx8.d(37): Error: expression expected, not `=`\n/tmp/tmpiidtwrx8.d(37): Error: found `count_vowels` when expecting `,`\n/tmp/tmpiidtwrx8.d(37): Error: expression expected, not `;`\n/tmp/tmpiidtwrx8.d(39): Error: found `assert` when expecting `,`\n/tmp/tmpiidtwrx8.d(39): Error: found `;` when expecting `,`\n/tmp/tmpiidtwrx8.d(40): Error: found `;` when expecting `,`\n/tmp/tmpiidtwrx8.d(41): Error: found `;` when expecting `,`\n/tmp/tmpiidtwrx8.d(42): Error: expression expected, not `}`\n/tmp/tmpiidtwrx8.d(43): Error: found `void` when expecting `,`\n/tmp/tmpiidtwrx8.d(43): Error: found `{` when expecting `,`\n/tmp/tmpiidtwrx8.d(43): Error: expression expected, not `}`\n/tmp/tmpiidtwrx8.d(43): Error: found `End of File` when expecting `,`\n/tmp/tmpiidtwrx8",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong len = test_str.length;\n\tforeach(i, c; test_str)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if(i == len - 1)\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u' || test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1]\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "/tmp/tmp_zg_bj7i.d(38): Error: found `unittest` when expecting `)`\n/tmp/tmp_zg_bj7i.d(46): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp_zg_bj7i.d(46): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp_zg_bj7i.d(46): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp_zg_bj7i.d(46): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_zg_bj7i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong i = 0;\n\tlong len = test_str.length;\n\twhile(i < len)\n\t{\n\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t{\n\t\t\tif(i == 0)\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(i == len-1)\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' || test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "/tmp/tmpad61hpbn.d(41): Error: expression expected, not `unittest`\n/tmp/tmpad61hpbn.d(42): Error: found `{` when expecting `;` following `return` statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpad61hpbn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong i = 0;\n\tlong len = test_str.length;\n\t\n\twhile(i < len)\n\t{\n\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t{\n\t\t\tif(i == 0)\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(i == len-1)\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' || test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "/tmp/tmp86m2b426.d(42): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp86m2b426.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong i = 0;\n\tlong len = test_str.length;\n\twhile(i < len)\n\t{\n\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t{\n\t\t\tif(i == 0)\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(i == len - 1)\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' || test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "/tmp/tmpqs2nn3pj.d(41): Error: expression expected, not `unittest`\n/tmp/tmpqs2nn3pj.d(42): Error: found `{` when expecting `;` following `return` statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqs2nn3pj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == test_str[0] || c == test_str[$-1])\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(test_str[test_str.indexOf(c)-1] == 'a' || test_str[test_str.indexOf(c)-1] == 'e' || test_str[test_str.indexOf(c)-1] == 'i' || test_str[test_str.indexOf(c)-1] == 'o' || test_str[test_str.indexOf(c)-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t\tif(test_str[test_str.indexOf(c)+1] == 'a' || test_str[test_str.indexOf(c)+1] == 'e' || test_str[test_str.indexOf(c)+1] == 'i' || test_str[test_str.indexOf(c)+1] == 'o' || test_str[test_str.indexOf(c)+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "/tmp/tmpjqfnezjt.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmpjqfnezjt.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmpjqfnezjt.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmpjqfnezjt.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmpjqfnezjt.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmpjqfnezjt.d(24): Error: no property `indexOf` for type `string`\n/tmp/tmpjqfnezjt.d(24): Error: no property `indexOf` for type `string`\n/tmp/tmpjqfnezjt.d(24): Error: no property `indexOf` for type `string`\n/tmp/tmpjqfnezjt.d(24): Error: no property `indexOf` for type `string`\n/tmp/tmpjqfnezjt.d(24): Error: no property `indexOf` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjqfnezjt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong len = test_str.length;\n\t\n\tforeach(i; 0 .. len)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if(i == len-1)\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "/tmp/tmph91pb_3r.d(38): Error: unterminated character constant\n/tmp/tmph91pb_3r.d(39): Error: found `unittest` when expecting `)`\n/tmp/tmph91pb_3r.d(47): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmph91pb_3r.d(47): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmph91pb_3r.d(47): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmph91pb_3r.d(47): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph91pb_3r.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tfor (int i = 0; i < test_str.length; i++)\n\t{\n\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t{\n\t\t\tif (i == 0)\n\t\t\t{\n\t\t\t\tif (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (i == test_str.length - 1)\n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u' || test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpefz70o2f.d(43): unittest failure\n----------------\n??:? _d_unittestp [0x42812d]\n??:? void tmpefz70o2f.__unittest_L39_C1() [0x427e46]\n??:? void tmpefz70o2f.__modtest() [0x427eb0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bec7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ad5a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42feed]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43039c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fe79]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ad31]\n??:? runModuleUnitTests [0x42bc9d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285f0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == 'a' && test_str[$-1] == 'a')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'e' && test_str[$-1] == 'e')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'i' && test_str[$-1] == 'i')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'o' && test_str[$-1] == 'o')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'u' && test_str[$-1] == 'u')\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp10rywk3h.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x427eed]\n??:? void tmp10rywk3h.__unittest_L28_C1() [0x427c02]\n??:? void tmp10rywk3h.__modtest() [0x427c6c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc87]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab1a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fcad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43015c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fc39]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aaf1]\n??:? runModuleUnitTests [0x42ba5d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283b0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(char c; test_str) \n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') \n\t\t{\n\t\t\tif(c == test_str[0] || c == test_str[$ - 1]) \n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tif(test_str[test_str.indexOf(c) - 1] == 'a' || test_str[test_str.indexOf(c) - 1] == 'e' || test_str[test_str.indexOf(c) - 1] == 'i' || test_str[test_str.indexOf(c) - 1] == 'o' || test_str[test_str.indexOf(c) - 1] == 'u' || test_str[test_str.indexOf(c) + 1] == 'a' || test_str[test_str.indexOf(c) + 1] == 'e' || test_str[test_str.indexOf(c) + 1] == 'i' || test_str[test_str.indexOf(c) + 1] == 'o' || test_str[test_str.indexOf(c) + 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "/tmp/tmp4482tgmh.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmp4482tgmh.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmp4482tgmh.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmp4482tgmh.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmp4482tgmh.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmp4482tgmh.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmp4482tgmh.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmp4482tgmh.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmp4482tgmh.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmp4482tgmh.d(20): Error: no property `indexOf` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4482tgmh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong i = 0;\n\tlong len = test_str.length;\n\t\n\twhile(i < len)\n\t{\n\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t{\n\t\t\tif(i == 0)\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(i == len-1)\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' || test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "/tmp/tmp86m2b426.d(42): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp86m2b426.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == test_str[0])\n\t\t\t{\n\t\t\t\tif(test_str[1] == 'a' || test_str[1] == 'e' || test_str[1] == 'i' || test_str[1] == 'o' || test_str[1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(c == test_str[$-1])\n\t\t\t{\n\t\t\t\tif(test_str[$-2] == 'a' || test_str[$-2] == 'e' || test_str[$-2] == 'i' || test_str[$-2] == 'o' || test_str[$-2] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(test_str[test_str.indexOf(c)-1] == 'a' || test_str[test_str.indexOf(c)-1] == 'e' || test_str[test_str.indexOf(c)-1] == 'i' || test_str[test_str.indexOf(c)-1] == 'o' || test_str[test_str.indexOf(c)-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tif(test_str[test_str.indexOf(c)+1] == 'a' || test_str[test_str.indexOf(c)+1] == 'e' || test_str[test_str.indexOf(c)+1] == 'i' || test_str[test_str.indexOf(c)+1] == 'o' || test_str[test_str.indexOf(c)+1] == '\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "/tmp/tmprqu7coge.d(32): Error: unterminated character constant\n/tmp/tmprqu7coge.d(33): Error: found `unittest` when expecting `)`\n/tmp/tmprqu7coge.d(41): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmprqu7coge.d(41): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmprqu7coge.d(41): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmprqu7coge.d(41): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmprqu7coge.d(41): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprqu7coge.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong len = test_str.length;\n\tforeach(i; 0 .. len) \n\t{\n\t\tif(i > 0 && i < len - 1) \n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t\t{\n\t\t\t\tif(test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t\tif(test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp8zpmscpi.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427f95]\n??:? void tmp8zpmscpi.__unittest_L30_C1() [0x427cae]\n??:? void tmp8zpmscpi.__modtest() [0x427d18]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bd2f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42abc2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fd55]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430204]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fce1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab99]\n??:? runModuleUnitTests [0x42bb05]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428458]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong i = 0;\n\tlong len = test_str.length;\n\tfor (i = 0; i < len; i++) {\n\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') {\n\t\t\tif (i > 0 && (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u')) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tif (i < len - 1 && (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u')) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpaw3bqpq2.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x427f8d]\n??:? void tmpaw3bqpq2.__unittest_L24_C1() [0x427ca2]\n??:? void tmpaw3bqpq2.__modtest() [0x427d0c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bd27]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42abba]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fd4d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4301fc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fcd9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab91]\n??:? runModuleUnitTests [0x42bafd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428450]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong len = test_str.length;\n\tforeach(i; 0 .. len)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if(i == len-1)\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' ||\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "/tmp/tmpr3t148c3.d(38): Error: expression expected, not `unittest`\n/tmp/tmpr3t148c3.d(39): Error: found `{` when expecting `)`\n/tmp/tmpr3t148c3.d(46): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpr3t148c3.d(46): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpr3t148c3.d(46): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr3t148c3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == 'a' && test_str[$-1] == 'a')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'e' && test_str[$-1] == 'e')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'i' && test_str[$-1] == 'i')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'o' && test_str[$-1] == 'o')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'u' && test_str[$-1] == 'u')\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp10rywk3h.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x427eed]\n??:? void tmp10rywk3h.__unittest_L28_C1() [0x427c02]\n??:? void tmp10rywk3h.__modtest() [0x427c6c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc87]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab1a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fcad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43015c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fc39]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aaf1]\n??:? runModuleUnitTests [0x42ba5d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283b0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tfor (int i = 0; i < test_str.length; i++) \n\t{\n\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t{\n\t\t\tif (i == 0) \n\t\t\t{\n\t\t\t\tif (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (i == test_str.length - 1) \n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tif (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u' || test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "/tmp/tmpi4kv8px7.d(38): Error: expression expected, not `unittest`\n/tmp/tmpi4kv8px7.d(39): Error: found `{` when expecting `;` following `return` statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi4kv8px7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong len = test_str.length;\n\tforeach(i; 0 .. len) \n\t{\n\t\tif(i == 0) \n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if(i == len-1) \n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse \n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "/tmp/tmp4hcxwx7e.d(38): Error: expression expected, not `unittest`\n/tmp/tmp4hcxwx7e.d(39): Error: found `{` when expecting `,`\n/tmp/tmp4hcxwx7e.d(40): Error: expression expected, not `alias`\n/tmp/tmp4hcxwx7e.d(40): Error: found `candidate` when expecting `,`\n/tmp/tmp4hcxwx7e.d(40): Error: expression expected, not `=`\n/tmp/tmp4hcxwx7e.d(40): Error: found `count_vowels` when expecting `,`\n/tmp/tmp4hcxwx7e.d(40): Error: expression expected, not `;`\n/tmp/tmp4hcxwx7e.d(42): Error: found `assert` when expecting `,`\n/tmp/tmp4hcxwx7e.d(42): Error: found `;` when expecting `,`\n/tmp/tmp4hcxwx7e.d(43): Error: found `;` when expecting `,`\n/tmp/tmp4hcxwx7e.d(44): Error: found `;` when expecting `,`\n/tmp/tmp4hcxwx7e.d(45): Error: expression expected, not `}`\n/tmp/tmp4hcxwx7e.d(46): Error: found `void` when expecting `,`\n/tmp/tmp4hcxwx7e.d(46): Error: found `{` when expecting `,`\n/tmp/tmp4hcxwx7e.d(46): Error: expression expected, not `}`\n/tmp/tmp4hcxwx7e.d(46): Error: found `End of File` when expecting `,`\n/tmp/tmp4hcxwx7e",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(i, test_str)\n\t{\n\t\tif(i > 0 && i < test_str.length - 1)\n\t\t{\n\t\t\tif(test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u' || test_str[i - 1] == 'A' || test_str[i - 1] == 'E' || test_str[i - 1] == 'I' || test_str[i - 1] == 'O' || test_str[i - 1] == 'U')\n\t\t\t{\n\t\t\t\tif(test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u' || test_str[i + 1] == 'A' || test_str[i + 1] == 'E' || test_str[i + 1] == 'I' || test_str[i + 1] == 'O' || test_str[i + 1] == 'U')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "/tmp/tmpvhlf501p.d(10): Error: no identifier for declarator `test_str`\n/tmp/tmpvhlf501p.d(10): Error: found `)` when expecting `;`\n/tmp/tmpvhlf501p.d(23): Error: found `return` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvhlf501p.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == test_str[0] || c == test_str[$-1])\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(test_str[test_str.indexOf(c)-1] == 'a' || test_str[test_str.indexOf(c)-1] == 'e' || test_str[test_str.indexOf(c)-1] == 'i' || test_str[test_str.indexOf(c)-1] == 'o' || test_str[test_str.indexOf(c)-1] == 'u' || test_str[test_str.indexOf(c)+1] == 'a' || test_str[test_str.indexOf(c)+1] == 'e' || test_str[test_str.indexOf(c)+1] == 'i' || test_str[test_str.indexOf(c)+1] == 'o' || test_str[test_str.indexOf(c)+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "/tmp/tmp84ti_p9b.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmp84ti_p9b.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmp84ti_p9b.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmp84ti_p9b.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmp84ti_p9b.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmp84ti_p9b.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmp84ti_p9b.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmp84ti_p9b.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmp84ti_p9b.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmp84ti_p9b.d(20): Error: no property `indexOf` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp84ti_p9b.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong counter = 0;\n\tlong length = test_str.length;\n\t\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == test_str[0])\n\t\t\t{\n\t\t\t\tif(test_str[1] == 'a' || test_str[1] == 'e' || test_str[1] == 'i' || test_str[1] == 'o' || test_str[1] == 'u')\n\t\t\t\t\tcounter++;\n\t\t\t}\n\t\t\telse if(c == test_str[length - 1])\n\t\t\t{\n\t\t\t\tif(test_str[length - 2] == 'a' || test_str[length - 2] == 'e' || test_str[length - 2] == 'i' || test_str[length - 2] == 'o' || test_str[length - 2] == 'u')\n\t\t\t\t\tcounter++;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(test_str[$ - 1] == 'a' || test_str[$ - 1] == 'e' || test_str[$ - 1] == 'i' || test_str[$ - 1] == 'o' || test_str[$ - 1] == 'u')\n\t\t\t\t\tif(test_str[$ + 1] == 'a' || test_str[$ + 1] == 'e' || test_str[$ + 1] == 'i' || test_str[$ + 1] == 'o' || test_str[$ + 1] == 'u')\n\t\t\t\t\t\tcounter++;\n\t\t\t}\n\t\t}\n\t}\n\treturn counter;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123217,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpyjsotp7z.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x42812d]\n??:? void tmpyjsotp7z.__unittest_L36_C1() [0x427e46]\n??:? void tmpyjsotp7z.__modtest() [0x427eb0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bec7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ad5a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42feed]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43039c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fe79]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ad31]\n??:? runModuleUnitTests [0x42bc9d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285f0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == 'a' && (test_str[$ - 1] == 'e' || test_str[$ - 1] == 'i' || test_str[$ - 1] == 'o' || test_str[$ - 1] == 'u'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'e' && (test_str[$ - 1] == 'a' || test_str[$ - 1] == 'i' || test_str[$ - 1] == 'o' || test_str[$ - 1] == 'u'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'i' && (test_str[$ - 1] == 'a' || test_str[$ - 1] == 'e' || test_str[$ - 1] == 'o' || test_str[$ - 1] == 'u'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'o' && (test_str[$ - 1] == 'a' || test_str[$ - 1] == 'e' || test_str[$ - 1] == 'i' || test_str[$ - 1] == 'u'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'u' && (test_str[$ - 1] == 'a' || test_str[$ - 1] == 'e' || test_str[$ - 1] == 'i' || test_str[$ - 1] == 'o'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123217,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3bkb3nc3.d(42): unittest failure\n----------------\n??:? _d_unittestp [0x42817d]\n??:? void tmp3bkb3nc3.__unittest_L38_C1() [0x427e92]\n??:? void tmp3bkb3nc3.__modtest() [0x427efc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bf17]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42adaa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ff3d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4303ec]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fec9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ad81]\n??:? runModuleUnitTests [0x42bced]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428640]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == 'a')\n\t\t\t{\n\t\t\t\tif(test_str[$-1] == 'e' || test_str[$-1] == 'i' || test_str[$-1] == 'o' || test_str[$-1] == 'u')\n\t\t\t\t\tcount++;\n\t\t\t\tif(test_str[$+1] == 'e' || test_str[$+1] == 'i' || test_str[$+1] == 'o' || test_str[$+1] == 'u')\n\t\t\t\t\tcount++;\n\t\t\t}\n\t\t\tif(c == 'e')\n\t\t\t{\n\t\t\t\tif(test_str[$-1] == 'a' || test_str[$-1] == 'i' || test_str[$-1] == 'o' || test_str[$-1] == 'u')\n\t\t\t\t\tcount++;\n\t\t\t\tif(test_str[$+1] == 'a' || test_str[$+1] == 'i' || test_str[$+1] == 'o' || test_str[$+1] == 'u')\n\t\t\t\t\tcount++;\n\t\t\t}\n\t\t\tif(c == 'i')\n\t\t\t{\n\t\t\t\tif(test_str[$-1] == 'a' || test_str[$-1] == 'e' || test_str[$-1] == 'o' || test_str[$-1] == 'u')\n\t\t\t\t\tcount++;\n\t\t\t\tif(test_str[$+1] == 'a' || test_str[$+1] == 'e' || test_str[$+1] == 'o' || test_str[$+1] == 'u')\n\t\t\t\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "/tmp/tmphhw9a5ef.d(34): Error: found `unittest` instead of statement\n/tmp/tmphhw9a5ef.d(42): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmphhw9a5ef.d(42): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmphhw9a5ef.d(42): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphhw9a5ef.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(i, c; test_str)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if(i == test_str.length - 1)\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "/tmp/tmp5jn6lix4.d(41): Error: found `unittest` when expecting `)`\n/tmp/tmp5jn6lix4.d(49): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp5jn6lix4.d(49): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp5jn6lix4.d(49): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp5jn6lix4.d(49): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5jn6lix4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong len = test_str.length;\n\tforeach(i, c; test_str)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if(i == len-1)\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' || test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1]\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "/tmp/tmp23_d349_.d(38): Error: found `unittest` when expecting `)`\n/tmp/tmp23_d349_.d(46): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp23_d349_.d(46): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp23_d349_.d(46): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp23_d349_.d(46): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp23_d349_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif (c == 'a' && test_str[$-1] == 'a')\n\t\t\t\tcount++;\n\t\t\telse if (c == 'e' && test_str[$-1] == 'e')\n\t\t\t\tcount++;\n\t\t\telse if (c == 'i' && test_str[$-1] == 'i')\n\t\t\t\tcount++;\n\t\t\telse if (c == 'o' && test_str[$-1] == 'o')\n\t\t\t\tcount++;\n\t\t\telse if (c == 'u' && test_str[$-1] == 'u')\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123217,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp2rp2n00d.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x427eed]\n??:? void tmp2rp2n00d.__unittest_L28_C1() [0x427c02]\n??:? void tmp2rp2n00d.__modtest() [0x427c6c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc87]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab1a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fcad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43015c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fc39]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aaf1]\n??:? runModuleUnitTests [0x42ba5d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283b0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tfor (long i = 0; i < test_str.length; i++) \n\t{\n\t\tif (i == 0) \n\t\t{\n\t\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t\t{\n\t\t\t\tif (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if (i == test_str.length - 1) \n\t\t{\n\t\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse \n\t\t{\n\t\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t\t{\n\t\t\t\tif (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "/tmp/tmpmstwlyma.d(37): Error: found `unittest` when expecting `)`\n/tmp/tmpmstwlyma.d(45): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpmstwlyma.d(45): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpmstwlyma.d(45): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpmstwlyma.d(45): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmstwlyma.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tfor (long i = 0; i < test_str.length; i++) \n\t{\n\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t{\n\t\t\tif (i > 0 && i < test_str.length - 1) \n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u' || test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (i == 0) \n\t\t\t{\n\t\t\t\tif (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (i == test_str.length - 1) \n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "/tmp/tmp_ya7jx_o.d(34): Error: found `unittest` instead of statement\n/tmp/tmp_ya7jx_o.d(42): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp_ya7jx_o.d(42): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp_ya7jx_o.d(42): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp_ya7jx_o.d(42): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_ya7jx_o.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif (c == 'a' && test_str[$-1] == 'a')\n\t\t\t\tcount++;\n\t\t\telse if (c == 'e' && test_str[$-1] == 'e')\n\t\t\t\tcount++;\n\t\t\telse if (c == 'i' && test_str[$-1] == 'i')\n\t\t\t\tcount++;\n\t\t\telse if (c == 'o' && test_str[$-1] == 'o')\n\t\t\t\tcount++;\n\t\t\telse if (c == 'u' && test_str[$-1] == 'u')\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123217,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp2rp2n00d.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x427eed]\n??:? void tmp2rp2n00d.__unittest_L28_C1() [0x427c02]\n??:? void tmp2rp2n00d.__modtest() [0x427c6c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc87]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab1a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fcad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43015c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fc39]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aaf1]\n??:? runModuleUnitTests [0x42ba5d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283b0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == test_str[0] || c == test_str[$-1])\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif(test_str[test_str.indexOf(c)-1] == 'a' || test_str[test_str.indexOf(c)-1] == 'e' || test_str[test_str.indexOf(c)-1] == 'i' || test_str[test_str.indexOf(c)-1] == 'o' || test_str[test_str.indexOf(c)-1] == 'u')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tif(test_str[test_str.indexOf(c)+1] == 'a' || test_str[test_str.indexOf(c)+1] == 'e' || test_str[test_str.indexOf(c)+1] == 'i' || test_str[test_str.indexOf(c)+1] == 'o' || test_str[test_str.indexOf(c)+1] == 'u')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "/tmp/tmplar1pfya.d(18): Error: no property `indexOf` for type `string`\n/tmp/tmplar1pfya.d(18): Error: no property `indexOf` for type `string`\n/tmp/tmplar1pfya.d(18): Error: no property `indexOf` for type `string`\n/tmp/tmplar1pfya.d(18): Error: no property `indexOf` for type `string`\n/tmp/tmplar1pfya.d(18): Error: no property `indexOf` for type `string`\n/tmp/tmplar1pfya.d(22): Error: no property `indexOf` for type `string`\n/tmp/tmplar1pfya.d(22): Error: no property `indexOf` for type `string`\n/tmp/tmplar1pfya.d(22): Error: no property `indexOf` for type `string`\n/tmp/tmplar1pfya.d(22): Error: no property `indexOf` for type `string`\n/tmp/tmplar1pfya.d(22): Error: no property `indexOf` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplar1pfya.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == test_str[0] || c == test_str[$-1])\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(test_str[test_str.indexOf(c)-1] == 'a' || test_str[test_str.indexOf(c)-1] == 'e' || test_str[test_str.indexOf(c)-1] == 'i' || test_str[test_str.indexOf(c)-1] == 'o' || test_str[test_str.indexOf(c)-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t\tif(test_str[test_str.indexOf(c)+1] == 'a' || test_str[test_str.indexOf(c)+1] == 'e' || test_str[test_str.indexOf(c)+1] == 'i' || test_str[test_str.indexOf(c)+1] == 'o' || test_str[test_str.indexOf(c)+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "/tmp/tmpjqfnezjt.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmpjqfnezjt.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmpjqfnezjt.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmpjqfnezjt.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmpjqfnezjt.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmpjqfnezjt.d(24): Error: no property `indexOf` for type `string`\n/tmp/tmpjqfnezjt.d(24): Error: no property `indexOf` for type `string`\n/tmp/tmpjqfnezjt.d(24): Error: no property `indexOf` for type `string`\n/tmp/tmpjqfnezjt.d(24): Error: no property `indexOf` for type `string`\n/tmp/tmpjqfnezjt.d(24): Error: no property `indexOf` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjqfnezjt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tfor(int i = 0; i < test_str.length; i++)\n\t{\n\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t{\n\t\t\tif(i == 0)\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(i == test_str.length - 1)\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' || test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123217,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpg6vgesib.d(43): unittest failure\n----------------\n??:? _d_unittestp [0x42812d]\n??:? void tmpg6vgesib.__unittest_L39_C1() [0x427e46]\n??:? void tmpg6vgesib.__modtest() [0x427eb0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bec7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ad5a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42feed]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43039c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fe79]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ad31]\n??:? runModuleUnitTests [0x42bc9d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285f0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == 'a')\n\t\t\t{\n\t\t\t\tif(test_str.find(\"e\") != -1 || test_str.find(\"i\") != -1 || test_str.find(\"o\") != -1 || test_str.find(\"u\") != -1)\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(c == 'e')\n\t\t\t{\n\t\t\t\tif(test_str.find(\"a\") != -1 || test_str.find(\"i\") != -1 || test_str.find(\"o\") != -1 || test_str.find(\"u\") != -1)\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(c == 'i')\n\t\t\t{\n\t\t\t\tif(test_str.find(\"a\") != -1 || test_str.find(\"e\") != -1 || test_str.find(\"o\") != -1 || test_str.find(\"u\") != -1)\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(c == 'o')\n\t\t\t{\n\t\t\t\tif(test_str.find(\"a\") != -1 || test_str.find(\"e\") != -1 || test_str.find(\"i\") != -1 || test_str.find(\"u\") != -1)\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(c == 'u')\n\t\t\t{\n\t\t\t\tif(test_str.find(\"a\") != -1 || test_str.find(\"e\") != -1 || test_str.find(\"i\") != -1 || test_str\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "/tmp/tmpnmk5_5q4.d(45): Error: found `unittest` when expecting `)`\n/tmp/tmpnmk5_5q4.d(53): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpnmk5_5q4.d(53): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpnmk5_5q4.d(53): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpnmk5_5q4.d(53): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnmk5_5q4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == test_str[0] || c == test_str[$ - 1])\n\t\t\t\tcontinue;\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(test_str[test_str.indexOf(c) - 1] == 'a' || test_str[test_str.indexOf(c) - 1] == 'e' || test_str[test_str.indexOf(c) - 1] == 'i' || test_str[test_str.indexOf(c) - 1] == 'o' || test_str[test_str.indexOf(c) - 1] == 'u')\n\t\t\t\t\tcount++;\n\t\t\t\tif(test_str[test_str.indexOf(c) + 1] == 'a' || test_str[test_str.indexOf(c) + 1] == 'e' || test_str[test_str.indexOf(c) + 1] == 'i' || test_str[test_str.indexOf(c) + 1] == 'o' || test_str[test_str.indexOf(c) + 1] == 'u')\n\t\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "/tmp/tmpf2_wbiml.d(18): Error: no property `indexOf` for type `string`\n/tmp/tmpf2_wbiml.d(18): Error: no property `indexOf` for type `string`\n/tmp/tmpf2_wbiml.d(18): Error: no property `indexOf` for type `string`\n/tmp/tmpf2_wbiml.d(18): Error: no property `indexOf` for type `string`\n/tmp/tmpf2_wbiml.d(18): Error: no property `indexOf` for type `string`\n/tmp/tmpf2_wbiml.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmpf2_wbiml.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmpf2_wbiml.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmpf2_wbiml.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmpf2_wbiml.d(20): Error: no property `indexOf` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf2_wbiml.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach (i, c; test_str)\n\t{\n\t\tif (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif (i != 0)\n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (i != test_str.length - 1)\n\t\t\t{\n\t\t\t\tif (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123217,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmps9h1m0cu.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x427f25]\n??:? void tmps9h1m0cu.__unittest_L32_C1() [0x427c3e]\n??:? void tmps9h1m0cu.__modtest() [0x427ca8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bcbf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab52]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fce5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430194]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fc71]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab29]\n??:? runModuleUnitTests [0x42ba95]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283e8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong i = 0;\n\tlong len = test_str.length;\n\twhile(i < len) \n\t{\n\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t{\n\t\t\tif(i > 0 && (test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tif(i < len-1 && (test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123217,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmps_lze4_d.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x427f85]\n??:? void tmps_lze4_d.__unittest_L29_C1() [0x427c9e]\n??:? void tmps_lze4_d.__modtest() [0x427d08]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bd1f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42abb2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fd45]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4301f4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fcd1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab89]\n??:? runModuleUnitTests [0x42baf5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428448]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tfor (long i = 0; i < test_str.length; i++) \n\t{\n\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t{\n\t\t\tif (i != 0 && i != test_str.length - 1) \n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u' || test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (i == 0) \n\t\t\t{\n\t\t\t\tif (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (i == test_str.length - 1) \n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "/tmp/tmpfnww_f4n.d(34): Error: found `unittest` instead of statement\n/tmp/tmpfnww_f4n.d(42): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpfnww_f4n.d(42): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpfnww_f4n.d(42): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpfnww_f4n.d(42): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfnww_f4n.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == 'a')\n\t\t\t{\n\t\t\t\tif(test_str[$-1] == 'e' || test_str[$-1] == 'i' || test_str[$-1] == 'o' || test_str[$-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t\tif(test_str[$+1] == 'e' || test_str[$+1] == 'i' || test_str[$+1] == 'o' || test_str[$+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(c == 'e')\n\t\t\t{\n\t\t\t\tif(test_str[$-1] == 'a' || test_str[$-1] == 'i' || test_str[$-1] == 'o' || test_str[$-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t\tif(test_str[$+1] == 'a' || test_str[$+1] == 'i' || test_str[$+1] == 'o' || test_str[$+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(c == 'i')\n\t\t\t{\n\t\t\t\tif(test_str[$-1] == 'a' || test_str[$-1] == 'e' || test_str[$-1] == 'o' || test_str[$-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "/tmp/tmpgk48esn2.d(42): Error: found `unittest` instead of statement\n/tmp/tmpgk48esn2.d(50): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpgk48esn2.d(50): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpgk48esn2.d(50): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgk48esn2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == 'a' && (test_str[$-1] == 'e' || test_str[$-1] == 'i' || test_str[$-1] == 'o' || test_str[$-1] == 'u'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'e' && (test_str[$-1] == 'a' || test_str[$-1] == 'i' || test_str[$-1] == 'o' || test_str[$-1] == 'u'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'i' && (test_str[$-1] == 'a' || test_str[$-1] == 'e' || test_str[$-1] == 'o' || test_str[$-1] == 'u'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'o' && (test_str[$-1] == 'a' || test_str[$-1] == 'e' || test_str[$-1] == 'i' || test_str[$-1] == 'u'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'u' && (test_str[$-1] == 'a' || test_str[$-1] == 'e' || test_str[$-1] == 'i' || test_str[$-1] == 'o'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpvbagq7bf.d(42): unittest failure\n----------------\n??:? _d_unittestp [0x42817d]\n??:? void tmpvbagq7bf.__unittest_L38_C1() [0x427e92]\n??:? void tmpvbagq7bf.__modtest() [0x427efc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bf17]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42adaa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ff3d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4303ec]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fec9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ad81]\n??:? runModuleUnitTests [0x42bced]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428640]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong ret = 0;\n\tlong len = test_str.length;\n\tforeach(i, test_str)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tret++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if(i == len - 1)\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tret++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' ||\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "/tmp/tmpgoylicru.d(11): Error: no identifier for declarator `test_str`\n/tmp/tmpgoylicru.d(11): Error: found `)` when expecting `;`\n/tmp/tmpgoylicru.d(38): Error: expression expected, not `unittest`\n/tmp/tmpgoylicru.d(39): Error: found `{` when expecting `)`\n/tmp/tmpgoylicru.d(46): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpgoylicru.d(46): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpgoylicru.d(46): Error: found `End of File` when expecting `)`\n/tmp/tmpgoylicru.d(46): Error: found `End of File` instead of statement\n/tmp/tmpgoylicru.d(46): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgoylicru.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong len = test_str.length;\n\tforeach(i; 0 .. len)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if(i == len-1)\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' ||\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "/tmp/tmpj5kp7mlu.d(38): Error: expression expected, not `unittest`\n/tmp/tmpj5kp7mlu.d(39): Error: found `{` when expecting `)`\n/tmp/tmpj5kp7mlu.d(46): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpj5kp7mlu.d(46): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpj5kp7mlu.d(46): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj5kp7mlu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == test_str[0])\n\t\t\t{\n\t\t\t\tif(test_str[1] == 'a' || test_str[1] == 'e' || test_str[1] == 'i' || test_str[1] == 'o' || test_str[1] == 'u')\n\t\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == test_str[test_str.length-1])\n\t\t\t{\n\t\t\t\tif(test_str[test_str.length-2] == 'a' || test_str[test_str.length-2] == 'e' || test_str[test_str.length-2] == 'i' || test_str[test_str.length-2] == 'o' || test_str[test_str.length-2] == 'u')\n\t\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(test_str[$-1] == 'a' || test_str[$-1] == 'e' || test_str[$-1] == 'i' || test_str[$-1] == 'o' || test_str[$-1] == 'u' || test_str[$+1] == 'a' || test_str[$+1] == 'e' || test_str[$+1] == 'i' || test_str[$+1] == 'o' || test_str[$+1] == 'u')\n\t\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123217,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpp0bqjpo0.d(26): Range violation\n----------------\n??:? _d_arrayboundsp [0x4281e6]\n??:? long tmpp0bqjpo0.count_vowels(immutable(char)[]) [0x427d5c]\n??:? void tmpp0bqjpo0.__unittest_L33_C1() [0x427e37]\n??:? void tmpp0bqjpo0.__modtest() [0x427eb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42becf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ad62]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fef5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4303a4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fe81]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ad39]\n??:? runModuleUnitTests [0x42bca5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(i, c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(i > 0)\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(i < test_str.length-1)\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123217,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpgx1qwdf4.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x427f25]\n??:? void tmpgx1qwdf4.__unittest_L32_C1() [0x427c3e]\n??:? void tmpgx1qwdf4.__modtest() [0x427ca8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bcbf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab52]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fce5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430194]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fc71]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab29]\n??:? runModuleUnitTests [0x42ba95]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283e8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong i = 0;\n\tlong len = test_str.length;\n\t\n\twhile (i < len) \n\t{\n\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t{\n\t\t\tif (i == 0) \n\t\t\t{\n\t\t\t\tif (test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (i == len - 1) \n\t\t\t{\n\t\t\t\tif (test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tif (test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' || test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "/tmp/tmp9o_gxwvb.d(40): Error: found `unittest` instead of statement\n/tmp/tmp9o_gxwvb.d(48): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9o_gxwvb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == 'a' && test_str[$-1] == 'a')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'e' && test_str[$-1] == 'e')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'i' && test_str[$-1] == 'i')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'o' && test_str[$-1] == 'o')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'u' && test_str[$-1] == 'u')\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp10rywk3h.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x427eed]\n??:? void tmp10rywk3h.__unittest_L28_C1() [0x427c02]\n??:? void tmp10rywk3h.__modtest() [0x427c6c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc87]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab1a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fcad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43015c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fc39]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aaf1]\n??:? runModuleUnitTests [0x42ba5d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283b0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong len = test_str.length;\n\tforeach(i, c; test_str)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if(i == len - 1)\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1]\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "/tmp/tmpkjj_cl7e.d(42): Error: found `unittest` when expecting `)`\n/tmp/tmpkjj_cl7e.d(50): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpkjj_cl7e.d(50): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpkjj_cl7e.d(50): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpkjj_cl7e.d(50): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkjj_cl7e.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong len = test_str.length;\n\tforeach(i, c; test_str)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if(i == len-1)\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1]\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "/tmp/tmpj6a_l6xj.d(42): Error: found `unittest` when expecting `)`\n/tmp/tmpj6a_l6xj.d(50): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpj6a_l6xj.d(50): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpj6a_l6xj.d(50): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpj6a_l6xj.d(50): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj6a_l6xj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong len = test_str.length;\n\tforeach(i, c; test_str)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if(i == len - 1)\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t\tif(test_str[i + 1] == 'a' || test_str[i + 1]\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "/tmp/tmp6isr0zb7.d(42): Error: found `unittest` when expecting `)`\n/tmp/tmp6isr0zb7.d(50): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp6isr0zb7.d(50): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp6isr0zb7.d(50): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp6isr0zb7.d(50): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6isr0zb7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(i, c; test_str)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if(i == test_str.length - 1)\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' || test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "/tmp/tmpltm21ri9.d(37): Error: found `unittest` when expecting `)`\n/tmp/tmpltm21ri9.d(45): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpltm21ri9.d(45): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpltm21ri9.d(45): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpltm21ri9.d(45): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpltm21ri9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong length = test_str.length;\n\tforeach(i, c; test_str)\n\t{\n\t\tif(i > 0 && i < length - 1)\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u' ||\n\t\t\t\t\ttest_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123217,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpvnyzr4fg.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x427f4d]\n??:? void tmpvnyzr4fg.__unittest_L27_C1() [0x427c62]\n??:? void tmpvnyzr4fg.__modtest() [0x427ccc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bce7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab7a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fd0d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4301bc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fc99]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab51]\n??:? runModuleUnitTests [0x42babd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428410]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong len = test_str.length;\n\tfor (long i = 0; i < len; i++)\n\t{\n\t\tif (i == 0)\n\t\t{\n\t\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if (i == len - 1)\n\t\t{\n\t\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] ==\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "/tmp/tmpdzknd63y.d(38): Error: expression expected, not `unittest`\n/tmp/tmpdzknd63y.d(39): Error: found `{` when expecting `)`\n/tmp/tmpdzknd63y.d(46): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpdzknd63y.d(46): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpdzknd63y.d(46): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdzknd63y.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == test_str[0])\n\t\t\t{\n\t\t\t\tif(test_str[1] == 'a' || test_str[1] == 'e' || test_str[1] == 'i' || test_str[1] == 'o' || test_str[1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(c == test_str[$-1])\n\t\t\t{\n\t\t\t\tif(test_str[$-2] == 'a' || test_str[$-2] == 'e' || test_str[$-2] == 'i' || test_str[$-2] == 'o' || test_str[$-2] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(test_str[test_str.indexOf(c)-1] == 'a' || test_str[test_str.indexOf(c)-1] == 'e' || test_str[test_str.indexOf(c)-1] == 'i' || test_str[test_str.indexOf(c)-1] == 'o' || test_str[test_str.indexOf(c)-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tif(test_str[test_str.indexOf(c)+1] == 'a' || test_str[test_str.indexOf(c)+1] == 'e' || test_str[test_str.indexOf(c)+1] == 'i' || test_str[test_str.indexOf(c)+1] == 'o' || test_str[test_str.indexOf(c)+1] == '\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "/tmp/tmprqu7coge.d(32): Error: unterminated character constant\n/tmp/tmprqu7coge.d(33): Error: found `unittest` when expecting `)`\n/tmp/tmprqu7coge.d(41): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmprqu7coge.d(41): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmprqu7coge.d(41): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmprqu7coge.d(41): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmprqu7coge.d(41): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprqu7coge.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong i = 0;\n\tlong len = test_str.length;\n\t\n\twhile (i < len) {\n\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') {\n\t\t\tif (i == 0) {\n\t\t\t\tif (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u') {\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t} else if (i == len - 1) {\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u') {\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u' || test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u') {\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123217,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpsvopot4e.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x428135]\n??:? void tmpsvopot4e.__unittest_L33_C1() [0x427e4a]\n??:? void tmpsvopot4e.__modtest() [0x427eb4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42becf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ad62]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fef5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4303a4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fe81]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ad39]\n??:? runModuleUnitTests [0x42bca5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285f8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == test_str[0] || c == test_str[$-1])\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(test_str[test_str.indexOf(c)-1] == 'a' || test_str[test_str.indexOf(c)-1] == 'e' || test_str[test_str.indexOf(c)-1] == 'i' || test_str[test_str.indexOf(c)-1] == 'o' || test_str[test_str.indexOf(c)-1] == 'u' || test_str[test_str.indexOf(c)+1] == 'a' || test_str[test_str.indexOf(c)+1] == 'e' || test_str[test_str.indexOf(c)+1] == 'i' || test_str[test_str.indexOf(c)+1] == 'o' || test_str[test_str.indexOf(c)+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "/tmp/tmp84ti_p9b.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmp84ti_p9b.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmp84ti_p9b.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmp84ti_p9b.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmp84ti_p9b.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmp84ti_p9b.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmp84ti_p9b.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmp84ti_p9b.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmp84ti_p9b.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmp84ti_p9b.d(20): Error: no property `indexOf` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp84ti_p9b.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tfor(int i = 0; i < test_str.length; i++)\n\t{\n\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t{\n\t\t\tif(i > 0 && i < test_str.length - 1)\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(i == 0)\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(i == test_str.length - 1)\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "/tmp/tmp6f7joh0p.d(36): Error: found `unittest` instead of statement\n/tmp/tmp6f7joh0p.d(44): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp6f7joh0p.d(44): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp6f7joh0p.d(44): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6f7joh0p.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong i = 0;\n\tlong len = test_str.length;\n\twhile(i < len)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if(i == len-1)\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] ==\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "/tmp/tmp05m9d5k2.d(39): Error: expression expected, not `unittest`\n/tmp/tmp05m9d5k2.d(40): Error: found `{` when expecting `)`\n/tmp/tmp05m9d5k2.d(47): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp05m9d5k2.d(47): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp05m9d5k2.d(47): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp05m9d5k2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == test_str[0] || c == test_str[test_str.length - 1])\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(test_str[test_str.indexOf(c) - 1] == 'a' || test_str[test_str.indexOf(c) - 1] == 'e' || test_str[test_str.indexOf(c) - 1] == 'i' || test_str[test_str.indexOf(c) - 1] == 'o' || test_str[test_str.indexOf(c) - 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t\tif(test_str[test_str.indexOf(c) + 1] == 'a' || test_str[test_str.indexOf(c) + 1] == 'e' || test_str[test_str.indexOf(c) + 1] == 'i' || test_str[test_str.indexOf(c) + 1] == 'o' || test_str[test_str.indexOf(c) + 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "/tmp/tmp339mg4jc.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmp339mg4jc.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmp339mg4jc.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmp339mg4jc.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmp339mg4jc.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmp339mg4jc.d(24): Error: no property `indexOf` for type `string`\n/tmp/tmp339mg4jc.d(24): Error: no property `indexOf` for type `string`\n/tmp/tmp339mg4jc.d(24): Error: no property `indexOf` for type `string`\n/tmp/tmp339mg4jc.d(24): Error: no property `indexOf` for type `string`\n/tmp/tmp339mg4jc.d(24): Error: no property `indexOf` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp339mg4jc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong i = 0;\n\tlong length = test_str.length;\n\twhile (i < length) \n\t{\n\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t{\n\t\t\tif (i > 0 && (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u')) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tif (i < length - 1 && (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u')) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123217,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpvvsqyine.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x427f85]\n??:? void tmpvvsqyine.__unittest_L29_C1() [0x427c9e]\n??:? void tmpvvsqyine.__modtest() [0x427d08]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bd1f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42abb2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fd45]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4301f4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fcd1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab89]\n??:? runModuleUnitTests [0x42baf5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428448]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == 'a' && test_str[$-1] == 'a')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'e' && test_str[$-1] == 'e')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'i' && test_str[$-1] == 'i')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'o' && test_str[$-1] == 'o')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'u' && test_str[$-1] == 'u')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp9psr6tn3.d(42): unittest failure\n----------------\n??:? _d_unittestp [0x427eed]\n??:? void tmp9psr6tn3.__unittest_L38_C1() [0x427c02]\n??:? void tmp9psr6tn3.__modtest() [0x427c6c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc87]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab1a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fcad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43015c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fc39]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aaf1]\n??:? runModuleUnitTests [0x42ba5d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283b0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == 'a')\n\t\t\t{\n\t\t\t\tif(c+1 == 'e' || c+1 == 'i' || c+1 == 'o' || c+1 == 'u')\n\t\t\t\t\tcount++;\n\t\t\t\tif(c-1 == 'e' || c-1 == 'i' || c-1 == 'o' || c-1 == 'u')\n\t\t\t\t\tcount++;\n\t\t\t}\n\t\t\tif(c == 'e')\n\t\t\t{\n\t\t\t\tif(c+1 == 'a' || c+1 == 'i' || c+1 == 'o' || c+1 == 'u')\n\t\t\t\t\tcount++;\n\t\t\t\tif(c-1 == 'a' || c-1 == 'i' || c-1 == 'o' || c-1 == 'u')\n\t\t\t\t\tcount++;\n\t\t\t}\n\t\t\tif(c == 'i')\n\t\t\t{\n\t\t\t\tif(c+1 == 'a' || c+1 == 'e' || c+1 == 'o' || c+1 == 'u')\n\t\t\t\t\tcount++;\n\t\t\t\tif(c-1 == 'a' || c-1 == 'e' || c-1 == 'o' || c-1 == 'u')\n\t\t\t\t\tcount++;\n\t\t\t}\n\t\t\tif(c == 'o')\n\t\t\t{\n\t\t\t\tif(c+1 == 'a' || c+1 == 'e' || c+1 == 'i' || c+1 == 'u')\n\t\t\t\t\tcount++;\n\t\t\t\tif(c-1 == 'a' || c-1 == 'e' || c-1 == 'i' || c-1 == 'u')\n\t\t\t\t\tcount++;\n\t\t\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "/tmp/tmp6cf4kpc9.d(42): Error: found `unittest` instead of statement\n/tmp/tmp6cf4kpc9.d(50): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp6cf4kpc9.d(50): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp6cf4kpc9.d(50): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6cf4kpc9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong len = test_str.length;\n\tfor (long i = 0; i < len; i++)\n\t{\n\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t{\n\t\t\tif (i == 0)\n\t\t\t{\n\t\t\t\tif (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (i == len - 1)\n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u' || test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\n\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123217,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmptpv96oiv.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x428125]\n??:? void tmptpv96oiv.__unittest_L41_C1() [0x427e3e]\n??:? void tmptpv96oiv.__modtest() [0x427ea8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bebf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ad52]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fee5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430394]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fe71]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ad29]\n??:? runModuleUnitTests [0x42bc95]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285e8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp6wqp902z.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x427d9d]\n??:? void tmp6wqp902z.__unittest_L19_C1() [0x427ab6]\n??:? void tmp6wqp902z.__modtest() [0x427b20]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bac3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a956]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fae9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a92d]\n??:? runModuleUnitTests [0x42b899]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281ec]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == 'a' && test_str[$-1] == 'a')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'e' && test_str[$-1] == 'e')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'i' && test_str[$-1] == 'i')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'o' && test_str[$-1] == 'o')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'u' && test_str[$-1] == 'u')\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp10rywk3h.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x427eed]\n??:? void tmp10rywk3h.__unittest_L28_C1() [0x427c02]\n??:? void tmp10rywk3h.__modtest() [0x427c6c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc87]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab1a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fcad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43015c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fc39]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aaf1]\n??:? runModuleUnitTests [0x42ba5d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283b0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong i = 0;\n\tlong len = test_str.length;\n\t\n\twhile (i < len)\n\t{\n\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t{\n\t\t\tif (i == 0)\n\t\t\t{\n\t\t\t\tif (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (i == len - 1)\n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u' || test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "/tmp/tmpqoctqubn.d(42): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqoctqubn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == 'a' && test_str[$-1] == 'a')\n\t\t\t\tcount++;\n\t\t\tif(c == 'e' && test_str[$-1] == 'e')\n\t\t\t\tcount++;\n\t\t\tif(c == 'i' && test_str[$-1] == 'i')\n\t\t\t\tcount++;\n\t\t\tif(c == 'o' && test_str[$-1] == 'o')\n\t\t\t\tcount++;\n\t\t\tif(c == 'u' && test_str[$-1] == 'u')\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmptsv2xhgu.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x427ed5]\n??:? void tmptsv2xhgu.__unittest_L28_C1() [0x427bee]\n??:? void tmptsv2xhgu.__modtest() [0x427c58]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc6f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab02]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc95]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430144]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fc21]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aad9]\n??:? runModuleUnitTests [0x42ba45]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428398]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong len = test_str.length;\n\tfor (long i = 0; i < len; i++) \n\t{\n\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t{\n\t\t\tif (i == 0) \n\t\t\t{\n\t\t\t\tif (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t} \n\t\t\telse if (i == len - 1) \n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u' || test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "/tmp/tmpsdhopvhv.d(38): Error: found `unittest` instead of statement\n/tmp/tmpsdhopvhv.d(46): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsdhopvhv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == 'a' && (test_str[$-1] == 'e' || test_str[$-1] == 'i' || test_str[$-1] == 'o' || test_str[$-1] == 'u'))\n\t\t\t\tcount++;\n\t\t\telse if(c == 'e' && (test_str[$-1] == 'a' || test_str[$-1] == 'i' || test_str[$-1] == 'o' || test_str[$-1] == 'u'))\n\t\t\t\tcount++;\n\t\t\telse if(c == 'i' && (test_str[$-1] == 'a' || test_str[$-1] == 'e' || test_str[$-1] == 'o' || test_str[$-1] == 'u'))\n\t\t\t\tcount++;\n\t\t\telse if(c == 'o' && (test_str[$-1] == 'a' || test_str[$-1] == 'e' || test_str[$-1] == 'i' || test_str[$-1] == 'u'))\n\t\t\t\tcount++;\n\t\t\telse if(c == 'u' && (test_str[$-1] == 'a' || test_str[$-1] == 'e' || test_str[$-1] == 'i' || test_str[$-1] == 'o'))\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpvgcnqib5.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x42817d]\n??:? void tmpvgcnqib5.__unittest_L28_C1() [0x427e92]\n??:? void tmpvgcnqib5.__modtest() [0x427efc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bf17]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42adaa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ff3d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4303ec]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fec9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ad81]\n??:? runModuleUnitTests [0x42bced]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428640]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tlong len = test_str.length;\n\tfor (long i = 0; i < len; i++) \n\t{\n\t\tif (i == 0) \n\t\t{\n\t\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t\t{\n\t\t\t\tif (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if (i == len - 1) \n\t\t{\n\t\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse \n\t\t{\n\t\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' ||\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "/tmp/tmp0013ymtr.d(38): Error: expression expected, not `unittest`\n/tmp/tmp0013ymtr.d(39): Error: found `{` when expecting `)`\n/tmp/tmp0013ymtr.d(46): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp0013ymtr.d(46): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp0013ymtr.d(46): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0013ymtr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == test_str[0] || c == test_str[$-1])\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(test_str[test_str.indexOf(c)-1] == 'a' || test_str[test_str.indexOf(c)-1] == 'e' || test_str[test_str.indexOf(c)-1] == 'i' || test_str[test_str.indexOf(c)-1] == 'o' || test_str[test_str.indexOf(c)-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t\tif(test_str[test_str.indexOf(c)+1] == 'a' || test_str[test_str.indexOf(c)+1] == 'e' || test_str[test_str.indexOf(c)+1] == 'i' || test_str[test_str.indexOf(c)+1] == 'o' || test_str[test_str.indexOf(c)+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "/tmp/tmpmw0p58v9.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmpmw0p58v9.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmpmw0p58v9.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmpmw0p58v9.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmpmw0p58v9.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmpmw0p58v9.d(24): Error: no property `indexOf` for type `string`\n/tmp/tmpmw0p58v9.d(24): Error: no property `indexOf` for type `string`\n/tmp/tmpmw0p58v9.d(24): Error: no property `indexOf` for type `string`\n/tmp/tmpmw0p58v9.d(24): Error: no property `indexOf` for type `string`\n/tmp/tmpmw0p58v9.d(24): Error: no property `indexOf` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmw0p58v9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == 'a' && test_str[$-1] == 'a')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'e' && test_str[$-1] == 'e')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'i' && test_str[$-1] == 'i')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'o' && test_str[$-1] == 'o')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'u' && test_str[$-1] == 'u')\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp10rywk3h.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x427eed]\n??:? void tmp10rywk3h.__unittest_L28_C1() [0x427c02]\n??:? void tmp10rywk3h.__modtest() [0x427c6c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc87]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab1a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fcad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43015c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fc39]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aaf1]\n??:? runModuleUnitTests [0x42ba5d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283b0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(i, c; test_str)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if(i == test_str.length - 1)\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' || test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "/tmp/tmphwupb0gm.d(37): Error: found `unittest` when expecting `)`\n/tmp/tmphwupb0gm.d(45): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmphwupb0gm.d(45): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmphwupb0gm.d(45): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmphwupb0gm.d(45): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphwupb0gm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tfor (long i = 0; i < test_str.length; i++)\n\t{\n\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t{\n\t\t\tif (i == 0)\n\t\t\t{\n\t\t\t\tif (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (i == test_str.length - 1)\n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u' || test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123217,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3scruw4s.d(43): unittest failure\n----------------\n??:? _d_unittestp [0x428125]\n??:? void tmp3scruw4s.__unittest_L39_C1() [0x427e3a]\n??:? void tmp3scruw4s.__modtest() [0x427ea4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bebf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ad52]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fee5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430394]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fe71]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ad29]\n??:? runModuleUnitTests [0x42bc95]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285e8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == 'a' && (test_str[$-1] == 'e' || test_str[$-1] == 'i' || test_str[$-1] == 'o' || test_str[$-1] == 'u'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'e' && (test_str[$-1] == 'a' || test_str[$-1] == 'i' || test_str[$-1] == 'o' || test_str[$-1] == 'u'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'i' && (test_str[$-1] == 'a' || test_str[$-1] == 'e' || test_str[$-1] == 'o' || test_str[$-1] == 'u'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'o' && (test_str[$-1] == 'a' || test_str[$-1] == 'e' || test_str[$-1] == 'i' || test_str[$-1] == 'u'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'u' && (test_str[$-1] == 'a' || test_str[$-1] == 'e' || test_str[$-1] == 'i' || test_str[$-1] == 'o'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517431,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpvbagq7bf.d(42): unittest failure\n----------------\n??:? _d_unittestp [0x42817d]\n??:? void tmpvbagq7bf.__unittest_L38_C1() [0x427e92]\n??:? void tmpvbagq7bf.__modtest() [0x427efc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bf17]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42adaa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ff3d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4303ec]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fec9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ad81]\n??:? runModuleUnitTests [0x42bced]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428640]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\t\t\tif(c == test_str[0] || c == test_str[$-1])\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(test_str[test_str.indexOf(c)-1] == 'a' || test_str[test_str.indexOf(c)-1] == 'e' || test_str[test_str.indexOf(c)-1] == 'i' || test_str[test_str.indexOf(c)-1] == 'o' || test_str[test_str.indexOf(c)-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t\tif(test_str[test_str.indexOf(c)+1] == 'a' || test_str[test_str.indexOf(c)+1] == 'e' || test_str[test_str.indexOf(c)+1] == 'i' || test_str[test_str.indexOf(c)+1] == 'o' || test_str[test_str.indexOf(c)+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "/tmp/tmpjqfnezjt.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmpjqfnezjt.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmpjqfnezjt.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmpjqfnezjt.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmpjqfnezjt.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmpjqfnezjt.d(24): Error: no property `indexOf` for type `string`\n/tmp/tmpjqfnezjt.d(24): Error: no property `indexOf` for type `string`\n/tmp/tmpjqfnezjt.d(24): Error: no property `indexOf` for type `string`\n/tmp/tmpjqfnezjt.d(24): Error: no property `indexOf` for type `string`\n/tmp/tmpjqfnezjt.d(24): Error: no property `indexOf` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjqfnezjt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tfor (long i = 0; i < test_str.length; i++) \n\t{\n\t\tif (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') \n\t\t{\n\t\t\tif (i > 0 && (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u')) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tif (i < test_str.length - 1 && (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u')) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123217,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppxnzvxam.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427f85]\n??:? void tmppxnzvxam.__unittest_L26_C1() [0x427c9a]\n??:? void tmppxnzvxam.__modtest() [0x427d04]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bd1f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42abb2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fd45]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4301f4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fcd1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab89]\n??:? runModuleUnitTests [0x42baf5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428448]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\n*/\nlong count_vowels(string test_str) \n{\n\tlong count = 0;\n\tforeach(i; 0 .. test_str.length)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if(i == test_str.length - 1)\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u')\n\t\t\t{\n\t\t\t\tif(test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str\nunittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "/tmp/tmp1d727l2r.d(37): Error: found `unittest` when expecting `)`\n/tmp/tmp1d727l2r.d(45): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp1d727l2r.d(45): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp1d727l2r.d(45): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp1d727l2r.d(45): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1d727l2r.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}