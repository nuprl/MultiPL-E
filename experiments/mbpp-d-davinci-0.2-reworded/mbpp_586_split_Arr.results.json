{
  "name": "mbpp_586_split_Arr",
  "language": "d",
  "prompt": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_586_split_Arr.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] res = new long[l.length];\n\tlong i = 0;\n\tfor (i = 0; i < n; i++)\n\t{\n\t\tres[i] = l[i];\n\t}\n\tfor (long j = 0; j < l.length - n; j++)\n\t{\n\t\tres[i] = l[j];\n\t\ti++;\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpmvtqno70.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x42849d]\n??:? void tmpmvtqno70.__unittest_L22_C1() [0x427fe0]\n??:? void tmpmvtqno70.__modtest() [0x428220]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c557]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3ea]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430675]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b24]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430601]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3c1]\n??:? runModuleUnitTests [0x42c32d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428960]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] ret = new long[l.length];\n\tlong i = 0;\n\twhile (i < n) \n\t{\n\t\tret[i] = l[i];\n\t\ti += 1;\n\t}\n\tlong j = 0;\n\twhile (i < l.length) \n\t{\n\t\tret[i] = l[n + j];\n\t\ti += 1;\n\t\tj += 1;\n\t}\n\treturn ret;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpfqcwjmza.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x4284ad]\n??:? void tmpfqcwjmza.__unittest_L25_C1() [0x427fec]\n??:? void tmpfqcwjmza.__modtest() [0x42822c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c567]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3fa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430685]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b34]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430611]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3d1]\n??:? runModuleUnitTests [0x42c33d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428970]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] result;\n\tlong[] first;\n\tlong[] second;\n\tlong i;\n\t\n\tresult = new long[l.length];\n\tfirst = new long[n];\n\tsecond = new long[l.length - n];\n\t\n\tfor (i = 0; i < n; i++) {\n\t\tfirst[i] = l[i];\n\t}\n\t\n\tfor (i = n; i < l.length; i++) {\n\t\tsecond[i - n] = l[i];\n\t}\n\t\n\tfor (i = 0; i < l.length; i++) {\n\t\tif (i < l.length - n) {\n\t\t\tresult[i] = second[i];\n\t\t} else {\n\t\t\tresult[i] = first[i - (l.length - n)];\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] l1 = l[0..n];\n\tlong[] l2 = l[n..$];\n\treturn l2 ~ l1;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] result = new long[l.length];\n\tlong[] first = new long[n];\n\tlong[] second = new long[l.length - n];\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tfirst[i] = l[i];\n\t}\n\t\n\tfor (long i = n; i < l.length; i++)\n\t{\n\t\tsecond[i - n] = l[i];\n\t}\n\t\n\tfor (long i = 0; i < l.length; i++)\n\t{\n\t\tif (i < l.length - n)\n\t\t{\n\t\t\tresult[i] = second[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[i] = first[i - l.length + n];\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] result = new long[l.length];\n\tlong[] first = new long[n];\n\tlong[] second = new long[l.length - n];\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tfirst[i] = l[i];\n\t}\n\t\n\tfor (long i = n; i < l.length; i++)\n\t{\n\t\tsecond[i - n] = l[i];\n\t}\n\t\n\tfor (long i = 0; i < l.length; i++)\n\t{\n\t\tif (i < l.length - n)\n\t\t{\n\t\t\tresult[i] = second[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[i] = first[i - (l.length - n)];\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] res = new long[l.length];\n\tlong[] first = new long[n];\n\tlong[] second = new long[l.length - n];\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tfirst[i] = l[i];\n\t}\n\t\n\tfor (long i = n; i < l.length; i++)\n\t{\n\t\tsecond[i - n] = l[i];\n\t}\n\t\n\tfor (long i = 0; i < second.length; i++)\n\t{\n\t\tres[i] = second[i];\n\t}\n\t\n\tfor (long i = second.length; i < res.length; i++)\n\t{\n\t\tres[i] = first[i - second.length];\n\t}\n\t\n\treturn res;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] res = new long[l.length];\n\tlong[] first = new long[n];\n\tlong[] second = new long[l.length - n];\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tfirst[i] = l[i];\n\t}\n\t\n\tfor(long i = n; i < l.length; i++)\n\t{\n\t\tsecond[i - n] = l[i];\n\t}\n\t\n\tfor(long i = 0; i < second.length; i++)\n\t{\n\t\tres[i] = second[i];\n\t}\n\t\n\tfor(long i = second.length; i < res.length; i++)\n\t{\n\t\tres[i] = first[i - second.length];\n\t}\n\t\n\treturn res;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] res = new long[l.length];\n\tlong[] first = new long[n];\n\tlong[] second = new long[l.length - n];\n\tlong i = 0;\n\twhile (i < n) {\n\t\tfirst[i] = l[i];\n\t\ti++;\n\t}\n\ti = 0;\n\twhile (i < l.length - n) {\n\t\tsecond[i] = l[n + i];\n\t\ti++;\n\t}\n\ti = 0;\n\twhile (i < second.length) {\n\t\tres[i] = second[i];\n\t\ti++;\n\t}\n\ti = 0;\n\twhile (i < first.length) {\n\t\tres[second.length + i] = first[i];\n\t\ti++;\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] l1 = l[0..n];\n\tlong[] l2 = l[n..$];\n\treturn l2 ~ l1;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] ret = new long[l.length];\n\t\n\tfor (long i = 0; i < l.length; i++) \n\t{\n\t\tif (i < n) \n\t\t{\n\t\t\tret[i] = l[i];\n\t\t}\n\t\telse \n\t\t{\n\t\t\tret[i] = l[i - n];\n\t\t}\n\t}\n\treturn ret;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpmocm7mmz.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428495]\n??:? void tmpmocm7mmz.__unittest_L24_C1() [0x427fd4]\n??:? void tmpmocm7mmz.__modtest() [0x428214]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c54f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3e2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43066d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b1c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305f9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b9]\n??:? runModuleUnitTests [0x42c325]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428958]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] result = new long[l.length];\n\tlong[] first = new long[n];\n\tlong[] second = new long[l.length - n];\n\tlong i = 0;\n\tlong j = 0;\n\t\n\tfor (i = 0; i < n; i++)\n\t{\n\t\tfirst[i] = l[i];\n\t}\n\t\n\tfor (i = n; i < l.length; i++)\n\t{\n\t\tsecond[j] = l[i];\n\t\tj++;\n\t}\n\t\n\tfor (i = 0; i < second.length; i++)\n\t{\n\t\tresult[i] = second[i];\n\t}\n\t\n\tfor (i = 0; i < first.length; i++)\n\t{\n\t\tresult[i + second.length] = first[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] result = new long[l.length];\n\tlong i = 0;\n\tlong j = 0;\n\twhile (i < l.length)\n\t{\n\t\tif (i < n)\n\t\t{\n\t\t\tresult[j] = l[i];\n\t\t\tj++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[j] = l[i];\n\t\t\tj++;\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpmvmd4acl.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x428495]\n??:? void tmpmvmd4acl.__unittest_L28_C1() [0x427fd8]\n??:? void tmpmvmd4acl.__modtest() [0x428218]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c54f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3e2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43066d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b1c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305f9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b9]\n??:? runModuleUnitTests [0x42c325]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428958]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] result;\n\tresult = new long[l.length];\n\t\n\tfor(int i = 0; i < l.length; i++)\n\t{\n\t\tif(i < n)\n\t\t{\n\t\t\tresult[i] = l[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[i] = l[i - n];\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp74qmu4m4.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x4284a5]\n??:? void tmp74qmu4m4.__unittest_L26_C1() [0x427fe8]\n??:? void tmp74qmu4m4.__modtest() [0x428228]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c55f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3f2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43067d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b2c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430609]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3c9]\n??:? runModuleUnitTests [0x42c335]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428968]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] res = new long[l.length];\n\tlong[] first = new long[n];\n\tlong[] second = new long[l.length - n];\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tfirst[i] = l[i];\n\t}\n\t\n\tfor (long i = n; i < l.length; i++)\n\t{\n\t\tsecond[i - n] = l[i];\n\t}\n\t\n\tfor (long i = 0; i < second.length; i++)\n\t{\n\t\tres[i] = second[i];\n\t}\n\t\n\tfor (long i = 0; i < first.length; i++)\n\t{\n\t\tres[i + second.length] = first[i];\n\t}\n\t\n\treturn res;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] result = new long[l.length];\n\tlong[] first = new long[n];\n\tlong[] second = new long[l.length - n];\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tfirst[i] = l[i];\n\t}\n\t\n\tfor (long i = n; i < l.length; i++)\n\t{\n\t\tsecond[i - n] = l[i];\n\t}\n\t\n\tfor (long i = 0; i < l.length; i++)\n\t{\n\t\tif (i < l.length - n)\n\t\t{\n\t\t\tresult[i] = second[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[i] = first[i - (l.length - n)];\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] l1 = l[0..n];\n\tlong[] l2 = l[n..$];\n\treturn l2 ~ l1;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] a = new long[l.length];\n\tlong[] b = new long[l.length];\n\tlong[] c = new long[l.length];\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\ta[i] = l[i];\n\t}\n\t\n\tfor(long i = n; i < l.length; i++)\n\t{\n\t\tb[i] = l[i];\n\t}\n\t\n\tfor(long i = 0; i < l.length; i++)\n\t{\n\t\tc[i] = b[i];\n\t\tc[i + l.length - n] = a[i];\n\t}\n\t\n\treturn c;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmplq426r_2.d(26): Range violation\n----------------\n??:? _d_arrayboundsp [0x42864e]\n??:? long[] tmplq426r_2.split_Arr(long[], long) [0x427fc0]\n??:? void tmplq426r_2.__unittest_L31_C1() [0x428069]\n??:? void tmplq426r_2.__modtest() [0x428320]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c657]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4ea]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430775]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c24]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430701]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4c1]\n??:? runModuleUnitTests [0x42c42d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int funct",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] l1 = l[0..n];\n\tlong[] l2 = l[n..$];\n\treturn l2 ~ l1;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] result = new long[l.length];\n\tlong[] first = new long[n];\n\tlong[] second = new long[l.length-n];\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tfirst[i] = l[i];\n\t}\n\t\n\tfor(long i = n; i < l.length; i++)\n\t{\n\t\tsecond[i-n] = l[i];\n\t}\n\t\n\tfor(long i = 0; i < l.length; i++)\n\t{\n\t\tif(i < l.length-n)\n\t\t{\n\t\t\tresult[i] = second[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[i] = first[i-l.length+n];\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] r = new long[l.length];\n\tlong[] a = new long[n];\n\tlong[] b = new long[l.length - n];\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\ta[i] = l[i];\n\t}\n\t\n\tfor (long i = n; i < l.length; i++)\n\t{\n\t\tb[i - n] = l[i];\n\t}\n\t\n\tfor (long i = 0; i < l.length; i++)\n\t{\n\t\tif (i < l.length - n)\n\t\t{\n\t\t\tr[i] = b[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tr[i] = a[i - (l.length - n)];\n\t\t}\n\t}\n\t\n\treturn r;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] l1 = l[0..n];\n\tlong[] l2 = l[n..$];\n\treturn l2 ~ l1;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] l1 = new long[n];\n\tlong[] l2 = new long[l.length - n];\n\tlong[] l3 = new long[l.length];\n\t\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tl1[i] = l[i];\n\t}\n\t\n\tfor (int i = n; i < l.length; i++)\n\t{\n\t\tl2[i - n] = l[i];\n\t}\n\t\n\tfor (int i = 0; i < l2.length; i++)\n\t{\n\t\tl3[i] = l2[i];\n\t}\n\t\n\tfor (int i = 0; i < l1.length; i++)\n\t{\n\t\tl3[l2.length + i] = l1[i];\n\t}\n\t\n\treturn l3;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122398,
      "stdout": "",
      "stderr": "/tmp/tmptbee7rks.d(18): Error: cannot implicitly convert expression `n` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptbee7rks.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] l2 = new long[l.length];\n\tlong[] l3 = new long[l.length];\n\tlong[] l4 = new long[l.length];\n\tlong[] l5 = new long[l.length];\n\tlong[] l6 = new long[l.length];\n\tlong[] l7 = new long[l.length];\n\tlong[] l8 = new long[l.length];\n\tlong[] l9 = new long[l.length];\n\tlong[] l10 = new long[l.length];\n\tlong[] l11 = new long[l.length];\n\tlong[] l12 = new long[l.length];\n\tlong[] l13 = new long[l.length];\n\tlong[] l14 = new long[l.length];\n\tlong[] l15 = new long[l.length];\n\tlong[] l16 = new long[l.length];\n\tlong[] l17 = new long[l.length];\n\tlong[] l18 = new long[l.length];\n\tlong[] l19 = new long[l.length];\n\tlong[] l20 = new long[l.length];\n\tlong[] l21 = new long[l.length];\n\tlong[] l22 = new long[l.length];\n\tlong[] l23 = new long[l.length];\n\tlong[] l24 = new long[l.length];\n\tlong[] l25 = new long[l.length];\n\tlong[] l26 = new long[l.length];\n\tlong[] l27 = new long[l.length];\n\tlong[] l28 = new long[l.length];\n\tlong[] l29 = new long[l.length];\n\tlong[] l30 = new long[l.length];\n\tlong[] l31 = new long[l.length];\n\tlong[] l32 = new long[l.length];\n\tlong[] l33 = new long[l.length];\n\tlong[] l34 = new long[l.length];\n\tlong[] l35 = new long[l.length];\n\tlong[] l36 = new long[l.length];\n\tlong[] l37 = new long[l.length];\n\tlong[] l38\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122398,
      "stdout": "",
      "stderr": "/tmp/tmpzypffani.d(46): Error: semicolon expected, not `unittest`\n/tmp/tmpzypffani.d(46): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzypffani.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] result = new long[l.length];\n\tlong[] first = new long[n];\n\tlong[] second = new long[l.length - n];\n\t\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tfirst[i] = l[i];\n\t}\n\t\n\tfor (int i = 0; i < l.length - n; i++) \n\t{\n\t\tsecond[i] = l[i + n];\n\t}\n\t\n\tfor (int i = 0; i < l.length - n; i++) \n\t{\n\t\tresult[i] = second[i];\n\t}\n\t\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tresult[i + l.length - n] = first[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] ret = new long[l.length];\n\tlong[] first = new long[n];\n\tlong[] second = new long[l.length - n];\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tfirst[i] = l[i];\n\t}\n\t\n\tfor(long i = 0; i < l.length - n; i++)\n\t{\n\t\tsecond[i] = l[i + n];\n\t}\n\t\n\tfor(long i = 0; i < l.length - n; i++)\n\t{\n\t\tret[i] = second[i];\n\t}\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tret[i + l.length - n] = first[i];\n\t}\n\t\n\treturn ret;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] a = l[0..n];\n\tlong[] b = l[n..$];\n\treturn b ~ a;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] l1 = l[0..n];\n\tlong[] l2 = l[n..$];\n\treturn l2 ~ l1;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] result = new long[l.length];\n\tlong[] first = new long[n];\n\tlong[] second = new long[l.length - n];\n\t\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tfirst[i] = l[i];\n\t}\n\t\n\tfor (long i = n; i < l.length; i++) \n\t{\n\t\tsecond[i - n] = l[i];\n\t}\n\t\n\tfor (long i = 0; i < l.length; i++) \n\t{\n\t\tif (i < l.length - n) \n\t\t{\n\t\t\tresult[i] = second[i];\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult[i] = first[i - (l.length - n)];\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] l1 = new long[l.length];\n\tlong[] l2 = new long[l.length];\n\tlong[] l3 = new long[l.length];\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tl1[i] = l[i];\n\t}\n\t\n\tfor(long i = n; i < l.length; i++)\n\t{\n\t\tl2[i] = l[i];\n\t}\n\t\n\tfor(long i = 0; i < l.length; i++)\n\t{\n\t\tl3[i] = l2[i];\n\t\tl3[i + n] = l1[i];\n\t}\n\t\n\treturn l3;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpkqpyu25c.d(26): Range violation\n----------------\n??:? _d_arrayboundsp [0x42864e]\n??:? long[] tmpkqpyu25c.split_Arr(long[], long) [0x427fbc]\n??:? void tmpkqpyu25c.__unittest_L31_C1() [0x428065]\n??:? void tmpkqpyu25c.__modtest() [0x42831c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c657]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4ea]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430775]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c24]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430701]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4c1]\n??:? runModuleUnitTests [0x42c42d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int funct",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] result = new long[l.length];\n\tlong[] first = new long[n];\n\tlong[] second = new long[l.length - n];\n\t\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tfirst[i] = l[i];\n\t}\n\t\n\tfor (long i = 0; i < l.length - n; i++) \n\t{\n\t\tsecond[i] = l[n + i];\n\t}\n\t\n\tfor (long i = 0; i < l.length - n; i++) \n\t{\n\t\tresult[i] = second[i];\n\t}\n\t\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tresult[l.length - n + i] = first[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] ret = new long[l.length];\n\tlong[] first = new long[n];\n\tlong[] second = new long[l.length - n];\n\t\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tfirst[i] = l[i];\n\t}\n\t\n\tfor (long i = 0; i < l.length - n; i++) \n\t{\n\t\tsecond[i] = l[n + i];\n\t}\n\t\n\tfor (long i = 0; i < l.length - n; i++) \n\t{\n\t\tret[i] = second[i];\n\t}\n\t\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tret[l.length - n + i] = first[i];\n\t}\n\t\n\treturn ret;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] result = new long[l.length];\n\tlong[] first = new long[n];\n\tlong[] second = new long[l.length-n];\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tfirst[i] = l[i];\n\t}\n\t\n\tfor(long i = n; i < l.length; i++)\n\t{\n\t\tsecond[i-n] = l[i];\n\t}\n\t\n\tfor(long i = 0; i < second.length; i++)\n\t{\n\t\tresult[i] = second[i];\n\t}\n\t\n\tfor(long i = second.length; i < l.length; i++)\n\t{\n\t\tresult[i] = first[i-second.length];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] l1 = new long[n];\n\tlong[] l2 = new long[l.length - n];\n\tlong[] l3 = new long[l.length];\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tl1[i] = l[i];\n\t}\n\t\n\tfor (long i = n; i < l.length; i++)\n\t{\n\t\tl2[i - n] = l[i];\n\t}\n\t\n\tfor (long i = 0; i < l.length; i++)\n\t{\n\t\tif (i < l2.length)\n\t\t{\n\t\t\tl3[i] = l2[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tl3[i] = l1[i - l2.length];\n\t\t}\n\t}\n\t\n\treturn l3;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] l1 = l[0..n];\n\tlong[] l2 = l[n..$];\n\treturn l2 ~ l1;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] result = new long[l.length];\n\tlong[] first = new long[n];\n\tlong[] second = new long[l.length - n];\n\t\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tfirst[i] = l[i];\n\t}\n\t\n\tfor (int i = n; i < l.length; i++)\n\t{\n\t\tsecond[i - n] = l[i];\n\t}\n\t\n\tfor (int i = 0; i < second.length; i++)\n\t{\n\t\tresult[i] = second[i];\n\t}\n\t\n\tfor (int i = second.length; i < result.length; i++)\n\t{\n\t\tresult[i] = first[i - second.length];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122398,
      "stdout": "",
      "stderr": "/tmp/tmp3e9_ckv4.d(18): Error: cannot implicitly convert expression `n` of type `long` to `int`\n/tmp/tmp3e9_ckv4.d(28): Error: cannot implicitly convert expression `second.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3e9_ckv4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] result = new long[l.length];\n\tlong[] first = new long[n];\n\tlong[] second = new long[l.length - n];\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tfirst[i] = l[i];\n\t}\n\t\n\tfor (long i = n; i < l.length; i++)\n\t{\n\t\tsecond[i - n] = l[i];\n\t}\n\t\n\tfor (long i = 0; i < l.length; i++)\n\t{\n\t\tif (i < l.length - n)\n\t\t{\n\t\t\tresult[i] = second[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[i] = first[i - l.length + n];\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] first = l[0..n];\n\tlong[] second = l[n..$];\n\treturn second ~ first;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] ret = new long[l.length];\n\tlong i = 0;\n\t\n\twhile(i < n)\n\t{\n\t\tret[i] = l[i];\n\t\ti++;\n\t}\n\t\n\twhile(i < l.length)\n\t{\n\t\tret[i] = l[i - n];\n\t\ti++;\n\t}\n\t\n\treturn ret;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpx20jqf2v.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x42848d]\n??:? void tmpx20jqf2v.__unittest_L26_C1() [0x427fd0]\n??:? void tmpx20jqf2v.__modtest() [0x428210]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c547]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3da]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430665]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b14]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b1]\n??:? runModuleUnitTests [0x42c31d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428950]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] result = new long[l.length];\n\tlong[] first = new long[n];\n\tlong[] second = new long[l.length - n];\n\t\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tfirst[i] = l[i];\n\t}\n\t\n\tfor (long i = 0; i < l.length - n; i++) \n\t{\n\t\tsecond[i] = l[i + n];\n\t}\n\t\n\tfor (long i = 0; i < l.length - n; i++) \n\t{\n\t\tresult[i] = second[i];\n\t}\n\t\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tresult[i + l.length - n] = first[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] first = l[0..n];\n\tlong[] second = l[n..$];\n\treturn second ~ first;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] newArr = new long[l.length];\n\tlong[] first = new long[n];\n\tlong[] second = new long[l.length - n];\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tfirst[i] = l[i];\n\t}\n\t\n\tfor (long i = n; i < l.length; i++)\n\t{\n\t\tsecond[i - n] = l[i];\n\t}\n\t\n\tfor (long i = 0; i < l.length; i++)\n\t{\n\t\tif (i < l.length - n)\n\t\t{\n\t\t\tnewArr[i] = second[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnewArr[i] = first[i - l.length + n];\n\t\t}\n\t}\n\t\n\treturn newArr;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] new_arr = new long[l.length];\n\tlong[] first_part = new long[n];\n\tlong[] second_part = new long[l.length - n];\n\t\n\tfor (long i = 0; i < l.length; i++) \n\t{\n\t\tif (i < n) \n\t\t{\n\t\t\tfirst_part[i] = l[i];\n\t\t}\n\t\telse \n\t\t{\n\t\t\tsecond_part[i - n] = l[i];\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < l.length; i++) \n\t{\n\t\tif (i < l.length - n) \n\t\t{\n\t\t\tnew_arr[i] = second_part[i];\n\t\t}\n\t\telse \n\t\t{\n\t\t\tnew_arr[i] = first_part[i - l.length + n];\n\t\t}\n\t}\n\t\n\treturn new_arr;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] a = l[0..n];\n\tlong[] b = l[n..$];\n\treturn b ~ a;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] a;\n\tlong[] b;\n\tlong[] c;\n\tlong i;\n\t\n\ta = new long[n];\n\tb = new long[l.length - n];\n\tc = new long[l.length];\n\t\n\tfor (i = 0; i < n; i++)\n\t{\n\t\ta[i] = l[i];\n\t}\n\t\n\tfor (i = n; i < l.length; i++)\n\t{\n\t\tb[i - n] = l[i];\n\t}\n\t\n\tfor (i = 0; i < b.length; i++)\n\t{\n\t\tc[i] = b[i];\n\t}\n\t\n\tfor (i = 0; i < a.length; i++)\n\t{\n\t\tc[i + b.length] = a[i];\n\t}\n\t\n\treturn c;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] a = new long[l.length];\n\tlong[] b = new long[l.length];\n\tlong[] c = new long[l.length];\n\tlong[] d = new long[l.length];\n\tlong[] e = new long[l.length];\n\tlong[] f = new long[l.length];\n\tlong[] g = new long[l.length];\n\tlong[] h = new long[l.length];\n\tlong[] i = new long[l.length];\n\tlong[] j = new long[l.length];\n\tlong[] k = new long[l.length];\n\tlong[] m = new long[l.length];\n\tlong[] o = new long[l.length];\n\tlong[] p = new long[l.length];\n\tlong[] q = new long[l.length];\n\tlong[] r = new long[l.length];\n\tlong[] s = new long[l.length];\n\tlong[] t = new long[l.length];\n\tlong[] u = new long[l.length];\n\tlong[] v = new long[l.length];\n\tlong[] w = new long[l.length];\n\tlong[] x = new long[l.length];\n\tlong[] y = new long[l.length];\n\tlong[] z = new long[l.length];\n\tlong[] aa = new long[l.length];\n\tlong[] ab = new long[l.length];\n\tlong[] ac = new long[l.length];\n\tlong[] ad = new long[l.length];\n\tlong[] ae = new long[l.length];\n\tlong[] af = new long[l.length];\n\tlong[] ag = new long[l.length];\n\tlong[] ah = new long[l.length];\n\tlong[] ai = new long[l.length];\n\tlong[] aj = new long[l.length];\n\tlong[] ak = new long[l.length];\n\tlong[] al = new long[l.length];\n\tlong[] am = new long[l.length];\n\tlong[] an = new long[l.length];\n\tlong[] ao = new long[l.\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122398,
      "stdout": "",
      "stderr": "/tmp/tmppa0mb2gv.d(48): Error: identifier expected following `.`, not `unittest`\n/tmp/tmppa0mb2gv.d(49): Error: found `{` when expecting `]`\n/tmp/tmppa0mb2gv.d(50): Error: semicolon expected, not `alias`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppa0mb2gv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] result = new long[l.length];\n\tlong[] first = new long[n];\n\tlong[] second = new long[l.length-n];\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tfirst[i] = l[i];\n\t}\n\t\n\tfor(long i = n; i < l.length; i++)\n\t{\n\t\tsecond[i-n] = l[i];\n\t}\n\t\n\tfor(long i = 0; i < second.length; i++)\n\t{\n\t\tresult[i] = second[i];\n\t}\n\t\n\tfor(long i = second.length; i < result.length; i++)\n\t{\n\t\tresult[i] = first[i-second.length];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] newArr = new long[l.length];\n\tlong[] first = new long[n];\n\tlong[] second = new long[l.length - n];\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tfirst[i] = l[i];\n\t}\n\t\n\tfor (long i = n; i < l.length; i++)\n\t{\n\t\tsecond[i - n] = l[i];\n\t}\n\t\n\tfor (long i = 0; i < second.length; i++)\n\t{\n\t\tnewArr[i] = second[i];\n\t}\n\t\n\tfor (long i = 0; i < first.length; i++)\n\t{\n\t\tnewArr[i + second.length] = first[i];\n\t}\n\t\n\treturn newArr;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] a = new long[l.length];\n\tlong[] b = new long[l.length];\n\tlong[] c = new long[l.length];\n\tlong[] d = new long[l.length];\n\tlong[] e = new long[l.length];\n\tlong[] f = new long[l.length];\n\tlong[] g = new long[l.length];\n\tlong[] h = new long[l.length];\n\tlong[] i = new long[l.length];\n\tlong[] j = new long[l.length];\n\tlong[] k = new long[l.length];\n\tlong[] m = new long[l.length];\n\tlong[] o = new long[l.length];\n\tlong[] p = new long[l.length];\n\tlong[] q = new long[l.length];\n\tlong[] r = new long[l.length];\n\tlong[] s = new long[l.length];\n\tlong[] t = new long[l.length];\n\tlong[] u = new long[l.length];\n\tlong[] v = new long[l.length];\n\tlong[] w = new long[l.length];\n\tlong[] x = new long[l.length];\n\tlong[] y = new long[l.length];\n\tlong[] z = new long[l.length];\n\tlong[] aa = new long[l.length];\n\tlong[] ab = new long[l.length];\n\tlong[] ac = new long[l.length];\n\tlong[] ad = new long[l.length];\n\tlong[] ae = new long[l.length];\n\tlong[] af = new long[l.length];\n\tlong[] ag = new long[l.length];\n\tlong[] ah = new long[l.length];\n\tlong[] ai = new long[l.length];\n\tlong[] aj = new long[l.length];\n\tlong[] ak = new long[l.length];\n\tlong[] al = new long[l.length];\n\tlong[] am = new long[l.length];\n\tlong[] an = new long[l.length];\n\tlong[] ao = new long[l.\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122398,
      "stdout": "",
      "stderr": "/tmp/tmppa0mb2gv.d(48): Error: identifier expected following `.`, not `unittest`\n/tmp/tmppa0mb2gv.d(49): Error: found `{` when expecting `]`\n/tmp/tmppa0mb2gv.d(50): Error: semicolon expected, not `alias`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppa0mb2gv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] ret;\n\tlong i;\n\tret = new long[l.length];\n\tfor (i = 0; i < l.length; i++)\n\t{\n\t\tif (i < n)\n\t\t{\n\t\t\tret[i] = l[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tret[i] = l[i-n];\n\t\t}\n\t}\n\treturn ret;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpegtd25_h.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x4284ad]\n??:? void tmpegtd25_h.__unittest_L25_C1() [0x427fec]\n??:? void tmpegtd25_h.__modtest() [0x42822c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c567]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3fa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430685]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b34]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430611]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3d1]\n??:? runModuleUnitTests [0x42c33d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428970]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] result = new long[l.length];\n\tlong[] first = new long[n];\n\tlong[] second = new long[l.length-n];\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tfirst[i] = l[i];\n\t}\n\t\n\tfor(long i = n; i < l.length; i++)\n\t{\n\t\tsecond[i-n] = l[i];\n\t}\n\t\n\tfor(long i = 0; i < l.length; i++)\n\t{\n\t\tif(i < l.length-n)\n\t\t{\n\t\t\tresult[i] = second[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[i] = first[i-l.length+n];\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] result;\n\tlong i;\n\t\n\tresult = new long[l.length];\n\t\n\tfor(i = 0; i < l.length; i++)\n\t{\n\t\tif(i < n)\n\t\t{\n\t\t\tresult[i] = l[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[i] = l[i-n];\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpf6rbb6jq.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4284ad]\n??:? void tmpf6rbb6jq.__unittest_L28_C1() [0x427fec]\n??:? void tmpf6rbb6jq.__modtest() [0x42822c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c567]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3fa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430685]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b34]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430611]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3d1]\n??:? runModuleUnitTests [0x42c33d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428970]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] ret = new long[l.length];\n\tfor (long i = 0; i < l.length; i++)\n\t{\n\t\tif (i < n)\n\t\t{\n\t\t\tret[i] = l[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tret[i] = l[i - n];\n\t\t}\n\t}\n\treturn ret;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp4tdvtr0m.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x428495]\n??:? void tmp4tdvtr0m.__unittest_L23_C1() [0x427fd4]\n??:? void tmp4tdvtr0m.__modtest() [0x428214]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c54f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3e2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43066d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b1c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305f9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b9]\n??:? runModuleUnitTests [0x42c325]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428958]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] temp = new long[l.length];\n\tlong[] temp2 = new long[l.length];\n\t\n\tfor(long i = 0; i < l.length; i++)\n\t{\n\t\tif(i < n)\n\t\t{\n\t\t\ttemp[i] = l[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttemp2[i - n] = l[i];\n\t\t}\n\t}\n\t\n\tfor(long i = 0; i < l.length; i++)\n\t{\n\t\tif(i < l.length - n)\n\t\t{\n\t\t\tl[i] = temp2[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tl[i] = temp[i - (l.length - n)];\n\t\t}\n\t}\n\t\n\treturn l;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] new_arr = new long[l.length];\n\tlong[] first_part = new long[n];\n\tlong[] second_part = new long[l.length-n];\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tfirst_part[i] = l[i];\n\t}\n\t\n\tfor (long i = n; i < l.length; i++)\n\t{\n\t\tsecond_part[i-n] = l[i];\n\t}\n\t\n\tfor (long i = 0; i < l.length; i++)\n\t{\n\t\tif (i < l.length-n)\n\t\t{\n\t\t\tnew_arr[i] = second_part[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnew_arr[i] = first_part[i-l.length+n];\n\t\t}\n\t}\n\t\n\treturn new_arr;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] l1 = new long[l.length];\n\tlong[] l2 = new long[l.length];\n\tlong[] l3 = new long[l.length];\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\twhile(i < l.length)\n\t{\n\t\tif(i < n)\n\t\t{\n\t\t\tl1[i] = l[i];\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tl2[j] = l[i];\n\t\t\tj++;\n\t\t\ti++;\n\t\t}\n\t}\n\twhile(j < l.length)\n\t{\n\t\tl2[j] = 0;\n\t\tj++;\n\t}\n\twhile(k < l.length)\n\t{\n\t\tl3[k] = l2[k];\n\t\tk++;\n\t}\n\tk = 0;\n\twhile(k < l.length)\n\t{\n\t\tl3[k+n] = l1[k];\n\t\tk++;\n\t}\n\treturn l3;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpvyzt16an.d(42): Range violation\n----------------\n??:? _d_arrayboundsp [0x42868e]\n??:? long[] tmpvyzt16an.split_Arr(long[], long) [0x428001]\n??:? void tmpvyzt16an.__unittest_L47_C1() [0x4280a9]\n??:? void tmpvyzt16an.__modtest() [0x428360]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c697]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b52a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307b5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c64]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430741]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b501]\n??:? runModuleUnitTests [0x42c46d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int funct",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] ret = new long[l.length];\n\tfor (long i = 0; i < l.length; i++)\n\t{\n\t\tif (i < n)\n\t\t{\n\t\t\tret[i] = l[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tret[i] = l[i - n];\n\t\t}\n\t}\n\treturn ret;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp4tdvtr0m.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x428495]\n??:? void tmp4tdvtr0m.__unittest_L23_C1() [0x427fd4]\n??:? void tmp4tdvtr0m.__modtest() [0x428214]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c54f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3e2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43066d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b1c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305f9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b9]\n??:? runModuleUnitTests [0x42c325]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428958]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] l1 = new long[n];\n\tlong[] l2 = new long[l.length - n];\n\tlong[] l3 = new long[l.length];\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tl1[i] = l[i];\n\t}\n\t\n\tfor (long i = 0; i < l.length - n; i++)\n\t{\n\t\tl2[i] = l[i + n];\n\t}\n\t\n\tfor (long i = 0; i < l.length; i++)\n\t{\n\t\tif (i < l.length - n)\n\t\t{\n\t\t\tl3[i] = l2[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tl3[i] = l1[i - (l.length - n)];\n\t\t}\n\t}\n\t\n\treturn l3;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] new_l = new long[l.length];\n\tlong i = 0;\n\twhile(i < n)\n\t{\n\t\tnew_l[i] = l[i];\n\t\ti++;\n\t}\n\tlong j = 0;\n\twhile(i < l.length)\n\t{\n\t\tnew_l[i] = l[j];\n\t\ti++;\n\t\tj++;\n\t}\n\treturn new_l;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpavcl2uh7.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x428495]\n??:? void tmpavcl2uh7.__unittest_L25_C1() [0x427fd8]\n??:? void tmpavcl2uh7.__modtest() [0x428218]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c54f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3e2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43066d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b1c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305f9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b9]\n??:? runModuleUnitTests [0x42c325]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428958]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] ret = new long[l.length];\n\tlong[] first = new long[n];\n\tlong[] second = new long[l.length - n];\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tfirst[i] = l[i];\n\t}\n\t\n\tfor (long i = n; i < l.length; i++)\n\t{\n\t\tsecond[i - n] = l[i];\n\t}\n\t\n\tfor (long i = 0; i < second.length; i++)\n\t{\n\t\tret[i] = second[i];\n\t}\n\t\n\tfor (long i = second.length; i < ret.length; i++)\n\t{\n\t\tret[i] = first[i - second.length];\n\t}\n\t\n\treturn ret;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] l1 = l[0..n];\n\tlong[] l2 = l[n..$];\n\treturn l2 ~ l1;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] result = new long[l.length];\n\tlong[] first = new long[n];\n\tlong[] second = new long[l.length-n];\n\t\n\tfor (long i = 0; i < l.length; i++)\n\t{\n\t\tif (i < n)\n\t\t{\n\t\t\tfirst[i] = l[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tsecond[i-n] = l[i];\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < l.length; i++)\n\t{\n\t\tif (i < l.length-n)\n\t\t{\n\t\t\tresult[i] = second[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[i] = first[i-(l.length-n)];\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] l1 = l[0..n];\n\tlong[] l2 = l[n..$];\n\treturn l2 ~ l1;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] l1 = new long[n];\n\tlong[] l2 = new long[l.length - n];\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tl1[i] = l[i];\n\t}\n\t\n\tfor (long i = n; i < l.length; i++)\n\t{\n\t\tl2[i - n] = l[i];\n\t}\n\t\n\treturn l2 ~ l1;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] l1 = new long[n];\n\tlong[] l2 = new long[l.length - n];\n\tlong[] l3 = new long[l.length];\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tl1[i] = l[i];\n\t}\n\t\n\tfor (long i = n; i < l.length; i++)\n\t{\n\t\tl2[i - n] = l[i];\n\t}\n\t\n\tfor (long i = 0; i < l.length; i++)\n\t{\n\t\tif (i < l.length - n)\n\t\t{\n\t\t\tl3[i] = l2[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tl3[i] = l1[i - (l.length - n)];\n\t\t}\n\t}\n\t\n\treturn l3;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] result = new long[l.length];\n\tlong[] first = new long[n];\n\tlong[] second = new long[l.length-n];\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tfirst[i] = l[i];\n\t}\n\t\n\tfor(long i = n; i < l.length; i++)\n\t{\n\t\tsecond[i-n] = l[i];\n\t}\n\t\n\tfor(long i = 0; i < second.length; i++)\n\t{\n\t\tresult[i] = second[i];\n\t}\n\t\n\tfor(long i = 0; i < first.length; i++)\n\t{\n\t\tresult[i+second.length] = first[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] l2 = new long[l.length];\n\tlong[] l3 = new long[l.length];\n\tlong[] l4 = new long[l.length];\n\t\n\tlong i = 0;\n\twhile (i < n)\n\t{\n\t\tl2[i] = l[i];\n\t\ti = i + 1;\n\t}\n\t\n\tlong j = 0;\n\twhile (j < l.length - n)\n\t{\n\t\tl3[j] = l[n + j];\n\t\tj = j + 1;\n\t}\n\t\n\tlong k = 0;\n\twhile (k < l.length - n)\n\t{\n\t\tl4[k] = l3[k];\n\t\tk = k + 1;\n\t}\n\t\n\tlong m = 0;\n\twhile (m < n)\n\t{\n\t\tl4[l.length - n + m] = l2[m];\n\t\tm = m + 1;\n\t}\n\t\n\treturn l4;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] ret = new long[l.length];\n\tlong i = 0;\n\tfor (i = 0; i < l.length; i++)\n\t{\n\t\tif (i < n)\n\t\t\tret[i] = l[i];\n\t\telse\n\t\t\tret[i] = l[i - n];\n\t}\n\treturn ret;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpsfq73deg.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x428495]\n??:? void tmpsfq73deg.__unittest_L20_C1() [0x427fd8]\n??:? void tmpsfq73deg.__modtest() [0x428218]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c54f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3e2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43066d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b1c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305f9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b9]\n??:? runModuleUnitTests [0x42c325]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428958]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] l1 = l[0..n];\n\tlong[] l2 = l[n..$];\n\treturn l2 ~ l1;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] arr = new long[l.length];\n\tlong[] arr2 = new long[l.length];\n\tlong[] arr3 = new long[l.length];\n\tlong[] arr4 = new long[l.length];\n\tlong[] arr5 = new long[l.length];\n\tlong[] arr6 = new long[l.length];\n\tlong[] arr7 = new long[l.length];\n\tlong[] arr8 = new long[l.length];\n\tlong[] arr9 = new long[l.length];\n\tlong[] arr10 = new long[l.length];\n\tlong[] arr11 = new long[l.length];\n\tlong[] arr12 = new long[l.length];\n\tlong[] arr13 = new long[l.length];\n\tlong[] arr14 = new long[l.length];\n\tlong[] arr15 = new long[l.length];\n\tlong[] arr16 = new long[l.length];\n\tlong[] arr17 = new long[l.length];\n\tlong[] arr18 = new long[l.length];\n\tlong[] arr19 = new long[l.length];\n\tlong[] arr20 = new long[l.length];\n\tlong[] arr21 = new long[l.length];\n\tlong[] arr22 = new long[l.length];\n\tlong[] arr23 = new long[l.length];\n\tlong[] arr24 = new long[l.length];\n\tlong[] arr25 = new long[l.length];\n\tlong[] arr26 = new long[l.length];\n\tlong[] arr27 = new long[l.length];\n\tlong[] arr28 = new long[l.length];\n\tlong[] arr29 = new long[l.length];\n\tlong[] arr30 = new long[l.length];\n\tlong[] arr31 = new long[l.length];\n\tlong[] arr32 = new long[l.length];\n\tlong[] arr33 = new long[l.length];\n\tlong[] arr34 = new long[l.length];\n\tlong[] arr35 = new long[l.length];\n\tlong[] arr36 = new long[l.length];\n\tlong[] arr37 =\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "/tmp/tmp3ew30yg3.d(46): Error: expression expected, not `unittest`\n/tmp/tmp3ew30yg3.d(47): Error: semicolon expected, not `{`\n/tmp/tmp3ew30yg3.d(54): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3ew30yg3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] a = new long[l.length];\n\tlong[] b = new long[l.length];\n\tlong[] c = new long[l.length];\n\tlong[] d = new long[l.length];\n\tlong[] e = new long[l.length];\n\tlong[] f = new long[l.length];\n\t\n\tfor (long i = 0; i < l.length; i++)\n\t{\n\t\tif (i < n)\n\t\t{\n\t\t\ta[i] = l[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tb[i] = l[i];\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < l.length; i++)\n\t{\n\t\tif (i < n)\n\t\t{\n\t\t\tc[i] = b[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\td[i] = b[i];\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < l.length; i++)\n\t{\n\t\tif (i < n)\n\t\t{\n\t\t\te[i] = d[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tf[i] = d[i];\n\t\t}\n\t}\n\t\n\treturn f;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpm_0cok7y.d(58): unittest failure\n----------------\n??:? _d_unittestp [0x4286ed]\n??:? void tmpm_0cok7y.__unittest_L54_C1() [0x428230]\n??:? void tmpm_0cok7y.__modtest() [0x428470]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c7a7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b63a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4308c5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d74]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430851]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b611]\n??:? runModuleUnitTests [0x42c57d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428bb0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] l1 = new long[n];\n\tlong[] l2 = new long[l.length - n];\n\tlong[] l3 = new long[l.length];\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tl1[i] = l[i];\n\t}\n\t\n\tfor (long i = n; i < l.length; i++)\n\t{\n\t\tl2[i - n] = l[i];\n\t}\n\t\n\tfor (long i = 0; i < l2.length; i++)\n\t{\n\t\tl3[i] = l2[i];\n\t}\n\t\n\tfor (long i = l2.length; i < l3.length; i++)\n\t{\n\t\tl3[i] = l1[i - l2.length];\n\t}\n\t\n\treturn l3;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] result = new long[l.length];\n\tlong[] first = new long[n];\n\tlong[] second = new long[l.length - n];\n\tlong i = 0;\n\twhile (i < n) \n\t{\n\t\tfirst[i] = l[i];\n\t\ti++;\n\t}\n\ti = 0;\n\twhile (i < l.length - n) \n\t{\n\t\tsecond[i] = l[i + n];\n\t\ti++;\n\t}\n\ti = 0;\n\twhile (i < l.length - n) \n\t{\n\t\tresult[i] = second[i];\n\t\ti++;\n\t}\n\ti = 0;\n\twhile (i < n) \n\t{\n\t\tresult[i + l.length - n] = first[i];\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] l1 = l[0..n];\n\tlong[] l2 = l[n..$];\n\treturn l2 ~ l1;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] a = new long[l.length];\n\tlong[] b = new long[l.length];\n\tlong[] c = new long[l.length];\n\tlong[] d = new long[l.length];\n\t\n\tfor (long i = 0; i < l.length; i++)\n\t{\n\t\tif (i < n)\n\t\t{\n\t\t\ta[i] = l[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tb[i] = l[i];\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < l.length; i++)\n\t{\n\t\tif (i < l.length - n)\n\t\t{\n\t\t\tc[i] = b[i + n];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tc[i] = a[i - (l.length - n)];\n\t\t}\n\t}\n\t\n\treturn c;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] res = new long[l.length];\n\tlong[] first = new long[n];\n\tlong[] second = new long[l.length-n];\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tfirst[i] = l[i];\n\t}\n\t\n\tfor(long i = n; i < l.length; i++)\n\t{\n\t\tsecond[i-n] = l[i];\n\t}\n\t\n\tfor(long i = 0; i < second.length; i++)\n\t{\n\t\tres[i] = second[i];\n\t}\n\t\n\tfor(long i = second.length; i < res.length; i++)\n\t{\n\t\tres[i] = first[i-second.length];\n\t}\n\t\n\treturn res;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] ret;\n\tlong i;\n\tret = new long[l.length];\n\tfor (i = 0; i < l.length; i++)\n\t{\n\t\tif (i < n)\n\t\t\tret[i] = l[i];\n\t\telse\n\t\t\tret[i] = l[i - n];\n\t}\n\treturn ret;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpc31glwvi.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x4284ad]\n??:? void tmpc31glwvi.__unittest_L21_C1() [0x427fec]\n??:? void tmpc31glwvi.__modtest() [0x42822c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c567]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3fa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430685]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b34]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430611]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3d1]\n??:? runModuleUnitTests [0x42c33d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428970]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] l1 = new long[l.length];\n\tlong[] l2 = new long[l.length];\n\tlong[] l3 = new long[l.length];\n\tlong[] l4 = new long[l.length];\n\tlong[] l5 = new long[l.length];\n\tlong[] l6 = new long[l.length];\n\tlong[] l7 = new long[l.length];\n\tlong[] l8 = new long[l.length];\n\tlong[] l9 = new long[l.length];\n\tlong[] l10 = new long[l.length];\n\tlong[] l11 = new long[l.length];\n\tlong[] l12 = new long[l.length];\n\tlong[] l13 = new long[l.length];\n\tlong[] l14 = new long[l.length];\n\tlong[] l15 = new long[l.length];\n\tlong[] l16 = new long[l.length];\n\tlong[] l17 = new long[l.length];\n\tlong[] l18 = new long[l.length];\n\tlong[] l19 = new long[l.length];\n\tlong[] l20 = new long[l.length];\n\tlong[] l21 = new long[l.length];\n\tlong[] l22 = new long[l.length];\n\tlong[] l23 = new long[l.length];\n\tlong[] l24 = new long[l.length];\n\tlong[] l25 = new long[l.length];\n\tlong[] l26 = new long[l.length];\n\tlong[] l27 = new long[l.length];\n\tlong[] l28 = new long[l.length];\n\tlong[] l29 = new long[l.length];\n\tlong[] l30 = new long[l.length];\n\tlong[] l31 = new long[l.length];\n\tlong[] l32 = new long[l.length];\n\tlong[] l33 = new long[l.length];\n\tlong[] l34 = new long[l.length];\n\tlong[] l35 = new long[l.length];\n\tlong[] l36 = new long[l.length];\n\tlong[] l37\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "/tmp/tmp5d1zjij_.d(46): Error: semicolon expected, not `unittest`\n/tmp/tmp5d1zjij_.d(46): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5d1zjij_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] l2 = new long[l.length];\n\tfor(long i = 0; i < l.length; i++)\n\t{\n\t\tif(i < n)\n\t\t{\n\t\t\tl2[i] = l[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tl2[i] = l[i-n];\n\t\t}\n\t}\n\treturn l2;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp9ana0fq2.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x428495]\n??:? void tmp9ana0fq2.__unittest_L23_C1() [0x427fd4]\n??:? void tmp9ana0fq2.__modtest() [0x428214]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c54f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3e2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43066d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b1c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305f9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b9]\n??:? runModuleUnitTests [0x42c325]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428958]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] result;\n\tresult = new long[l.length];\n\tlong i;\n\tfor (i = 0; i < n; i++) \n\t{\n\t\tresult[i] = l[i];\n\t}\n\tfor (i = n; i < l.length; i++) \n\t{\n\t\tresult[i] = l[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp75f6gi_q.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x4284ad]\n??:? void tmp75f6gi_q.__unittest_L22_C1() [0x427fec]\n??:? void tmp75f6gi_q.__modtest() [0x42822c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c567]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3fa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430685]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b34]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430611]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3d1]\n??:? runModuleUnitTests [0x42c33d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428970]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] l1 = l[0..n];\n\tlong[] l2 = l[n..$];\n\treturn l2 ~ l1;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] first = l[0..n];\n\tlong[] second = l[n..$];\n\treturn second ~ first;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] newArr = new long[l.length];\n\tlong[] firstPart = new long[n];\n\tlong[] secondPart = new long[l.length - n];\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tfirstPart[i] = l[i];\n\t}\n\t\n\tfor (long i = n; i < l.length; i++)\n\t{\n\t\tsecondPart[i - n] = l[i];\n\t}\n\t\n\tfor (long i = 0; i < l.length; i++)\n\t{\n\t\tif (i < l.length - n)\n\t\t{\n\t\t\tnewArr[i] = secondPart[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnewArr[i] = firstPart[i - (l.length - n)];\n\t\t}\n\t}\n\t\n\treturn newArr;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] result = new long[l.length];\n\tlong[] first = new long[n];\n\tlong[] second = new long[l.length - n];\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tfirst[i] = l[i];\n\t}\n\t\n\tfor (long i = 0; i < l.length - n; i++)\n\t{\n\t\tsecond[i] = l[i + n];\n\t}\n\t\n\tfor (long i = 0; i < l.length; i++)\n\t{\n\t\tif (i < l.length - n)\n\t\t{\n\t\t\tresult[i] = second[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[i] = first[i - (l.length - n)];\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] l1 = l[0..n];\n\tlong[] l2 = l[n..$];\n\treturn l2 ~ l1;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] arr = new long[l.length];\n\tlong[] arr1 = new long[l.length];\n\tlong[] arr2 = new long[l.length];\n\tlong[] arr3 = new long[l.length];\n\tlong[] arr4 = new long[l.length];\n\tlong[] arr5 = new long[l.length];\n\tlong[] arr6 = new long[l.length];\n\tlong[] arr7 = new long[l.length];\n\tlong[] arr8 = new long[l.length];\n\tlong[] arr9 = new long[l.length];\n\tlong[] arr10 = new long[l.length];\n\tlong[] arr11 = new long[l.length];\n\tlong[] arr12 = new long[l.length];\n\tlong[] arr13 = new long[l.length];\n\tlong[] arr14 = new long[l.length];\n\tlong[] arr15 = new long[l.length];\n\tlong[] arr16 = new long[l.length];\n\tlong[] arr17 = new long[l.length];\n\tlong[] arr18 = new long[l.length];\n\tlong[] arr19 = new long[l.length];\n\tlong[] arr20 = new long[l.length];\n\tlong[] arr21 = new long[l.length];\n\tlong[] arr22 = new long[l.length];\n\tlong[] arr23 = new long[l.length];\n\tlong[] arr24 = new long[l.length];\n\tlong[] arr25 = new long[l.length];\n\tlong[] arr26 = new long[l.length];\n\tlong[] arr27 = new long[l.length];\n\tlong[] arr28 = new long[l.length];\n\tlong[] arr29 = new long[l.length];\n\tlong[] arr30 = new long[l.length];\n\tlong[] arr31 = new long[l.length];\n\tlong[] arr32 = new long[l.length];\n\tlong[] arr33 = new long[l.length];\n\tlong[] arr34 = new long[l.length];\n\tlong[] arr35 = new long[l.length];\n\tlong[] arr36 =\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "/tmp/tmp42evutxb.d(46): Error: expression expected, not `unittest`\n/tmp/tmp42evutxb.d(47): Error: semicolon expected, not `{`\n/tmp/tmp42evutxb.d(54): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp42evutxb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] a = new long[l.length];\n\tlong[] b = new long[l.length];\n\tlong[] c = new long[l.length];\n\tlong[] d = new long[l.length];\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong m = 0;\n\t\n\tfor(i = 0; i < n; i++)\n\t{\n\t\ta[i] = l[i];\n\t}\n\t\n\tfor(j = n; j < l.length; j++)\n\t{\n\t\tb[j] = l[j];\n\t}\n\t\n\tfor(k = 0; k < n; k++)\n\t{\n\t\tc[k] = b[k];\n\t}\n\t\n\tfor(m = n; m < l.length; m++)\n\t{\n\t\td[m] = a[m];\n\t}\n\t\n\treturn d;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjt5rfrl6.d(44): unittest failure\n----------------\n??:? _d_unittestp [0x4285d5]\n??:? void tmpjt5rfrl6.__unittest_L40_C1() [0x428114]\n??:? void tmpjt5rfrl6.__modtest() [0x428354]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c68f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b522]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c5c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430739]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4f9]\n??:? runModuleUnitTests [0x42c465]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a98]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] result;\n\tlong i;\n\t\n\tresult = new long[l.length];\n\t\n\tfor (i = 0; i < n; i++)\n\t{\n\t\tresult[i] = l[i];\n\t}\n\t\n\tfor (i = n; i < l.length; i++)\n\t{\n\t\tresult[i] = l[i];\n\t}\n\t\n\tfor (i = 0; i < n; i++)\n\t{\n\t\tresult[l.length - n + i] = l[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpxr8vtt3u.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x42851d]\n??:? void tmpxr8vtt3u.__unittest_L31_C1() [0x428060]\n??:? void tmpxr8vtt3u.__modtest() [0x4282a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5d7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b46a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4306f5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ba4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430681]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b441]\n??:? runModuleUnitTests [0x42c3ad]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4289e0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] first = l[0..n];\n\tlong[] second = l[n..$];\n\treturn second ~ first;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] newArr = new long[l.length];\n\tlong[] firstArr = new long[n];\n\tlong[] secondArr = new long[l.length-n];\n\t\n\tfor(long i = 0; i < l.length; i++)\n\t{\n\t\tif(i < n)\n\t\t{\n\t\t\tfirstArr[i] = l[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tsecondArr[i-n] = l[i];\n\t\t}\n\t}\n\t\n\tfor(long i = 0; i < l.length; i++)\n\t{\n\t\tif(i < l.length-n)\n\t\t{\n\t\t\tnewArr[i] = secondArr[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnewArr[i] = firstArr[i-(l.length-n)];\n\t\t}\n\t}\n\t\n\treturn newArr;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] l1 = l[0..n];\n\tlong[] l2 = l[n..$];\n\treturn l2 ~ l1;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] ret = new long[l.length];\n\tlong[] first = new long[n];\n\tlong[] second = new long[l.length - n];\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tfirst[i] = l[i];\n\t}\n\t\n\tfor(long i = n; i < l.length; i++)\n\t{\n\t\tsecond[i - n] = l[i];\n\t}\n\t\n\tfor(long i = 0; i < l.length; i++)\n\t{\n\t\tif(i < l.length - n)\n\t\t{\n\t\t\tret[i] = second[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tret[i] = first[i - l.length + n];\n\t\t}\n\t}\n\t\n\treturn ret;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] ret = new long[l.length];\n\tlong i = 0;\n\twhile (i < n) \n\t{\n\t\tret[i] = l[i];\n\t\ti++;\n\t}\n\tlong j = 0;\n\twhile (i < l.length) \n\t{\n\t\tret[i] = l[n + j];\n\t\ti++;\n\t\tj++;\n\t}\n\treturn ret;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpryh_xn7d.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x42849d]\n??:? void tmpryh_xn7d.__unittest_L25_C1() [0x427fdc]\n??:? void tmpryh_xn7d.__modtest() [0x42821c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c557]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3ea]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430675]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b24]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430601]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3c1]\n??:? runModuleUnitTests [0x42c32d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428960]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] result = new long[l.length];\n\tlong[] first = new long[n];\n\tlong[] second = new long[l.length-n];\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tfirst[i] = l[i];\n\t}\n\t\n\tfor(long i = n; i < l.length; i++)\n\t{\n\t\tsecond[i-n] = l[i];\n\t}\n\t\n\tfor(long i = 0; i < l.length; i++)\n\t{\n\t\tif(i < l.length-n)\n\t\t{\n\t\t\tresult[i] = second[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[i] = first[i-l.length+n];\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] result = new long[l.length];\n\tlong[] first = new long[n];\n\tlong[] second = new long[l.length - n];\n\t\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tfirst[i] = l[i];\n\t}\n\t\n\tfor (long i = n; i < l.length; i++) \n\t{\n\t\tsecond[i - n] = l[i];\n\t}\n\t\n\tfor (long i = 0; i < second.length; i++) \n\t{\n\t\tresult[i] = second[i];\n\t}\n\t\n\tfor (long i = 0; i < first.length; i++) \n\t{\n\t\tresult[i + second.length] = first[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] result;\n\tlong i;\n\t\n\tif (n > l.length)\n\t\treturn l;\n\t\n\tresult = new long[l.length];\n\t\n\tfor (i = 0; i < l.length; i++)\n\t{\n\t\tif (i < n)\n\t\t\tresult[i + l.length - n] = l[i];\n\t\telse\n\t\t\tresult[i - n] = l[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] r = new long[l.length];\n\tlong[] f = new long[n];\n\tlong[] s = new long[l.length - n];\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tf[i] = l[i];\n\t}\n\t\n\tfor (long i = n; i < l.length; i++)\n\t{\n\t\ts[i - n] = l[i];\n\t}\n\t\n\tfor (long i = 0; i < l.length; i++)\n\t{\n\t\tif (i < l.length - n)\n\t\t{\n\t\t\tr[i] = s[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tr[i] = f[i - (l.length - n)];\n\t\t}\n\t}\n\t\n\treturn r;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] temp = new long[n];\n\tlong[] temp2 = new long[l.length - n];\n\tlong[] temp3 = new long[l.length];\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\twhile (i < n) \n\t{\n\t\ttemp[i] = l[i];\n\t\ti++;\n\t}\n\twhile (j < l.length - n) \n\t{\n\t\ttemp2[j] = l[n + j];\n\t\tj++;\n\t}\n\twhile (k < l.length) \n\t{\n\t\ttemp3[k] = temp2[k];\n\t\tk++;\n\t}\n\twhile (k < l.length) \n\t{\n\t\ttemp3[k] = temp[k - l.length + n];\n\t\tk++;\n\t}\n\treturn temp3;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpxxu42ej_.d(27): Range violation\n----------------\n??:? _d_arrayboundsp [0x42864e]\n??:? long[] tmpxxu42ej_.split_Arr(long[], long) [0x427f81]\n??:? void tmpxxu42ej_.__unittest_L37_C1() [0x428069]\n??:? void tmpxxu42ej_.__modtest() [0x428320]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c657]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4ea]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430775]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c24]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430701]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4c1]\n??:? runModuleUnitTests [0x42c42d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int funct",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] result;\n\tresult = new long[l.length];\n\tlong i;\n\tfor(i=0;i<n;i++)\n\t{\n\t\tresult[i] = l[i];\n\t}\n\tfor(i=n;i<l.length;i++)\n\t{\n\t\tresult[i] = l[i];\n\t}\n\tfor(i=0;i<n;i++)\n\t{\n\t\tresult[i+l.length-n] = l[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp1sl16gdp.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x42851d]\n??:? void tmp1sl16gdp.__unittest_L26_C1() [0x42805c]\n??:? void tmp1sl16gdp.__modtest() [0x42829c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5d7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b46a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4306f5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ba4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430681]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b441]\n??:? runModuleUnitTests [0x42c3ad]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4289e0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] result = new long[l.length];\n\tlong[] first = new long[n];\n\tlong[] second = new long[l.length - n];\n\t\n\tfor(long i = 0; i < l.length; i++)\n\t{\n\t\tif(i < n)\n\t\t{\n\t\t\tfirst[i] = l[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tsecond[i - n] = l[i];\n\t\t}\n\t}\n\t\n\tfor(long i = 0; i < l.length; i++)\n\t{\n\t\tif(i < l.length - n)\n\t\t{\n\t\t\tresult[i] = second[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[i] = first[i - (l.length - n)];\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] newArr = new long[l.length];\n\tlong[] first = new long[n];\n\tlong[] second = new long[l.length - n];\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tfirst[i] = l[i];\n\t}\n\t\n\tfor (long i = n; i < l.length; i++)\n\t{\n\t\tsecond[i - n] = l[i];\n\t}\n\t\n\tfor (long i = 0; i < l.length; i++)\n\t{\n\t\tif (i < l.length - n)\n\t\t{\n\t\t\tnewArr[i] = second[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnewArr[i] = first[i - (l.length - n)];\n\t\t}\n\t}\n\t\n\treturn newArr;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] a = new long[l.length];\n\tlong[] b = new long[l.length];\n\tlong[] c = new long[l.length];\n\tlong[] d = new long[l.length];\n\tlong[] e = new long[l.length];\n\tlong[] f = new long[l.length];\n\tlong[] g = new long[l.length];\n\tlong[] h = new long[l.length];\n\tlong[] i = new long[l.length];\n\tlong[] j = new long[l.length];\n\tlong[] k = new long[l.length];\n\tlong[] m = new long[l.length];\n\tlong[] o = new long[l.length];\n\tlong[] p = new long[l.length];\n\tlong[] q = new long[l.length];\n\tlong[] r = new long[l.length];\n\tlong[] s = new long[l.length];\n\tlong[] t = new long[l.length];\n\tlong[] u = new long[l.length];\n\tlong[] v = new long[l.length];\n\tlong[] w = new long[l.length];\n\tlong[] x = new long[l.length];\n\tlong[] y = new long[l.length];\n\tlong[] z = new long[l.length];\n\tlong[] aa = new long[l.length];\n\tlong[] ab = new long[l.length];\n\tlong[] ac = new long[l.length];\n\tlong[] ad = new long[l.length];\n\tlong[] ae = new long[l.length];\n\tlong[] af = new long[l.length];\n\tlong[] ag = new long[l.length];\n\tlong[] ah = new long[l.length];\n\tlong[] ai = new long[l.length];\n\tlong[] aj = new long[l.length];\n\tlong[] ak = new long[l.length];\n\tlong[] al = new long[l.length];\n\tlong[] am = new long[l.length];\n\tlong[] an = new long[l.length];\n\tlong[] ao = new long[l.\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122398,
      "stdout": "",
      "stderr": "/tmp/tmppa0mb2gv.d(48): Error: identifier expected following `.`, not `unittest`\n/tmp/tmppa0mb2gv.d(49): Error: found `{` when expecting `]`\n/tmp/tmppa0mb2gv.d(50): Error: semicolon expected, not `alias`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppa0mb2gv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] a = l[0..n];\n\tlong[] b = l[n..$];\n\treturn b ~ a;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] l1 = l[0..n];\n\tlong[] l2 = l[n..$];\n\treturn l2~l1;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] arr = new long[l.length];\n\tlong[] arr2 = new long[l.length];\n\tlong[] arr3 = new long[l.length];\n\tlong[] arr4 = new long[l.length];\n\tlong[] arr5 = new long[l.length];\n\t\n\tfor(long i = 0; i < l.length; i++)\n\t{\n\t\tarr[i] = l[i];\n\t}\n\t\n\tfor(long i = 0; i < l.length; i++)\n\t{\n\t\tarr2[i] = l[i];\n\t}\n\t\n\tfor(long i = 0; i < l.length; i++)\n\t{\n\t\tarr3[i] = l[i];\n\t}\n\t\n\tfor(long i = 0; i < l.length; i++)\n\t{\n\t\tarr4[i] = l[i];\n\t}\n\t\n\tfor(long i = 0; i < l.length; i++)\n\t{\n\t\tarr5[i] = l[i];\n\t}\n\t\n\tlong[] arr6 = new long[l.length];\n\tlong[] arr7 = new long[l.length];\n\tlong[] arr8 = new long[l.length];\n\tlong[] arr9 = new long[l.length];\n\tlong[] arr10 = new long[l.length];\n\t\n\tfor(long i = 0; i < l.length; i++)\n\t{\n\t\tarr6[i] = l[i];\n\t}\n\t\n\tfor(long i = 0; i < l.length; i++)\n\t{\n\t\tarr7[i] = l[i];\n\t}\n\t\n\tfor(long i = 0; i < l.length; i++)\n\t{\n\t\tarr8[i] = l[i];\n\t}\n\t\n\tfor(long i = 0; i < l.length; i++)\n\t{\n\t\tarr9[i] = l[i];\n\t}\n\t\n\tfor(long i = 0; i < l.length; i++)\n\t{\n\t\tarr10[\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "/tmp/tmpap_okf0v.d(69): Error: expression expected, not `unittest`\n/tmp/tmpap_okf0v.d(70): Error: found `{` when expecting `,`\n/tmp/tmpap_okf0v.d(71): Error: expression expected, not `alias`\n/tmp/tmpap_okf0v.d(71): Error: found `candidate` when expecting `,`\n/tmp/tmpap_okf0v.d(71): Error: expression expected, not `=`\n/tmp/tmpap_okf0v.d(71): Error: found `split_Arr` when expecting `,`\n/tmp/tmpap_okf0v.d(71): Error: expression expected, not `;`\n/tmp/tmpap_okf0v.d(73): Error: found `assert` when expecting `,`\n/tmp/tmpap_okf0v.d(73): Error: found `;` when expecting `,`\n/tmp/tmpap_okf0v.d(74): Error: found `;` when expecting `,`\n/tmp/tmpap_okf0v.d(75): Error: found `;` when expecting `,`\n/tmp/tmpap_okf0v.d(76): Error: expression expected, not `}`\n/tmp/tmpap_okf0v.d(77): Error: found `void` when expecting `,`\n/tmp/tmpap_okf0v.d(77): Error: found `{` when expecting `,`\n/tmp/tmpap_okf0v.d(77): Error: expression expected, not `}`\n/tmp/tmpap_okf0v.d(77): Error: found `End of File` when expecting `,`\n/tmp/tmpap_okf0v.d(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] ret;\n\tlong i;\n\tlong j;\n\t\n\tret = new long[l.length];\n\t\n\tfor (i = 0; i < l.length; i++)\n\t{\n\t\tif (i < n)\n\t\t{\n\t\t\tret[i] = l[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tj = i - n;\n\t\t\tret[j] = l[i];\n\t\t}\n\t}\n\t\n\treturn ret;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp8kd42l1e.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x4284b5]\n??:? void tmp8kd42l1e.__unittest_L30_C1() [0x427ff8]\n??:? void tmp8kd42l1e.__modtest() [0x428238]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c56f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b402]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43068d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b3c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430619]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3d9]\n??:? runModuleUnitTests [0x42c345]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428978]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] l1 = new long[n];\n\tlong[] l2 = new long[l.length - n];\n\tlong[] l3 = new long[l.length];\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tl1[i] = l[i];\n\t}\n\t\n\tfor (long i = n; i < l.length; i++)\n\t{\n\t\tl2[i - n] = l[i];\n\t}\n\t\n\tfor (long i = 0; i < l2.length; i++)\n\t{\n\t\tl3[i] = l2[i];\n\t}\n\t\n\tfor (long i = 0; i < l1.length; i++)\n\t{\n\t\tl3[i + l2.length] = l1[i];\n\t}\n\t\n\treturn l3;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] arr = new long[l.length];\n\tlong[] arr1 = new long[l.length];\n\tlong[] arr2 = new long[l.length];\n\tlong[] arr3 = new long[l.length];\n\tlong[] arr4 = new long[l.length];\n\tlong[] arr5 = new long[l.length];\n\tlong[] arr6 = new long[l.length];\n\tlong[] arr7 = new long[l.length];\n\tlong[] arr8 = new long[l.length];\n\tlong[] arr9 = new long[l.length];\n\tlong[] arr10 = new long[l.length];\n\tlong[] arr11 = new long[l.length];\n\tlong[] arr12 = new long[l.length];\n\tlong[] arr13 = new long[l.length];\n\tlong[] arr14 = new long[l.length];\n\tlong[] arr15 = new long[l.length];\n\tlong[] arr16 = new long[l.length];\n\tlong[] arr17 = new long[l.length];\n\tlong[] arr18 = new long[l.length];\n\tlong[] arr19 = new long[l.length];\n\tlong[] arr20 = new long[l.length];\n\tlong[] arr21 = new long[l.length];\n\tlong[] arr22 = new long[l.length];\n\tlong[] arr23 = new long[l.length];\n\tlong[] arr24 = new long[l.length];\n\tlong[] arr25 = new long[l.length];\n\tlong[] arr26 = new long[l.length];\n\tlong[] arr27 = new long[l.length];\n\tlong[] arr28 = new long[l.length];\n\tlong[] arr29 = new long[l.length];\n\tlong[] arr30 = new long[l.length];\n\tlong[] arr31 = new long[l.length];\n\tlong[] arr32 = new long[l.length];\n\tlong[] arr33 = new long[l.length];\n\tlong[] arr34 = new long[l.length];\n\tlong[] arr35 = new long[l.length];\n\tlong[] arr36 =\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "/tmp/tmp42evutxb.d(46): Error: expression expected, not `unittest`\n/tmp/tmp42evutxb.d(47): Error: semicolon expected, not `{`\n/tmp/tmp42evutxb.d(54): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp42evutxb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] arr = new long[l.length];\n\tfor (long i = 0; i < l.length; i++)\n\t{\n\t\tif (i < n)\n\t\t{\n\t\t\tarr[i] = l[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tarr[i] = l[i - n];\n\t\t}\n\t}\n\treturn arr;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpwku7sh19.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x428495]\n??:? void tmpwku7sh19.__unittest_L23_C1() [0x427fd4]\n??:? void tmpwku7sh19.__modtest() [0x428214]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c54f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3e2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43066d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b1c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305f9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b9]\n??:? runModuleUnitTests [0x42c325]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428958]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] result = new long[l.length];\n\tlong[] first = new long[n];\n\tlong[] second = new long[l.length - n];\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tfirst[i] = l[i];\n\t}\n\t\n\tfor (long i = n; i < l.length; i++)\n\t{\n\t\tsecond[i - n] = l[i];\n\t}\n\t\n\tfor (long i = 0; i < l.length; i++)\n\t{\n\t\tif (i < l.length - n)\n\t\t{\n\t\t\tresult[i] = second[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[i] = first[i - (l.length - n)];\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] result = new long[l.length];\n\tfor(long i = 0; i < l.length; i++)\n\t{\n\t\tif(i < n)\n\t\t{\n\t\t\tresult[i] = l[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[i] = l[i - n];\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpu314bspp.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x428495]\n??:? void tmpu314bspp.__unittest_L23_C1() [0x427fd4]\n??:? void tmpu314bspp.__modtest() [0x428214]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c54f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3e2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43066d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b1c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305f9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b9]\n??:? runModuleUnitTests [0x42c325]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428958]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] l1 = l[0..n];\n\tlong[] l2 = l[n..$];\n\treturn l2 ~ l1;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] l1 = l[0..n];\n\tlong[] l2 = l[n..$];\n\treturn l2 ~ l1;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] l1 = l[0..n];\n\tlong[] l2 = l[n..$];\n\treturn l2 ~ l1;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] new_arr = new long[l.length];\n\tlong[] first_part = new long[n];\n\tlong[] second_part = new long[l.length - n];\n\t\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tfirst_part[i] = l[i];\n\t}\n\t\n\tfor (long i = 0; i < l.length - n; i++) \n\t{\n\t\tsecond_part[i] = l[i + n];\n\t}\n\t\n\tfor (long i = 0; i < l.length - n; i++) \n\t{\n\t\tnew_arr[i] = second_part[i];\n\t}\n\t\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tnew_arr[i + l.length - n] = first_part[i];\n\t}\n\t\n\treturn new_arr;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] a = l[0..n];\n\tlong[] b = l[n..$];\n\treturn b ~ a;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] ret = new long[l.length];\n\tfor (long i = 0; i < l.length; i++) \n\t{\n\t\tif (i < n) \n\t\t{\n\t\t\tret[i] = l[i];\n\t\t} \n\t\telse \n\t\t{\n\t\t\tret[i] = l[i - n];\n\t\t}\n\t}\n\treturn ret;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpu8vhic4q.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x428495]\n??:? void tmpu8vhic4q.__unittest_L23_C1() [0x427fd4]\n??:? void tmpu8vhic4q.__modtest() [0x428214]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c54f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3e2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43066d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b1c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305f9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b9]\n??:? runModuleUnitTests [0x42c325]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428958]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] first = l[0..n];\n\tlong[] second = l[n..$];\n\treturn second ~ first;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] l1 = new long[l.length];\n\tfor (long i = 0; i < l.length; i++)\n\t{\n\t\tif (i < n)\n\t\t{\n\t\t\tl1[i] = l[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tl1[i] = l[i - n];\n\t\t}\n\t}\n\treturn l1;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpp4dldpqp.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x428495]\n??:? void tmpp4dldpqp.__unittest_L23_C1() [0x427fd4]\n??:? void tmpp4dldpqp.__modtest() [0x428214]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c54f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3e2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43066d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b1c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305f9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b9]\n??:? runModuleUnitTests [0x42c325]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428958]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] l1 = l[0..n];\n\tlong[] l2 = l[n..$];\n\treturn l2 ~ l1;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] result = new long[l.length];\n\tlong[] first = new long[n];\n\tlong[] second = new long[l.length - n];\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tfirst[i] = l[i];\n\t}\n\t\n\tfor(long i = n; i < l.length; i++)\n\t{\n\t\tsecond[i - n] = l[i];\n\t}\n\t\n\tfor(long i = 0; i < second.length; i++)\n\t{\n\t\tresult[i] = second[i];\n\t}\n\t\n\tfor(long i = 0; i < first.length; i++)\n\t{\n\t\tresult[i + second.length] = first[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] result = new long[l.length];\n\tlong[] first = new long[n];\n\tlong[] second = new long[l.length - n];\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tfirst[i] = l[i];\n\t}\n\t\n\tfor (long i = n; i < l.length; i++)\n\t{\n\t\tsecond[i - n] = l[i];\n\t}\n\t\n\tfor (long i = 0; i < l.length; i++)\n\t{\n\t\tif (i < l.length - n)\n\t\t{\n\t\t\tresult[i] = second[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[i] = first[i - (l.length - n)];\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] temp = new long[l.length];\n\tlong[] temp2 = new long[l.length];\n\tlong[] temp3 = new long[l.length];\n\tlong[] temp4 = new long[l.length];\n\tlong[] temp5 = new long[l.length];\n\tlong[] temp6 = new long[l.length];\n\tlong[] temp7 = new long[l.length];\n\tlong[] temp8 = new long[l.length];\n\tlong[] temp9 = new long[l.length];\n\tlong[] temp10 = new long[l.length];\n\tlong[] temp11 = new long[l.length];\n\tlong[] temp12 = new long[l.length];\n\tlong[] temp13 = new long[l.length];\n\tlong[] temp14 = new long[l.length];\n\tlong[] temp15 = new long[l.length];\n\tlong[] temp16 = new long[l.length];\n\tlong[] temp17 = new long[l.length];\n\tlong[] temp18 = new long[l.length];\n\tlong[] temp19 = new long[l.length];\n\tlong[] temp20 = new long[l.length];\n\tlong[] temp21 = new long[l.length];\n\tlong[] temp22 = new long[l.length];\n\tlong[] temp23 = new long[l.length];\n\tlong[] temp24 = new long[l.length];\n\tlong[] temp25 = new long[l.length];\n\tlong[] temp26 = new long[l.length];\n\tlong[] temp27 = new long[l.length];\n\tlong[] temp28 = new long[l.length];\n\tlong[] temp29 = new long[l.length];\n\tlong[] temp30 = new long[l.length];\n\tlong[] temp31 = new long[l.length];\n\tlong[] temp32 = new long[l.length];\n\tlong[] temp33 = new long[l.length];\n\tlong[] temp34 = new long[l.length];\n\tlong[] temp35 = new long[l.length];\n\tlong[] temp36 = new long[l.length];\n\tlong[] temp37 =\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "/tmp/tmp_ejyqf85.d(46): Error: expression expected, not `unittest`\n/tmp/tmp_ejyqf85.d(47): Error: semicolon expected, not `{`\n/tmp/tmp_ejyqf85.d(54): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_ejyqf85.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] result = new long[l.length];\n\tlong[] first = new long[n];\n\tlong[] second = new long[l.length - n];\n\t\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tfirst[i] = l[i];\n\t}\n\t\n\tfor (long i = n; i < l.length; i++) \n\t{\n\t\tsecond[i - n] = l[i];\n\t}\n\t\n\tfor (long i = 0; i < l.length; i++) \n\t{\n\t\tif (i < l.length - n) \n\t\t{\n\t\t\tresult[i] = second[i];\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult[i] = first[i - l.length + n];\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] res = new long[l.length];\n\tlong[] tmp = new long[n];\n\tlong[] tmp2 = new long[l.length - n];\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\ttmp[i] = l[i];\n\t}\n\t\n\tfor (long i = n; i < l.length; i++)\n\t{\n\t\ttmp2[i - n] = l[i];\n\t}\n\t\n\tfor (long i = 0; i < l.length - n; i++)\n\t{\n\t\tres[i] = tmp2[i];\n\t}\n\t\n\tfor (long i = l.length - n; i < l.length; i++)\n\t{\n\t\tres[i] = tmp[i - (l.length - n)];\n\t}\n\t\n\treturn res;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] l1 = new long[n];\n\tlong[] l2 = new long[l.length - n];\n\tlong[] l3 = new long[l.length];\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tl1[i] = l[i];\n\t}\n\t\n\tfor(long i = n; i < l.length; i++)\n\t{\n\t\tl2[i - n] = l[i];\n\t}\n\t\n\tfor(long i = 0; i < l2.length; i++)\n\t{\n\t\tl3[i] = l2[i];\n\t}\n\t\n\tfor(long i = 0; i < l1.length; i++)\n\t{\n\t\tl3[l2.length + i] = l1[i];\n\t}\n\t\n\treturn l3;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] result;\n\tlong i;\n\tlong j;\n\t\n\tresult = new long[l.length];\n\t\n\tfor(i = 0; i < n; i++)\n\t{\n\t\tresult[i] = l[i];\n\t}\n\t\n\tfor(j = 0; j < l.length - n; j++)\n\t{\n\t\tresult[j + n] = l[j];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmplszgi5qg.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x4284b5]\n??:? void tmplszgi5qg.__unittest_L27_C1() [0x427ff8]\n??:? void tmplszgi5qg.__modtest() [0x428238]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c56f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b402]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43068d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b3c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430619]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3d9]\n??:? runModuleUnitTests [0x42c345]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428978]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] a = new long[l.length];\n\tlong[] b = new long[l.length];\n\tlong[] c = new long[l.length];\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\t\n\twhile (i < l.length)\n\t{\n\t\tif (i < n)\n\t\t{\n\t\t\ta[i] = l[i];\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tb[j] = l[i];\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t}\n\t\n\twhile (k < l.length)\n\t{\n\t\tif (k < j)\n\t\t{\n\t\t\tc[k] = b[k];\n\t\t\tk++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tc[k] = a[k-j];\n\t\t\tk++;\n\t\t}\n\t}\n\treturn c;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] result = new long[l.length];\n\tlong[] first = new long[n];\n\tlong[] second = new long[l.length - n];\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tfirst[i] = l[i];\n\t}\n\t\n\tfor (long i = 0; i < l.length - n; i++)\n\t{\n\t\tsecond[i] = l[n + i];\n\t}\n\t\n\tfor (long i = 0; i < l.length - n; i++)\n\t{\n\t\tresult[i] = second[i];\n\t}\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tresult[l.length - n + i] = first[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] res = new long[l.length];\n\tlong[] first = l[0..n];\n\tlong[] second = l[n..$];\n\tres = second ~ first;\n\treturn res;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] l1 = new long[l.length];\n\tlong[] l2 = new long[l.length];\n\tlong[] l3 = new long[l.length];\n\tlong[] l4 = new long[l.length];\n\tlong[] l5 = new long[l.length];\n\t\n\tl1 = l[0..n];\n\tl2 = l[n..$];\n\tl3 = l2 ~ l1;\n\t\n\treturn l3;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] ret = new long[l.length];\n\tlong[] first = new long[n];\n\tlong[] second = new long[l.length - n];\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tfirst[i] = l[i];\n\t}\n\t\n\tfor (long i = n; i < l.length; i++)\n\t{\n\t\tsecond[i - n] = l[i];\n\t}\n\t\n\tfor (long i = 0; i < second.length; i++)\n\t{\n\t\tret[i] = second[i];\n\t}\n\t\n\tfor (long i = 0; i < first.length; i++)\n\t{\n\t\tret[i + second.length] = first[i];\n\t}\n\t\n\treturn ret;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] a = l[0..n];\n\tlong[] b = l[n..$];\n\treturn b ~ a;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] result = new long[l.length];\n\tlong[] first = new long[n];\n\tlong[] second = new long[l.length - n];\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tfirst[i] = l[i];\n\t}\n\t\n\tfor (long i = n; i < l.length; i++)\n\t{\n\t\tsecond[i - n] = l[i];\n\t}\n\t\n\tfor (long i = 0; i < l.length; i++)\n\t{\n\t\tif (i < l.length - n)\n\t\t{\n\t\t\tresult[i] = second[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[i] = first[i - (l.length - n)];\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] ret = new long[l.length];\n\tlong[] first = new long[n];\n\tlong[] second = new long[l.length - n];\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tfirst[i] = l[i];\n\t}\n\t\n\tfor (long i = n; i < l.length; i++)\n\t{\n\t\tsecond[i - n] = l[i];\n\t}\n\t\n\tfor (long i = 0; i < second.length; i++)\n\t{\n\t\tret[i] = second[i];\n\t}\n\t\n\tfor (long i = second.length; i < ret.length; i++)\n\t{\n\t\tret[i] = first[i - second.length];\n\t}\n\t\n\treturn ret;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] l1 = l[0..n];\n\tlong[] l2 = l[n..$];\n\treturn l2 ~ l1;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] l1 = new long[n];\n\tlong[] l2 = new long[l.length-n];\n\tlong[] l3 = new long[l.length];\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tl1[i] = l[i];\n\t}\n\t\n\tfor(long i = n; i < l.length; i++)\n\t{\n\t\tl2[i-n] = l[i];\n\t}\n\t\n\tfor(long i = 0; i < l.length; i++)\n\t{\n\t\tif(i < l.length-n)\n\t\t{\n\t\t\tl3[i] = l2[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tl3[i] = l1[i-l.length+n];\n\t\t}\n\t}\n\t\n\treturn l3;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] l1 = new long[n];\n\tlong[] l2 = new long[l.length - n];\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tl1[i] = l[i];\n\t}\n\t\n\tfor (long i = n; i < l.length; i++)\n\t{\n\t\tl2[i - n] = l[i];\n\t}\n\t\n\treturn l2 ~ l1;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] l1 = new long[l.length];\n\tlong[] l2 = new long[l.length];\n\tlong[] l3 = new long[l.length];\n\tlong[] l4 = new long[l.length];\n\tlong[] l5 = new long[l.length];\n\tlong[] l6 = new long[l.length];\n\tlong[] l7 = new long[l.length];\n\tlong[] l8 = new long[l.length];\n\tlong[] l9 = new long[l.length];\n\tlong[] l10 = new long[l.length];\n\tlong[] l11 = new long[l.length];\n\tlong[] l12 = new long[l.length];\n\tlong[] l13 = new long[l.length];\n\tlong[] l14 = new long[l.length];\n\tlong[] l15 = new long[l.length];\n\tlong[] l16 = new long[l.length];\n\tlong[] l17 = new long[l.length];\n\tlong[] l18 = new long[l.length];\n\tlong[] l19 = new long[l.length];\n\tlong[] l20 = new long[l.length];\n\tlong[] l21 = new long[l.length];\n\tlong[] l22 = new long[l.length];\n\tlong[] l23 = new long[l.length];\n\tlong[] l24 = new long[l.length];\n\tlong[] l25 = new long[l.length];\n\tlong[] l26 = new long[l.length];\n\tlong[] l27 = new long[l.length];\n\tlong[] l28 = new long[l.length];\n\tlong[] l29 = new long[l.length];\n\tlong[] l30 = new long[l.length];\n\tlong[] l31 = new long[l.length];\n\tlong[] l32 = new long[l.length];\n\tlong[] l33 = new long[l.length];\n\tlong[] l34 = new long[l.length];\n\tlong[] l35 = new long[l.length];\n\tlong[] l36 = new long[l.length];\n\tlong[] l37\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "/tmp/tmp5d1zjij_.d(46): Error: semicolon expected, not `unittest`\n/tmp/tmp5d1zjij_.d(46): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5d1zjij_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] l1 = new long[n];\n\tlong[] l2 = new long[l.length - n];\n\t\n\tfor (long i = 0; i < l.length; i++)\n\t{\n\t\tif (i < n)\n\t\t{\n\t\t\tl1[i] = l[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tl2[i - n] = l[i];\n\t\t}\n\t}\n\t\n\treturn l2 ~ l1;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] newArr = new long[l.length];\n\tlong[] firstPart = new long[n];\n\tlong[] secondPart = new long[l.length - n];\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tfirstPart[i] = l[i];\n\t}\n\t\n\tfor(long i = n; i < l.length; i++)\n\t{\n\t\tsecondPart[i - n] = l[i];\n\t}\n\t\n\tfor(long i = 0; i < l.length; i++)\n\t{\n\t\tif(i < l.length - n)\n\t\t{\n\t\t\tnewArr[i] = secondPart[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnewArr[i] = firstPart[i - l.length + n];\n\t\t}\n\t}\n\treturn newArr;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] result = new long[l.length];\n\tlong[] first = new long[n];\n\tlong[] second = new long[l.length - n];\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tfirst[i] = l[i];\n\t}\n\t\n\tfor (long i = n; i < l.length; i++)\n\t{\n\t\tsecond[i - n] = l[i];\n\t}\n\t\n\tfor (long i = 0; i < l.length; i++)\n\t{\n\t\tif (i < l.length - n)\n\t\t{\n\t\t\tresult[i] = second[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[i] = first[i - (l.length - n)];\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] r = new long[l.length];\n\tlong[] f = new long[l.length];\n\tlong[] s = new long[l.length];\n\tlong[] t = new long[l.length];\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tf[i] = l[i];\n\t}\n\t\n\tfor(long i = n; i < l.length; i++)\n\t{\n\t\ts[i] = l[i];\n\t}\n\t\n\tfor(long i = 0; i < l.length; i++)\n\t{\n\t\tt[i] = s[i];\n\t}\n\t\n\tfor(long i = 0; i < l.length; i++)\n\t{\n\t\tr[i] = t[i];\n\t}\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tr[i] = f[i];\n\t}\n\t\n\treturn r;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpwl6rk4o_.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x42864d]\n??:? void tmpwl6rk4o_.__unittest_L41_C1() [0x428190]\n??:? void tmpwl6rk4o_.__modtest() [0x4283d0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c707]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b59a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430825]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430cd4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4307b1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b571]\n??:? runModuleUnitTests [0x42c4dd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b10]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] result = new long[l.length];\n\tlong i = 0;\n\twhile(i < n)\n\t{\n\t\tresult[i] = l[i];\n\t\ti++;\n\t}\n\twhile(i < l.length)\n\t{\n\t\tresult[i] = l[i+1];\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp27umeev1.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x42853e]\n??:? long[] tmp27umeev1.split_Arr(long[], long) [0x427ed7]\n??:? void tmp27umeev1.__unittest_L23_C1() [0x427f59]\n??:? void tmp27umeev1.__modtest() [0x428210]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c547]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3da]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430665]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b14]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b1]\n??:? runModuleUnitTests [0x42c31d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int funct",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] ret = new long[l.length];\n\tfor (long i = 0; i < l.length; i++)\n\t{\n\t\tif (i < n)\n\t\t\tret[i + l.length - n] = l[i];\n\t\telse\n\t\t\tret[i - n] = l[i];\n\t}\n\treturn ret;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] r = new long[l.length];\n\tlong[] s = new long[l.length];\n\tlong[] t = new long[l.length];\n\tlong[] u = new long[l.length];\n\tlong[] v = new long[l.length];\n\tlong[] w = new long[l.length];\n\tlong[] x = new long[l.length];\n\tlong[] y = new long[l.length];\n\tlong[] z = new long[l.length];\n\t\n\tfor(long i = 0; i < l.length; i++)\n\t{\n\t\tif(i < n)\n\t\t{\n\t\t\tr[i] = l[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\ts[i] = l[i];\n\t\t}\n\t}\n\t\n\tfor(long i = 0; i < l.length; i++)\n\t{\n\t\tif(i < n)\n\t\t{\n\t\t\tt[i] = s[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tu[i] = s[i];\n\t\t}\n\t}\n\t\n\tfor(long i = 0; i < l.length; i++)\n\t{\n\t\tif(i < n)\n\t\t{\n\t\t\tv[i] = u[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tw[i] = u[i];\n\t\t}\n\t}\n\t\n\tfor(long i = 0; i < l.length; i++)\n\t{\n\t\tif(i < n)\n\t\t{\n\t\t\tx[i] = w[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\ty[i] = w[i];\n\t\t}\n\t}\n\t\n\tfor(long i = 0; i < l.length; i++)\n\t{\n\t\tif(i < n)\n\t\t{\n\t\t\tz[i] = y[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tz[i] = y[i];\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "/tmp/tmpavm6ehwg.d(76): Error: found `unittest` instead of statement\n/tmp/tmpavm6ehwg.d(84): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpavm6ehwg.d(84): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpavm6ehwg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] l1 = new long[n];\n\tlong[] l2 = new long[l.length - n];\n\tlong[] l3 = new long[l.length];\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tl1[i] = l[i];\n\t}\n\t\n\tfor(long i = n; i < l.length; i++)\n\t{\n\t\tl2[i - n] = l[i];\n\t}\n\t\n\tfor(long i = 0; i < l.length; i++)\n\t{\n\t\tif(i < l2.length)\n\t\t{\n\t\t\tl3[i] = l2[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tl3[i] = l1[i - l2.length];\n\t\t}\n\t}\n\t\n\treturn l3;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] l1 = l[0..n];\n\tlong[] l2 = l[n..$];\n\treturn l2 ~ l1;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] l1 = new long[n];\n\tlong[] l2 = new long[l.length - n];\n\tlong[] l3 = new long[l.length];\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tl1[i] = l[i];\n\t}\n\t\n\tfor (long i = n; i < l.length; i++)\n\t{\n\t\tl2[i - n] = l[i];\n\t}\n\t\n\tfor (long i = 0; i < l.length; i++)\n\t{\n\t\tif (i < l2.length)\n\t\t{\n\t\t\tl3[i] = l2[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tl3[i] = l1[i - l2.length];\n\t\t}\n\t}\n\t\n\treturn l3;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] l1 = l[0..n];\n\tlong[] l2 = l[n..$];\n\treturn l2 ~ l1;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] ret = new long[l.length];\n\tlong[] first = new long[n];\n\tlong[] second = new long[l.length - n];\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\twhile(i < n)\n\t{\n\t\tfirst[i] = l[i];\n\t\ti++;\n\t}\n\twhile(j < l.length - n)\n\t{\n\t\tsecond[j] = l[i];\n\t\ti++;\n\t\tj++;\n\t}\n\twhile(k < l.length)\n\t{\n\t\tret[k] = second[k];\n\t\tk++;\n\t}\n\twhile(k < l.length)\n\t{\n\t\tret[k] = first[k - l.length - n];\n\t\tk++;\n\t}\n\treturn ret;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmppw7xyk77.d(28): Range violation\n----------------\n??:? _d_arrayboundsp [0x42864e]\n??:? long[] tmppw7xyk77.split_Arr(long[], long) [0x427f7e]\n??:? void tmppw7xyk77.__unittest_L38_C1() [0x428065]\n??:? void tmppw7xyk77.__modtest() [0x42831c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c657]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4ea]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430775]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c24]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430701]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4c1]\n??:? runModuleUnitTests [0x42c42d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int funct",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] a = new long[l.length];\n\tlong[] b = new long[l.length];\n\tlong[] c = new long[l.length];\n\tlong[] d = new long[l.length];\n\t\n\tfor(long i = 0; i < l.length; i++)\n\t{\n\t\tif(i < n)\n\t\t{\n\t\t\ta[i] = l[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tb[i] = l[i];\n\t\t}\n\t}\n\t\n\tfor(long i = 0; i < l.length; i++)\n\t{\n\t\tif(i < n)\n\t\t{\n\t\t\tc[i] = b[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\td[i] = a[i];\n\t\t}\n\t}\n\t\n\treturn d;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp0mxmxl43.d(44): unittest failure\n----------------\n??:? _d_unittestp [0x4285b5]\n??:? void tmp0mxmxl43.__unittest_L40_C1() [0x4280f4]\n??:? void tmp0mxmxl43.__modtest() [0x428334]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c66f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b502]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43078d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c3c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430719]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4d9]\n??:? runModuleUnitTests [0x42c445]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a78]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] l1 = l[0..n];\n\tlong[] l2 = l[n..$];\n\treturn l2 ~ l1;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] temp = new long[l.length];\n\tlong[] temp2 = new long[l.length];\n\tlong[] temp3 = new long[l.length];\n\tlong[] temp4 = new long[l.length];\n\tlong[] temp5 = new long[l.length];\n\tlong[] temp6 = new long[l.length];\n\tlong[] temp7 = new long[l.length];\n\tlong[] temp8 = new long[l.length];\n\tlong[] temp9 = new long[l.length];\n\tlong[] temp10 = new long[l.length];\n\tlong[] temp11 = new long[l.length];\n\tlong[] temp12 = new long[l.length];\n\tlong[] temp13 = new long[l.length];\n\tlong[] temp14 = new long[l.length];\n\tlong[] temp15 = new long[l.length];\n\tlong[] temp16 = new long[l.length];\n\tlong[] temp17 = new long[l.length];\n\tlong[] temp18 = new long[l.length];\n\tlong[] temp19 = new long[l.length];\n\tlong[] temp20 = new long[l.length];\n\tlong[] temp21 = new long[l.length];\n\tlong[] temp22 = new long[l.length];\n\tlong[] temp23 = new long[l.length];\n\tlong[] temp24 = new long[l.length];\n\tlong[] temp25 = new long[l.length];\n\tlong[] temp26 = new long[l.length];\n\tlong[] temp27 = new long[l.length];\n\tlong[] temp28 = new long[l.length];\n\tlong[] temp29 = new long[l.length];\n\tlong[] temp30 = new long[l.length];\n\tlong[] temp31 = new long[l.length];\n\tlong[] temp32 = new long[l.length];\n\tlong[] temp33 = new long[l.length];\n\tlong[] temp34 = new long[l.length];\n\tlong[] temp35 = new long[l.length];\n\tlong[] temp36 = new long[l.length];\n\tlong[] temp37 =\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "/tmp/tmp_ejyqf85.d(46): Error: expression expected, not `unittest`\n/tmp/tmp_ejyqf85.d(47): Error: semicolon expected, not `{`\n/tmp/tmp_ejyqf85.d(54): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_ejyqf85.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] ret = new long[l.length];\n\tlong i = 0;\n\tlong j = 0;\n\twhile(i < l.length)\n\t{\n\t\tif(i < n)\n\t\t{\n\t\t\tret[j] = l[i];\n\t\t\tj++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tret[j] = l[i];\n\t\t\tj++;\n\t\t}\n\t\ti++;\n\t}\n\treturn ret;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpfests8vs.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x428495]\n??:? void tmpfests8vs.__unittest_L28_C1() [0x427fd8]\n??:? void tmpfests8vs.__modtest() [0x428218]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c54f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3e2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43066d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b1c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305f9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b9]\n??:? runModuleUnitTests [0x42c325]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428958]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] l1 = new long[n];\n\tlong[] l2 = new long[l.length - n];\n\t\n\tfor (long i = 0; i < n; i++)\n\t\tl1[i] = l[i];\n\t\n\tfor (long i = n; i < l.length; i++)\n\t\tl2[i - n] = l[i];\n\t\n\treturn l1 ~ l2;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp8kc4gsmt.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x4284d5]\n??:? void tmp8kc4gsmt.__unittest_L20_C1() [0x428014]\n??:? void tmp8kc4gsmt.__modtest() [0x428254]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6d7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b56a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4306ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b5c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430639]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b541]\n??:? runModuleUnitTests [0x42c4ad]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428998]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] l1 = l[0..n];\n\tlong[] l2 = l[n..$];\n\treturn l2 ~ l1;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] l1 = l[0..n];\n\tlong[] l2 = l[n..$];\n\treturn l2 ~ l1;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] l1 = l[0..n];\n\tlong[] l2 = l[n..$];\n\treturn l2 ~ l1;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] result = new long[l.length];\n\tlong[] first = new long[n];\n\tlong[] second = new long[l.length - n];\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tfirst[i] = l[i];\n\t}\n\t\n\tfor (long i = n; i < l.length; i++)\n\t{\n\t\tsecond[i - n] = l[i];\n\t}\n\t\n\tfor (long i = 0; i < second.length; i++)\n\t{\n\t\tresult[i] = second[i];\n\t}\n\t\n\tfor (long i = second.length; i < result.length; i++)\n\t{\n\t\tresult[i] = first[i - second.length];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] first = l[0..n];\n\tlong[] second = l[n..$];\n\treturn second ~ first;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] l1 = l[0..n];\n\tlong[] l2 = l[n..$];\n\treturn l2 ~ l1;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] l1 = new long[n];\n\tlong[] l2 = new long[l.length - n];\n\t\n\tfor (long i = 0; i < n; i++)\n\t\tl1[i] = l[i];\n\t\t\n\tfor (long i = n; i < l.length; i++)\n\t\tl2[i - n] = l[i];\n\t\t\n\treturn l1 ~ l2;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpvnimcb3c.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x4284d5]\n??:? void tmpvnimcb3c.__unittest_L20_C1() [0x428014]\n??:? void tmpvnimcb3c.__modtest() [0x428254]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6d7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b56a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4306ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b5c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430639]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b541]\n??:? runModuleUnitTests [0x42c4ad]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428998]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] a = l[0..n];\n\tlong[] b = l[n..$];\n\treturn b ~ a;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] l2 = new long[l.length];\n\tlong[] l3 = new long[l.length];\n\tlong[] l4 = new long[l.length];\n\tlong[] l5 = new long[l.length];\n\t\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong m = 0;\n\t\n\twhile(i < n)\n\t{\n\t\tl2[i] = l[i];\n\t\ti++;\n\t}\n\t\n\twhile(i < l.length)\n\t{\n\t\tl3[j] = l[i];\n\t\ti++;\n\t\tj++;\n\t}\n\t\n\twhile(k < l.length)\n\t{\n\t\tl4[k] = l2[k];\n\t\tk++;\n\t}\n\t\n\twhile(m < l.length)\n\t{\n\t\tl5[m] = l3[m];\n\t\tm++;\n\t}\n\t\n\treturn l5;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpb4ig0c_r.d(50): unittest failure\n----------------\n??:? _d_unittestp [0x4285b5]\n??:? void tmpb4ig0c_r.__unittest_L46_C1() [0x4280f8]\n??:? void tmpb4ig0c_r.__modtest() [0x428338]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c66f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b502]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43078d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c3c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430719]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4d9]\n??:? runModuleUnitTests [0x42c445]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a78]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] result = new long[l.length];\n\tlong[] first = new long[n];\n\tlong[] second = new long[l.length - n];\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tfirst[i] = l[i];\n\t}\n\t\n\tfor (long i = 0; i < l.length - n; i++)\n\t{\n\t\tsecond[i] = l[n + i];\n\t}\n\t\n\tfor (long i = 0; i < l.length - n; i++)\n\t{\n\t\tresult[i] = second[i];\n\t}\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tresult[l.length - n + i] = first[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] new_l = new long[l.length];\n\tlong[] first_part = new long[n];\n\tlong[] second_part = new long[l.length - n];\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tfirst_part[i] = l[i];\n\t}\n\t\n\tfor (long i = n; i < l.length; i++)\n\t{\n\t\tsecond_part[i - n] = l[i];\n\t}\n\t\n\tfor (long i = 0; i < l.length; i++)\n\t{\n\t\tif (i < l.length - n)\n\t\t{\n\t\t\tnew_l[i] = second_part[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnew_l[i] = first_part[i - (l.length - n)];\n\t\t}\n\t}\n\t\n\treturn new_l;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] a = new long[l.length];\n\tlong[] b = new long[l.length];\n\tlong[] c = new long[l.length];\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\ta[i] = l[i];\n\t}\n\t\n\tfor(long i = n; i < l.length; i++)\n\t{\n\t\tb[i] = l[i];\n\t}\n\t\n\tfor(long i = 0; i < l.length; i++)\n\t{\n\t\tc[i] = b[i];\n\t\tc[i+n] = a[i];\n\t}\n\t\n\treturn c;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpjbpbpkky.d(26): Range violation\n----------------\n??:? _d_arrayboundsp [0x42864e]\n??:? long[] tmpjbpbpkky.split_Arr(long[], long) [0x427fbc]\n??:? void tmpjbpbpkky.__unittest_L31_C1() [0x428065]\n??:? void tmpjbpbpkky.__modtest() [0x42831c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c657]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4ea]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430775]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c24]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430701]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4c1]\n??:? runModuleUnitTests [0x42c42d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int funct",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] result = new long[l.length];\n\tlong[] first = new long[n];\n\tlong[] second = new long[l.length - n];\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tfirst[i] = l[i];\n\t}\n\t\n\tfor (long i = n; i < l.length; i++)\n\t{\n\t\tsecond[i - n] = l[i];\n\t}\n\t\n\tfor (long i = 0; i < l.length; i++)\n\t{\n\t\tif (i < l.length - n)\n\t\t{\n\t\t\tresult[i] = second[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[i] = first[i - (l.length - n)];\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] result = new long[l.length];\n\tlong[] temp = new long[n];\n\tlong[] temp2 = new long[l.length-n];\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\ttemp[i] = l[i];\n\t}\n\t\n\tfor(long i = n; i < l.length; i++)\n\t{\n\t\ttemp2[i-n] = l[i];\n\t}\n\t\n\tfor(long i = 0; i < l.length; i++)\n\t{\n\t\tif(i < l.length-n)\n\t\t{\n\t\t\tresult[i] = temp2[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[i] = temp[i-(l.length-n)];\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] l1 = new long[l.length];\n\tlong[] l2 = new long[l.length];\n\tlong[] l3 = new long[l.length];\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tl1[i] = l[i];\n\t}\n\t\n\tfor(long i = n; i < l.length; i++)\n\t{\n\t\tl2[i] = l[i];\n\t}\n\t\n\tfor(long i = 0; i < l.length; i++)\n\t{\n\t\tl3[i] = l2[i];\n\t\tl3[i+n] = l1[i];\n\t}\n\t\n\treturn l3;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpr46a5phu.d(26): Range violation\n----------------\n??:? _d_arrayboundsp [0x42864e]\n??:? long[] tmpr46a5phu.split_Arr(long[], long) [0x427fbc]\n??:? void tmpr46a5phu.__unittest_L31_C1() [0x428065]\n??:? void tmpr46a5phu.__modtest() [0x42831c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c657]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4ea]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430775]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c24]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430701]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4c1]\n??:? runModuleUnitTests [0x42c42d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int funct",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] l1 = l[0..n];\n\tlong[] l2 = l[n..$];\n\treturn l2~l1;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] l1 = l[0..n];\n\tlong[] l2 = l[n..$];\n\treturn l2 ~ l1;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] l1 = l[0..n];\n\tlong[] l2 = l[n..$];\n\treturn l2 ~ l1;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] l1 = l[0..n];\n\tlong[] l2 = l[n..$];\n\treturn l2 ~ l1;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] arr = new long[l.length];\n\tlong[] arr1 = new long[n];\n\tlong[] arr2 = new long[l.length-n];\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\twhile(i < l.length)\n\t{\n\t\tif(i < n)\n\t\t{\n\t\t\tarr1[j] = l[i];\n\t\t\tj++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tarr2[k] = l[i];\n\t\t\tk++;\n\t\t}\n\t\ti++;\n\t}\n\ti = 0;\n\twhile(i < arr2.length)\n\t{\n\t\tarr[i] = arr2[i];\n\t\ti++;\n\t}\n\tj = 0;\n\twhile(j < arr1.length)\n\t{\n\t\tarr[i] = arr1[j];\n\t\ti++;\n\t\tj++;\n\t}\n\treturn arr;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] l1 = l[0..n];\n\tlong[] l2 = l[n..$];\n\treturn l2 ~ l1;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] l1 = l[0..n];\n\tlong[] l2 = l[n..$];\n\treturn l2 ~ l1;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] new_l = new long[l.length];\n\tlong[] first_half = new long[n];\n\tlong[] second_half = new long[l.length - n];\n\t\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tfirst_half[i] = l[i];\n\t}\n\t\n\tfor (long i = n; i < l.length; i++) \n\t{\n\t\tsecond_half[i - n] = l[i];\n\t}\n\t\n\tfor (long i = 0; i < l.length; i++) \n\t{\n\t\tif (i < l.length - n) \n\t\t{\n\t\t\tnew_l[i] = second_half[i];\n\t\t}\n\t\telse \n\t\t{\n\t\t\tnew_l[i] = first_half[i - l.length + n];\n\t\t}\n\t}\n\t\n\treturn new_l;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] result = new long[l.length];\n\tlong[] first = new long[n];\n\tlong[] second = new long[l.length - n];\n\t\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tfirst[i] = l[i];\n\t}\n\t\n\tfor (int i = n; i < l.length; i++)\n\t{\n\t\tsecond[i - n] = l[i];\n\t}\n\t\n\tfor (int i = 0; i < l.length; i++)\n\t{\n\t\tif (i < l.length - n)\n\t\t{\n\t\t\tresult[i] = second[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[i] = first[i - (l.length - n)];\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "/tmp/tmpazsw3bim.d(18): Error: cannot implicitly convert expression `n` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpazsw3bim.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] l1 = new long[n];\n\tlong[] l2 = new long[l.length - n];\n\tlong[] l3 = new long[l.length];\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tl1[i] = l[i];\n\t}\n\t\n\tfor(long i = n; i < l.length; i++)\n\t{\n\t\tl2[i - n] = l[i];\n\t}\n\t\n\tfor(long i = 0; i < l.length; i++)\n\t{\n\t\tif(i < l.length - n)\n\t\t{\n\t\t\tl3[i] = l2[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tl3[i] = l1[i - (l.length - n)];\n\t\t}\n\t}\n\t\n\treturn l3;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] l2 = new long[l.length];\n\tlong[] l3 = new long[l.length];\n\tlong[] l4 = new long[l.length];\n\tlong[] l5 = new long[l.length];\n\tlong[] l6 = new long[l.length];\n\tlong[] l7 = new long[l.length];\n\tlong[] l8 = new long[l.length];\n\tlong[] l9 = new long[l.length];\n\tlong[] l10 = new long[l.length];\n\tlong[] l11 = new long[l.length];\n\tlong[] l12 = new long[l.length];\n\tlong[] l13 = new long[l.length];\n\tlong[] l14 = new long[l.length];\n\tlong[] l15 = new long[l.length];\n\tlong[] l16 = new long[l.length];\n\tlong[] l17 = new long[l.length];\n\tlong[] l18 = new long[l.length];\n\tlong[] l19 = new long[l.length];\n\tlong[] l20 = new long[l.length];\n\tlong[] l21 = new long[l.length];\n\tlong[] l22 = new long[l.length];\n\tlong[] l23 = new long[l.length];\n\tlong[] l24 = new long[l.length];\n\tlong[] l25 = new long[l.length];\n\tlong[] l26 = new long[l.length];\n\tlong[] l27 = new long[l.length];\n\tlong[] l28 = new long[l.length];\n\tlong[] l29 = new long[l.length];\n\tlong[] l30 = new long[l.length];\n\tlong[] l31 = new long[l.length];\n\tlong[] l32 = new long[l.length];\n\tlong[] l33 = new long[l.length];\n\tlong[] l34 = new long[l.length];\n\tlong[] l35 = new long[l.length];\n\tlong[] l36 = new long[l.length];\n\tlong[] l37 = new long[l.length];\n\tlong[] l38\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122398,
      "stdout": "",
      "stderr": "/tmp/tmpzypffani.d(46): Error: semicolon expected, not `unittest`\n/tmp/tmpzypffani.d(46): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzypffani.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] l1 = new long[l.length];\n\tlong[] l2 = new long[l.length];\n\tlong[] l3 = new long[l.length];\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\twhile(i < l.length)\n\t{\n\t\tif(i < n)\n\t\t{\n\t\t\tl1[i] = l[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tl2[j] = l[i];\n\t\t\tj++;\n\t\t}\n\t\ti++;\n\t}\n\ti = 0;\n\twhile(i < l1.length)\n\t{\n\t\tl3[k] = l1[i];\n\t\tk++;\n\t\ti++;\n\t}\n\ti = 0;\n\twhile(i < l2.length)\n\t{\n\t\tl3[k] = l2[i];\n\t\tk++;\n\t\ti++;\n\t}\n\treturn l3;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmps29v468p.d(38): Range violation\n----------------\n??:? _d_arrayboundsp [0x428656]\n??:? long[] tmps29v468p.split_Arr(long[], long) [0x427fc3]\n??:? void tmps29v468p.__unittest_L44_C1() [0x428071]\n??:? void tmps29v468p.__modtest() [0x428328]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c65f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4f2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43077d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c2c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430709]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4c9]\n??:? runModuleUnitTests [0x42c435]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int funct",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] ret = new long[l.length];\n\tlong[] first = new long[n];\n\tlong[] second = new long[l.length - n];\n\t\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tfirst[i] = l[i];\n\t}\n\t\n\tfor (long i = n; i < l.length; i++) \n\t{\n\t\tsecond[i - n] = l[i];\n\t}\n\t\n\tfor (long i = 0; i < second.length; i++) \n\t{\n\t\tret[i] = second[i];\n\t}\n\t\n\tfor (long i = 0; i < first.length; i++) \n\t{\n\t\tret[second.length + i] = first[i];\n\t}\n\t\n\treturn ret;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] l1 = new long[n];\n\tlong[] l2 = new long[l.length - n];\n\t\n\tfor (long i = 0; i < n; i++)\n\t\tl1[i] = l[i];\n\tfor (long i = n; i < l.length; i++)\n\t\tl2[i - n] = l[i];\n\t\n\treturn l1 ~ l2;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp80_rjwfx.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x4284d5]\n??:? void tmp80_rjwfx.__unittest_L19_C1() [0x428014]\n??:? void tmp80_rjwfx.__modtest() [0x428254]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6d7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b56a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4306ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b5c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430639]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b541]\n??:? runModuleUnitTests [0x42c4ad]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428998]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] l1 = l[0..n];\n\tlong[] l2 = l[n..$];\n\treturn l2 ~ l1;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] new_arr = new long[l.length];\n\tlong[] first_part = new long[n];\n\tlong[] second_part = new long[l.length - n];\n\t\n\tfor (long i = 0; i < l.length; i++)\n\t{\n\t\tif (i < n)\n\t\t{\n\t\t\tfirst_part[i] = l[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tsecond_part[i - n] = l[i];\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < l.length; i++)\n\t{\n\t\tif (i < l.length - n)\n\t\t{\n\t\t\tnew_arr[i] = second_part[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnew_arr[i] = first_part[i - (l.length - n)];\n\t\t}\n\t}\n\t\n\treturn new_arr;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] l1 = new long[n];\n\tlong[] l2 = new long[l.length - n];\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tl1[i] = l[i];\n\t}\n\t\n\tfor(long i = n; i < l.length; i++)\n\t{\n\t\tl2[i - n] = l[i];\n\t}\n\t\n\treturn l1 ~ l2;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpd8cie0y6.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x4284d5]\n??:? void tmpd8cie0y6.__unittest_L24_C1() [0x428014]\n??:? void tmpd8cie0y6.__modtest() [0x428254]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6d7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b56a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4306ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b5c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430639]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b541]\n??:? runModuleUnitTests [0x42c4ad]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428998]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] result = new long[l.length];\n\tlong[] temp = new long[n];\n\tlong[] temp2 = new long[l.length - n];\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\ttemp[i] = l[i];\n\t}\n\t\n\tfor(long i = n; i < l.length; i++)\n\t{\n\t\ttemp2[i - n] = l[i];\n\t}\n\t\n\tfor(long i = 0; i < l.length; i++)\n\t{\n\t\tif(i < l.length - n)\n\t\t{\n\t\t\tresult[i] = temp2[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[i] = temp[i - (l.length - n)];\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] result;\n\tlong i;\n\t\n\tresult = new long[l.length];\n\t\n\tfor (i = 0; i < l.length; i++) {\n\t\tif (i < n) {\n\t\t\tresult[i] = l[i];\n\t\t} else {\n\t\t\tresult[i] = l[i - n];\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpviixx4re.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x4284ad]\n??:? void tmpviixx4re.__unittest_L24_C1() [0x427fec]\n??:? void tmpviixx4re.__modtest() [0x42822c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c567]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3fa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430685]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b34]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430611]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3d1]\n??:? runModuleUnitTests [0x42c33d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428970]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] temp = new long[l.length];\n\tlong[] temp2 = new long[l.length];\n\tlong[] temp3 = new long[l.length];\n\tlong[] temp4 = new long[l.length];\n\tlong[] temp5 = new long[l.length];\n\tlong[] temp6 = new long[l.length];\n\tlong[] temp7 = new long[l.length];\n\tlong[] temp8 = new long[l.length];\n\tlong[] temp9 = new long[l.length];\n\tlong[] temp10 = new long[l.length];\n\tlong[] temp11 = new long[l.length];\n\tlong[] temp12 = new long[l.length];\n\tlong[] temp13 = new long[l.length];\n\tlong[] temp14 = new long[l.length];\n\tlong[] temp15 = new long[l.length];\n\tlong[] temp16 = new long[l.length];\n\tlong[] temp17 = new long[l.length];\n\tlong[] temp18 = new long[l.length];\n\tlong[] temp19 = new long[l.length];\n\tlong[] temp20 = new long[l.length];\n\tlong[] temp21 = new long[l.length];\n\tlong[] temp22 = new long[l.length];\n\tlong[] temp23 = new long[l.length];\n\tlong[] temp24 = new long[l.length];\n\tlong[] temp25 = new long[l.length];\n\tlong[] temp26 = new long[l.length];\n\tlong[] temp27 = new long[l.length];\n\tlong[] temp28 = new long[l.length];\n\tlong[] temp29 = new long[l.length];\n\tlong[] temp30 = new long[l.length];\n\tlong[] temp31 = new long[l.length];\n\tlong[] temp32 = new long[l.length];\n\tlong[] temp33 = new long[l.length];\n\tlong[] temp34 = new long[l.length];\n\tlong[] temp35 = new long[l.length];\n\tlong[] temp36 = new long[l.length];\n\tlong[] temp37 =\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "/tmp/tmp_ejyqf85.d(46): Error: expression expected, not `unittest`\n/tmp/tmp_ejyqf85.d(47): Error: semicolon expected, not `{`\n/tmp/tmp_ejyqf85.d(54): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_ejyqf85.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] result = new long[l.length];\n\tlong[] first = new long[n];\n\tlong[] second = new long[l.length - n];\n\t\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tfirst[i] = l[i];\n\t}\n\t\n\tfor (int i = 0; i < l.length - n; i++)\n\t{\n\t\tsecond[i] = l[i + n];\n\t}\n\t\n\tfor (int i = 0; i < l.length - n; i++)\n\t{\n\t\tresult[i] = second[i];\n\t}\n\t\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tresult[i + l.length - n] = first[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] l1 = l[0..n];\n\tlong[] l2 = l[n..$];\n\treturn l2 ~ l1;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] l1 = l[0..n];\n\tlong[] l2 = l[n..$];\n\treturn l2 ~ l1;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] result = new long[l.length];\n\tlong[] first = new long[n];\n\tlong[] second = new long[l.length - n];\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tfirst[i] = l[i];\n\t}\n\t\n\tfor (long i = n; i < l.length; i++)\n\t{\n\t\tsecond[i - n] = l[i];\n\t}\n\t\n\tfor (long i = 0; i < l.length; i++)\n\t{\n\t\tif (i < l.length - n)\n\t\t{\n\t\t\tresult[i] = second[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[i] = first[i - l.length + n];\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] l1 = l[0..n];\n\tlong[] l2 = l[n..$];\n\treturn l2 ~ l1;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] newArr = new long[l.length];\n\tlong[] first = new long[n];\n\tlong[] second = new long[l.length - n];\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tfirst[i] = l[i];\n\t}\n\t\n\tfor (long i = n; i < l.length; i++)\n\t{\n\t\tsecond[i - n] = l[i];\n\t}\n\t\n\tfor (long i = 0; i < second.length; i++)\n\t{\n\t\tnewArr[i] = second[i];\n\t}\n\t\n\tfor (long i = 0; i < first.length; i++)\n\t{\n\t\tnewArr[i + second.length] = first[i];\n\t}\n\t\n\treturn newArr;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] new_l = new long[l.length];\n\tlong[] first_part = new long[n];\n\tlong[] second_part = new long[l.length - n];\n\t\n\tfor (long i = 0; i < l.length; i++)\n\t{\n\t\tif (i < n)\n\t\t{\n\t\t\tfirst_part[i] = l[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tsecond_part[i - n] = l[i];\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < l.length; i++)\n\t{\n\t\tif (i < l.length - n)\n\t\t{\n\t\t\tnew_l[i] = second_part[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnew_l[i] = first_part[i - (l.length - n)];\n\t\t}\n\t}\n\t\n\treturn new_l;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] l1 = new long[n];\n\tlong[] l2 = new long[l.length - n];\n\tlong[] l3 = new long[l.length];\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tl1[i] = l[i];\n\t}\n\t\n\tfor (long i = n; i < l.length; i++)\n\t{\n\t\tl2[i - n] = l[i];\n\t}\n\t\n\tfor (long i = 0; i < l2.length; i++)\n\t{\n\t\tl3[i] = l2[i];\n\t}\n\t\n\tfor (long i = 0; i < l1.length; i++)\n\t{\n\t\tl3[i + l2.length] = l1[i];\n\t}\n\t\n\treturn l3;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n\t\n*/\nlong[] split_Arr(long[] l, long n) \n{\n\tlong[] l1 = new long[n];\n\tlong[] l2 = new long[l.length - n];\n\tlong[] l3 = new long[l.length];\n\t\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tl1[i] = l[i];\n\t}\n\t\n\tfor (int i = n; i < l.length; i++)\n\t{\n\t\tl2[i - n] = l[i];\n\t}\n\t\n\tfor (int i = 0; i < l2.length; i++)\n\t{\n\t\tl3[i] = l2[i];\n\t}\n\t\n\tfor (int i = 0; i < l1.length; i++)\n\t{\n\t\tl3[l2.length + i] = l1[i];\n\t}\n\t\n\treturn l3;\n}\nunittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}",
      "timestamp": 1666122398,
      "stdout": "",
      "stderr": "/tmp/tmptbee7rks.d(18): Error: cannot implicitly convert expression `n` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptbee7rks.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}