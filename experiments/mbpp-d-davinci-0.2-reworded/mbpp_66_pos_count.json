{
  "name": "mbpp_66_pos_count",
  "language": "d",
  "prompt": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of positive numbers in an array.\n\t\n*/\nlong pos_count(long[] list) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_66_pos_count.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = pos_count;\n\n    assert(candidate([1L, -2L, 3L, -4L]) == 2L);\n    assert(candidate([3L, 4L, 5L, -1L]) == 3L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 4L);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tlong count = 0;\n\tforeach(num; list)\n\t{\n\t\tif(num > 0)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tforeach(item; list)\n\t{\n\t\tif(item > 0)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tforeach(long i; list)\n\t{\n\t\tif (i > 0)\n\t\t\tcount++;\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tforeach(item; list)\n\t{\n\t\tif(item > 0)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tfor (long i = 0; i < list.length; i++)\n\t{\n\t\tif (list[i] > 0)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tforeach(item; list)\n\t{\n\t\tif(item > 0)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tforeach(item; list)\n\t{\n\t\tif(item > 0)\n\t\t\tcount++;\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tforeach(item; list)\n\t{\n\t\tif (item > 0)\n\t\t\tcount += 1;\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tforeach(i; list)\n\t{\n\t\tif (i > 0)\n\t\t\tcount++;\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tforeach(i; list)\n\t{\n\t\tif(i > 0)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tforeach(num; list)\n\t{\n\t\tif(num > 0)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tforeach(item; list)\n\t{\n\t\tif(item > 0)\n\t\t\tcount++;\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tforeach(long i; list)\n\t{\n\t\tif(i > 0)\n\t\t\tcount++;\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tforeach(long i; list)\n\t{\n\t\tif(i > 0)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tforeach(item; list)\n\t{\n\t\tif(item > 0)\n\t\t\tcount++;\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tforeach(item; list)\n\t{\n\t\tif (item > 0)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tforeach(item; list)\n\t{\n\t\tif(item > 0)\n\t\t\tcount++;\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tforeach(n; list)\n\t{\n\t\tif (n > 0)\n\t\t\tcount++;\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tforeach(num; list)\n\t{\n\t\tif(num > 0)\n\t\t\tcount++;\n\t}\n\treturn count;\n}",
    "{\n\tlong count = 0;\n\tforeach(long x; list)\n\t{\n\t\tif (x > 0)\n\t\t\tcount++;\n\t}\n\treturn count;\n}"
  ]
}