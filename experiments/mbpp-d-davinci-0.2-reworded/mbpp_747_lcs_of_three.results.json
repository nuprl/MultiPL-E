{
  "name": "mbpp_747_lcs_of_three",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_747_lcs_of_three.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length; \n\tint n = Y.length; \n\tint o = Z.length; \n\tint L[m + 1][n + 1][o + 1]; \n\t\n\tfor (int i = 0; i <= m; i++) \n\t{ \n\t\tfor (int j = 0; j <= n; j++) \n\t\t{ \n\t\t\tfor (int k = 0; k <= o; k++) \n\t\t\t{ \n\t\t\t\tif (i == 0 || j == 0||k==0) \n\t\t\t\t\tL[i][j][k] = 0; \n\t\t\t\telse if (X[i - 1] == Y[j - 1] && X[i - 1]==Z[k - 1]) \n\t\t\t\t\tL[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n\t\t\t\telse\n\t\t\t\t\tL[i][j][k] = max(max(L[i - 1][j][k], \n\t\t\t\t\t\t\t\t\t\tL[i][j - 1][k]), \n\t\t\t\t\t\t\t\t\tL[i][j][k - 1]); \n\t\t\t} \n\t\t} \n\t} \n\treturn L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517282,
      "stdout": "",
      "stderr": "/tmp/tmpt5383bmr.d(13): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmpt5383bmr.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpt5383bmr.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpt5383bmr.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpt5383bmr.d(13): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt5383bmr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length; \n\tint n = Y.length; \n\tint o = Z.length; \n\t\n\tint L[m+1][n+1][o+1]; \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517282,
      "stdout": "",
      "stderr": "/tmp/tmph7zc6984.d(14): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmph7zc6984.d(15): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph7zc6984.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n  \n    int[][][] L = new int[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) \n    { \n        for (int j = 0; j <= n; j++) \n        { \n            for (int k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517282,
      "stdout": "",
      "stderr": "/tmp/tmp7l8qlnur.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmp7l8qlnur.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmp7l8qlnur.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmp7l8qlnur.d(14): Error: variable `m` cannot be read at compile time\n/tmp/tmp7l8qlnur.d(29): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7l8qlnur.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length; \n\tint n = Y.length; \n\tint o = Z.length; \n\t\n\tint[][][] L = new int[m+1][n+1][o+1]; \n\t\n\tfor (int i = 0; i <= m; i++) \n\t{ \n\t\tfor (int j = 0; j <= n; j++) \n\t\t{ \n\t\t\tfor (int k = 0; k <= o; k++) \n\t\t\t{ \n\t\t\t\tif (i == 0 || j == 0||k==0) \n\t\t\t\t\tL[i][j][k] = 0; \n\t\t\t\telse if (X[i-1] == Y[j-1] && X[i-1]==Z[k-1]) \n\t\t\t\t\tL[i][j][k] = L[i-1][j-1][k-1] + 1; \n\t\t\t\telse\n\t\t\t\t\tL[i][j][k] = max(L[i-1][j][k], L[i][j-1][k],L[i][j][k-1]); \n\t\t\t} \n\t\t} \n\t} \n\treturn L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517282,
      "stdout": "",
      "stderr": "/tmp/tmp7y6pkovi.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmp7y6pkovi.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmp7y6pkovi.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmp7y6pkovi.d(14): Error: variable `m` cannot be read at compile time\n/tmp/tmp7y6pkovi.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7y6pkovi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length; \n\tint n = Y.length; \n\tint o = Z.length; \n\t\n\tint[][][] L = new int[m+1][n+1][o+1]; \n\t\n\tfor (int i = 0; i <= m; i++) \n\t{ \n\t\tfor (int j = 0; j <= n; j++) \n\t\t{ \n\t\t\tfor (int k = 0; k <= o; k++) \n\t\t\t{ \n\t\t\t\tif (i == 0 || j == 0||k==0) \n\t\t\t\t\tL[i][j][k] = 0; \n\t\t\t\telse if (X[i-1] == Y[j-1] && X[i-1]==Z[k-1]) \n\t\t\t\t\tL[i][j][k] = L[i-1][j-1][k-1] + 1; \n\t\t\t\telse\n\t\t\t\t\tL[i][j][k] = max(L[i-1][j][k], L[i][j-1][k],L[i][j][k-1]); \n\t\t\t} \n\t\t} \n\t} \n\treturn L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517282,
      "stdout": "",
      "stderr": "/tmp/tmp7y6pkovi.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmp7y6pkovi.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmp7y6pkovi.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmp7y6pkovi.d(14): Error: variable `m` cannot be read at compile time\n/tmp/tmp7y6pkovi.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7y6pkovi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length; \n\tint n = Y.length; \n\tint o = Z.length; \n\t\n\tint L[m+1][n+1][o+1]; \n\t\n\tfor (int i=0; i<=m; i++) \n\t{ \n\t\tfor (int j=0; j<=n; j++) \n\t\t{ \n\t\t\tfor (int k=0; k<=o; k++) \n\t\t\t{ \n\t\t\t\tif (i == 0 || j == 0||k==0) \n\t\t\t\t\tL[i][j][k] = 0; \n\t\t\t\telse if (X[i-1] == Y[j-1] && X[i-1]==Z[k-1]) \n\t\t\t\t\tL[i][j][k] = L[i-1][j-1][k-1] + 1; \n\t\t\t\telse\n\t\t\t\t\tL[i][j][k] = max(max(L[i-1][j][k], L[i][j-1][k]),L[i][j][k-1]); \n\t\t\t} \n\t\t} \n\t} \n\treturn L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517282,
      "stdout": "",
      "stderr": "/tmp/tmpvh9e9eyu.d(14): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmpvh9e9eyu.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpvh9e9eyu.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpvh9e9eyu.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpvh9e9eyu.d(14): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvh9e9eyu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length; \n\tint n = Y.length; \n\tint o = Z.length; \n\tint L[][][] = new int[m+1][n+1][o+1]; \n\t\n\tfor (int i = 0; i <= m; i++) \n\t{ \n\t\tfor (int j = 0; j <= n; j++) \n\t\t{ \n\t\t\tfor (int k = 0; k <= o; k++) \n\t\t\t{ \n\t\t\t\tif (i == 0 || j == 0||k==0) \n\t\t\t\t\tL[i][j][k] = 0; \n\t\t\t\telse if (X[i-1] == Y[j-1] && X[i-1]==Z[k-1]) \n\t\t\t\t\tL[i][j][k] = L[i-1][j-1][k-1] + 1; \n\t\t\t\telse\n\t\t\t\t\tL[i][j][k] = max(max(L[i-1][j][k], \n\t\t\t\t\t\t\t\t\tL[i][j-1][k]), \n\t\t\t\t\t\t\t\t\tL[i][j][k-1]); \n\t\t\t} \n\t\t} \n\t} \n\t\n\treturn L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517282,
      "stdout": "",
      "stderr": "/tmp/tmpzjqx61ba.d(13): Deprecation: instead of C-style syntax, use D-style syntax `int[][][] L`\n/tmp/tmpzjqx61ba.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpzjqx61ba.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpzjqx61ba.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpzjqx61ba.d(13): Error: variable `m` cannot be read at compile time\n/tmp/tmpzjqx61ba.d(26): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzjqx61ba.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length; \n\tint n = Y.length; \n\tint o = Z.length; \n\t\n\tint L[m+1][n+1][o+1]; \n\t\n\tfor (int i=0; i<=m; i++) \n\t{ \n\t\tfor (int j=0; j<=n; j++) \n\t\t{ \n\t\t\tfor (int k=0; k<=o; k++) \n\t\t\t{ \n\t\t\t\tif (i == 0 || j == 0||k==0) \n\t\t\t\t\tL[i][j][k] = 0; \n\t\n\t\t\t\telse if (X[i-1] == Y[j-1] && X[i-1]==Z[k-1]) \n\t\t\t\t\tL[i][j][k] = L[i-1][j-1][k-1] + 1; \n\t\n\t\t\t\telse\n\t\t\t\t\tL[i][j][k] = max(max(L[i-1][j][k], \n\t\t\t\t\t\t\t\t\t\tL[i][j-1][k]), \n\t\t\t\t\t\t\t\t\tL[i][j][k-1]); \n\t\t\t} \n\t\t} \n\t} \n\t\n\treturn L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517282,
      "stdout": "",
      "stderr": "/tmp/tmpivjjndji.d(14): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmpivjjndji.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpivjjndji.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpivjjndji.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpivjjndji.d(14): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpivjjndji.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length; \n\tint n = Y.length; \n\tint o = Z.length; \n\t\n\tint L[m+1][n+1][o+1]; \n\t\n\tfor (int i=0; i<=m; i++) \n\t{ \n\t\tfor (int j=0; j<=n; j++) \n\t\t{ \n\t\t\tfor (int k=0; k<=o; k++) \n\t\t\t{ \n\t\t\t\tif (i == 0 || j == 0||k==0) \n\t\t\t\t\tL[i][j][k] = 0; \n\t\t\t\telse if (X[i-1] == Y[j-1] && X[i-1]==Z[k-1]) \n\t\t\t\t\tL[i][j][k] = L[i-1][j-1][k-1] + 1; \n\t\t\t\telse\n\t\t\t\t\tL[i][j][k] = max(max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1]); \n\t\t\t} \n\t\t} \n\t} \n\treturn L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517282,
      "stdout": "",
      "stderr": "/tmp/tmpj2i_sizh.d(14): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmpj2i_sizh.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpj2i_sizh.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpj2i_sizh.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpj2i_sizh.d(14): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj2i_sizh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length; \n\tint n = Y.length; \n\tint o = Z.length; \n\t\n\tint[][][] L = new int[m + 1][n + 1][o + 1]; \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517282,
      "stdout": "",
      "stderr": "/tmp/tmp4gkfzs0q.d(15): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4gkfzs0q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length; \n\tint n = Y.length; \n\tint o = Z.length; \n\tint L[][][] = new int[m + 1][n + 1][o + 1]; \n\tfor (int i = 0; i <= m; i++) \n\t{ \n\t\tfor (int j = 0; j <= n; j++) \n\t\t{ \n\t\t\tfor (int k = 0; k <= o; k++) \n\t\t\t{ \n\t\t\t\tif (i == 0 || j == 0 || k == 0) \n\t\t\t\t\tL[i][j][k] = 0; \n\t\t\t\telse if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n\t\t\t\t\tL[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n\t\t\t\telse\n\t\t\t\t\tL[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]); \n\t\t\t} \n\t\t} \n\t} \n\treturn L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517282,
      "stdout": "",
      "stderr": "/tmp/tmp9wq2do2_.d(13): Deprecation: instead of C-style syntax, use D-style syntax `int[][][] L`\n/tmp/tmp9wq2do2_.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmp9wq2do2_.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmp9wq2do2_.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmp9wq2do2_.d(13): Error: variable `m` cannot be read at compile time\n/tmp/tmp9wq2do2_.d(25): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9wq2do2_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n    int[][][] L = new int[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) { \n        for (int j = 0; j <= n; j++) { \n            for (int k = 0; k <= o; k++) { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517282,
      "stdout": "",
      "stderr": "/tmp/tmpoydkfir8.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpoydkfir8.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpoydkfir8.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpoydkfir8.d(13): Error: variable `m` cannot be read at compile time\n/tmp/tmpoydkfir8.d(25): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoydkfir8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length; \n\tint n = Y.length; \n\tint o = Z.length; \n\t\n\tint[][][] L = new int[m+1][n+1][o+1]; \n\t\n\tfor (int i = 0; i <= m; i++) \n\t{ \n\t\tfor (int j = 0; j <= n; j++) \n\t\t{ \n\t\t\tfor (int k = 0; k <= o; k++) \n\t\t\t{ \n\t\t\t\tif (i == 0 || j == 0||k==0) \n\t\t\t\t\tL[i][j][k] = 0; \n\t\t\t\telse if (X[i-1] == Y[j-1] && X[i-1]==Z[k-1]) \n\t\t\t\t\tL[i][j][k] = L[i-1][j-1][k-1] + 1; \n\t\t\t\telse\n\t\t\t\t\tL[i][j][k] = max(max(L[i-1][j][k], L[i][j-1][k]),L[i][j][k-1]); \n\t\t\t} \n\t\t} \n\t} \n\treturn L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517282,
      "stdout": "",
      "stderr": "/tmp/tmp3rw6wuok.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmp3rw6wuok.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmp3rw6wuok.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmp3rw6wuok.d(14): Error: variable `m` cannot be read at compile time\n/tmp/tmp3rw6wuok.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3rw6wuok.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length; \n\tint n = Y.length; \n\tint o = Z.length; \n\t\n\tint[][][] L = new int[m+1][n+1][o+1]; \n\t\n\tfor (int i=0; i<=m; i++) \n\t{ \n\t\tfor (int j=0; j<=n; j++) \n\t\t{ \n\t\t\tfor (int k=0; k<=o; k++) \n\t\t\t{ \n\t\t\t\tif (i == 0 || j == 0||k==0) \n\t\t\t\t\tL[i][j][k] = 0; \n\t\t\t\telse if (X[i-1] == Y[j-1] && X[i-1]==Z[k-1]) \n\t\t\t\t\tL[i][j][k] = L[i-1][j-1][k-1] + 1; \n\t\t\t\telse\n\t\t\t\t\tL[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1]); \n\t\t\t} \n\t\t} \n\t} \n\treturn L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517282,
      "stdout": "",
      "stderr": "/tmp/tmp7t9dpcr2.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmp7t9dpcr2.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmp7t9dpcr2.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmp7t9dpcr2.d(14): Error: variable `m` cannot be read at compile time\n/tmp/tmp7t9dpcr2.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7t9dpcr2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n  \n    int L[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) \n    { \n        for (int j = 0; j <= n; j++) \n        { \n            for (int k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(L[i - 1][j][k], \n                                     L[i][j - 1][k], \n                                     L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517282,
      "stdout": "",
      "stderr": "/tmp/tmp5b29kpaw.d(14): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmp5b29kpaw.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmp5b29kpaw.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmp5b29kpaw.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmp5b29kpaw.d(14): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5b29kpaw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n  \n    int L[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) { \n        for (int j = 0; j <= n; j++) { \n            for (int k = 0; k <= o; k++) { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && \n                         X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(max(L[i - 1][j][k], \n                                         L[i][j - 1][k]), \n                                     L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517282,
      "stdout": "",
      "stderr": "/tmp/tmpa25zo6vq.d(14): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmpa25zo6vq.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpa25zo6vq.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpa25zo6vq.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpa25zo6vq.d(14): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa25zo6vq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n  \n    int L[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) \n    { \n        for (int j = 0; j <= n; j++) \n        { \n            for (int k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0||k==0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1]==Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k-1] + 1; \n  \n                else\n                    L[i][j][k] = max(max(L[i - 1][j][k], \n                                         L[i][j - 1][k]), \n                                     L[i][j][k-1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \n  \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517282,
      "stdout": "",
      "stderr": "/tmp/tmpmbt0zali.d(14): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmpmbt0zali.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpmbt0zali.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpmbt0zali.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpmbt0zali.d(14): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmbt0zali.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n    int[][][] L = new int[m+1][n+1][o+1]; \n    for (int i = 0; i <= m; i++) \n    { \n        for (int j = 0; j <= n; j++) \n        { \n            for (int k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0||k==0) \n                    L[i][j][k] = 0; \n                else if (X[i-1] == Y[j-1] && X[i-1]==Z[k-1]) \n                    L[i][j][k] = L[i-1][j-1][k-1] + 1; \n                else\n                    L[i][j][k] = max(L[i-1][j][k], max(L[i][j-1][k], L[i][j][k-1])); \n            } \n        } \n    } \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517282,
      "stdout": "",
      "stderr": "/tmp/tmpdo3f5dqg.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpdo3f5dqg.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpdo3f5dqg.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpdo3f5dqg.d(13): Error: variable `m` cannot be read at compile time\n/tmp/tmpdo3f5dqg.d(25): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdo3f5dqg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n  \n    int[][][] L = new int[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) \n    { \n        for (int j = 0; j <= n; j++) \n        { \n            for (int k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517282,
      "stdout": "",
      "stderr": "/tmp/tmp7l8qlnur.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmp7l8qlnur.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmp7l8qlnur.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmp7l8qlnur.d(14): Error: variable `m` cannot be read at compile time\n/tmp/tmp7l8qlnur.d(29): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7l8qlnur.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length; \n\tint n = Y.length; \n\tint o = Z.length; \n\t\n\tint[][][] L = new int[m + 1][n + 1][o + 1]; \n\t\n\tfor (int i = 0; i <= m; i++) \n\t{ \n\t\tfor (int j = 0; j <= n; j++) \n\t\t{ \n\t\t\tfor (int k = 0; k <= o; k++) \n\t\t\t{ \n\t\t\t\tif (i == 0 || j == 0 || k == 0) \n\t\t\t\t\tL[i][j][k] = 0; \n\t\t\t\telse if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n\t\t\t\t\tL[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n\t\t\t\telse\n\t\t\t\t\tL[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]); \n\t\t\t} \n\t\t} \n\t} \n\treturn L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517282,
      "stdout": "",
      "stderr": "/tmp/tmpo151sqe6.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpo151sqe6.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpo151sqe6.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpo151sqe6.d(14): Error: variable `m` cannot be read at compile time\n/tmp/tmpo151sqe6.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo151sqe6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n  \n    int[][][] L = new int[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) \n    { \n        for (int j = 0; j <= n; j++) \n        { \n            for (int k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(L[i - 1][j][k], \n                                     L[i][j - 1][k], \n                                     L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122519,
      "stdout": "",
      "stderr": "/tmp/tmpqmt4mop2.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpqmt4mop2.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpqmt4mop2.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpqmt4mop2.d(14): Error: variable `m` cannot be read at compile time\n/tmp/tmpqmt4mop2.d(29): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqmt4mop2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length; \n\tint n = Y.length; \n\tint o = Z.length; \n\t\n\tint[][][] L = new int[m + 1][n + 1][o + 1]; \n\t\n\tfor (int i = 0; i <= m; i++) \n\t{ \n\t\tfor (int j = 0; j <= n; j++) \n\t\t{ \n\t\t\tfor (int k = 0; k <= o; k++) \n\t\t\t{ \n\t\t\t\tif (i == 0 || j == 0||k==0) \n\t\t\t\t\tL[i][j][k] = 0; \n\t\t\t\telse if (X[i - 1] == Y[j - 1] && X[i - 1]==Z[k - 1]) \n\t\t\t\t\tL[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n\t\t\t\telse\n\t\t\t\t\tL[i][j][k] = max(max(L[i - 1][j][k], \n\t\t\t\t\t\t\t\t\tL[i][j - 1][k]), \n\t\t\t\t\t\t\t\t\tL[i][j][k - 1]); \n\t\t\t} \n\t\t} \n\t} \n\treturn L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122519,
      "stdout": "",
      "stderr": "/tmp/tmptvbt2qui.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmptvbt2qui.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmptvbt2qui.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmptvbt2qui.d(14): Error: variable `m` cannot be read at compile time\n/tmp/tmptvbt2qui.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptvbt2qui.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n  \n    int L[][][] = new int[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) \n    { \n        for (int j = 0; j <= n; j++) \n        { \n            for (int k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(L[i - 1][j][k], \n                                     L[i][j - 1][k], \n                                     L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122519,
      "stdout": "",
      "stderr": "/tmp/tmp6cf24462.d(14): Deprecation: instead of C-style syntax, use D-style syntax `int[][][] L`\n/tmp/tmp6cf24462.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmp6cf24462.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmp6cf24462.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmp6cf24462.d(14): Error: variable `m` cannot be read at compile time\n/tmp/tmp6cf24462.d(29): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6cf24462.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    long m = X.length; \n    long n = Y.length; \n    long o = Z.length; \n  \n    long L[][][] = new long[m + 1][n + 1][o + 1]; \n  \n    /* Following steps build L[m+1][n+1][o+1] in bottom up fashion. Note \n       that L[i][j][k] contains length of LCS of X[0..i-1] and Y[0..j-1] \n       and Z[0..k-1] */\n    for (long i = 0; i <= m; i++) { \n        for (long j = 0; j <= n; j++) { \n            for (long k = 0; k <= o; k++) { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    /* L[m][n][o] contains length of LCS for X[0..n-1] and Y[0..m-1] and Z[0..o-1]*/\n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122519,
      "stdout": "",
      "stderr": "/tmp/tmpixz6jrio.d(14): Deprecation: instead of C-style syntax, use D-style syntax `long[][][] L`\n/tmp/tmpixz6jrio.d(14): Error: variable `m` cannot be read at compile time\n/tmp/tmpixz6jrio.d(29): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpixz6jrio.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n    int L[m + 1][n + 1][o + 1]; \n    for (int i = 0; i <= m; i++) \n    { \n        for (int j = 0; j <= n; j++) \n        { \n            for (int k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n                else\n                    L[i][j][k] = max(max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]); \n            } \n        } \n    } \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122519,
      "stdout": "",
      "stderr": "/tmp/tmpbcx0krq5.d(13): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmpbcx0krq5.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpbcx0krq5.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpbcx0krq5.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpbcx0krq5.d(13): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbcx0krq5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n  \n    int L[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) \n    { \n        for (int j = 0; j <= n; j++) \n        { \n            for (int k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0||k==0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1]==Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k-1] + 1; \n  \n                else\n                    L[i][j][k] = max(max(L[i - 1][j][k], \n                                         L[i][j - 1][k]), \n                                     L[i][j][k-1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122519,
      "stdout": "",
      "stderr": "/tmp/tmp01jyc3lm.d(14): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmp01jyc3lm.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmp01jyc3lm.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmp01jyc3lm.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmp01jyc3lm.d(14): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp01jyc3lm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length; \n\tint n = Y.length; \n\tint o = Z.length; \n\t\n\tint[][][] L = new int[m+1][n+1][o+1]; \n\t\n\tfor (int i=0; i<=m; i++) \n\t{ \n\t\tfor (int j=0; j<=n; j++) \n\t\t{ \n\t\t\tfor (int k=0; k<=o; k++) \n\t\t\t{ \n\t\t\t\tif (i == 0 || j == 0||k==0) \n\t\t\t\t\tL[i][j][k] = 0; \n\t\t\t\telse if (X[i-1] == Y[j-1] && X[i-1]==Z[k-1]) \n\t\t\t\t\tL[i][j][k] = L[i-1][j-1][k-1] + 1; \n\t\t\t\telse\n\t\t\t\t\tL[i][j][k] = max(L[i-1][j][k], \n\t\t\t\t\t\t\t\t\tL[i][j-1][k], \n\t\t\t\t\t\t\t\t\tL[i][j][k-1]); \n\t\t\t} \n\t\t} \n\t} \n\treturn L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122519,
      "stdout": "",
      "stderr": "/tmp/tmpo5_us44i.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpo5_us44i.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpo5_us44i.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpo5_us44i.d(14): Error: variable `m` cannot be read at compile time\n/tmp/tmpo5_us44i.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo5_us44i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length; \n\tint n = Y.length; \n\tint o = Z.length; \n\t\n\tint[][][] L = new int[m + 1][n + 1][o + 1]; \n\t\n\tfor (int i = 0; i <= m; i++) \n\t{ \n\t\tfor (int j = 0; j <= n; j++) \n\t\t{ \n\t\t\tfor (int k = 0; k <= o; k++) \n\t\t\t{ \n\t\t\t\tif (i == 0 || j == 0 || k == 0) \n\t\t\t\t\tL[i][j][k] = 0; \n\t\t\t\telse if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n\t\t\t\t\tL[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n\t\t\t\telse\n\t\t\t\t\tL[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]); \n\t\t\t} \n\t\t} \n\t} \n\t\n\treturn L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122519,
      "stdout": "",
      "stderr": "/tmp/tmpi19vyn7x.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpi19vyn7x.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpi19vyn7x.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpi19vyn7x.d(14): Error: variable `m` cannot be read at compile time\n/tmp/tmpi19vyn7x.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi19vyn7x.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length; \n\tint n = Y.length; \n\tint o = Z.length; \n\t\n\tint[][][] L = new int[m + 1][n + 1][o + 1]; \n\t\n\tfor (int i = 0; i <= m; i++) \n\t{ \n\t\tfor (int j = 0; j <= n; j++) \n\t\t{ \n\t\t\tfor (int k = 0; k <= o; k++) \n\t\t\t{ \n\t\t\t\tif (i == 0 || j == 0 || k == 0) \n\t\t\t\t\tL[i][j][k] = 0; \n\t\t\t\telse if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n\t\t\t\t\tL[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n\t\t\t\telse\n\t\t\t\t\tL[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]); \n\t\t\t} \n\t\t} \n\t} \n\t\n\treturn L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122519,
      "stdout": "",
      "stderr": "/tmp/tmpi19vyn7x.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpi19vyn7x.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpi19vyn7x.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpi19vyn7x.d(14): Error: variable `m` cannot be read at compile time\n/tmp/tmpi19vyn7x.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi19vyn7x.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length; \n\tint n = Y.length; \n\tint o = Z.length; \n\tint[][][] L = new int[m + 1][n + 1][o + 1]; \n\tfor (int i = 0; i <= m; i++) \n\t{ \n\t\tfor (int j = 0; j <= n; j++) \n\t\t{ \n\t\t\tfor (int k = 0; k <= o; k++) \n\t\t\t{ \n\t\t\t\tif (i == 0 || j == 0 || k == 0) \n\t\t\t\t\tL[i][j][k] = 0; \n\t\t\t\telse if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n\t\t\t\t\tL[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n\t\t\t\telse\n\t\t\t\t\tL[i][j][k] = max(L[i - 1][j][k], \n\t\t\t\t\t\t\t\t\tL[i][j - 1][k], \n\t\t\t\t\t\t\t\t\tL[i][j][k - 1]); \n\t\t\t} \n\t\t} \n\t} \n\treturn L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122518,
      "stdout": "",
      "stderr": "/tmp/tmpp504b2_t.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpp504b2_t.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpp504b2_t.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpp504b2_t.d(13): Error: variable `m` cannot be read at compile time\n/tmp/tmpp504b2_t.d(25): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp504b2_t.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length; \n\tint n = Y.length; \n\tint o = Z.length; \n\t\n\tint[][][] L = new int[m+1][n+1][o+1]; \n\t\n\tfor (int i = 0; i <= m; i++) \n\t{ \n\t\tfor (int j = 0; j <= n; j++) \n\t\t{ \n\t\t\tfor (int k = 0; k <= o; k++) \n\t\t\t{ \n\t\t\t\tif (i == 0 || j == 0||k==0) \n\t\t\t\t\tL[i][j][k] = 0; \n\t\t\t\telse if (X[i-1] == Y[j-1] && X[i-1]==Z[k-1]) \n\t\t\t\t\tL[i][j][k] = L[i-1][j-1][k-1] + 1; \n\t\t\t\telse\n\t\t\t\t\tL[i][j][k] = max(L[i-1][j][k], \n\t\t\t\t\t\t\t\t\tL[i][j-1][k], \n\t\t\t\t\t\t\t\t\tL[i][j][k-1]); \n\t\t\t} \n\t\t} \n\t} \n\treturn L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122518,
      "stdout": "",
      "stderr": "/tmp/tmp3rqqgtt2.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmp3rqqgtt2.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmp3rqqgtt2.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmp3rqqgtt2.d(14): Error: variable `m` cannot be read at compile time\n/tmp/tmp3rqqgtt2.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3rqqgtt2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n  \n    int L[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) \n    { \n        for (int j = 0; j <= n; j++) \n        { \n            for (int k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(L[i - 1][j][k], \n                                     L[i][j - 1][k], \n                                     L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517282,
      "stdout": "",
      "stderr": "/tmp/tmp5b29kpaw.d(14): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmp5b29kpaw.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmp5b29kpaw.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmp5b29kpaw.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmp5b29kpaw.d(14): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5b29kpaw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length; \n\tint n = Y.length; \n\tint o = Z.length; \n\t\n\tint[][][] L = new int[m+1][n+1][o+1]; \n\t\n\tfor (int i = 0; i <= m; i++) \n\t{ \n\t\tfor (int j = 0; j <= n; j++) \n\t\t{ \n\t\t\tfor (int k = 0; k <= o; k++) \n\t\t\t{ \n\t\t\t\tif (i == 0 || j == 0||k==0) \n\t\t\t\t\tL[i][j][k] = 0; \n\t\t\t\telse if (X[i-1] == Y[j-1] && X[i-1]==Z[k-1]) \n\t\t\t\t\tL[i][j][k] = L[i-1][j-1][k-1] + 1; \n\t\t\t\telse\n\t\t\t\t\tL[i][j][k] = max(L[i-1][j][k], \n\t\t\t\t\t\t\t\t\tL[i][j-1][k], \n\t\t\t\t\t\t\t\t\tL[i][j][k-1]); \n\t\t\t} \n\t\t} \n\t} \n\treturn L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122518,
      "stdout": "",
      "stderr": "/tmp/tmp3rqqgtt2.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmp3rqqgtt2.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmp3rqqgtt2.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmp3rqqgtt2.d(14): Error: variable `m` cannot be read at compile time\n/tmp/tmp3rqqgtt2.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3rqqgtt2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length; \n\tint n = Y.length; \n\tint o = Z.length; \n\tint[][][] L = new int[m + 1][n + 1][o + 1]; \n\tfor (int i = 0; i <= m; i++) \n\t{ \n\t\tfor (int j = 0; j <= n; j++) \n\t\t{ \n\t\t\tfor (int k = 0; k <= o; k++) \n\t\t\t{ \n\t\t\t\tif (i == 0 || j == 0 || k == 0) \n\t\t\t\t\tL[i][j][k] = 0; \n\t\t\t\telse if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n\t\t\t\t\tL[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n\t\t\t\telse\n\t\t\t\t\tL[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]); \n\t\t\t} \n\t\t} \n\t} \n\treturn L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122518,
      "stdout": "",
      "stderr": "/tmp/tmpe6ss3nvo.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpe6ss3nvo.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpe6ss3nvo.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpe6ss3nvo.d(13): Error: variable `m` cannot be read at compile time\n/tmp/tmpe6ss3nvo.d(25): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe6ss3nvo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n  \n    int[][][] L = new int[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) \n    { \n        for (int j = 0; j <= n; j++) \n        { \n            for (int k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(max(L[i - 1][j][k], \n                                    L[i][j - 1][k]), \n                                    L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122518,
      "stdout": "",
      "stderr": "/tmp/tmpxa_opoyh.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpxa_opoyh.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpxa_opoyh.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpxa_opoyh.d(14): Error: variable `m` cannot be read at compile time\n/tmp/tmpxa_opoyh.d(29): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxa_opoyh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n  \n    int L[m+1][n+1][o+1]; \n  \n    for (int i=0; i<=m; i++) \n    { \n        for (int j=0; j<=n; j++) \n        { \n            for (int k=0; k<=o; k++) \n            { \n                if (i == 0 || j == 0||k==0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i-1] == Y[j-1] && X[i-1]==Z[k-1]) \n                    L[i][j][k] = L[i-1][j-1][k-1] + 1; \n  \n                else\n                    L[i][j][k] = max(max(L[i-1][j][k], \n                                         L[i][j-1][k]), \n                                     L[i][j][k-1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122518,
      "stdout": "",
      "stderr": "/tmp/tmpqt1_54ci.d(14): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmpqt1_54ci.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpqt1_54ci.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpqt1_54ci.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpqt1_54ci.d(14): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqt1_54ci.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n  \n    int[][][] L = new int[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) \n    { \n        for (int j = 0; j <= n; j++) \n        { \n            for (int k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(L[i - 1][j][k], \n                                     L[i][j - 1][k], \n                                     L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122519,
      "stdout": "",
      "stderr": "/tmp/tmpqmt4mop2.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpqmt4mop2.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpqmt4mop2.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpqmt4mop2.d(14): Error: variable `m` cannot be read at compile time\n/tmp/tmpqmt4mop2.d(29): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqmt4mop2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n  \n    int L[m + 1][n + 1][o + 1]; \n  \n    /* Following steps build L[m+1][n+1][o+1] in bottom up fashion. Note \n       that L[i][j][k] contains length of LCS of X[0..i-1] and Y[0..j-1] \n       and Z[0..k-1]*/\n    for (int i = 0; i <= m; i++) { \n        for (int j = 0; j <= n; j++) { \n            for (int k = 0; k <= o; k++) { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(L[i - 1][j][k], \n                                     L[i][j - 1][k], \n                                     L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    /* L[m][n][o] contains length of LCS for X[0..n-1] and \n       Y[0..m-1] and Z[0..o-1]*/\n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122518,
      "stdout": "",
      "stderr": "/tmp/tmphsezy6u3.d(14): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmphsezy6u3.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmphsezy6u3.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmphsezy6u3.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmphsezy6u3.d(14): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphsezy6u3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n  \n    int L[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) \n    { \n        for (int j = 0; j <= n; j++) \n        { \n            for (int k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(L[i - 1][j][k], \n                                     L[i][j - 1][k], \n                                     L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517282,
      "stdout": "",
      "stderr": "/tmp/tmp5b29kpaw.d(14): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmp5b29kpaw.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmp5b29kpaw.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmp5b29kpaw.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmp5b29kpaw.d(14): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5b29kpaw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length; \n\tint n = Y.length; \n\tint o = Z.length; \n\tint L[m + 1][n + 1][o + 1]; \n\t\n\tfor (int i = 0; i <= m; i++) \n\t{ \n\t\tfor (int j = 0; j <= n; j++) \n\t\t{ \n\t\t\tfor (int k = 0; k <= o; k++) \n\t\t\t{ \n\t\t\t\tif (i == 0 || j == 0||k==0) \n\t\t\t\t\tL[i][j][k] = 0; \n\t\t\t\telse if (X[i - 1] == Y[j - 1] && X[i - 1]==Z[k - 1]) \n\t\t\t\t\tL[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n\t\t\t\telse\n\t\t\t\t\tL[i][j][k] = max(max(L[i - 1][j][k], \n\t\t\t\t\t\t\t\t\tL[i][j - 1][k]), \n\t\t\t\t\t\t\t\t\tL[i][j][k - 1]); \n\t\t\t} \n\t\t} \n\t} \n\treturn L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122518,
      "stdout": "",
      "stderr": "/tmp/tmp7m17vgav.d(13): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmp7m17vgav.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmp7m17vgav.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmp7m17vgav.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmp7m17vgav.d(13): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7m17vgav.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n  \n    int[][][] L = new int[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) { \n        for (int j = 0; j <= n; j++) { \n            for (int k = 0; k <= o; k++) { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122518,
      "stdout": "",
      "stderr": "/tmp/tmp366kkjvn.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmp366kkjvn.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmp366kkjvn.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmp366kkjvn.d(14): Error: variable `m` cannot be read at compile time\n/tmp/tmp366kkjvn.d(26): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp366kkjvn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length; \n\tint n = Y.length; \n\tint o = Z.length; \n\t\n\tint[][][] L = new int[m + 1][n + 1][o + 1]; \n\t\n\tfor (int i = 0; i <= m; i++) \n\t{ \n\t\tfor (int j = 0; j <= n; j++) \n\t\t{ \n\t\t\tfor (int k = 0; k <= o; k++) \n\t\t\t{ \n\t\t\t\tif (i == 0 || j == 0 || k == 0) \n\t\t\t\t\tL[i][j][k] = 0; \n\t\t\t\telse if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n\t\t\t\t\tL[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n\t\t\t\telse\n\t\t\t\t\tL[i][j][k] = max(max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]); \n\t\t\t} \n\t\t} \n\t} \n\t\n\treturn L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122518,
      "stdout": "",
      "stderr": "/tmp/tmp76fnvunx.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmp76fnvunx.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmp76fnvunx.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmp76fnvunx.d(14): Error: variable `m` cannot be read at compile time\n/tmp/tmp76fnvunx.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp76fnvunx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    long m = X.length; \n    long n = Y.length; \n    long o = Z.length; \n  \n    long L[][][] = new long[m + 1][n + 1][o + 1]; \n  \n    for (long i = 0; i <= m; i++) \n    { \n        for (long j = 0; j <= n; j++) \n        { \n            for (long k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(L[i - 1][j][k], \n                                     L[i][j - 1][k], \n                                     L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122518,
      "stdout": "",
      "stderr": "/tmp/tmpg1c6tmed.d(14): Deprecation: instead of C-style syntax, use D-style syntax `long[][][] L`\n/tmp/tmpg1c6tmed.d(14): Error: variable `m` cannot be read at compile time\n/tmp/tmpg1c6tmed.d(29): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg1c6tmed.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n  \n    // declaring 2D array to store the dp values \n    int[][][] L = new int[m + 1][n + 1][o + 1]; \n  \n    // filling the dp array in bottom-up manner \n    for (int i = 0; i <= m; i++) { \n        for (int j = 0; j <= n; j++) { \n            for (int k = 0; k <= o; k++) { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n                else\n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    // L[m][n][o] contains length of LCS for X[0..n-1], Y[0..m-1] and Z[0..o-1] \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122518,
      "stdout": "",
      "stderr": "/tmp/tmpvfrjzfdb.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpvfrjzfdb.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpvfrjzfdb.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpvfrjzfdb.d(15): Error: variable `m` cannot be read at compile time\n/tmp/tmpvfrjzfdb.d(26): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvfrjzfdb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n  \n    int[][][] L = new int[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) { \n        for (int j = 0; j <= n; j++) { \n            for (int k = 0; k <= o; k++) { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122518,
      "stdout": "",
      "stderr": "/tmp/tmp366kkjvn.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmp366kkjvn.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmp366kkjvn.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmp366kkjvn.d(14): Error: variable `m` cannot be read at compile time\n/tmp/tmp366kkjvn.d(26): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp366kkjvn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n    int L[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) { \n        for (int j = 0; j <= n; j++) { \n            for (int k = 0; k <= o; k++) { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(L[i - 1][j][k], \n                                     L[i][j - 1][k], \n                                     L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122518,
      "stdout": "",
      "stderr": "/tmp/tmp3sxgbc8e.d(13): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmp3sxgbc8e.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmp3sxgbc8e.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmp3sxgbc8e.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmp3sxgbc8e.d(13): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3sxgbc8e.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n    int[][][] L = new int[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) \n    { \n        for (int j = 0; j <= n; j++) \n        { \n            for (int k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n                else\n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]); \n            } \n        } \n    } \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122518,
      "stdout": "",
      "stderr": "/tmp/tmpmwqd5o66.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpmwqd5o66.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpmwqd5o66.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpmwqd5o66.d(13): Error: variable `m` cannot be read at compile time\n/tmp/tmpmwqd5o66.d(26): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmwqd5o66.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n  \n    int L[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) \n    { \n        for (int j = 0; j <= n; j++) \n        { \n            for (int k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0||k==0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1]==Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k-1] + 1; \n  \n                else\n                    L[i][j][k] = max(max(L[i - 1][j][k], \n                                         L[i][j - 1][k]), \n                                     L[i][j][k-1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122519,
      "stdout": "",
      "stderr": "/tmp/tmp01jyc3lm.d(14): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmp01jyc3lm.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmp01jyc3lm.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmp01jyc3lm.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmp01jyc3lm.d(14): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp01jyc3lm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n    int L[m + 1][n + 1][o + 1]; \n    for (int i = 0; i <= m; i++) \n    { \n        for (int j = 0; j <= n; j++) \n        { \n            for (int k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0||k==0) \n                    L[i][j][k] = 0; \n                else if (X[i - 1] == Y[j - 1] && X[i - 1]==Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k-1] + 1; \n                else\n                    L[i][j][k] = max(max(L[i - 1][j][k], \n                                         L[i][j - 1][k]), \n                                     L[i][j][k-1]); \n            } \n        } \n    } \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122518,
      "stdout": "",
      "stderr": "/tmp/tmptqikyl4r.d(13): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmptqikyl4r.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmptqikyl4r.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmptqikyl4r.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmptqikyl4r.d(13): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptqikyl4r.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length; \n\tint n = Y.length; \n\tint o = Z.length; \n\t\n\tint L[m + 1][n + 1][o + 1]; \n\t\n\tfor (int i = 0; i <= m; i++) \n\t{ \n\t\tfor (int j = 0; j <= n; j++) \n\t\t{ \n\t\t\tfor (int k = 0; k <= o; k++) \n\t\t\t{ \n\t\t\t\tif (i == 0 || j == 0||k==0) \n\t\t\t\t\tL[i][j][k] = 0; \n\t\t\t\t\n\t\t\t\telse if (X[i - 1] == Y[j - 1] && X[i - 1]==Z[k - 1]) \n\t\t\t\t\tL[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n\t\t\t\t\n\t\t\t\telse\n\t\t\t\t\tL[i][j][k] = max(max(L[i - 1][j][k], \n\t\t\t\t\t\t\t\t\tL[i][j - 1][k]), \n\t\t\t\t\t\t\t\t\tL[i][j][k - 1]); \n\t\t\t} \n\t\t} \n\t} \n\t\n\treturn L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122518,
      "stdout": "",
      "stderr": "/tmp/tmp5mvc4ae4.d(14): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmp5mvc4ae4.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmp5mvc4ae4.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmp5mvc4ae4.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmp5mvc4ae4.d(14): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5mvc4ae4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tlong m = X.length; \n\tlong n = Y.length; \n\tlong o = Z.length; \n\tlong L[m + 1][n + 1][o + 1]; \n\t\n\tfor (long i = 0; i <= m; i++) \n\t{ \n\t\tfor (long j = 0; j <= n; j++) \n\t\t{ \n\t\t\tfor (long k = 0; k <= o; k++) \n\t\t\t{ \n\t\t\t\tif (i == 0 || j == 0||k==0) \n\t\t\t\t\tL[i][j][k] = 0; \n\t\t\t\telse if (X[i - 1] == Y[j - 1] && X[i - 1]==Z[k - 1]) \n\t\t\t\t\tL[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n\t\t\t\telse\n\t\t\t\t\tL[i][j][k] = max(max(L[i - 1][j][k], \n\t\t\t\t\t\t\t\t\tL[i][j - 1][k]), \n\t\t\t\t\t\t\t\t\tL[i][j][k - 1]); \n\t\t\t} \n\t\t} \n\t} \n\treturn L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122519,
      "stdout": "",
      "stderr": "/tmp/tmpmcztmiic.d(13): Deprecation: instead of C-style syntax, use D-style syntax `long[o + 1][n + 1][m + 1] L`\n/tmp/tmpmcztmiic.d(13): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmcztmiic.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length; \n\tint n = Y.length; \n\tint o = Z.length; \n\t\n\tint[][][] L = new int[m+1][n+1][o+1]; \n\t\n\tfor (int i=0; i<=m; i++) \n\t{ \n\t\tfor (int j=0; j<=n; j++) \n\t\t{ \n\t\t\tfor (int k=0; k<=o; k++) \n\t\t\t{ \n\t\t\t\tif (i == 0 || j == 0||k==0) \n\t\t\t\t\tL[i][j][k] = 0; \n\t\t\t\telse if (X[i-1] == Y[j-1] && X[i-1]==Z[k-1]) \n\t\t\t\t\tL[i][j][k] = L[i-1][j-1][k-1] + 1; \n\t\t\t\telse\n\t\t\t\t\tL[i][j][k] = max(L[i-1][j][k], \n\t\t\t\t\t\t\t\t\tL[i][j-1][k], \n\t\t\t\t\t\t\t\t\tL[i][j][k-1]); \n\t\t\t} \n\t\t} \n\t} \n\treturn L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122519,
      "stdout": "",
      "stderr": "/tmp/tmpo5_us44i.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpo5_us44i.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpo5_us44i.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpo5_us44i.d(14): Error: variable `m` cannot be read at compile time\n/tmp/tmpo5_us44i.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo5_us44i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n  \n    int[][][] L = new int[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) \n    { \n        for (int j = 0; j <= n; j++) \n        { \n            for (int k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(L[i - 1][j][k], \n                                     L[i][j - 1][k], \n                                     L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122519,
      "stdout": "",
      "stderr": "/tmp/tmpqmt4mop2.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpqmt4mop2.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpqmt4mop2.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpqmt4mop2.d(14): Error: variable `m` cannot be read at compile time\n/tmp/tmpqmt4mop2.d(29): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqmt4mop2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n  \n    int L[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) \n    { \n        for (int j = 0; j <= n; j++) \n        { \n            for (int k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(L[i - 1][j][k], \n                                     L[i][j - 1][k], \n                                     L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517282,
      "stdout": "",
      "stderr": "/tmp/tmp5b29kpaw.d(14): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmp5b29kpaw.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmp5b29kpaw.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmp5b29kpaw.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmp5b29kpaw.d(14): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5b29kpaw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n    int L[m + 1][n + 1][o + 1]; \n  \n    /* Following steps build L[m+1][n+1][o+1] in bottom up fashion. Note  \n       that L[i][j][k] contains length of LCS of X[0..i-1] and Y[0..j-1] \n       and Z[0..k-1]*/\n    for (int i = 0; i <= m; i++) \n    { \n        for (int j = 0; j <= n; j++) \n        { \n            for (int k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0||k==0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1]==Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(max(L[i - 1][j][k], \n                                         L[i][j - 1][k]), \n                                     L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    /* L[m][n][o] contains length of LCS for X[0..n-1] and  \n      Y[0..m-1] and Z[0..o-1]*/\n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122519,
      "stdout": "",
      "stderr": "/tmp/tmppnc5_0f5.d(13): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmppnc5_0f5.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmppnc5_0f5.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmppnc5_0f5.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmppnc5_0f5.d(13): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppnc5_0f5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length; \n\tint n = Y.length; \n\tint o = Z.length; \n\t\n\tint[][][] L = new int[m + 1][n + 1][o + 1]; \n\t\n\tfor (int i = 0; i <= m; i++) \n\t{ \n\t\tfor (int j = 0; j <= n; j++) \n\t\t{ \n\t\t\tfor (int k = 0; k <= o; k++) \n\t\t\t{ \n\t\t\t\tif (i == 0 || j == 0||k==0) \n\t\t\t\t\tL[i][j][k] = 0; \n\t\t\t\telse if (X[i - 1] == Y[j - 1] && X[i - 1]==Z[k - 1]) \n\t\t\t\t\tL[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n\t\t\t\telse\n\t\t\t\t\tL[i][j][k] = max(max(L[i - 1][j][k], \n\t\t\t\t\t\t\t\t\t\tL[i][j - 1][k]), \n\t\t\t\t\t\t\t\t\tL[i][j][k - 1]); \n\t\t\t} \n\t\t} \n\t} \n\treturn L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122519,
      "stdout": "",
      "stderr": "/tmp/tmpjc8xkn_y.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpjc8xkn_y.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpjc8xkn_y.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpjc8xkn_y.d(14): Error: variable `m` cannot be read at compile time\n/tmp/tmpjc8xkn_y.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjc8xkn_y.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length; \n\tint n = Y.length; \n\tint o = Z.length; \n\t\n\tint[][][] L = new int[m+1][n+1][o+1]; \n\t\n\tfor (int i=0; i<=m; i++) \n\t{ \n\t\tfor (int j=0; j<=n; j++) \n\t\t{ \n\t\t\tfor (int k=0; k<=o; k++) \n\t\t\t{ \n\t\t\t\tif (i == 0 || j == 0||k==0) \n\t\t\t\t\tL[i][j][k] = 0; \n\t\t\t\telse if (X[i-1] == Y[j-1] && X[i-1]==Z[k-1]) \n\t\t\t\t\tL[i][j][k] = L[i-1][j-1][k-1] + 1; \n\t\t\t\telse\n\t\t\t\t\tL[i][j][k] = max(L[i-1][j][k], L[i][j-1][k],L[i][j][k-1]); \n\t\t\t} \n\t\t} \n\t} \n\treturn L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122519,
      "stdout": "",
      "stderr": "/tmp/tmpneixystr.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpneixystr.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpneixystr.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpneixystr.d(14): Error: variable `m` cannot be read at compile time\n/tmp/tmpneixystr.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpneixystr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n  \n    int[][][] L = new int[m + 1][n + 1][o + 1]; \n  \n    /* Following steps build L[m+1][n+1][o+1] in bottom up fashion. Note \n       that L[i][j][k] contains length of LCS of X[0..i-1] and Y[0..j-1] \n       and Z[0..k-1]*/\n    for (int i = 0; i <= m; i++) \n    { \n        for (int j = 0; j <= n; j++) \n        { \n            for (int k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(L[i - 1][j][k], \n                                     L[i][j - 1][k], \n                                     L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    /* L[m][n][o] contains length of LCS for X[0..n-1] and \n       Y[0..m-1] and Z[0..o-1]*/\n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122519,
      "stdout": "",
      "stderr": "/tmp/tmp17o4ubta.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmp17o4ubta.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmp17o4ubta.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmp17o4ubta.d(14): Error: variable `m` cannot be read at compile time\n/tmp/tmp17o4ubta.d(32): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp17o4ubta.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n   int m = X.length; \n   int n = Y.length; \n   int o = Z.length; \n   int[][][] L = new int[m + 1][n + 1][o + 1]; \n   for (int i = 0; i <= m; i++) \n   { \n     for (int j = 0; j <= n; j++) \n     { \n       for (int k = 0; k <= o; k++) \n       { \n         if (i == 0 || j == 0||k==0) \n           L[i][j][k] = 0; \n   \n         else if (X[i - 1] == Y[j - 1] && X[i - 1]==Z[k - 1]) \n           L[i][j][k] = L[i - 1][j - 1][k-1] + 1; \n   \n         else\n           L[i][j][k] = max(L[i - 1][j][k], \n                        L[i][j - 1][k], \n                        L[i][j][k-1]); \n       } \n     } \n   } \n   return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122519,
      "stdout": "",
      "stderr": "/tmp/tmp1l7soq7r.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmp1l7soq7r.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmp1l7soq7r.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmp1l7soq7r.d(13): Error: variable `m` cannot be read at compile time\n/tmp/tmp1l7soq7r.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1l7soq7r.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length; \n\tint n = Y.length; \n\tint o = Z.length; \n\t\n\tint[][][] L = new int[m+1][n+1][o+1]; \n\t\n\tfor (int i=0; i<=m; i++) \n\t{ \n\t\tfor (int j=0; j<=n; j++) \n\t\t{ \n\t\t\tfor (int k=0; k<=o; k++) \n\t\t\t{ \n\t\t\t\tif (i == 0 || j == 0||k==0) \n\t\t\t\t\tL[i][j][k] = 0; \n\t\t\t\telse if (X[i-1] == Y[j-1] && X[i-1]==Z[k-1]) \n\t\t\t\t\tL[i][j][k] = L[i-1][j-1][k-1] + 1; \n\t\t\t\telse\n\t\t\t\t\tL[i][j][k] = max(L[i-1][j][k], L[i][j-1][k],L[i][j][k-1]); \n\t\t\t} \n\t\t} \n\t} \n\treturn L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122519,
      "stdout": "",
      "stderr": "/tmp/tmpneixystr.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpneixystr.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpneixystr.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpneixystr.d(14): Error: variable `m` cannot be read at compile time\n/tmp/tmpneixystr.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpneixystr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length; \n\tint n = Y.length; \n\tint o = Z.length; \n\t\n\tint[][][] L = new int[m + 1][n + 1][o + 1]; \n\t\n\tfor (int i = 0; i <= m; i++) \n\t{ \n\t\tfor (int j = 0; j <= n; j++) \n\t\t{ \n\t\t\tfor (int k = 0; k <= o; k++) \n\t\t\t{ \n\t\t\t\tif (i == 0 || j == 0||k==0) \n\t\t\t\t\tL[i][j][k] = 0; \n\t\t\t\telse if (X[i - 1] == Y[j - 1] && X[i - 1]==Z[k - 1]) \n\t\t\t\t\tL[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n\t\t\t\telse\n\t\t\t\t\tL[i][j][k] = max(max(L[i - 1][j][k], \n\t\t\t\t\t\t\t\t\t\tL[i][j - 1][k]), \n\t\t\t\t\t\t\t\t\tL[i][j][k - 1]); \n\t\t\t} \n\t\t} \n\t} \n\treturn L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122519,
      "stdout": "",
      "stderr": "/tmp/tmpjc8xkn_y.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpjc8xkn_y.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpjc8xkn_y.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpjc8xkn_y.d(14): Error: variable `m` cannot be read at compile time\n/tmp/tmpjc8xkn_y.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjc8xkn_y.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tlong m = X.length; \n\tlong n = Y.length; \n\tlong o = Z.length; \n\t\n\tlong L[m + 1][n + 1][o + 1]; \n\t\n\tfor (long i = 0; i <= m; i++) \n\t{ \n\t\tfor (long j = 0; j <= n; j++) \n\t\t{ \n\t\t\tfor (long k = 0; k <= o; k++) \n\t\t\t{ \n\t\t\t\tif (i == 0 || j == 0||k==0) \n\t\t\t\t\tL[i][j][k] = 0; \n\t\t\t\n\t\t\t\telse if (X[i - 1] == Y[j - 1] && X[i - 1]==Z[k - 1]) \n\t\t\t\t\tL[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n\t\t\t\n\t\t\t\telse\n\t\t\t\t\tL[i][j][k] = max(max(L[i - 1][j][k], \n\t\t\t\t\t\t\t\t\tL[i][j - 1][k]), \n\t\t\t\t\t\t\t\t\tL[i][j][k - 1]); \n\t\t\t} \n\t\t} \n\t} \n\t\n\treturn L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122519,
      "stdout": "",
      "stderr": "/tmp/tmpxm2bid_d.d(14): Deprecation: instead of C-style syntax, use D-style syntax `long[o + 1][n + 1][m + 1] L`\n/tmp/tmpxm2bid_d.d(14): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxm2bid_d.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n  \n    int L[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) \n    { \n        for (int j = 0; j <= n; j++) \n        { \n            for (int k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(max(L[i - 1][j][k], \n                                         L[i][j - 1][k]), \n                                     L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122519,
      "stdout": "",
      "stderr": "/tmp/tmp8xths3ki.d(14): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmp8xths3ki.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmp8xths3ki.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmp8xths3ki.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmp8xths3ki.d(14): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8xths3ki.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n  \n    int L[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) \n    { \n        for (int j = 0; j <= n; j++) \n        { \n            for (int k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(L[i - 1][j][k], max(L[i][j - 1][k], L[i][j][k - 1])); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122519,
      "stdout": "",
      "stderr": "/tmp/tmp8w0xz46y.d(14): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmp8w0xz46y.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmp8w0xz46y.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmp8w0xz46y.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmp8w0xz46y.d(14): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8w0xz46y.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length; \n\tint n = Y.length; \n\tint o = Z.length; \n\t\n\tint L[m + 1][n + 1][o + 1]; \n\t\n\tfor (int i = 0; i <= m; i++) \n\t{ \n\t\tfor (int j = 0; j <= n; j++) \n\t\t{ \n\t\t\tfor (int k = 0; k <= o; k++) \n\t\t\t{ \n\t\t\t\tif (i == 0 || j == 0||k==0) \n\t\t\t\t\tL[i][j][k] = 0; \n\t\t\t\telse if (X[i - 1] == Y[j - 1] && X[i - 1]==Z[k - 1]) \n\t\t\t\t\tL[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n\t\t\t\telse\n\t\t\t\t\tL[i][j][k] = max(max(L[i - 1][j][k], \n\t\t\t\t\t\t\t\t\tL[i][j - 1][k]), \n\t\t\t\t\t\t\t\t\tL[i][j][k - 1]); \n\t\t\t} \n\t\t} \n\t} \n\treturn L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122519,
      "stdout": "",
      "stderr": "/tmp/tmpilwbk9pr.d(14): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmpilwbk9pr.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpilwbk9pr.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpilwbk9pr.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpilwbk9pr.d(14): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpilwbk9pr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n  \n    int L[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) \n    { \n        for (int j = 0; j <= n; j++) \n        { \n            for (int k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(max(L[i - 1][j][k], \n                                        L[i][j - 1][k]), \n                                    L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122519,
      "stdout": "",
      "stderr": "/tmp/tmp7lpqlbt0.d(14): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmp7lpqlbt0.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmp7lpqlbt0.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmp7lpqlbt0.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmp7lpqlbt0.d(14): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7lpqlbt0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length; \n\tint n = Y.length; \n\tint o = Z.length; \n\t\n\tint L[m+1][n+1][o+1]; \n\t\n\tfor (int i=0; i<=m; i++) \n\t{ \n\t\tfor (int j=0; j<=n; j++) \n\t\t{ \n\t\t\tfor (int k=0; k<=o; k++) \n\t\t\t{ \n\t\t\t\tif (i == 0 || j == 0||k==0) \n\t\t\t\t\tL[i][j][k] = 0; \n\t\t\t\telse if (X[i-1] == Y[j-1] && X[i-1]==Z[k-1]) \n\t\t\t\t\tL[i][j][k] = L[i-1][j-1][k-1] + 1; \n\t\t\t\telse\n\t\t\t\t\tL[i][j][k] = max(max(L[i-1][j][k], \n\t\t\t\t\t\t\t\t\t\tL[i][j-1][k]), \n\t\t\t\t\t\t\t\t\tL[i][j][k-1]); \n\t\t\t} \n\t\t} \n\t} \n\t\n\treturn L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122519,
      "stdout": "",
      "stderr": "/tmp/tmp3d0shvg3.d(14): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmp3d0shvg3.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmp3d0shvg3.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmp3d0shvg3.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmp3d0shvg3.d(14): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3d0shvg3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n  \n    int[][][] L = new int[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) { \n        for (int j = 0; j <= n; j++) { \n            for (int k = 0; k <= o; k++) { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && \n                         X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(L[i - 1][j][k], \n                                     L[i][j - 1][k], \n                                     L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122519,
      "stdout": "",
      "stderr": "/tmp/tmpwsuivsoh.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpwsuivsoh.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpwsuivsoh.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpwsuivsoh.d(14): Error: variable `m` cannot be read at compile time\n/tmp/tmpwsuivsoh.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwsuivsoh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length; \n\tint n = Y.length; \n\tint o = Z.length; \n\t\n\tint[][][] L = new int[m+1][n+1][o+1]; \n\t\n\tfor (int i = 0; i <= m; i++) \n\t{ \n\t\tfor (int j = 0; j <= n; j++) \n\t\t{ \n\t\t\tfor (int k = 0; k <= o; k++) \n\t\t\t{ \n\t\t\t\tif (i == 0 || j == 0||k==0) \n\t\t\t\t\tL[i][j][k] = 0; \n\t\t\t\telse if (X[i-1] == Y[j-1] && X[i-1]==Z[k-1]) \n\t\t\t\t\tL[i][j][k] = L[i-1][j-1][k-1] + 1; \n\t\t\t\telse\n\t\t\t\t\tL[i][j][k] = max(L[i-1][j][k], \n\t\t\t\t\t\t\t\t\tL[i][j-1][k], \n\t\t\t\t\t\t\t\t\tL[i][j][k-1]); \n\t\t\t} \n\t\t} \n\t} \n\treturn L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122518,
      "stdout": "",
      "stderr": "/tmp/tmp3rqqgtt2.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmp3rqqgtt2.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmp3rqqgtt2.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmp3rqqgtt2.d(14): Error: variable `m` cannot be read at compile time\n/tmp/tmp3rqqgtt2.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3rqqgtt2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n  \n    int[][][] L = new int[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) { \n        for (int j = 0; j <= n; j++) { \n            for (int k = 0; k <= o; k++) { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122518,
      "stdout": "",
      "stderr": "/tmp/tmp366kkjvn.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmp366kkjvn.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmp366kkjvn.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmp366kkjvn.d(14): Error: variable `m` cannot be read at compile time\n/tmp/tmp366kkjvn.d(26): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp366kkjvn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    size_t m = X.length(); \n    size_t n = Y.length(); \n    size_t o = Z.length(); \n  \n    // Create a table to store lengths of longest common  \n    // subsequence of substring X[0..i-1], Y[0..j-1] and Z[0..k-1] \n    size_t L[m + 1][n + 1][o + 1]; \n  \n    // Fill the table \n    for (size_t i = 0; i <= m; i++) \n    { \n        for (size_t j = 0; j <= n; j++) \n        { \n            for (size_t k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(L[i - 1][j][k], \n                                     max(L[i][j - 1][k], \n                                         L[i][j][k - 1])); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122519,
      "stdout": "",
      "stderr": "/tmp/tmpgs03bh2q.d(16): Deprecation: instead of C-style syntax, use D-style syntax `size_t[o + 1][n + 1][m + 1] L`\n/tmp/tmpgs03bh2q.d(10): Error: no property `length` for type `string`\n/tmp/tmpgs03bh2q.d(11): Error: no property `length` for type `string`\n/tmp/tmpgs03bh2q.d(12): Error: no property `length` for type `string`\n/tmp/tmpgs03bh2q.d(16): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgs03bh2q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length; \n\tint n = Y.length; \n\tint o = Z.length; \n\t\n\tint[][][] L = new int[m+1][n+1][o+1]; \n\t\n\tfor (int i=0; i<=m; i++) \n\t{ \n\t\tfor (int j=0; j<=n; j++) \n\t\t{ \n\t\t\tfor (int k=0; k<=o; k++) \n\t\t\t{ \n\t\t\t\tif (i == 0 || j == 0||k==0) \n\t\t\t\t\tL[i][j][k] = 0; \n\t\t\t\telse if (X[i-1] == Y[j-1] && X[i-1]==Z[k-1]) \n\t\t\t\t\tL[i][j][k] = L[i-1][j-1][k-1] + 1; \n\t\t\t\telse\n\t\t\t\t\tL[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1]); \n\t\t\t} \n\t\t} \n\t} \n\treturn L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517282,
      "stdout": "",
      "stderr": "/tmp/tmp7t9dpcr2.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmp7t9dpcr2.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmp7t9dpcr2.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmp7t9dpcr2.d(14): Error: variable `m` cannot be read at compile time\n/tmp/tmp7t9dpcr2.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7t9dpcr2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n  \n    int L[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) \n    { \n        for (int j = 0; j <= n; j++) \n        { \n            for (int k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(L[i - 1][j][k], \n                                     L[i][j - 1][k], \n                                     L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517282,
      "stdout": "",
      "stderr": "/tmp/tmp5b29kpaw.d(14): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmp5b29kpaw.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmp5b29kpaw.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmp5b29kpaw.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmp5b29kpaw.d(14): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5b29kpaw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length; \n\tint n = Y.length; \n\tint o = Z.length; \n\t\n\tint L[m + 1][n + 1][o + 1]; \n\t\n\tfor (int i = 0; i <= m; i++) \n\t{ \n\t\tfor (int j = 0; j <= n; j++) \n\t\t{ \n\t\t\tfor (int k = 0; k <= o; k++) \n\t\t\t{ \n\t\t\t\tif (i == 0 || j == 0||k==0) \n\t\t\t\t\tL[i][j][k] = 0; \n\t\t\t\telse if (X[i - 1] == Y[j - 1] && X[i - 1]==Z[k - 1]) \n\t\t\t\t\tL[i][j][k] = L[i - 1][j - 1][k-1] + 1; \n\t\t\t\telse\n\t\t\t\t\tL[i][j][k] = max(max(L[i - 1][j][k], \n\t\t\t\t\t\t\t\t\t\tL[i][j - 1][k]), \n\t\t\t\t\t\t\t\t\tL[i][j][k-1]); \n\t\t\t} \n\t\t} \n\t} \n\treturn L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122519,
      "stdout": "",
      "stderr": "/tmp/tmpmckz17bm.d(14): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmpmckz17bm.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpmckz17bm.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpmckz17bm.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpmckz17bm.d(14): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmckz17bm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n  \n    int L[m+1][n+1][o+1]; \n  \n    /* Following steps build L[m+1][n+1][o+1] in bottom up fashion. Note \n       that L[i][j][k] contains length of LCS of X[0..i-1] and Y[0..j-1] \n       and Z[0..k-1] */\n    for (int i=0; i<=m; i++) \n    { \n        for (int j=0; j<=n; j++) \n        { \n            for (int k=0; k<=o; k++) \n            { \n                if (i == 0 || j == 0||k==0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i-1] == Y[j-1] && X[i-1]==Z[k-1]) \n                    L[i][j][k] = L[i-1][j-1][k-1] + 1; \n  \n                else\n                    L[i][j][k] = max(max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1]); \n            } \n        } \n    } \n  \n    /* L[m][n][o] contains length of LCS for X[0..n-1] and Y[0..m-1] and Z[0..o-1]*/\n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122519,
      "stdout": "",
      "stderr": "/tmp/tmpuzjks0re.d(14): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmpuzjks0re.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpuzjks0re.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpuzjks0re.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpuzjks0re.d(14): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuzjks0re.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length; \n\tint n = Y.length; \n\tint o = Z.length; \n\tint L[m + 1][n + 1][o + 1]; \n\tfor (int i = 0; i <= m; i++) \n\t{ \n\t\tfor (int j = 0; j <= n; j++) \n\t\t{ \n\t\t\tfor (int k = 0; k <= o; k++) \n\t\t\t{ \n\t\t\t\tif (i == 0 || j == 0||k==0) \n\t\t\t\t\tL[i][j][k] = 0; \n\t\t\t\telse if (X[i - 1] == Y[j - 1] && X[i - 1]==Z[k - 1]) \n\t\t\t\t\tL[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n\t\t\t\telse\n\t\t\t\t\tL[i][j][k] = max(max(L[i - 1][j][k], \n\t\t\t\t\t\t\t\t\t\tL[i][j - 1][k]), \n\t\t\t\t\t\t\t\t\tL[i][j][k - 1]); \n\t\t\t} \n\t\t} \n\t} \n\treturn L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122519,
      "stdout": "",
      "stderr": "/tmp/tmpixdzute9.d(13): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmpixdzute9.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpixdzute9.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpixdzute9.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpixdzute9.d(13): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpixdzute9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n    int[][][] L = new int[m + 1][n + 1][o + 1]; \n  \n    /* Following steps build L[m+1][n+1][o+1] in bottom up fashion. Note  \n         that L[i][j][k] contains length of LCS of X[0..i-1] and Y[0..j-1] \n         and Z[0..k-1]*/\n    for (int i = 0; i <= m; i++) \n    { \n        for (int j = 0; j <= n; j++) \n        { \n            for (int k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    /* L[m][n][o] contains length of LCS for X[0..n-1] and Y[0..m-1] and Z[0..o-1]*/\n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122519,
      "stdout": "",
      "stderr": "/tmp/tmpvn1f2qss.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpvn1f2qss.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpvn1f2qss.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpvn1f2qss.d(13): Error: variable `m` cannot be read at compile time\n/tmp/tmpvn1f2qss.d(31): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvn1f2qss.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n  \n    int[][][] L = new int[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) { \n        for (int j = 0; j <= n; j++) { \n            for (int k = 0; k <= o; k++) { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(L[i - 1][j][k], \n                                     L[i][j - 1][k], \n                                     L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122519,
      "stdout": "",
      "stderr": "/tmp/tmp9srsqq4e.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmp9srsqq4e.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmp9srsqq4e.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmp9srsqq4e.d(14): Error: variable `m` cannot be read at compile time\n/tmp/tmp9srsqq4e.d(26): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9srsqq4e.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n  \n    int L[m + 1][n + 1][o + 1]; \n  \n    /* Following steps build L[m+1][n+1][o+1] in bottom up fashion. Note  \n       that L[i][j][k] contains length of LCS of X[0..i-1] and Y[0..j-1] \n       and Z[0..k-1]*/\n    for (int i = 0; i <= m; i++) \n    { \n        for (int j = 0; j <= n; j++) \n        { \n            for (int k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0||k==0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1]==Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k-1] + 1; \n  \n                else\n                    L[i][j][k] = max(max(L[i - 1][j][k], \n                                         L[i][j - 1][k]), \n                                     L[i][j][k-1]); \n            } \n        } \n    } \n  \n    /* L[m][n][o] contains length of LCS for X[0..n-1] and Y[0..m-1] and Z[0..o-1]*/\n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122519,
      "stdout": "",
      "stderr": "/tmp/tmpqq0vsq3y.d(14): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmpqq0vsq3y.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpqq0vsq3y.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpqq0vsq3y.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpqq0vsq3y.d(14): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqq0vsq3y.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n    int[][][] L = new int[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) \n    { \n        for (int j = 0; j <= n; j++) \n        { \n            for (int k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n                else\n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122519,
      "stdout": "",
      "stderr": "/tmp/tmpmllyng6m.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpmllyng6m.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpmllyng6m.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpmllyng6m.d(13): Error: variable `m` cannot be read at compile time\n/tmp/tmpmllyng6m.d(26): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmllyng6m.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n  \n    int[][][] L = new int[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) { \n        for (int j = 0; j <= n; j++) { \n            for (int k = 0; k <= o; k++) { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122518,
      "stdout": "",
      "stderr": "/tmp/tmp366kkjvn.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmp366kkjvn.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmp366kkjvn.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmp366kkjvn.d(14): Error: variable `m` cannot be read at compile time\n/tmp/tmp366kkjvn.d(26): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp366kkjvn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length; \n\tint n = Y.length; \n\tint o = Z.length; \n\t\n\tint[][][] L = new int[m + 1][n + 1][o + 1]; \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517282,
      "stdout": "",
      "stderr": "/tmp/tmp4gkfzs0q.d(15): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4gkfzs0q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n  \n    int[][][] L = new int[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) { \n        for (int j = 0; j <= n; j++) { \n            for (int k = 0; k <= o; k++) { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122518,
      "stdout": "",
      "stderr": "/tmp/tmp366kkjvn.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmp366kkjvn.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmp366kkjvn.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmp366kkjvn.d(14): Error: variable `m` cannot be read at compile time\n/tmp/tmp366kkjvn.d(26): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp366kkjvn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length; \n\tint n = Y.length; \n\tint o = Z.length; \n\tint[][][] L = new int[m + 1][n + 1][o + 1]; \n\tfor (int i = 0; i <= m; i++) \n\t{ \n\t\tfor (int j = 0; j <= n; j++) \n\t\t{ \n\t\t\tfor (int k = 0; k <= o; k++) \n\t\t\t{ \n\t\t\t\tif (i == 0 || j == 0 || k == 0) \n\t\t\t\t\tL[i][j][k] = 0; \n\t\t\t\telse if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n\t\t\t\t\tL[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n\t\t\t\telse\n\t\t\t\t\tL[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]); \n\t\t\t} \n\t\t} \n\t} \n\treturn L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122518,
      "stdout": "",
      "stderr": "/tmp/tmpe6ss3nvo.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpe6ss3nvo.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpe6ss3nvo.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpe6ss3nvo.d(13): Error: variable `m` cannot be read at compile time\n/tmp/tmpe6ss3nvo.d(25): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe6ss3nvo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length; \n\tint n = Y.length; \n\tint o = Z.length; \n\t\n\tint[][][] L = new int[m+1][n+1][o+1]; \n\t\n\tfor (int i = 0; i <= m; i++) \n\t{ \n\t\tfor (int j = 0; j <= n; j++) \n\t\t{ \n\t\t\tfor (int k = 0; k <= o; k++) \n\t\t\t{ \n\t\t\t\tif (i == 0 || j == 0||k==0) \n\t\t\t\t\tL[i][j][k] = 0; \n\t\t\t\telse if (X[i-1] == Y[j-1] && X[i-1]==Z[k-1]) \n\t\t\t\t\tL[i][j][k] = L[i-1][j-1][k-1] + 1; \n\t\t\t\telse\n\t\t\t\t\tL[i][j][k] = max(L[i-1][j][k], \n\t\t\t\t\t\t\t\t\tL[i][j-1][k], \n\t\t\t\t\t\t\t\t\tL[i][j][k-1]); \n\t\t\t} \n\t\t} \n\t} \n\treturn L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122518,
      "stdout": "",
      "stderr": "/tmp/tmp3rqqgtt2.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmp3rqqgtt2.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmp3rqqgtt2.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmp3rqqgtt2.d(14): Error: variable `m` cannot be read at compile time\n/tmp/tmp3rqqgtt2.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3rqqgtt2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tlong m = X.length; \n\tlong n = Y.length; \n\tlong o = Z.length; \n\t\n\tlong L[][][] = new long[m + 1][n + 1][o + 1]; \n\t\n\tfor (long i = 0; i <= m; i++) \n\t{ \n\t\tfor (long j = 0; j <= n; j++) \n\t\t{ \n\t\t\tfor (long k = 0; k <= o; k++) \n\t\t\t{ \n\t\t\t\tif (i == 0 || j == 0||k==0) \n\t\t\t\t\tL[i][j][k] = 0; \n\t\t\t\telse if (X[i - 1] == Y[j - 1] && X[i - 1]==Z[k - 1]) \n\t\t\t\t\tL[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n\t\t\t\telse\n\t\t\t\t\tL[i][j][k] = max(max(L[i - 1][j][k], \n\t\t\t\t\t\t\t\t\t\tL[i][j - 1][k]), \n\t\t\t\t\t\t\t\t\tL[i][j][k - 1]); \n\t\t\t} \n\t\t} \n\t} \n\t\n\treturn L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122519,
      "stdout": "",
      "stderr": "/tmp/tmpl6wdhvgt.d(14): Deprecation: instead of C-style syntax, use D-style syntax `long[][][] L`\n/tmp/tmpl6wdhvgt.d(14): Error: variable `m` cannot be read at compile time\n/tmp/tmpl6wdhvgt.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl6wdhvgt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n  \n    int L[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) \n    { \n        for (int j = 0; j <= n; j++) \n        { \n            for (int k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(max(L[i - 1][j][k], \n                                        L[i][j - 1][k]), \n                                    L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122519,
      "stdout": "",
      "stderr": "/tmp/tmp7lpqlbt0.d(14): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmp7lpqlbt0.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmp7lpqlbt0.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmp7lpqlbt0.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmp7lpqlbt0.d(14): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7lpqlbt0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length; \n\tint n = Y.length; \n\tint o = Z.length; \n\t\n\tint[][][] L = new int[m+1][n+1][o+1]; \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122519,
      "stdout": "",
      "stderr": "/tmp/tmppll4b9qw.d(15): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppll4b9qw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length; \n\tint n = Y.length; \n\tint o = Z.length; \n\t\n\tint[][][] L = new int[m+1][n+1][o+1]; \n\t\n\tfor (int i = 0; i <= m; i++) \n\t{ \n\t\tfor (int j = 0; j <= n; j++) \n\t\t{ \n\t\t\tfor (int k = 0; k <= o; k++) \n\t\t\t{ \n\t\t\t\tif (i == 0 || j == 0||k==0) \n\t\t\t\t\tL[i][j][k] = 0; \n\t\t\t\telse if (X[i-1] == Y[j-1] && X[i-1]==Z[k-1]) \n\t\t\t\t\tL[i][j][k] = L[i-1][j-1][k-1] + 1; \n\t\t\t\telse\n\t\t\t\t\tL[i][j][k] = max(L[i-1][j][k], \n\t\t\t\t\t\t\t\t\tL[i][j-1][k], \n\t\t\t\t\t\t\t\t\tL[i][j][k-1]); \n\t\t\t} \n\t\t} \n\t} \n\treturn L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122518,
      "stdout": "",
      "stderr": "/tmp/tmp3rqqgtt2.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmp3rqqgtt2.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmp3rqqgtt2.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmp3rqqgtt2.d(14): Error: variable `m` cannot be read at compile time\n/tmp/tmp3rqqgtt2.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3rqqgtt2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n  \n    int[][][] L = new int[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) \n    { \n        for (int j = 0; j <= n; j++) \n        { \n            for (int k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(L[i - 1][j][k], \n                                     L[i][j - 1][k], \n                                     L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122519,
      "stdout": "",
      "stderr": "/tmp/tmpqmt4mop2.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpqmt4mop2.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpqmt4mop2.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpqmt4mop2.d(14): Error: variable `m` cannot be read at compile time\n/tmp/tmpqmt4mop2.d(29): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqmt4mop2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length; \n\tint n = Y.length; \n\tint o = Z.length; \n\t\n\tint L[m+1][n+1][o+1]; \n\t\n\tfor (int i=0; i<=m; i++) \n\t{ \n\t\tfor (int j=0; j<=n; j++) \n\t\t{ \n\t\t\tfor (int k=0; k<=o; k++) \n\t\t\t{ \n\t\t\t\tif (i == 0 || j == 0||k==0) \n\t\t\t\t\tL[i][j][k] = 0; \n\t\t\t\telse if (X[i-1] == Y[j-1] && X[i-1]==Z[k-1]) \n\t\t\t\t\tL[i][j][k] = L[i-1][j-1][k-1] + 1; \n\t\t\t\telse\n\t\t\t\t\tL[i][j][k] = max(max(L[i-1][j][k], L[i][j-1][k]),L[i][j][k-1]); \n\t\t\t} \n\t\t} \n\t} \n\treturn L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517282,
      "stdout": "",
      "stderr": "/tmp/tmpvh9e9eyu.d(14): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmpvh9e9eyu.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpvh9e9eyu.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpvh9e9eyu.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpvh9e9eyu.d(14): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvh9e9eyu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length; \n\tint n = Y.length; \n\tint o = Z.length; \n\t\n\tint[][][] L = new int[m + 1][n + 1][o + 1]; \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517282,
      "stdout": "",
      "stderr": "/tmp/tmp4gkfzs0q.d(15): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4gkfzs0q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n  \n    int[][][] L = new int[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) { \n        for (int j = 0; j <= n; j++) { \n            for (int k = 0; k <= o; k++) { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122518,
      "stdout": "",
      "stderr": "/tmp/tmp366kkjvn.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmp366kkjvn.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmp366kkjvn.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmp366kkjvn.d(14): Error: variable `m` cannot be read at compile time\n/tmp/tmp366kkjvn.d(26): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp366kkjvn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n  \n    int[][][] L = new int[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) { \n        for (int j = 0; j <= n; j++) { \n            for (int k = 0; k <= o; k++) { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n                else\n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122519,
      "stdout": "",
      "stderr": "/tmp/tmprn87ehz1.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmprn87ehz1.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmprn87ehz1.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmprn87ehz1.d(14): Error: variable `m` cannot be read at compile time\n/tmp/tmprn87ehz1.d(24): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprn87ehz1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length; \n\tint n = Y.length; \n\tint o = Z.length; \n\t\n\tint[][][] L = new int[m+1][n+1][o+1]; \n\t\n\tfor(int i = 0; i <= m; i++) \n\t{ \n\t\tfor(int j = 0; j <= n; j++) \n\t\t{ \n\t\t\tfor(int k = 0; k <= o; k++) \n\t\t\t{ \n\t\t\t\tif(i == 0 || j == 0||k==0) \n\t\t\t\t\tL[i][j][k] = 0; \n\t\t\t\telse if(X[i-1] == Y[j-1] && X[i-1]==Z[k-1]) \n\t\t\t\t\tL[i][j][k] = L[i-1][j-1][k-1] + 1; \n\t\t\t\telse\n\t\t\t\t\tL[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1]); \n\t\t\t} \n\t\t} \n\t} \n\treturn L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122519,
      "stdout": "",
      "stderr": "/tmp/tmpgr9cwwpv.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpgr9cwwpv.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpgr9cwwpv.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpgr9cwwpv.d(14): Error: variable `m` cannot be read at compile time\n/tmp/tmpgr9cwwpv.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgr9cwwpv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length; \n\tint n = Y.length; \n\tint o = Z.length; \n\t\n\tint[][][] L = new int[m + 1][n + 1][o + 1]; \n\t\n\tfor (int i = 0; i <= m; i++) \n\t{ \n\t\tfor (int j = 0; j <= n; j++) \n\t\t{ \n\t\t\tfor (int k = 0; k <= o; k++) \n\t\t\t{ \n\t\t\t\tif (i == 0 || j == 0||k==0) \n\t\t\t\t\tL[i][j][k] = 0; \n\t\t\t\telse if (X[i - 1] == Y[j - 1] && X[i - 1]==Z[k - 1]) \n\t\t\t\t\tL[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n\t\t\t\telse\n\t\t\t\t\tL[i][j][k] = max(max(L[i - 1][j][k], \n\t\t\t\t\t\t\t\t\t\tL[i][j - 1][k]), \n\t\t\t\t\t\t\t\t\tL[i][j][k - 1]); \n\t\t\t} \n\t\t} \n\t} \n\treturn L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122519,
      "stdout": "",
      "stderr": "/tmp/tmpjc8xkn_y.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpjc8xkn_y.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpjc8xkn_y.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpjc8xkn_y.d(14): Error: variable `m` cannot be read at compile time\n/tmp/tmpjc8xkn_y.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjc8xkn_y.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n  \n    int[][][] L = new int[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) { \n        for (int j = 0; j <= n; j++) { \n            for (int k = 0; k <= o; k++) { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122518,
      "stdout": "",
      "stderr": "/tmp/tmp366kkjvn.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmp366kkjvn.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmp366kkjvn.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmp366kkjvn.d(14): Error: variable `m` cannot be read at compile time\n/tmp/tmp366kkjvn.d(26): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp366kkjvn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length; \n\tint n = Y.length; \n\tint o = Z.length; \n\tint L[m + 1][n + 1][o + 1]; \n\tint i, j, k; \n\tfor (i = 0; i <= m; i++) \n\t{ \n\t\tfor (j = 0; j <= n; j++) \n\t\t{ \n\t\t\tfor (k = 0; k <= o; k++) \n\t\t\t{ \n\t\t\t\tif (i == 0 || j == 0 || k == 0) \n\t\t\t\t\tL[i][j][k] = 0; \n\t\t\t\telse if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n\t\t\t\t\tL[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n\t\t\t\telse\n\t\t\t\t\tL[i][j][k] = max(max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]); \n\t\t\t} \n\t\t} \n\t} \n\treturn L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122519,
      "stdout": "",
      "stderr": "/tmp/tmput_vt46t.d(13): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmput_vt46t.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmput_vt46t.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmput_vt46t.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmput_vt46t.d(13): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmput_vt46t.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tlong m = X.length; \n\tlong n = Y.length; \n\tlong o = Z.length; \n\t\n\tlong L[m+1][n+1][o+1]; \n\t\n\tfor (long i=0; i<=m; i++) \n\t{ \n\t\tfor (long j=0; j<=n; j++) \n\t\t{ \n\t\t\tfor (long k=0; k<=o; k++) \n\t\t\t{ \n\t\t\t\tif (i == 0 || j == 0||k==0) \n\t\t\t\t\tL[i][j][k] = 0; \n\t\t\t\t\n\t\t\t\telse if (X[i-1] == Y[j-1] && X[i-1]==Z[k-1]) \n\t\t\t\t\tL[i][j][k] = L[i-1][j-1][k-1] + 1; \n\t\t\t\t\n\t\t\t\telse\n\t\t\t\t\tL[i][j][k] = max(max(L[i-1][j][k], \n\t\t\t\t\t\t\t\t\tL[i][j-1][k]), \n\t\t\t\t\t\t\t\t\tL[i][j][k-1]); \n\t\t\t} \n\t\t} \n\t} \n\t\n\treturn L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122519,
      "stdout": "",
      "stderr": "/tmp/tmp289kdgbo.d(14): Deprecation: instead of C-style syntax, use D-style syntax `long[o + 1][n + 1][m + 1] L`\n/tmp/tmp289kdgbo.d(14): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp289kdgbo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length; \n\tint n = Y.length; \n\tint o = Z.length; \n\t\n\tint[][][] L = new int[m + 1][n + 1][o + 1]; \n\t\n\tfor (int i = 0; i <= m; i++) \n\t{ \n\t\tfor (int j = 0; j <= n; j++) \n\t\t{ \n\t\t\tfor (int k = 0; k <= o; k++) \n\t\t\t{ \n\t\t\t\tif (i == 0 || j == 0 || k == 0) \n\t\t\t\t\tL[i][j][k] = 0; \n\t\t\t\telse if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n\t\t\t\t\tL[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n\t\t\t\telse\n\t\t\t\t\tL[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]); \n\t\t\t} \n\t\t} \n\t} \n\t\n\treturn L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122519,
      "stdout": "",
      "stderr": "/tmp/tmpi19vyn7x.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpi19vyn7x.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpi19vyn7x.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpi19vyn7x.d(14): Error: variable `m` cannot be read at compile time\n/tmp/tmpi19vyn7x.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi19vyn7x.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length; \n\tint n = Y.length; \n\tint o = Z.length; \n\tint L[][][] = new int[m + 1][n + 1][o + 1]; \n\tfor (int i = 0; i <= m; i++) \n\t{ \n\t\tfor (int j = 0; j <= n; j++) \n\t\t{ \n\t\t\tfor (int k = 0; k <= o; k++) \n\t\t\t{ \n\t\t\t\tif (i == 0 || j == 0 || k == 0) \n\t\t\t\t\tL[i][j][k] = 0; \n\t\t\t\telse if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n\t\t\t\t\tL[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n\t\t\t\telse\n\t\t\t\t\tL[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]); \n\t\t\t} \n\t\t} \n\t} \n\treturn L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517282,
      "stdout": "",
      "stderr": "/tmp/tmp9wq2do2_.d(13): Deprecation: instead of C-style syntax, use D-style syntax `int[][][] L`\n/tmp/tmp9wq2do2_.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmp9wq2do2_.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmp9wq2do2_.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmp9wq2do2_.d(13): Error: variable `m` cannot be read at compile time\n/tmp/tmp9wq2do2_.d(25): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9wq2do2_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length; \n\tint n = Y.length; \n\tint o = Z.length; \n\t\n\tint[][][] L = new int[m + 1][n + 1][o + 1]; \n\t\n\tfor (int i = 0; i <= m; i++) \n\t{ \n\t\tfor (int j = 0; j <= n; j++) \n\t\t{ \n\t\t\tfor (int k = 0; k <= o; k++) \n\t\t\t{ \n\t\t\t\tif (i == 0 || j == 0||k==0) \n\t\t\t\t\tL[i][j][k] = 0; \n\t\t\t\telse if (X[i - 1] == Y[j - 1] && X[i - 1]==Z[k - 1]) \n\t\t\t\t\tL[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n\t\t\t\telse\n\t\t\t\t\tL[i][j][k] = max(L[i - 1][j][k], \n\t\t\t\t\t\t\t\t\tL[i][j - 1][k], \n\t\t\t\t\t\t\t\t\tL[i][j][k - 1]); \n\t\t\t} \n\t\t} \n\t} \n\treturn L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122519,
      "stdout": "",
      "stderr": "/tmp/tmpx05ztysz.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpx05ztysz.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpx05ztysz.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpx05ztysz.d(14): Error: variable `m` cannot be read at compile time\n/tmp/tmpx05ztysz.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx05ztysz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length; \n\tint n = Y.length; \n\tint o = Z.length; \n\t\n\tint[][][] L = new int[m+1][n+1][o+1]; \n\t\n\tfor (int i=0; i<=m; i++) \n\t{ \n\t\tfor (int j=0; j<=n; j++) \n\t\t{ \n\t\t\tfor (int k=0; k<=o; k++) \n\t\t\t{ \n\t\t\t\tif (i == 0 || j == 0||k==0) \n\t\t\t\t\tL[i][j][k] = 0; \n\t\t\t\telse if (X[i-1] == Y[j-1] && X[i-1]==Z[k-1]) \n\t\t\t\t\tL[i][j][k] = L[i-1][j-1][k-1] + 1; \n\t\t\t\telse\n\t\t\t\t\tL[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1]); \n\t\t\t} \n\t\t} \n\t} \n\treturn L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517282,
      "stdout": "",
      "stderr": "/tmp/tmp7t9dpcr2.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmp7t9dpcr2.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmp7t9dpcr2.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmp7t9dpcr2.d(14): Error: variable `m` cannot be read at compile time\n/tmp/tmp7t9dpcr2.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7t9dpcr2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n  \n    int L[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) \n    { \n        for (int j = 0; j <= n; j++) \n        { \n            for (int k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(max(L[i - 1][j][k], \n                                        L[i][j - 1][k]), \n                                    L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122519,
      "stdout": "",
      "stderr": "/tmp/tmp7lpqlbt0.d(14): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmp7lpqlbt0.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmp7lpqlbt0.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmp7lpqlbt0.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmp7lpqlbt0.d(14): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7lpqlbt0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n  \n    int L[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) \n    { \n        for (int j = 0; j <= n; j++) \n        { \n            for (int k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(max(L[i - 1][j][k], \n                                         L[i][j - 1][k]), \n                                     L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122519,
      "stdout": "",
      "stderr": "/tmp/tmp8xths3ki.d(14): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmp8xths3ki.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmp8xths3ki.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmp8xths3ki.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmp8xths3ki.d(14): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8xths3ki.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n  \n    int L[][][] = new int[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) \n    { \n        for (int j = 0; j <= n; j++) \n        { \n            for (int k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(L[i - 1][j][k], \n                                     L[i][j - 1][k], \n                                     L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122519,
      "stdout": "",
      "stderr": "/tmp/tmp6cf24462.d(14): Deprecation: instead of C-style syntax, use D-style syntax `int[][][] L`\n/tmp/tmp6cf24462.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmp6cf24462.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmp6cf24462.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmp6cf24462.d(14): Error: variable `m` cannot be read at compile time\n/tmp/tmp6cf24462.d(29): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6cf24462.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    long m = X.length; \n    long n = Y.length; \n    long o = Z.length; \n  \n    long L[m + 1][n + 1][o + 1]; \n  \n    for (long i = 0; i <= m; i++) \n    { \n        for (long j = 0; j <= n; j++) \n        { \n            for (long k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(max(L[i - 1][j][k], \n                                        L[i][j - 1][k]), \n                                    L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122519,
      "stdout": "",
      "stderr": "/tmp/tmpw88b7kh2.d(14): Deprecation: instead of C-style syntax, use D-style syntax `long[o + 1][n + 1][m + 1] L`\n/tmp/tmpw88b7kh2.d(14): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw88b7kh2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n    int[][][] L = new int[m + 1][n + 1][o + 1]; \n  \n    /* Following steps build L[m+1][n+1][o+1] in bottom up fashion. Note  \n       that L[i][j][k] contains length of LCS of X[0..i-1] and Y[0..j-1] \n       and Z[0..k-1] */\n    for (int i = 0; i <= m; i++) { \n        for (int j = 0; j <= n; j++) { \n            for (int k = 0; k <= o; k++) { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    /* L[m][n][o] contains length of LCS for X[0..n-1] and Y[0..m-1] and Z[0..o-1]*/\n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122519,
      "stdout": "",
      "stderr": "/tmp/tmpz5ou3ytq.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpz5ou3ytq.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpz5ou3ytq.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpz5ou3ytq.d(13): Error: variable `m` cannot be read at compile time\n/tmp/tmpz5ou3ytq.d(28): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz5ou3ytq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n    int L[m + 1][n + 1][o + 1]; \n  \n    /* Following steps build L[m+1][n+1][o+1] in bottom up fashion. Note \n       that L[i][j][k] contains length of LCS of X[0..i-1] and Y[0..j-1] \n       and Z[0..k-1]*/\n    for (int i = 0; i <= m; i++) { \n        for (int j = 0; j <= n; j++) { \n            for (int k = 0; k <= o; k++) { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(L[i - 1][j][k], \n                                     L[i][j - 1][k], \n                                     L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    /* L[m][n][o] contains length of LCS for X[0..n-1] and Y[0..m-1] and Z[0..o-1]*/\n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122519,
      "stdout": "",
      "stderr": "/tmp/tmp56jf630o.d(13): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmp56jf630o.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmp56jf630o.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmp56jf630o.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmp56jf630o.d(13): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp56jf630o.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length; \n\tint n = Y.length; \n\tint o = Z.length; \n\t\n\tint[][][] L = new int[m + 1][n + 1][o + 1]; \n\t\n\tfor (int i = 0; i <= m; i++) \n\t{ \n\t\tfor (int j = 0; j <= n; j++) \n\t\t{ \n\t\t\tfor (int k = 0; k <= o; k++) \n\t\t\t{ \n\t\t\t\tif (i == 0 || j == 0 || k == 0) \n\t\t\t\t\tL[i][j][k] = 0; \n\t\t\t\telse if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n\t\t\t\t\tL[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n\t\t\t\telse\n\t\t\t\t\tL[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]); \n\t\t\t} \n\t\t} \n\t} \n\t\n\treturn L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122519,
      "stdout": "",
      "stderr": "/tmp/tmpi19vyn7x.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpi19vyn7x.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpi19vyn7x.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpi19vyn7x.d(14): Error: variable `m` cannot be read at compile time\n/tmp/tmpi19vyn7x.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi19vyn7x.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n  \n    int L[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) { \n        for (int j = 0; j <= n; j++) { \n            for (int k = 0; k <= o; k++) { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(max(L[i - 1][j][k], \n                                         L[i][j - 1][k]), \n                                     L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122519,
      "stdout": "",
      "stderr": "/tmp/tmp3rxp9cgb.d(14): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmp3rxp9cgb.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmp3rxp9cgb.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmp3rxp9cgb.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmp3rxp9cgb.d(14): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3rxp9cgb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n    int[][][] L = new int[m + 1][n + 1][o + 1]; \n  \n    /* Following steps build L[m+1][n+1][o+1] in bottom up fashion. Note  \n       that L[i][j][k] contains length of LCS of X[0..i-1] and Y[0..j-1] \n       and Z[0..k-1] */\n    for (int i = 0; i <= m; i++) \n    { \n        for (int j = 0; j <= n; j++) \n        { \n            for (int k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    /* L[m][n][o] contains length of LCS for X[0..n-1] and Y[0..m-1] and Z[0..o-1]*/\n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122519,
      "stdout": "",
      "stderr": "/tmp/tmpxe1l85bi.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpxe1l85bi.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpxe1l85bi.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpxe1l85bi.d(13): Error: variable `m` cannot be read at compile time\n/tmp/tmpxe1l85bi.d(31): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxe1l85bi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length; \n\tint n = Y.length; \n\tint o = Z.length; \n\tint L[m + 1][n + 1][o + 1]; \n\tint i, j, k; \n\tfor (i = 0; i <= m; i++) \n\t{ \n\t\tfor (j = 0; j <= n; j++) \n\t\t{ \n\t\t\tfor (k = 0; k <= o; k++) \n\t\t\t{ \n\t\t\t\tif (i == 0 || j == 0 || k == 0) \n\t\t\t\t\tL[i][j][k] = 0; \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122519,
      "stdout": "",
      "stderr": "/tmp/tmpgmnlh29f.d(13): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmpgmnlh29f.d(23): Error: found `unittest` instead of statement\n/tmp/tmpgmnlh29f.d(31): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpgmnlh29f.d(31): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpgmnlh29f.d(31): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgmnlh29f.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length; \n\tint n = Y.length; \n\tint o = Z.length; \n\t\n\tint[][][] L = new int[m + 1][n + 1][o + 1]; \n\t\n\tfor (int i = 0; i <= m; i++) \n\t{ \n\t\tfor (int j = 0; j <= n; j++) \n\t\t{ \n\t\t\tfor (int k = 0; k <= o; k++) \n\t\t\t{ \n\t\t\t\tif (i == 0 || j == 0 || k == 0) \n\t\t\t\t\tL[i][j][k] = 0; \n\t\t\t\telse if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n\t\t\t\t\tL[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n\t\t\t\telse\n\t\t\t\t\tL[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]); \n\t\t\t} \n\t\t} \n\t} \n\t\n\treturn L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122519,
      "stdout": "",
      "stderr": "/tmp/tmpi19vyn7x.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpi19vyn7x.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpi19vyn7x.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpi19vyn7x.d(14): Error: variable `m` cannot be read at compile time\n/tmp/tmpi19vyn7x.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi19vyn7x.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length; \n\tint n = Y.length; \n\tint o = Z.length; \n\t\n\tint L[m+1][n+1][o+1]; \n\t\n\tfor (int i=0; i<=m; i++) \n\t{ \n\t\tfor (int j=0; j<=n; j++) \n\t\t{ \n\t\t\tfor (int k=0; k<=o; k++) \n\t\t\t{ \n\t\t\t\tif (i == 0 || j == 0||k==0) \n\t\t\t\t\tL[i][j][k] = 0; \n\t\t\t\telse if (X[i-1] == Y[j-1] && X[i-1]==Z[k-1]) \n\t\t\t\t\tL[i][j][k] = L[i-1][j-1][k-1] + 1; \n\t\t\t\telse\n\t\t\t\t\tL[i][j][k] = max(max(L[i-1][j][k], \n\t\t\t\t\t\t\t\t\t\tL[i][j-1][k]), \n\t\t\t\t\t\t\t\t\tL[i][j][k-1]); \n\t\t\t} \n\t\t} \n\t} \n\treturn L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122519,
      "stdout": "",
      "stderr": "/tmp/tmpyhkvdhld.d(14): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmpyhkvdhld.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpyhkvdhld.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpyhkvdhld.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpyhkvdhld.d(14): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyhkvdhld.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length; \n\tint n = Y.length; \n\tint o = Z.length; \n\tint L[m + 1][n + 1][o + 1]; \n\t\n\tfor (int i = 0; i <= m; i++) { \n\t\tfor (int j = 0; j <= n; j++) { \n\t\t\tfor (int k = 0; k <= o; k++) { \n\t\t\t\tif (i == 0 || j == 0 || k == 0) \n\t\t\t\t\tL[i][j][k] = 0; \n\t\t\t\telse if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n\t\t\t\t\tL[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n\t\t\t\telse\n\t\t\t\t\tL[i][j][k] = max(max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]); \n\t\t\t} \n\t\t} \n\t} \n\treturn L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122519,
      "stdout": "",
      "stderr": "/tmp/tmpp46vtl39.d(13): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmpp46vtl39.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpp46vtl39.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpp46vtl39.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpp46vtl39.d(13): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp46vtl39.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length; \n\tint n = Y.length; \n\tint o = Z.length; \n\t\n\tint[][][] L = new int[m + 1][n + 1][o + 1]; \n\t\n\tfor (int i = 0; i <= m; i++) \n\t{ \n\t\tfor (int j = 0; j <= n; j++) \n\t\t{ \n\t\t\tfor (int k = 0; k <= o; k++) \n\t\t\t{ \n\t\t\t\tif (i == 0 || j == 0||k==0) \n\t\t\t\t\tL[i][j][k] = 0; \n\t\t\t\telse if (X[i - 1] == Y[j - 1] && X[i - 1]==Z[k - 1]) \n\t\t\t\t\tL[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n\t\t\t\telse\n\t\t\t\t\tL[i][j][k] = max(max(L[i - 1][j][k], \n\t\t\t\t\t\t\t\t\t\tL[i][j - 1][k]), \n\t\t\t\t\t\t\t\t\tL[i][j][k - 1]); \n\t\t\t} \n\t\t} \n\t} \n\treturn L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122519,
      "stdout": "",
      "stderr": "/tmp/tmpjc8xkn_y.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpjc8xkn_y.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpjc8xkn_y.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpjc8xkn_y.d(14): Error: variable `m` cannot be read at compile time\n/tmp/tmpjc8xkn_y.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjc8xkn_y.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n    int[][][] L = new int[m + 1][n + 1][o + 1]; \n  \n    /* Following steps build L[m+1][n+1][o+1] in bottom up fashion. Note \n       that L[i][j][k] contains length of LCS of X[0..i-1] and Y[0..j-1] \n       and Z[0..k-1]*/\n    for (int i = 0; i <= m; i++) \n    { \n        for (int j = 0; j <= n; j++) \n        { \n            for (int k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    /* L[m][n][o] contains length of LCS for X[0..n-1] and Y[0..m-1] and Z[0..o-1]*/\n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122519,
      "stdout": "",
      "stderr": "/tmp/tmptg5559ao.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmptg5559ao.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmptg5559ao.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmptg5559ao.d(13): Error: variable `m` cannot be read at compile time\n/tmp/tmptg5559ao.d(31): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptg5559ao.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n  \n    int L[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) \n    { \n        for (int j = 0; j <= n; j++) \n        { \n            for (int k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(max(L[i - 1][j][k], \n                                        L[i][j - 1][k]), \n                                        L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122519,
      "stdout": "",
      "stderr": "/tmp/tmp95oa2j_e.d(14): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmp95oa2j_e.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmp95oa2j_e.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmp95oa2j_e.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmp95oa2j_e.d(14): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp95oa2j_e.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n  \n    int L[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) \n    { \n        for (int j = 0; j <= n; j++) \n        { \n            for (int k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(max(L[i - 1][j][k], \n                                        L[i][j - 1][k]), \n                                    L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122519,
      "stdout": "",
      "stderr": "/tmp/tmp7lpqlbt0.d(14): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmp7lpqlbt0.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmp7lpqlbt0.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmp7lpqlbt0.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmp7lpqlbt0.d(14): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7lpqlbt0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n  \n    int L[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) \n    { \n        for (int j = 0; j <= n; j++) \n        { \n            for (int k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(L[i - 1][j][k], \n                                     L[i][j - 1][k], \n                                     L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517282,
      "stdout": "",
      "stderr": "/tmp/tmp5b29kpaw.d(14): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmp5b29kpaw.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmp5b29kpaw.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmp5b29kpaw.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmp5b29kpaw.d(14): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5b29kpaw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tlong m = X.length; \n\tlong n = Y.length; \n\tlong o = Z.length; \n\t\n\tlong L[m+1][n+1][o+1]; \n\t\n\tfor (long i=0; i<=m; i++) \n\t{ \n\t\tfor (long j=0; j<=n; j++) \n\t\t{ \n\t\t\tfor (long k=0; k<=o; k++) \n\t\t\t{ \n\t\t\t\tif (i == 0 || j == 0||k==0) \n\t\t\t\t\tL[i][j][k] = 0; \n\t\t\t\n\t\t\t\telse if (X[i-1] == Y[j-1] && X[i-1]==Z[k-1]) \n\t\t\t\t\tL[i][j][k] = L[i-1][j-1][k-1] + 1; \n\t\t\t\n\t\t\t\telse\n\t\t\t\t\tL[i][j][k] = max(L[i-1][j][k], \n\t\t\t\t\t\t\t\t\tL[i][j-1][k], \n\t\t\t\t\t\t\t\t\tL[i][j][k-1]); \n\t\t\t} \n\t\t} \n\t} \n\t\n\treturn L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122519,
      "stdout": "",
      "stderr": "/tmp/tmpynqcywzq.d(14): Deprecation: instead of C-style syntax, use D-style syntax `long[o + 1][n + 1][m + 1] L`\n/tmp/tmpynqcywzq.d(14): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpynqcywzq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length; \n\tint n = Y.length; \n\tint o = Z.length; \n\t\n\tint[][][] L = new int[m + 1][n + 1][o + 1]; \n\t\n\tfor (int i = 0; i <= m; i++) \n\t{ \n\t\tfor (int j = 0; j <= n; j++) \n\t\t{ \n\t\t\tfor (int k = 0; k <= o; k++) \n\t\t\t{ \n\t\t\t\tif (i == 0 || j == 0 || k == 0) \n\t\t\t\t\tL[i][j][k] = 0; \n\t\t\t\telse if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n\t\t\t\t\tL[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n\t\t\t\telse\n\t\t\t\t\tL[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]); \n\t\t\t} \n\t\t} \n\t} \n\treturn L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517282,
      "stdout": "",
      "stderr": "/tmp/tmpo151sqe6.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpo151sqe6.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpo151sqe6.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpo151sqe6.d(14): Error: variable `m` cannot be read at compile time\n/tmp/tmpo151sqe6.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo151sqe6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length; \n\tint n = Y.length; \n\tint o = Z.length; \n\tint L[][][] = new int[m + 1][n + 1][o + 1]; \n\tfor (int i = 0; i <= m; i++) { \n\t\tfor (int j = 0; j <= n; j++) { \n\t\t\tfor (int k = 0; k <= o; k++) { \n\t\t\t\tif (i == 0 || j == 0 || k == 0) \n\t\t\t\t\tL[i][j][k] = 0; \n\t\t\t\telse if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n\t\t\t\t\tL[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n\t\t\t\telse\n\t\t\t\t\tL[i][j][k] = max(max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]); \n\t\t\t} \n\t\t} \n\t} \n\treturn L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122519,
      "stdout": "",
      "stderr": "/tmp/tmpi_qu_3tc.d(13): Deprecation: instead of C-style syntax, use D-style syntax `int[][][] L`\n/tmp/tmpi_qu_3tc.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpi_qu_3tc.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpi_qu_3tc.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpi_qu_3tc.d(13): Error: variable `m` cannot be read at compile time\n/tmp/tmpi_qu_3tc.d(22): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi_qu_3tc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length; \n\tint n = Y.length; \n\tint o = Z.length; \n\t\n\tint[][][] L = new int[m+1][n+1][o+1]; \n\t\n\tfor (int i=0; i<=m; i++) \n\t{ \n\t\tfor (int j=0; j<=n; j++) \n\t\t{ \n\t\t\tfor (int k=0; k<=o; k++) \n\t\t\t{ \n\t\t\t\tif (i == 0 || j == 0||k==0) \n\t\t\t\t\tL[i][j][k] = 0; \n\t\t\t\telse if (X[i-1] == Y[j-1] && X[i-1]==Z[k-1]) \n\t\t\t\t\tL[i][j][k] = L[i-1][j-1][k-1] + 1; \n\t\t\t\telse\n\t\t\t\t\tL[i][j][k] = max(max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1]); \n\t\t\t} \n\t\t} \n\t} \n\treturn L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122519,
      "stdout": "",
      "stderr": "/tmp/tmpg2podn_8.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpg2podn_8.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpg2podn_8.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpg2podn_8.d(14): Error: variable `m` cannot be read at compile time\n/tmp/tmpg2podn_8.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg2podn_8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n  \n    int L[][][] = new int[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) { \n        for (int j = 0; j <= n; j++) { \n            for (int k = 0; k <= o; k++) { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && \n                         X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(max(L[i - 1][j][k], \n                                         L[i][j - 1][k]), \n                                     L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122519,
      "stdout": "",
      "stderr": "/tmp/tmpcmez8_dv.d(14): Deprecation: instead of C-style syntax, use D-style syntax `int[][][] L`\n/tmp/tmpcmez8_dv.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpcmez8_dv.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpcmez8_dv.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpcmez8_dv.d(14): Error: variable `m` cannot be read at compile time\n/tmp/tmpcmez8_dv.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcmez8_dv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n  \n    int[][][] L = new int[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) \n    { \n        for (int j = 0; j <= n; j++) \n        { \n            for (int k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517282,
      "stdout": "",
      "stderr": "/tmp/tmp7l8qlnur.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmp7l8qlnur.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmp7l8qlnur.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmp7l8qlnur.d(14): Error: variable `m` cannot be read at compile time\n/tmp/tmp7l8qlnur.d(29): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7l8qlnur.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n    int[][][] L = new int[m + 1][n + 1][o + 1]; \n  \n    /* Following steps build L[m+1][n+1][o+1] in bottom up fashion. Note  \n       that L[i][j][k] contains length of LCS of X[0..i-1] and Y[0..j-1] \n       and Z[0..k-1] */\n    for (int i = 0; i <= m; i++) { \n        for (int j = 0; j <= n; j++) { \n            for (int k = 0; k <= o; k++) { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    /* L[m][n][o] contains length of LCS for X[0..n-1] and Y[0..m-1] and Z[0..o-1]*/\n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122519,
      "stdout": "",
      "stderr": "/tmp/tmpz5ou3ytq.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpz5ou3ytq.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpz5ou3ytq.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpz5ou3ytq.d(13): Error: variable `m` cannot be read at compile time\n/tmp/tmpz5ou3ytq.d(28): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz5ou3ytq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n  \n    int L[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) \n    { \n        for (int j = 0; j <= n; j++) \n        { \n            for (int k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(max(L[i - 1][j][k], \n                                        L[i][j - 1][k]), \n                                    L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122519,
      "stdout": "",
      "stderr": "/tmp/tmp7lpqlbt0.d(14): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmp7lpqlbt0.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmp7lpqlbt0.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmp7lpqlbt0.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmp7lpqlbt0.d(14): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7lpqlbt0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length; \n\tint n = Y.length; \n\tint o = Z.length; \n\t\n\tint[][][] L = new int[m + 1][n + 1][o + 1]; \n\t\n\tfor (int i = 0; i <= m; i++) \n\t{ \n\t\tfor (int j = 0; j <= n; j++) \n\t\t{ \n\t\t\tfor (int k = 0; k <= o; k++) \n\t\t\t{ \n\t\t\t\tif (i == 0 || j == 0||k==0) \n\t\t\t\t\tL[i][j][k] = 0; \n\t\t\t\telse if (X[i - 1] == Y[j - 1] && X[i - 1]==Z[k - 1]) \n\t\t\t\t\tL[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n\t\t\t\telse\n\t\t\t\t\tL[i][j][k] = max(max(L[i - 1][j][k], \n\t\t\t\t\t\t\t\t\tL[i][j - 1][k]), \n\t\t\t\t\t\t\t\t\tL[i][j][k - 1]); \n\t\t\t} \n\t\t} \n\t} \n\treturn L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122519,
      "stdout": "",
      "stderr": "/tmp/tmptvbt2qui.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmptvbt2qui.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmptvbt2qui.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmptvbt2qui.d(14): Error: variable `m` cannot be read at compile time\n/tmp/tmptvbt2qui.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptvbt2qui.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    long m = X.length; \n    long n = Y.length; \n    long o = Z.length; \n  \n    long L[][][] = new long[m + 1][n + 1][o + 1]; \n  \n    for (long i = 0; i <= m; i++) \n    { \n        for (long j = 0; j <= n; j++) \n        { \n            for (long k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(max(L[i - 1][j][k], \n                                        L[i][j - 1][k]), \n                                    L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122519,
      "stdout": "",
      "stderr": "/tmp/tmpo1okh1lu.d(14): Deprecation: instead of C-style syntax, use D-style syntax `long[][][] L`\n/tmp/tmpo1okh1lu.d(14): Error: variable `m` cannot be read at compile time\n/tmp/tmpo1okh1lu.d(29): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo1okh1lu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length; \n\tint n = Y.length; \n\tint o = Z.length; \n\tint L[][][] = new int[m+1][n+1][o+1]; \n\t\n\tfor (int i=0; i<=m; i++) \n\t{ \n\t\tfor (int j=0; j<=n; j++) \n\t\t{ \n\t\t\tfor (int k=0; k<=o; k++) \n\t\t\t{ \n\t\t\t\tif (i == 0 || j == 0||k==0) \n\t\t\t\t\tL[i][j][k] = 0; \n\t\t\t\telse if (X[i-1] == Y[j-1] && X[i-1]==Z[k-1]) \n\t\t\t\t\tL[i][j][k] = L[i-1][j-1][k-1] + 1; \n\t\t\t\telse\n\t\t\t\t\tL[i][j][k] = max(max(L[i-1][j][k], \n\t\t\t\t\t\t\t\t\tL[i][j-1][k]), \n\t\t\t\t\t\t\t\t\tL[i][j][k-1]); \n\t\t\t} \n\t\t} \n\t} \n\t\n\treturn L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122519,
      "stdout": "",
      "stderr": "/tmp/tmpj4ghww0l.d(13): Deprecation: instead of C-style syntax, use D-style syntax `int[][][] L`\n/tmp/tmpj4ghww0l.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpj4ghww0l.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpj4ghww0l.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpj4ghww0l.d(13): Error: variable `m` cannot be read at compile time\n/tmp/tmpj4ghww0l.d(26): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj4ghww0l.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n  \n    int L[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) { \n        for (int j = 0; j <= n; j++) { \n            for (int k = 0; k <= o; k++) { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(L[i - 1][j][k], \n                                     L[i][j - 1][k], \n                                     L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122519,
      "stdout": "",
      "stderr": "/tmp/tmp7f7dpimy.d(14): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmp7f7dpimy.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmp7f7dpimy.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmp7f7dpimy.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmp7f7dpimy.d(14): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7f7dpimy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length; \n\tint n = Y.length; \n\tint o = Z.length; \n\t\n\tint L[m+1][n+1][o+1]; \n\t\n\tfor (int i=0; i<=m; i++) \n\t{ \n\t\tfor (int j=0; j<=n; j++) \n\t\t{ \n\t\t\tfor (int k=0; k<=o; k++) \n\t\t\t{ \n\t\t\t\tif (i == 0 || j == 0||k==0) \n\t\t\t\t\tL[i][j][k] = 0; \n\t\t\t\t\n\t\t\t\telse if (X[i-1] == Y[j-1] && X[i-1]==Z[k-1]) \n\t\t\t\t\tL[i][j][k] = L[i-1][j-1][k-1] + 1; \n\t\t\t\t\n\t\t\t\telse\n\t\t\t\t\tL[i][j][k] = max(max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1]); \n\t\t\t} \n\t\t} \n\t} \n\t\n\treturn L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122519,
      "stdout": "",
      "stderr": "/tmp/tmp2jsmk0y2.d(14): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmp2jsmk0y2.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmp2jsmk0y2.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmp2jsmk0y2.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmp2jsmk0y2.d(14): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2jsmk0y2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length; \n\tint n = Y.length; \n\tint o = Z.length; \n\t\n\tint[][][] L = new int[m+1][n+1][o+1]; \n\t\n\tfor (int i=0; i<=m; i++) \n\t{ \n\t\tfor (int j=0; j<=n; j++) \n\t\t{ \n\t\t\tfor (int k=0; k<=o; k++) \n\t\t\t{ \n\t\t\t\tif (i == 0 || j == 0||k==0) \n\t\t\t\t\tL[i][j][k] = 0; \n\t\t\t\telse if (X[i-1] == Y[j-1] && X[i-1]==Z[k-1]) \n\t\t\t\t\tL[i][j][k] = L[i-1][j-1][k-1] + 1; \n\t\t\t\telse\n\t\t\t\t\tL[i][j][k] = max(L[i-1][j][k], \n\t\t\t\t\t\t\t\t\tL[i][j-1][k], \n\t\t\t\t\t\t\t\t\tL[i][j][k-1]); \n\t\t\t} \n\t\t} \n\t} \n\treturn L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122519,
      "stdout": "",
      "stderr": "/tmp/tmpo5_us44i.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpo5_us44i.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpo5_us44i.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpo5_us44i.d(14): Error: variable `m` cannot be read at compile time\n/tmp/tmpo5_us44i.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo5_us44i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length; \n\tint n = Y.length; \n\tint o = Z.length; \n\t\n\tint[][][] L = new int[m + 1][n + 1][o + 1]; \n\t\n\tfor (int i = 0; i <= m; i++) \n\t{ \n\t\tfor (int j = 0; j <= n; j++) \n\t\t{ \n\t\t\tfor (int k = 0; k <= o; k++) \n\t\t\t{ \n\t\t\t\tif (i == 0 || j == 0 || k == 0) \n\t\t\t\t\tL[i][j][k] = 0; \n\t\t\t\telse if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n\t\t\t\t\tL[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n\t\t\t\telse\n\t\t\t\t\tL[i][j][k] = max(max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]); \n\t\t\t} \n\t\t} \n\t} \n\treturn L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122519,
      "stdout": "",
      "stderr": "/tmp/tmp8dfynh8b.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmp8dfynh8b.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmp8dfynh8b.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmp8dfynh8b.d(14): Error: variable `m` cannot be read at compile time\n/tmp/tmp8dfynh8b.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8dfynh8b.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length; \n\tint n = Y.length; \n\tint o = Z.length; \n\tint L[m + 1][n + 1][o + 1]; \n\tfor (int i = 0; i <= m; i++) \n\t{ \n\t\tfor (int j = 0; j <= n; j++) \n\t\t{ \n\t\t\tfor (int k = 0; k <= o; k++) \n\t\t\t{ \n\t\t\t\tif (i == 0 || j == 0||k==0) \n\t\t\t\t\tL[i][j][k] = 0; \n\t\t\t\telse if (X[i - 1] == Y[j - 1] && X[i - 1]==Z[k - 1]) \n\t\t\t\t\tL[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n\t\t\t\telse\n\t\t\t\t\tL[i][j][k] = max(max(L[i - 1][j][k], \n\t\t\t\t\t\t\t\t\t\tL[i][j - 1][k]), \n\t\t\t\t\t\t\t\t\tL[i][j][k - 1]); \n\t\t\t} \n\t\t} \n\t} \n\treturn L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122519,
      "stdout": "",
      "stderr": "/tmp/tmpixdzute9.d(13): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmpixdzute9.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpixdzute9.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpixdzute9.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpixdzute9.d(13): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpixdzute9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n  \n    int[][][] L = new int[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) \n    { \n        for (int j = 0; j <= n; j++) \n        { \n            for (int k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(L[i - 1][j][k], \n                                     L[i][j - 1][k], \n                                     L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122519,
      "stdout": "",
      "stderr": "/tmp/tmpqmt4mop2.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpqmt4mop2.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpqmt4mop2.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpqmt4mop2.d(14): Error: variable `m` cannot be read at compile time\n/tmp/tmpqmt4mop2.d(29): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqmt4mop2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n  \n    int[][][] L = new int[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) { \n        for (int j = 0; j <= n; j++) { \n            for (int k = 0; k <= o; k++) { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(L[i - 1][j][k], \n                                     L[i][j - 1][k], \n                                     L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122519,
      "stdout": "",
      "stderr": "/tmp/tmp9srsqq4e.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmp9srsqq4e.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmp9srsqq4e.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmp9srsqq4e.d(14): Error: variable `m` cannot be read at compile time\n/tmp/tmp9srsqq4e.d(26): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9srsqq4e.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length; \n\tint n = Y.length; \n\tint o = Z.length; \n\t\n\tint[][][] L = new int[m+1][n+1][o+1]; \n\t\n\tfor (int i=0; i<=m; i++) \n\t{ \n\t\tfor (int j=0; j<=n; j++) \n\t\t{ \n\t\t\tfor (int k=0; k<=o; k++) \n\t\t\t{ \n\t\t\t\tif (i == 0 || j == 0||k==0) \n\t\t\t\t\tL[i][j][k] = 0; \n\t\t\t\telse if (X[i-1] == Y[j-1] && X[i-1]==Z[k-1]) \n\t\t\t\t\tL[i][j][k] = L[i-1][j-1][k-1] + 1; \n\t\t\t\telse\n\t\t\t\t\tL[i][j][k] = max(L[i-1][j][k], \n\t\t\t\t\t\t\t\t\tL[i][j-1][k], \n\t\t\t\t\t\t\t\t\tL[i][j][k-1]); \n\t\t\t} \n\t\t} \n\t} \n\treturn L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122519,
      "stdout": "",
      "stderr": "/tmp/tmpo5_us44i.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpo5_us44i.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpo5_us44i.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpo5_us44i.d(14): Error: variable `m` cannot be read at compile time\n/tmp/tmpo5_us44i.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo5_us44i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length; \n\tint n = Y.length; \n\tint o = Z.length; \n\t\n\tint L[m + 1][n + 1][o + 1]; \n\t\n\tfor (int i = 0; i <= m; i++) \n\t{ \n\t\tfor (int j = 0; j <= n; j++) \n\t\t{ \n\t\t\tfor (int k = 0; k <= o; k++) \n\t\t\t{ \n\t\t\t\tif (i == 0 || j == 0 || k == 0) \n\t\t\t\t\tL[i][j][k] = 0; \n\t\t\t\telse if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n\t\t\t\t\tL[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n\t\t\t\telse\n\t\t\t\t\tL[i][j][k] = max(max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]); \n\t\t\t} \n\t\t} \n\t} \n\treturn L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122519,
      "stdout": "",
      "stderr": "/tmp/tmpj9i5cp70.d(14): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmpj9i5cp70.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpj9i5cp70.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpj9i5cp70.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpj9i5cp70.d(14): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj9i5cp70.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length; \n\tint n = Y.length; \n\tint o = Z.length; \n\tint L[m + 1][n + 1][o + 1]; \n\tint i, j, k; \n\tfor (i = 0; i <= m; i++) \n\t{ \n\t\tfor (j = 0; j <= n; j++) \n\t\t{ \n\t\t\tfor (k = 0; k <= o; k++) \n\t\t\t{ \n\t\t\t\tif (i == 0 || j == 0 || k == 0) \n\t\t\t\t\tL[i][j][k] = 0; \n\t\t\t\telse if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n\t\t\t\t\tL[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n\t\t\t\telse\n\t\t\t\t\tL[i][j][k] = max(max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]); \n\t\t\t} \n\t\t} \n\t} \n\treturn L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122519,
      "stdout": "",
      "stderr": "/tmp/tmput_vt46t.d(13): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmput_vt46t.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmput_vt46t.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmput_vt46t.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmput_vt46t.d(13): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmput_vt46t.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n  \n    int L[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) \n    { \n        for (int j = 0; j <= n; j++) \n        { \n            for (int k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(max(L[i - 1][j][k], \n                                        L[i][j - 1][k]), \n                                    L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122519,
      "stdout": "",
      "stderr": "/tmp/tmp7lpqlbt0.d(14): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmp7lpqlbt0.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmp7lpqlbt0.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmp7lpqlbt0.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmp7lpqlbt0.d(14): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7lpqlbt0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length; \n\tint n = Y.length; \n\tint o = Z.length; \n\t\n\tint[][][] L = new int[m+1][n+1][o+1]; \n\t\n\tfor (int i=0; i<=m; i++) \n\t{ \n\t\tfor (int j=0; j<=n; j++) \n\t\t{ \n\t\t\tfor (int k=0; k<=o; k++) \n\t\t\t{ \n\t\t\t\tif (i == 0 || j == 0||k==0) \n\t\t\t\t\tL[i][j][k] = 0; \n\t\t\t\telse if (X[i-1] == Y[j-1] && X[i-1]==Z[k-1]) \n\t\t\t\t\tL[i][j][k] = L[i-1][j-1][k-1] + 1; \n\t\t\t\telse\n\t\t\t\t\tL[i][j][k] = max(L[i-1][j][k], L[i][j-1][k],L[i][j][k-1]); \n\t\t\t} \n\t\t} \n\t} \n\treturn L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122519,
      "stdout": "",
      "stderr": "/tmp/tmpneixystr.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpneixystr.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpneixystr.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpneixystr.d(14): Error: variable `m` cannot be read at compile time\n/tmp/tmpneixystr.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpneixystr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length; \n\tint n = Y.length; \n\tint o = Z.length; \n\t\n\tint[][][] L = new int[m+1][n+1][o+1]; \n\t\n\tfor (int i=0; i<=m; i++) \n\t{ \n\t\tfor (int j=0; j<=n; j++) \n\t\t{ \n\t\t\tfor (int k=0; k<=o; k++) \n\t\t\t{ \n\t\t\t\tif (i == 0 || j == 0||k==0) \n\t\t\t\t\tL[i][j][k] = 0; \n\t\t\t\telse if (X[i-1] == Y[j-1] && X[i-1]==Z[k-1]) \n\t\t\t\t\tL[i][j][k] = L[i-1][j-1][k-1] + 1; \n\t\t\t\telse\n\t\t\t\t\tL[i][j][k] = max(L[i-1][j][k], L[i][j-1][k],L[i][j][k-1]); \n\t\t\t} \n\t\t} \n\t} \n\treturn L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122519,
      "stdout": "",
      "stderr": "/tmp/tmpneixystr.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpneixystr.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpneixystr.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpneixystr.d(14): Error: variable `m` cannot be read at compile time\n/tmp/tmpneixystr.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpneixystr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length; \n\tint n = Y.length; \n\tint o = Z.length; \n\t\n\tint[][][] L = new int[m + 1][n + 1][o + 1]; \n\t\n\tfor (int i = 0; i <= m; i++) \n\t{ \n\t\tfor (int j = 0; j <= n; j++) \n\t\t{ \n\t\t\tfor (int k = 0; k <= o; k++) \n\t\t\t{ \n\t\t\t\tif (i == 0 || j == 0 || k == 0) \n\t\t\t\t\tL[i][j][k] = 0; \n\t\t\t\t\n\t\t\t\telse if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n\t\t\t\t\tL[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n\t\t\t\t\n\t\t\t\telse\n\t\t\t\t\tL[i][j][k] = max(L[i - 1][j][k], \n\t\t\t\t\t\t\t\t\tL[i][j - 1][k], \n\t\t\t\t\t\t\t\t\tL[i][j][k - 1]); \n\t\t\t} \n\t\t} \n\t} \n\t\n\treturn L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122519,
      "stdout": "",
      "stderr": "/tmp/tmpxn9ymh0c.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpxn9ymh0c.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpxn9ymh0c.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpxn9ymh0c.d(14): Error: variable `m` cannot be read at compile time\n/tmp/tmpxn9ymh0c.d(29): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxn9ymh0c.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length; \n\tint n = Y.length; \n\tint o = Z.length; \n\t\n\tint[][][] L = new int[m+1][n+1][o+1]; \n\t\n\tfor (int i=0; i<=m; i++) \n\t{ \n\t\tfor (int j=0; j<=n; j++) \n\t\t{ \n\t\t\tfor (int k=0; k<=o; k++) \n\t\t\t{ \n\t\t\t\tif (i == 0 || j == 0||k==0) \n\t\t\t\t\tL[i][j][k] = 0; \n\t\t\t\telse if (X[i-1] == Y[j-1] && X[i-1]==Z[k-1]) \n\t\t\t\t\tL[i][j][k] = L[i-1][j-1][k-1] + 1; \n\t\t\t\telse\n\t\t\t\t\tL[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1]); \n\t\t\t} \n\t\t} \n\t} \n\treturn L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517282,
      "stdout": "",
      "stderr": "/tmp/tmp7t9dpcr2.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmp7t9dpcr2.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmp7t9dpcr2.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmp7t9dpcr2.d(14): Error: variable `m` cannot be read at compile time\n/tmp/tmp7t9dpcr2.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7t9dpcr2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n  \n    int L[][][] = new int[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) { \n        for (int j = 0; j <= n; j++) { \n            for (int k = 0; k <= o; k++) { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(max(L[i - 1][j][k], \n                                        L[i][j - 1][k]), \n                                    L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122519,
      "stdout": "",
      "stderr": "/tmp/tmpgkn44n34.d(14): Deprecation: instead of C-style syntax, use D-style syntax `int[][][] L`\n/tmp/tmpgkn44n34.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpgkn44n34.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpgkn44n34.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpgkn44n34.d(14): Error: variable `m` cannot be read at compile time\n/tmp/tmpgkn44n34.d(26): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgkn44n34.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    long m = X.length; \n    long n = Y.length; \n    long o = Z.length; \n  \n    long L[][][] = new long[m + 1][n + 1][o + 1]; \n  \n    for (long i = 0; i <= m; i++) \n    { \n        for (long j = 0; j <= n; j++) \n        { \n            for (long k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(L[i - 1][j][k], \n                                     L[i][j - 1][k], \n                                     L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122518,
      "stdout": "",
      "stderr": "/tmp/tmpg1c6tmed.d(14): Deprecation: instead of C-style syntax, use D-style syntax `long[][][] L`\n/tmp/tmpg1c6tmed.d(14): Error: variable `m` cannot be read at compile time\n/tmp/tmpg1c6tmed.d(29): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg1c6tmed.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n    int[][][] L = new int[m + 1][n + 1][o + 1]; \n  \n    /* Following steps build L[m+1][n+1][o+1] in bottom up fashion. Note  \n         that L[i][j][k] contains length of LCS of X[0..i-1] and Y[0..j-1] \n         and Z[0..k-1]*/\n    for (int i = 0; i <= m; i++) \n    { \n        for (int j = 0; j <= n; j++) \n        { \n            for (int k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    /* L[m][n][o] contains length of LCS for X[0..n-1] and Y[0..m-1] and Z[0..o-1]*/\n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122519,
      "stdout": "",
      "stderr": "/tmp/tmpvn1f2qss.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpvn1f2qss.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpvn1f2qss.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpvn1f2qss.d(13): Error: variable `m` cannot be read at compile time\n/tmp/tmpvn1f2qss.d(31): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvn1f2qss.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n  \n    int[][][] L = new int[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) \n    { \n        for (int j = 0; j <= n; j++) \n        { \n            for (int k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(L[i - 1][j][k], \n                                     L[i][j - 1][k], \n                                     L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122519,
      "stdout": "",
      "stderr": "/tmp/tmpqmt4mop2.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpqmt4mop2.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpqmt4mop2.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpqmt4mop2.d(14): Error: variable `m` cannot be read at compile time\n/tmp/tmpqmt4mop2.d(29): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqmt4mop2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length; \n\tint n = Y.length; \n\tint o = Z.length; \n\t\n\tint[][][] L = new int[m + 1][n + 1][o + 1]; \n\t\n\tfor (int i = 0; i <= m; i++) \n\t{ \n\t\tfor (int j = 0; j <= n; j++) \n\t\t{ \n\t\t\tfor (int k = 0; k <= o; k++) \n\t\t\t{ \n\t\t\t\tif (i == 0 || j == 0 || k == 0) \n\t\t\t\t\tL[i][j][k] = 0; \n\t\t\t\telse if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n\t\t\t\t\tL[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n\t\t\t\telse\n\t\t\t\t\tL[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]); \n\t\t\t} \n\t\t} \n\t} \n\t\n\treturn L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122519,
      "stdout": "",
      "stderr": "/tmp/tmpi19vyn7x.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpi19vyn7x.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpi19vyn7x.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpi19vyn7x.d(14): Error: variable `m` cannot be read at compile time\n/tmp/tmpi19vyn7x.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi19vyn7x.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n  \n    int[][][] L = new int[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) \n    { \n        for (int j = 0; j <= n; j++) \n        { \n            for (int k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(L[i - 1][j][k], \n                                     L[i][j - 1][k], \n                                     L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122519,
      "stdout": "",
      "stderr": "/tmp/tmpqmt4mop2.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpqmt4mop2.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpqmt4mop2.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpqmt4mop2.d(14): Error: variable `m` cannot be read at compile time\n/tmp/tmpqmt4mop2.d(29): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqmt4mop2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n  \n    int[][][] L = new int[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) \n    { \n        for (int j = 0; j <= n; j++) \n        { \n            for (int k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(L[i - 1][j][k], \n                                     L[i][j - 1][k], \n                                     L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122519,
      "stdout": "",
      "stderr": "/tmp/tmpqmt4mop2.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpqmt4mop2.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpqmt4mop2.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpqmt4mop2.d(14): Error: variable `m` cannot be read at compile time\n/tmp/tmpqmt4mop2.d(29): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqmt4mop2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length; \n\tint n = Y.length; \n\tint o = Z.length; \n\t\n\tint[][][] L = new int[m + 1][n + 1][o + 1]; \n\t\n\tfor (int i = 0; i <= m; i++) \n\t{ \n\t\tfor (int j = 0; j <= n; j++) \n\t\t{ \n\t\t\tfor (int k = 0; k <= o; k++) \n\t\t\t{ \n\t\t\t\tif (i == 0 || j == 0||k==0) \n\t\t\t\t\tL[i][j][k] = 0; \n\t\t\t\telse if (X[i - 1] == Y[j - 1] && X[i - 1]==Z[k - 1]) \n\t\t\t\t\tL[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n\t\t\t\telse\n\t\t\t\t\tL[i][j][k] = max(L[i - 1][j][k], \n\t\t\t\t\t\t\t\t\tL[i][j - 1][k], \n\t\t\t\t\t\t\t\t\tL[i][j][k - 1]); \n\t\t\t} \n\t\t} \n\t} \n\treturn L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122519,
      "stdout": "",
      "stderr": "/tmp/tmpx05ztysz.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpx05ztysz.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpx05ztysz.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpx05ztysz.d(14): Error: variable `m` cannot be read at compile time\n/tmp/tmpx05ztysz.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx05ztysz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n  \n    int[][][] L = new int[m+1][n+1][o+1]; \n  \n    /* Following steps build L[m+1][n+1][o+1] in bottom up fashion. Note \n       that L[i][j][k] contains length of LCS of X[0..i-1] and Y[0..j-1] \n       and Z[0..k-1]*/\n    for (int i = 0; i <= m; i++) \n    { \n        for (int j = 0; j <= n; j++) \n        { \n            for (int k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0||k==0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i-1] == Y[j-1] && X[i-1]==Z[k-1]) \n                    L[i][j][k] = L[i-1][j-1][k-1] + 1; \n  \n                else\n                    L[i][j][k] = max(max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1]); \n            } \n        } \n    } \n  \n    /* L[m][n][o] contains length of LCS for X[0..n-1] and Y[0..m-1] and Z[0..o-1]*/\n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122519,
      "stdout": "",
      "stderr": "/tmp/tmp60e5t8is.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmp60e5t8is.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmp60e5t8is.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmp60e5t8is.d(14): Error: variable `m` cannot be read at compile time\n/tmp/tmp60e5t8is.d(32): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp60e5t8is.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n    int[][][] L = new int[m + 1][n + 1][o + 1]; \n  \n    /* Following steps build L[m+1][n+1][o+1] in bottom up fashion. Note  \n         that L[i][j][k] contains length of LCS of X[0..i-1] and Y[0..j-1] \n         and Z[0..k-1]*/\n    for (int i = 0; i <= m; i++) \n    { \n        for (int j = 0; j <= n; j++) \n        { \n            for (int k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], \n                                     L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    /* L[m][n][o] contains length of LCS for X[0..n-1] and Y[0..m-1] and Z[0..o-1]*/\n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122519,
      "stdout": "",
      "stderr": "/tmp/tmp3qa5whix.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmp3qa5whix.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmp3qa5whix.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmp3qa5whix.d(13): Error: variable `m` cannot be read at compile time\n/tmp/tmp3qa5whix.d(31): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3qa5whix.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length; \n\tint n = Y.length; \n\tint o = Z.length; \n\tint L[m + 1][n + 1][o + 1]; \n\t\n\tfor (int i = 0; i <= m; i++) \n\t{ \n\t\tfor (int j = 0; j <= n; j++) \n\t\t{ \n\t\t\tfor (int k = 0; k <= o; k++) \n\t\t\t{ \n\t\t\t\tif (i == 0 || j == 0||k==0) \n\t\t\t\t\tL[i][j][k] = 0; \n\t\t\t\telse if (X[i - 1] == Y[j - 1] && X[i - 1]==Z[k - 1]) \n\t\t\t\t\tL[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n\t\t\t\telse\n\t\t\t\t\tL[i][j][k] = max(max(L[i - 1][j][k], \n\t\t\t\t\t\t\t\t\tL[i][j - 1][k]), \n\t\t\t\t\t\t\t\t\tL[i][j][k - 1]); \n\t\t\t} \n\t\t} \n\t} \n\treturn L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122518,
      "stdout": "",
      "stderr": "/tmp/tmp7m17vgav.d(13): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmp7m17vgav.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmp7m17vgav.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmp7m17vgav.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmp7m17vgav.d(13): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7m17vgav.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{\n\tint m = X.length;\n\tint n = Y.length;\n\tint o = Z.length;\n\t\n\tint[][][] L = new int[m+1][n+1][o+1];\n\t\n\tfor(int i = 0; i <= m; i++)\n\t{\n\t\tfor(int j = 0; j <= n; j++)\n\t\t{\n\t\t\tfor(int k = 0; k <= o; k++)\n\t\t\t{\n\t\t\t\tif(i == 0 || j == 0 || k == 0)\n\t\t\t\t\tL[i][j][k] = 0;\n\t\t\t\telse if(X[i-1] == Y[j-1] && X[i-1] == Z[k-1])\n\t\t\t\t\tL[i][j][k] = L[i-1][j-1][k-1] + 1;\n\t\t\t\telse\n\t\t\t\t\tL[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1]);\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn L[m][n][o];\n}\nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122519,
      "stdout": "",
      "stderr": "/tmp/tmpxjjtbw2r.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpxjjtbw2r.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpxjjtbw2r.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpxjjtbw2r.d(14): Error: variable `m` cannot be read at compile time\n/tmp/tmpxjjtbw2r.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxjjtbw2r.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length; \n\tint n = Y.length; \n\tint o = Z.length; \n\t\n\tint[][][] L = new int[m + 1][n + 1][o + 1]; \n\t\n\tfor (int i = 0; i <= m; i++) \n\t{ \n\t\tfor (int j = 0; j <= n; j++) \n\t\t{ \n\t\t\tfor (int k = 0; k <= o; k++) \n\t\t\t{ \n\t\t\t\tif (i == 0 || j == 0||k==0) \n\t\t\t\t\tL[i][j][k] = 0; \n\t\t\t\telse if (X[i - 1] == Y[j - 1] && X[i - 1]==Z[k - 1]) \n\t\t\t\t\tL[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n\t\t\t\telse\n\t\t\t\t\tL[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]); \n\t\t\t} \n\t\t} \n\t} \n\treturn L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122519,
      "stdout": "",
      "stderr": "/tmp/tmpymxuegg1.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpymxuegg1.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpymxuegg1.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpymxuegg1.d(14): Error: variable `m` cannot be read at compile time\n/tmp/tmpymxuegg1.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpymxuegg1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n  \n    int L[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) \n    { \n        for (int j = 0; j <= n; j++) \n        { \n            for (int k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(max(L[i - 1][j][k], \n                                        L[i][j - 1][k]), \n                                    L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122519,
      "stdout": "",
      "stderr": "/tmp/tmp7lpqlbt0.d(14): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmp7lpqlbt0.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmp7lpqlbt0.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmp7lpqlbt0.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmp7lpqlbt0.d(14): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7lpqlbt0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length; \n\tint n = Y.length; \n\tint o = Z.length; \n\t\n\tint[][][] L = new int[m + 1][n + 1][o + 1]; \n\t\n\tfor (int i = 0; i <= m; i++) \n\t{ \n\t\tfor (int j = 0; j <= n; j++) \n\t\t{ \n\t\t\tfor (int k = 0; k <= o; k++) \n\t\t\t{ \n\t\t\t\tif (i == 0 || j == 0||k==0) \n\t\t\t\t\tL[i][j][k] = 0; \n\t\t\t\telse if (X[i - 1] == Y[j - 1] && X[i - 1]==Z[k - 1]) \n\t\t\t\t\tL[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n\t\t\t\telse\n\t\t\t\t\tL[i][j][k] = max(L[i - 1][j][k], \n\t\t\t\t\t\t\t\t\tL[i][j - 1][k], \n\t\t\t\t\t\t\t\t\tL[i][j][k - 1]); \n\t\t\t} \n\t\t} \n\t} \n\treturn L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122519,
      "stdout": "",
      "stderr": "/tmp/tmpx05ztysz.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpx05ztysz.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpx05ztysz.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpx05ztysz.d(14): Error: variable `m` cannot be read at compile time\n/tmp/tmpx05ztysz.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx05ztysz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n  \n    int L[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) \n    { \n        for (int j = 0; j <= n; j++) \n        { \n            for (int k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(max(L[i - 1][j][k], \n                                        L[i][j - 1][k]), \n                                    L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122519,
      "stdout": "",
      "stderr": "/tmp/tmp7lpqlbt0.d(14): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmp7lpqlbt0.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmp7lpqlbt0.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmp7lpqlbt0.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmp7lpqlbt0.d(14): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7lpqlbt0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length; \n\tint n = Y.length; \n\tint o = Z.length; \n\t\n\tint[][][] L = new int[m + 1][n + 1][o + 1]; \n\t\n\tfor (int i = 0; i <= m; i++) \n\t{ \n\t\tfor (int j = 0; j <= n; j++) \n\t\t{ \n\t\t\tfor (int k = 0; k <= o; k++) \n\t\t\t{ \n\t\t\t\tif (i == 0 || j == 0||k==0) \n\t\t\t\t\tL[i][j][k] = 0; \n\t\t\t\t\n\t\t\t\telse if (X[i - 1] == Y[j - 1] && X[i - 1]==Z[k - 1]) \n\t\t\t\t\tL[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n\t\t\t\t\n\t\t\t\telse\n\t\t\t\t\tL[i][j][k] = max(L[i - 1][j][k], \n\t\t\t\t\t\t\t\t\tL[i][j - 1][k], \n\t\t\t\t\t\t\t\t\tL[i][j][k - 1]); \n\t\t\t} \n\t\t} \n\t} \n\treturn L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122519,
      "stdout": "",
      "stderr": "/tmp/tmpdnwu90t5.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpdnwu90t5.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpdnwu90t5.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpdnwu90t5.d(14): Error: variable `m` cannot be read at compile time\n/tmp/tmpdnwu90t5.d(29): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdnwu90t5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length; \n\tint n = Y.length; \n\tint o = Z.length; \n\t\n\tint L[m+1][n+1][o+1]; \n\t\n\tfor (int i=0; i<=m; i++) \n\t{ \n\t\tfor (int j=0; j<=n; j++) \n\t\t{ \n\t\t\tfor (int k=0; k<=o; k++) \n\t\t\t{ \n\t\t\t\tif (i == 0 || j == 0||k==0) \n\t\t\t\t\tL[i][j][k] = 0; \n\t\t\t\telse if (X[i-1] == Y[j-1] && X[i-1]==Z[k-1]) \n\t\t\t\t\tL[i][j][k] = L[i-1][j-1][k-1] + 1; \n\t\t\t\telse\n\t\t\t\t\tL[i][j][k] = max(max(L[i-1][j][k], L[i][j-1][k]),L[i][j][k-1]); \n\t\t\t} \n\t\t} \n\t} \n\treturn L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517282,
      "stdout": "",
      "stderr": "/tmp/tmpvh9e9eyu.d(14): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmpvh9e9eyu.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpvh9e9eyu.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpvh9e9eyu.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpvh9e9eyu.d(14): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvh9e9eyu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length; \n\tint n = Y.length; \n\tint o = Z.length; \n\t\n\tint[][][] L = new int[m + 1][n + 1][o + 1]; \n\t\n\tfor (int i = 0; i <= m; i++) \n\t{ \n\t\tfor (int j = 0; j <= n; j++) \n\t\t{ \n\t\t\tfor (int k = 0; k <= o; k++) \n\t\t\t{ \n\t\t\t\tif (i == 0 || j == 0||k==0) \n\t\t\t\t\tL[i][j][k] = 0; \n\t\t\t\telse if (X[i - 1] == Y[j - 1] && X[i - 1]==Z[k - 1]) \n\t\t\t\t\tL[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n\t\t\t\telse\n\t\t\t\t\tL[i][j][k] = max(L[i - 1][j][k], \n\t\t\t\t\t\t\t\t\tL[i][j - 1][k], \n\t\t\t\t\t\t\t\t\tL[i][j][k - 1]); \n\t\t\t} \n\t\t} \n\t} \n\treturn L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122519,
      "stdout": "",
      "stderr": "/tmp/tmpx05ztysz.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpx05ztysz.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpx05ztysz.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpx05ztysz.d(14): Error: variable `m` cannot be read at compile time\n/tmp/tmpx05ztysz.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx05ztysz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length; \n\tint n = Y.length; \n\tint o = Z.length; \n\tint L[m + 1][n + 1][o + 1]; \n\tint i, j, k; \n\tfor (i = 0; i <= m; i++) \n\t{ \n\t\tfor (j = 0; j <= n; j++) \n\t\t{ \n\t\t\tfor (k = 0; k <= o; k++) \n\t\t\t{ \n\t\t\t\tif (i == 0 || j == 0 || k == 0) \n\t\t\t\t\tL[i][j][k] = 0; \n\t\t\t\telse if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n\t\t\t\t\tL[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n\t\t\t\telse\n\t\t\t\t\tL[i][j][k] = max(max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]); \n\t\t\t} \n\t\t} \n\t} \n\treturn L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122519,
      "stdout": "",
      "stderr": "/tmp/tmput_vt46t.d(13): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmput_vt46t.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmput_vt46t.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmput_vt46t.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmput_vt46t.d(13): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmput_vt46t.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length; \n\tint n = Y.length; \n\tint o = Z.length; \n\tint[][][] L = new int[m + 1][n + 1][o + 1]; \n\t\n\tfor (int i = 0; i <= m; i++) \n\t{ \n\t\tfor (int j = 0; j <= n; j++) \n\t\t{ \n\t\t\tfor (int k = 0; k <= o; k++) \n\t\t\t{ \n\t\t\t\tif (i == 0 || j == 0||k==0) \n\t\t\t\t\tL[i][j][k] = 0; \n\t\t\t\telse if (X[i - 1] == Y[j - 1] && X[i - 1]==Z[k - 1]) \n\t\t\t\t\tL[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n\t\t\t\telse\n\t\t\t\t\tL[i][j][k] = max(L[i - 1][j][k], \n\t\t\t\t\t\t\t\t\tL[i][j - 1][k], \n\t\t\t\t\t\t\t\t\tL[i][j][k - 1]); \n\t\t\t} \n\t\t} \n\t} \n\treturn L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122519,
      "stdout": "",
      "stderr": "/tmp/tmpi034eggb.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpi034eggb.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpi034eggb.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpi034eggb.d(13): Error: variable `m` cannot be read at compile time\n/tmp/tmpi034eggb.d(26): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi034eggb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n  \n    int[][][] L = new int[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) { \n        for (int j = 0; j <= n; j++) { \n            for (int k = 0; k <= o; k++) { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n                else\n                    L[i][j][k] = max(max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]); \n            } \n        } \n    } \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122519,
      "stdout": "",
      "stderr": "/tmp/tmpykxsgcuk.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpykxsgcuk.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpykxsgcuk.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpykxsgcuk.d(14): Error: variable `m` cannot be read at compile time\n/tmp/tmpykxsgcuk.d(24): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpykxsgcuk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length; \n\tint n = Y.length; \n\tint o = Z.length; \n\t\n\tint[][][] L = new int[m + 1][n + 1][o + 1]; \n\t\n\tfor (int i = 0; i <= m; i++) \n\t{ \n\t\tfor (int j = 0; j <= n; j++) \n\t\t{ \n\t\t\tfor (int k = 0; k <= o; k++) \n\t\t\t{ \n\t\t\t\tif (i == 0 || j == 0 || k == 0) \n\t\t\t\t\tL[i][j][k] = 0; \n\t\t\t\telse if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n\t\t\t\t\tL[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n\t\t\t\telse\n\t\t\t\t\tL[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]); \n\t\t\t} \n\t\t} \n\t} \n\treturn L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517282,
      "stdout": "",
      "stderr": "/tmp/tmpo151sqe6.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpo151sqe6.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpo151sqe6.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpo151sqe6.d(14): Error: variable `m` cannot be read at compile time\n/tmp/tmpo151sqe6.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo151sqe6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n  \n    int L[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) \n    { \n        for (int j = 0; j <= n; j++) \n        { \n            for (int k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0||k==0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1]==Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k-1] + 1; \n  \n                else\n                    L[i][j][k] = max(max(L[i - 1][j][k], \n                                         L[i][j - 1][k]), \n                                     L[i][j][k-1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122519,
      "stdout": "",
      "stderr": "/tmp/tmp01jyc3lm.d(14): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmp01jyc3lm.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmp01jyc3lm.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmp01jyc3lm.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmp01jyc3lm.d(14): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp01jyc3lm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length; \n\tint n = Y.length; \n\tint o = Z.length; \n\t\n\tint L[m+1][n+1][o+1]; \n\t\n\tfor (int i=0; i<=m; i++) \n\t{ \n\t\tfor (int j=0; j<=n; j++) \n\t\t{ \n\t\t\tfor (int k=0; k<=o; k++) \n\t\t\t{ \n\t\t\t\tif (i == 0 || j == 0||k==0) \n\t\t\t\t\tL[i][j][k] = 0; \n\t\t\t\telse if (X[i-1] == Y[j-1] && X[i-1]==Z[k-1]) \n\t\t\t\t\tL[i][j][k] = L[i-1][j-1][k-1] + 1; \n\t\t\t\telse\n\t\t\t\t\tL[i][j][k] = max(max(L[i-1][j][k], \n\t\t\t\t\t\t\t\t\t\tL[i][j-1][k]), \n\t\t\t\t\t\t\t\t\tL[i][j][k-1]); \n\t\t\t} \n\t\t} \n\t} \n\t\n\treturn L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122519,
      "stdout": "",
      "stderr": "/tmp/tmp3d0shvg3.d(14): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmp3d0shvg3.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmp3d0shvg3.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmp3d0shvg3.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmp3d0shvg3.d(14): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3d0shvg3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length; \n\tint n = Y.length; \n\tint o = Z.length; \n\t\n\tint[][][] L = new int[m + 1][n + 1][o + 1]; \n\t\n\tfor (int i = 0; i <= m; i++) \n\t{ \n\t\tfor (int j = 0; j <= n; j++) \n\t\t{ \n\t\t\tfor (int k = 0; k <= o; k++) \n\t\t\t{ \n\t\t\t\tif (i == 0 || j == 0 || k == 0) \n\t\t\t\t\tL[i][j][k] = 0; \n\t\t\t\telse if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n\t\t\t\t\tL[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n\t\t\t\telse\n\t\t\t\t\tL[i][j][k] = max(L[i - 1][j][k], \n\t\t\t\t\t\t\t\t\tL[i][j - 1][k], \n\t\t\t\t\t\t\t\t\tL[i][j][k - 1]); \n\t\t\t} \n\t\t} \n\t} \n\treturn L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122519,
      "stdout": "",
      "stderr": "/tmp/tmp065pxjhv.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmp065pxjhv.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmp065pxjhv.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmp065pxjhv.d(14): Error: variable `m` cannot be read at compile time\n/tmp/tmp065pxjhv.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp065pxjhv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length; \n\tint n = Y.length; \n\tint o = Z.length; \n\tint[][][] L = new int[m + 1][n + 1][o + 1]; \n\tfor (int i = 0; i <= m; i++) \n\t{ \n\t\tfor (int j = 0; j <= n; j++) \n\t\t{ \n\t\t\tfor (int k = 0; k <= o; k++) \n\t\t\t{ \n\t\t\t\tif (i == 0 || j == 0||k==0) \n\t\t\t\t\tL[i][j][k] = 0; \n\t\t\t\telse if (X[i - 1] == Y[j - 1] && X[i - 1]==Z[k - 1]) \n\t\t\t\t\tL[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n\t\t\t\telse\n\t\t\t\t\tL[i][j][k] = max(max(L[i - 1][j][k], \n\t\t\t\t\t\t\t\t\t\tL[i][j - 1][k]), \n\t\t\t\t\t\t\t\t\tL[i][j][k - 1]); \n\t\t\t} \n\t\t} \n\t} \n\treturn L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122519,
      "stdout": "",
      "stderr": "/tmp/tmp0kqnt15z.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmp0kqnt15z.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmp0kqnt15z.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmp0kqnt15z.d(13): Error: variable `m` cannot be read at compile time\n/tmp/tmp0kqnt15z.d(25): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0kqnt15z.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n  \n    int L[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) { \n        for (int j = 0; j <= n; j++) { \n            for (int k = 0; k <= o; k++) { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(max(L[i - 1][j][k], \n                                        L[i][j - 1][k]), \n                                    L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122519,
      "stdout": "",
      "stderr": "/tmp/tmpepw_rck5.d(14): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmpepw_rck5.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpepw_rck5.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpepw_rck5.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpepw_rck5.d(14): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpepw_rck5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length; \n\tint n = Y.length; \n\tint o = Z.length; \n\tint[][][] L = new int[m + 1][n + 1][o + 1]; \n\tfor (int i = 0; i <= m; i++) \n\t{ \n\t\tfor (int j = 0; j <= n; j++) \n\t\t{ \n\t\t\tfor (int k = 0; k <= o; k++) \n\t\t\t{ \n\t\t\t\tif (i == 0 || j == 0 || k == 0) \n\t\t\t\t\tL[i][j][k] = 0; \n\t\t\t\telse if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n\t\t\t\t\tL[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n\t\t\t\telse\n\t\t\t\t\tL[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]); \n\t\t\t} \n\t\t} \n\t} \n\treturn L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122518,
      "stdout": "",
      "stderr": "/tmp/tmpe6ss3nvo.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpe6ss3nvo.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpe6ss3nvo.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpe6ss3nvo.d(13): Error: variable `m` cannot be read at compile time\n/tmp/tmpe6ss3nvo.d(25): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe6ss3nvo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n  \n    int L[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) { \n        for (int j = 0; j <= n; j++) { \n            for (int k = 0; k <= o; k++) { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(L[i - 1][j][k], \n                                     L[i][j - 1][k], \n                                     L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122519,
      "stdout": "",
      "stderr": "/tmp/tmp7f7dpimy.d(14): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmp7f7dpimy.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmp7f7dpimy.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmp7f7dpimy.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmp7f7dpimy.d(14): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7f7dpimy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n  \n    int[][][] L = new int[m + 1][n + 1][o + 1]; \n  \n    /* Following steps build L[m+1][n+1][o+1] in bottom up fashion. Note \n       that L[i][j][k] contains length of LCS of X[0..i-1] and Y[0..j-1] \n       and Z[0..k-1]*/\n    for (int i = 0; i <= m; i++) \n    { \n        for (int j = 0; j <= n; j++) \n        { \n            for (int k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(L[i - 1][j][k], \n                                     L[i][j - 1][k], \n                                     L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    /* L[m][n][o] contains length of LCS for X[0..n-1] and \n       Y[0..m-1] and Z[0..o-1]*/\n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122519,
      "stdout": "",
      "stderr": "/tmp/tmp17o4ubta.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmp17o4ubta.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmp17o4ubta.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmp17o4ubta.d(14): Error: variable `m` cannot be read at compile time\n/tmp/tmp17o4ubta.d(32): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp17o4ubta.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n    int[][][] L = new int[m + 1][n + 1][o + 1]; \n  \n    /* Following steps build L[m+1][n+1][o+1] in bottom up fashion. Note  \n       that L[i][j][k] contains length of LCS of X[0..i-1] and Y[0..j-1] \n       and Z[0..k-1] */\n    for (int i = 0; i <= m; i++) \n    { \n        for (int j = 0; j <= n; j++) \n        { \n            for (int k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(L[i - 1][j][k], \n                                     L[i][j - 1][k], \n                                     L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    /* L[m][n][o] contains length of LCS for X[0..n-1] and  \n       Y[0..m-1] and Z[0..o-1]*/\n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122519,
      "stdout": "",
      "stderr": "/tmp/tmpu4l0yk_s.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpu4l0yk_s.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpu4l0yk_s.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpu4l0yk_s.d(13): Error: variable `m` cannot be read at compile time\n/tmp/tmpu4l0yk_s.d(31): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu4l0yk_s.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length; \n\tint n = Y.length; \n\tint o = Z.length; \n\t\n\tint[][][] L = new int[m + 1][n + 1][o + 1]; \n\t\n\tfor (int i = 0; i <= m; i++) \n\t{ \n\t\tfor (int j = 0; j <= n; j++) \n\t\t{ \n\t\t\tfor (int k = 0; k <= o; k++) \n\t\t\t{ \n\t\t\t\tif (i == 0 || j == 0 || k == 0) \n\t\t\t\t\tL[i][j][k] = 0; \n\t\t\t\telse if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n\t\t\t\t\tL[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n\t\t\t\telse\n\t\t\t\t\tL[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]); \n\t\t\t} \n\t\t} \n\t} \n\t\n\treturn L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122519,
      "stdout": "",
      "stderr": "/tmp/tmpi19vyn7x.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpi19vyn7x.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpi19vyn7x.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpi19vyn7x.d(14): Error: variable `m` cannot be read at compile time\n/tmp/tmpi19vyn7x.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi19vyn7x.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n  \n    int L[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) \n    { \n        for (int j = 0; j <= n; j++) \n        { \n            for (int k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(L[i - 1][j][k], \n                                     L[i][j - 1][k], \n                                     L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517282,
      "stdout": "",
      "stderr": "/tmp/tmp5b29kpaw.d(14): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmp5b29kpaw.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmp5b29kpaw.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmp5b29kpaw.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmp5b29kpaw.d(14): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5b29kpaw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length; \n\tint n = Y.length; \n\tint o = Z.length; \n\t\n\tint[][][] L = new int[m+1][n+1][o+1]; \n\t\n\tfor (int i=0; i<=m; i++) \n\t{ \n\t\tfor (int j=0; j<=n; j++) \n\t\t{ \n\t\t\tfor (int k=0; k<=o; k++) \n\t\t\t{ \n\t\t\t\tif (i == 0 || j == 0||k==0) \n\t\t\t\t\tL[i][j][k] = 0; \n\t\t\t\telse if (X[i-1] == Y[j-1] && X[i-1]==Z[k-1]) \n\t\t\t\t\tL[i][j][k] = L[i-1][j-1][k-1] + 1; \n\t\t\t\telse\n\t\t\t\t\tL[i][j][k] = max(max(L[i-1][j][k], \n\t\t\t\t\t\t\t\t\tL[i][j-1][k]), \n\t\t\t\t\t\t\t\t\tL[i][j][k-1]); \n\t\t\t} \n\t\t} \n\t} \n\treturn L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122519,
      "stdout": "",
      "stderr": "/tmp/tmp7_bm9dt5.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmp7_bm9dt5.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmp7_bm9dt5.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmp7_bm9dt5.d(14): Error: variable `m` cannot be read at compile time\n/tmp/tmp7_bm9dt5.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7_bm9dt5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length; \n\tint n = Y.length; \n\tint o = Z.length; \n\t\n\tint[][][] L = new int[m + 1][n + 1][o + 1]; \n\t\n\tfor (int i = 0; i <= m; i++) \n\t{ \n\t\tfor (int j = 0; j <= n; j++) \n\t\t{ \n\t\t\tfor (int k = 0; k <= o; k++) \n\t\t\t{ \n\t\t\t\tif (i == 0 || j == 0 || k == 0) \n\t\t\t\t\tL[i][j][k] = 0; \n\t\t\t\telse if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n\t\t\t\t\tL[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n\t\t\t\telse\n\t\t\t\t\tL[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]); \n\t\t\t} \n\t\t} \n\t} \n\treturn L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517282,
      "stdout": "",
      "stderr": "/tmp/tmpo151sqe6.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpo151sqe6.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpo151sqe6.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpo151sqe6.d(14): Error: variable `m` cannot be read at compile time\n/tmp/tmpo151sqe6.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo151sqe6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length; \n\tint n = Y.length; \n\tint o = Z.length; \n\tint L[m + 1][n + 1][o + 1]; \n\tint i, j, k; \n\tfor (i = 0; i <= m; i++) \n\t{ \n\t\tfor (j = 0; j <= n; j++) \n\t\t{ \n\t\t\tfor (k = 0; k <= o; k++) \n\t\t\t{ \n\t\t\t\tif (i == 0 || j == 0 || k == 0) \n\t\t\t\t\tL[i][j][k] = 0; \n\t\t\t\telse if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n\t\t\t\t\tL[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n\t\t\t\telse\n\t\t\t\t\tL[i][j][k] = max(max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]); \n\t\t\t} \n\t\t} \n\t} \n\treturn L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122519,
      "stdout": "",
      "stderr": "/tmp/tmput_vt46t.d(13): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmput_vt46t.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmput_vt46t.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmput_vt46t.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmput_vt46t.d(13): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmput_vt46t.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n    int L[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) { \n        for (int j = 0; j <= n; j++) { \n            for (int k = 0; k <= o; k++) { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(max(L[i - 1][j][k], \n                                        L[i][j - 1][k]), \n                                    L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122519,
      "stdout": "",
      "stderr": "/tmp/tmp3qv393_i.d(13): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmp3qv393_i.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmp3qv393_i.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmp3qv393_i.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmp3qv393_i.d(13): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3qv393_i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n  \n    int[][][] L = new int[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) \n    { \n        for (int j = 0; j <= n; j++) \n        { \n            for (int k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517282,
      "stdout": "",
      "stderr": "/tmp/tmp7l8qlnur.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmp7l8qlnur.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmp7l8qlnur.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmp7l8qlnur.d(14): Error: variable `m` cannot be read at compile time\n/tmp/tmp7l8qlnur.d(29): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7l8qlnur.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length; \n\tint n = Y.length; \n\tint o = Z.length; \n\t\n\tint[][][] L = new int[m + 1][n + 1][o + 1]; \n\t\n\tfor (int i = 0; i <= m; i++) \n\t{ \n\t\tfor (int j = 0; j <= n; j++) \n\t\t{ \n\t\t\tfor (int k = 0; k <= o; k++) \n\t\t\t{ \n\t\t\t\tif (i == 0 || j == 0||k==0) \n\t\t\t\t\tL[i][j][k] = 0; \n\t\t\t\telse if (X[i - 1] == Y[j - 1] && X[i - 1]==Z[k - 1]) \n\t\t\t\t\tL[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n\t\t\t\telse\n\t\t\t\t\tL[i][j][k] = max(max(L[i - 1][j][k], \n\t\t\t\t\t\t\t\t\t\tL[i][j - 1][k]), \n\t\t\t\t\t\t\t\t\tL[i][j][k - 1]); \n\t\t\t} \n\t\t} \n\t} \n\treturn L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122519,
      "stdout": "",
      "stderr": "/tmp/tmpjc8xkn_y.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpjc8xkn_y.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpjc8xkn_y.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpjc8xkn_y.d(14): Error: variable `m` cannot be read at compile time\n/tmp/tmpjc8xkn_y.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjc8xkn_y.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length; \n\tint n = Y.length; \n\tint o = Z.length; \n\tint L[m + 1][n + 1][o + 1]; \n\t\n\tfor (int i = 0; i <= m; i++) \n\t{ \n\t\tfor (int j = 0; j <= n; j++) \n\t\t{ \n\t\t\tfor (int k = 0; k <= o; k++) \n\t\t\t{ \n\t\t\t\tif (i == 0 || j == 0||k==0) \n\t\t\t\t\tL[i][j][k] = 0; \n\t\t\t\telse if (X[i - 1] == Y[j - 1] && X[i - 1]==Z[k - 1]) \n\t\t\t\t\tL[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n\t\t\t\telse\n\t\t\t\t\tL[i][j][k] = max(max(L[i - 1][j][k], \n\t\t\t\t\t\t\t\t\t\tL[i][j - 1][k]), \n\t\t\t\t\t\t\t\t\tL[i][j][k - 1]); \n\t\t\t} \n\t\t} \n\t} \n\treturn L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517282,
      "stdout": "",
      "stderr": "/tmp/tmpt5383bmr.d(13): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmpt5383bmr.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpt5383bmr.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpt5383bmr.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpt5383bmr.d(13): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt5383bmr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n  \n    int L[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) \n    { \n        for (int j = 0; j <= n; j++) \n        { \n            for (int k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0||k==0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1]==Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k-1] + 1; \n  \n                else\n                    L[i][j][k] = max(max(L[i - 1][j][k], \n                                         L[i][j - 1][k]), \n                                     L[i][j][k-1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122519,
      "stdout": "",
      "stderr": "/tmp/tmp01jyc3lm.d(14): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmp01jyc3lm.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmp01jyc3lm.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmp01jyc3lm.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmp01jyc3lm.d(14): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp01jyc3lm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length; \n\tint n = Y.length; \n\tint o = Z.length; \n\t\n\tint[][][] L = new int[m + 1][n + 1][o + 1]; \n\t\n\tfor (int i = 0; i <= m; i++) \n\t{ \n\t\tfor (int j = 0; j <= n; j++) \n\t\t{ \n\t\t\tfor (int k = 0; k <= o; k++) \n\t\t\t{ \n\t\t\t\tif (i == 0 || j == 0 || k == 0) \n\t\t\t\t\tL[i][j][k] = 0; \n\t\t\t\telse if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n\t\t\t\t\tL[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n\t\t\t\telse\n\t\t\t\t\tL[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]); \n\t\t\t} \n\t\t} \n\t} \n\t\n\treturn L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122519,
      "stdout": "",
      "stderr": "/tmp/tmpi19vyn7x.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpi19vyn7x.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpi19vyn7x.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpi19vyn7x.d(14): Error: variable `m` cannot be read at compile time\n/tmp/tmpi19vyn7x.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi19vyn7x.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length; \n\tint n = Y.length; \n\tint o = Z.length; \n\t\n\tint[][][] L = new int[m+1][n+1][o+1]; \n\t\n\tfor (int i = 0; i <= m; i++) \n\t{ \n\t\tfor (int j = 0; j <= n; j++) \n\t\t{ \n\t\t\tfor (int k = 0; k <= o; k++) \n\t\t\t{ \n\t\t\t\tif (i == 0 || j == 0 || k == 0) \n\t\t\t\t\tL[i][j][k] = 0; \n\t\t\t\telse if (X[i-1] == Y[j-1] && X[i-1] == Z[k-1]) \n\t\t\t\t\tL[i][j][k] = L[i-1][j-1][k-1] + 1; \n\t\t\t\telse\n\t\t\t\t\tL[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1]); \n\t\t\t} \n\t\t} \n\t} \n\t\n\treturn L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122519,
      "stdout": "",
      "stderr": "/tmp/tmpbdhiyu8t.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpbdhiyu8t.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpbdhiyu8t.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpbdhiyu8t.d(14): Error: variable `m` cannot be read at compile time\n/tmp/tmpbdhiyu8t.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbdhiyu8t.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length; \n\tint n = Y.length; \n\tint o = Z.length; \n\tint L[m + 1][n + 1][o + 1]; \n\tfor (int i = 0; i <= m; i++) \n\t{ \n\t\tfor (int j = 0; j <= n; j++) \n\t\t{ \n\t\t\tfor (int k = 0; k <= o; k++) \n\t\t\t{ \n\t\t\t\tif (i == 0 || j == 0||k==0) \n\t\t\t\t\tL[i][j][k] = 0; \n\t\t\t\telse if (X[i - 1] == Y[j - 1] && X[i - 1]==Z[k - 1]) \n\t\t\t\t\tL[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n\t\t\t\telse\n\t\t\t\t\tL[i][j][k] = max(max(L[i - 1][j][k], \n\t\t\t\t\t\t\t\t\t\tL[i][j - 1][k]), \n\t\t\t\t\t\t\t\t\tL[i][j][k - 1]); \n\t\t\t} \n\t\t} \n\t} \n\treturn L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122519,
      "stdout": "",
      "stderr": "/tmp/tmpixdzute9.d(13): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmpixdzute9.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpixdzute9.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpixdzute9.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpixdzute9.d(13): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpixdzute9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n  \n    int L[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) \n    { \n        for (int j = 0; j <= n; j++) \n        { \n            for (int k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(L[i - 1][j][k], \n                                     L[i][j - 1][k], \n                                     L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1665517282,
      "stdout": "",
      "stderr": "/tmp/tmp5b29kpaw.d(14): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmp5b29kpaw.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmp5b29kpaw.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmp5b29kpaw.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmp5b29kpaw.d(14): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5b29kpaw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n  \n    int L[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) \n    { \n        for (int j = 0; j <= n; j++) \n        { \n            for (int k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(max(L[i - 1][j][k], \n                                        L[i][j - 1][k]), \n                                    L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122519,
      "stdout": "",
      "stderr": "/tmp/tmp7lpqlbt0.d(14): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmp7lpqlbt0.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmp7lpqlbt0.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmp7lpqlbt0.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmp7lpqlbt0.d(14): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7lpqlbt0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length; \n\tint n = Y.length; \n\tint o = Z.length; \n\t\n\tint[][][] L = new int[m+1][n+1][o+1]; \n\t\n\tfor (int i=0; i<=m; i++) \n\t{ \n\t\tfor (int j=0; j<=n; j++) \n\t\t{ \n\t\t\tfor (int k=0; k<=o; k++) \n\t\t\t{ \n\t\t\t\tif (i == 0 || j == 0||k==0) \n\t\t\t\t\tL[i][j][k] = 0; \n\t\t\t\telse if (X[i-1] == Y[j-1] && X[i-1]==Z[k-1]) \n\t\t\t\t\tL[i][j][k] = L[i-1][j-1][k-1] + 1; \n\t\t\t\telse\n\t\t\t\t\tL[i][j][k] = max(max(L[i-1][j][k], \n\t\t\t\t\t\t\t\t\tL[i][j-1][k]), \n\t\t\t\t\t\t\t\t\tL[i][j][k-1]); \n\t\t\t} \n\t\t} \n\t} \n\treturn L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122519,
      "stdout": "",
      "stderr": "/tmp/tmp7_bm9dt5.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmp7_bm9dt5.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmp7_bm9dt5.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmp7_bm9dt5.d(14): Error: variable `m` cannot be read at compile time\n/tmp/tmp7_bm9dt5.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7_bm9dt5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    size_t m = X.length(); \n    size_t n = Y.length(); \n    size_t o = Z.length(); \n    size_t L[m + 1][n + 1][o + 1]; \n    for (size_t i = 0; i <= m; i++) \n    { \n        for (size_t j = 0; j <= n; j++) \n        { \n            for (size_t k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0||k==0) \n                    L[i][j][k] = 0; \n                else if (X[i - 1] == Y[j - 1] && X[i - 1]==Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k-1] + 1; \n                else\n                    L[i][j][k] = max(max(L[i - 1][j][k], \n                                         L[i][j - 1][k]), \n                                     L[i][j][k-1]); \n            } \n        } \n    } \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122519,
      "stdout": "",
      "stderr": "/tmp/tmp4bxf98xv.d(13): Deprecation: instead of C-style syntax, use D-style syntax `size_t[o + 1][n + 1][m + 1] L`\n/tmp/tmp4bxf98xv.d(10): Error: no property `length` for type `string`\n/tmp/tmp4bxf98xv.d(11): Error: no property `length` for type `string`\n/tmp/tmp4bxf98xv.d(12): Error: no property `length` for type `string`\n/tmp/tmp4bxf98xv.d(13): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4bxf98xv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n\tint m = X.length; \n\tint n = Y.length; \n\tint o = Z.length; \n\tint[][][] L = new int[m + 1][n + 1][o + 1]; \n\t\n\tfor (int i = 0; i <= m; i++) \n\t{ \n\t\tfor (int j = 0; j <= n; j++) \n\t\t{ \n\t\t\tfor (int k = 0; k <= o; k++) \n\t\t\t{ \n\t\t\t\tif (i == 0 || j == 0||k==0) \n\t\t\t\t\tL[i][j][k] = 0; \n\t\t\t\telse if (X[i - 1] == Y[j - 1] && X[i - 1]==Z[k - 1]) \n\t\t\t\t\tL[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n\t\t\t\telse\n\t\t\t\t\tL[i][j][k] = max(L[i - 1][j][k], \n\t\t\t\t\t\t\t\t\tL[i][j - 1][k], \n\t\t\t\t\t\t\t\t\tL[i][j][k - 1]); \n\t\t\t} \n\t\t} \n\t} \n\treturn L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122519,
      "stdout": "",
      "stderr": "/tmp/tmpi034eggb.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpi034eggb.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpi034eggb.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpi034eggb.d(13): Error: variable `m` cannot be read at compile time\n/tmp/tmpi034eggb.d(26): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi034eggb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n    int[][][] L = new int[m + 1][n + 1][o + 1]; \n  \n    /* Following steps build L[m+1][n+1][o+1] in bottom up fashion. Note  \n       that L[i][j][k] contains length of LCS of X[0..i-1] and Y[0..j-1] \n       and Z[0..k-1] */\n    for (int i = 0; i <= m; i++) \n    { \n        for (int j = 0; j <= n; j++) \n        { \n            for (int k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    /* L[m][n][o] contains length of LCS for X[0..n-1] and Y[0..m-1] and Z[0..o-1]*/\n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122519,
      "stdout": "",
      "stderr": "/tmp/tmp17sf53p2.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmp17sf53p2.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmp17sf53p2.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmp17sf53p2.d(13): Error: variable `m` cannot be read at compile time\n/tmp/tmp17sf53p2.d(31): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp17sf53p2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n    int L[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) \n    { \n        for (int j = 0; j <= n; j++) \n        { \n            for (int k = 0; k <= o; k++) \n            { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n                else\n                    L[i][j][k] = max(L[i - 1][j][k], \n                                     L[i][j - 1][k], \n                                     L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122519,
      "stdout": "",
      "stderr": "/tmp/tmpv_dp0mny.d(13): Deprecation: instead of C-style syntax, use D-style syntax `int[o + 1][n + 1][m + 1] L`\n/tmp/tmpv_dp0mny.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmpv_dp0mny.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmpv_dp0mny.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmpv_dp0mny.d(13): Error: variable `o` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv_dp0mny.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\n*/\nlong lcs_of_three(string X, string Y, string Z) \n{ \n    int m = X.length; \n    int n = Y.length; \n    int o = Z.length; \n  \n    int[][][] L = new int[m + 1][n + 1][o + 1]; \n  \n    for (int i = 0; i <= m; i++) { \n        for (int j = 0; j <= n; j++) { \n            for (int k = 0; k <= o; k++) { \n                if (i == 0 || j == 0 || k == 0) \n                    L[i][j][k] = 0; \n  \n                else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1; \n  \n                else\n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]); \n            } \n        } \n    } \n  \n    return L[m][n][o]; \n} \nunittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}",
      "timestamp": 1666122518,
      "stdout": "",
      "stderr": "/tmp/tmp366kkjvn.d(10): Error: cannot implicitly convert expression `X.length` of type `ulong` to `int`\n/tmp/tmp366kkjvn.d(11): Error: cannot implicitly convert expression `Y.length` of type `ulong` to `int`\n/tmp/tmp366kkjvn.d(12): Error: cannot implicitly convert expression `Z.length` of type `ulong` to `int`\n/tmp/tmp366kkjvn.d(14): Error: variable `m` cannot be read at compile time\n/tmp/tmp366kkjvn.d(26): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp366kkjvn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}