{
  "name": "mbpp_771_check_expression",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\n*/\nbool check_expression(string exp) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_771_check_expression.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tint i;\n\tStack!char stack;\n\t\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse if(!isMatchingPair(stack.pop(), c))\n\t\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn stack.empty;\n}",
    "{\n\tauto stack = new Stack!char;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(!is_matching_pair(stack.pop(), c))\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}",
    "{\n\tauto stack = new Stack!char;\n\tforeach(c; exp) \n\t{\n\t\tif (c == '(' || c == '{' || c == '[') \n\t\t{\n\t\t\tstack.push(c);\n\t\t} \n\t\telse if (c == ')' || c == '}' || c == ']') \n\t\t{\n\t\t\tif (stack.empty) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tauto top = stack.pop;\n\t\t\tif (c == ')' && top != '(') \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (c == '}' && top != '{') \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (c == ']' && top != '[') \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}",
    "{\n\tauto stack = new Stack!char;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t\tstack.push(c);\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse if(!isMatchingPair(stack.pop, c))\n\t\t\t\treturn false;\n\t\t}\n\t}\n\treturn stack.empty;\n}",
    "{\n\tauto stack = new Stack!char;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '[' || c == '{')\n\t\t\tstack.push(c);\n\t\telse if(c == ')' || c == ']' || c == '}')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse\n\t\t\t{\n\t\t\t\tauto top = stack.pop;\n\t\t\t\tif(top == '(' && c != ')')\n\t\t\t\t\treturn false;\n\t\t\t\telse if(top == '[' && c != ']')\n\t\t\t\t\treturn false;\n\t\t\t\telse if(top == '{' && c != '}')\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}",
    "{\n\tint i;\n\tint len = exp.length;\n\tint flag = 0;\n\tStack!char st = new Stack!char;\n\tfor(i = 0; i < len; i++) \n\t{\n\t\tif(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') \n\t\t{\n\t\t\tst.push(exp[i]);\n\t\t}\n\t\telse if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') \n\t\t{\n\t\t\tif(st.empty) \n\t\t\t{\n\t\t\t\tflag = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tchar temp = st.pop;\n\t\t\t\tif(exp[i] == ')' && temp != '(') \n\t\t\t\t{\n\t\t\t\t\tflag = 1;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\telse if(exp[i] == '}' && temp != '{') \n\t\t\t\t{\n\t\t\t\t\tflag = 1;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\telse if(exp[i] == ']' && temp != '[') \n\t\t\t\t{\n\t\t\t\t\tflag = 1;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tif(flag == 1 || !st.empty) \n\t{\n\t\treturn false;\n\t}\n\treturn true;\n}",
    "{\n\tauto stack = new Stack!char;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tauto top = stack.pop;\n\t\t\t\tif(!((top == '(' && c == ')') || (top == '{' && c == '}') || (top == '[' && c == ']')))\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}",
    "{ \n    Stack!(char) s = new Stack!(char)(); \n    foreach (ch; exp) \n    { \n        if (ch == '(') \n            s.push(ch); \n        else if (ch == ')') \n        { \n            if (s.empty) \n                return false; \n            else\n                s.pop(); \n        } \n    } \n    return s.empty; \n} ",
    "{\n\tauto stack = new Stack!char;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t\tstack.push(c);\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse\n\t\t\t{\n\t\t\t\tauto top = stack.pop;\n\t\t\t\tif(!((top == '(' && c == ')') || (top == '{' && c == '}') || (top == '[' && c == ']')))\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}",
    "{\n\tauto stack = new Stack!char;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t\tstack.push(c);\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse if(!is_matching_pair(stack.pop, c))\n\t\t\t\treturn false;\n\t\t}\n\t}\n\treturn stack.empty;\n}",
    "{\n\tauto stack = new Stack!char();\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t\tstack.push(c);\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse\n\t\t\t{\n\t\t\t\tauto top = stack.pop();\n\t\t\t\tif(!((c == ')' && top == '(') || (c == '}' && top == '{') || (c == ']' && top == '[')))\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}",
    "{\n\tauto stack = new Stack!(char)();\n\tforeach(i, c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\t\n\t\t\tauto top = stack.pop;\n\t\t\tif(c == ')' && top != '(')\n\t\t\t\treturn false;\n\t\t\telse if(c == '}' && top != '{')\n\t\t\t\treturn false;\n\t\t\telse if(c == ']' && top != '[')\n\t\t\t\treturn false;\n\t\t}\n\t}\n\treturn stack.empty;\n}",
    "{\n\tauto stack = new Stack!char;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(!is_matching_pair(stack.pop(), c))\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}",
    "{\n\tauto stack = new Stack!char();\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tauto top = stack.pop;\n\t\t\t\tif(top == '(' && c != ')')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\telse if(top == '{' && c != '}')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\telse if(top == '[' && c != ']')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}",
    "{ \n    Stack!(char[]) s; \n    foreach (ch; exp) \n    { \n        switch (ch) \n        { \n        case '(': \n        case '{': \n        case '[': \n            s.push(ch); \n            break; \n        case ')': \n            if (s.empty || s.top != '(') \n                return false; \n            else\n                s.pop; \n            break; \n        case '}': \n            if (s.empty || s.top != '{') \n                return false; \n            else\n                s.pop; \n            break; \n        case ']': \n            if (s.empty || s.top != '[') \n                return false; \n            else\n                s.pop; \n            break; \n        } \n    } \n    return s.empty; \n} ",
    "{\n\tauto stack = new Stack!char;\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t\tstack.push(c);\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse\n\t\t\t{\n\t\t\t\tauto top = stack.pop;\n\t\t\t\tif(!((c == ')' && top == '(') || (c == '}' && top == '{') || (c == ']' && top == '[')))\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}",
    "{\n\tauto stack = new Stack!(char)();\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t\tstack.push(c);\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t\treturn false;\n\t\t\telse\n\t\t\t{\n\t\t\t\tauto top = stack.pop;\n\t\t\t\tif(!((top == '(' && c == ')') || (top == '{' && c == '}') || (top == '[' && c == ']')))\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}",
    "{\n\tint len = exp.length;\n\tStack!char stack = new Stack!char();\n\tfor (int i = 0; i < len; i++) \n\t{\n\t\tif (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') \n\t\t{\n\t\t\tstack.push(exp[i]);\n\t\t}\n\t\telse if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') \n\t\t{\n\t\t\tif (stack.empty) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if (exp[i] == ')' && stack.top == '(') \n\t\t\t{\n\t\t\t\tstack.pop();\n\t\t\t}\n\t\t\telse if (exp[i] == '}' && stack.top == '{') \n\t\t\t{\n\t\t\t\tstack.pop();\n\t\t\t}\n\t\t\telse if (exp[i] == ']' && stack.top == '[') \n\t\t\t{\n\t\t\t\tstack.pop();\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\tif (stack.empty) \n\t{\n\t\treturn true;\n\t}\n\treturn false;\n}",
    "{\n\tauto stack = new Stack!char();\n\tforeach(c; exp)\n\t{\n\t\tif(c == '(' || c == '{' || c == '[')\n\t\t{\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif(stack.empty)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tauto top = stack.pop;\n\t\t\t\tif(!((c == ')' && top == '(') || (c == '}' && top == '{') || (c == ']' && top == '[')))\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.empty;\n}",
    "{\n\tauto stack = new Stack!char;\n\tforeach (char c; exp)\n\t{\n\t\tif (c == '(' || c == '{' || c == '[')\n\t\t\tstack.push(c);\n\t\telse if (c == ')' || c == '}' || c == ']')\n\t\t{\n\t\t\tif (stack.empty)\n\t\t\t\treturn false;\n\t\t\telse if (c == ')' && stack.top != '(')\n\t\t\t\treturn false;\n\t\t\telse if (c == '}' && stack.top != '{')\n\t\t\t\treturn false;\n\t\t\telse if (c == ']' && stack.top != '[')\n\t\t\t\treturn false;\n\t\t\telse\n\t\t\t\tstack.pop();\n\t\t}\n\t}\n\treturn stack.empty;\n}"
  ]
}