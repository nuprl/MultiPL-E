{
  "name": "mbpp_282_sub_list",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to subtract two arrays element-wise.\n\t\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_282_sub_list.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tlong[] result = new long[nums1.length];\n\tforeach(i, val; nums1)\n\t{\n\t\tresult[i] = val - nums2[i];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[nums1.length];\n\tforeach(i, num; nums1)\n\t{\n\t\tresult[i] = num - nums2[i];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[nums1.length];\n\tforeach(i, num; nums1)\n\t{\n\t\tresult[i] = num - nums2[i];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[nums1.length];\n\tforeach(i, v; nums1)\n\t{\n\t\tresult[i] = nums1[i] - nums2[i];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[nums1.length];\n\tforeach(i, num; nums1)\n\t\tresult[i] = num - nums2[i];\n\treturn result;\n}",
    "{\n\tlong[] result = new long[nums1.length];\n\tforeach(i, v; nums1)\n\t{\n\t\tresult[i] = nums1[i] - nums2[i];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[nums1.length];\n\tforeach(i, num; nums1)\n\t{\n\t\tresult[i] = num - nums2[i];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[nums1.length];\n\tforeach(i, num; nums1)\n\t{\n\t\tresult[i] = num - nums2[i];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[nums1.length];\n\tforeach(i, e; nums1)\n\t{\n\t\tresult[i] = e - nums2[i];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[nums1.length];\n\tforeach(i, e; nums1)\n\t{\n\t\tresult[i] = e - nums2[i];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[nums1.length];\n\tforeach(i, num; nums1)\n\t{\n\t\tresult[i] = num - nums2[i];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[nums1.length];\n\tforeach(i, v; nums1)\n\t{\n\t\tresult[i] = nums1[i] - nums2[i];\n\t}\n\treturn result;\n}\n/*\n\tWrite a function to multiply two arrays element-wise.\n*/\nlong[] mul_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tforeach(i, v; nums1)\n\t{\n\t\tresult[i] = nums1[i] * nums2[i];\n\t}\n\treturn result;\n}\n/*\n\tWrite a function to divide two arrays element-wise.\n*/\nlong[] div_list(long[] nums1, long[] nums2) \n{\n\tlong[] result = new long[nums1.length];\n\tforeach(i, v; nums1)\n\t{\n\t\tresult[i] = nums1[i] / nums2[i];\n\t}\n\treturn result;\n}\n/*\n\tWrite a function to calculate the dot product of two arrays.\n*/\nlong dot_product(long[] nums1, long[] nums2) \n{\n\tlong result = 0;\n\tforeach(i, v; nums1)\n\t{\n\t\tresult += nums1[i] * nums2[i];\n\t}\n\treturn result;\n}\n/*\n\tWrite a function to calculate the magnitude of an array.\n*/\nlong magnitude(long[] nums) \n{\n\tlong result = 0;\n\tforeach(i, v; nums)\n\t{\n\t\tresult += nums[i] * nums[i];\n\t}\n\treturn sqrt(result);\n}\n/*\n\tWrite a function to calculate the angle between two arrays.\n*/\nlong angle(long[] nums1, long[] nums2) \n{\n\treturn acos(dot_product(nums1, nums2) / (magnitude(nums1) * magnitude(nums2)));\n}\n/*",
    "{\n\tlong[] result = new long[nums1.length];\n\tfor (int i = 0; i < nums1.length; i++)\n\t{\n\t\tresult[i] = nums1[i] - nums2[i];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[nums1.length];\n\tforeach(i, v; nums1)\n\t{\n\t\tresult[i] = nums1[i] - nums2[i];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[nums1.length];\n\tfor(int i = 0; i < nums1.length; i++)\n\t{\n\t\tresult[i] = nums1[i] - nums2[i];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[nums1.length];\n\tforeach(i, num; nums1)\n\t{\n\t\tresult[i] = num - nums2[i];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result;\n\tforeach(i, num; nums1)\n\t{\n\t\tresult ~= num - nums2[i];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[nums1.length];\n\tforeach(i, n; nums1)\n\t{\n\t\tresult[i] = n - nums2[i];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[nums1.length];\n\tforeach(i, num; nums1)\n\t{\n\t\tresult[i] = num - nums2[i];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[nums1.length];\n\tforeach(i, e; nums1)\n\t{\n\t\tresult[i] = e - nums2[i];\n\t}\n\treturn result;\n}"
  ]
}