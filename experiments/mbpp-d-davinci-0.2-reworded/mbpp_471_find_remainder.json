{
  "name": "mbpp_471_find_remainder",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_471_find_remainder.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{ \n    long prod = 1; \n    foreach(i; arr) \n        prod = (prod * i) % n; \n    return prod; \n} ",
    "{\n\tlong product = 1;\n\tforeach(i; arr)\n\t{\n\t\tproduct = (product * i) % n;\n\t}\n\treturn product;\n}",
    "{ \n    long prod = 1; \n    foreach(i; arr)\n    {\n        prod = (prod * i) % n; \n    }\n    return prod; \n} ",
    "{ \n    long prod = 1; \n    foreach(i; arr) \n        prod = (prod * i) % n; \n    return prod; \n} ",
    "{ \n    long prod = 1; \n    foreach(i; arr) \n        prod = (prod * i) % n; \n    return prod; \n} ",
    "{ \n    long prod = 1; \n    foreach(i; arr) \n    { \n        prod = (prod * i) % n; \n    } \n    return prod; \n} ",
    "{ \n    long prod = 1; \n    foreach(i; arr)\n    {\n        prod = (prod * i) % n; \n    }\n    return prod; \n} ",
    "{\n\tlong result = 1;\n\tforeach(i; arr)\n\t{\n\t\tresult = (result * i) % n;\n\t}\n\treturn result;\n}",
    "{\n\tlong product = 1;\n\tforeach(i; arr)\n\t{\n\t\tproduct = (product * i) % n;\n\t}\n\treturn product;\n}",
    "{\n\tlong product = 1;\n\tforeach(i; arr) \n\t{\n\t\tproduct = (product * i) % n;\n\t}\n\treturn product;\n}",
    "{ \n    long rem = 1; \n    foreach(long i; arr) \n    { \n        rem = (rem * i) % n; \n    } \n    return rem; \n} ",
    "{ \n    long prod = 1; \n    foreach(long i; arr) \n    { \n        prod = (prod * i) % n; \n    } \n    return prod; \n} ",
    "{ \n    long prod = 1; \n    foreach(i; arr)\n    {\n        prod = (prod * i) % n; \n    }\n    return prod; \n} ",
    "{\n\tlong result = 1;\n\tforeach(i; arr)\n\t{\n\t\tresult = (result * i) % n;\n\t}\n\treturn result;\n}",
    "{ \n    long prod = 1; \n    foreach(i; arr)\n    {\n        prod = (prod * i) % n; \n    }\n    return prod; \n} ",
    "{\n\tlong result = 1;\n\tforeach(i; arr)\n\t{\n\t\tresult = (result * i) % n;\n\t}\n\treturn result;\n}",
    "{ \n\tlong prod = 1; \n\tforeach(i; arr) \n\t\tprod = (prod * i) % n; \n\treturn prod; \n} ",
    "{\n\tlong result = 1;\n\tforeach(i; arr)\n\t{\n\t\tresult = (result * i) % n;\n\t}\n\treturn result;\n}",
    "{ \n    long prod = 1; \n    foreach(i; arr) \n    { \n        prod = (prod * i) % n; \n    } \n    return prod; \n} \n/*\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{ \n    long prod = 1; \n    foreach(i; arr) \n    { \n        prod = (prod * i) % n; \n    } \n    return prod; \n} \n/*\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{ \n    long prod = 1; \n    foreach(i; arr) \n    { \n        prod = (prod * i) % n; \n    } \n    return prod; \n} \n/*\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{ \n    long prod = 1; \n    foreach(i; arr) \n    { \n        prod = (prod * i) % n; \n    } \n    return prod; \n} \n/*\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{ \n    long prod = 1; \n    foreach(i; arr) \n    { \n        prod = (prod * i) % n; \n    } \n    return prod; \n} \n/*\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n\t\n*/\nlong find_remainder(long[] arr, long n) \n{ \n    long prod = 1; \n    foreach(i; arr) \n    { \n        prod = (prod * i) % n; \n    }",
    "{ \n    long prod = 1; \n    foreach(i; arr)\n    {\n        prod = (prod * i) % n; \n    }\n    return prod; \n} "
  ]
}