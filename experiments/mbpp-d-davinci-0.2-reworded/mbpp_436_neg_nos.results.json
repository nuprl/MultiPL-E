{
  "name": "mbpp_436_neg_nos",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_436_neg_nos.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] list2;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tlist2 ~= i;\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] list2;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tlist2 ~= i;\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] list2;\n\tforeach(i;list1)\n\t{\n\t\tif(i<0)\n\t\t{\n\t\t\tlist2~=i;\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] list2 = new long[];\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tlist2 ~= i;\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517371,
      "stdout": "",
      "stderr": "/tmp/tmpf1snqj1u.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf1snqj1u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] list2;\n\tforeach(i;list1)\n\t{\n\t\tif(i<0)\n\t\t{\n\t\t\tlist2 ~= i;\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] list2;\n\tforeach(i; list1)\n\t{\n\t\tif(i<0)\n\t\t{\n\t\t\tlist2 ~= i;\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] list2;\n\tforeach(l;list1)\n\t{\n\t\tif(l<0)\n\t\t{\n\t\t\tlist2~=l;\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] list2;\n\tforeach(i;list1)\n\t{\n\t\tif(i<0)\n\t\t\tlist2~=i;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] list2 = new long[list1.length];\n\tint j = 0;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tlist2[j] = i;\n\t\t\tj++;\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517371,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp2zkzkgrk.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x4283bd]\n??:? void tmp2zkzkgrk.__unittest_L22_C1() [0x427f50]\n??:? void tmp2zkzkgrk.__modtest() [0x428140]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c477]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b30a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430595]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a44]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430521]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2e1]\n??:? runModuleUnitTests [0x42c24d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428880]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] list2;\n\tforeach(i; list1)\n\t{\n\t\tif(i<0)\n\t\t{\n\t\t\tlist2 ~= i;\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] list2;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t\tlist2 ~= i;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] list2;\n\tforeach(i;list1)\n\t{\n\t\tif(i<0)\n\t\t{\n\t\t\tlist2~=i;\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_nos = new long[];\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tneg_nos ~= i;\n\t\t}\n\t}\n\treturn neg_nos;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517371,
      "stdout": "",
      "stderr": "/tmp/tmp7qbnif17.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7qbnif17.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_nos = new long[];\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t\tneg_nos ~= i;\n\t}\n\treturn neg_nos;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517371,
      "stdout": "",
      "stderr": "/tmp/tmpdfmv3x8a.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdfmv3x8a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] list2;\n\tforeach(i; list1)\n\t{\n\t\tif(i<0)\n\t\t{\n\t\t\tlist2 ~= i;\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] list2;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tlist2 ~= i;\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_nos = [];\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tneg_nos ~= i;\n\t\t}\n\t}\n\treturn neg_nos;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] list2;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tlist2 ~= i;\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] list2;\n\tforeach(i;list1)\n\t{\n\t\tif(i<0)\n\t\t{\n\t\t\tlist2 ~= i;\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] list2;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tlist2 ~= i;\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list;\n\tforeach(i;list1)\n\t{\n\t\tif(i<0)\n\t\t{\n\t\t\tneg_list~=i;\n\t\t}\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122777,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] list2;\n\tforeach(i;list1)\n\t{\n\t\tif(i<0)\n\t\t{\n\t\t\tlist2~=i;\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list;\n\tforeach(num; list1)\n\t{\n\t\tif(num < 0)\n\t\t{\n\t\t\tneg_list ~= num;\n\t\t}\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122777,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list;\n\tforeach(i; list1) \n\t{\n\t\tif(i < 0) \n\t\t{\n\t\t\tneg_list ~= i;\n\t\t}\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122777,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tneg_list ~= i;\n\t\t}\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122777,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list;\n\tforeach(i;list1)\n\t{\n\t\tif(i<0)\n\t\t{\n\t\t\tneg_list ~= i;\n\t\t}\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122777,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] list2;\n\tforeach(i;list1)\n\t{\n\t\tif(i<0)\n\t\t{\n\t\t\tlist2 ~= i;\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] list2 = new long[];\n\tforeach(num; list1)\n\t{\n\t\tif(num < 0)\n\t\t{\n\t\t\tlist2 ~= num;\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122777,
      "stdout": "",
      "stderr": "/tmp/tmpk84apt8m.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk84apt8m.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_nos = [];\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tneg_nos ~= i;\n\t\t}\n\t}\n\treturn neg_nos;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_nos = new long[];\n\tforeach(long i; list1)\n\t{\n\t\tif(i < 0)\n\t\t\tneg_nos ~= i;\n\t}\n\treturn neg_nos;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122777,
      "stdout": "",
      "stderr": "/tmp/tmpfrfe1tnp.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfrfe1tnp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list;\n\tforeach(i;list1)\n\t{\n\t\tif(i<0)\n\t\t{\n\t\t\tneg_list ~= i;\n\t\t}\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122777,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list;\n\tforeach(item; list1)\n\t{\n\t\tif(item < 0)\n\t\t{\n\t\t\tneg_list ~= item;\n\t\t}\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122777,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list;\n\tforeach(i;list1)\n\t{\n\t\tif(i<0)\n\t\t{\n\t\t\tneg_list ~= i;\n\t\t}\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122777,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list;\n\tforeach(i; list1)\n\t{\n\t\tif (i < 0)\n\t\t{\n\t\t\tneg_list ~= i;\n\t\t}\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122777,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list;\n\tforeach(i;list1)\n\t{\n\t\tif(i<0)\n\t\t{\n\t\t\tneg_list ~= i;\n\t\t}\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122777,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] list2;\n\tforeach(i; list1)\n\t{\n\t\tif(i<0)\n\t\t{\n\t\t\tlist2 ~= i;\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tneg_list ~= i;\n\t\t}\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122777,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] list2 = new long[];\n\tforeach(i; list1)\n\t{\n\t\tif (i < 0)\n\t\t{\n\t\t\tlist2 ~= i;\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122777,
      "stdout": "",
      "stderr": "/tmp/tmpuzj8th66.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuzj8th66.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] list2;\n\tforeach(i;list1)\n\t{\n\t\tif(i<0)\n\t\t{\n\t\t\tlist2 ~= i;\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] list2 = new long[];\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tlist2 ~= i;\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517371,
      "stdout": "",
      "stderr": "/tmp/tmpf1snqj1u.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf1snqj1u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list;\n\tforeach(i;list1)\n\t{\n\t\tif(i<0)\n\t\t{\n\t\t\tneg_list ~= i;\n\t\t}\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122777,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] list2;\n\tint i;\n\tforeach(i;list1)\n\t{\n\t\tif(list1[i]<0)\n\t\t{\n\t\t\tlist2 ~= list1[i];\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122777,
      "stdout": "",
      "stderr": "/tmp/tmpeuzt2h67.d(12): Error: variable `i` is shadowing variable `tmpeuzt2h67.neg_nos.i`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpeuzt2h67.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] list2;\n\tforeach(i;list1)\n\t{\n\t\tif(i<0)\n\t\t{\n\t\t\tlist2 ~= i;\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] list2;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tlist2 ~= i;\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] list2;\n\tforeach(i;list1)\n\t{\n\t\tif(i<0)\n\t\t{\n\t\t\tlist2 ~= i;\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tneg_list ~= i;\n\t\t}\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122777,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] list2;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tlist2 ~= i;\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] list2;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tlist2 ~= i;\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] list2;\n\tforeach(i;0..list1.length)\n\t{\n\t\tif(list1[i]<0)\n\t\t{\n\t\t\tlist2 ~= list1[i];\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122777,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] list2;\n\tforeach(i; 0 .. list1.length)\n\t{\n\t\tif(list1[i] < 0)\n\t\t{\n\t\t\tlist2 ~= list1[i];\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122777,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_nos = new long[];\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t\tneg_nos ~= i;\n\t}\n\treturn neg_nos;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517371,
      "stdout": "",
      "stderr": "/tmp/tmpdfmv3x8a.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdfmv3x8a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] list2;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tlist2 ~= i;\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] list2 = new long[];\n\tforeach(i;0..list1.length)\n\t{\n\t\tif(list1[i] < 0)\n\t\t{\n\t\t\tlist2 ~= list1[i];\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122777,
      "stdout": "",
      "stderr": "/tmp/tmpb89rrold.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb89rrold.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] list2;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t\tlist2 ~= i;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] list2;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tlist2 ~= i;\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list;\n\tforeach(num; list1)\n\t{\n\t\tif(num < 0)\n\t\t{\n\t\t\tneg_list ~= num;\n\t\t}\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122777,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] list2;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tlist2 ~= i;\n\t\t}\n\t}\n\treturn list2;\n}\n/*\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122777,
      "stdout": "",
      "stderr": "/tmp/tmpdwd0i4mv.d(20): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdwd0i4mv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] list2;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tlist2 ~= i;\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] list2;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tlist2 ~= i;\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] list2;\n\tforeach(i; list1)\n\t{\n\t\tif(i<0)\n\t\t{\n\t\t\tlist2 ~= i;\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tneg_list ~= i;\n\t\t}\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122777,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] list2;\n\tforeach(i;list1)\n\t{\n\t\tif(i<0)\n\t\t{\n\t\t\tlist2 ~= i;\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tneg_list ~= i;\n\t\t}\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122777,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list;\n\tforeach(i;0..list1.length)\n\t{\n\t\tif(list1[i]<0)\n\t\t{\n\t\t\tneg_list ~= list1[i];\n\t\t}\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122777,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] list2 = new long[];\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tlist2 ~= i;\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517371,
      "stdout": "",
      "stderr": "/tmp/tmpf1snqj1u.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf1snqj1u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_nos = new long[];\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tneg_nos ~= i;\n\t\t}\n\t}\n\treturn neg_nos;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517371,
      "stdout": "",
      "stderr": "/tmp/tmp7qbnif17.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7qbnif17.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_nos = new long[];\n\tforeach(num;list1)\n\t{\n\t\tif(num<0)\n\t\t{\n\t\t\tneg_nos ~= num;\n\t\t}\n\t}\n\treturn neg_nos;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122777,
      "stdout": "",
      "stderr": "/tmp/tmpzt5stby_.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzt5stby_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_nos = new long[];\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tneg_nos ~= i;\n\t\t}\n\t}\n\treturn neg_nos;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517371,
      "stdout": "",
      "stderr": "/tmp/tmp7qbnif17.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7qbnif17.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tneg_list ~= i;\n\t\t}\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122777,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list;\n\tforeach(item; list1)\n\t{\n\t\tif(item < 0)\n\t\t{\n\t\t\tneg_list ~= item;\n\t\t}\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122777,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tneg_list ~= i;\n\t\t}\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122777,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] list2;\n\tforeach(i; list1)\n\t{\n\t\tif(i<0)\n\t\t{\n\t\t\tlist2 ~= i;\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_nos;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tneg_nos ~= i;\n\t\t}\n\t}\n\treturn neg_nos;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122777,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] list2;\n\tforeach(i;list1)\n\t{\n\t\tif(i<0)\n\t\t{\n\t\t\tlist2~=i;\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_nos;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tneg_nos ~= i;\n\t\t}\n\t}\n\treturn neg_nos;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122777,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list;\n\tforeach(i;list1)\n\t{\n\t\tif(i<0)\n\t\t{\n\t\t\tneg_list ~= i;\n\t\t}\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122777,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] list2;\n\tforeach(i; list1)\n\t{\n\t\tif(i<0)\n\t\t{\n\t\t\tlist2 ~= i;\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] list2;\n\tforeach(i;0..list1.length)\n\t{\n\t\tif(list1[i]<0)\n\t\t{\n\t\t\tlist2~=list1[i];\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122777,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] list2;\n\tforeach(i; list1)\n\t{\n\t\tif(i<0)\n\t\t{\n\t\t\tlist2 ~= i;\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] list2 = new long[list1.length];\n\tint j = 0;\n\tfor (int i = 0; i < list1.length; i++)\n\t{\n\t\tif (list1[i] < 0)\n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122777,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp7u3w20j2.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x4283e5]\n??:? void tmp7u3w20j2.__unittest_L22_C1() [0x427f74]\n??:? void tmp7u3w20j2.__modtest() [0x428164]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c49f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b332]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305bd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a6c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430549]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b309]\n??:? runModuleUnitTests [0x42c275]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tneg_list ~= i;\n\t\t}\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122777,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] list2;\n\tforeach(i;list1)\n\t{\n\t\tif(i<0)\n\t\t{\n\t\t\tlist2 ~= i;\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tneg_list ~= i;\n\t\t}\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122777,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] list2;\n\tint i;\n\t\n\tlist2 = new long[list1.length];\n\t\n\tfor(i=0;i<list1.length;i++)\n\t{\n\t\tif(list1[i] < 0)\n\t\t{\n\t\t\tlist2[i] = list1[i];\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122777,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp__d0bgb_.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x4283fd]\n??:? void tmp__d0bgb_.__unittest_L24_C1() [0x427f8c]\n??:? void tmp__d0bgb_.__modtest() [0x42817c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4b7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b34a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305d5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a84]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430561]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b321]\n??:? runModuleUnitTests [0x42c28d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tneg_list ~= i;\n\t\t}\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122777,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] list2;\n\tforeach(i;list1)\n\t{\n\t\tif(i<0)\n\t\t{\n\t\t\tlist2 ~= i;\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] list2;\n\tforeach(i; list1)\n\t{\n\t\tif(i<0)\n\t\t{\n\t\t\tlist2 ~= i;\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] list2;\n\tforeach(i;list1)\n\t{\n\t\tif(i<0)\n\t\t{\n\t\t\tlist2 ~= i;\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] list2;\n\tforeach(i;list1)\n\t{\n\t\tif(i<0)\n\t\t\tlist2 ~= i;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122777,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] list2;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tlist2 ~= i;\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_nos = new long[];\n\tforeach(num; list1)\n\t{\n\t\tif(num < 0)\n\t\t{\n\t\t\tneg_nos ~= num;\n\t\t}\n\t}\n\treturn neg_nos;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122777,
      "stdout": "",
      "stderr": "/tmp/tmprduoak_r.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprduoak_r.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] list2;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tlist2 ~= i;\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] list2 = new long[];\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tlist2 ~= i;\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517371,
      "stdout": "",
      "stderr": "/tmp/tmpf1snqj1u.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf1snqj1u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list;\n\tforeach(num; list1)\n\t{\n\t\tif(num < 0)\n\t\t{\n\t\t\tneg_list ~= num;\n\t\t}\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122777,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] list2;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tlist2 ~= i;\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] list2;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tlist2 ~= i;\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_nos;\n\tforeach(num; list1)\n\t{\n\t\tif(num < 0)\n\t\t\tneg_nos ~= num;\n\t}\n\treturn neg_nos;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122777,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] list2;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tlist2 ~= i;\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list;\n\tforeach(i;list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tneg_list ~= i;\n\t\t}\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122777,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] list2;\n\tforeach(i; list1)\n\t{\n\t\tif(i<0)\n\t\t{\n\t\t\tlist2 ~= i;\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list;\n\tforeach(i;list1)\n\t{\n\t\tif(i<0)\n\t\t{\n\t\t\tneg_list ~= i;\n\t\t}\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122777,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] list2;\n\tforeach(i; list1)\n\t{\n\t\tif(i<0)\n\t\t{\n\t\t\tlist2 ~= i;\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] list2;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t\tlist2 ~= i;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] list2;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tlist2 ~= i;\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] list2;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tlist2 ~= i;\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] list2 = new long[list1.length];\n\tint j=0;\n\tforeach(i; list1)\n\t{\n\t\tif(i<0)\n\t\t{\n\t\t\tlist2[j] = i;\n\t\t\tj++;\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122777,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp_va7gimr.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x4283bd]\n??:? void tmp_va7gimr.__unittest_L22_C1() [0x427f50]\n??:? void tmp_va7gimr.__modtest() [0x428140]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c477]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b30a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430595]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a44]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430521]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2e1]\n??:? runModuleUnitTests [0x42c24d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428880]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tneg_list ~= i;\n\t\t}\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122777,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tneg_list ~= i;\n\t\t}\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122777,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list;\n\tforeach(i;list1)\n\t{\n\t\tif(i<0)\n\t\t{\n\t\t\tneg_list ~= i;\n\t\t}\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122777,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list;\n\tforeach(i;list1)\n\t{\n\t\tif(i<0)\n\t\t\tneg_list~=i;\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122777,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] list2;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t\tlist2 ~= i;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_nos;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tneg_nos ~= i;\n\t\t}\n\t}\n\treturn neg_nos;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122777,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_nos = [];\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tneg_nos ~= i;\n\t\t}\n\t}\n\treturn neg_nos;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] list2;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tlist2 ~= i;\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] list2;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tlist2 ~= i;\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] list2;\n\tforeach(i;list1)\n\t{\n\t\tif(i<0)\n\t\t{\n\t\t\tlist2 ~= i;\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] list2;\n\tforeach(i;list1)\n\t{\n\t\tif(i<0)\n\t\t{\n\t\t\tlist2 ~= i;\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list;\n\tforeach(i;list1)\n\t{\n\t\tif(i<0)\n\t\t{\n\t\t\tneg_list ~= i;\n\t\t}\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122777,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_nos = new long[];\n\tforeach(i; 0..list1.length)\n\t{\n\t\tif(list1[i] < 0)\n\t\t{\n\t\t\tneg_nos ~= list1[i];\n\t\t}\n\t}\n\treturn neg_nos;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122777,
      "stdout": "",
      "stderr": "/tmp/tmp2dswz90u.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2dswz90u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list;\n\tforeach(i;list1)\n\t{\n\t\tif(i<0)\n\t\t{\n\t\t\tneg_list ~= i;\n\t\t}\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122777,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_nos = new long[];\n\tforeach(int i; list1)\n\t{\n\t\tif(list1[i] < 0)\n\t\t{\n\t\t\tneg_nos ~= list1[i];\n\t\t}\n\t}\n\treturn neg_nos;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122777,
      "stdout": "",
      "stderr": "/tmp/tmpwg9d0o7p.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\n/tmp/tmpwg9d0o7p.d(11): Error: cannot implicitly convert expression `__r73[__key74]` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwg9d0o7p.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] list2;\n\tforeach(i;list1)\n\t{\n\t\tif(i<0)\n\t\t{\n\t\t\tlist2 ~= i;\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] list2 = new long[];\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tlist2 ~= i;\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517371,
      "stdout": "",
      "stderr": "/tmp/tmpf1snqj1u.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf1snqj1u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] list2;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tlist2 ~= i;\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] list2 = new long[];\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tlist2 ~= i;\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517371,
      "stdout": "",
      "stderr": "/tmp/tmpf1snqj1u.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf1snqj1u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] list2;\n\tforeach(i; list1)\n\t{\n\t\tif(i<0)\n\t\t{\n\t\t\tlist2 ~= i;\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tneg_list ~= i;\n\t\t}\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122777,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_nos;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tneg_nos ~= i;\n\t\t}\n\t}\n\treturn neg_nos;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122777,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] list2;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tlist2 ~= i;\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_nos;\n\tforeach(num; list1)\n\t{\n\t\tif(num < 0)\n\t\t{\n\t\t\tneg_nos ~= num;\n\t\t}\n\t}\n\treturn neg_nos;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122777,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] list2;\n\tforeach(i;list1)\n\t{\n\t\tif(i<0)\n\t\t{\n\t\t\tlist2 ~= i;\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] list2;\n\tforeach(i;list1)\n\t{\n\t\tif(i<0)\n\t\t{\n\t\t\tlist2 ~= i;\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list;\n\tforeach(i;list1)\n\t{\n\t\tif(i<0)\n\t\t{\n\t\t\tneg_list ~= i;\n\t\t}\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122777,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] list2;\n\tforeach(i; 0..list1.length)\n\t{\n\t\tif (list1[i] < 0)\n\t\t{\n\t\t\tlist2 ~= list1[i];\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122777,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list;\n\tforeach(i; list1)\n\t{\n\t\tif(i<0)\n\t\t{\n\t\t\tneg_list ~= i;\n\t\t}\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122777,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] list2;\n\tforeach(i;list1)\n\t{\n\t\tif(i<0)\n\t\t{\n\t\t\tlist2~=i;\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] list2;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tlist2 ~= i;\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tneg_list ~= i;\n\t\t}\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122777,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] list2;\n\tforeach(i;list1)\n\t{\n\t\tif(i<0)\n\t\t{\n\t\t\tlist2 ~= i;\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_nos = [];\n\tforeach(i;0..list1.length)\n\t{\n\t\tif(list1[i] < 0)\n\t\t{\n\t\t\tneg_nos ~= list1[i];\n\t\t}\n\t}\n\treturn neg_nos;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122777,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] list2;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tlist2 ~= i;\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list;\n\tforeach(i;list1)\n\t{\n\t\tif(i<0)\n\t\t{\n\t\t\tneg_list ~= i;\n\t\t}\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122777,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] list2;\n\tforeach(i; list1)\n\t{\n\t\tif(i<0)\n\t\t{\n\t\t\tlist2 ~= i;\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] list2 = new long[];\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tlist2 ~= i;\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517371,
      "stdout": "",
      "stderr": "/tmp/tmpf1snqj1u.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf1snqj1u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] list2;\n\tforeach(i; list1)\n\t{\n\t\tif(i<0)\n\t\t{\n\t\t\tlist2 ~= i;\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] list2 = new long[];\n\tforeach (i; list1)\n\t{\n\t\tif (i < 0)\n\t\t{\n\t\t\tlist2 ~= i;\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122777,
      "stdout": "",
      "stderr": "/tmp/tmppatbkfly.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppatbkfly.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tneg_list ~= i;\n\t\t}\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122777,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tneg_list ~= i;\n\t\t}\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122777,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] list2;\n\tforeach(i;list1)\n\t{\n\t\tif(i<0)\n\t\t{\n\t\t\tlist2 ~= i;\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tneg_list ~= i;\n\t\t}\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122777,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_nos = new long[];\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tneg_nos ~= i;\n\t\t}\n\t}\n\treturn neg_nos;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517371,
      "stdout": "",
      "stderr": "/tmp/tmp7qbnif17.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7qbnif17.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] list2;\n\tforeach(i; list1)\n\t{\n\t\tif(i<0)\n\t\t{\n\t\t\tlist2 ~= i;\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_nos = new long[];\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tneg_nos ~= i;\n\t\t}\n\t}\n\treturn neg_nos;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517371,
      "stdout": "",
      "stderr": "/tmp/tmp7qbnif17.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7qbnif17.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list;\n\tforeach(i;list1)\n\t{\n\t\tif(i<0)\n\t\t{\n\t\t\tneg_list ~= i;\n\t\t}\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122777,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] list2;\n\tforeach(i;list1)\n\t{\n\t\tif(i<0)\n\t\t{\n\t\t\tlist2 ~= i;\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] list2;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tlist2 ~= i;\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tneg_list ~= i;\n\t\t}\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122777,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list;\n\tforeach(element; list1)\n\t{\n\t\tif(element < 0)\n\t\t{\n\t\t\tneg_list ~= element;\n\t\t}\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122778,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] list2;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tlist2 ~= i;\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t\tneg_list ~= i;\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122778,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_nos = [];\n\tforeach(n; list1)\n\t{\n\t\tif(n < 0)\n\t\t{\n\t\t\tneg_nos ~= n;\n\t\t}\n\t}\n\treturn neg_nos;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122778,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t\tneg_list ~= i;\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122778,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] list2;\n\tforeach(i;list1)\n\t{\n\t\tif(i<0)\n\t\t{\n\t\t\tlist2 ~= i;\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tneg_list ~= i;\n\t\t}\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122777,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] list2;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tlist2 ~= i;\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list = new long[];\n\tforeach(long i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tneg_list ~= i;\n\t\t}\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122777,
      "stdout": "",
      "stderr": "/tmp/tmpincpr5g7.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpincpr5g7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] list2;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tlist2 ~= i;\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] list2;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tlist2 ~= i;\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tneg_list ~= i;\n\t\t}\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122777,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] list2;\n\tforeach(i; 0 .. list1.length)\n\t{\n\t\tif(list1[i] < 0)\n\t\t{\n\t\t\tlist2 ~= list1[i];\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122777,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] list2;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tlist2 ~= i;\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list;\n\tforeach(i; 0 .. list1.length)\n\t{\n\t\tif(list1[i] < 0)\n\t\t{\n\t\t\tneg_list ~= list1[i];\n\t\t}\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122778,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] list2 = new long[];\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tlist2 ~= i;\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517371,
      "stdout": "",
      "stderr": "/tmp/tmpf1snqj1u.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf1snqj1u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] list2;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tlist2 ~= i;\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tneg_list ~= i;\n\t\t}\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122777,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] list2;\n\tforeach(i;list1)\n\t{\n\t\tif(i<0)\n\t\t{\n\t\t\tlist2 ~= i;\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list;\n\tforeach(num; list1)\n\t{\n\t\tif(num < 0)\n\t\t{\n\t\t\tneg_list ~= num;\n\t\t}\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122777,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] list2;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tlist2 ~= i;\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] list2 = new long[list1.length];\n\tint j = 0;\n\tfor (int i = 0; i < list1.length; i++)\n\t{\n\t\tif (list1[i] < 0)\n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122777,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp7u3w20j2.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x4283e5]\n??:? void tmp7u3w20j2.__unittest_L22_C1() [0x427f74]\n??:? void tmp7u3w20j2.__modtest() [0x428164]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c49f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b332]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305bd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a6c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430549]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b309]\n??:? runModuleUnitTests [0x42c275]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tneg_list ~= i;\n\t\t}\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122777,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_nos;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tneg_nos ~= i;\n\t\t}\n\t}\n\treturn neg_nos;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122777,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] list2;\n\tforeach(i; list1)\n\t{\n\t\tif(i<0)\n\t\t{\n\t\t\tlist2 ~= i;\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tneg_list ~= i;\n\t\t}\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122777,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list;\n\tforeach(i;list1)\n\t{\n\t\tif(i<0)\n\t\t{\n\t\t\tneg_list ~= i;\n\t\t}\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122777,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] list2;\n\tforeach(i;list1)\n\t{\n\t\tif(i<0)\n\t\t{\n\t\t\tlist2 ~= i;\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] list2;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tlist2 ~= i;\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] list2 = new long[list1.length];\n\tint j = 0;\n\tfor (int i = 0; i < list1.length; i++)\n\t{\n\t\tif (list1[i] < 0)\n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122777,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp7u3w20j2.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x4283e5]\n??:? void tmp7u3w20j2.__unittest_L22_C1() [0x427f74]\n??:? void tmp7u3w20j2.__modtest() [0x428164]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c49f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b332]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305bd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a6c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430549]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b309]\n??:? runModuleUnitTests [0x42c275]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] list2 = new long[list1.length];\n\tint j = 0;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tlist2[j] = i;\n\t\t\tj++;\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517371,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp2zkzkgrk.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x4283bd]\n??:? void tmp2zkzkgrk.__unittest_L22_C1() [0x427f50]\n??:? void tmp2zkzkgrk.__modtest() [0x428140]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c477]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b30a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430595]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a44]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430521]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2e1]\n??:? runModuleUnitTests [0x42c24d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428880]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] list2;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tlist2 ~= i;\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{ \n\tlong[] neg_list;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tneg_list ~= i;\n\t\t}\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122778,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t\tneg_list ~= i;\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122778,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t\tneg_list ~= i;\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122778,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list;\n\tforeach(i;list1)\n\t{\n\t\tif(i<0)\n\t\t\tneg_list ~= i;\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122778,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tneg_list ~= i;\n\t\t}\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122777,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_nos;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tneg_nos ~= i;\n\t\t}\n\t}\n\treturn neg_nos;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122777,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] list2;\n\tforeach(i;list1)\n\t{\n\t\tif(i<0)\n\t\t{\n\t\t\tlist2 ~= i;\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] list2;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tlist2 ~= i;\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] list2;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tlist2 ~= i;\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1665517371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] list2;\n\tforeach(i; list1)\n\t{\n\t\tif(i<0)\n\t\t\tlist2 ~= i;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122778,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to return the negative numbers in an array.\n\t\n*/\nlong[] neg_nos(long[] list1) \n{\n\tlong[] neg_list;\n\tforeach(i; list1)\n\t{\n\t\tif(i < 0)\n\t\t{\n\t\t\tneg_list ~= i;\n\t\t}\n\t}\n\treturn neg_list;\n}\nunittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}",
      "timestamp": 1666122777,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}