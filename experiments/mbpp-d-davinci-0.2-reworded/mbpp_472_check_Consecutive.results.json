{
  "name": "mbpp_472_check_Consecutive",
  "language": "d",
  "prompt": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_472_check_Consecutive.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tint min = l[0];\n\tint max = l[0];\n\tforeach(i; l)\n\t{\n\t\tif(i < min)\n\t\t\tmin = i;\n\t\tif(i > max)\n\t\t\tmax = i;\n\t}\n\t\n\tif(max - min + 1 == l.length)\n\t{\n\t\tforeach(i; l)\n\t\t{\n\t\t\tif(l[i] < 0)\n\t\t\t\tl[i] = -l[i];\n\t\t}\n\t\t\n\t\tforeach(i; l)\n\t\t{\n\t\t\tif(l[abs(l[i]) - min] > 0)\n\t\t\t\tl[abs(l[i]) - min] = -l[abs(l[i]) - min];\n\t\t\telse\n\t\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517282,
      "stdout": "",
      "stderr": "/tmp/tmpe7ilqx1q.d(9): Error: cannot implicitly convert expression `l[0]` of type `long` to `int`\n/tmp/tmpe7ilqx1q.d(10): Error: cannot implicitly convert expression `l[0]` of type `long` to `int`\n/tmp/tmpe7ilqx1q.d(14): Error: cannot implicitly convert expression `i` of type `long` to `int`\n/tmp/tmpe7ilqx1q.d(16): Error: cannot implicitly convert expression `i` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe7ilqx1q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(i; 0..l.length-1)\n\t{\n\t\tif(l[i+1]-l[i] != 1)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517282,
      "stdout": "",
      "stderr": "/tmp/tmp9hfm2ifm.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9hfm2ifm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(i; 0..l.length-1)\n\t{\n\t\tif(l[i+1]-l[i] != 1)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517282,
      "stdout": "",
      "stderr": "/tmp/tmp9hfm2ifm.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9hfm2ifm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(i; 0 .. l.length - 1)\n\t{\n\t\tif(l[i+1] - l[i] != 1)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517282,
      "stdout": "",
      "stderr": "/tmp/tmpetr8yogb.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpetr8yogb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort;\n\tforeach(i; 0..l.length-1)\n\t{\n\t\tif(l[i+1]-l[i] != 1)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517282,
      "stdout": "",
      "stderr": "/tmp/tmpe5xc3__7.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe5xc3__7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(i; 0..l.length-1)\n\t{\n\t\tif(l[i+1] - l[i] != 1)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517282,
      "stdout": "",
      "stderr": "/tmp/tmp73a0mx2l.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp73a0mx2l.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(i;1..l.length-1)\n\t{\n\t\tif(l[i]-l[i-1] != 1)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517282,
      "stdout": "",
      "stderr": "/tmp/tmp2f04c3qm.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2f04c3qm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(i;0..l.length-1)\n\t{\n\t\tif(l[i+1]-l[i]!=1)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517282,
      "stdout": "",
      "stderr": "/tmp/tmpfjcehx0n.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfjcehx0n.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tint n = l.length;\n\tint min = l[0];\n\tint max = l[0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tif (l[i] < min)\n\t\t\tmin = l[i];\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\t}\n\tif (max - min + 1 == n)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517282,
      "stdout": "",
      "stderr": "/tmp/tmprs58kffv.d(9): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\n/tmp/tmprs58kffv.d(10): Error: cannot implicitly convert expression `l[0]` of type `long` to `int`\n/tmp/tmprs58kffv.d(11): Error: cannot implicitly convert expression `l[0]` of type `long` to `int`\n/tmp/tmprs58kffv.d(15): Error: cannot implicitly convert expression `l[cast(ulong)i]` of type `long` to `int`\n/tmp/tmprs58kffv.d(17): Error: cannot implicitly convert expression `l[cast(ulong)i]` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprs58kffv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort;\n\tforeach(i; 0..l.length-1)\n\t{\n\t\tif(l[i+1]-l[i]!=1)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517282,
      "stdout": "",
      "stderr": "/tmp/tmpkvdljqdj.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkvdljqdj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(i; 0..l.length-1)\n\t{\n\t\tif(l[i+1] - l[i] != 1)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517282,
      "stdout": "",
      "stderr": "/tmp/tmp977ak17i.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp977ak17i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tlong[] a = l.dup;\n\ta.sort;\n\tforeach(i; 0 .. a.length - 1)\n\t{\n\t\tif(a[i] + 1 != a[i + 1])\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517282,
      "stdout": "",
      "stderr": "/tmp/tmpjl1cjcpy.d(10): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjl1cjcpy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(i; 0..l.length-1)\n\t{\n\t\tif(l[i+1]-l[i] != 1)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517282,
      "stdout": "",
      "stderr": "/tmp/tmp9hfm2ifm.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9hfm2ifm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tint n = l.length;\n\tint min = l[0];\n\tint max = l[0];\n\t\n\tfor(int i = 1; i < n; i++)\n\t{\n\t\tif(l[i] < min)\n\t\t\tmin = l[i];\n\t\tif(l[i] > max)\n\t\t\tmax = l[i];\n\t}\n\t\n\tif(max - min + 1 == n)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517282,
      "stdout": "",
      "stderr": "/tmp/tmpyb4i3e75.d(9): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\n/tmp/tmpyb4i3e75.d(10): Error: cannot implicitly convert expression `l[0]` of type `long` to `int`\n/tmp/tmpyb4i3e75.d(11): Error: cannot implicitly convert expression `l[0]` of type `long` to `int`\n/tmp/tmpyb4i3e75.d(16): Error: cannot implicitly convert expression `l[cast(ulong)i]` of type `long` to `int`\n/tmp/tmpyb4i3e75.d(18): Error: cannot implicitly convert expression `l[cast(ulong)i]` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyb4i3e75.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(i; l)\n\t{\n\t\tif(i != l[0] + l.indexOf(i))\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517282,
      "stdout": "",
      "stderr": "/tmp/tmp6lhlj038.d(9): Error: no property `sort` for type `long[]`\n/tmp/tmp6lhlj038.d(12): Error: no property `indexOf` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6lhlj038.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(i; 0 .. l.length - 1)\n\t{\n\t\tif(l[i + 1] - l[i] != 1)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517282,
      "stdout": "",
      "stderr": "/tmp/tmpfcu8h6et.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfcu8h6et.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(i; 0..l.length-1)\n\t{\n\t\tif(l[i+1] - l[i] != 1)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517282,
      "stdout": "",
      "stderr": "/tmp/tmp73a0mx2l.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp73a0mx2l.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(i;0..l.length-1)\n\t{\n\t\tif(l[i+1]-l[i]!=1)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517282,
      "stdout": "",
      "stderr": "/tmp/tmpu_f7o17q.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu_f7o17q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tint min = l[0];\n\tint max = l[0];\n\tforeach(i; l)\n\t{\n\t\tif(i < min)\n\t\t\tmin = i;\n\t\tif(i > max)\n\t\t\tmax = i;\n\t}\n\t\n\tif(max - min + 1 == l.length)\n\t{\n\t\tforeach(i; l)\n\t\t{\n\t\t\tif(!l.contains(min))\n\t\t\t\treturn false;\n\t\t\tmin++;\n\t\t}\n\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517282,
      "stdout": "",
      "stderr": "/tmp/tmpf09nccnn.d(9): Error: cannot implicitly convert expression `l[0]` of type `long` to `int`\n/tmp/tmpf09nccnn.d(10): Error: cannot implicitly convert expression `l[0]` of type `long` to `int`\n/tmp/tmpf09nccnn.d(14): Error: cannot implicitly convert expression `i` of type `long` to `int`\n/tmp/tmpf09nccnn.d(16): Error: cannot implicitly convert expression `i` of type `long` to `int`\n/tmp/tmpf09nccnn.d(23): Error: no property `contains` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf09nccnn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tlong min = l[0];\n\tlong max = l[0];\n\tforeach(i; l) \n\t{\n\t\tif (i < min)\n\t\t\tmin = i;\n\t\tif (i > max)\n\t\t\tmax = i;\n\t}\n\tif (max - min + 1 == l.length) \n\t{\n\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(i; 0 .. l.length - 1)\n\t{\n\t\tif(l[i] + 1 != l[i + 1])\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "/tmp/tmpqg6extfl.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqg6extfl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tint min = l[0];\n\tint max = l[0];\n\tforeach(i; l)\n\t{\n\t\tif(i < min)\n\t\t\tmin = i;\n\t\tif(i > max)\n\t\t\tmax = i;\n\t}\n\tif(max - min + 1 == l.length)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "/tmp/tmpr60avysy.d(9): Error: cannot implicitly convert expression `l[0]` of type `long` to `int`\n/tmp/tmpr60avysy.d(10): Error: cannot implicitly convert expression `l[0]` of type `long` to `int`\n/tmp/tmpr60avysy.d(14): Error: cannot implicitly convert expression `i` of type `long` to `int`\n/tmp/tmpr60avysy.d(16): Error: cannot implicitly convert expression `i` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr60avysy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tint min = l[0];\n\tint max = l[0];\n\tforeach(i; l)\n\t{\n\t\tif(i < min)\n\t\t\tmin = i;\n\t\tif(i > max)\n\t\t\tmax = i;\n\t}\n\tif(max - min + 1 == l.length)\n\t{\n\t\tforeach(i; l)\n\t\t{\n\t\t\tif(i - min >= l.length)\n\t\t\t\treturn false;\n\t\t\tif(l[i - min] <= 0)\n\t\t\t\treturn false;\n\t\t\tl[i - min] = -l[i - min];\n\t\t}\n\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "/tmp/tmpolsmpha8.d(9): Error: cannot implicitly convert expression `l[0]` of type `long` to `int`\n/tmp/tmpolsmpha8.d(10): Error: cannot implicitly convert expression `l[0]` of type `long` to `int`\n/tmp/tmpolsmpha8.d(14): Error: cannot implicitly convert expression `i` of type `long` to `int`\n/tmp/tmpolsmpha8.d(16): Error: cannot implicitly convert expression `i` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpolsmpha8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(i;0..l.length-1)\n\t{\n\t\tif(l[i+1]-l[i] != 1)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "/tmp/tmpbp7iikng.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbp7iikng.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(i; l)\n\t{\n\t\tif(i != l[0])\n\t\t{\n\t\t\tif(i != l[0] + 1)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "/tmp/tmp2rr8hr0q.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2rr8hr0q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tint min = l[0];\n\tint max = l[0];\n\tforeach(e; l)\n\t{\n\t\tif(e < min)\n\t\t\tmin = e;\n\t\tif(e > max)\n\t\t\tmax = e;\n\t}\n\tif(max - min + 1 == l.length)\n\t{\n\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "/tmp/tmpktbw0_gl.d(9): Error: cannot implicitly convert expression `l[0]` of type `long` to `int`\n/tmp/tmpktbw0_gl.d(10): Error: cannot implicitly convert expression `l[0]` of type `long` to `int`\n/tmp/tmpktbw0_gl.d(14): Error: cannot implicitly convert expression `e` of type `long` to `int`\n/tmp/tmpktbw0_gl.d(16): Error: cannot implicitly convert expression `e` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpktbw0_gl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tint n = l.length;\n\tint min = l[0];\n\tint max = l[0];\n\t\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tif (l[i] < min)\n\t\t\tmin = l[i];\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\t}\n\t\n\tif (max - min + 1 == n)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "/tmp/tmpwf9teqhd.d(9): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\n/tmp/tmpwf9teqhd.d(10): Error: cannot implicitly convert expression `l[0]` of type `long` to `int`\n/tmp/tmpwf9teqhd.d(11): Error: cannot implicitly convert expression `l[0]` of type `long` to `int`\n/tmp/tmpwf9teqhd.d(16): Error: cannot implicitly convert expression `l[cast(ulong)i]` of type `long` to `int`\n/tmp/tmpwf9teqhd.d(18): Error: cannot implicitly convert expression `l[cast(ulong)i]` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwf9teqhd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(i; 0 .. l.length - 1)\n\t{\n\t\tif(l[i+1] - l[i] != 1)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517282,
      "stdout": "",
      "stderr": "/tmp/tmpetr8yogb.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpetr8yogb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tint n = l.length;\n\tint min = l[0];\n\tint max = l[0];\n\t\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tif (l[i] < min)\n\t\t\tmin = l[i];\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\t}\n\t\n\tif (max - min + 1 == n) \n\t{\n\t\treturn true;\n\t}\n\telse \n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "/tmp/tmp6i_kleor.d(9): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\n/tmp/tmp6i_kleor.d(10): Error: cannot implicitly convert expression `l[0]` of type `long` to `int`\n/tmp/tmp6i_kleor.d(11): Error: cannot implicitly convert expression `l[0]` of type `long` to `int`\n/tmp/tmp6i_kleor.d(16): Error: cannot implicitly convert expression `l[cast(ulong)i]` of type `long` to `int`\n/tmp/tmp6i_kleor.d(18): Error: cannot implicitly convert expression `l[cast(ulong)i]` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6i_kleor.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(i; 0 .. l.length - 1) \n\t{\n\t\tif(l[i + 1] - l[i] != 1) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "/tmp/tmpwceq04d2.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwceq04d2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(i;0..l.length-1)\n\t{\n\t\tif(l[i+1]-l[i] != 1)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "/tmp/tmp8pii84ej.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8pii84ej.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(i; 0 .. l.length - 1) \n\t{\n\t\tif(l[i + 1] - l[i] != 1) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "/tmp/tmpwceq04d2.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwceq04d2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(i;0..l.length-1)\n\t{\n\t\tif(l[i+1]-l[i]!=1)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517282,
      "stdout": "",
      "stderr": "/tmp/tmpu_f7o17q.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu_f7o17q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(i; 0 .. l.length - 1)\n\t{\n\t\tif(l[i+1] - l[i] != 1)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517282,
      "stdout": "",
      "stderr": "/tmp/tmpetr8yogb.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpetr8yogb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tint min = l[0];\n\tint max = l[0];\n\tforeach(int i; l)\n\t{\n\t\tif(i < min)\n\t\t\tmin = i;\n\t\tif(i > max)\n\t\t\tmax = i;\n\t}\n\tif(max - min + 1 == l.length)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "/tmp/tmpjzmy_d_2.d(9): Error: cannot implicitly convert expression `l[0]` of type `long` to `int`\n/tmp/tmpjzmy_d_2.d(10): Error: cannot implicitly convert expression `l[0]` of type `long` to `int`\n/tmp/tmpjzmy_d_2.d(11): Error: cannot implicitly convert expression `__r16[__key17]` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjzmy_d_2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tint min = l[0];\n\tint max = l[0];\n\tforeach(i;l)\n\t{\n\t\tif(i < min)\n\t\t\tmin = i;\n\t\tif(i > max)\n\t\t\tmax = i;\n\t}\n\tint[] a = new int[max-min+1];\n\tforeach(i;l)\n\t{\n\t\ta[i-min]++;\n\t}\n\tforeach(i;a)\n\t{\n\t\tif(i != 1)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "/tmp/tmpzi9v7vzy.d(9): Error: cannot implicitly convert expression `l[0]` of type `long` to `int`\n/tmp/tmpzi9v7vzy.d(10): Error: cannot implicitly convert expression `l[0]` of type `long` to `int`\n/tmp/tmpzi9v7vzy.d(14): Error: cannot implicitly convert expression `i` of type `long` to `int`\n/tmp/tmpzi9v7vzy.d(16): Error: cannot implicitly convert expression `i` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzi9v7vzy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\t// sort the array\n\tsort(l);\n\t\n\t// check if the difference between the consecutive elements is 1\n\tforeach(i; 1..l.length)\n\t{\n\t\tif(l[i] - l[i-1] != 1)\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "/tmp/tmpj65x4ikp.d(10): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj65x4ikp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort;\n\tforeach(i; 0 .. l.length - 1) \n\t{\n\t\tif (abs(l[i] - l[i + 1]) != 1) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "/tmp/tmpdzzs6lpq.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdzzs6lpq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(i; 0..l.length-1)\n\t{\n\t\tif(l[i+1] - l[i] != 1)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517282,
      "stdout": "",
      "stderr": "/tmp/tmp73a0mx2l.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp73a0mx2l.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(e; l)\n\t{\n\t\tif(e != l[0])\n\t\t{\n\t\t\tif(e != l[0] + 1)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "/tmp/tmppietl64i.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppietl64i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(i; 0 .. l.length - 1)\n\t{\n\t\tif(l[i] + 1 != l[i + 1])\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "/tmp/tmpqg6extfl.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqg6extfl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tlong min = l[0];\n\tlong max = l[0];\n\tforeach(i; l)\n\t{\n\t\tif(i < min)\n\t\t\tmin = i;\n\t\tif(i > max)\n\t\t\tmax = i;\n\t}\n\tif(max - min + 1 == l.length)\n\t{\n\t\tforeach(i; l)\n\t\t{\n\t\t\tif(!l.contains(min + i))\n\t\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\telse\n\t\treturn false;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "/tmp/tmp7d95w_aj.d(22): Error: no property `contains` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7d95w_aj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort;\n\tforeach(i;0..l.length-1)\n\t{\n\t\tif(l[i+1]-l[i]!=1)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "/tmp/tmp2z4jrv61.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2z4jrv61.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tint len = l.length;\n\tint min = l[0];\n\tint max = l[0];\n\tforeach(i; l)\n\t{\n\t\tif(i < min)\n\t\t\tmin = i;\n\t\tif(i > max)\n\t\t\tmax = i;\n\t}\n\tif(max - min + 1 == len)\n\t{\n\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "/tmp/tmp9iq63dl8.d(9): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\n/tmp/tmp9iq63dl8.d(10): Error: cannot implicitly convert expression `l[0]` of type `long` to `int`\n/tmp/tmp9iq63dl8.d(11): Error: cannot implicitly convert expression `l[0]` of type `long` to `int`\n/tmp/tmp9iq63dl8.d(15): Error: cannot implicitly convert expression `i` of type `long` to `int`\n/tmp/tmp9iq63dl8.d(17): Error: cannot implicitly convert expression `i` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9iq63dl8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tbool result = true;\n\tint min = l[0];\n\tint max = l[0];\n\tforeach(int i; l) \n\t{\n\t\tif(i < min)\n\t\t\tmin = i;\n\t\tif(i > max)\n\t\t\tmax = i;\n\t}\n\t\n\tif(max - min + 1 == l.length) \n\t{\n\t\tforeach(int i; l) \n\t\t{\n\t\t\tif(!l.contains(min)) \n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tmin++;\n\t\t}\n\t}\n\telse \n\t{\n\t\tresult = false;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "/tmp/tmpkoz1tc8u.d(10): Error: cannot implicitly convert expression `l[0]` of type `long` to `int`\n/tmp/tmpkoz1tc8u.d(11): Error: cannot implicitly convert expression `l[0]` of type `long` to `int`\n/tmp/tmpkoz1tc8u.d(12): Error: cannot implicitly convert expression `__r16[__key17]` of type `long` to `int`\n/tmp/tmpkoz1tc8u.d(22): Error: cannot implicitly convert expression `__r18[__key19]` of type `long` to `int`\n/tmp/tmpkoz1tc8u.d(24): Error: no property `contains` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkoz1tc8u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(i; 0 .. l.length - 1)\n\t{\n\t\tif(l[i] + 1 != l[i + 1])\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "/tmp/tmpqg6extfl.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqg6extfl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort;\n\tforeach(i; 0..l.length-1)\n\t{\n\t\tif(l[i+1] - l[i] != 1)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "/tmp/tmpiq5vpkgg.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiq5vpkgg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(i;0..l.length-1)\n\t{\n\t\tif(l[i]+1!=l[i+1])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "/tmp/tmp3m3f_nfy.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3m3f_nfy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort;\n\tforeach(i; 0..l.length-1)\n\t{\n\t\tif(l[i+1]-l[i] != 1)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517282,
      "stdout": "",
      "stderr": "/tmp/tmpe5xc3__7.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe5xc3__7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(i; 0..l.length-1)\n\t{\n\t\tif(l[i+1] - l[i] != 1)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517282,
      "stdout": "",
      "stderr": "/tmp/tmp977ak17i.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp977ak17i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(i; 0..l.length-1)\n\t{\n\t\tif(l[i] != l[i+1]-1)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "/tmp/tmptym7j6cu.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptym7j6cu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tint i;\n\tint min = l[0];\n\tint max = l[0];\n\tfor (i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] < min) \n\t\t{\n\t\t\tmin = l[i];\n\t\t}\n\t\tif (l[i] > max) \n\t\t{\n\t\t\tmax = l[i];\n\t\t}\n\t}\n\tif (max - min + 1 == l.length) \n\t{\n\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "/tmp/tmpkg251krj.d(10): Error: cannot implicitly convert expression `l[0]` of type `long` to `int`\n/tmp/tmpkg251krj.d(11): Error: cannot implicitly convert expression `l[0]` of type `long` to `int`\n/tmp/tmpkg251krj.d(16): Error: cannot implicitly convert expression `l[cast(ulong)i]` of type `long` to `int`\n/tmp/tmpkg251krj.d(20): Error: cannot implicitly convert expression `l[cast(ulong)i]` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkg251krj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(i;0..l.length-1)\n\t{\n\t\tif(l[i+1]-l[i]!=1)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517282,
      "stdout": "",
      "stderr": "/tmp/tmpu_f7o17q.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu_f7o17q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(i; l)\n\t{\n\t\tif(i != l[0] + l.indexOf(i))\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "/tmp/tmp80yfpfv_.d(9): Error: no property `sort` for type `long[]`\n/tmp/tmp80yfpfv_.d(12): Error: no property `indexOf` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp80yfpfv_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tint min = l[0];\n\tint max = l[0];\n\tforeach(i;l)\n\t{\n\t\tif(i<min)\n\t\t\tmin = i;\n\t\tif(i>max)\n\t\t\tmax = i;\n\t}\n\tif(max-min+1 == l.length)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "/tmp/tmpflhwvb2q.d(9): Error: cannot implicitly convert expression `l[0]` of type `long` to `int`\n/tmp/tmpflhwvb2q.d(10): Error: cannot implicitly convert expression `l[0]` of type `long` to `int`\n/tmp/tmpflhwvb2q.d(14): Error: cannot implicitly convert expression `i` of type `long` to `int`\n/tmp/tmpflhwvb2q.d(16): Error: cannot implicitly convert expression `i` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpflhwvb2q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort;\n\tforeach(i; 0..l.length-1)\n\t{\n\t\tif(l[i] != l[i+1]-1)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "/tmp/tmpg_djprkk.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg_djprkk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(i; 0..l.length-1)\n\t{\n\t\tif(l[i] + 1 != l[i+1])\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "/tmp/tmpif4lzv2s.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpif4lzv2s.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tlong min = l[0];\n\tlong max = l[0];\n\tforeach(long i; l) \n\t{\n\t\tif(i < min)\n\t\t\tmin = i;\n\t\tif(i > max)\n\t\t\tmax = i;\n\t}\n\tif(max - min + 1 == l.length) \n\t{\n\t\tforeach(long i; l) \n\t\t{\n\t\t\tif(l[i - min] < 0)\n\t\t\t\treturn false;\n\t\t\tl[i - min] = -l[i - min];\n\t\t}\n\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(i;0..l.length-1)\n\t{\n\t\tif(l[i+1]-l[i]!=1)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517282,
      "stdout": "",
      "stderr": "/tmp/tmpu_f7o17q.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu_f7o17q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(i; 0..l.length-1)\n\t{\n\t\tif(l[i+1] - l[i] != 1)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517282,
      "stdout": "",
      "stderr": "/tmp/tmp73a0mx2l.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp73a0mx2l.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(i; 0..l.length-1)\n\t{\n\t\tif(l[i+1]-l[i] != 1)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517282,
      "stdout": "",
      "stderr": "/tmp/tmp9hfm2ifm.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9hfm2ifm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tif (l.length == 0) \n\t{\n\t\treturn false;\n\t}\n\t\n\tlong min = l[0];\n\tlong max = l[0];\n\t\n\tforeach (long i; l) \n\t{\n\t\tif (i < min) \n\t\t{\n\t\t\tmin = i;\n\t\t}\n\t\tif (i > max) \n\t\t{\n\t\t\tmax = i;\n\t\t}\n\t}\n\t\n\tif (max - min + 1 == l.length) \n\t{\n\t\treturn true;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort;\n\tforeach(i; 0..l.length-1) \n\t{\n\t\tif(l[i+1] - l[i] != 1)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "/tmp/tmpveplgaaz.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpveplgaaz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort;\n\tforeach(i;0..l.length-1)\n\t{\n\t\tif(l[i+1]-l[i] != 1)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "/tmp/tmpkk5_3yti.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkk5_3yti.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tbool result = true;\n\tint min = l[0];\n\tint max = l[0];\n\tforeach(i; l)\n\t{\n\t\tif(i < min)\n\t\t\tmin = i;\n\t\tif(i > max)\n\t\t\tmax = i;\n\t}\n\t\n\tif(max - min + 1 == l.length)\n\t{\n\t\tforeach(i; l)\n\t\t{\n\t\t\tif(!l.contains(min++))\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t\tresult = false;\n\treturn result;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "/tmp/tmps1hsw60q.d(10): Error: cannot implicitly convert expression `l[0]` of type `long` to `int`\n/tmp/tmps1hsw60q.d(11): Error: cannot implicitly convert expression `l[0]` of type `long` to `int`\n/tmp/tmps1hsw60q.d(15): Error: cannot implicitly convert expression `i` of type `long` to `int`\n/tmp/tmps1hsw60q.d(17): Error: cannot implicitly convert expression `i` of type `long` to `int`\n/tmp/tmps1hsw60q.d(24): Error: no property `contains` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps1hsw60q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(i; l)\n\t{\n\t\tif(i != l[0] + l.indexOf(i))\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "/tmp/tmp80yfpfv_.d(9): Error: no property `sort` for type `long[]`\n/tmp/tmp80yfpfv_.d(12): Error: no property `indexOf` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp80yfpfv_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(i;0..l.length-1)\n\t{\n\t\tif(l[i+1]-l[i]!=1)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517282,
      "stdout": "",
      "stderr": "/tmp/tmpu_f7o17q.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu_f7o17q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tint min = l[0];\n\tint max = l[0];\n\tint n = l.length;\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tif (l[i] < min) \n\t\t{\n\t\t\tmin = l[i];\n\t\t}\n\t\tif (l[i] > max) \n\t\t{\n\t\t\tmax = l[i];\n\t\t}\n\t}\n\tif (max - min + 1 == n) \n\t{\n\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "/tmp/tmph35zfiss.d(9): Error: cannot implicitly convert expression `l[0]` of type `long` to `int`\n/tmp/tmph35zfiss.d(10): Error: cannot implicitly convert expression `l[0]` of type `long` to `int`\n/tmp/tmph35zfiss.d(11): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\n/tmp/tmph35zfiss.d(16): Error: cannot implicitly convert expression `l[cast(ulong)i]` of type `long` to `int`\n/tmp/tmph35zfiss.d(20): Error: cannot implicitly convert expression `l[cast(ulong)i]` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph35zfiss.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(i;0..l.length-1)\n\t{\n\t\tif(l[i+1]-l[i]!=1)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517282,
      "stdout": "",
      "stderr": "/tmp/tmpfjcehx0n.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfjcehx0n.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(i; 0..l.length-1)\n\t{\n\t\tif(abs(l[i]-l[i+1])!=1)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "/tmp/tmp4_a8hrjp.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4_a8hrjp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(i;0..l.length-1)\n\t{\n\t\tif(l[i+1]-l[i]!=1)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517282,
      "stdout": "",
      "stderr": "/tmp/tmpu_f7o17q.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu_f7o17q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(i; 0..l.length-1)\n\t{\n\t\tif(l[i+1] - l[i] != 1)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517282,
      "stdout": "",
      "stderr": "/tmp/tmp73a0mx2l.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp73a0mx2l.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort;\n\tforeach(i; 0 .. l.length-1)\n\t{\n\t\tif(l[i+1] - l[i] != 1)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "/tmp/tmp_keqprhi.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_keqprhi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tlong min = l[0];\n\tlong max = l[0];\n\tforeach(i; l)\n\t{\n\t\tif(i < min)\n\t\t\tmin = i;\n\t\tif(i > max)\n\t\t\tmax = i;\n\t}\n\tif((max - min + 1) == l.length)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tlong min = l[0];\n\tlong max = l[0];\n\tforeach(long i; l)\n\t{\n\t\tif(i < min)\n\t\t\tmin = i;\n\t\tif(i > max)\n\t\t\tmax = i;\n\t}\n\tif(max - min + 1 == l.length)\n\t\treturn true;\n\treturn false;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tint min = l[0];\n\tint max = l[0];\n\tforeach(i; l)\n\t{\n\t\tif(i < min)\n\t\t\tmin = i;\n\t\tif(i > max)\n\t\t\tmax = i;\n\t}\n\tif(max - min + 1 == l.length)\n\t{\n\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "/tmp/tmpynge3gae.d(9): Error: cannot implicitly convert expression `l[0]` of type `long` to `int`\n/tmp/tmpynge3gae.d(10): Error: cannot implicitly convert expression `l[0]` of type `long` to `int`\n/tmp/tmpynge3gae.d(14): Error: cannot implicitly convert expression `i` of type `long` to `int`\n/tmp/tmpynge3gae.d(16): Error: cannot implicitly convert expression `i` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpynge3gae.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(i;0..l.length-1)\n\t{\n\t\tif(l[i+1]-l[i]!=1)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517282,
      "stdout": "",
      "stderr": "/tmp/tmpu_f7o17q.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu_f7o17q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(i;0..l.length)\n\t{\n\t\tif(l[i] != l[0] + i)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "/tmp/tmpop0uttz3.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpop0uttz3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(i; 0 .. l.length - 1) \n\t{\n\t\tif(l[i + 1] - l[i] != 1) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "/tmp/tmpwceq04d2.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwceq04d2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(i; 0..l.length-1)\n\t{\n\t\tif(l[i+1] - l[i] != 1)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517282,
      "stdout": "",
      "stderr": "/tmp/tmp977ak17i.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp977ak17i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort;\n\tforeach(i;0..l.length-1)\n\t{\n\t\tif(l[i+1]-l[i] != 1)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "/tmp/tmps230y3um.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps230y3um.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(i;1..l.length)\n\t{\n\t\tif(l[i]-l[i-1]!=1)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "/tmp/tmpdk2v_qsr.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdk2v_qsr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n    long min = l[0];\n    long max = l[0];\n    foreach(long i; l) \n    {\n        if(i < min) \n        {\n            min = i;\n        }\n        if(i > max) \n        {\n            max = i;\n        }\n    }\n    if(max - min + 1 == l.length) \n    {\n        return true;\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(i; 0..l.length-1)\n\t{\n\t\tif(l[i+1] - l[i] != 1)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517282,
      "stdout": "",
      "stderr": "/tmp/tmp73a0mx2l.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp73a0mx2l.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(i; 0 .. l.length - 1) \n\t{\n\t\tif(l[i] + 1 != l[i + 1]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "/tmp/tmp0vxl27cm.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0vxl27cm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tlong min = l[0];\n\tlong max = l[0];\n\tforeach(i; l)\n\t{\n\t\tif(i < min)\n\t\t\tmin = i;\n\t\tif(i > max)\n\t\t\tmax = i;\n\t}\n\tif(max - min + 1 == l.length)\n\t{\n\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(i;0..l.length-1)\n\t{\n\t\tif(l[i+1]-l[i]!=1)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517282,
      "stdout": "",
      "stderr": "/tmp/tmpfjcehx0n.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfjcehx0n.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(i; 0 .. l.length - 1)\n\t{\n\t\tif(l[i + 1] - l[i] != 1)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "/tmp/tmpiv7jgoq5.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiv7jgoq5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tint min = l[0];\n\tint max = l[0];\n\tforeach(i; l)\n\t{\n\t\tif(i < min)\n\t\t\tmin = i;\n\t\tif(i > max)\n\t\t\tmax = i;\n\t}\n\tif(max - min + 1 == l.length)\n\t{\n\t\tforeach(i; l)\n\t\t{\n\t\t\tif(i - min >= l.length)\n\t\t\t\treturn false;\n\t\t\tl[i - min] = -1;\n\t\t}\n\t\treturn true;\n\t}\n\telse\n\t\treturn false;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "/tmp/tmpwllm5miw.d(9): Error: cannot implicitly convert expression `l[0]` of type `long` to `int`\n/tmp/tmpwllm5miw.d(10): Error: cannot implicitly convert expression `l[0]` of type `long` to `int`\n/tmp/tmpwllm5miw.d(14): Error: cannot implicitly convert expression `i` of type `long` to `int`\n/tmp/tmpwllm5miw.d(16): Error: cannot implicitly convert expression `i` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwllm5miw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(i; 0..l.length-1)\n\t{\n\t\tif(l[i+1] - l[i] != 1)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517282,
      "stdout": "",
      "stderr": "/tmp/tmp73a0mx2l.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp73a0mx2l.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort;\n\tforeach(i; 0..l.length-1)\n\t{\n\t\tif(l[i+1] - l[i] != 1)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "/tmp/tmpiq5vpkgg.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiq5vpkgg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tint min = l[0];\n\tint max = l[0];\n\tforeach(i; l)\n\t{\n\t\tif(i < min)\n\t\t\tmin = i;\n\t\tif(i > max)\n\t\t\tmax = i;\n\t}\n\tif((max - min + 1) == l.length)\n\t{\n\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "/tmp/tmphni4o8pi.d(9): Error: cannot implicitly convert expression `l[0]` of type `long` to `int`\n/tmp/tmphni4o8pi.d(10): Error: cannot implicitly convert expression `l[0]` of type `long` to `int`\n/tmp/tmphni4o8pi.d(14): Error: cannot implicitly convert expression `i` of type `long` to `int`\n/tmp/tmphni4o8pi.d(16): Error: cannot implicitly convert expression `i` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphni4o8pi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(i;0..l.length-1)\n\t{\n\t\tif(l[i+1]-l[i]!=1)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517282,
      "stdout": "",
      "stderr": "/tmp/tmpu_f7o17q.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu_f7o17q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tint n = l.length;\n\tint min = l[0];\n\tint max = l[0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tif (l[i] < min)\n\t\t\tmin = l[i];\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\t}\n\tif (max - min + 1 == n)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517282,
      "stdout": "",
      "stderr": "/tmp/tmprs58kffv.d(9): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\n/tmp/tmprs58kffv.d(10): Error: cannot implicitly convert expression `l[0]` of type `long` to `int`\n/tmp/tmprs58kffv.d(11): Error: cannot implicitly convert expression `l[0]` of type `long` to `int`\n/tmp/tmprs58kffv.d(15): Error: cannot implicitly convert expression `l[cast(ulong)i]` of type `long` to `int`\n/tmp/tmprs58kffv.d(17): Error: cannot implicitly convert expression `l[cast(ulong)i]` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprs58kffv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(i; 0 .. l.length - 1)\n\t{\n\t\tif(l[i] + 1 != l[i+1])\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "/tmp/tmpk29paji0.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk29paji0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tlong min = l[0];\n\tlong max = l[0];\n\tforeach(long i; l)\n\t{\n\t\tif(i < min)\n\t\t\tmin = i;\n\t\tif(i > max)\n\t\t\tmax = i;\n\t}\n\tif(max - min + 1 == l.length)\n\t{\n\t\tforeach(long i; l)\n\t\t{\n\t\t\tif(!l.contains(min))\n\t\t\t\treturn false;\n\t\t\tmin++;\n\t\t}\n\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "/tmp/tmp_wga5n27.d(22): Error: no property `contains` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_wga5n27.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tint min = l[0];\n\tint max = l[0];\n\tforeach(i; l)\n\t{\n\t\tif(i < min)\n\t\t\tmin = i;\n\t\tif(i > max)\n\t\t\tmax = i;\n\t}\n\tif(max - min + 1 == l.length)\n\t{\n\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "/tmp/tmpynge3gae.d(9): Error: cannot implicitly convert expression `l[0]` of type `long` to `int`\n/tmp/tmpynge3gae.d(10): Error: cannot implicitly convert expression `l[0]` of type `long` to `int`\n/tmp/tmpynge3gae.d(14): Error: cannot implicitly convert expression `i` of type `long` to `int`\n/tmp/tmpynge3gae.d(16): Error: cannot implicitly convert expression `i` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpynge3gae.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(i; 0..l.length-1)\n\t{\n\t\tif(l[i+1]-l[i] != 1)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517282,
      "stdout": "",
      "stderr": "/tmp/tmp9hfm2ifm.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9hfm2ifm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(i;0..l.length-1)\n\t{\n\t\tif(l[i+1]-l[i]!=1)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517282,
      "stdout": "",
      "stderr": "/tmp/tmpfjcehx0n.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfjcehx0n.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tint n = l.length;\n\tint min = l[0];\n\tint max = l[0];\n\t\n\tfor(int i = 1; i < n; i++) \n\t{\n\t\tif(l[i] < min) \n\t\t{\n\t\t\tmin = l[i];\n\t\t}\n\t\tif(l[i] > max) \n\t\t{\n\t\t\tmax = l[i];\n\t\t}\n\t}\n\t\n\tif(max - min + 1 == n) \n\t{\n\t\treturn true;\n\t}\n\telse \n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "/tmp/tmp3dvxw3o_.d(9): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\n/tmp/tmp3dvxw3o_.d(10): Error: cannot implicitly convert expression `l[0]` of type `long` to `int`\n/tmp/tmp3dvxw3o_.d(11): Error: cannot implicitly convert expression `l[0]` of type `long` to `int`\n/tmp/tmp3dvxw3o_.d(17): Error: cannot implicitly convert expression `l[cast(ulong)i]` of type `long` to `int`\n/tmp/tmp3dvxw3o_.d(21): Error: cannot implicitly convert expression `l[cast(ulong)i]` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3dvxw3o_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(i; 0 .. l.length - 1)\n\t{\n\t\tif(l[i] + 1 != l[i + 1])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "/tmp/tmpasoxa3a2.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpasoxa3a2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(i; 0 .. l.length - 1)\n\t{\n\t\tif(l[i] + 1 != l[i + 1])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "/tmp/tmpasoxa3a2.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpasoxa3a2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(i; 0..l.length-1)\n\t{\n\t\tif(l[i]+1 != l[i+1])\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "/tmp/tmpz2dt5xzq.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz2dt5xzq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tlong min = l[0];\n\tlong max = l[0];\n\tfor(int i = 1; i < l.length; i++) \n\t{\n\t\tif(l[i] < min)\n\t\t\tmin = l[i];\n\t\tif(l[i] > max)\n\t\t\tmax = l[i];\n\t}\n\t\n\tif(max - min + 1 == l.length) \n\t{\n\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(i;0..l.length-1)\n\t{\n\t\tif(l[i+1]-l[i]!=1)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517282,
      "stdout": "",
      "stderr": "/tmp/tmpfjcehx0n.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfjcehx0n.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(i; 0..l.length-1)\n\t{\n\t\tif(l[i+1] - l[i] != 1)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517282,
      "stdout": "",
      "stderr": "/tmp/tmp977ak17i.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp977ak17i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(i; 0 .. l.length - 1)\n\t{\n\t\tif(l[i] + 1 != l[i + 1])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "/tmp/tmpasoxa3a2.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpasoxa3a2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(i; 0 .. l.length - 1)\n\t{\n\t\tif(l[i] + 1 != l[i + 1])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "/tmp/tmpasoxa3a2.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpasoxa3a2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(i;0..l.length-1)\n\t{\n\t\tif(l[i+1]-l[i]!=1)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517282,
      "stdout": "",
      "stderr": "/tmp/tmpfjcehx0n.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfjcehx0n.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(i;0..l.length-1)\n\t{\n\t\tif(l[i+1]-l[i]!=1)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517282,
      "stdout": "",
      "stderr": "/tmp/tmpfjcehx0n.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfjcehx0n.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(i;0..l.length-1)\n\t{\n\t\tif(l[i+1]-l[i]!=1)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517282,
      "stdout": "",
      "stderr": "/tmp/tmpu_f7o17q.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu_f7o17q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort;\n\tforeach(i; 0..l.length-1)\n\t{\n\t\tif(l[i+1] - l[i] != 1)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "/tmp/tmpiq5vpkgg.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiq5vpkgg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(i;0..l.length-1)\n\t{\n\t\tif(l[i+1]-l[i] != 1)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "/tmp/tmp8pii84ej.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8pii84ej.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(i;0..l.length-1) \n\t{\n\t\tif(l[i+1]-l[i]!=1)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "/tmp/tmpw46em35e.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw46em35e.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tlong min = l[0];\n\tlong max = l[0];\n\tforeach(i; l)\n\t{\n\t\tif(i < min)\n\t\t\tmin = i;\n\t\tif(i > max)\n\t\t\tmax = i;\n\t}\n\tif(max - min + 1 == l.length)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(i; 1..l.length)\n\t{\n\t\tif(l[i] - l[i-1] != 1)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "/tmp/tmpygrhtiv7.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpygrhtiv7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(i;0..l.length-1)\n\t{\n\t\tif(l[i+1] - l[i] != 1)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "/tmp/tmp2klf1e_c.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2klf1e_c.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(i;0..l.length-1)\n\t{\n\t\tif(l[i+1]-l[i]!=1)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517282,
      "stdout": "",
      "stderr": "/tmp/tmpfjcehx0n.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfjcehx0n.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(i; 0..l.length-1)\n\t{\n\t\tif(l[i+1] - l[i] != 1)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517282,
      "stdout": "",
      "stderr": "/tmp/tmp73a0mx2l.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp73a0mx2l.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(i; 0..l.length-1)\n\t{\n\t\tif(l[i+1] - l[i] != 1)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517282,
      "stdout": "",
      "stderr": "/tmp/tmp73a0mx2l.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp73a0mx2l.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(i;0..l.length-1)\n\t{\n\t\tif(l[i+1]-l[i]!=1)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517282,
      "stdout": "",
      "stderr": "/tmp/tmpfjcehx0n.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfjcehx0n.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tint min = l[0];\n\tint max = l[0];\n\tforeach(i; l)\n\t{\n\t\tif(i < min)\n\t\t\tmin = i;\n\t\tif(i > max)\n\t\t\tmax = i;\n\t}\n\tif(max - min + 1 == l.length)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "/tmp/tmpr60avysy.d(9): Error: cannot implicitly convert expression `l[0]` of type `long` to `int`\n/tmp/tmpr60avysy.d(10): Error: cannot implicitly convert expression `l[0]` of type `long` to `int`\n/tmp/tmpr60avysy.d(14): Error: cannot implicitly convert expression `i` of type `long` to `int`\n/tmp/tmpr60avysy.d(16): Error: cannot implicitly convert expression `i` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr60avysy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(i; 0 .. l.length - 1)\n\t{\n\t\tif(l[i] + 1 != l[i + 1])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "/tmp/tmpasoxa3a2.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpasoxa3a2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(i;0..l.length-1)\n\t{\n\t\tif(l[i+1]-l[i] != 1)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "/tmp/tmp8pii84ej.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8pii84ej.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tint min = l[0];\n\tint max = l[0];\n\tforeach (var i; l) \n\t{\n\t\tif (i < min) \n\t\t{\n\t\t\tmin = i;\n\t\t}\n\t\tif (i > max) \n\t\t{\n\t\t\tmax = i;\n\t\t}\n\t}\n\tif (max - min + 1 == l.length) \n\t{\n\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "/tmp/tmpan5r2suz.d(9): Error: cannot implicitly convert expression `l[0]` of type `long` to `int`\n/tmp/tmpan5r2suz.d(10): Error: cannot implicitly convert expression `l[0]` of type `long` to `int`\n/tmp/tmpan5r2suz.d(11): Error: undefined identifier `var`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpan5r2suz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tint min = l[0];\n\tint max = l[0];\n\tforeach(i; l)\n\t{\n\t\tif(i < min)\n\t\t\tmin = i;\n\t\tif(i > max)\n\t\t\tmax = i;\n\t}\n\tif(max - min + 1 == l.length)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "/tmp/tmpr60avysy.d(9): Error: cannot implicitly convert expression `l[0]` of type `long` to `int`\n/tmp/tmpr60avysy.d(10): Error: cannot implicitly convert expression `l[0]` of type `long` to `int`\n/tmp/tmpr60avysy.d(14): Error: cannot implicitly convert expression `i` of type `long` to `int`\n/tmp/tmpr60avysy.d(16): Error: cannot implicitly convert expression `i` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr60avysy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tint n = l.length;\n\tint min = l[0];\n\tint max = l[0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tif (l[i] < min) \n\t\t{\n\t\t\tmin = l[i];\n\t\t}\n\t\tif (l[i] > max) \n\t\t{\n\t\t\tmax = l[i];\n\t\t}\n\t}\n\tif (max - min + 1 == n) \n\t{\n\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "/tmp/tmp2jw50x4c.d(9): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\n/tmp/tmp2jw50x4c.d(10): Error: cannot implicitly convert expression `l[0]` of type `long` to `int`\n/tmp/tmp2jw50x4c.d(11): Error: cannot implicitly convert expression `l[0]` of type `long` to `int`\n/tmp/tmp2jw50x4c.d(16): Error: cannot implicitly convert expression `l[cast(ulong)i]` of type `long` to `int`\n/tmp/tmp2jw50x4c.d(20): Error: cannot implicitly convert expression `l[cast(ulong)i]` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2jw50x4c.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(i; 1 .. l.length)\n\t{\n\t\tif(l[i] - l[i-1] != 1)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "/tmp/tmp8llcxz3a.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8llcxz3a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n    l.sort();\n    foreach(i; 1..l.length)\n        if (l[i] - l[i-1] != 1)\n            return false;\n    return true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "/tmp/tmpt8jxnw7x.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt8jxnw7x.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tint min = l[0];\n\tint max = l[0];\n\tforeach(i; l)\n\t{\n\t\tif(i < min)\n\t\t\tmin = i;\n\t\tif(i > max)\n\t\t\tmax = i;\n\t}\n\tif(max - min + 1 == l.length)\n\t{\n\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "/tmp/tmpynge3gae.d(9): Error: cannot implicitly convert expression `l[0]` of type `long` to `int`\n/tmp/tmpynge3gae.d(10): Error: cannot implicitly convert expression `l[0]` of type `long` to `int`\n/tmp/tmpynge3gae.d(14): Error: cannot implicitly convert expression `i` of type `long` to `int`\n/tmp/tmpynge3gae.d(16): Error: cannot implicitly convert expression `i` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpynge3gae.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(i; 0 .. l.length - 1) \n\t{\n\t\tif(l[i] + 1 != l[i + 1]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "/tmp/tmp0vxl27cm.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0vxl27cm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(i; 0 .. l.length - 1)\n\t{\n\t\tif(l[i] + 1 != l[i + 1])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "/tmp/tmpasoxa3a2.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpasoxa3a2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(i; 0..l.length-1)\n\t{\n\t\tif(l[i+1]-l[i]!=1)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "/tmp/tmpzurvwnbl.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzurvwnbl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tlong min = l[0];\n\tlong max = l[0];\n\tforeach(i; l) \n\t{\n\t\tif(i < min) \n\t\t{\n\t\t\tmin = i;\n\t\t}\n\t\tif(i > max) \n\t\t{\n\t\t\tmax = i;\n\t\t}\n\t}\n\tif(max - min + 1 == l.length) \n\t{\n\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(i;0..l.length-1)\n\t{\n\t\tif(l[i+1]-l[i]!=1)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517282,
      "stdout": "",
      "stderr": "/tmp/tmpfjcehx0n.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfjcehx0n.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tlong min = l[0];\n\tlong max = l[0];\n\tforeach(i; l) \n\t{\n\t\tif(i < min) \n\t\t{\n\t\t\tmin = i;\n\t\t}\n\t\tif(i > max) \n\t\t{\n\t\t\tmax = i;\n\t\t}\n\t}\n\tif(max - min + 1 == l.length) \n\t{\n\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\t// Sort the array\n\tl.sort();\n\t\n\t// Check if the array is consecutive\n\tforeach(i; 0..l.length-1)\n\t{\n\t\tif(l[i+1] - l[i] != 1)\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "/tmp/tmptctp3k1v.d(10): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptctp3k1v.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(i; 0..l.length-1)\n\t{\n\t\tif(l[i+1] - l[i] != 1)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517282,
      "stdout": "",
      "stderr": "/tmp/tmp977ak17i.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp977ak17i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(i; 0 .. l.length - 1)\n\t{\n\t\tif(l[i + 1] - l[i] != 1)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "/tmp/tmpiv7jgoq5.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiv7jgoq5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(i; 0 .. l.length - 1)\n\t{\n\t\tif(l[i] + 1 != l[i + 1])\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "/tmp/tmpqg6extfl.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqg6extfl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(i; 0..l.length-1)\n\t{\n\t\tif(l[i+1]-l[i] != 1)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "/tmp/tmpz6jqup6_.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz6jqup6_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tint len = l.length;\n\tint min = l[0];\n\tint max = l[0];\n\t\n\tfor(int i = 1; i < len; i++)\n\t{\n\t\tif(l[i] > max)\n\t\t\tmax = l[i];\n\t\tif(l[i] < min)\n\t\t\tmin = l[i];\n\t}\n\t\n\tif(max - min + 1 == len)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "/tmp/tmpxc_4be34.d(9): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\n/tmp/tmpxc_4be34.d(10): Error: cannot implicitly convert expression `l[0]` of type `long` to `int`\n/tmp/tmpxc_4be34.d(11): Error: cannot implicitly convert expression `l[0]` of type `long` to `int`\n/tmp/tmpxc_4be34.d(16): Error: cannot implicitly convert expression `l[cast(ulong)i]` of type `long` to `int`\n/tmp/tmpxc_4be34.d(18): Error: cannot implicitly convert expression `l[cast(ulong)i]` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxc_4be34.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(i; 0 .. l.length - 1)\n\t{\n\t\tif(l[i] + 1 != l[i + 1])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "/tmp/tmpasoxa3a2.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpasoxa3a2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tint min = l[0];\n\tint max = l[0];\n\tforeach(i; l)\n\t{\n\t\tif(i < min)\n\t\t\tmin = i;\n\t\tif(i > max)\n\t\t\tmax = i;\n\t}\n\tif(max - min + 1 == l.length)\n\t{\n\t\tforeach(i; l)\n\t\t{\n\t\t\tif(i - min >= l.length)\n\t\t\t\treturn false;\n\t\t\tl[i - min] = -1;\n\t\t}\n\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "/tmp/tmppbhoov09.d(9): Error: cannot implicitly convert expression `l[0]` of type `long` to `int`\n/tmp/tmppbhoov09.d(10): Error: cannot implicitly convert expression `l[0]` of type `long` to `int`\n/tmp/tmppbhoov09.d(14): Error: cannot implicitly convert expression `i` of type `long` to `int`\n/tmp/tmppbhoov09.d(16): Error: cannot implicitly convert expression `i` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppbhoov09.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(i;0..l.length-1)\n\t{\n\t\tif(l[i+1]-l[i]!=1)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517282,
      "stdout": "",
      "stderr": "/tmp/tmpu_f7o17q.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu_f7o17q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(i;0..l.length-1)\n\t{\n\t\tif(l[i+1]-l[i] != 1)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "/tmp/tmpbp7iikng.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbp7iikng.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tint n = l.length;\n\tint min = l[0];\n\tint max = l[0];\n\tfor (int i = 1; i < n; i++)\n\t{\n\t\tif (l[i] < min)\n\t\t\tmin = l[i];\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\t}\n\tif (max - min + 1 == n)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "/tmp/tmp4slh8ov4.d(9): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\n/tmp/tmp4slh8ov4.d(10): Error: cannot implicitly convert expression `l[0]` of type `long` to `int`\n/tmp/tmp4slh8ov4.d(11): Error: cannot implicitly convert expression `l[0]` of type `long` to `int`\n/tmp/tmp4slh8ov4.d(15): Error: cannot implicitly convert expression `l[cast(ulong)i]` of type `long` to `int`\n/tmp/tmp4slh8ov4.d(17): Error: cannot implicitly convert expression `l[cast(ulong)i]` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4slh8ov4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(i; l)\n\t{\n\t\tif(i != l[0])\n\t\t{\n\t\t\tif(i != l[0] + 1)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "/tmp/tmp2rr8hr0q.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2rr8hr0q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(i;0..l.length-1)\n\t{\n\t\tif(l[i+1]-l[i]!=1)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517282,
      "stdout": "",
      "stderr": "/tmp/tmpu_f7o17q.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu_f7o17q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(i; 0..l.length-1)\n\t{\n\t\tif(l[i+1] - l[i] != 1)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517282,
      "stdout": "",
      "stderr": "/tmp/tmp73a0mx2l.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp73a0mx2l.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(i; 0 .. l.length - 1) \n\t{\n\t\tif(l[i] + 1 != l[i + 1])\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "/tmp/tmpp4_n0e1z.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp4_n0e1z.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(i; 0..l.length-1)\n\t{\n\t\tif(l[i+1]-l[i]!=1)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "/tmp/tmp9l7lupyu.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9l7lupyu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort;\n\tforeach(i; 0..l.length-1) \n\t{\n\t\tif(l[i+1]-l[i] != 1)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "/tmp/tmp2h4t_w9x.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2h4t_w9x.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(i; 0..l.length-1)\n\t{\n\t\tif(l[i+1] - l[i] != 1)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517282,
      "stdout": "",
      "stderr": "/tmp/tmp977ak17i.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp977ak17i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(i; 0..l.length-1)\n\t{\n\t\tif(l[i+1]-l[i] != 1)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517282,
      "stdout": "",
      "stderr": "/tmp/tmp9hfm2ifm.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9hfm2ifm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort;\n\tforeach(i;0..l.length-1)\n\t{\n\t\tif(l[i+1]-l[i] != 1)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "/tmp/tmpkk5_3yti.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkk5_3yti.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tint min = l[0];\n\tint max = l[0];\n\tforeach (i; l) \n\t{\n\t\tif (i < min) \n\t\t{\n\t\t\tmin = i;\n\t\t}\n\t\tif (i > max) \n\t\t{\n\t\t\tmax = i;\n\t\t}\n\t}\n\tif (max - min + 1 == l.length) \n\t{\n\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "/tmp/tmpq38nyyi2.d(9): Error: cannot implicitly convert expression `l[0]` of type `long` to `int`\n/tmp/tmpq38nyyi2.d(10): Error: cannot implicitly convert expression `l[0]` of type `long` to `int`\n/tmp/tmpq38nyyi2.d(15): Error: cannot implicitly convert expression `i` of type `long` to `int`\n/tmp/tmpq38nyyi2.d(19): Error: cannot implicitly convert expression `i` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq38nyyi2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(i; 0 .. l.length - 1) \n\t{\n\t\tif(abs(l[i] - l[i + 1]) != 1) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "/tmp/tmp82v21u1v.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp82v21u1v.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(i; 0..l.length-1)\n\t{\n\t\tif(l[i+1] - l[i] != 1)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517282,
      "stdout": "",
      "stderr": "/tmp/tmp977ak17i.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp977ak17i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tbool result = true;\n\tlong min = l[0];\n\tlong max = l[0];\n\tforeach(i; l)\n\t{\n\t\tif(i < min)\n\t\t\tmin = i;\n\t\tif(i > max)\n\t\t\tmax = i;\n\t}\n\t\n\tif(max - min + 1 != l.length)\n\t\tresult = false;\n\telse\n\t{\n\t\tlong[] temp = new long[l.length];\n\t\tforeach(i; l)\n\t\t\ttemp[i - min] = 1;\n\t\tforeach(i; temp)\n\t\t{\n\t\t\tif(i == 0)\n\t\t\t\tresult = false;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tint min = l[0];\n\tint max = l[0];\n\tforeach(i; l) \n\t{\n\t\tif (i < min) \n\t\t{\n\t\t\tmin = i;\n\t\t}\n\t\tif (i > max) \n\t\t{\n\t\t\tmax = i;\n\t\t}\n\t}\n\tif (max - min + 1 == l.length) \n\t{\n\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "/tmp/tmpd6k7lhzz.d(9): Error: cannot implicitly convert expression `l[0]` of type `long` to `int`\n/tmp/tmpd6k7lhzz.d(10): Error: cannot implicitly convert expression `l[0]` of type `long` to `int`\n/tmp/tmpd6k7lhzz.d(15): Error: cannot implicitly convert expression `i` of type `long` to `int`\n/tmp/tmpd6k7lhzz.d(19): Error: cannot implicitly convert expression `i` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd6k7lhzz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{ \n\tlong min = l[0], max = l[0]; \n\tforeach(i; l) \n\t{ \n\t\tif (i < min) \n\t\t\tmin = i; \n\t\tif (i > max) \n\t\t\tmax = i; \n\t} \n\tif (max - min + 1 == l.length) \n\t{ \n\t\treturn true; \n\t} \n\treturn false; \n} \nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tint n = l.length;\n\tint min = l[0];\n\tint max = l[0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tif (l[i] < min) \n\t\t{\n\t\t\tmin = l[i];\n\t\t}\n\t\tif (l[i] > max) \n\t\t{\n\t\t\tmax = l[i];\n\t\t}\n\t}\n\tif (max - min + 1 == n) \n\t{\n\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "/tmp/tmp2jw50x4c.d(9): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\n/tmp/tmp2jw50x4c.d(10): Error: cannot implicitly convert expression `l[0]` of type `long` to `int`\n/tmp/tmp2jw50x4c.d(11): Error: cannot implicitly convert expression `l[0]` of type `long` to `int`\n/tmp/tmp2jw50x4c.d(16): Error: cannot implicitly convert expression `l[cast(ulong)i]` of type `long` to `int`\n/tmp/tmp2jw50x4c.d(20): Error: cannot implicitly convert expression `l[cast(ulong)i]` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2jw50x4c.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(i;0..l.length-1)\n\t{\n\t\tif(abs(l[i]-l[i+1])!=1)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "/tmp/tmpo0yhdw68.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo0yhdw68.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(i; 0 .. l.length - 1)\n\t{\n\t\tif(l[i] + 1 != l[i + 1])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "/tmp/tmpasoxa3a2.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpasoxa3a2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(i; 0..l.length-1)\n\t{\n\t\tif(l[i+1] - l[i] != 1)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517282,
      "stdout": "",
      "stderr": "/tmp/tmp977ak17i.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp977ak17i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(i; 0 .. l.length - 1)\n\t{\n\t\tif(l[i] + 1 != l[i + 1])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "/tmp/tmpasoxa3a2.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpasoxa3a2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(i; 0..l.length-1)\n\t{\n\t\tif(l[i+1] - l[i] != 1)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517282,
      "stdout": "",
      "stderr": "/tmp/tmp977ak17i.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp977ak17i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tlong min = min(l);\n\tlong max = max(l);\n\t\n\tif(max - min + 1 == l.length)\n\t{\n\t\tforeach(i; l)\n\t\t{\n\t\t\tif(i - min >= l.length)\n\t\t\t\treturn false;\n\t\t\t\n\t\t\tl[i - min] = -1;\n\t\t}\n\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "/tmp/tmpiqcq1xpy.d(9): Error: undefined identifier `min`, did you mean function `main`?\n/tmp/tmpiqcq1xpy.d(10): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiqcq1xpy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(i; 0 .. l.length - 1)\n\t{\n\t\tif(l[i] + 1 != l[i + 1])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "/tmp/tmpasoxa3a2.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpasoxa3a2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tint min = l[0];\n\tint max = l[0];\n\tforeach(i; l)\n\t{\n\t\tif(i < min)\n\t\t\tmin = i;\n\t\tif(i > max)\n\t\t\tmax = i;\n\t}\n\tif(max - min + 1 == l.length)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "/tmp/tmpr60avysy.d(9): Error: cannot implicitly convert expression `l[0]` of type `long` to `int`\n/tmp/tmpr60avysy.d(10): Error: cannot implicitly convert expression `l[0]` of type `long` to `int`\n/tmp/tmpr60avysy.d(14): Error: cannot implicitly convert expression `i` of type `long` to `int`\n/tmp/tmpr60avysy.d(16): Error: cannot implicitly convert expression `i` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr60avysy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tint min = l[0];\n\tint max = l[0];\n\tforeach(i; l)\n\t{\n\t\tif(i < min)\n\t\t\tmin = i;\n\t\tif(i > max)\n\t\t\tmax = i;\n\t}\n\tif(max - min + 1 == l.length)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "/tmp/tmpzimtpo4d.d(9): Error: cannot implicitly convert expression `l[0]` of type `long` to `int`\n/tmp/tmpzimtpo4d.d(10): Error: cannot implicitly convert expression `l[0]` of type `long` to `int`\n/tmp/tmpzimtpo4d.d(14): Error: cannot implicitly convert expression `i` of type `long` to `int`\n/tmp/tmpzimtpo4d.d(16): Error: cannot implicitly convert expression `i` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzimtpo4d.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tbool result = true;\n\tlong min = l[0];\n\tlong max = l[0];\n\tforeach(long i; l)\n\t{\n\t\tif(i < min)\n\t\t{\n\t\t\tmin = i;\n\t\t}\n\t\tif(i > max)\n\t\t{\n\t\t\tmax = i;\n\t\t}\n\t}\n\tif(max - min + 1 == l.length)\n\t{\n\t\tforeach(long i; l)\n\t\t{\n\t\t\tif(!l.contains(min))\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t}\n\t\t\tmin++;\n\t\t}\n\t}\n\telse\n\t{\n\t\tresult = false;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "/tmp/tmpjzekppa6.d(27): Error: no property `contains` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjzekppa6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(i; 0 .. l.length - 1)\n\t{\n\t\tif(l[i] + 1 != l[i + 1])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "/tmp/tmpasoxa3a2.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpasoxa3a2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tint n = l.length;\n\tint min = l[0];\n\tint max = l[0];\n\tfor (int i = 1; i < n; i++)\n\t{\n\t\tif (l[i] < min)\n\t\t\tmin = l[i];\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\t}\n\tif (max - min + 1 == n)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "/tmp/tmp4slh8ov4.d(9): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\n/tmp/tmp4slh8ov4.d(10): Error: cannot implicitly convert expression `l[0]` of type `long` to `int`\n/tmp/tmp4slh8ov4.d(11): Error: cannot implicitly convert expression `l[0]` of type `long` to `int`\n/tmp/tmp4slh8ov4.d(15): Error: cannot implicitly convert expression `l[cast(ulong)i]` of type `long` to `int`\n/tmp/tmp4slh8ov4.d(17): Error: cannot implicitly convert expression `l[cast(ulong)i]` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4slh8ov4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(i; 0 .. l.length - 1)\n\t{\n\t\tif(l[i] + 1 != l[i + 1])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "/tmp/tmpasoxa3a2.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpasoxa3a2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(i; 0..l.length-1)\n\t{\n\t\tif(abs(l[i]-l[i+1]) != 1)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "/tmp/tmpqcz44l2t.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqcz44l2t.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tlong min = l[0];\n\tlong max = l[0];\n\tforeach(e; l)\n\t{\n\t\tif(e < min)\n\t\t\tmin = e;\n\t\tif(e > max)\n\t\t\tmax = e;\n\t}\n\tif(max - min + 1 == l.length)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort;\n\tforeach(i;0..l.length-1)\n\t{\n\t\tif(l[i+1]-l[i]!=1)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "/tmp/tmp0k9o9_vv.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0k9o9_vv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(i; 0..l.length-1)\n\t{\n\t\tif(abs(l[i]-l[i+1]) != 1)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "/tmp/tmpqcz44l2t.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqcz44l2t.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(i; 0 .. l.length-1)\n\t{\n\t\tif(l[i+1] - l[i] != 1)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "/tmp/tmpsoapw6ok.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsoapw6ok.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(i; 0..l.length-1)\n\t{\n\t\tif(l[i+1] - l[i] != 1)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517282,
      "stdout": "",
      "stderr": "/tmp/tmp73a0mx2l.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp73a0mx2l.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tlong[] temp = l;\n\tsort(temp);\n\tforeach(i; 0..temp.length-1) \n\t{\n\t\tif(temp[i+1]-temp[i] != 1)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "/tmp/tmpr_59g2z8.d(10): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr_59g2z8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tint n = l.length;\n\tint min = l[0];\n\tint max = l[0];\n\tforeach(i; l)\n\t{\n\t\tif(i < min)\n\t\t\tmin = i;\n\t\tif(i > max)\n\t\t\tmax = i;\n\t}\n\tif(max - min + 1 == n)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "/tmp/tmphl77664y.d(9): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\n/tmp/tmphl77664y.d(10): Error: cannot implicitly convert expression `l[0]` of type `long` to `int`\n/tmp/tmphl77664y.d(11): Error: cannot implicitly convert expression `l[0]` of type `long` to `int`\n/tmp/tmphl77664y.d(15): Error: cannot implicitly convert expression `i` of type `long` to `int`\n/tmp/tmphl77664y.d(17): Error: cannot implicitly convert expression `i` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphl77664y.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(i;0..l.length-1)\n\t{\n\t\tif(l[i+1]-l[i]!=1)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517282,
      "stdout": "",
      "stderr": "/tmp/tmpfjcehx0n.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfjcehx0n.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(i;0..l.length-1)\n\t{\n\t\tif(l[i+1]-l[i] != 1)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "/tmp/tmpbp7iikng.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbp7iikng.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tlong[] temp = l.dup;\n\ttemp.sort;\n\tforeach(i; 0..temp.length-1)\n\t{\n\t\tif(temp[i+1] - temp[i] != 1)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "/tmp/tmpym5m9p21.d(10): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpym5m9p21.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(i; 0..l.length-1)\n\t{\n\t\tif(l[i+1] - l[i] != 1)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517282,
      "stdout": "",
      "stderr": "/tmp/tmp977ak17i.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp977ak17i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tint min = l[0];\n\tint max = l[0];\n\tforeach(i; l)\n\t{\n\t\tif(i < min)\n\t\t\tmin = i;\n\t\tif(i > max)\n\t\t\tmax = i;\n\t}\n\tif(max - min + 1 == l.length)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "/tmp/tmpzimtpo4d.d(9): Error: cannot implicitly convert expression `l[0]` of type `long` to `int`\n/tmp/tmpzimtpo4d.d(10): Error: cannot implicitly convert expression `l[0]` of type `long` to `int`\n/tmp/tmpzimtpo4d.d(14): Error: cannot implicitly convert expression `i` of type `long` to `int`\n/tmp/tmpzimtpo4d.d(16): Error: cannot implicitly convert expression `i` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzimtpo4d.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tint n = l.length;\n\tint min = l[0];\n\tint max = l[0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tif (l[i] < min)\n\t\t\tmin = l[i];\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\t}\n\tif (max - min + 1 == n)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517282,
      "stdout": "",
      "stderr": "/tmp/tmprs58kffv.d(9): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\n/tmp/tmprs58kffv.d(10): Error: cannot implicitly convert expression `l[0]` of type `long` to `int`\n/tmp/tmprs58kffv.d(11): Error: cannot implicitly convert expression `l[0]` of type `long` to `int`\n/tmp/tmprs58kffv.d(15): Error: cannot implicitly convert expression `l[cast(ulong)i]` of type `long` to `int`\n/tmp/tmprs58kffv.d(17): Error: cannot implicitly convert expression `l[cast(ulong)i]` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprs58kffv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tint min = l[0];\n\tint max = l[0];\n\tforeach(i; l)\n\t{\n\t\tif(i < min)\n\t\t\tmin = i;\n\t\tif(i > max)\n\t\t\tmax = i;\n\t}\n\tif(max - min + 1 == l.length)\n\t{\n\t\tint[] temp = new int[max - min + 1];\n\t\tforeach(i; l)\n\t\t{\n\t\t\ttemp[i - min]++;\n\t\t}\n\t\tforeach(i; temp)\n\t\t{\n\t\t\tif(i != 1)\n\t\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "/tmp/tmp0gdka7su.d(9): Error: cannot implicitly convert expression `l[0]` of type `long` to `int`\n/tmp/tmp0gdka7su.d(10): Error: cannot implicitly convert expression `l[0]` of type `long` to `int`\n/tmp/tmp0gdka7su.d(14): Error: cannot implicitly convert expression `i` of type `long` to `int`\n/tmp/tmp0gdka7su.d(16): Error: cannot implicitly convert expression `i` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0gdka7su.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tint n = l.length;\n\tint min = l[0];\n\tint max = l[0];\n\tforeach(i; l)\n\t{\n\t\tif(i < min)\n\t\t\tmin = i;\n\t\tif(i > max)\n\t\t\tmax = i;\n\t}\n\tif(max - min + 1 == n)\n\t{\n\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "/tmp/tmp2uee_799.d(9): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\n/tmp/tmp2uee_799.d(10): Error: cannot implicitly convert expression `l[0]` of type `long` to `int`\n/tmp/tmp2uee_799.d(11): Error: cannot implicitly convert expression `l[0]` of type `long` to `int`\n/tmp/tmp2uee_799.d(15): Error: cannot implicitly convert expression `i` of type `long` to `int`\n/tmp/tmp2uee_799.d(17): Error: cannot implicitly convert expression `i` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2uee_799.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tint i;\n\tint min = l[0];\n\tint max = l[0];\n\t\n\tfor(i = 1; i < l.length; i++)\n\t{\n\t\tif(l[i] < min)\n\t\t{\n\t\t\tmin = l[i];\n\t\t}\n\t\telse if(l[i] > max)\n\t\t{\n\t\t\tmax = l[i];\n\t\t}\n\t}\n\t\n\tif(max - min + 1 == l.length)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "/tmp/tmp5_y0xh4h.d(10): Error: cannot implicitly convert expression `l[0]` of type `long` to `int`\n/tmp/tmp5_y0xh4h.d(11): Error: cannot implicitly convert expression `l[0]` of type `long` to `int`\n/tmp/tmp5_y0xh4h.d(17): Error: cannot implicitly convert expression `l[cast(ulong)i]` of type `long` to `int`\n/tmp/tmp5_y0xh4h.d(21): Error: cannot implicitly convert expression `l[cast(ulong)i]` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5_y0xh4h.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tint i;\n\tint min = l[0];\n\tint max = l[0];\n\tfor (i = 1; i < l.length; i++) \n\t{\n\t\tif (l[i] < min) \n\t\t{\n\t\t\tmin = l[i];\n\t\t}\n\t\tif (l[i] > max) \n\t\t{\n\t\t\tmax = l[i];\n\t\t}\n\t}\n\tif (max - min + 1 == l.length) \n\t{\n\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "/tmp/tmprsn86ryx.d(10): Error: cannot implicitly convert expression `l[0]` of type `long` to `int`\n/tmp/tmprsn86ryx.d(11): Error: cannot implicitly convert expression `l[0]` of type `long` to `int`\n/tmp/tmprsn86ryx.d(16): Error: cannot implicitly convert expression `l[cast(ulong)i]` of type `long` to `int`\n/tmp/tmprsn86ryx.d(20): Error: cannot implicitly convert expression `l[cast(ulong)i]` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprsn86ryx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(i;1..l.length)\n\t{\n\t\tif(l[i]-l[i-1]!=1)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "/tmp/tmpkhg8vlmd.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkhg8vlmd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tint min = l[0];\n\tint max = l[0];\n\t\n\tforeach(i; l)\n\t{\n\t\tif(i < min)\n\t\t\tmin = i;\n\t\tif(i > max)\n\t\t\tmax = i;\n\t}\n\t\n\tif(max - min + 1 == l.length)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "/tmp/tmp519vb_eb.d(9): Error: cannot implicitly convert expression `l[0]` of type `long` to `int`\n/tmp/tmp519vb_eb.d(10): Error: cannot implicitly convert expression `l[0]` of type `long` to `int`\n/tmp/tmp519vb_eb.d(15): Error: cannot implicitly convert expression `i` of type `long` to `int`\n/tmp/tmp519vb_eb.d(17): Error: cannot implicitly convert expression `i` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp519vb_eb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(i; 0..l.length-1)\n\t{\n\t\tif(l[i+1] - l[i] != 1)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517282,
      "stdout": "",
      "stderr": "/tmp/tmp977ak17i.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp977ak17i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tint i;\n\tint min = l[0];\n\tint max = l[0];\n\tint n = l.length;\n\tfor (i = 1; i < n; i++) \n\t{\n\t\tif (l[i] < min)\n\t\t\tmin = l[i];\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\t}\n\tif (max - min + 1 == n)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "/tmp/tmp41ajd1sb.d(10): Error: cannot implicitly convert expression `l[0]` of type `long` to `int`\n/tmp/tmp41ajd1sb.d(11): Error: cannot implicitly convert expression `l[0]` of type `long` to `int`\n/tmp/tmp41ajd1sb.d(12): Error: cannot implicitly convert expression `l.length` of type `ulong` to `int`\n/tmp/tmp41ajd1sb.d(16): Error: cannot implicitly convert expression `l[cast(ulong)i]` of type `long` to `int`\n/tmp/tmp41ajd1sb.d(18): Error: cannot implicitly convert expression `l[cast(ulong)i]` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp41ajd1sb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tlong min = l[0];\n\tlong max = l[0];\n\tforeach(i; l)\n\t{\n\t\tif(i < min)\n\t\t\tmin = i;\n\t\tif(i > max)\n\t\t\tmax = i;\n\t}\n\tif(max - min + 1 == l.length)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n{\n\tl.sort();\n\tforeach(i; 0..l.length-1)\n\t{\n\t\tif(l[i+1] - l[i] != 1)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517282,
      "stdout": "",
      "stderr": "/tmp/tmp977ak17i.d(9): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp977ak17i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}