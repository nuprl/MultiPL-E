{
  "name": "mbpp_563_extract_values",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_563_extract_values.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\t\n\twhile(true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif(start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif(end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1665517373,
      "stdout": "",
      "stderr": "/tmp/tmpzng24vcx.d(16): Error: no property `find` for type `string`\n/tmp/tmpzng24vcx.d(19): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzng24vcx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] values;\n\tint start = 0;\n\tint end = 0;\n\twhile (true) \n\t{\n\t\tstart = text.indexOf('\"', end);\n\t\tif (start == -1)\n\t\t\tbreak;\n\t\tend = text.indexOf('\"', start + 1);\n\t\tif (end == -1)\n\t\t\tbreak;\n\t\tvalues ~= text[start + 1 .. end];\n\t}\n\treturn values;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1665517373,
      "stdout": "",
      "stderr": "/tmp/tmp63jdnt_v.d(15): Error: no property `indexOf` for type `string`\n/tmp/tmp63jdnt_v.d(18): Error: no property `indexOf` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp63jdnt_v.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\twhile (true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif (start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif (end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1665517373,
      "stdout": "",
      "stderr": "/tmp/tmp09p0drpi.d(15): Error: no property `find` for type `string`\n/tmp/tmp09p0drpi.d(18): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp09p0drpi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\twhile (true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif (start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif (end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1665517373,
      "stdout": "",
      "stderr": "/tmp/tmp09p0drpi.d(15): Error: no property `find` for type `string`\n/tmp/tmp09p0drpi.d(18): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp09p0drpi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint index = 0;\n\twhile(true)\n\t{\n\t\tstart = text.find(\"\\\"\", index);\n\t\tif(start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif(end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tindex = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1665517373,
      "stdout": "",
      "stderr": "/tmp/tmpk9rc6q7g.d(16): Error: no property `find` for type `string`\n/tmp/tmpk9rc6q7g.d(19): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk9rc6q7g.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint i = 0;\n\twhile (i < text.length) \n\t{\n\t\tif (text[i] == '\"') \n\t\t{\n\t\t\tstart = i + 1;\n\t\t\tend = text.indexOf('\"', start);\n\t\t\tresult ~= text[start..end];\n\t\t\ti = end + 1;\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1665517373,
      "stdout": "",
      "stderr": "/tmp/tmp_c1qyzjc.d(19): Error: no property `indexOf` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_c1qyzjc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint i = 0;\n\t\n\twhile(i < text.length)\n\t{\n\t\tif(text[i] == '\"')\n\t\t{\n\t\t\tif(start == 0)\n\t\t\t{\n\t\t\t\tstart = i;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tend = i;\n\t\t\t\tresult ~= text[start..end];\n\t\t\t\tstart = 0;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpyw0j8xir.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x428d9d]\n??:? void tmpyw0j8xir.__unittest_L34_C1() [0x427d26]\n??:? void tmpyw0j8xir.__modtest() [0x428008]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e0d7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428af6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42af85]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b014]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42af11]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428acd]\n??:? runModuleUnitTests [0x42dead]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429260]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint i = 0;\n\twhile (i < text.length)\n\t{\n\t\tif (text[i] == '\"')\n\t\t{\n\t\t\tstart = i;\n\t\t\ti++;\n\t\t\twhile (text[i] != '\"')\n\t\t\t{\n\t\t\t\ti++;\n\t\t\t}\n\t\t\tend = i;\n\t\t\tresult ~= text[start..end];\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpsh72r_bc.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x428dc5]\n??:? void tmpsh72r_bc.__unittest_L31_C1() [0x427d4a]\n??:? void tmpsh72r_bc.__modtest() [0x42802c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e0ff]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428b1e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42afad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b03c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42af39]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428af5]\n??:? runModuleUnitTests [0x42ded5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429288]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] values;\n\tint start = 0;\n\tint end = 0;\n\twhile((start = text.find(\"\\\"\", start)) != -1)\n\t{\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tvalues ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn values;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1665517373,
      "stdout": "",
      "stderr": "/tmp/tmprz1il4ut.d(13): Error: no property `find` for type `string`\n/tmp/tmprz1il4ut.d(15): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprz1il4ut.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint i = 0;\n\twhile (i < text.length) \n\t{\n\t\tif (text[i] == '\"') \n\t\t{\n\t\t\tif (start == 0) \n\t\t\t{\n\t\t\t\tstart = i + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tend = i;\n\t\t\t\tresult ~= text[start..end];\n\t\t\t\tstart = 0;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\twhile (true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif (start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif (end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1665517373,
      "stdout": "",
      "stderr": "/tmp/tmp09p0drpi.d(15): Error: no property `find` for type `string`\n/tmp/tmp09p0drpi.d(18): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp09p0drpi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint i = 0;\n\t\n\twhile(i < text.length)\n\t{\n\t\tif(text[i] == '\"')\n\t\t{\n\t\t\tstart = i;\n\t\t\ti++;\n\t\t\twhile(text[i] != '\"')\n\t\t\t{\n\t\t\t\ti++;\n\t\t\t}\n\t\t\tend = i;\n\t\t\tresult ~= text[start..end];\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpu9_2aff9.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x428dc5]\n??:? void tmpu9_2aff9.__unittest_L32_C1() [0x427d4a]\n??:? void tmpu9_2aff9.__modtest() [0x42802c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e0ff]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428b1e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42afad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b03c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42af39]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428af5]\n??:? runModuleUnitTests [0x42ded5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429288]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\twhile(start != -1 && end != -1)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif(start != -1 && end != -1)\n\t\t{\n\t\t\tresult ~= text[start + 1 .. end];\n\t\t\tstart = end + 1;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1665517373,
      "stdout": "",
      "stderr": "/tmp/tmp216friov.d(15): Error: no property `find` for type `string`\n/tmp/tmp216friov.d(16): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp216friov.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\twhile(true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif(start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif(end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1665517373,
      "stdout": "",
      "stderr": "/tmp/tmptf7tozpo.d(15): Error: no property `find` for type `string`\n/tmp/tmptf7tozpo.d(18): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptf7tozpo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint i = 0;\n\twhile(i < text.length)\n\t{\n\t\tif(text[i] == '\"')\n\t\t{\n\t\t\tstart = i;\n\t\t\twhile(text[i] != '\"')\n\t\t\t{\n\t\t\t\ti++;\n\t\t\t}\n\t\t\tend = i;\n\t\t\tresult ~= text[start..end];\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqtfc6lcs.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428dbd]\n??:? void tmpqtfc6lcs.__unittest_L30_C1() [0x427d46]\n??:? void tmpqtfc6lcs.__modtest() [0x428028]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e0f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428b16]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42afa5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b034]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42af31]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428aed]\n??:? runModuleUnitTests [0x42decd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429280]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint i = 0;\n\twhile(i < text.length)\n\t{\n\t\tif(text[i] == '\"')\n\t\t{\n\t\t\tstart = i;\n\t\t\tend = text.find('\"', start + 1);\n\t\t\tresult ~= text[start..end];\n\t\t\ti = end;\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1665517373,
      "stdout": "",
      "stderr": "/tmp/tmpnjox87l2.d(19): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnjox87l2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint i = 0;\n\twhile (i < text.length) \n\t{\n\t\tif (text[i] == '\"') \n\t\t{\n\t\t\tstart = i;\n\t\t\ti++;\n\t\t\twhile (i < text.length && text[i] != '\"') \n\t\t\t{\n\t\t\t\ti++;\n\t\t\t}\n\t\t\tend = i;\n\t\t\tresult ~= text[start..end];\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpajndfvlt.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x428dc5]\n??:? void tmpajndfvlt.__unittest_L31_C1() [0x427d4e]\n??:? void tmpajndfvlt.__modtest() [0x428030]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e0ff]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428b1e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42afad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b03c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42af39]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428af5]\n??:? runModuleUnitTests [0x42ded5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429288]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] values;\n\tint start = 0;\n\tint end = 0;\n\twhile (true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif (start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif (end == -1)\n\t\t\tbreak;\n\t\tvalues ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn values;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1665517373,
      "stdout": "",
      "stderr": "/tmp/tmp1lthngls.d(15): Error: no property `find` for type `string`\n/tmp/tmp1lthngls.d(18): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1lthngls.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\twhile (true) \n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif (start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif (end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1665517373,
      "stdout": "",
      "stderr": "/tmp/tmphy4cq32_.d(15): Error: no property `find` for type `string`\n/tmp/tmphy4cq32_.d(18): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphy4cq32_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\t\n\twhile (true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif (start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif (end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1665517373,
      "stdout": "",
      "stderr": "/tmp/tmp0sn9n8xm.d(16): Error: no property `find` for type `string`\n/tmp/tmp0sn9n8xm.d(19): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0sn9n8xm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\t\n\tint start_pos = 0;\n\tint end_pos = 0;\n\t\n\twhile(true)\n\t{\n\t\tstart_pos = text.find(\"\\\"\", start_pos);\n\t\tif(start_pos == -1)\n\t\t\tbreak;\n\t\t\n\t\tend_pos = text.find(\"\\\"\", start_pos + 1);\n\t\tif(end_pos == -1)\n\t\t\tbreak;\n\t\t\n\t\tresult ~= text[start_pos + 1 .. end_pos];\n\t\t\n\t\tstart_pos = end_pos + 1;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123014,
      "stdout": "",
      "stderr": "/tmp/tmpk9lyb1_2.d(17): Error: no property `find` for type `string`\n/tmp/tmpk9lyb1_2.d(21): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk9lyb1_2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\twhile(true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif(start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif(end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1665517373,
      "stdout": "",
      "stderr": "/tmp/tmptf7tozpo.d(15): Error: no property `find` for type `string`\n/tmp/tmptf7tozpo.d(18): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptf7tozpo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\twhile (true)\n\t{\n\t\tstart = text.find('\"', start);\n\t\tif (start == -1)\n\t\t\tbreak;\n\t\tend = text.find('\"', start + 1);\n\t\tif (end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start+1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123014,
      "stdout": "",
      "stderr": "/tmp/tmp4bmveoho.d(15): Error: no property `find` for type `string`\n/tmp/tmp4bmveoho.d(18): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4bmveoho.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint len = 0;\n\t\n\twhile(true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif(start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif(end == -1)\n\t\t\tbreak;\n\t\tlen = end - start - 1;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123014,
      "stdout": "",
      "stderr": "/tmp/tmph_dd9syd.d(17): Error: no property `find` for type `string`\n/tmp/tmph_dd9syd.d(20): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph_dd9syd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint i = 0;\n\twhile(i < text.length)\n\t{\n\t\tif(text[i] == '\"')\n\t\t{\n\t\t\tstart = i;\n\t\t\ti++;\n\t\t\twhile(i < text.length && text[i] != '\"')\n\t\t\t{\n\t\t\t\ti++;\n\t\t\t}\n\t\t\tend = i;\n\t\t\tresult ~= text[start..end];\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123014,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp_6_21syr.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x428dc5]\n??:? void tmp_6_21syr.__unittest_L31_C1() [0x427d4e]\n??:? void tmp_6_21syr.__modtest() [0x428030]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e0ff]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428b1e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42afad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b03c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42af39]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428af5]\n??:? runModuleUnitTests [0x42ded5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429288]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint i = 0;\n\t\n\twhile(i < text.length)\n\t{\n\t\tif(text[i] == '\"')\n\t\t{\n\t\t\tstart = i;\n\t\t\ti++;\n\t\t\twhile(text[i] != '\"')\n\t\t\t{\n\t\t\t\ti++;\n\t\t\t}\n\t\t\tend = i;\n\t\t\tresult ~= text[start..end];\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpu9_2aff9.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x428dc5]\n??:? void tmpu9_2aff9.__unittest_L32_C1() [0x427d4a]\n??:? void tmpu9_2aff9.__modtest() [0x42802c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e0ff]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428b1e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42afad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b03c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42af39]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428af5]\n??:? runModuleUnitTests [0x42ded5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429288]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tauto result = [];\n\tauto start = 0;\n\tauto end = 0;\n\twhile(true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif(start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif(end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123014,
      "stdout": "",
      "stderr": "/tmp/tmptcgiieax.d(15): Error: no property `find` for type `string`\n/tmp/tmptcgiieax.d(18): Error: no property `find` for type `string`\n/tmp/tmptcgiieax.d(21): Error: cannot append type `string` to type `void[]`\n/tmp/tmptcgiieax.d(24): Error: cannot implicitly convert expression `result` of type `void[]` to `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptcgiieax.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\t\n\twhile(true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif(start == -1) break;\n\t\tend = text.find(\"\\\"\", start+1);\n\t\tif(end == -1) break;\n\t\tresult ~= text[start+1..end];\n\t\tstart = end+1;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123014,
      "stdout": "",
      "stderr": "/tmp/tmp_usrw51i.d(16): Error: no property `find` for type `string`\n/tmp/tmp_usrw51i.d(18): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_usrw51i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint l = 0;\n\tint m = 0;\n\tint n = 0;\n\tint o = 0;\n\tint p = 0;\n\tint q = 0;\n\tint r = 0;\n\tint s = 0;\n\tint t = 0;\n\tint u = 0;\n\tint v = 0;\n\tint w = 0;\n\tint x = 0;\n\tint y = 0;\n\tint z = 0;\n\tint aa = 0;\n\tint bb = 0;\n\tint cc = 0;\n\tint dd = 0;\n\tint ee = 0;\n\tint ff = 0;\n\tint gg = 0;\n\tint hh = 0;\n\tint ii = 0;\n\tint jj = 0;\n\tint kk = 0;\n\tint ll = 0;\n\tint mm = 0;\n\tint nn = 0;\n\tint oo = 0;\n\tint pp = 0;\n\tint qq = 0;\n\tint rr = 0;\n\tint ss = 0;\n\tint tt = 0;\n\tint uu = 0;\n\tint vv = 0;\n\tint ww = 0;\n\tint xx = 0;\n\tint yy = 0;\n\tint zz = 0;\n\tint aaa = 0;\n\tint bbb = 0;\n\tint ccc = 0;\n\tint ddd = 0;\n\tint eee = 0;\n\tint fff = 0;\n\tint ggg = 0;\n\tint hhh = 0;\n\tint iii = 0;\n\tint jjj = 0;\n\tint kkk = 0;\n\tint lll = 0;\n\tint mmm = 0;\n\tint nnn = 0;\n\tint ooo = 0;\n\tint ppp = 0;\n\tint qqq = 0;\n\tint rrr = 0;\n\tint sss = 0;\n\tint ttt = 0;\n\tint uuu = 0;\n\tint vvv = 0;\n\tint www\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123014,
      "stdout": "",
      "stderr": "/tmp/tmpfah132vr.d(78): Error: semicolon expected, not `unittest`\n/tmp/tmpfah132vr.d(78): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfah132vr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\t\n\twhile (true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif (start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif (end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1665517373,
      "stdout": "",
      "stderr": "/tmp/tmp0sn9n8xm.d(16): Error: no property `find` for type `string`\n/tmp/tmp0sn9n8xm.d(19): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0sn9n8xm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint length = text.length;\n\twhile (start < length) \n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif (start == -1) \n\t\t{\n\t\t\tbreak;\n\t\t}\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif (end == -1) \n\t\t{\n\t\t\tbreak;\n\t\t}\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123014,
      "stdout": "",
      "stderr": "/tmp/tmp4m85zpdc.d(13): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\n/tmp/tmp4m85zpdc.d(16): Error: no property `find` for type `string`\n/tmp/tmp4m85zpdc.d(21): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4m85zpdc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tint start = 0;\n\tint end = 0;\n\tstring[] result;\n\twhile(true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif(start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif(end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123014,
      "stdout": "",
      "stderr": "/tmp/tmp52vivc13.d(15): Error: no property `find` for type `string`\n/tmp/tmp52vivc13.d(18): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp52vivc13.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\twhile (true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif (start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif (end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1..end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123014,
      "stdout": "",
      "stderr": "/tmp/tmpf4x_c_nv.d(15): Error: no property `find` for type `string`\n/tmp/tmpf4x_c_nv.d(18): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf4x_c_nv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tauto result = [];\n\tauto start = text.find(\"\\\"\");\n\twhile (start != -1) \n\t{\n\t\tauto end = text.find(\"\\\"\", start + 1);\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = text.find(\"\\\"\", end + 1);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123014,
      "stdout": "",
      "stderr": "/tmp/tmpeiez8cru.d(11): Error: no property `find` for type `string`\n/tmp/tmpeiez8cru.d(14): Error: no property `find` for type `string`\n/tmp/tmpeiez8cru.d(18): Error: cannot implicitly convert expression `result` of type `void[]` to `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpeiez8cru.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint pos = 0;\n\t\n\twhile (true)\n\t{\n\t\tstart = text.find(\"\\\"\", pos);\n\t\tif (start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif (end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tpos = end + 1;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123014,
      "stdout": "",
      "stderr": "/tmp/tmpk_j5m_lg.d(17): Error: no property `find` for type `string`\n/tmp/tmpk_j5m_lg.d(20): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk_j5m_lg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint i = 0;\n\twhile (i < text.length)\n\t{\n\t\tif (text[i] == '\"')\n\t\t{\n\t\t\tif (start == 0)\n\t\t\t{\n\t\t\t\tstart = i;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tend = i;\n\t\t\t\tresult ~= text[start+1..end];\n\t\t\t\tstart = 0;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123014,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpu84ztr0z.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x428da5]\n??:? void tmpu84ztr0z.__unittest_L33_C1() [0x427d2e]\n??:? void tmpu84ztr0z.__modtest() [0x428010]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e0df]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428afe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42af8d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b01c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42af19]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428ad5]\n??:? runModuleUnitTests [0x42deb5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429268]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\twhile(true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif(start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif(end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1665517373,
      "stdout": "",
      "stderr": "/tmp/tmptf7tozpo.d(15): Error: no property `find` for type `string`\n/tmp/tmptf7tozpo.d(18): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptf7tozpo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint i = 0;\n\twhile (i < text.length) \n\t{\n\t\tif (text[i] == '\"') \n\t\t{\n\t\t\tif (start == 0) \n\t\t\t{\n\t\t\t\tstart = i;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tend = i;\n\t\t\t\tresult ~= text[start+1..end];\n\t\t\t\tstart = 0;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123014,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpt65q9zv_.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x428da5]\n??:? void tmpt65q9zv_.__unittest_L33_C1() [0x427d2e]\n??:? void tmpt65q9zv_.__modtest() [0x428010]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e0df]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428afe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42af8d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b01c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42af19]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428ad5]\n??:? runModuleUnitTests [0x42deb5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429268]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\twhile(true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif(start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif(end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1665517373,
      "stdout": "",
      "stderr": "/tmp/tmptf7tozpo.d(15): Error: no property `find` for type `string`\n/tmp/tmptf7tozpo.d(18): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptf7tozpo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\twhile (true) \n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif (start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif (end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1665517373,
      "stdout": "",
      "stderr": "/tmp/tmphy4cq32_.d(15): Error: no property `find` for type `string`\n/tmp/tmphy4cq32_.d(18): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphy4cq32_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\twhile(true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif(start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif(end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1665517373,
      "stdout": "",
      "stderr": "/tmp/tmptf7tozpo.d(15): Error: no property `find` for type `string`\n/tmp/tmptf7tozpo.d(18): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptf7tozpo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint len = text.length;\n\twhile (start < len)\n\t{\n\t\tstart = text.indexOf(\"\\\"\", start);\n\t\tif (start == -1)\n\t\t\tbreak;\n\t\tend = text.indexOf(\"\\\"\", start + 1);\n\t\tif (end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123014,
      "stdout": "",
      "stderr": "/tmp/tmpp9tf9stp.d(13): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\n/tmp/tmpp9tf9stp.d(16): Error: no property `indexOf` for type `string`\n/tmp/tmpp9tf9stp.d(19): Error: no property `indexOf` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp9tf9stp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] values;\n\tint start = 0;\n\tint end = 0;\n\twhile (true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif (start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif (end == -1)\n\t\t\tbreak;\n\t\tvalues ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn values;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1665517373,
      "stdout": "",
      "stderr": "/tmp/tmp1lthngls.d(15): Error: no property `find` for type `string`\n/tmp/tmp1lthngls.d(18): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1lthngls.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint i = 0;\n\twhile(i < text.length) \n\t{\n\t\tif(text[i] == '\"') \n\t\t{\n\t\t\tstart = i;\n\t\t\ti++;\n\t\t\twhile(text[i] != '\"') \n\t\t\t{\n\t\t\t\ti++;\n\t\t\t}\n\t\t\tend = i;\n\t\t\tresult ~= text[start..end];\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123014,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5k9ckmmj.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x428dc5]\n??:? void tmp5k9ckmmj.__unittest_L31_C1() [0x427d4a]\n??:? void tmp5k9ckmmj.__modtest() [0x42802c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e0ff]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428b1e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42afad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b03c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42af39]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428af5]\n??:? runModuleUnitTests [0x42ded5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429288]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\twhile (true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif (start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif (end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1665517373,
      "stdout": "",
      "stderr": "/tmp/tmp09p0drpi.d(15): Error: no property `find` for type `string`\n/tmp/tmp09p0drpi.d(18): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp09p0drpi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tauto result = [];\n\tint start = 0;\n\tint end = 0;\n\twhile (true) \n\t{\n\t\tstart = text.indexOf(\"\\\"\", start);\n\t\tif (start == -1) break;\n\t\tend = text.indexOf(\"\\\"\", start + 1);\n\t\tif (end == -1) break;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123014,
      "stdout": "",
      "stderr": "/tmp/tmpsrrfcbij.d(15): Error: no property `indexOf` for type `string`\n/tmp/tmpsrrfcbij.d(17): Error: no property `indexOf` for type `string`\n/tmp/tmpsrrfcbij.d(19): Error: cannot append type `string` to type `void[]`\n/tmp/tmpsrrfcbij.d(22): Error: cannot implicitly convert expression `result` of type `void[]` to `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsrrfcbij.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint i = 0;\n\twhile (i < text.length) \n\t{\n\t\tif (text[i] == '\"') \n\t\t{\n\t\t\tstart = i + 1;\n\t\t\tend = text.indexOf('\"', start);\n\t\t\tresult ~= text[start..end];\n\t\t\ti = end + 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\ti++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123014,
      "stdout": "",
      "stderr": "/tmp/tmp9gvw3mg1.d(19): Error: no property `indexOf` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9gvw3mg1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint i = 0;\n\twhile(i < text.length)\n\t{\n\t\tif(text[i] == '\"')\n\t\t{\n\t\t\tif(start == 0)\n\t\t\t{\n\t\t\t\tstart = i;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tend = i;\n\t\t\t\tresult ~= text[start+1..end];\n\t\t\t\tstart = 0;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123014,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmphr6pxrjk.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x428da5]\n??:? void tmphr6pxrjk.__unittest_L33_C1() [0x427d2e]\n??:? void tmphr6pxrjk.__modtest() [0x428010]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e0df]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428afe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42af8d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b01c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42af19]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428ad5]\n??:? runModuleUnitTests [0x42deb5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429268]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\twhile(start < text.length)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif(start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif(end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123014,
      "stdout": "",
      "stderr": "/tmp/tmp6dpx8ynd.d(15): Error: no property `find` for type `string`\n/tmp/tmp6dpx8ynd.d(18): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6dpx8ynd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint i = 0;\n\twhile(i < text.length)\n\t{\n\t\tif(text[i] == '\"')\n\t\t{\n\t\t\tstart = i;\n\t\t\ti++;\n\t\t\twhile(i < text.length && text[i] != '\"')\n\t\t\t\ti++;\n\t\t\tend = i;\n\t\t\tresult ~= text[start..end];\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123014,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpiwh_g8ne.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x428dc5]\n??:? void tmpiwh_g8ne.__unittest_L29_C1() [0x427d4e]\n??:? void tmpiwh_g8ne.__modtest() [0x428030]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e0ff]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428b1e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42afad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b03c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42af39]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428af5]\n??:? runModuleUnitTests [0x42ded5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429288]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint i = 0;\n\twhile(i < text.length)\n\t{\n\t\tif(text[i] == '\"')\n\t\t{\n\t\t\tstart = i;\n\t\t\ti++;\n\t\t\twhile(i < text.length)\n\t\t\t{\n\t\t\t\tif(text[i] == '\"')\n\t\t\t\t{\n\t\t\t\t\tend = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\ti++;\n\t\t\t}\n\t\t\tresult ~= text[start..end];\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123014,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpgbea_tq7.d(39): unittest failure\n----------------\n??:? _d_unittestp [0x428dd5]\n??:? void tmpgbea_tq7.__unittest_L35_C1() [0x427d5a]\n??:? void tmpgbea_tq7.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e10f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428b2e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42afbd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b04c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42af49]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428b05]\n??:? runModuleUnitTests [0x42dee5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429298]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\twhile (start != -1 && end != -1)\n\t{\n\t\tstart = text.find('\"', start);\n\t\tend = text.find('\"', start + 1);\n\t\tif (start != -1 && end != -1)\n\t\t{\n\t\t\tresult ~= text[start + 1 .. end];\n\t\t\tstart = end + 1;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123014,
      "stdout": "",
      "stderr": "/tmp/tmpco_5idvr.d(15): Error: no property `find` for type `string`\n/tmp/tmpco_5idvr.d(16): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpco_5idvr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tauto result = [];\n\tauto start = 0;\n\tauto end = 0;\n\twhile (true) \n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif (start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif (end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123014,
      "stdout": "",
      "stderr": "/tmp/tmp1me5zd8d.d(15): Error: no property `find` for type `string`\n/tmp/tmp1me5zd8d.d(18): Error: no property `find` for type `string`\n/tmp/tmp1me5zd8d.d(21): Error: cannot append type `string` to type `void[]`\n/tmp/tmp1me5zd8d.d(24): Error: cannot implicitly convert expression `result` of type `void[]` to `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1me5zd8d.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\t\n\twhile(true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif(start == -1)\n\t\t\tbreak;\n\t\t\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif(end == -1)\n\t\t\tbreak;\n\t\t\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123014,
      "stdout": "",
      "stderr": "/tmp/tmptymkzn9o.d(16): Error: no property `find` for type `string`\n/tmp/tmptymkzn9o.d(20): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptymkzn9o.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\twhile(true)\n\t{\n\t\tstart = text.find(\"\\\"\",start);\n\t\tend = text.find(\"\\\"\",start+1);\n\t\tif(start == -1 || end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start+1..end];\n\t\tstart = end+1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123014,
      "stdout": "",
      "stderr": "/tmp/tmpw_egexw4.d(15): Error: no property `find` for type `string`\n/tmp/tmpw_egexw4.d(16): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw_egexw4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint length = text.length;\n\t\n\twhile(start < length)\n\t{\n\t\tstart = text.indexOf('\"', start);\n\t\tif(start == -1)\n\t\t\tbreak;\n\t\tend = text.indexOf('\"', start + 1);\n\t\tif(end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123014,
      "stdout": "",
      "stderr": "/tmp/tmp4e44unqs.d(13): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\n/tmp/tmp4e44unqs.d(17): Error: no property `indexOf` for type `string`\n/tmp/tmp4e44unqs.d(20): Error: no property `indexOf` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4e44unqs.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tauto result = text.split(\"\\\"\");\n\treturn result[1..$-1];\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123014,
      "stdout": "",
      "stderr": "/tmp/tmprp_snj11.d(10): Error: no property `split` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprp_snj11.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint i = 0;\n\twhile (i < text.length)\n\t{\n\t\tif (text[i] == '\"')\n\t\t{\n\t\t\tstart = i;\n\t\t\tend = text.indexOf('\"', start + 1);\n\t\t\tresult ~= text.substr(start + 1, end - start - 1);\n\t\t\ti = end + 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\ti++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123014,
      "stdout": "",
      "stderr": "/tmp/tmp7vat9cfu.d(19): Error: no property `indexOf` for type `string`\n/tmp/tmp7vat9cfu.d(20): Error: no property `substr` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7vat9cfu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint i = 0;\n\twhile(i < text.length)\n\t{\n\t\tif(text[i] == '\"')\n\t\t{\n\t\t\tif(start == 0)\n\t\t\t{\n\t\t\t\tstart = i;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tend = i;\n\t\t\t\tresult ~= text[start+1..end];\n\t\t\t\tstart = 0;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123014,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmphr6pxrjk.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x428da5]\n??:? void tmphr6pxrjk.__unittest_L33_C1() [0x427d2e]\n??:? void tmphr6pxrjk.__modtest() [0x428010]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e0df]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428afe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42af8d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b01c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42af19]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428ad5]\n??:? runModuleUnitTests [0x42deb5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429268]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\twhile (true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif (start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif (end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1665517373,
      "stdout": "",
      "stderr": "/tmp/tmp09p0drpi.d(15): Error: no property `find` for type `string`\n/tmp/tmp09p0drpi.d(18): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp09p0drpi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint i = 0;\n\twhile (i < text.length) \n\t{\n\t\tif (text[i] == '\"') \n\t\t{\n\t\t\tstart = i;\n\t\t\ti++;\n\t\t\twhile (i < text.length && text[i] != '\"') \n\t\t\t{\n\t\t\t\ti++;\n\t\t\t}\n\t\t\tend = i;\n\t\t\tresult ~= text[start..end];\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpajndfvlt.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x428dc5]\n??:? void tmpajndfvlt.__unittest_L31_C1() [0x427d4e]\n??:? void tmpajndfvlt.__modtest() [0x428030]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e0ff]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428b1e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42afad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b03c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42af39]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428af5]\n??:? runModuleUnitTests [0x42ded5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429288]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\twhile (true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif (start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif (end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1665517373,
      "stdout": "",
      "stderr": "/tmp/tmp09p0drpi.d(15): Error: no property `find` for type `string`\n/tmp/tmp09p0drpi.d(18): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp09p0drpi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\twhile (true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif (start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif (end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1665517373,
      "stdout": "",
      "stderr": "/tmp/tmp09p0drpi.d(15): Error: no property `find` for type `string`\n/tmp/tmp09p0drpi.d(18): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp09p0drpi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\twhile(true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif(start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif(end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1665517373,
      "stdout": "",
      "stderr": "/tmp/tmptf7tozpo.d(15): Error: no property `find` for type `string`\n/tmp/tmptf7tozpo.d(18): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptf7tozpo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint i = 0;\n\twhile (i < text.length) \n\t{\n\t\tif (text[i] == '\"') \n\t\t{\n\t\t\tstart = i;\n\t\t\ti++;\n\t\t\twhile (text[i] != '\"') \n\t\t\t{\n\t\t\t\ti++;\n\t\t\t}\n\t\t\tend = i;\n\t\t\tresult ~= text[start..end];\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123014,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpvc5w7d88.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x428dc5]\n??:? void tmpvc5w7d88.__unittest_L31_C1() [0x427d4a]\n??:? void tmpvc5w7d88.__modtest() [0x42802c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e0ff]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428b1e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42afad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b03c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42af39]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428af5]\n??:? runModuleUnitTests [0x42ded5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429288]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\t\n\twhile (true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif (start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif (end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1665517373,
      "stdout": "",
      "stderr": "/tmp/tmp0sn9n8xm.d(16): Error: no property `find` for type `string`\n/tmp/tmp0sn9n8xm.d(19): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0sn9n8xm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] values;\n\tint start = 0;\n\tint end = 0;\n\twhile(true)\n\t{\n\t\tstart = text.indexOf('\"', start);\n\t\tif(start == -1)\n\t\t\tbreak;\n\t\tend = text.indexOf('\"', start + 1);\n\t\tif(end == -1)\n\t\t\tbreak;\n\t\tvalues ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn values;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123014,
      "stdout": "",
      "stderr": "/tmp/tmpnwkr1btc.d(15): Error: no property `indexOf` for type `string`\n/tmp/tmpnwkr1btc.d(18): Error: no property `indexOf` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnwkr1btc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\twhile (true) {\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif (start == -1) {\n\t\t\tbreak;\n\t\t}\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif (end == -1) {\n\t\t\tbreak;\n\t\t}\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123014,
      "stdout": "",
      "stderr": "/tmp/tmpfc3ouk6y.d(14): Error: no property `find` for type `string`\n/tmp/tmpfc3ouk6y.d(18): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfc3ouk6y.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\t\n\twhile(true)\n\t{\n\t\tstart = text.find(\"\\\"\",start);\n\t\tend = text.find(\"\\\"\",start+1);\n\t\tif(start == -1 || end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start+1..end];\n\t\tstart = end+1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123014,
      "stdout": "",
      "stderr": "/tmp/tmpcy644v6n.d(16): Error: no property `find` for type `string`\n/tmp/tmpcy644v6n.d(17): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcy644v6n.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\twhile(start < text.length)\n\t{\n\t\tstart = text.indexOf(\"\\\"\", start);\n\t\tif(start == -1)\n\t\t\tbreak;\n\t\tend = text.indexOf(\"\\\"\", start + 1);\n\t\tif(end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123014,
      "stdout": "",
      "stderr": "/tmp/tmpo405tvmh.d(15): Error: no property `indexOf` for type `string`\n/tmp/tmpo405tvmh.d(18): Error: no property `indexOf` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo405tvmh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\twhile(true) \n\t{\n\t\tstart = text.find(\"\\\"\",start);\n\t\tif(start == -1) break;\n\t\tend = text.find(\"\\\"\",start+1);\n\t\tif(end == -1) break;\n\t\tresult ~= text[start+1..end];\n\t\tstart = end+1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123014,
      "stdout": "",
      "stderr": "/tmp/tmpzftwryer.d(15): Error: no property `find` for type `string`\n/tmp/tmpzftwryer.d(17): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzftwryer.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint i = 0;\n\twhile(true)\n\t{\n\t\tstart = text.indexOf(\"\\\"\", end);\n\t\tif(start == -1)\n\t\t\tbreak;\n\t\tend = text.indexOf(\"\\\"\", start + 1);\n\t\tif(end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123014,
      "stdout": "",
      "stderr": "/tmp/tmp3oi3vw8i.d(16): Error: no property `indexOf` for type `string`\n/tmp/tmp3oi3vw8i.d(19): Error: no property `indexOf` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3oi3vw8i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint i = 0;\n\twhile (i < text.length) \n\t{\n\t\tif (text[i] == '\"') \n\t\t{\n\t\t\tif (start == 0) \n\t\t\t{\n\t\t\t\tstart = i;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tend = i;\n\t\t\t\tresult ~= text[start..end];\n\t\t\t\tstart = 0;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123014,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpxh4nflkv.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x428d9d]\n??:? void tmpxh4nflkv.__unittest_L33_C1() [0x427d26]\n??:? void tmpxh4nflkv.__modtest() [0x428008]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e0d7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428af6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42af85]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b014]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42af11]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428acd]\n??:? runModuleUnitTests [0x42dead]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429260]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint len = text.length;\n\twhile (true) \n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif (start == -1) \n\t\t{\n\t\t\tbreak;\n\t\t}\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif (end == -1) \n\t\t{\n\t\t\tbreak;\n\t\t}\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\n/*\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values2(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint len = text.length;\n\twhile (true) \n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif (start == -1) \n\t\t{\n\t\t\tbreak;\n\t\t}\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif (end == -1) \n\t\t{\n\t\t\tbreak;\n\t\t}\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\n/*\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values3(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint len = text.length;\n\twhile (true) \n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif (start == -1) \n\t\t{\n\t\t\tbreak;\n\t\t}\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif (end == -1) \n\t\t{\n\t\t\tbreak;\n\t\t}\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123014,
      "stdout": "",
      "stderr": "/tmp/tmp8e5vgb5p.d(82): Error: found `unittest` instead of statement\n/tmp/tmp8e5vgb5p.d(90): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8e5vgb5p.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint i = 0;\n\twhile (i < text.length)\n\t{\n\t\tif (text[i] == '\"')\n\t\t{\n\t\t\tstart = i;\n\t\t\tend = text.find('\"', i+1);\n\t\t\tresult ~= text[start..end];\n\t\t\ti = end + 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\ti++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123014,
      "stdout": "",
      "stderr": "/tmp/tmpg_du6iy3.d(19): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg_du6iy3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\twhile (start != -1) \n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif (start != -1) \n\t\t{\n\t\t\tend = text.find(\"\\\"\", start + 1);\n\t\t\tif (end != -1) \n\t\t\t{\n\t\t\t\tresult ~= text[start + 1 .. end];\n\t\t\t\tstart = end + 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123014,
      "stdout": "",
      "stderr": "/tmp/tmpwef6r9v8.d(15): Error: no property `find` for type `string`\n/tmp/tmpwef6r9v8.d(18): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwef6r9v8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint i = 0;\n\twhile (i < text.length)\n\t{\n\t\tif (text[i] == '\"')\n\t\t{\n\t\t\tstart = i + 1;\n\t\t\tend = text.indexOf('\"', start);\n\t\t\tresult ~= text[start..end];\n\t\t\ti = end + 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\ti++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123014,
      "stdout": "",
      "stderr": "/tmp/tmpp7vt6fp0.d(19): Error: no property `indexOf` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp7vt6fp0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint pos = 0;\n\twhile (true) \n\t{\n\t\tint start = text.find(\"\\\"\", pos);\n\t\tif (start == -1) break;\n\t\tint end = text.find(\"\\\"\", start + 1);\n\t\tif (end == -1) break;\n\t\tresult ~= text[start + 1 .. end];\n\t\tpos = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123014,
      "stdout": "",
      "stderr": "/tmp/tmpvgjiymu3.d(14): Error: no property `find` for type `string`\n/tmp/tmpvgjiymu3.d(16): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvgjiymu3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint i = 0;\n\twhile (i < text.length)\n\t{\n\t\tif (text[i] == '\"')\n\t\t{\n\t\t\tstart = i;\n\t\t\ti++;\n\t\t\twhile (text[i] != '\"')\n\t\t\t{\n\t\t\t\ti++;\n\t\t\t}\n\t\t\tend = i;\n\t\t\tresult ~= text[start..end];\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpsh72r_bc.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x428dc5]\n??:? void tmpsh72r_bc.__unittest_L31_C1() [0x427d4a]\n??:? void tmpsh72r_bc.__modtest() [0x42802c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e0ff]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428b1e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42afad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b03c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42af39]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428af5]\n??:? runModuleUnitTests [0x42ded5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429288]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tforeach(i; 0..text.length)\n\t{\n\t\tif(text[i] == '\"')\n\t\t{\n\t\t\tif(start == 0)\n\t\t\t{\n\t\t\t\tstart = i;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tend = i;\n\t\t\t\tresult ~= text[start..end];\n\t\t\t\tstart = 0;\n\t\t\t\tend = 0;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123014,
      "stdout": "",
      "stderr": "/tmp/tmp2r8793e5.d(19): Error: cannot implicitly convert expression `i` of type `ulong` to `int`\n/tmp/tmp2r8793e5.d(23): Error: cannot implicitly convert expression `i` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2r8793e5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint i = 0;\n\twhile(i < text.length)\n\t{\n\t\tif(text[i] == '\"')\n\t\t{\n\t\t\tstart = i;\n\t\t\ti++;\n\t\t\twhile(text[i] != '\"')\n\t\t\t{\n\t\t\t\ti++;\n\t\t\t}\n\t\t\tend = i;\n\t\t\tresult ~= text[start..end];\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123015,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpihm6ukix.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x428dc5]\n??:? void tmpihm6ukix.__unittest_L31_C1() [0x427d4a]\n??:? void tmpihm6ukix.__modtest() [0x42802c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e0ff]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428b1e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42afad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b03c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42af39]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428af5]\n??:? runModuleUnitTests [0x42ded5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429288]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start_pos = 0;\n\tint end_pos = 0;\n\twhile(true)\n\t{\n\t\tstart_pos = text.find(\"\\\"\", start_pos);\n\t\tif(start_pos == -1)\n\t\t\tbreak;\n\t\tend_pos = text.find(\"\\\"\", start_pos + 1);\n\t\tif(end_pos == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start_pos + 1 .. end_pos - 1];\n\t\tstart_pos = end_pos + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123014,
      "stdout": "",
      "stderr": "/tmp/tmpuo7ow9yb.d(15): Error: no property `find` for type `string`\n/tmp/tmpuo7ow9yb.d(18): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuo7ow9yb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\twhile (true)\n\t{\n\t\tstart = text.find('\"', end);\n\t\tif (start == -1)\n\t\t\tbreak;\n\t\tend = text.find('\"', start + 1);\n\t\tif (end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tend++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123014,
      "stdout": "",
      "stderr": "/tmp/tmpour41d6f.d(15): Error: no property `find` for type `string`\n/tmp/tmpour41d6f.d(18): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpour41d6f.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\twhile(true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif(start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif(end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1665517373,
      "stdout": "",
      "stderr": "/tmp/tmptf7tozpo.d(15): Error: no property `find` for type `string`\n/tmp/tmptf7tozpo.d(18): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptf7tozpo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\t\n\twhile (true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif (start == -1)\n\t\t\tbreak;\n\t\t\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif (end == -1)\n\t\t\tbreak;\n\t\t\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123014,
      "stdout": "",
      "stderr": "/tmp/tmpitgx1xte.d(16): Error: no property `find` for type `string`\n/tmp/tmpitgx1xte.d(20): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpitgx1xte.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\twhile (true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif (start == -1)\n\t\t{\n\t\t\tbreak;\n\t\t}\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif (end == -1)\n\t\t{\n\t\t\tbreak;\n\t\t}\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123014,
      "stdout": "",
      "stderr": "/tmp/tmp466grcxb.d(15): Error: no property `find` for type `string`\n/tmp/tmp466grcxb.d(20): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp466grcxb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\t\n\tint start = 0;\n\tint end = 0;\n\t\n\twhile(true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\t\n\t\tif(start == -1 || end == -1)\n\t\t\tbreak;\n\t\t\n\t\tresult ~= text[start + 1 .. end];\n\t\t\n\t\tstart = end + 1;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123014,
      "stdout": "",
      "stderr": "/tmp/tmp3lvszglg.d(17): Error: no property `find` for type `string`\n/tmp/tmp3lvszglg.d(18): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3lvszglg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint i = 0;\n\twhile(i < text.length)\n\t{\n\t\tif(text[i] == '\"')\n\t\t{\n\t\t\tstart = i;\n\t\t\ti++;\n\t\t\twhile(text[i] != '\"')\n\t\t\t{\n\t\t\t\ti++;\n\t\t\t}\n\t\t\tend = i;\n\t\t\tresult ~= text[start..end];\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123015,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpihm6ukix.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x428dc5]\n??:? void tmpihm6ukix.__unittest_L31_C1() [0x427d4a]\n??:? void tmpihm6ukix.__modtest() [0x42802c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e0ff]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428b1e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42afad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b03c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42af39]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428af5]\n??:? runModuleUnitTests [0x42ded5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429288]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tauto result = [];\n\tauto start = text.find('\"');\n\twhile (start != -1) \n\t{\n\t\tauto end = text.find('\"', start + 1);\n\t\tif (end != -1) \n\t\t{\n\t\t\tresult ~= text[start + 1..end];\n\t\t\tstart = text.find('\"', end + 1);\n\t\t}\n\t\telse\n\t\t\tbreak;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123014,
      "stdout": "",
      "stderr": "/tmp/tmp4fctt1o5.d(11): Error: no property `find` for type `string`\n/tmp/tmp4fctt1o5.d(14): Error: no property `find` for type `string`\n/tmp/tmp4fctt1o5.d(23): Error: cannot implicitly convert expression `result` of type `void[]` to `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4fctt1o5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] values;\n\tint start = 0;\n\tint end = 0;\n\tint i = 0;\n\t\n\twhile (i < text.length)\n\t{\n\t\tif (text[i] == '\"')\n\t\t{\n\t\t\tstart = i + 1;\n\t\t\tend = text.indexOf('\"', start);\n\t\t\tvalues ~= text[start..end];\n\t\t\ti = end + 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\ti++;\n\t\t}\n\t}\n\t\n\treturn values;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123014,
      "stdout": "",
      "stderr": "/tmp/tmpz7w228b2.d(20): Error: no property `indexOf` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz7w228b2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint i = 0;\n\twhile(i < text.length)\n\t{\n\t\tif(text[i] == '\"')\n\t\t{\n\t\t\tif(start == 0)\n\t\t\t{\n\t\t\t\tstart = i + 1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tend = i;\n\t\t\t\tresult ~= text[start..end];\n\t\t\t\tstart = 0;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123015,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\twhile (true)\n\t{\n\t\tstart = text.find('\"', start);\n\t\tif (start == -1)\n\t\t\tbreak;\n\t\tend = text.find('\"', start + 1);\n\t\tif (end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123014,
      "stdout": "",
      "stderr": "/tmp/tmp9p1vdwa0.d(15): Error: no property `find` for type `string`\n/tmp/tmp9p1vdwa0.d(18): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9p1vdwa0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint i = 0;\n\twhile(i < text.length)\n\t{\n\t\tif(text[i] == '\"')\n\t\t{\n\t\t\tstart = i;\n\t\t\ti++;\n\t\t\twhile(text[i] != '\"')\n\t\t\t{\n\t\t\t\ti++;\n\t\t\t}\n\t\t\tend = i;\n\t\t\tresult ~= text[start..end];\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123015,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpihm6ukix.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x428dc5]\n??:? void tmpihm6ukix.__unittest_L31_C1() [0x427d4a]\n??:? void tmpihm6ukix.__modtest() [0x42802c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e0ff]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428b1e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42afad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b03c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42af39]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428af5]\n??:? runModuleUnitTests [0x42ded5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429288]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\twhile(true)\n\t{\n\t\tstart = text.find('\"', start);\n\t\tif(start == -1)\n\t\t\tbreak;\n\t\tend = text.find('\"', start + 1);\n\t\tif(end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123014,
      "stdout": "",
      "stderr": "/tmp/tmpvurd8dph.d(15): Error: no property `find` for type `string`\n/tmp/tmpvurd8dph.d(18): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvurd8dph.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint i = 0;\n\twhile(i < text.length)\n\t{\n\t\tif(text[i] == '\"')\n\t\t{\n\t\t\tstart = i;\n\t\t\twhile(text[i] != '\"')\n\t\t\t{\n\t\t\t\ti++;\n\t\t\t}\n\t\t\tend = i;\n\t\t\tresult ~= text[start..end];\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqtfc6lcs.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428dbd]\n??:? void tmpqtfc6lcs.__unittest_L30_C1() [0x427d46]\n??:? void tmpqtfc6lcs.__modtest() [0x428028]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e0f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428b16]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42afa5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b034]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42af31]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428aed]\n??:? runModuleUnitTests [0x42decd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429280]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tint start = 0;\n\tint end = 0;\n\tstring[] result;\n\twhile (true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif (start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tresult ~= text[start + 1..end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123014,
      "stdout": "",
      "stderr": "/tmp/tmpek9defkp.d(15): Error: no property `find` for type `string`\n/tmp/tmpek9defkp.d(18): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpek9defkp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\twhile (true)\n\t{\n\t\tstart = text.find(\"\\\"\", end);\n\t\tif (start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif (end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123014,
      "stdout": "",
      "stderr": "/tmp/tmpa1dhefyt.d(15): Error: no property `find` for type `string`\n/tmp/tmpa1dhefyt.d(18): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa1dhefyt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\twhile (true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif (start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif (end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start+1..end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123014,
      "stdout": "",
      "stderr": "/tmp/tmpbcnl4md3.d(15): Error: no property `find` for type `string`\n/tmp/tmpbcnl4md3.d(18): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbcnl4md3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint i = 0;\n\twhile (i < text.length)\n\t{\n\t\tif (text[i] == '\"')\n\t\t{\n\t\t\tif (start == 0)\n\t\t\t{\n\t\t\t\tstart = i + 1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tend = i;\n\t\t\t\tresult ~= text[start..end];\n\t\t\t\tstart = 0;\n\t\t\t\tend = 0;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123015,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\twhile(true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif(start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif(end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1665517373,
      "stdout": "",
      "stderr": "/tmp/tmptf7tozpo.d(15): Error: no property `find` for type `string`\n/tmp/tmptf7tozpo.d(18): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptf7tozpo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\twhile (true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif (start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif (end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1665517373,
      "stdout": "",
      "stderr": "/tmp/tmp09p0drpi.d(15): Error: no property `find` for type `string`\n/tmp/tmp09p0drpi.d(18): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp09p0drpi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\twhile (true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif (start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif (end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1665517373,
      "stdout": "",
      "stderr": "/tmp/tmp09p0drpi.d(15): Error: no property `find` for type `string`\n/tmp/tmp09p0drpi.d(18): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp09p0drpi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint i = 0;\n\twhile (i < text.length) \n\t{\n\t\tif (text[i] == '\"') \n\t\t{\n\t\t\tstart = i;\n\t\t\tend = text.indexOf('\"', start + 1);\n\t\t\tif (end == -1) \n\t\t\t{\n\t\t\t\tthrow new Exception(\"No closing quotation mark found.\");\n\t\t\t}\n\t\t\tresult ~= text[start + 1 .. end];\n\t\t\ti = end + 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\ti++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123014,
      "stdout": "",
      "stderr": "/tmp/tmp7b6u61lt.d(19): Error: no property `indexOf` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7b6u61lt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\twhile (start < text.length)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif (start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif (end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123014,
      "stdout": "",
      "stderr": "/tmp/tmprynpyul3.d(15): Error: no property `find` for type `string`\n/tmp/tmprynpyul3.d(18): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprynpyul3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\twhile (true) \n\t{\n\t\tstart = text.indexOf(\"\\\"\", start);\n\t\tif (start == -1)\n\t\t\tbreak;\n\t\tend = text.indexOf(\"\\\"\", start + 1);\n\t\tif (end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123014,
      "stdout": "",
      "stderr": "/tmp/tmpr1zklxvn.d(15): Error: no property `indexOf` for type `string`\n/tmp/tmpr1zklxvn.d(18): Error: no property `indexOf` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr1zklxvn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint i = 0;\n\twhile(i < text.length)\n\t{\n\t\tif(text[i] == '\"')\n\t\t{\n\t\t\tif(start == 0)\n\t\t\t{\n\t\t\t\tstart = i;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tend = i;\n\t\t\t\tresult ~= text[start..end];\n\t\t\t\tstart = 0;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123015,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpie6375n2.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x428d9d]\n??:? void tmpie6375n2.__unittest_L33_C1() [0x427d26]\n??:? void tmpie6375n2.__modtest() [0x428008]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e0d7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428af6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42af85]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b014]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42af11]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428acd]\n??:? runModuleUnitTests [0x42dead]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429260]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint i = 0;\n\twhile(i < text.length)\n\t{\n\t\tif(text[i] == '\"')\n\t\t{\n\t\t\tstart = i;\n\t\t\tend = text.find('\"', start + 1);\n\t\t\tresult ~= text[start + 1 .. end];\n\t\t\ti = end + 1;\n\t\t}\n\t\telse\n\t\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123014,
      "stdout": "",
      "stderr": "/tmp/tmpmwjmtpdv.d(19): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmwjmtpdv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\t\n\twhile(true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif(start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif(end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1..end];\n\t\tstart = end + 1;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123014,
      "stdout": "",
      "stderr": "/tmp/tmphijc1wj6.d(16): Error: no property `find` for type `string`\n/tmp/tmphijc1wj6.d(19): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphijc1wj6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\twhile (true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif (start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif (end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1665517373,
      "stdout": "",
      "stderr": "/tmp/tmp09p0drpi.d(15): Error: no property `find` for type `string`\n/tmp/tmp09p0drpi.d(18): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp09p0drpi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\twhile (true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif (start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif (end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1665517373,
      "stdout": "",
      "stderr": "/tmp/tmp09p0drpi.d(15): Error: no property `find` for type `string`\n/tmp/tmp09p0drpi.d(18): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp09p0drpi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint i = 0;\n\twhile (i < text.length)\n\t{\n\t\tif (text[i] == '\"')\n\t\t{\n\t\t\tif (start == 0)\n\t\t\t\tstart = i;\n\t\t\telse\n\t\t\t{\n\t\t\t\tend = i;\n\t\t\t\tresult ~= text[start..end];\n\t\t\t\tstart = 0;\n\t\t\t\tend = 0;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123015,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpgkklaqy2.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x428d9d]\n??:? void tmpgkklaqy2.__unittest_L32_C1() [0x427d26]\n??:? void tmpgkklaqy2.__modtest() [0x428008]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e0d7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428af6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42af85]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b014]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42af11]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428acd]\n??:? runModuleUnitTests [0x42dead]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429260]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start_pos = 0;\n\tint end_pos = 0;\n\t\n\twhile (true)\n\t{\n\t\tstart_pos = text.find(\"\\\"\", start_pos);\n\t\tif (start_pos == -1)\n\t\t\tbreak;\n\t\tend_pos = text.find(\"\\\"\", start_pos + 1);\n\t\tif (end_pos == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start_pos + 1 .. end_pos];\n\t\tstart_pos = end_pos + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123014,
      "stdout": "",
      "stderr": "/tmp/tmpr3ae_2au.d(16): Error: no property `find` for type `string`\n/tmp/tmpr3ae_2au.d(19): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr3ae_2au.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\twhile(true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif(start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif(end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1665517373,
      "stdout": "",
      "stderr": "/tmp/tmptf7tozpo.d(15): Error: no property `find` for type `string`\n/tmp/tmptf7tozpo.d(18): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptf7tozpo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint i = 0;\n\twhile (i < text.length) \n\t{\n\t\tif (text[i] == '\"') \n\t\t{\n\t\t\tif (start == 0) \n\t\t\t{\n\t\t\t\tstart = i + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tend = i;\n\t\t\t\tresult ~= text[start..end];\n\t\t\t\tstart = 0;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint i = 0;\n\twhile(i < text.length) {\n\t\tif(text[i] == '\"') {\n\t\t\tstart = i;\n\t\t\ti++;\n\t\t\twhile(i < text.length && text[i] != '\"') {\n\t\t\t\ti++;\n\t\t\t}\n\t\t\tend = i;\n\t\t\tresult ~= text[start..end];\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123015,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmps2u241i4.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x428dc5]\n??:? void tmps2u241i4.__unittest_L28_C1() [0x427d4e]\n??:? void tmps2u241i4.__modtest() [0x428030]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e0ff]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428b1e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42afad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b03c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42af39]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428af5]\n??:? runModuleUnitTests [0x42ded5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429288]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tauto result = [];\n\tauto start = 0;\n\tauto end = 0;\n\twhile (true) \n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif (start == -1) break;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif (end == -1) break;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123014,
      "stdout": "",
      "stderr": "/tmp/tmp9t8aamll.d(15): Error: no property `find` for type `string`\n/tmp/tmp9t8aamll.d(17): Error: no property `find` for type `string`\n/tmp/tmp9t8aamll.d(19): Error: cannot append type `string` to type `void[]`\n/tmp/tmp9t8aamll.d(22): Error: cannot implicitly convert expression `result` of type `void[]` to `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9t8aamll.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\t\n\twhile (start < text.length)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif (start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif (end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123015,
      "stdout": "",
      "stderr": "/tmp/tmppsorh_3n.d(16): Error: no property `find` for type `string`\n/tmp/tmppsorh_3n.d(19): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppsorh_3n.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint length = text.length;\n\t\n\twhile(start < length)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif(start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif(end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123015,
      "stdout": "",
      "stderr": "/tmp/tmp367_0bv0.d(13): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\n/tmp/tmp367_0bv0.d(17): Error: no property `find` for type `string`\n/tmp/tmp367_0bv0.d(20): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp367_0bv0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\twhile (true) \n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif (start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif (end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1665517373,
      "stdout": "",
      "stderr": "/tmp/tmphy4cq32_.d(15): Error: no property `find` for type `string`\n/tmp/tmphy4cq32_.d(18): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphy4cq32_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint len = text.length;\n\twhile (start < len) \n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif (start == -1) break;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif (end == -1) break;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123015,
      "stdout": "",
      "stderr": "/tmp/tmphzei5bu8.d(13): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\n/tmp/tmphzei5bu8.d(16): Error: no property `find` for type `string`\n/tmp/tmphzei5bu8.d(18): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphzei5bu8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint len = text.length;\n\t\n\twhile (start < len)\n\t{\n\t\tstart = text.indexOf(\"\\\"\", start);\n\t\tif (start == -1)\n\t\t\tbreak;\n\t\tend = text.indexOf(\"\\\"\", start + 1);\n\t\tif (end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123015,
      "stdout": "",
      "stderr": "/tmp/tmpl3ufij6t.d(13): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\n/tmp/tmpl3ufij6t.d(17): Error: no property `indexOf` for type `string`\n/tmp/tmpl3ufij6t.d(20): Error: no property `indexOf` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl3ufij6t.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint l = 0;\n\tint m = 0;\n\tint n = 0;\n\tint o = 0;\n\tint p = 0;\n\tint q = 0;\n\tint r = 0;\n\tint s = 0;\n\tint t = 0;\n\tint u = 0;\n\tint v = 0;\n\tint w = 0;\n\tint x = 0;\n\tint y = 0;\n\tint z = 0;\n\tint aa = 0;\n\tint bb = 0;\n\tint cc = 0;\n\tint dd = 0;\n\tint ee = 0;\n\tint ff = 0;\n\tint gg = 0;\n\tint hh = 0;\n\tint ii = 0;\n\tint jj = 0;\n\tint kk = 0;\n\tint ll = 0;\n\tint mm = 0;\n\tint nn = 0;\n\tint oo = 0;\n\tint pp = 0;\n\tint qq = 0;\n\tint rr = 0;\n\tint ss = 0;\n\tint tt = 0;\n\tint uu = 0;\n\tint vv = 0;\n\tint ww = 0;\n\tint xx = 0;\n\tint yy = 0;\n\tint zz = 0;\n\tint aaa = 0;\n\tint bbb = 0;\n\tint ccc = 0;\n\tint ddd = 0;\n\tint eee = 0;\n\tint fff = 0;\n\tint ggg = 0;\n\tint hhh = 0;\n\tint iii = 0;\n\tint jjj = 0;\n\tint kkk = 0;\n\tint lll = 0;\n\tint mmm = 0;\n\tint nnn = 0;\n\tint ooo = 0;\n\tint ppp = 0;\n\tint qqq = 0;\n\tint rrr = 0;\n\tint sss = 0;\n\tint ttt = 0;\n\tint uuu = 0;\n\tint vvv = 0;\n\tint www\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123014,
      "stdout": "",
      "stderr": "/tmp/tmpfah132vr.d(78): Error: semicolon expected, not `unittest`\n/tmp/tmpfah132vr.d(78): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfah132vr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\t\n\twhile(true) \n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif(start == -1) break;\n\t\t\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif(end == -1) break;\n\t\t\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123015,
      "stdout": "",
      "stderr": "/tmp/tmpadhdmbvy.d(16): Error: no property `find` for type `string`\n/tmp/tmpadhdmbvy.d(19): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpadhdmbvy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\t\n\twhile(true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif(start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start+1);\n\t\tif(end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start+1..end];\n\t\tstart = end+1;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123015,
      "stdout": "",
      "stderr": "/tmp/tmp6x5rpjvv.d(16): Error: no property `find` for type `string`\n/tmp/tmp6x5rpjvv.d(19): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6x5rpjvv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\t\n\twhile (start != -1)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif (start != -1)\n\t\t{\n\t\t\tend = text.find(\"\\\"\", start + 1);\n\t\t\tif (end != -1)\n\t\t\t{\n\t\t\t\tresult ~= text[start + 1 .. end];\n\t\t\t\tstart = end + 1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tstart = -1;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123015,
      "stdout": "",
      "stderr": "/tmp/tmp3n1evauo.d(16): Error: no property `find` for type `string`\n/tmp/tmp3n1evauo.d(19): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3n1evauo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint index = 0;\n\twhile (index < text.length)\n\t{\n\t\tif (text[index] == '\"')\n\t\t{\n\t\t\tif (start == 0)\n\t\t\t{\n\t\t\t\tstart = index + 1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tend = index;\n\t\t\t\tresult ~= text[start..end];\n\t\t\t\tstart = 0;\n\t\t\t}\n\t\t}\n\t\tindex++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123015,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\twhile(true)\n\t{\n\t\tstart = text.find('\"', start);\n\t\tif(start == -1)\n\t\t\tbreak;\n\t\tend = text.find('\"', start + 1);\n\t\tif(end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123014,
      "stdout": "",
      "stderr": "/tmp/tmpvurd8dph.d(15): Error: no property `find` for type `string`\n/tmp/tmpvurd8dph.d(18): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvurd8dph.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint counter = 0;\n\twhile(true)\n\t{\n\t\tstart = text.indexOf(\"\\\"\", start);\n\t\tif(start == -1)\n\t\t\tbreak;\n\t\tend = text.indexOf(\"\\\"\", start+1);\n\t\tif(end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start+1..end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123015,
      "stdout": "",
      "stderr": "/tmp/tmpjjzuv51g.d(16): Error: no property `indexOf` for type `string`\n/tmp/tmpjjzuv51g.d(19): Error: no property `indexOf` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjjzuv51g.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint i = 0;\n\twhile (i < text.length) \n\t{\n\t\tif (text[i] == '\"') \n\t\t{\n\t\t\tif (start == 0) \n\t\t\t{\n\t\t\t\tstart = i + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tend = i;\n\t\t\t\tresult ~= text[start..end];\n\t\t\t\tstart = 0;\n\t\t\t\tend = 0;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123015,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint i = 0;\n\twhile(i < text.length)\n\t{\n\t\tif(text[i] == '\"')\n\t\t{\n\t\t\tstart = i;\n\t\t\ti++;\n\t\t\twhile(text[i] != '\"')\n\t\t\t{\n\t\t\t\ti++;\n\t\t\t}\n\t\t\tend = i;\n\t\t\tresult ~= text[start..end];\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123015,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpihm6ukix.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x428dc5]\n??:? void tmpihm6ukix.__unittest_L31_C1() [0x427d4a]\n??:? void tmpihm6ukix.__modtest() [0x42802c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e0ff]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428b1e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42afad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b03c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42af39]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428af5]\n??:? runModuleUnitTests [0x42ded5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429288]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint i = 0;\n\twhile (i < text.length) \n\t{\n\t\tif (text[i] == '\"') \n\t\t{\n\t\t\tif (start == 0) \n\t\t\t{\n\t\t\t\tstart = i + 1;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tend = i;\n\t\t\t\tresult ~= text[start..end];\n\t\t\t\tstart = 0;\n\t\t\t\tend = 0;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123015,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint i = 0;\n\twhile (i < text.length)\n\t{\n\t\tif (text[i] == '\"')\n\t\t{\n\t\t\tstart = i;\n\t\t\ti++;\n\t\t\twhile (text[i] != '\"')\n\t\t\t{\n\t\t\t\ti++;\n\t\t\t}\n\t\t\tend = i;\n\t\t\tresult ~= text[start..end];\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpsh72r_bc.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x428dc5]\n??:? void tmpsh72r_bc.__unittest_L31_C1() [0x427d4a]\n??:? void tmpsh72r_bc.__modtest() [0x42802c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e0ff]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428b1e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42afad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b03c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42af39]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428af5]\n??:? runModuleUnitTests [0x42ded5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429288]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\twhile(true)\n\t{\n\t\tstart = text.find(\"\\\"\",start);\n\t\tif(start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\",start+1);\n\t\tif(end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start+1..end];\n\t\tstart = end+1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123015,
      "stdout": "",
      "stderr": "/tmp/tmpar3pwvki.d(15): Error: no property `find` for type `string`\n/tmp/tmpar3pwvki.d(18): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpar3pwvki.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tauto result = [];\n\tauto start = 0;\n\tauto end = 0;\n\twhile(true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif(start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif(end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123014,
      "stdout": "",
      "stderr": "/tmp/tmptcgiieax.d(15): Error: no property `find` for type `string`\n/tmp/tmptcgiieax.d(18): Error: no property `find` for type `string`\n/tmp/tmptcgiieax.d(21): Error: cannot append type `string` to type `void[]`\n/tmp/tmptcgiieax.d(24): Error: cannot implicitly convert expression `result` of type `void[]` to `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptcgiieax.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tint start = 0;\n\tint end = 0;\n\tint count = 0;\n\tstring[] values;\n\t\n\twhile(true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif(start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start+1);\n\t\tif(end == -1)\n\t\t\tbreak;\n\t\tvalues ~= text[start+1..end];\n\t\tstart = end+1;\n\t}\n\treturn values;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123015,
      "stdout": "",
      "stderr": "/tmp/tmpn_t2e59b.d(17): Error: no property `find` for type `string`\n/tmp/tmpn_t2e59b.d(20): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn_t2e59b.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint len = text.length;\n\twhile (start < len) \n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif (start == -1) \n\t\t{\n\t\t\tbreak;\n\t\t}\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif (end == -1) \n\t\t{\n\t\t\tbreak;\n\t\t}\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123015,
      "stdout": "",
      "stderr": "/tmp/tmp3562k8aq.d(13): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\n/tmp/tmp3562k8aq.d(16): Error: no property `find` for type `string`\n/tmp/tmp3562k8aq.d(21): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3562k8aq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tauto result = [];\n\tauto start = text.find('\"');\n\twhile(start != -1) \n\t{\n\t\tauto end = text.find('\"', start + 1);\n\t\tif(end != -1) \n\t\t{\n\t\t\tresult ~= text[start + 1 .. end];\n\t\t\tstart = text.find('\"', end + 1);\n\t\t}\n\t\telse \n\t\t{\n\t\t\tstart = -1;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123015,
      "stdout": "",
      "stderr": "/tmp/tmpu0fogd18.d(11): Error: no property `find` for type `string`\n/tmp/tmpu0fogd18.d(14): Error: no property `find` for type `string`\n/tmp/tmpu0fogd18.d(25): Error: cannot implicitly convert expression `result` of type `void[]` to `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu0fogd18.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\twhile (true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif (start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif (end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1665517373,
      "stdout": "",
      "stderr": "/tmp/tmp09p0drpi.d(15): Error: no property `find` for type `string`\n/tmp/tmp09p0drpi.d(18): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp09p0drpi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\twhile (true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif (start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif (end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1665517373,
      "stdout": "",
      "stderr": "/tmp/tmp09p0drpi.d(15): Error: no property `find` for type `string`\n/tmp/tmp09p0drpi.d(18): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp09p0drpi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint i = 0;\n\twhile(i < text.length) \n\t{\n\t\tif(text[i] == '\"') \n\t\t{\n\t\t\tstart = i;\n\t\t\twhile(text[i] != '\"') \n\t\t\t{\n\t\t\t\ti++;\n\t\t\t}\n\t\t\tend = i;\n\t\t\tresult ~= text[start..end];\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123015,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp1yo4olmm.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428dbd]\n??:? void tmp1yo4olmm.__unittest_L30_C1() [0x427d46]\n??:? void tmp1yo4olmm.__modtest() [0x428028]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e0f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428b16]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42afa5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b034]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42af31]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428aed]\n??:? runModuleUnitTests [0x42decd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429280]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tint start = 0;\n\tint end = 0;\n\tstring[] result;\n\t\n\twhile (true)\n\t{\n\t\tstart = text.indexOf('\"', start);\n\t\tif (start == -1)\n\t\t\tbreak;\n\t\tend = text.indexOf('\"', start + 1);\n\t\tif (end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123015,
      "stdout": "",
      "stderr": "/tmp/tmptgf3w27x.d(16): Error: no property `indexOf` for type `string`\n/tmp/tmptgf3w27x.d(19): Error: no property `indexOf` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptgf3w27x.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tbool found = false;\n\t\n\twhile(true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif(start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif(end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1..end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123015,
      "stdout": "",
      "stderr": "/tmp/tmpidzo4_zt.d(17): Error: no property `find` for type `string`\n/tmp/tmpidzo4_zt.d(20): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpidzo4_zt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tint start = 0;\n\tint end = 0;\n\tint i = 0;\n\tstring[] values;\n\t\n\twhile(true)\n\t{\n\t\tstart = text.indexOf('\"', i);\n\t\tif(start == -1)\n\t\t\tbreak;\n\t\tend = text.indexOf('\"', start + 1);\n\t\tif(end == -1)\n\t\t\tbreak;\n\t\tvalues ~= text[start + 1 .. end];\n\t\ti = end + 1;\n\t}\n\t\n\treturn values;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123015,
      "stdout": "",
      "stderr": "/tmp/tmpleik1a9c.d(17): Error: no property `indexOf` for type `string`\n/tmp/tmpleik1a9c.d(20): Error: no property `indexOf` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpleik1a9c.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint i = 0;\n\twhile(i < text.length)\n\t{\n\t\tif(text[i] == '\"')\n\t\t{\n\t\t\tstart = i;\n\t\t\ti++;\n\t\t\twhile(i < text.length)\n\t\t\t{\n\t\t\t\tif(text[i] == '\"')\n\t\t\t\t{\n\t\t\t\t\tend = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\ti++;\n\t\t\t}\n\t\t\tresult ~= text[start..end];\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123014,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpgbea_tq7.d(39): unittest failure\n----------------\n??:? _d_unittestp [0x428dd5]\n??:? void tmpgbea_tq7.__unittest_L35_C1() [0x427d5a]\n??:? void tmpgbea_tq7.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e10f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428b2e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42afbd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b04c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42af49]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428b05]\n??:? runModuleUnitTests [0x42dee5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429298]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tauto result = [];\n\tauto start = 0;\n\tauto end = 0;\n\tauto quote = '\"';\n\t\n\twhile(true)\n\t{\n\t\tstart = text.indexOf(quote, start);\n\t\tif(start == -1)\n\t\t\tbreak;\n\t\tend = text.indexOf(quote, start + 1);\n\t\tif(end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123015,
      "stdout": "",
      "stderr": "/tmp/tmp8d60_s31.d(17): Error: no property `indexOf` for type `string`\n/tmp/tmp8d60_s31.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmp8d60_s31.d(23): Error: cannot append type `string` to type `void[]`\n/tmp/tmp8d60_s31.d(27): Error: cannot implicitly convert expression `result` of type `void[]` to `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8d60_s31.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\twhile (true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif (start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif (end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1665517373,
      "stdout": "",
      "stderr": "/tmp/tmp09p0drpi.d(15): Error: no property `find` for type `string`\n/tmp/tmp09p0drpi.d(18): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp09p0drpi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint count = 0;\n\t\n\tforeach(i; 0 .. text.length)\n\t{\n\t\tif(text[i] == '\"')\n\t\t{\n\t\t\tif(count == 0)\n\t\t\t{\n\t\t\t\tstart = i;\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tend = i;\n\t\t\t\tcount = 0;\n\t\t\t\tresult ~= text[start .. end];\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123015,
      "stdout": "",
      "stderr": "/tmp/tmpcc7gmgqj.d(21): Error: cannot implicitly convert expression `i` of type `ulong` to `int`\n/tmp/tmpcc7gmgqj.d(26): Error: cannot implicitly convert expression `i` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcc7gmgqj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\twhile(true)\n\t{\n\t\tstart = text.find('\"', start);\n\t\tif(start == -1)\n\t\t\tbreak;\n\t\tend = text.find('\"', start + 1);\n\t\tif(end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123014,
      "stdout": "",
      "stderr": "/tmp/tmpvurd8dph.d(15): Error: no property `find` for type `string`\n/tmp/tmpvurd8dph.d(18): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvurd8dph.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start_pos = 0;\n\tint end_pos = 0;\n\twhile(true)\n\t{\n\t\tstart_pos = text.find(\"\\\"\", start_pos);\n\t\tif(start_pos == -1)\n\t\t\tbreak;\n\t\tend_pos = text.find(\"\\\"\", start_pos + 1);\n\t\tif(end_pos == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start_pos + 1 .. end_pos - 1];\n\t\tstart_pos = end_pos + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123014,
      "stdout": "",
      "stderr": "/tmp/tmpuo7ow9yb.d(15): Error: no property `find` for type `string`\n/tmp/tmpuo7ow9yb.d(18): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuo7ow9yb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint i = 0;\n\tint j = 0;\n\t\n\twhile(i < text.length)\n\t{\n\t\tif(text[i] == '\"')\n\t\t{\n\t\t\tstart = i;\n\t\t\tend = text.find('\"', i + 1);\n\t\t\tresult ~= text[start..end];\n\t\t\ti = end + 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\ti++;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123015,
      "stdout": "",
      "stderr": "/tmp/tmp4vpemyhy.d(21): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4vpemyhy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint i = 0;\n\twhile(i < text.length)\n\t{\n\t\tif(text[i] == '\"')\n\t\t{\n\t\t\tstart = i;\n\t\t\ti++;\n\t\t\twhile(text[i] != '\"')\n\t\t\t{\n\t\t\t\ti++;\n\t\t\t}\n\t\t\tend = i;\n\t\t\tresult ~= text[start..end];\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123015,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpihm6ukix.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x428dc5]\n??:? void tmpihm6ukix.__unittest_L31_C1() [0x427d4a]\n??:? void tmpihm6ukix.__modtest() [0x42802c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e0ff]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428b1e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42afad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b03c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42af39]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428af5]\n??:? runModuleUnitTests [0x42ded5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429288]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tint start = 0;\n\tint end = 0;\n\tstring[] values;\n\t\n\twhile(true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tend = text.find(\"\\\"\", start+1);\n\t\tif(start == -1 || end == -1)\n\t\t\tbreak;\n\t\tvalues ~= text[start+1..end];\n\t\tstart = end+1;\n\t}\n\treturn values;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123015,
      "stdout": "",
      "stderr": "/tmp/tmpbli6tm4s.d(16): Error: no property `find` for type `string`\n/tmp/tmpbli6tm4s.d(17): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbli6tm4s.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\t\n\twhile (true) \n\t{\n\t\tstart = text.indexOf('\"', start);\n\t\tif (start == -1) break;\n\t\tend = text.indexOf('\"', start + 1);\n\t\tresult ~= text[start + 1..end];\n\t\tstart = end + 1;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123015,
      "stdout": "",
      "stderr": "/tmp/tmpf3e4629l.d(16): Error: no property `indexOf` for type `string`\n/tmp/tmpf3e4629l.d(18): Error: no property `indexOf` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf3e4629l.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint i = 0;\n\twhile(i < text.length)\n\t{\n\t\tif(text[i] == '\"')\n\t\t{\n\t\t\tif(start == 0)\n\t\t\t{\n\t\t\t\tstart = i;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tend = i;\n\t\t\t\tresult ~= text[start..end];\n\t\t\t\tstart = 0;\n\t\t\t\tend = 0;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123015,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpmgle29sy.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x428d9d]\n??:? void tmpmgle29sy.__unittest_L34_C1() [0x427d26]\n??:? void tmpmgle29sy.__modtest() [0x428008]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e0d7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428af6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42af85]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b014]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42af11]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428acd]\n??:? runModuleUnitTests [0x42dead]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429260]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint len = text.length;\n\t\n\twhile (start < len) \n\t{\n\t\tstart = text.indexOf('\"', start);\n\t\tif (start == -1) \n\t\t\tbreak;\n\t\tend = text.indexOf('\"', start + 1);\n\t\tif (end == -1) \n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123015,
      "stdout": "",
      "stderr": "/tmp/tmpbp7kqek9.d(13): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\n/tmp/tmpbp7kqek9.d(17): Error: no property `indexOf` for type `string`\n/tmp/tmpbp7kqek9.d(20): Error: no property `indexOf` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbp7kqek9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint len = text.length;\n\t\n\twhile (start < len)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif (start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif (end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1..end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123015,
      "stdout": "",
      "stderr": "/tmp/tmpj1vd60zr.d(13): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\n/tmp/tmpj1vd60zr.d(17): Error: no property `find` for type `string`\n/tmp/tmpj1vd60zr.d(20): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj1vd60zr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\t\n\tint start = 0;\n\tint end = 0;\n\t\n\twhile(true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif(start == -1)\n\t\t\tbreak;\n\t\t\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif(end == -1)\n\t\t\tbreak;\n\t\t\n\t\tresult ~= text[start + 1 .. end];\n\t\t\n\t\tstart = end + 1;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123015,
      "stdout": "",
      "stderr": "/tmp/tmplw01o8g2.d(17): Error: no property `find` for type `string`\n/tmp/tmplw01o8g2.d(21): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplw01o8g2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint len = text.length;\n\t\n\twhile(start < len)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif(start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif(end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123015,
      "stdout": "",
      "stderr": "/tmp/tmpz4vk82l8.d(13): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\n/tmp/tmpz4vk82l8.d(17): Error: no property `find` for type `string`\n/tmp/tmpz4vk82l8.d(20): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz4vk82l8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\twhile (true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif (start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif (end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1665517373,
      "stdout": "",
      "stderr": "/tmp/tmp09p0drpi.d(15): Error: no property `find` for type `string`\n/tmp/tmp09p0drpi.d(18): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp09p0drpi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start_index = 0;\n\tint end_index = 0;\n\tint index = 0;\n\t\n\twhile(index < text.length)\n\t{\n\t\tif(text[index] == '\"')\n\t\t{\n\t\t\tstart_index = index;\n\t\t\tindex++;\n\t\t\twhile(text[index] != '\"')\n\t\t\t{\n\t\t\t\tindex++;\n\t\t\t}\n\t\t\tend_index = index;\n\t\t\tresult ~= text[start_index..end_index];\n\t\t}\n\t\tindex++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123015,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp2s1cw5hs.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x428dc5]\n??:? void tmp2s1cw5hs.__unittest_L32_C1() [0x427d4a]\n??:? void tmp2s1cw5hs.__modtest() [0x42802c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e0ff]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428b1e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42afad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b03c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42af39]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428af5]\n??:? runModuleUnitTests [0x42ded5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429288]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\twhile(true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif(start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif(end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1665517373,
      "stdout": "",
      "stderr": "/tmp/tmptf7tozpo.d(15): Error: no property `find` for type `string`\n/tmp/tmptf7tozpo.d(18): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptf7tozpo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint len = text.length;\n\t\n\twhile (true)\n\t{\n\t\tstart = text.indexOf('\"', start);\n\t\tif (start == -1)\n\t\t\tbreak;\n\t\t\n\t\tend = text.indexOf('\"', start + 1);\n\t\tif (end == -1)\n\t\t\tbreak;\n\t\t\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123015,
      "stdout": "",
      "stderr": "/tmp/tmpi6c81s9u.d(13): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\n/tmp/tmpi6c81s9u.d(17): Error: no property `indexOf` for type `string`\n/tmp/tmpi6c81s9u.d(21): Error: no property `indexOf` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi6c81s9u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint count = 0;\n\t\n\twhile(start != -1)\n\t{\n\t\tstart = text.indexOf('\"', start);\n\t\tif(start != -1)\n\t\t{\n\t\t\tend = text.indexOf('\"', start + 1);\n\t\t\tif(end != -1)\n\t\t\t{\n\t\t\t\tresult ~= text[start + 1 .. end];\n\t\t\t\tstart = end + 1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tstart = -1;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123015,
      "stdout": "",
      "stderr": "/tmp/tmpbuhbl6yf.d(17): Error: no property `indexOf` for type `string`\n/tmp/tmpbuhbl6yf.d(20): Error: no property `indexOf` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbuhbl6yf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start_index = 0;\n\tint end_index = 0;\n\tint index = 0;\n\twhile (index < text.length)\n\t{\n\t\tif (text[index] == '\"')\n\t\t{\n\t\t\tstart_index = index + 1;\n\t\t\tend_index = text.indexOf('\"', start_index);\n\t\t\tresult ~= text[start_index..end_index];\n\t\t\tindex = end_index + 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tindex++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123015,
      "stdout": "",
      "stderr": "/tmp/tmpn4148lss.d(19): Error: no property `indexOf` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn4148lss.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint l = 0;\n\tint m = 0;\n\tint n = 0;\n\tint o = 0;\n\tint p = 0;\n\tint q = 0;\n\tint r = 0;\n\tint s = 0;\n\tint t = 0;\n\tint u = 0;\n\tint v = 0;\n\tint w = 0;\n\tint x = 0;\n\tint y = 0;\n\tint z = 0;\n\tint aa = 0;\n\tint ab = 0;\n\tint ac = 0;\n\tint ad = 0;\n\tint ae = 0;\n\tint af = 0;\n\tint ag = 0;\n\tint ah = 0;\n\tint ai = 0;\n\tint aj = 0;\n\tint ak = 0;\n\tint al = 0;\n\tint am = 0;\n\tint an = 0;\n\tint ao = 0;\n\tint ap = 0;\n\tint aq = 0;\n\tint ar = 0;\n\tint as = 0;\n\tint at = 0;\n\tint au = 0;\n\tint av = 0;\n\tint aw = 0;\n\tint ax = 0;\n\tint ay = 0;\n\tint az = 0;\n\tint ba = 0;\n\tint bb = 0;\n\tint bc = 0;\n\tint bd = 0;\n\tint be = 0;\n\tint bf = 0;\n\tint bg = 0;\n\tint bh = 0;\n\tint bi = 0;\n\tint bj = 0;\n\tint bk = 0;\n\tint bl = 0;\n\tint bm = 0;\n\tint bn = 0;\n\tint bo = 0;\n\tint bp = 0;\n\tint bq = 0;\n\tint br = 0;\n\tint bs = 0;\n\tint bt = 0;\n\tint bu = 0;\n\tint bv = 0;\n\tint bw = 0;\n\tint bx = 0;\n\tint by = 0\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123015,
      "stdout": "",
      "stderr": "/tmp/tmpkf18ogx5.d(80): Error: semicolon expected, not `unittest`\n/tmp/tmpkf18ogx5.d(80): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkf18ogx5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\t\n\twhile(true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif(start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start+1);\n\t\tif(end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start+1..end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123015,
      "stdout": "",
      "stderr": "/tmp/tmpra7_bqfd.d(16): Error: no property `find` for type `string`\n/tmp/tmpra7_bqfd.d(19): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpra7_bqfd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\twhile(true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif(start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif(end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1665517373,
      "stdout": "",
      "stderr": "/tmp/tmptf7tozpo.d(15): Error: no property `find` for type `string`\n/tmp/tmptf7tozpo.d(18): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptf7tozpo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\twhile (start < text.length) \n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif (start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif (end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1..end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123015,
      "stdout": "",
      "stderr": "/tmp/tmpv0pxsqvj.d(15): Error: no property `find` for type `string`\n/tmp/tmpv0pxsqvj.d(18): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv0pxsqvj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\twhile (true) \n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif (start == -1) break;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif (end == -1) break;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123015,
      "stdout": "",
      "stderr": "/tmp/tmp8utgqods.d(15): Error: no property `find` for type `string`\n/tmp/tmp8utgqods.d(17): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8utgqods.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\t\n\twhile(true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif(start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif(end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1665517373,
      "stdout": "",
      "stderr": "/tmp/tmpzng24vcx.d(16): Error: no property `find` for type `string`\n/tmp/tmpzng24vcx.d(19): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzng24vcx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\twhile(true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif(start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif(end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1665517373,
      "stdout": "",
      "stderr": "/tmp/tmptf7tozpo.d(15): Error: no property `find` for type `string`\n/tmp/tmptf7tozpo.d(18): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptf7tozpo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\twhile (true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif (start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif (end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1665517373,
      "stdout": "",
      "stderr": "/tmp/tmp09p0drpi.d(15): Error: no property `find` for type `string`\n/tmp/tmp09p0drpi.d(18): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp09p0drpi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tauto result = text.split(\"\\\"\");\n\treturn result[1..$-1];\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123014,
      "stdout": "",
      "stderr": "/tmp/tmprp_snj11.d(10): Error: no property `split` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprp_snj11.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\t\n\twhile(true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif(start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123015,
      "stdout": "",
      "stderr": "/tmp/tmp148ge8du.d(16): Error: no property `find` for type `string`\n/tmp/tmp148ge8du.d(19): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp148ge8du.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tauto result = [];\n\tauto start = 0;\n\tauto end = 0;\n\tauto found = false;\n\twhile (true) \n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif (start == -1) \n\t\t{\n\t\t\tbreak;\n\t\t}\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif (end == -1) \n\t\t{\n\t\t\tbreak;\n\t\t}\n\t\tresult ~= text[start + 1..end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123015,
      "stdout": "",
      "stderr": "/tmp/tmp6yu0wo6_.d(16): Error: no property `find` for type `string`\n/tmp/tmp6yu0wo6_.d(21): Error: no property `find` for type `string`\n/tmp/tmp6yu0wo6_.d(26): Error: cannot append type `string` to type `void[]`\n/tmp/tmp6yu0wo6_.d(29): Error: cannot implicitly convert expression `result` of type `void[]` to `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6yu0wo6_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\t\n\twhile(true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif(start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif(end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1665517373,
      "stdout": "",
      "stderr": "/tmp/tmpzng24vcx.d(16): Error: no property `find` for type `string`\n/tmp/tmpzng24vcx.d(19): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzng24vcx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\t\n\tint start = 0;\n\tint end = 0;\n\t\n\twhile (true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif (start == -1)\n\t\t\tbreak;\n\t\t\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif (end == -1)\n\t\t\tbreak;\n\t\t\n\t\tresult ~= text[start+1..end];\n\t\t\n\t\tstart = end + 1;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123015,
      "stdout": "",
      "stderr": "/tmp/tmp_ppnkr_d.d(17): Error: no property `find` for type `string`\n/tmp/tmp_ppnkr_d.d(21): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_ppnkr_d.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint i = 0;\n\twhile (i < text.length) \n\t{\n\t\tif (text[i] == '\"') \n\t\t{\n\t\t\tstart = i;\n\t\t\ti++;\n\t\t\twhile (i < text.length) \n\t\t\t{\n\t\t\t\tif (text[i] == '\"') \n\t\t\t\t{\n\t\t\t\t\tend = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\ti++;\n\t\t\t}\n\t\t\tresult ~= text[start..end];\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123015,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3knbchb0.d(39): unittest failure\n----------------\n??:? _d_unittestp [0x428dd5]\n??:? void tmp3knbchb0.__unittest_L35_C1() [0x427d5a]\n??:? void tmp3knbchb0.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e10f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428b2e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42afbd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b04c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42af49]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428b05]\n??:? runModuleUnitTests [0x42dee5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429298]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint count = 0;\n\t\n\twhile(true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif(start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start+1);\n\t\tif(end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start+1..end];\n\t\tstart = end+1;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123015,
      "stdout": "",
      "stderr": "/tmp/tmpi3omt77_.d(17): Error: no property `find` for type `string`\n/tmp/tmpi3omt77_.d(20): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi3omt77_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint i = 0;\n\twhile (i < text.length) \n\t{\n\t\tif (text[i] == '\"') \n\t\t{\n\t\t\tstart = i;\n\t\t\tend = text.indexOf('\"', start + 1);\n\t\t\tif (end == -1) \n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tresult ~= text.substr(start + 1, end - start - 1);\n\t\t\ti = end + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\ti++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123015,
      "stdout": "",
      "stderr": "/tmp/tmp7xdrkkvx.d(19): Error: no property `indexOf` for type `string`\n/tmp/tmp7xdrkkvx.d(24): Error: no property `substr` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7xdrkkvx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint count = 0;\n\t\n\twhile(true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif(start == -1) break;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif(end == -1) break;\n\t\t\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123015,
      "stdout": "",
      "stderr": "/tmp/tmpy5d9ikne.d(17): Error: no property `find` for type `string`\n/tmp/tmpy5d9ikne.d(19): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy5d9ikne.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\twhile(true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif(start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif(end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1665517373,
      "stdout": "",
      "stderr": "/tmp/tmptf7tozpo.d(15): Error: no property `find` for type `string`\n/tmp/tmptf7tozpo.d(18): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptf7tozpo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\twhile(true)\n\t{\n\t\tstart = text.find('\"', start);\n\t\tif(start == -1)\n\t\t\tbreak;\n\t\tend = text.find('\"', start + 1);\n\t\tif(end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123014,
      "stdout": "",
      "stderr": "/tmp/tmpvurd8dph.d(15): Error: no property `find` for type `string`\n/tmp/tmpvurd8dph.d(18): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvurd8dph.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint count = 0;\n\t\n\twhile(true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\t\n\t\tif(start == -1 || end == -1)\n\t\t\tbreak;\n\t\t\n\t\tresult ~= text[start+1 .. end];\n\t\tstart = end + 1;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123015,
      "stdout": "",
      "stderr": "/tmp/tmpt6y68u86.d(17): Error: no property `find` for type `string`\n/tmp/tmpt6y68u86.d(18): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt6y68u86.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tauto result = [];\n\tint start = 0;\n\tint end = 0;\n\twhile (start < text.length)\n\t{\n\t\tstart = text.indexOf(\"\\\"\", start);\n\t\tif (start == -1)\n\t\t\tbreak;\n\t\tend = text.indexOf(\"\\\"\", start + 1);\n\t\tif (end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123015,
      "stdout": "",
      "stderr": "/tmp/tmpx49uotaq.d(15): Error: no property `indexOf` for type `string`\n/tmp/tmpx49uotaq.d(18): Error: no property `indexOf` for type `string`\n/tmp/tmpx49uotaq.d(21): Error: cannot append type `string` to type `void[]`\n/tmp/tmpx49uotaq.d(24): Error: cannot implicitly convert expression `result` of type `void[]` to `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx49uotaq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\t\n\twhile(true)\n\t{\n\t\tstart = text.find('\"', start);\n\t\tif(start == -1)\n\t\t\tbreak;\n\t\tend = text.find('\"', start + 1);\n\t\tif(end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123015,
      "stdout": "",
      "stderr": "/tmp/tmpu6aszbyc.d(16): Error: no property `find` for type `string`\n/tmp/tmpu6aszbyc.d(19): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu6aszbyc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint i = 0;\n\twhile (i < text.length)\n\t{\n\t\tif (text[i] == '\"')\n\t\t{\n\t\t\tstart = i;\n\t\t\ti++;\n\t\t\twhile (text[i] != '\"')\n\t\t\t{\n\t\t\t\ti++;\n\t\t\t}\n\t\t\tend = i;\n\t\t\tresult ~= text[start..end];\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpsh72r_bc.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x428dc5]\n??:? void tmpsh72r_bc.__unittest_L31_C1() [0x427d4a]\n??:? void tmpsh72r_bc.__modtest() [0x42802c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e0ff]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428b1e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42afad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b03c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42af39]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428af5]\n??:? runModuleUnitTests [0x42ded5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429288]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint i = 0;\n\twhile(i < text.length)\n\t{\n\t\tif(text[i] == '\"')\n\t\t{\n\t\t\tstart = i;\n\t\t\ti++;\n\t\t\twhile(text[i] != '\"')\n\t\t\t{\n\t\t\t\ti++;\n\t\t\t}\n\t\t\tend = i;\n\t\t\tresult ~= text[start..end];\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123015,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpihm6ukix.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x428dc5]\n??:? void tmpihm6ukix.__unittest_L31_C1() [0x427d4a]\n??:? void tmpihm6ukix.__modtest() [0x42802c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e0ff]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428b1e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42afad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b03c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42af39]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428af5]\n??:? runModuleUnitTests [0x42ded5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429288]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start_index = 0;\n\tint end_index = 0;\n\tint length = text.length;\n\t\n\twhile(start_index < length)\n\t{\n\t\tstart_index = text.indexOf('\"', start_index);\n\t\tif(start_index == -1)\n\t\t\tbreak;\n\t\tend_index = text.indexOf('\"', start_index + 1);\n\t\tif(end_index == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start_index + 1 .. end_index];\n\t\tstart_index = end_index + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123015,
      "stdout": "",
      "stderr": "/tmp/tmpqt_4u1zn.d(13): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\n/tmp/tmpqt_4u1zn.d(17): Error: no property `indexOf` for type `string`\n/tmp/tmpqt_4u1zn.d(20): Error: no property `indexOf` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqt_4u1zn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\twhile(true)\n\t{\n\t\tstart = text.find('\"', end);\n\t\tif(start == -1)\n\t\t\tbreak;\n\t\tend = text.find('\"', start + 1);\n\t\tif(end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123015,
      "stdout": "",
      "stderr": "/tmp/tmpa04jcn5a.d(15): Error: no property `find` for type `string`\n/tmp/tmpa04jcn5a.d(18): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa04jcn5a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint len = text.length;\n\twhile (start < len)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif (start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif (end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123015,
      "stdout": "",
      "stderr": "/tmp/tmp2k84wgab.d(13): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\n/tmp/tmp2k84wgab.d(16): Error: no property `find` for type `string`\n/tmp/tmp2k84wgab.d(19): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2k84wgab.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\twhile(true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif(start == -1) break;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif(end == -1) break;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123015,
      "stdout": "",
      "stderr": "/tmp/tmp7qi7xka1.d(15): Error: no property `find` for type `string`\n/tmp/tmp7qi7xka1.d(17): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7qi7xka1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint index = 0;\n\twhile(true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif(start == -1 || end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123015,
      "stdout": "",
      "stderr": "/tmp/tmpgid27ju5.d(16): Error: no property `find` for type `string`\n/tmp/tmpgid27ju5.d(17): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgid27ju5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\twhile(true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif(start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif(end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1665517373,
      "stdout": "",
      "stderr": "/tmp/tmptf7tozpo.d(15): Error: no property `find` for type `string`\n/tmp/tmptf7tozpo.d(18): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptf7tozpo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\twhile(true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif(start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif(end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1665517373,
      "stdout": "",
      "stderr": "/tmp/tmptf7tozpo.d(15): Error: no property `find` for type `string`\n/tmp/tmptf7tozpo.d(18): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptf7tozpo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tauto result = [];\n\tauto start = text.find(\"\\\"\");\n\twhile (start != -1) \n\t{\n\t\tauto end = text.find(\"\\\"\", start + 1);\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = text.find(\"\\\"\", end + 1);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123014,
      "stdout": "",
      "stderr": "/tmp/tmpeiez8cru.d(11): Error: no property `find` for type `string`\n/tmp/tmpeiez8cru.d(14): Error: no property `find` for type `string`\n/tmp/tmpeiez8cru.d(18): Error: cannot implicitly convert expression `result` of type `void[]` to `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpeiez8cru.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\twhile (true) \n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif (start == -1) \n\t\t{\n\t\t\tbreak;\n\t\t}\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif (end == -1) \n\t\t{\n\t\t\tbreak;\n\t\t}\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123015,
      "stdout": "",
      "stderr": "/tmp/tmpz_cubyiz.d(15): Error: no property `find` for type `string`\n/tmp/tmpz_cubyiz.d(20): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz_cubyiz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\twhile(start != -1 && end != -1)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif(start != -1 && end != -1)\n\t\t{\n\t\t\tresult ~= text[start + 1 .. end];\n\t\t\tstart = end + 1;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1665517373,
      "stdout": "",
      "stderr": "/tmp/tmp216friov.d(15): Error: no property `find` for type `string`\n/tmp/tmp216friov.d(16): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp216friov.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tauto result = [];\n\tauto start = 0;\n\tauto end = 0;\n\t\n\tforeach(i, c; text)\n\t{\n\t\tif(c == '\"')\n\t\t{\n\t\t\tif(start == 0)\n\t\t\t\tstart = i;\n\t\t\telse\n\t\t\t{\n\t\t\t\tend = i;\n\t\t\t\tresult ~= text[start+1..end];\n\t\t\t\tstart = 0;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123015,
      "stdout": "",
      "stderr": "/tmp/tmp46auvya9.d(19): Error: cannot implicitly convert expression `i` of type `ulong` to `int`\n/tmp/tmp46auvya9.d(22): Error: cannot implicitly convert expression `i` of type `ulong` to `int`\n/tmp/tmp46auvya9.d(23): Error: cannot append type `string` to type `void[]`\n/tmp/tmp46auvya9.d(29): Error: cannot implicitly convert expression `result` of type `void[]` to `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp46auvya9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\twhile (true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif (start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif (end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1665517373,
      "stdout": "",
      "stderr": "/tmp/tmp09p0drpi.d(15): Error: no property `find` for type `string`\n/tmp/tmp09p0drpi.d(18): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp09p0drpi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}