{
  "name": "mbpp_411_snake_to_camel",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_411_snake_to_camel.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tbool next_upper = false;\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tnext_upper = true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(next_upper)\n\t\t\t{\n\t\t\t\tresult ~= toUpper(c);\n\t\t\t\tnext_upper = false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult ~= c;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmp4riui0r0.d(22): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4riui0r0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tbool is_first = true;\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tis_first = true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(is_first)\n\t\t\t{\n\t\t\t\tresult ~= toUpper(c);\n\t\t\t\tis_first = false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult ~= toLower(c);\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmp0um4g2sj.d(22): Error: undefined identifier `toUpper`\n/tmp/tmp0um4g2sj.d(27): Error: undefined identifier `toLower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0um4g2sj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmplgt_v3ur.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplgt_v3ur.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tbool is_first = true;\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tis_first = true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(is_first)\n\t\t\t{\n\t\t\t\tresult ~= toUpper(c);\n\t\t\t\tis_first = false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult ~= c;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmp9lpuffwt.d(22): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9lpuffwt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tint len = word.length;\n\tint i = 0;\n\twhile(i < len)\n\t{\n\t\tif(word[i] == '_')\n\t\t{\n\t\t\tresult ~= toupper(word[i+1]);\n\t\t\ti += 2;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= word[i];\n\t\t\ti++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmprkj12am8.d(11): Error: cannot implicitly convert expression `word.length` of type `ulong` to `int`\n/tmp/tmprkj12am8.d(17): Error: undefined identifier `toupper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprkj12am8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmp_k1qiud5.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_k1qiud5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tforeach(c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[$ - 1]);\n\t\t\tword = word[0 .. $ - 2];\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmp2hqh2fin.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2hqh2fin.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= to!string(word[i+1]).toUpper();\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmp780t04gu.d(15): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp780t04gu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tint i = 0;\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(i == 0)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= toUpper(c);\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmp309_2mmj.d(25): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp309_2mmj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmpb6ahl177.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb6ahl177.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tbool is_upper = false;\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tis_upper = true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(is_upper)\n\t\t\t{\n\t\t\t\tresult ~= toUpper(c);\n\t\t\t\tis_upper = false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult ~= c;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmp1hcjiy3o.d(22): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1hcjiy3o.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tbool is_upper = false;\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tis_upper = true;\n\t\t\tcontinue;\n\t\t}\n\t\tif(is_upper)\n\t\t{\n\t\t\tresult ~= toUpper(c);\n\t\t\tis_upper = false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmp7a_nyb3m.d(21): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7a_nyb3m.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tint i = 0;\n\twhile(i < word.length) \n\t{\n\t\tif(word[i] == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti += 2;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult ~= word[i];\n\t\t\ti++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmpw0z_s_h3.d(16): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw0z_s_h3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tbool is_first_char = true;\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tis_first_char = true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(is_first_char)\n\t\t\t{\n\t\t\t\tresult ~= toupper(c);\n\t\t\t\tis_first_char = false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult ~= c;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmp55_351mt.d(22): Error: undefined identifier `toupper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp55_351mt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring[] words = split(word, '_');\n\tstring result = \"\";\n\tforeach(i, w; words)\n\t{\n\t\tresult ~= to!string(w[0]).toUpper ~ w[1..$];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmp5_mb25_h.d(10): Error: undefined identifier `split`\n/tmp/tmp5_mb25_h.d(14): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5_mb25_h.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tforeach(i, c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmp0z0pk2ar.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0z0pk2ar.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tforeach(i, ch; word)\n\t{\n\t\tif(ch == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= ch;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmpxvlf14j0.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxvlf14j0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring camel_word = \"\";\n\tforeach(i, c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tcamel_word ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tcamel_word ~= c;\n\t\t}\n\t}\n\treturn camel_word;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmppfd8gjsd.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppfd8gjsd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring camel = \"\";\n\tint i = 0;\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(i == 0)\n\t\t{\n\t\t\tcamel ~= c;\n\t\t\tcontinue;\n\t\t}\n\t\tcamel ~= toUpper(c);\n\t\ti = 0;\n\t}\n\treturn camel;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmp4cfivywl.d(24): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4cfivywl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tforeach(i, c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmp0z0pk2ar.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0z0pk2ar.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tforeach(i, c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmp0z0pk2ar.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0z0pk2ar.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1666122728,
      "stdout": "",
      "stderr": "/tmp/tmppcnj_ths.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppcnj_ths.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tint i = 0;\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(i == 0)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= toUpper(c);\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1666122728,
      "stdout": "",
      "stderr": "/tmp/tmpc82dwd60.d(25): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc82dwd60.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1666122728,
      "stdout": "",
      "stderr": "/tmp/tmpneybrx_8.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpneybrx_8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1666122728,
      "stdout": "",
      "stderr": "/tmp/tmppcnj_ths.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppcnj_ths.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1666122728,
      "stdout": "",
      "stderr": "/tmp/tmphnz3gcls.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphnz3gcls.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tint i = 0;\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(i == 0)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= toUpper(c);\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmp309_2mmj.d(25): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp309_2mmj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmpb6ahl177.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb6ahl177.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tint i = 0;\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(i == 0)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= toUpper(c);\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1666122728,
      "stdout": "",
      "stderr": "/tmp/tmpc82dwd60.d(25): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc82dwd60.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1666122728,
      "stdout": "",
      "stderr": "/tmp/tmppcnj_ths.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppcnj_ths.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring camel_word = \"\";\n\tint i = 0;\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(i > 0)\n\t\t{\n\t\t\tcamel_word ~= toupper(c);\n\t\t\ti = 0;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tcamel_word ~= c;\n\t\t}\n\t}\n\treturn camel_word;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1666122729,
      "stdout": "",
      "stderr": "/tmp/tmpmgy58y_o.d(21): Error: undefined identifier `toupper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmgy58y_o.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tforeach(i, c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmp0z0pk2ar.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0z0pk2ar.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(immutable c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tresult ~= to!string(word[$-1]).toUpper();\n\t\t\tword = word[0..$-2];\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1666122729,
      "stdout": "",
      "stderr": "/tmp/tmp8qx79tia.d(15): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8qx79tia.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= to!string(word[i+1]).toUpper();\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmp780t04gu.d(15): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp780t04gu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tbool is_upper = false;\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tis_upper = true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(is_upper)\n\t\t\t{\n\t\t\t\tresult ~= toUpper(c);\n\t\t\t\tis_upper = false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult ~= c;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmp1hcjiy3o.d(22): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1hcjiy3o.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1666122728,
      "stdout": "",
      "stderr": "/tmp/tmpneybrx_8.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpneybrx_8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1666122728,
      "stdout": "",
      "stderr": "/tmp/tmphnz3gcls.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphnz3gcls.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring[] words = split(word, '_');\n\tstring result = \"\";\n\tforeach(string w; words)\n\t{\n\t\tresult ~= toUpper(w[0]) ~ w[1..$];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1666122729,
      "stdout": "",
      "stderr": "/tmp/tmpd7_1w86p.d(10): Error: undefined identifier `split`\n/tmp/tmpd7_1w86p.d(14): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd7_1w86p.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1666122729,
      "stdout": "",
      "stderr": "/tmp/tmpb0espm7q.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb0espm7q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tint i = 0;\n\tforeach(c; word)\n\t{\n\t\tif (c == '_')\n\t\t{\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (i == 0)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= toUpper(c);\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1666122729,
      "stdout": "",
      "stderr": "/tmp/tmpuf_m6z0t.d(25): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuf_m6z0t.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1666122729,
      "stdout": "",
      "stderr": "/tmp/tmpzc5ykjtg.d(14): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzc5ykjtg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1666122728,
      "stdout": "",
      "stderr": "/tmp/tmppcnj_ths.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppcnj_ths.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1666122729,
      "stdout": "",
      "stderr": "/tmp/tmpy9ieugox.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy9ieugox.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tbool is_upper = false;\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tis_upper = true;\n\t\t\tcontinue;\n\t\t}\n\t\tif(is_upper)\n\t\t{\n\t\t\tresult ~= toUpper(c);\n\t\t\tis_upper = false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmp7a_nyb3m.d(21): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7a_nyb3m.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tforeach(i, c; word)\n\t{\n\t\tif (c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1666122729,
      "stdout": "",
      "stderr": "/tmp/tmpksa6nblh.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpksa6nblh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1666122728,
      "stdout": "",
      "stderr": "/tmp/tmppcnj_ths.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppcnj_ths.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word) \n\t{\n\t\tif (c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1666122729,
      "stdout": "",
      "stderr": "/tmp/tmpfe27d4un.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfe27d4un.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tint i = 0;\n\twhile (i < word.length)\n\t{\n\t\tif (word[i] == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti += 2;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= word[i];\n\t\t\ti++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1666122729,
      "stdout": "",
      "stderr": "/tmp/tmptd2qeiq9.d(16): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptd2qeiq9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tbool is_upper = false;\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tis_upper = true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(is_upper)\n\t\t\t{\n\t\t\t\tresult ~= toUpper(c);\n\t\t\t\tis_upper = false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult ~= c;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmp1hcjiy3o.d(22): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1hcjiy3o.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n    string result;\n    foreach(i, c; word)\n    {\n        if (c == '_')\n        {\n            result ~= toUpper(word[i+1]);\n            i++;\n        }\n        else\n        {\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1666122729,
      "stdout": "",
      "stderr": "/tmp/tmpxbxe7ocb.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxbxe7ocb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tint i = 0;\n\twhile (i < word.length)\n\t{\n\t\tif (word[i] == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti += 2;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= word[i];\n\t\t\ti++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1666122729,
      "stdout": "",
      "stderr": "/tmp/tmptd2qeiq9.d(16): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptd2qeiq9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tbool is_upper = false;\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tis_upper = true;\n\t\t\tcontinue;\n\t\t}\n\t\tif(is_upper)\n\t\t{\n\t\t\tresult ~= toUpper(c);\n\t\t\tis_upper = false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmp7a_nyb3m.d(21): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7a_nyb3m.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1666122728,
      "stdout": "",
      "stderr": "/tmp/tmppcnj_ths.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppcnj_ths.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tbool is_upper = false;\n\tforeach(c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tis_upper = true;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tif(is_upper) \n\t\t\t{\n\t\t\t\tresult ~= toUpper(c);\n\t\t\t\tis_upper = false;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tresult ~= c;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1666122729,
      "stdout": "",
      "stderr": "/tmp/tmpugj4fyzf.d(22): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpugj4fyzf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tforeach(i, c; word)\n\t{\n\t\tif (c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1666122729,
      "stdout": "",
      "stderr": "/tmp/tmpksa6nblh.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpksa6nblh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tforeach(i, ch; word)\n\t{\n\t\tif(ch == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= ch;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1666122729,
      "stdout": "",
      "stderr": "/tmp/tmp_vs01_nz.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_vs01_nz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1666122728,
      "stdout": "",
      "stderr": "/tmp/tmppcnj_ths.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppcnj_ths.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmplgt_v3ur.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplgt_v3ur.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring[] words = split(word, '_');\n\tstring result = \"\";\n\tforeach(i, w; words)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\tresult ~= w;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= toUpper(w[0]) ~ w[1..$];\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1666122729,
      "stdout": "",
      "stderr": "/tmp/tmpgcrlcjr9.d(10): Error: undefined identifier `split`\n/tmp/tmpgcrlcjr9.d(20): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgcrlcjr9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tint i = 0;\n\twhile(i < word.length)\n\t{\n\t\tif(word[i] == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti += 2;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= word[i];\n\t\t\ti++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1666122729,
      "stdout": "",
      "stderr": "/tmp/tmphsdph_3b.d(16): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphsdph_3b.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1666122728,
      "stdout": "",
      "stderr": "/tmp/tmphnz3gcls.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphnz3gcls.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring[] words = split(word, '_');\n\tstring result = \"\";\n\tforeach(i, w; words)\n\t{\n\t\tresult ~= to!string(w[0]).toUpper ~ w[1 .. $];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1666122729,
      "stdout": "",
      "stderr": "/tmp/tmp2k874x4c.d(10): Error: undefined identifier `split`\n/tmp/tmp2k874x4c.d(14): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2k874x4c.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tforeach(i,c;word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1666122729,
      "stdout": "",
      "stderr": "/tmp/tmpe7a9yrj7.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe7a9yrj7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word) \n\t{\n\t\tif (c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1666122729,
      "stdout": "",
      "stderr": "/tmp/tmphadpy2z5.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphadpy2z5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tbool is_upper = false;\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tis_upper = true;\n\t\t\tcontinue;\n\t\t}\n\t\tif(is_upper)\n\t\t{\n\t\t\tresult ~= toUpper(c);\n\t\t\tis_upper = false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmp7a_nyb3m.d(21): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7a_nyb3m.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tbool flag = false;\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tflag = true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(flag)\n\t\t\t{\n\t\t\t\tresult ~= toupper(c);\n\t\t\t\tflag = false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult ~= c;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1666122729,
      "stdout": "",
      "stderr": "/tmp/tmp5ev0irtg.d(22): Error: undefined identifier `toupper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5ev0irtg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1666122729,
      "stdout": "",
      "stderr": "/tmp/tmpdy6utbmt.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdy6utbmt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tint i = 0;\n\t\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\t\t\n\t\tif(i % 2 == 0)\n\t\t\tresult ~= c;\n\t\telse\n\t\t\tresult ~= toUpper(c);\n\t\t\n\t\ti++;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1666122729,
      "stdout": "",
      "stderr": "/tmp/tmp2ctg7aou.d(24): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2ctg7aou.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1666122728,
      "stdout": "",
      "stderr": "/tmp/tmphnz3gcls.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphnz3gcls.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tbool is_upper = false;\n\tforeach(c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tis_upper = true;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tif(is_upper) \n\t\t\t{\n\t\t\t\tresult ~= toUpper(c);\n\t\t\t\tis_upper = false;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tresult ~= c;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1666122729,
      "stdout": "",
      "stderr": "/tmp/tmpugj4fyzf.d(22): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpugj4fyzf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t\tcontinue;\n\t\tif(word[i-1] == '_')\n\t\t\tresult ~= toUpper(c);\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1666122729,
      "stdout": "",
      "stderr": "/tmp/tmp38bppvfn.d(16): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp38bppvfn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(immutable char c; word)\n\t{\n\t\tif(c == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn to!string(result.split(' ').map!(a => toUpper(a[0]) ~ a[1..$]).join(\"\"));\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1666122729,
      "stdout": "",
      "stderr": "/tmp/tmpu2vpg4bq.d(18): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu2vpg4bq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmplgt_v3ur.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplgt_v3ur.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring camel_word = \"\";\n\tint i = 0;\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(i == 0)\n\t\t{\n\t\t\tcamel_word ~= c;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tcamel_word ~= toUpper(c);\n\t\t}\n\t}\n\treturn camel_word;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1666122729,
      "stdout": "",
      "stderr": "/tmp/tmp7dgq0l51.d(25): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7dgq0l51.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tbool flag = false;\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tflag = true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(flag)\n\t\t\t{\n\t\t\t\tresult ~= toupper(c);\n\t\t\t\tflag = false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult ~= c;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1666122729,
      "stdout": "",
      "stderr": "/tmp/tmp5ht87lvt.d(22): Error: undefined identifier `toupper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5ht87lvt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tbool is_first = true;\n\tforeach(ch; word)\n\t{\n\t\tif(ch == '_')\n\t\t{\n\t\t\tis_first = true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(is_first)\n\t\t\t{\n\t\t\t\tresult ~= ch.toUpper;\n\t\t\t\tis_first = false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult ~= ch;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1666122729,
      "stdout": "",
      "stderr": "/tmp/tmppkn9oaqp.d(22): Error: no property `toUpper` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppkn9oaqp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tstring[] words = split(word, '_');\n\tforeach(w; words)\n\t{\n\t\tresult ~= to!string(w[0]).toUpper ~ w[1..$];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1666122729,
      "stdout": "",
      "stderr": "/tmp/tmpld872tha.d(11): Error: undefined identifier `split`\n/tmp/tmpld872tha.d(14): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpld872tha.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tforeach(i, c; word)\n\t{\n\t\tif (c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1666122729,
      "stdout": "",
      "stderr": "/tmp/tmph7_yotbw.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph7_yotbw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1666122728,
      "stdout": "",
      "stderr": "/tmp/tmphnz3gcls.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphnz3gcls.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1666122729,
      "stdout": "",
      "stderr": "/tmp/tmpy9ieugox.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy9ieugox.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1666122729,
      "stdout": "",
      "stderr": "/tmp/tmpote0_8l3.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpote0_8l3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tforeach (i, c; word) \n\t{\n\t\tif (c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1666122729,
      "stdout": "",
      "stderr": "/tmp/tmp54v3k6t9.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp54v3k6t9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(immutable c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[$ - 1]);\n\t\t\tword = word[0 .. $ - 2];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1666122729,
      "stdout": "",
      "stderr": "/tmp/tmprinwd1zc.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprinwd1zc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tbool is_upper = false;\n\tforeach(c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tis_upper = true;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tif(is_upper) \n\t\t\t{\n\t\t\t\tresult ~= toUpper(c);\n\t\t\t\tis_upper = false;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tresult ~= c;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1666122729,
      "stdout": "",
      "stderr": "/tmp/tmpugj4fyzf.d(22): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpugj4fyzf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1666122728,
      "stdout": "",
      "stderr": "/tmp/tmppcnj_ths.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppcnj_ths.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tbool is_upper = false;\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tis_upper = true;\n\t\t\tcontinue;\n\t\t}\n\t\tif(is_upper)\n\t\t{\n\t\t\tresult ~= toUpper(c);\n\t\t\tis_upper = false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmp7a_nyb3m.d(21): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7a_nyb3m.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tbool is_upper = false;\n\tforeach(c; word) \n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tis_upper = true;\n\t\t\tcontinue;\n\t\t}\n\t\tif(is_upper)\n\t\t{\n\t\t\tresult ~= toUpper(c);\n\t\t\tis_upper = false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1666122729,
      "stdout": "",
      "stderr": "/tmp/tmp2fwxickj.d(21): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2fwxickj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tforeach(i, c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmp0z0pk2ar.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0z0pk2ar.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tbool is_first = true;\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tis_first = true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(is_first)\n\t\t\t{\n\t\t\t\tresult ~= toUpper(c);\n\t\t\t\tis_first = false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult ~= c;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmp9lpuffwt.d(22): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9lpuffwt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tbool is_first_char = true;\n\tforeach(ch; word) \n\t{\n\t\tif(ch == '_') \n\t\t{\n\t\t\tis_first_char = true;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tif(is_first_char) \n\t\t\t{\n\t\t\t\tresult ~= toUpper(ch);\n\t\t\t\tis_first_char = false;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tresult ~= ch;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1666122729,
      "stdout": "",
      "stderr": "/tmp/tmp6m9wdf2m.d(22): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6m9wdf2m.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tforeach(i, c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1666122729,
      "stdout": "",
      "stderr": "/tmp/tmpopb384e9.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpopb384e9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1666122728,
      "stdout": "",
      "stderr": "/tmp/tmppcnj_ths.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppcnj_ths.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tbool is_upper = false;\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tis_upper = true;\n\t\t\tcontinue;\n\t\t}\n\t\tif(is_upper)\n\t\t{\n\t\t\tresult ~= toUpper(c);\n\t\t\tis_upper = false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmp7a_nyb3m.d(21): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7a_nyb3m.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1666122729,
      "stdout": "",
      "stderr": "/tmp/tmpote0_8l3.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpote0_8l3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring[] split_word = split(word, \"_\");\n\tstring result = \"\";\n\tforeach(i, w; split_word)\n\t{\n\t\tif(i == 0)\n\t\t\tresult ~= w;\n\t\telse\n\t\t\tresult ~= toUpper(w[0]) ~ w[1..$];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1666122729,
      "stdout": "",
      "stderr": "/tmp/tmp9jrjphms.d(10): Error: undefined identifier `split`\n/tmp/tmp9jrjphms.d(17): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9jrjphms.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring camel_word = \"\";\n\tint i = 0;\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\ti++;\n\t\t\tcamel_word ~= toUpper(word[i]);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tcamel_word ~= c;\n\t\t}\n\t\ti++;\n\t}\n\treturn camel_word;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1666122729,
      "stdout": "",
      "stderr": "/tmp/tmpo9omck5i.d(17): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo9omck5i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tint i = 0;\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(i > 0)\n\t\t{\n\t\t\tresult ~= toUpper(c);\n\t\t\ti = 0;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1666122729,
      "stdout": "",
      "stderr": "/tmp/tmp3nr0c969.d(21): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3nr0c969.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tbool is_upper = false;\n\tforeach (ch; word) \n\t{\n\t\tif (ch == '_') \n\t\t{\n\t\t\tis_upper = true;\n\t\t\tcontinue;\n\t\t}\n\t\tif (is_upper) \n\t\t{\n\t\t\tresult ~= toUpper(ch);\n\t\t\tis_upper = false;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tresult ~= ch;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1666122729,
      "stdout": "",
      "stderr": "/tmp/tmpyjlfj9sy.d(21): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyjlfj9sy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, ch; word)\n\t{\n\t\tif(ch == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= ch;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1666122729,
      "stdout": "",
      "stderr": "/tmp/tmpcypynfpc.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcypynfpc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tint i = 0;\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\ti++;\n\t\t\tresult ~= toupper(word[i]);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1666122729,
      "stdout": "",
      "stderr": "/tmp/tmpuyz25nbb.d(17): Error: undefined identifier `toupper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuyz25nbb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1666122728,
      "stdout": "",
      "stderr": "/tmp/tmppcnj_ths.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppcnj_ths.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmplgt_v3ur.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplgt_v3ur.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tforeach(i, c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmp0z0pk2ar.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0z0pk2ar.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tbool is_first_char = true;\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tis_first_char = true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(is_first_char)\n\t\t\t{\n\t\t\t\tresult ~= toUpper(c);\n\t\t\t\tis_first_char = false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult ~= toLower(c);\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1666122729,
      "stdout": "",
      "stderr": "/tmp/tmp658ol_kw.d(22): Error: undefined identifier `toUpper`\n/tmp/tmp658ol_kw.d(27): Error: undefined identifier `toLower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp658ol_kw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1666122729,
      "stdout": "",
      "stderr": "/tmp/tmpdy6utbmt.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdy6utbmt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tbool is_first = true;\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tis_first = true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(is_first)\n\t\t\t{\n\t\t\t\tresult ~= toupper(c);\n\t\t\t\tis_first = false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult ~= c;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1666122729,
      "stdout": "",
      "stderr": "/tmp/tmprhagq4vg.d(22): Error: undefined identifier `toupper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprhagq4vg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1666122728,
      "stdout": "",
      "stderr": "/tmp/tmphnz3gcls.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphnz3gcls.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tforeach(i, ch; word)\n\t{\n\t\tif(ch == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= ch;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1666122729,
      "stdout": "",
      "stderr": "/tmp/tmp_vs01_nz.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_vs01_nz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif (c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1666122729,
      "stdout": "",
      "stderr": "/tmp/tmpbn2f_jb7.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbn2f_jb7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1666122729,
      "stdout": "",
      "stderr": "/tmp/tmpy9ieugox.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy9ieugox.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1666122729,
      "stdout": "",
      "stderr": "/tmp/tmp9holhlsk.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9holhlsk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tbool is_upper = false;\n\tforeach(ch; word)\n\t{\n\t\tif(ch == '_')\n\t\t{\n\t\t\tis_upper = true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(is_upper)\n\t\t\t{\n\t\t\t\tresult ~= toUpper(ch);\n\t\t\t\tis_upper = false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult ~= ch;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1666122729,
      "stdout": "",
      "stderr": "/tmp/tmpl4em5t_8.d(22): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl4em5t_8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring camel = \"\";\n\tforeach(immutable c; word)\n\t{\n\t\tif(c == '_')\n\t\t\tcontinue;\n\t\telse if(c == '_' && word[$-1] == '_')\n\t\t\tcamel ~= '_';\n\t\telse if(c == '_' && word[$-1] != '_')\n\t\t\tcamel ~= to!string(toUpper(word[$-1]));\n\t\telse\n\t\t\tcamel ~= c;\n\t}\n\treturn camel;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1666122729,
      "stdout": "",
      "stderr": "/tmp/tmp8orgo29m.d(18): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8orgo29m.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmplgt_v3ur.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplgt_v3ur.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring camel = \"\";\n\tforeach(i, ch; word)\n\t{\n\t\tif(ch == '_')\n\t\t{\n\t\t\tcamel ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tcamel ~= ch;\n\t\t}\n\t}\n\treturn camel;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1666122729,
      "stdout": "",
      "stderr": "/tmp/tmp4_9bc74k.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4_9bc74k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1666122728,
      "stdout": "",
      "stderr": "/tmp/tmphnz3gcls.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphnz3gcls.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmpb6ahl177.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb6ahl177.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmplgt_v3ur.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplgt_v3ur.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(immutable c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[$-1]);\n\t\t\tresult ~= word[$-1..$];\n\t\t\tword = word[0..$-2];\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1666122729,
      "stdout": "",
      "stderr": "/tmp/tmpllm_exvl.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpllm_exvl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1666122728,
      "stdout": "",
      "stderr": "/tmp/tmphnz3gcls.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphnz3gcls.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tbool is_upper = false;\n\tforeach(c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tis_upper = true;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif(is_upper) \n\t\t\t{\n\t\t\t\tresult ~= toUpper(c);\n\t\t\t\tis_upper = false;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tresult ~= c;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1666122729,
      "stdout": "",
      "stderr": "/tmp/tmp2hafuhfm.d(22): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2hafuhfm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1666122728,
      "stdout": "",
      "stderr": "/tmp/tmpneybrx_8.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpneybrx_8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tbool flag = false;\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tflag = true;\n\t\t\tcontinue;\n\t\t}\n\t\tif(flag)\n\t\t{\n\t\t\tresult ~= toUpper(c);\n\t\t\tflag = false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1666122729,
      "stdout": "",
      "stderr": "/tmp/tmpqpurcq9p.d(21): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqpurcq9p.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\t\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1666122729,
      "stdout": "",
      "stderr": "/tmp/tmpk6twu8jm.d(16): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk6twu8jm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tint i = 0;\n\tint len = word.length;\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\ti++;\n\t\t\tresult ~= toupper(word[i]);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1666122729,
      "stdout": "",
      "stderr": "/tmp/tmpwjco3ltd.d(12): Error: cannot implicitly convert expression `word.length` of type `ulong` to `int`\n/tmp/tmpwjco3ltd.d(18): Error: undefined identifier `toupper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwjco3ltd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmplgt_v3ur.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplgt_v3ur.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tbool flag = false;\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tflag = true;\n\t\t\tcontinue;\n\t\t}\n\t\tif(flag)\n\t\t{\n\t\t\tresult ~= toUpper(c);\n\t\t\tflag = false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1666122729,
      "stdout": "",
      "stderr": "/tmp/tmpqpurcq9p.d(21): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqpurcq9p.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tbool is_upper = false;\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tis_upper = true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(is_upper)\n\t\t\t{\n\t\t\t\tresult ~= toUpper(c);\n\t\t\t\tis_upper = false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult ~= c;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmp1hcjiy3o.d(22): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1hcjiy3o.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, ch; word) \n\t{\n\t\tif (ch == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult ~= ch;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1666122729,
      "stdout": "",
      "stderr": "/tmp/tmpsvchgk63.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsvchgk63.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring camel;\n\tint i = 0;\n\twhile(i < word.length)\n\t{\n\t\tif(word[i] == '_')\n\t\t{\n\t\t\tcamel ~= toUpper(word[i+1]);\n\t\t\ti += 2;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tcamel ~= word[i];\n\t\t\ti++;\n\t\t}\n\t}\n\treturn camel;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1666122729,
      "stdout": "",
      "stderr": "/tmp/tmpv8307ngv.d(16): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv8307ngv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring camel_word = \"\";\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tcamel_word ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tcamel_word ~= c;\n\t\t}\n\t}\n\treturn camel_word;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1666122729,
      "stdout": "",
      "stderr": "/tmp/tmpvqa3tw7_.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvqa3tw7_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tresult ~= to!string(word[i + 1]).toUpper;\n\t\t\ti++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1666122729,
      "stdout": "",
      "stderr": "/tmp/tmphpscil44.d(15): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphpscil44.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tauto words = split(word, \"_\");\n\tforeach(i, w; words)\n\t{\n\t\tif(i == 0)\n\t\t\tresult ~= w;\n\t\telse\n\t\t\tresult ~= to!string(w[0]).toUpper ~ w[1..$];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1666122729,
      "stdout": "",
      "stderr": "/tmp/tmpde1pjunb.d(11): Error: undefined identifier `split`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpde1pjunb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n    string result;\n    foreach(i, c; word) \n\t{\n        if (c == '_') \n\t\t{\n            result ~= toUpper(word[i + 1]);\n            i++;\n        } \n\t\telse \n\t\t{\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1666122729,
      "stdout": "",
      "stderr": "/tmp/tmpkkyz_ptt.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkkyz_ptt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tbool upper = false;\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tupper = true;\n\t\t\tcontinue;\n\t\t}\n\t\tif(upper)\n\t\t{\n\t\t\tresult ~= toUpper(c);\n\t\t\tupper = false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1666122729,
      "stdout": "",
      "stderr": "/tmp/tmps072_dgd.d(21): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps072_dgd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tforeach(i, c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmp0z0pk2ar.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0z0pk2ar.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring[] words = word.split(\"_\");\n\tstring result = \"\";\n\tforeach(w; words)\n\t{\n\t\tresult ~= w[0].toUpper ~ w[1..$];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1666122729,
      "stdout": "",
      "stderr": "/tmp/tmpm9h8_0c4.d(10): Error: no property `split` for type `string`\n/tmp/tmpm9h8_0c4.d(14): Error: no property `toUpper` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm9h8_0c4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1666122728,
      "stdout": "",
      "stderr": "/tmp/tmppcnj_ths.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppcnj_ths.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t\tcontinue;\n\t\telse if(i == 0)\n\t\t\tresult ~= toLower(c);\n\t\telse if(word[i-1] == '_')\n\t\t\tresult ~= toUpper(c);\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1666122729,
      "stdout": "",
      "stderr": "/tmp/tmprbnrtai4.d(16): Error: undefined identifier `toLower`\n/tmp/tmprbnrtai4.d(18): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprbnrtai4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tbool is_first = true;\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tis_first = true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(is_first)\n\t\t\t{\n\t\t\t\tresult ~= toUpper(c);\n\t\t\t\tis_first = false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult ~= c;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmp9lpuffwt.d(22): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9lpuffwt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t\tcontinue;\n\t\telse if(i == 0)\n\t\t\tresult ~= toLower(c);\n\t\telse if(word[i-1] == '_')\n\t\t\tresult ~= toUpper(c);\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1666122729,
      "stdout": "",
      "stderr": "/tmp/tmp2_unqknp.d(16): Error: undefined identifier `toLower`\n/tmp/tmp2_unqknp.d(18): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2_unqknp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t\tcontinue;\n\t\telse if(i == 0)\n\t\t\tresult ~= toLower(c);\n\t\telse if(word[i-1] == '_')\n\t\t\tresult ~= toUpper(c);\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1666122729,
      "stdout": "",
      "stderr": "/tmp/tmp2_unqknp.d(16): Error: undefined identifier `toLower`\n/tmp/tmp2_unqknp.d(18): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2_unqknp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tforeach(i, c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmp0z0pk2ar.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0z0pk2ar.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tforeach(i, c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmp0z0pk2ar.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0z0pk2ar.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tbool is_first = true;\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tis_first = true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(is_first)\n\t\t\t{\n\t\t\t\tresult ~= toUpper(c);\n\t\t\t\tis_first = false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult ~= c;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmp9lpuffwt.d(22): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9lpuffwt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tint i = 0;\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(i == 0)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= toUpper(c);\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1666122728,
      "stdout": "",
      "stderr": "/tmp/tmpc82dwd60.d(25): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc82dwd60.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1666122728,
      "stdout": "",
      "stderr": "/tmp/tmppcnj_ths.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppcnj_ths.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1666122728,
      "stdout": "",
      "stderr": "/tmp/tmphnz3gcls.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphnz3gcls.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tbool is_first = true;\n\tforeach (c; word)\n\t{\n\t\tif (c == '_')\n\t\t{\n\t\t\tis_first = true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (is_first)\n\t\t\t{\n\t\t\t\tresult ~= toUpper(c);\n\t\t\t\tis_first = false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult ~= c;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1666122729,
      "stdout": "",
      "stderr": "/tmp/tmpjn85j6zz.d(22): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjn85j6zz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmplgt_v3ur.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplgt_v3ur.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t\tcontinue;\n\t\telse if(i == 0)\n\t\t\tresult ~= toLower(c);\n\t\telse if(word[i-1] == '_')\n\t\t\tresult ~= toUpper(c);\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1666122729,
      "stdout": "",
      "stderr": "/tmp/tmp2_unqknp.d(16): Error: undefined identifier `toLower`\n/tmp/tmp2_unqknp.d(18): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2_unqknp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(immutable c; word)\n\t{\n\t\tif(c == '_')\n\t\t\tresult ~= ' ';\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result.replace(\" \", \"\").title;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1666122729,
      "stdout": "",
      "stderr": "/tmp/tmpohl_auhk.d(18): Error: no property `replace` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpohl_auhk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1666122728,
      "stdout": "",
      "stderr": "/tmp/tmppcnj_ths.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppcnj_ths.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmplgt_v3ur.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplgt_v3ur.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i,c;word)\n\t{\n\t\tif(c=='_')\n\t\t\tcontinue;\n\t\telse if(i==0)\n\t\t\tresult~=c;\n\t\telse if(word[i-1]=='_')\n\t\t\tresult~=toUpper(c);\n\t\telse\n\t\t\tresult~=c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1666122729,
      "stdout": "",
      "stderr": "/tmp/tmppaa15n6z.d(18): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppaa15n6z.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tbool is_first = true;\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tis_first = true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(is_first)\n\t\t\t{\n\t\t\t\tresult ~= toUpper(c);\n\t\t\t\tis_first = false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult ~= c;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmp9lpuffwt.d(22): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9lpuffwt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tint i = 0;\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\ti++;\n\t\t\tresult ~= toUpper(word[i]);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1666122729,
      "stdout": "",
      "stderr": "/tmp/tmp4w1jq4xf.d(17): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4w1jq4xf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1666122728,
      "stdout": "",
      "stderr": "/tmp/tmphnz3gcls.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphnz3gcls.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tbool is_upper = false;\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tis_upper = true;\n\t\t\tcontinue;\n\t\t}\n\t\tif(is_upper)\n\t\t{\n\t\t\tresult ~= toUpper(c);\n\t\t\tis_upper = false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1666122729,
      "stdout": "",
      "stderr": "/tmp/tmpzmqet1mi.d(21): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzmqet1mi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tforeach(i, ch; word)\n\t{\n\t\tif(ch == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= ch;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmpxvlf14j0.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxvlf14j0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1666122728,
      "stdout": "",
      "stderr": "/tmp/tmppcnj_ths.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppcnj_ths.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1666122728,
      "stdout": "",
      "stderr": "/tmp/tmphnz3gcls.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphnz3gcls.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1666122728,
      "stdout": "",
      "stderr": "/tmp/tmphnz3gcls.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphnz3gcls.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tint i = 0;\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(i == 0)\n\t\t\tresult ~= c;\n\t\telse\n\t\t\tresult ~= toUpper(c);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1666122729,
      "stdout": "",
      "stderr": "/tmp/tmpeibbzpb5.d(22): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpeibbzpb5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\ti++;\n\t\t\tresult ~= toUpper(word[i]);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1666122729,
      "stdout": "",
      "stderr": "/tmp/tmplg774o3p.d(16): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplg774o3p.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t\tcontinue;\n\t\telse if(i == 0)\n\t\t\tresult ~= toLower(c);\n\t\telse if(word[i-1] == '_')\n\t\t\tresult ~= toUpper(c);\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1666122729,
      "stdout": "",
      "stderr": "/tmp/tmp2_unqknp.d(16): Error: undefined identifier `toLower`\n/tmp/tmp2_unqknp.d(18): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2_unqknp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word) \n\t{\n\t\tif (c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1666122729,
      "stdout": "",
      "stderr": "/tmp/tmpfe27d4un.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfe27d4un.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1666122728,
      "stdout": "",
      "stderr": "/tmp/tmpneybrx_8.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpneybrx_8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1666122728,
      "stdout": "",
      "stderr": "/tmp/tmppcnj_ths.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppcnj_ths.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(immutable char c; word) \n\t{\n\t\tif (c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[$]);\n\t\t} \n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1666122729,
      "stdout": "",
      "stderr": "/tmp/tmp93i47fzt.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp93i47fzt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1666122728,
      "stdout": "",
      "stderr": "/tmp/tmphnz3gcls.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphnz3gcls.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[$-1]);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1666122729,
      "stdout": "",
      "stderr": "/tmp/tmpat7p217x.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpat7p217x.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tbool is_upper = false;\n\tforeach(c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tis_upper = true;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tif(is_upper) \n\t\t\t{\n\t\t\t\tresult ~= toUpper(c);\n\t\t\t\tis_upper = false;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tresult ~= c;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1666122729,
      "stdout": "",
      "stderr": "/tmp/tmpugj4fyzf.d(22): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpugj4fyzf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tbool is_first = true;\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tis_first = true;\n\t\t\tcontinue;\n\t\t}\n\t\tif(is_first)\n\t\t{\n\t\t\tresult ~= toUpper(c);\n\t\t\tis_first = false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1666122729,
      "stdout": "",
      "stderr": "/tmp/tmp7zexa_de.d(21): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7zexa_de.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tbool is_upper = false;\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tis_upper = true;\n\t\t\tcontinue;\n\t\t}\n\t\tif(is_upper)\n\t\t{\n\t\t\tresult ~= toUpper(c);\n\t\t\tis_upper = false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmp7a_nyb3m.d(21): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7a_nyb3m.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tforeach(i, c; word) \n\t{\n\t\tif (c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1666122729,
      "stdout": "",
      "stderr": "/tmp/tmp0r2e4jrh.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0r2e4jrh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\ti++;\n\t\t\tresult ~= toUpper(word[i]);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1666122729,
      "stdout": "",
      "stderr": "/tmp/tmplg774o3p.d(16): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplg774o3p.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tbool is_first = true;\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tis_first = true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(is_first)\n\t\t\t{\n\t\t\t\tresult ~= toUpper(c);\n\t\t\t\tis_first = false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult ~= toLower(c);\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmp0um4g2sj.d(22): Error: undefined identifier `toUpper`\n/tmp/tmp0um4g2sj.d(27): Error: undefined identifier `toLower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0um4g2sj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tint i = 0;\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(i == 0)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= toUpper(c);\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmp309_2mmj.d(25): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp309_2mmj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tint i = 0;\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(i > 0)\n\t\t{\n\t\t\tresult ~= toUpper(c);\n\t\t\ti = 0;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1666122729,
      "stdout": "",
      "stderr": "/tmp/tmp3nr0c969.d(21): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3nr0c969.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tbool flag = false;\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tflag = true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(flag)\n\t\t\t{\n\t\t\t\tresult ~= toUpper(c);\n\t\t\t\tflag = false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult ~= c;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1666122729,
      "stdout": "",
      "stderr": "/tmp/tmpgdlxjo53.d(22): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgdlxjo53.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1666122728,
      "stdout": "",
      "stderr": "/tmp/tmphnz3gcls.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphnz3gcls.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring camel_word = \"\";\n\t\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tcamel_word ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t\tcamel_word ~= c;\n\t}\n\t\n\treturn camel_word;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1666122729,
      "stdout": "",
      "stderr": "/tmp/tmpu46kcq8k.d(16): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu46kcq8k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif (c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1666122729,
      "stdout": "",
      "stderr": "/tmp/tmpbn2f_jb7.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbn2f_jb7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1666122728,
      "stdout": "",
      "stderr": "/tmp/tmphnz3gcls.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphnz3gcls.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tforeach(i, c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmp0z0pk2ar.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0z0pk2ar.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tforeach(i, c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1666122729,
      "stdout": "",
      "stderr": "/tmp/tmpopb384e9.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpopb384e9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif (c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1666122729,
      "stdout": "",
      "stderr": "/tmp/tmpbn2f_jb7.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbn2f_jb7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1666122729,
      "stdout": "",
      "stderr": "/tmp/tmpf5jfhcdo.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf5jfhcdo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1666122728,
      "stdout": "",
      "stderr": "/tmp/tmphnz3gcls.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphnz3gcls.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmpb6ahl177.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb6ahl177.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tbool is_upper = false;\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tis_upper = true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(is_upper)\n\t\t\t{\n\t\t\t\tresult ~= toUpper(c);\n\t\t\t\tis_upper = false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult ~= c;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmp1hcjiy3o.d(22): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1hcjiy3o.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring camel_word = \"\";\n\tint i = 0;\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(i == 0)\n\t\t{\n\t\t\tcamel_word ~= c;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tcamel_word ~= toUpper(c);\n\t\t}\n\t}\n\treturn camel_word;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1666122729,
      "stdout": "",
      "stderr": "/tmp/tmp7dgq0l51.d(25): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7dgq0l51.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\tint i = 0;\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\ti++;\n\t\t\tresult ~= toupper(word[i]);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1666122729,
      "stdout": "",
      "stderr": "/tmp/tmpuyz25nbb.d(17): Error: undefined identifier `toupper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuyz25nbb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1666122728,
      "stdout": "",
      "stderr": "/tmp/tmphnz3gcls.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphnz3gcls.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[$-1]);\n\t\t\tword = word[0..$-2];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1666122729,
      "stdout": "",
      "stderr": "/tmp/tmps5f5vzev.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps5f5vzev.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(i, c; word) \n\t{\n\t\tif(c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[i + 1]);\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1666122728,
      "stdout": "",
      "stderr": "/tmp/tmpneybrx_8.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpneybrx_8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(immutable c; word) \n\t{\n\t\tif (c == '_') \n\t\t{\n\t\t\tresult ~= toUpper(word[$ - 1]);\n\t\t\tword = word[0 .. $ - 2];\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1666122729,
      "stdout": "",
      "stderr": "/tmp/tmp4z13u086.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4z13u086.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result;\n\tforeach(immutable c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[$-1]);\n\t\t\tword = word[0..$-2];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1666122729,
      "stdout": "",
      "stderr": "/tmp/tmpsiesnlsp.d(15): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsiesnlsp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to convert the given snake case string to camel case string.\n\t\n*/\nstring snake_to_camel(string word) \n{\n\tstring result = \"\";\n\t\n\tforeach(i, c; word)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tresult ~= toUpper(word[i+1]);\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}",
      "timestamp": 1666122729,
      "stdout": "",
      "stderr": "/tmp/tmpz4raysjw.d(16): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz4raysjw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}