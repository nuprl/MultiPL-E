{
  "name": "mbpp_9_find_Rotations",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the minimum number of rotations (greater than 0) required to get the same string.\n\t\n*/\nlong find_Rotations(string str) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_9_find_Rotations.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = find_Rotations;\n\n    assert(candidate(\"aaaa\") == 1L);\n    assert(candidate(\"ab\") == 2L);\n    assert(candidate(\"abc\") == 3L);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tstring temp = str ~ str;\n\tlong n = str.length;\n\tlong[] lps = new long[n];\n\tlps[0] = 0;\n\tlong len = 0;\n\tlong i = 1;\n\twhile (i < n) \n\t{\n\t\tif (temp[i] == temp[len]) \n\t\t{\n\t\t\tlen++;\n\t\t\tlps[i] = len;\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tif (len != 0) \n\t\t\t{\n\t\t\t\tlen = lps[len - 1];\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tlps[i] = 0;\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t}\n\treturn lps[n - 1];\n}",
    "{\n\tlong n = str.length;\n\tlong min_rotations = 0;\n\tlong min_index = 0;\n\tlong min_value = str[0];\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tif (str[i] < min_value) \n\t\t{\n\t\t\tmin_value = str[i];\n\t\t\tmin_index = i;\n\t\t}\n\t}\n\tmin_rotations = min_index;\n\treturn min_rotations;\n}",
    "{\n\tlong n = str.length;\n\tlong count = 0;\n\tlong min = n;\n\tlong index = 0;\n\tlong i = 0;\n\twhile (i < n) \n\t{\n\t\tindex = (i + 1) % n;\n\t\tcount = 1;\n\t\twhile (str[i] != str[index]) \n\t\t{\n\t\t\tindex = (index + 1) % n;\n\t\t\tcount++;\n\t\t}\n\t\tmin = min(min, count);\n\t\ti++;\n\t}\n\treturn min;\n}",
    "{\n\tstring temp = str ~ str;\n\tlong n = str.length;\n\tlong len = temp.length;\n\tlong i = 0;\n\tlong j = 1;\n\tlong k = 0;\n\twhile (i < n && j < n) \n\t{\n\t\tk = 0;\n\t\twhile (k < n && str[(i + k) % n] == str[(j + k) % n]) \n\t\t{\n\t\t\tk++;\n\t\t}\n\t\tif (k == n) \n\t\t{\n\t\t\tbreak;\n\t\t}\n\t\tif (str[(i + k) % n] > str[(j + k) % n]) \n\t\t{\n\t\t\ti = i + k + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tj = j + k + 1;\n\t\t}\n\t\tif (i == j) \n\t\t{\n\t\t\tj++;\n\t\t}\n\t}\n\treturn min(i, j);\n}",
    "{\n\tlong n = str.length;\n\tlong count = 0;\n\tlong min = n;\n\tlong index = 0;\n\tstring temp = str;\n\twhile (count < n) \n\t{\n\t\ttemp = temp[n - 1 .. n - 1] ~ temp[0 .. n - 2];\n\t\tif (temp < str) \n\t\t{\n\t\t\tif (min > count) \n\t\t\t{\n\t\t\t\tmin = count;\n\t\t\t\tindex = n - count;\n\t\t\t}\n\t\t}\n\t\tcount++;\n\t}\n\treturn index;\n}",
    "{\n\tlong n = str.length;\n\tstring concat = str ~ str;\n\tlong i = 1;\n\tlong j = 0;\n\tlong lps[n];\n\tlps[0] = 0;\n\twhile (i < 2 * n) \n\t{\n\t\tif (concat[i] == concat[j]) \n\t\t{\n\t\t\tj++;\n\t\t\tlps[i] = j;\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tif (j != 0) \n\t\t\t{\n\t\t\t\tj = lps[j - 1];\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tlps[i] = 0;\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t}\n\tlong res = lps[n - 1];\n\treturn (res > n / 2) ? n - res : res;\n}",
    "{\n\tlong len = str.length;\n\tlong i = 0;\n\tlong j = 1;\n\tlong k = 0;\n\twhile (i < len && j < len && k < len) \n\t{\n\t\tif (str[(i + k) % len] == str[(j + k) % len]) \n\t\t{\n\t\t\tk++;\n\t\t}\n\t\telse if (str[(i + k) % len] > str[(j + k) % len]) \n\t\t{\n\t\t\ti = i + k + 1;\n\t\t\tif (i <= j) \n\t\t\t{\n\t\t\t\ti = j + 1;\n\t\t\t}\n\t\t\tk = 0;\n\t\t}\n\t\telse if (str[(i + k) % len] < str[(j + k) % len]) \n\t\t{\n\t\t\tj = j + k + 1;\n\t\t\tif (j <= i) \n\t\t\t{\n\t\t\t\tj = i + 1;\n\t\t\t}\n\t\t\tk = 0;\n\t\t}\n\t}\n\treturn min(i, j);\n}",
    "{\n\tstring temp = str;\n\tlong n = str.length;\n\tlong min = n;\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\ttemp = temp[n - 1 .. n] ~ temp[0 .. n - 2];\n\t\tif (temp < str) \n\t\t{\n\t\t\tmin = min(min, i + 1);\n\t\t}\n\t}\n\treturn min;\n}",
    "{\n\tlong len = str.length;\n\tlong i = 0;\n\tlong min_index = 0;\n\tlong min_val = str[0];\n\tlong j = 0;\n\tfor (i = 0; i < len; i++) \n\t{\n\t\tif (str[i] < min_val) \n\t\t{\n\t\t\tmin_val = str[i];\n\t\t\tmin_index = i;\n\t\t}\n\t}\n\treturn min_index;\n}",
    "{\n\tlong n = str.length;\n\tlong i = 0;\n\tlong j = 1;\n\tlong k = 0;\n\twhile(i < n && j < n && k < n) \n\t{\n\t\tif(str[(i + k) % n] == str[(j + k) % n]) \n\t\t{\n\t\t\tk++;\n\t\t}\n\t\telse if(str[(i + k) % n] > str[(j + k) % n]) \n\t\t{\n\t\t\ti = i + k + 1;\n\t\t\tif(i <= j) \n\t\t\t{\n\t\t\t\ti = j + 1;\n\t\t\t}\n\t\t\tk = 0;\n\t\t}\n\t\telse if(str[(i + k) % n] < str[(j + k) % n]) \n\t\t{\n\t\t\tj = j + k + 1;\n\t\t\tif(j <= i) \n\t\t\t{\n\t\t\t\tj = i + 1;\n\t\t\t}\n\t\t\tk = 0;\n\t\t}\n\t}\n\treturn min(i, j);\n}",
    "{\n\tlong n = str.length;\n\tstring concat = str ~ str;\n\tlong min_len = n;\n\tlong min_index = 0;\n\tlong i = 0;\n\tlong j = 1;\n\twhile (i < n && j < n) \n\t{\n\t\tif (concat[i + j] == concat[min_index + j]) \n\t\t{\n\t\t\tj++;\n\t\t\tif (j == n) \n\t\t\t{\n\t\t\t\tmin_index = min(i, min_index);\n\t\t\t\ti++;\n\t\t\t}\n\t\t} \n\t\telse if (concat[i + j] > concat[min_index + j]) \n\t\t{\n\t\t\ti = i + j + 1;\n\t\t\tif (i <= min_index) \n\t\t\t{\n\t\t\t\ti = min_index + 1;\n\t\t\t}\n\t\t\tj = 1;\n\t\t} \n\t\telse if (concat[i + j] < concat[min_index + j]) \n\t\t{\n\t\t\tmin_index = i;\n\t\t\ti = 0;\n\t\t\tj = 1;\n\t\t}\n\t}\n\treturn min_index;\n}",
    "{\n\tlong len = str.length;\n\tstring temp = str ~ str;\n\tlong i = 1;\n\tlong j = 0;\n\tlong k = 0;\n\tlong[] lps = new long[len];\n\twhile (i < 2 * len) \n\t{\n\t\tif (temp[i] == temp[j]) \n\t\t{\n\t\t\tj++;\n\t\t\tlps[i] = j;\n\t\t\ti++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (j != 0) \n\t\t\t{\n\t\t\t\tj = lps[j - 1];\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tlps[i] = 0;\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t}\n\treturn (len - lps[2 * len - 1]);\n}",
    "{\n\tlong n = str.length;\n\tstring concat = str ~ str;\n\tlong i = 1, j = 0;\n\tlong lps[n];\n\tlps[0] = 0;\n\twhile (i < n) \n\t{\n\t\tif (str[i] == str[j]) \n\t\t{\n\t\t\tj++;\n\t\t\tlps[i] = j;\n\t\t\ti++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (j != 0) \n\t\t\t{\n\t\t\t\tj = lps[j - 1];\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tlps[i] = 0;\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t}\n\tlong res = lps[n - 1];\n\treturn (res > 0) ? (n - res) : 0;\n}",
    "{\n\tstring temp = str ~ str;\n\tlong n = str.length;\n\tlong[] lps = new long[n];\n\tlong i = 1, len = 0;\n\tlps[0] = 0;\n\twhile (i < n) \n\t{\n\t\tif (str[i] == str[len]) \n\t\t{\n\t\t\tlen++;\n\t\t\tlps[i] = len;\n\t\t\ti++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (len != 0) \n\t\t\t{\n\t\t\t\tlen = lps[len - 1];\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tlps[i] = 0;\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t}\n\treturn n - lps[n - 1];\n}",
    "{\n\tlong n = str.length;\n\tlong count = 0;\n\tlong min = 0;\n\tlong index = 0;\n\tlong i = 0;\n\tlong j = 0;\n\t\n\tfor (i = 0; i < n; i++) \n\t{\n\t\tj = i;\n\t\tcount = 0;\n\t\twhile (true) \n\t\t{\n\t\t\tj = (j + 1) % n;\n\t\t\tcount++;\n\t\t\tif (str[j] < str[i]) \n\t\t\t{\n\t\t\t\tif (min == 0) \n\t\t\t\t{\n\t\t\t\t\tmin = count;\n\t\t\t\t\tindex = i;\n\t\t\t\t} \n\t\t\t\telse if (min > count) \n\t\t\t\t{\n\t\t\t\t\tmin = count;\n\t\t\t\t\tindex = i;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn index;\n}",
    "{\n\tlong n = str.length;\n\tstring concat = str ~ str;\n\t\n\tlong i = 1, j = 0;\n\tlong lps[$];\n\t\n\twhile (i < n) \n\t{\n\t\tif (concat[i] == concat[j]) \n\t\t{\n\t\t\tlps[i] = j + 1;\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tif (j != 0) \n\t\t\t{\n\t\t\t\tj = lps[j - 1];\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tlps[i] = 0;\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn (n - lps[n - 1]);\n}",
    "{\n\tlong n = str.length;\n\tstring concat = str ~ str;\n\tlong i = 1, j = 0;\n\tlong lps[n];\n\tlps[0] = 0;\n\twhile (i < n) \n\t{\n\t\tif (concat[i] == concat[j]) \n\t\t{\n\t\t\tj++;\n\t\t\tlps[i] = j;\n\t\t\ti++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (j != 0) \n\t\t\t{\n\t\t\t\tj = lps[j - 1];\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tlps[i] = 0;\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t}\n\treturn (n - lps[n - 1]);\n}",
    "{\n\tlong n = str.length;\n\tstring temp = str ~ str;\n\tlong i = 1, j = 0;\n\twhile (i < n) \n\t{\n\t\tif (temp[i] < temp[j]) \n\t\t{\n\t\t\tj = 0;\n\t\t} \n\t\telse if (temp[i] > temp[j]) \n\t\t{\n\t\t\tj = i;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tj++;\n\t\t}\n\t\ti++;\n\t}\n\treturn j;\n}",
    "{\n\tlong len = str.length;\n\tlong i = 0;\n\tlong j = 1;\n\tlong k = 0;\n\twhile (i < len && j < len && k < len) \n\t{\n\t\tif (str[(i + k) % len] == str[(j + k) % len]) \n\t\t{\n\t\t\tk++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (str[(i + k) % len] > str[(j + k) % len]) \n\t\t\t{\n\t\t\t\ti = i + k + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tj = j + k + 1;\n\t\t\t}\n\t\t\tif (i == j) \n\t\t\t{\n\t\t\t\tj++;\n\t\t\t}\n\t\t\tk = 0;\n\t\t}\n\t}\n\treturn min(i, j);\n}",
    "{\n\tlong n = str.length;\n\tlong i, j, k;\n\tlong min = n;\n\tfor (i = 0; i < n; i++) \n\t{\n\t\tj = i;\n\t\tk = 0;\n\t\twhile (k < n && str[j] == str[k]) \n\t\t{\n\t\t\tj = (j + 1) % n;\n\t\t\tk++;\n\t\t}\n\t\tif (k < min)\n\t\t\tmin = k;\n\t}\n\treturn min;\n}",
    "{\n\tlong len = str.length;\n\tlong i = 0;\n\tlong j = 1;\n\tlong k = 0;\n\twhile (i < len && j < len && k < len) \n\t{\n\t\tif (str[(i + k) % len] == str[(j + k) % len]) \n\t\t{\n\t\t\tk++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (str[(i + k) % len] > str[(j + k) % len]) \n\t\t\t{\n\t\t\t\ti = i + k + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tj = j + k + 1;\n\t\t\t}\n\t\t\tif (i == j) \n\t\t\t{\n\t\t\t\tj++;\n\t\t\t}\n\t\t\tk = 0;\n\t\t}\n\t}\n\treturn min(i, j);\n}",
    "{\n\tlong n = str.length;\n\tlong count = 0;\n\tstring temp = str ~ str;\n\tforeach(i; 0 .. n)\n\t{\n\t\tif(temp[i..i+n-1] == str)\n\t\t{\n\t\t\tcount = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tstring temp = str + str;\n\tlong n = str.length;\n\tlong i = 1;\n\tlong j = 0;\n\tlong k = 0;\n\tlong[] lps = new long[n];\n\tlps[0] = 0;\n\twhile (i < n) \n\t{\n\t\tif (str[i] == str[j]) \n\t\t{\n\t\t\tj++;\n\t\t\tlps[i] = j;\n\t\t\ti++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (j != 0) \n\t\t\t{\n\t\t\t\tj = lps[j - 1];\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tlps[i] = 0;\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t}\n\ti = 0;\n\tj = 0;\n\twhile (i < 2 * n) \n\t{\n\t\tif (temp[i] == str[j]) \n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t\tif (j == n) \n\t\t\t{\n\t\t\t\tk = i - j;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (j != 0) \n\t\t\t{\n\t\t\t\tj = lps[j - 1];\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t}\n\treturn k;\n}",
    "{\n\tlong n = str.length;\n\tstring concat = str ~ str;\n\tlong min_length = n;\n\tlong min_index = 0;\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tlong length = 0;\n\t\tfor (long j = i, k = 0; j < i + n; j++, k++) \n\t\t{\n\t\t\tif (concat[j] != str[k]) \n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tlength++;\n\t\t}\n\t\tif (min_length > length) \n\t\t{\n\t\t\tmin_length = length;\n\t\t\tmin_index = i;\n\t\t}\n\t}\n\treturn min_index;\n}",
    "{\n\tlong n = str.length;\n\tlong min_rotations = 0;\n\tlong min_index = 0;\n\tlong min_value = str[0];\n\t\n\tforeach(i; 1..n)\n\t{\n\t\tif(str[i] < min_value)\n\t\t{\n\t\t\tmin_value = str[i];\n\t\t\tmin_index = i;\n\t\t}\n\t}\n\t\n\tmin_rotations = min_index;\n\t\n\treturn min_rotations;\n}",
    "{\n\tlong n = str.length;\n\tstring temp = str ~ str;\n\tlong[] lps = new long[2 * n];\n\tlps[0] = 0;\n\tlong len = 0;\n\tlong i = 1;\n\twhile (i < 2 * n) \n\t{\n\t\tif (temp[i] == temp[len]) \n\t\t{\n\t\t\tlen++;\n\t\t\tlps[i] = len;\n\t\t\ti++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (len != 0) \n\t\t\t{\n\t\t\t\tlen = lps[len - 1];\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tlps[i] = 0;\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t}\n\tlong res = lps[n - 1];\n\tif (res > 0 && n % (n - res) == 0) \n\t{\n\t\treturn n - res;\n\t}\n\treturn n;\n}",
    "{\n\tlong n = str.length;\n\tlong count = 0;\n\tlong min = n;\n\tlong index = 0;\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tif (str[i] == '1') \n\t\t{\n\t\t\tcount = 0;\n\t\t\tfor (long j = i; j < n; j++) \n\t\t\t{\n\t\t\t\tif (str[j] == '1') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (long j = 0; j < i; j++) \n\t\t\t{\n\t\t\t\tif (str[j] == '1') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (count < min) \n\t\t\t{\n\t\t\t\tmin = count;\n\t\t\t\tindex = i;\n\t\t\t}\n\t\t}\n\t}\n\treturn index;\n}",
    "{\n\tlong n = str.length;\n\tstring temp = str ~ str;\n\tlong i = 1, j = 0;\n\tlong lps[$];\n\tlps[0] = 0;\n\twhile (i < 2 * n) \n\t{\n\t\tif (temp[i] == temp[j]) \n\t\t{\n\t\t\tj++;\n\t\t\tlps[i] = j;\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tif (j != 0) \n\t\t\t{\n\t\t\t\tj = lps[j - 1];\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tlps[i] = 0;\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t}\n\tlong res = lps[n - 1];\n\tif (res > 0 && n % (n - res) == 0) \n\t{\n\t\treturn n - res;\n\t}\n\treturn n;\n}",
    "{\n\tlong n = str.length;\n\tlong count = 0;\n\tlong min = n;\n\tlong index = 0;\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong temp = 0;\n\tlong min_index = 0;\n\t\n\tfor(i = 0; i < n; i++) \n\t{\n\t\tj = i;\n\t\tk = 0;\n\t\tcount = 0;\n\t\twhile(k < n) \n\t\t{\n\t\t\tif(str[j] != str[k]) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tj = (j + 1) % n;\n\t\t\tk++;\n\t\t}\n\t\tif(count < min) \n\t\t{\n\t\t\tmin = count;\n\t\t\tmin_index = i;\n\t\t}\n\t}\n\treturn min_index;\n}",
    "{\n\tstring temp = str ~ str;\n\tlong n = str.length;\n\tlong[] lps = new long[n];\n\tlong len = 0, i = 1;\n\tlps[0] = 0;\n\twhile (i < n) \n\t{\n\t\tif (temp[i] == temp[len]) \n\t\t{\n\t\t\tlen++;\n\t\t\tlps[i] = len;\n\t\t\ti++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (len != 0) \n\t\t\t{\n\t\t\t\tlen = lps[len - 1];\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tlps[i] = 0;\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t}\n\treturn n - lps[n - 1];\n}",
    "{\n\tlong n = str.length;\n\tlong count = 0;\n\tlong min_count = n;\n\tlong index = 0;\n\tlong i = 0;\n\tlong j = 0;\n\t\n\twhile(i < n) \n\t{\n\t\tif(str[i] == str[0]) \n\t\t{\n\t\t\tcount = 0;\n\t\t\tj = i;\n\t\t\twhile(j < n) \n\t\t\t{\n\t\t\t\tif(str[j] != str[index]) \n\t\t\t\t{\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcount++;\n\t\t\t\tindex = (index + 1) % n;\n\t\t\t\tj++;\n\t\t\t}\n\t\t\tif(count < min_count) \n\t\t\t{\n\t\t\t\tmin_count = count;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn min_count;\n}",
    "{\n\tstring temp = str + str;\n\tlong n = str.length;\n\tlong min_rotation = n;\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tif (temp[i..i + n - 1] < temp[min_rotation..min_rotation + n - 1]) \n\t\t{\n\t\t\tmin_rotation = i;\n\t\t}\n\t}\n\treturn min_rotation;\n}",
    "{\n\tlong n = str.length;\n\tlong count = 0;\n\tlong min = n;\n\tlong index = 0;\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong l = 0;\n\t\n\tfor (i = 0; i < n; i++) \n\t{\n\t\tif (str[i] == '1') \n\t\t{\n\t\t\tindex = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tfor (j = index; j < n; j++) \n\t{\n\t\tif (str[j] == '0') \n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\t\n\tmin = count;\n\t\n\tfor (k = index + 1; k < n; k++) \n\t{\n\t\tif (str[k - 1] == '1') \n\t\t{\n\t\t\tcount--;\n\t\t}\n\t\tif (str[k] == '0') \n\t\t{\n\t\t\tcount++;\n\t\t}\n\t\tif (count < min) \n\t\t{\n\t\t\tmin = count;\n\t\t}\n\t}\n\t\n\treturn min;\n}",
    "{\n\tlong n = str.length;\n\tlong i = 0;\n\tlong j = 1;\n\tlong k = 0;\n\twhile (i < n && j < n && k < n) \n\t{\n\t\tif (str[(i + k) % n] == str[(j + k) % n]) \n\t\t{\n\t\t\tk++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (str[(i + k) % n] > str[(j + k) % n]) \n\t\t\t{\n\t\t\t\ti = i + k + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tj = j + k + 1;\n\t\t\t}\n\t\t\tif (i == j) \n\t\t\t{\n\t\t\t\tj++;\n\t\t\t}\n\t\t\tk = 0;\n\t\t}\n\t}\n\treturn min(i, j);\n}",
    "{\n\tlong n = str.length;\n\tlong min_rotations = n;\n\tstring str_copy = str;\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tstr_copy = str_copy[n - 1 .. n] ~ str_copy[0 .. n - 2];\n\t\tif (str_copy < str) \n\t\t{\n\t\t\tmin_rotations = min(min_rotations, i + 1);\n\t\t}\n\t}\n\treturn min_rotations;\n}",
    "{\n\tlong n = str.length;\n\tlong count = 0;\n\tlong min = n;\n\tlong index = 0;\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tif (str[i] == '1') \n\t\t{\n\t\t\tcount = 0;\n\t\t\tfor (long j = i; j < n; j++) \n\t\t\t{\n\t\t\t\tif (str[j] == '1') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (long j = 0; j < i; j++) \n\t\t\t{\n\t\t\t\tif (str[j] == '1') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (count < min) \n\t\t\t{\n\t\t\t\tmin = count;\n\t\t\t\tindex = i;\n\t\t\t}\n\t\t}\n\t}\n\treturn index;\n}",
    "{\n\tlong n = str.length;\n\tlong count = 0;\n\tlong min = n;\n\tlong index = 0;\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tif (str[i] == '1') \n\t\t{\n\t\t\tcount = 0;\n\t\t\tfor (long j = i; j < n; j++) \n\t\t\t{\n\t\t\t\tif (str[j] == '1') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (long j = 0; j < i; j++) \n\t\t\t{\n\t\t\t\tif (str[j] == '1') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (count < min) \n\t\t\t{\n\t\t\t\tmin = count;\n\t\t\t\tindex = i;\n\t\t\t}\n\t\t}\n\t}\n\treturn index;\n}",
    "{\n\tlong len = str.length;\n\tstring temp = str ~ str;\n\tlong i = 1;\n\tlong j = 0;\n\tlong k = 0;\n\tlong[] lps = new long[len];\n\twhile(i < 2*len) \n\t{\n\t\tif(temp[i] == temp[j]) \n\t\t{\n\t\t\tlps[i] = j + 1;\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tif(j != 0) \n\t\t\t{\n\t\t\t\tj = lps[j - 1];\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tlps[i] = 0;\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t}\n\treturn len - lps[2*len - 1];\n}",
    "{\n\tlong n = str.length;\n\tstring temp = str ~ str;\n\tlong[] lps = new long[2 * n];\n\tlps[0] = 0;\n\tlong len = 0;\n\tlong i = 1;\n\twhile (i < 2 * n) \n\t{\n\t\tif (temp[i] == temp[len]) \n\t\t{\n\t\t\tlen++;\n\t\t\tlps[i] = len;\n\t\t\ti++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (len != 0) \n\t\t\t{\n\t\t\t\tlen = lps[len - 1];\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tlps[i] = 0;\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t}\n\tlong res = lps[n - 1];\n\treturn (n - res) % n;\n}",
    "{\n\tlong n = str.length;\n\tstring temp = str ~ str;\n\tlong[] lps = new long[2 * n];\n\tlps[0] = 0;\n\tlong len = 0;\n\tlong i = 1;\n\twhile (i < 2 * n) \n\t{\n\t\tif (temp[i] == temp[len]) \n\t\t{\n\t\t\tlen++;\n\t\t\tlps[i] = len;\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tif (len != 0) \n\t\t\t{\n\t\t\t\tlen = lps[len - 1];\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tlps[i] = 0;\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t}\n\tlong res = lps[n - 1];\n\treturn (res > n / 2) ? n - res : n;\n}",
    "{\n\tlong len = str.length;\n\tlong min = 0;\n\tlong min_index = 0;\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong temp = 0;\n\tlong index = 0;\n\tlong min_rotations = 0;\n\tlong count = 0;\n\tlong min_count = 0;\n\tlong temp_count = 0;\n\tlong min_index_count = 0;\n\tlong temp_index = 0;\n\t\n\tfor(i = 0; i < len; i++)\n\t{\n\t\tmin = str[i];\n\t\tmin_index = i;\n\t\t\n\t\tfor(j = i + 1; j < len; j++)\n\t\t{\n\t\t\tif(min > str[j])\n\t\t\t{\n\t\t\t\tmin = str[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(min_index != i)\n\t\t{\n\t\t\ttemp = str[i];\n\t\t\tstr[i] = str[min_index];\n\t\t\tstr[min_index] = temp;\n\t\t}\n\t}\n\t\n\tfor(i = 0; i < len; i++)\n\t{\n\t\tif(str[i] == str[0])\n\t\t{\n\t\t\tcount++;\n\t\t\tindex = i;\n\t\t}\n\t}\n\t\n\tif(count == len)\n\t{\n\t\treturn 0;\n\t}\n\t\n\tmin_count = count;\n\tmin_index_count = index;\n\t\n\tfor(i = 1; i < len; i++)\n\t{\n\t\ttemp_count = 0;\n\t\ttemp_index = 0;\n\t\t\n\t\tfor(j = i; j < len; j++)\n\t\t{\n\t\t\tif(str[j] == str[i])\n\t\t\t{\n\t\t\t\ttemp_count++;\n\t\t\t\ttemp_index = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(temp_count < min_count",
    "{\n\tlong len = str.length;\n\tstring temp = str ~ str;\n\tlong min_index = 0;\n\tlong min_len = len;\n\tlong i = 1;\n\twhile (i < len) \n\t{\n\t\tif (temp[i..i + len - 1] < temp[min_index..min_index + len - 1]) \n\t\t{\n\t\t\tmin_index = i;\n\t\t}\n\t\ti++;\n\t}\n\treturn min_index;\n}",
    "{\n\tlong n = str.length;\n\tstring concat = str + str;\n\tlong i = 1, j = 0;\n\tlong lps[n];\n\tlps[0] = 0;\n\twhile (i < 2*n) \n\t{\n\t\tif (concat[i] == concat[j]) \n\t\t{\n\t\t\tj++;\n\t\t\tlps[i] = j;\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tif (j != 0) \n\t\t\t{\n\t\t\t\tj = lps[j - 1];\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tlps[i] = 0;\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t}\n\treturn (n - lps[n - 1]);\n}",
    "{ \n\tstring temp = str + str; \n\tlong n = str.length; \n\tlong res = n; \n\tlong i = 0, j = 1; \n\twhile (i < n && j < n) \n\t{ \n\t\tlong k = 0; \n\t\twhile (k < n && temp[i + k] == temp[j + k]) \n\t\t\tk++; \n\t\tif (k == n) \n\t\t\tbreak; \n\t\tif (temp[i + k] > temp[j + k]) \n\t\t{ \n\t\t\ti = i + k + 1; \n\t\t\tif (i <= j) \n\t\t\t\ti = j + 1; \n\t\t} \n\t\telse\n\t\t{ \n\t\t\tj = j + k + 1; \n\t\t\tif (j <= i) \n\t\t\t\tj = i + 1; \n\t\t} \n\t\tif (i == j) \n\t\t\tj++; \n\t\tres = min(res, min(i, j)); \n\t} \n\treturn res; \n} ",
    "{\n\tlong n = str.length;\n\tstring concat = str ~ str;\n\tlong i = 1, j = 0;\n\tlong lps[$];\n\tlps[0] = 0;\n\twhile (i < 2 * n) \n\t{\n\t\tif (concat[i] == concat[j]) \n\t\t{\n\t\t\tj++;\n\t\t\tlps[i] = j;\n\t\t\ti++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (j != 0) \n\t\t\t{\n\t\t\t\tj = lps[j - 1];\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tlps[i] = 0;\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t}\n\tlong res = lps[n - 1];\n\tif (res > 0 && n % (n - res) == 0) \n\t{\n\t\treturn n - res;\n\t}\n\treturn n;\n}",
    "{\n\tlong n = str.length;\n\tlong min_rotations = n;\n\tlong i = 0;\n\tlong j = 1;\n\twhile (j < n) \n\t{\n\t\ti = 0;\n\t\twhile (i < n) \n\t\t{\n\t\t\tif (str[(i + min_rotations) % n] != str[(j + i) % n])\n\t\t\t\tbreak;\n\t\t\ti++;\n\t\t}\n\t\tif (i == n)\n\t\t\treturn min_rotations;\n\t\tif (j < i)\n\t\t\tj = i;\n\t\telse\n\t\t{\n\t\t\tmin_rotations = min(min_rotations, j - i + n);\n\t\t\tj += i + 1;\n\t\t}\n\t}\n\treturn min_rotations;\n}",
    "{\n\tlong len = str.length;\n\tlong i = 0;\n\tlong j = 1;\n\tlong k = 0;\n\twhile (i < len && j < len && k < len) \n\t{\n\t\tif (str[i + k] == str[j + k]) \n\t\t{\n\t\t\tk++;\n\t\t\tif (k == len) \n\t\t\t{\n\t\t\t\treturn i;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (str[i + k] > str[j + k]) \n\t\t\t{\n\t\t\t\ti = i + k + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tj = j + k + 1;\n\t\t\t}\n\t\t\tif (i == j) \n\t\t\t{\n\t\t\t\tj++;\n\t\t\t}\n\t\t\tk = 0;\n\t\t}\n\t}\n\treturn i;\n}",
    "{\n\tlong n = str.length;\n\tlong count = 0;\n\tlong min = n;\n\tlong index = 0;\n\tlong i = 0;\n\tlong j = 0;\n\t\n\twhile(i < n)\n\t{\n\t\tj = 0;\n\t\tcount = 0;\n\t\tindex = i;\n\t\twhile(j < n)\n\t\t{\n\t\t\tif(str[index] != str[j])\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tindex = (index + 1) % n;\n\t\t\tj++;\n\t\t}\n\t\tmin = min(min, count);\n\t\ti++;\n\t}\n\treturn min;\n}",
    "{\n\tlong n = str.length;\n\tlong count = 0;\n\tlong min = n;\n\tlong index = 0;\n\tlong i = 0;\n\twhile(i < n) \n\t{\n\t\tif(str[i] == 'a') \n\t\t{\n\t\t\tcount = 0;\n\t\t\tindex = i;\n\t\t\twhile(str[index] == 'a') \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t\tindex = (index + 1) % n;\n\t\t\t}\n\t\t\tmin = min(min, count);\n\t\t\ti = index;\n\t\t}\n\t\telse \n\t\t{\n\t\t\ti++;\n\t\t}\n\t}\n\treturn min;\n}",
    "{\n\tlong n = str.length;\n\tlong count = 0;\n\tlong min = n;\n\tlong i = 0;\n\tlong index = -1;\n\twhile(i < n)\n\t{\n\t\tif(str[i] == '1')\n\t\t{\n\t\t\tindex = i;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif(index == -1)\n\t\treturn 0;\n\ti = index;\n\twhile(i < n)\n\t{\n\t\tif(str[i] == '1')\n\t\t\tcount++;\n\t\telse\n\t\t\tbreak;\n\t\ti++;\n\t}\n\tmin = min(min, n - count);\n\ti = 0;\n\twhile(i < index)\n\t{\n\t\tif(str[i] == '1')\n\t\t\tcount++;\n\t\telse\n\t\t\tbreak;\n\t\ti++;\n\t}\n\tmin = min(min, n - count);\n\treturn min;\n}",
    "{\n\tlong n = str.length;\n\tlong count = 0;\n\tlong min = n;\n\tlong index = 0;\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong temp = 0;\n\tlong temp2 = 0;\n\tlong temp3 = 0;\n\tlong temp4 = 0;\n\tlong temp5 = 0;\n\tlong temp6 = 0;\n\tlong temp7 = 0;\n\tlong temp8 = 0;\n\tlong temp9 = 0;\n\tlong temp10 = 0;\n\tlong temp11 = 0;\n\tlong temp12 = 0;\n\tlong temp13 = 0;\n\tlong temp14 = 0;\n\tlong temp15 = 0;\n\tlong temp16 = 0;\n\tlong temp17 = 0;\n\tlong temp18 = 0;\n\tlong temp19 = 0;\n\tlong temp20 = 0;\n\tlong temp21 = 0;\n\tlong temp22 = 0;\n\tlong temp23 = 0;\n\tlong temp24 = 0;\n\tlong temp25 = 0;\n\tlong temp26 = 0;\n\tlong temp27 = 0;\n\tlong temp28 = 0;\n\tlong temp29 = 0;\n\tlong temp30 = 0;\n\tlong temp31 = 0;\n\tlong temp32 = 0;\n\tlong temp33 = 0;\n\tlong temp34 = 0;\n\tlong temp35 = 0;\n\tlong temp36 = 0;\n\tlong temp37 = 0;\n\tlong temp38 = 0;\n\tlong temp39 = 0;\n\tlong temp40 = 0;\n\tlong temp41 = 0;\n\tlong temp42 = 0;\n\tlong temp43 = 0;\n\tlong temp44 = 0;\n\tlong temp45 = 0;\n\tlong temp46 = 0;\n\tlong temp47 = 0;\n\tlong temp48 = 0;\n\tlong temp49 = 0;\n\tlong temp50 = 0;\n\tlong temp51 = 0;\n\tlong temp52 = 0;\n\tlong temp53 = 0;\n\tlong temp54 = 0;\n\tlong temp55 = 0;\n\tlong temp56 = 0;\n\tlong temp57 = 0;\n\tlong temp",
    "{\n\tlong n = str.length;\n\tlong min_rotations = n;\n\tlong i = 0;\n\tlong j = 1;\n\tlong count = 0;\n\twhile (count < n) \n\t{\n\t\ti = 0;\n\t\tj = j % n;\n\t\twhile (i < n) \n\t\t{\n\t\t\tif (str[i] != str[j])\n\t\t\t\tbreak;\n\t\t\ti++;\n\t\t\tj = (j + 1) % n;\n\t\t}\n\t\tif (i == n)\n\t\t\treturn min_rotations;\n\t\tif (j < min_rotations)\n\t\t\tmin_rotations = j;\n\t\tcount++;\n\t\tj++;\n\t}\n\treturn min_rotations;\n}",
    "{\n\tlong n = str.length;\n\tstring concat = str ~ str;\n\tlong i = 1;\n\tlong j = 0;\n\tlong[] lps = new long[n];\n\tlps[0] = 0;\n\twhile (i < n) \n\t{\n\t\tif (concat[i] == concat[j]) \n\t\t{\n\t\t\tj++;\n\t\t\tlps[i] = j;\n\t\t\ti++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (j != 0) \n\t\t\t{\n\t\t\t\tj = lps[j - 1];\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tlps[i] = 0;\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t}\n\treturn lps[n - 1];\n}",
    "{\n\tlong n = str.length;\n\tstring concat = str ~ str;\n\tlong i = 1;\n\tlong j = 0;\n\tlong[] lps = new long[n];\n\tlps[0] = 0;\n\twhile (i < n) \n\t{\n\t\tif (concat[i] == concat[j]) \n\t\t{\n\t\t\tj++;\n\t\t\tlps[i] = j;\n\t\t\ti++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (j != 0) \n\t\t\t{\n\t\t\t\tj = lps[j - 1];\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tlps[i] = 0;\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t}\n\treturn lps[n - 1];\n}",
    "{\n\tlong n = str.length;\n\tstring concat = str + str;\n\tlong i = 0;\n\tlong j = 1;\n\tlong k = 0;\n\twhile (i < n && j < n) \n\t{\n\t\tk = 0;\n\t\twhile (k < n && concat[i + k] == concat[j + k]) \n\t\t{\n\t\t\tk++;\n\t\t}\n\t\tif (k == n) \n\t\t{\n\t\t\tbreak;\n\t\t}\n\t\tif (concat[i + k] > concat[j + k]) \n\t\t{\n\t\t\ti = i + k + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tj = j + k + 1;\n\t\t}\n\t\tif (i == j) \n\t\t{\n\t\t\tj++;\n\t\t}\n\t}\n\treturn min(i, j);\n}",
    "{\n\tlong n = str.length;\n\tstring concat = str ~ str;\n\tlong i = 1, j = 0;\n\tlong lps[$];\n\tlps[0] = 0;\n\twhile(i < 2*n) \n\t{\n\t\tif(concat[i] == concat[j]) \n\t\t{\n\t\t\tj++;\n\t\t\tlps[i] = j;\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tif(j != 0) \n\t\t\t{\n\t\t\t\tj = lps[j-1];\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tlps[i] = 0;\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t}\n\tlong res = lps[n-1];\n\tif(res > 0 && n%(n-res) == 0) \n\t{\n\t\treturn n-res;\n\t}\n\treturn n;\n}",
    "{\n\tlong len = str.length;\n\tlong i = 0;\n\tlong j = 1;\n\tlong k = 0;\n\twhile (i < len && j < len && k < len) \n\t{\n\t\tif (str[(i + k) % len] == str[(j + k) % len]) \n\t\t{\n\t\t\tk++;\n\t\t} \n\t\telse if (str[(i + k) % len] > str[(j + k) % len]) \n\t\t{\n\t\t\ti = i + k + 1;\n\t\t\tif (i <= j) \n\t\t\t{\n\t\t\t\ti = j + 1;\n\t\t\t}\n\t\t\tk = 0;\n\t\t} \n\t\telse if (str[(i + k) % len] < str[(j + k) % len]) \n\t\t{\n\t\t\tj = j + k + 1;\n\t\t\tif (j <= i) \n\t\t\t{\n\t\t\t\tj = i + 1;\n\t\t\t}\n\t\t\tk = 0;\n\t\t}\n\t}\n\treturn min(i, j);\n}",
    "{\n\tstring temp = str ~ str;\n\tlong n = str.length;\n\tlong[] lps = new long[n];\n\tlong i = 1;\n\tlong j = 0;\n\t\n\twhile(i < n)\n\t{\n\t\tif(temp[i] == temp[j])\n\t\t{\n\t\t\tlps[i] = j + 1;\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(j != 0)\n\t\t\t{\n\t\t\t\tj = lps[j - 1];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tlps[i] = 0;\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn n - lps[n - 1];\n}",
    "{\n\tlong len = str.length;\n\tlong i = 0;\n\tlong j = 1;\n\tlong k = 0;\n\twhile (i < len && j < len && k < len) \n\t{\n\t\tif (str[(i + k) % len] == str[(j + k) % len]) \n\t\t{\n\t\t\tk++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (str[(i + k) % len] > str[(j + k) % len]) \n\t\t\t{\n\t\t\t\ti = i + k + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tj = j + k + 1;\n\t\t\t}\n\t\t\tif (i == j) \n\t\t\t{\n\t\t\t\tj++;\n\t\t\t}\n\t\t\tk = 0;\n\t\t}\n\t}\n\treturn min(i, j);\n}",
    "{\n\tlong n = str.length;\n\tstring temp = str ~ str;\n\tlong min_index = 0;\n\tlong min_length = n;\n\tlong i = 0;\n\twhile (i < n) \n\t{\n\t\tlong j = i + 1;\n\t\tlong len = 0;\n\t\twhile (j < 2 * n && temp[i] <= temp[j]) \n\t\t{\n\t\t\tif (temp[i] < temp[j])\n\t\t\t\ti = j;\n\t\t\tj++;\n\t\t\tlen++;\n\t\t}\n\t\tif (len < min_length) \n\t\t{\n\t\t\tmin_length = len;\n\t\t\tmin_index = i;\n\t\t}\n\t\ti++;\n\t}\n\treturn min_index;\n}",
    "{\n\tlong n = str.length;\n\tlong count = 0;\n\tlong min = n;\n\tlong index = 0;\n\tlong i = 0;\n\twhile(i < n) \n\t{\n\t\tif(str[i] == '1') \n\t\t{\n\t\t\tcount = 0;\n\t\t\tfor(long j = 0; j < n; j++) \n\t\t\t{\n\t\t\t\tif(str[(i + j) % n] != str[j]) \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(count < min) \n\t\t\t{\n\t\t\t\tmin = count;\n\t\t\t\tindex = i;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn index;\n}",
    "{\n\tlong len = str.length;\n\tlong i = 0;\n\tlong j = 1;\n\tlong k = 0;\n\twhile (i < len && j < len && k < len) \n\t{\n\t\tif (str[(i + k) % len] == str[(j + k) % len]) \n\t\t{\n\t\t\tk++;\n\t\t} \n\t\telse if (str[(i + k) % len] > str[(j + k) % len]) \n\t\t{\n\t\t\ti = i + k + 1;\n\t\t\tif (i <= j) \n\t\t\t{\n\t\t\t\ti = j + 1;\n\t\t\t}\n\t\t\tk = 0;\n\t\t} \n\t\telse if (str[(i + k) % len] < str[(j + k) % len]) \n\t\t{\n\t\t\tj = j + k + 1;\n\t\t\tif (j <= i) \n\t\t\t{\n\t\t\t\tj = i + 1;\n\t\t\t}\n\t\t\tk = 0;\n\t\t}\n\t}\n\treturn min(i, j);\n}",
    "{\n\tlong n = str.length;\n\tlong count = 0;\n\tlong min = n;\n\tlong index = 0;\n\tlong i = 0;\n\t\n\twhile(i < n)\n\t{\n\t\tif(str[i] == '1')\n\t\t{\n\t\t\tcount = 0;\n\t\t\tfor(long j = 0; j < n; j++)\n\t\t\t{\n\t\t\t\tif(str[(i + j) % n] != str[j])\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(count < min)\n\t\t\t{\n\t\t\t\tmin = count;\n\t\t\t\tindex = i;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn index;\n}",
    "{\n\tlong n = str.length;\n\tlong count = 0;\n\tlong min = n;\n\tlong index = 0;\n\tlong i = 0;\n\twhile (i < n) \n\t{\n\t\tif (str[i] == 'a') \n\t\t{\n\t\t\tcount = 0;\n\t\t\tfor (long j = 0; j < n; j++) \n\t\t\t{\n\t\t\t\tif (str[(i + j) % n] != 'a') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (count < min) \n\t\t\t{\n\t\t\t\tmin = count;\n\t\t\t\tindex = i;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn index;\n}",
    "{\n\tlong n = str.length;\n\tlong min_rotations = n;\n\tlong i = 0;\n\tlong j = 1;\n\twhile (j < n) \n\t{\n\t\tif (str[i] == str[j]) \n\t\t{\n\t\t\t++i;\n\t\t\t++j;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tmin_rotations = min(min_rotations, j - i);\n\t\t\ti = 0;\n\t\t\tj = 1;\n\t\t}\n\t}\n\treturn min_rotations;\n}",
    "{\n\tstring temp = str ~ str;\n\tlong len = str.length;\n\tlong i = 1;\n\tlong j = 0;\n\tlong n = 2 * len;\n\tint lps[n];\n\tlps[0] = 0;\n\twhile (i < n) {\n\t\tif (temp[i] == temp[j]) {\n\t\t\tlps[i] = j + 1;\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse {\n\t\t\tif (j != 0) {\n\t\t\t\tj = lps[j - 1];\n\t\t\t}\n\t\t\telse {\n\t\t\t\tlps[i] = 0;\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t}\n\treturn (len - lps[n - 1]);\n}",
    "{\n\tlong n = str.length;\n\tstring str1 = str ~ str;\n\tlong min = n;\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tlong j = 0;\n\t\tfor (; j < n; j++) \n\t\t{\n\t\t\tif (str1[i + j] != str[j]) \n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (j == n) \n\t\t{\n\t\t\tmin = min(min, i);\n\t\t}\n\t}\n\treturn min;\n}",
    "{\n\tlong len = str.length;\n\tlong i = 0;\n\tlong j = 1;\n\tlong k = 0;\n\twhile (i < len && j < len && k < len) \n\t{\n\t\tif (str[(i + k) % len] == str[(j + k) % len]) \n\t\t{\n\t\t\tk++;\n\t\t} \n\t\telse if (str[(i + k) % len] > str[(j + k) % len]) \n\t\t{\n\t\t\ti = i + k + 1;\n\t\t\tif (i <= j) \n\t\t\t{\n\t\t\t\ti = j + 1;\n\t\t\t}\n\t\t\tk = 0;\n\t\t} \n\t\telse if (str[(i + k) % len] < str[(j + k) % len]) \n\t\t{\n\t\t\tj = j + k + 1;\n\t\t\tif (j <= i) \n\t\t\t{\n\t\t\t\tj = i + 1;\n\t\t\t}\n\t\t\tk = 0;\n\t\t}\n\t}\n\treturn min(i, j);\n}",
    "{\n\tlong n = str.length;\n\tstring concat = str ~ str;\n\tlong i = 1, j = 0;\n\tlong lps[$];\n\tlps[0] = 0;\n\twhile (i < 2 * n) \n\t{\n\t\tif (concat[i] == concat[j]) \n\t\t{\n\t\t\tlps[i] = j + 1;\n\t\t\ti++;\n\t\t\tj++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (j != 0) \n\t\t\t{\n\t\t\t\tj = lps[j - 1];\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tlps[i] = 0;\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t}\n\tlong res = n - lps[n - 1];\n\tif (res == n) \n\t{\n\t\treturn 0;\n\t}\n\treturn res;\n}",
    "{\n\tlong n = str.length;\n\tstring concat = str ~ str;\n\tlong i = 1, j = 0;\n\tlong lps[$];\n\tlps[0] = 0;\n\twhile (i < 2 * n) \n\t{\n\t\tif (concat[i] == concat[j]) \n\t\t{\n\t\t\tj++;\n\t\t\tlps[i] = j;\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tif (j != 0) \n\t\t\t{\n\t\t\t\tj = lps[j - 1];\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tlps[i] = 0;\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t}\n\tlong res = lps[n - 1];\n\tif (res > 0 && n % (n - res) == 0) \n\t{\n\t\treturn (n - res);\n\t}\n\treturn n;\n}",
    "{\n\tstring temp = str ~ str;\n\tlong n = str.length;\n\tlong[] lps = new long[n];\n\tlong i = 1, len = 0;\n\twhile (i < n) \n\t{\n\t\tif (temp[i] == temp[len]) \n\t\t{\n\t\t\tlen++;\n\t\t\tlps[i] = len;\n\t\t\ti++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (len != 0) \n\t\t\t{\n\t\t\t\tlen = lps[len - 1];\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tlps[i] = 0;\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t}\n\treturn n - lps[n - 1];\n}",
    "{\n\tlong len = str.length;\n\tstring concat = str ~ str;\n\tlong min_len = len;\n\tlong i = 0;\n\twhile(i < len) \n\t{\n\t\tstring sub = concat[i .. i + len - 1];\n\t\tif(sub < str) \n\t\t{\n\t\t\tmin_len = i;\n\t\t}\n\t\ti++;\n\t}\n\treturn min_len;\n}",
    "{\n\tlong len = str.length;\n\tlong i = 0;\n\tlong j = 1;\n\tlong k = 0;\n\twhile (i < len && j < len && k < len) \n\t{\n\t\tif (str[(i + k) % len] == str[(j + k) % len]) \n\t\t{\n\t\t\tk++;\n\t\t} \n\t\telse if (str[(i + k) % len] > str[(j + k) % len]) \n\t\t{\n\t\t\ti = i + k + 1;\n\t\t\tif (i <= j) \n\t\t\t{\n\t\t\t\ti = j + 1;\n\t\t\t}\n\t\t\tk = 0;\n\t\t} \n\t\telse if (str[(i + k) % len] < str[(j + k) % len]) \n\t\t{\n\t\t\tj = j + k + 1;\n\t\t\tif (j <= i) \n\t\t\t{\n\t\t\t\tj = i + 1;\n\t\t\t}\n\t\t\tk = 0;\n\t\t}\n\t}\n\treturn min(i, j);\n}",
    "{\n\tlong i, j, len, min_len;\n\tstring temp;\n\tlen = str.length;\n\tmin_len = len;\n\tfor (i = 0; i < len; i++) \n\t{\n\t\ttemp = str[i .. len] ~ str[0 .. i];\n\t\tif (temp < min_len) \n\t\t{\n\t\t\tmin_len = temp;\n\t\t\tj = i;\n\t\t}\n\t}\n\treturn j;\n}",
    "{\n\tlong n = str.length;\n\tlong count = 0;\n\tstring concat = str ~ str;\n\tlong i = 1;\n\tlong j = 0;\n\tlong lps[n];\n\tlps[0] = 0;\n\twhile (i < 2 * n) \n\t{\n\t\tif (concat[i] == concat[j]) \n\t\t{\n\t\t\tcount++;\n\t\t\tlps[i] = count;\n\t\t\ti++;\n\t\t\tj++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (count != 0) \n\t\t\t{\n\t\t\t\tcount = lps[count - 1];\n\t\t\t\tj = count;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tlps[i] = 0;\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t}\n\tlong res = n - lps[n - 1];\n\treturn res;\n}",
    "{\n\tlong n = str.length;\n\tlong min = 0;\n\tlong min_index = -1;\n\tlong i = 0;\n\twhile (i < n) \n\t{\n\t\tif (min_index == -1) \n\t\t{\n\t\t\tmin_index = i;\n\t\t}\n\t\telse if (str[i] < str[min_index]) \n\t\t{\n\t\t\tmin_index = i;\n\t\t}\n\t\ti++;\n\t}\n\treturn min_index;\n}",
    "{\n\tlong n = str.length;\n\tlong i = 0;\n\tlong j = 1;\n\tlong k = 0;\n\twhile (i < n && j < n && k < n) \n\t{\n\t\tif (str[(i + k) % n] == str[(j + k) % n]) \n\t\t{\n\t\t\tk++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (str[(i + k) % n] > str[(j + k) % n]) \n\t\t\t{\n\t\t\t\ti = i + k + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tj = j + k + 1;\n\t\t\t}\n\t\t\tif (i == j) \n\t\t\t{\n\t\t\t\tj++;\n\t\t\t}\n\t\t\tk = 0;\n\t\t}\n\t}\n\treturn min(i, j);\n}",
    "{\n\tlong len = str.length;\n\tlong i = 0;\n\tlong j = 1;\n\tlong k = 0;\n\twhile (i < len && j < len && k < len) \n\t{\n\t\tif (str[(i + k) % len] == str[(j + k) % len]) \n\t\t{\n\t\t\tk++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (str[(i + k) % len] > str[(j + k) % len]) \n\t\t\t{\n\t\t\t\ti = i + k + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tj = j + k + 1;\n\t\t\t}\n\t\t\tif (i == j) \n\t\t\t{\n\t\t\t\tj++;\n\t\t\t}\n\t\t\tk = 0;\n\t\t}\n\t}\n\treturn min(i, j);\n}",
    "{\n\tlong len = str.length;\n\tlong i = 0;\n\tlong min_rotations = 0;\n\tlong min_index = 0;\n\tlong min_val = str[0];\n\twhile(i < len)\n\t{\n\t\tif(str[i] < min_val)\n\t\t{\n\t\t\tmin_val = str[i];\n\t\t\tmin_index = i;\n\t\t}\n\t\ti++;\n\t}\n\tmin_rotations = min_index;\n\treturn min_rotations;\n}",
    "{\n\tlong n = str.length;\n\tlong count = 0;\n\tlong min = n;\n\tlong index = 0;\n\tlong i = 0;\n\tlong j = 0;\n\t\n\tfor(i = 0; i < n; i++)\n\t{\n\t\tif(str[i] == '1')\n\t\t{\n\t\t\tcount = 0;\n\t\t\tfor(j = i; j < n; j++)\n\t\t\t{\n\t\t\t\tif(str[j] == '1')\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif(min > count)\n\t\t\t{\n\t\t\t\tmin = count;\n\t\t\t\tindex = i;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn index;\n}",
    "{\n\tlong n = str.length;\n\tlong count = 0;\n\tlong min = n;\n\tlong index = 0;\n\tlong i = 0;\n\twhile (i < n) \n\t{\n\t\tif (str[i] == '1') \n\t\t{\n\t\t\tcount = 0;\n\t\t\twhile (str[i] != '0' && i < n) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t\ti++;\n\t\t\t}\n\t\t\tif (count < min) \n\t\t\t{\n\t\t\t\tmin = count;\n\t\t\t\tindex = i - count;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn index;\n}",
    "{\n\tlong n = str.length;\n\tlong count = 0;\n\tlong min = n;\n\tlong index = 0;\n\tlong i = 0;\n\twhile(i < n) \n\t{\n\t\tif(str[i] == 'a') \n\t\t{\n\t\t\tcount = 0;\n\t\t\tindex = i;\n\t\t\twhile(str[index] == 'a' && index < n) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t\tindex++;\n\t\t\t}\n\t\t\tif(count < min) \n\t\t\t{\n\t\t\t\tmin = count;\n\t\t\t}\n\t\t\ti = index;\n\t\t}\n\t\telse \n\t\t{\n\t\t\ti++;\n\t\t}\n\t}\n\treturn min;\n}",
    "{\n\tlong n = str.length;\n\tlong min_rotations = n;\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tstring str1 = str[i .. n-1] ~ str[0 .. i-1];\n\t\tif (str1 < str) \n\t\t{\n\t\t\tmin_rotations = min(min_rotations, i);\n\t\t}\n\t}\n\treturn min_rotations;\n}",
    "{\n\tlong n = str.length;\n\tstring concat = str ~ str;\n\tlong i = 1, j = 0;\n\tlong lps[$];\n\tlps[0] = 0;\n\twhile(i < 2 * n) \n\t{\n\t\tif(concat[i] == concat[j]) \n\t\t{\n\t\t\tj++;\n\t\t\tlps[i] = j;\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tif(j != 0) \n\t\t\t{\n\t\t\t\tj = lps[j - 1];\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tlps[i] = 0;\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t}\n\tlong res = lps[n - 1];\n\tif(res > 0 && n % (n - res) == 0) \n\t{\n\t\treturn n - res;\n\t}\n\treturn n;\n}",
    "{\n\tstring temp = str ~ str;\n\tlong len = str.length;\n\tlong i = 1;\n\tlong j = 0;\n\tlong k = 0;\n\twhile(i < len) \n\t{\n\t\tj = i;\n\t\tk = 0;\n\t\twhile(j < len && k < len && str[k] == temp[j]) \n\t\t{\n\t\t\tj++;\n\t\t\tk++;\n\t\t}\n\t\tif(k == len) \n\t\t{\n\t\t\treturn i;\n\t\t}\n\t\ti++;\n\t}\n\treturn 0;\n}",
    "{\n\tlong n = str.length;\n\tstring concat = str ~ str;\n\tlong i = 1, j = 0;\n\tlong lps[$];\n\tlps[0] = 0;\n\twhile (i < 2 * n) \n\t{\n\t\tif (concat[i] == concat[j]) \n\t\t{\n\t\t\tlps[i] = j + 1;\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tif (j != 0) \n\t\t\t{\n\t\t\t\tj = lps[j - 1];\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tlps[i] = 0;\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t}\n\tlong res = lps[n - 1];\n\tif (res > 0 && n % (n - res) == 0) \n\t{\n\t\treturn n - res;\n\t}\n\treturn n;\n}",
    "{\n\tlong n = str.length;\n\tlong count = 0;\n\tlong min = 0;\n\tlong i = 0;\n\tlong j = 1;\n\t\n\twhile (i < n && j < n) \n\t{\n\t\tif (str[i] == str[j]) \n\t\t{\n\t\t\tj++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tif (count > 0) \n\t\t\t{\n\t\t\t\tcount--;\n\t\t\t\ti++;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tj++;\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tmin = i;\n\t\n\tif (min > 0) \n\t{\n\t\treturn min;\n\t}\n\t\n\treturn 0;\n}",
    "{\n\tlong len = str.length;\n\tlong min_rotations = len;\n\tlong i = 0;\n\tlong j = 1;\n\twhile(i < len && j < len) \n\t{\n\t\tif(str[i] == str[j]) \n\t\t{\n\t\t\t++j;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tmin_rotations = min(min_rotations, j - i);\n\t\t\ti = j;\n\t\t\t++j;\n\t\t}\n\t}\n\treturn min_rotations;\n}",
    "{\n\tlong n = str.length;\n\tstring concat = str ~ str;\n\tlong i = 0;\n\tlong j = 1;\n\tlong k = 0;\n\twhile (i < n && j < n) \n\t{\n\t\tk = 0;\n\t\twhile (k < n && concat[i + k] == concat[j + k]) \n\t\t{\n\t\t\tk++;\n\t\t}\n\t\tif (k == n) \n\t\t{\n\t\t\tbreak;\n\t\t}\n\t\tif (concat[i + k] > concat[j + k]) \n\t\t{\n\t\t\ti = i + k + 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tj = j + k + 1;\n\t\t}\n\t\tif (i == j) \n\t\t{\n\t\t\tj++;\n\t\t}\n\t}\n\treturn min(i, j);\n}",
    "{\n\tlong n = str.length;\n\tstring concat = str ~ str;\n\tlong min_length = n;\n\tlong min_index = 0;\n\tfor (long i = 1; i < n; i++) \n\t{\n\t\tstring temp = concat[i .. i + n - 1];\n\t\tif (temp < str) \n\t\t{\n\t\t\tif (temp.length < min_length) \n\t\t\t{\n\t\t\t\tmin_length = temp.length;\n\t\t\t\tmin_index = i;\n\t\t\t}\n\t\t}\n\t}\n\treturn min_index;\n}",
    "{\n\tlong n = str.length;\n\tlong count = 0;\n\tlong min = n;\n\tlong index = 0;\n\tlong i = 0;\n\twhile(i < n) \n\t{\n\t\tif(str[i] == 'a') \n\t\t{\n\t\t\tcount = 0;\n\t\t\tindex = i;\n\t\t\twhile(str[index] == 'a') \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t\tindex++;\n\t\t\t}\n\t\t\tmin = min(min, count);\n\t\t\ti = index;\n\t\t}\n\t\telse \n\t\t{\n\t\t\ti++;\n\t\t}\n\t}\n\treturn min;\n}",
    "{\n\tlong len = str.length;\n\tstring temp = str ~ str;\n\tlong i = 1;\n\tlong j = 0;\n\tlong k = 0;\n\twhile (i < len) \n\t{\n\t\tj = i;\n\t\tk = 0;\n\t\twhile (j < i + len) \n\t\t{\n\t\t\tif (temp[j] != str[k])\n\t\t\t\tbreak;\n\t\t\tj++;\n\t\t\tk++;\n\t\t}\n\t\tif (j == i + len)\n\t\t\treturn i;\n\t\ti++;\n\t}\n\treturn 0;\n}",
    "{\n\tstring temp = str ~ str;\n\tlong len = str.length;\n\tlong i = 0;\n\tlong j = 1;\n\tlong k = 0;\n\twhile (i < len && j < len && k < len) \n\t{\n\t\tif (temp[i + k] == temp[j + k]) \n\t\t{\n\t\t\tk++;\n\t\t\tif (k == len) \n\t\t\t{\n\t\t\t\treturn i;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (temp[i + k] > temp[j + k]) \n\t\t\t{\n\t\t\t\ti = i + k + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tj = j + k + 1;\n\t\t\t}\n\t\t\tif (i == j) \n\t\t\t{\n\t\t\t\tj++;\n\t\t\t}\n\t\t\tk = 0;\n\t\t}\n\t}\n\treturn i;\n}",
    "{\n\tlong i = 0;\n\tlong j = 1;\n\tlong k = 0;\n\tlong n = str.length;\n\twhile (i < n && j < n && k < n) \n\t{\n\t\tif (str[(i + k) % n] == str[(j + k) % n]) \n\t\t{\n\t\t\tk++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tif (str[(i + k) % n] > str[(j + k) % n]) \n\t\t\t{\n\t\t\t\ti = i + k + 1;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tj = j + k + 1;\n\t\t\t}\n\t\t\tif (i == j) \n\t\t\t{\n\t\t\t\tj++;\n\t\t\t}\n\t\t\tk = 0;\n\t\t}\n\t}\n\treturn min(i, j);\n}",
    "{\n\tlong len = str.length;\n\tstring temp = str ~ str;\n\tlong min_index = 0;\n\tlong min_len = len;\n\tlong i = 0;\n\twhile (i < len) \n\t{\n\t\tlong j = i + 1;\n\t\tlong k = 0;\n\t\twhile (j < 2 * len && temp[i + k] == temp[j + k]) \n\t\t{\n\t\t\tk++;\n\t\t}\n\t\tif (k < min_len) \n\t\t{\n\t\t\tmin_len = k;\n\t\t\tmin_index = i;\n\t\t}\n\t\ti += max(1, k);\n\t}\n\treturn min_index;\n}",
    "{\n\tlong len = str.length;\n\tstring temp = str ~ str;\n\tlong min_index = 0;\n\tlong min_length = len;\n\tlong index = 0;\n\tlong length = 0;\n\tforeach(i; 0 .. len) \n\t{\n\t\tindex = temp.find(str[i..$]);\n\t\tlength = len - index;\n\t\tif(length < min_length) \n\t\t{\n\t\t\tmin_length = length;\n\t\t\tmin_index = i;\n\t\t}\n\t}\n\treturn min_index;\n}",
    "{\n\tlong n = str.length;\n\tlong count = 0;\n\tlong min = n;\n\tlong index = 0;\n\tlong i = 0;\n\twhile(i < n) \n\t{\n\t\tif(str[i] == 'a') \n\t\t{\n\t\t\tcount = 0;\n\t\t\tindex = i;\n\t\t\twhile(str[index] == 'a') \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t\tindex++;\n\t\t\t\tif(index == n) \n\t\t\t\t{\n\t\t\t\t\tindex = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t\tmin = min(min, count);\n\t\t}\n\t\ti++;\n\t}\n\treturn min;\n}",
    "{ \n\tlong n = str.length; \n\tstring concat = str ~ str; \n\tlong min = 0; \n\tlong i = 0; \n\tlong j = 1; \n\twhile (i < n && j < n) \n\t{ \n\t\tlong k = 0; \n\t\twhile (k < n && str[i + k] == str[j + k]) \n\t\t\tk++; \n\t\tif (k == n) \n\t\t\tbreak; \n\t\tif (str[i + k] > str[j + k]) \n\t\t{ \n\t\t\ti = i + k + 1; \n\t\t\tif (i <= j) \n\t\t\t\ti = j + 1; \n\t\t} \n\t\telse\n\t\t{ \n\t\t\tj = j + k + 1; \n\t\t\tif (j <= i) \n\t\t\t\tj = i + 1; \n\t\t} \n\t} \n\tmin = min(i, j); \n\treturn min; \n} ",
    "{\n\tlong n = str.length;\n\tlong i = 0;\n\tlong j = 1;\n\tlong k = 0;\n\twhile (i < n && j < n && k < n) \n\t{\n\t\tif (str[(i + k) % n] == str[(j + k) % n]) \n\t\t{\n\t\t\tk++;\n\t\t}\n\t\telse if (str[(i + k) % n] > str[(j + k) % n]) \n\t\t{\n\t\t\ti = i + k + 1;\n\t\t\tif (i <= j) \n\t\t\t{\n\t\t\t\ti = j + 1;\n\t\t\t}\n\t\t\tk = 0;\n\t\t}\n\t\telse if (str[(i + k) % n] < str[(j + k) % n]) \n\t\t{\n\t\t\tj = j + k + 1;\n\t\t\tif (j <= i) \n\t\t\t{\n\t\t\t\tj = i + 1;\n\t\t\t}\n\t\t\tk = 0;\n\t\t}\n\t}\n\treturn min(i, j);\n}",
    "{\n\tlong len = str.length;\n\tlong i = 0;\n\tlong j = 1;\n\tlong k = 0;\n\twhile (i < len && j < len && k < len) \n\t{\n\t\tif (str[(i + k) % len] == str[(j + k) % len]) \n\t\t{\n\t\t\tk++;\n\t\t} \n\t\telse if (str[(i + k) % len] > str[(j + k) % len]) \n\t\t{\n\t\t\ti = i + k + 1;\n\t\t\tif (i <= j) \n\t\t\t{\n\t\t\t\ti = j + 1;\n\t\t\t}\n\t\t\tk = 0;\n\t\t} \n\t\telse if (str[(i + k) % len] < str[(j + k) % len]) \n\t\t{\n\t\t\tj = j + k + 1;\n\t\t\tif (j <= i) \n\t\t\t{\n\t\t\t\tj = i + 1;\n\t\t\t}\n\t\t\tk = 0;\n\t\t}\n\t}\n\treturn min(i, j);\n}",
    "{ \n    long n = str.length; \n    string concat = str ~ str; \n    long i = 0, j = 1; \n    long count = 0; \n    while (i < n && j < n) \n    { \n        count++; \n        if (concat[i + j] == concat[j]) \n        { \n            j++; \n        } \n        else if (concat[i + j] > concat[j]) \n        { \n            i = i + j - 1; \n            j = 1; \n        } \n        else \n        { \n            i = 0; \n            j = j + 1; \n        } \n    } \n    return count; \n} ",
    "{\n\tstring temp = str ~ str;\n\tlong n = str.length;\n\tlong[] lps = new long[n];\n\tlong i = 1, len = 0;\n\tlps[0] = 0;\n\twhile (i < n) \n\t{\n\t\tif (temp[i] == temp[len]) \n\t\t{\n\t\t\tlen++;\n\t\t\tlps[i] = len;\n\t\t\ti++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (len != 0) \n\t\t\t{\n\t\t\t\tlen = lps[len - 1];\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tlps[i] = 0;\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t}\n\treturn n - lps[n - 1];\n}",
    "{\n\tlong n = str.length;\n\tlong i = 0;\n\tlong j = 1;\n\tlong k = 0;\n\twhile (i < n && j < n && k < n) \n\t{\n\t\tif (str[i + k] == str[j + k]) \n\t\t{\n\t\t\tk++;\n\t\t\tif (k == n) \n\t\t\t{\n\t\t\t\treturn i;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (str[i + k] > str[j + k]) \n\t\t\t{\n\t\t\t\ti = i + k + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tj = j + k + 1;\n\t\t\t}\n\t\t\tif (i == j) \n\t\t\t{\n\t\t\t\tj++;\n\t\t\t}\n\t\t\tk = 0;\n\t\t}\n\t}\n\treturn i;\n}",
    "{\n\tlong n = str.length;\n\tlong count = 0;\n\tlong min = 0;\n\tlong index = 0;\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong temp = 0;\n\tlong min_index = 0;\n\tlong min_count = 0;\n\t\n\tfor (i = 0; i < n; i++) \n\t{\n\t\tcount = 0;\n\t\tindex = i;\n\t\tj = i;\n\t\tk = 0;\n\t\twhile (k < n) \n\t\t{\n\t\t\tif (str[j] != str[k]) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tj++;\n\t\t\tk++;\n\t\t\tif (j == n) \n\t\t\t{\n\t\t\t\tj = 0;\n\t\t\t}\n\t\t}\n\t\tif (count < min || i == 0) \n\t\t{\n\t\t\tmin = count;\n\t\t\tmin_index = index;\n\t\t}\n\t}\n\treturn min_index;\n}",
    "{\n\tlong i, j, len, min_rotations = 0;\n\tlen = str.length;\n\tfor (i = 0; i < len; i++) \n\t{\n\t\tif (str[i] < str[min_rotations]) \n\t\t{\n\t\t\tmin_rotations = i;\n\t\t}\n\t}\n\treturn min_rotations;\n}",
    "{\n\tlong n = str.length;\n\tlong count = 0;\n\tlong min = n;\n\tlong index = 0;\n\tlong i = 0;\n\twhile (i < n) \n\t{\n\t\tif (str[i] == 'a') \n\t\t{\n\t\t\tcount = 0;\n\t\t\tindex = i;\n\t\t\twhile (str[index] == 'a') \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t\tindex = (index + 1) % n;\n\t\t\t}\n\t\t\tmin = min(min, count);\n\t\t\ti = index;\n\t\t}\n\t\telse \n\t\t{\n\t\t\ti++;\n\t\t}\n\t}\n\treturn min;\n}",
    "{\n\tlong len = str.length;\n\tstring concat = str ~ str;\n\tlong min_index = 0;\n\tlong min_length = len;\n\tlong i = 0;\n\twhile (i < len) \n\t{\n\t\tlong j = i + 1;\n\t\tlong k = i;\n\t\twhile (j < len && concat[k] <= concat[j]) \n\t\t{\n\t\t\tif (concat[k] < concat[j])\n\t\t\t\tk = i;\n\t\t\telse\n\t\t\t\tk++;\n\t\t\tj++;\n\t\t}\n\t\tif (k == i && j - k < min_length) \n\t\t{\n\t\t\tmin_index = k;\n\t\t\tmin_length = j - k;\n\t\t}\n\t\ti = max(k + 1, j - 1);\n\t}\n\treturn min_index;\n}",
    "{\n\tlong n = str.length;\n\tlong count = 0;\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tif (str[i] != str[0]) \n\t\t{\n\t\t\tbreak;\n\t\t}\n\t\tcount++;\n\t}\n\tif (count == n) \n\t{\n\t\treturn 0;\n\t}\n\tlong min = n;\n\tlong j = 0;\n\tfor (long i = count; i < n; i++) \n\t{\n\t\tif (str[i] == str[j]) \n\t\t{\n\t\t\tj++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tj = 0;\n\t\t}\n\t\tmin = min(min, j + n - i - 1);\n\t}\n\treturn min;\n}",
    "{\n\tstring temp = str + str;\n\tlong n = str.length;\n\tlong i = 0, j = 1, k = 0;\n\twhile (i < n && j < n && k < n) \n\t{\n\t\tif (temp[i + k] == temp[j + k]) \n\t\t{\n\t\t\tk++;\n\t\t\tcontinue;\n\t\t}\n\t\telse if (temp[i + k] > temp[j + k]) \n\t\t{\n\t\t\tj = j + k + 1;\n\t\t\tif (j == i) \n\t\t\t{\n\t\t\t\tj++;\n\t\t\t}\n\t\t\tk = 0;\n\t\t}\n\t\telse if (temp[i + k] < temp[j + k]) \n\t\t{\n\t\t\ti = max(i + k + 1, j);\n\t\t\tj = i + 1;\n\t\t\tk = 0;\n\t\t}\n\t}\n\treturn min(i, j);\n}",
    "{\n\tlong n = str.length;\n\tstring concat = str ~ str;\n\tlong i = 1;\n\tlong j = 0;\n\tlong lps[n];\n\tlps[0] = 0;\n\twhile (i < 2 * n) \n\t{\n\t\tif (concat[i] == concat[j]) \n\t\t{\n\t\t\tj++;\n\t\t\tlps[i] = j;\n\t\t\ti++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (j != 0) \n\t\t\t{\n\t\t\t\tj = lps[j - 1];\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tlps[i] = 0;\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t}\n\tlong res = lps[n - 1];\n\treturn (res > n / 2) ? -1 : res;\n}",
    "{\n\tlong len = str.length;\n\tstring concat = str ~ str;\n\tlong i = 1;\n\tlong j = 0;\n\tlong arr[len];\n\tarr[0] = 0;\n\twhile(i < len) \n\t{\n\t\tif(concat[i] == concat[j]) \n\t\t{\n\t\t\tarr[i] = j + 1;\n\t\t\ti++;\n\t\t\tj++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif(j != 0) \n\t\t\t{\n\t\t\t\tj = arr[j-1];\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tarr[i] = 0;\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[len-1];\n}",
    "{\n\tlong n = str.length;\n\tlong count = 0;\n\t\n\t// Check if the string is a palindrome\n\tif (str == str.dup.reverse)\n\t\treturn 0;\n\t\n\t// Find the first character that is different from the last character\n\tlong i = 0;\n\tfor (; i < n; i++)\n\t{\n\t\tif (str[i] != str[n - 1])\n\t\t\tbreak;\n\t}\n\t\n\t// Check if the string is a rotation of a palindrome\n\tif (str[i..$] == str[i..$].dup.reverse)\n\t\treturn n - i;\n\t\n\t// Check if the string is a rotation of a palindrome\n\tif (str[0..$-i] == str[0..$-i].dup.reverse)\n\t\treturn i;\n\t\n\treturn -1;\n}",
    "{\n\tstring temp = str + str;\n\tlong n = str.length;\n\tlong i = 1;\n\tlong j = 0;\n\tlong k = 0;\n\tlong[] lps = new long[n];\n\t\n\twhile (i < 2 * n) \n\t{\n\t\tif (temp[i] == temp[j]) \n\t\t{\n\t\t\tj++;\n\t\t\tlps[i] = j;\n\t\t\ti++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (j != 0) \n\t\t\t{\n\t\t\t\tj = lps[j - 1];\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tlps[i] = 0;\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t}\n\treturn (n - lps[n - 1]);\n}",
    "{\n\tlong n = str.length;\n\tlong min_rotations = n;\n\tlong index = 0;\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong l = 0;\n\tlong m = 0;\n\tlong p = 0;\n\tlong q = 0;\n\tlong r = 0;\n\tlong s = 0;\n\tlong t = 0;\n\tlong u = 0;\n\tlong v = 0;\n\tlong w = 0;\n\tlong x = 0;\n\tlong y = 0;\n\tlong z = 0;\n\tlong a = 0;\n\tlong b = 0;\n\tlong c = 0;\n\tlong d = 0;\n\tlong e = 0;\n\tlong f = 0;\n\tlong g = 0;\n\tlong h = 0;\n\tlong ii = 0;\n\tlong jj = 0;\n\tlong kk = 0;\n\tlong ll = 0;\n\tlong mm = 0;\n\tlong pp = 0;\n\tlong qq = 0;\n\tlong rr = 0;\n\tlong ss = 0;\n\tlong tt = 0;\n\tlong uu = 0;\n\tlong vv = 0;\n\tlong ww = 0;\n\tlong xx = 0;\n\tlong yy = 0;\n\tlong zz = 0;\n\tlong aa = 0;\n\tlong bb = 0;\n\tlong cc = 0;\n\tlong dd = 0;\n\tlong ee = 0;\n\tlong ff = 0;\n\tlong gg = 0;\n\tlong hh = 0;\n\tlong iii = 0;\n\tlong jjj = 0;\n\tlong kkk = 0;\n\tlong lll = 0;\n\tlong mmm = 0;\n\tlong ppp = 0;\n\tlong qqq = 0;\n\tlong rrr = 0;\n\tlong sss = 0;\n\tlong ttt = 0;\n\tlong uuu = 0;\n\tlong vvv = 0;\n\tlong www = 0;\n\tlong xxx = 0;\n\tlong yyy = 0;\n\tlong zzz = 0;\n\tlong aaaa = 0",
    "{ \n\tlong n = str.length; \n\tlong i = 0; \n\tlong j = 1; \n\tlong count = 0; \n\twhile (i < n && j < n) \n\t{ \n\t\tif (str[i] == str[j]) \n\t\t{ \n\t\t\tj++; \n\t\t\tcount++; \n\t\t} \n\t\telse\n\t\t{ \n\t\t\tif (count > 0) \n\t\t\t{ \n\t\t\t\tcount = 0; \n\t\t\t\ti++; \n\t\t\t} \n\t\t\telse\n\t\t\t{ \n\t\t\t\ti = j; \n\t\t\t\tj++; \n\t\t\t} \n\t\t} \n\t} \n\treturn i; \n} ",
    "{\n\tlong n = str.length;\n\tstring temp = str ~ str;\n\tlong[] lps = new long[2 * n];\n\tlps[0] = 0;\n\tlong len = 0;\n\tlong i = 1;\n\twhile (i < 2 * n) \n\t{\n\t\tif (temp[i] == temp[len]) \n\t\t{\n\t\t\tlen++;\n\t\t\tlps[i] = len;\n\t\t\ti++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (len != 0) \n\t\t\t{\n\t\t\t\tlen = lps[len - 1];\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tlps[i] = 0;\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t}\n\tlong res = lps[n - 1];\n\treturn (n - res);\n}",
    "{\n\tlong n = str.length;\n\tstring concat = str ~ str;\n\tlong min_length = n;\n\tlong i = 0;\n\tlong j = 1;\n\twhile(i < n && j < n) \n\t{\n\t\tif(concat[i + j] == concat[j + i]) \n\t\t{\n\t\t\tj++;\n\t\t}\n\t\telse if(concat[i + j] > concat[j + i]) \n\t\t{\n\t\t\ti = i + j + 1;\n\t\t\tj = 1;\n\t\t}\n\t\telse if(concat[i + j] < concat[j + i]) \n\t\t{\n\t\t\tj = j + i + 1;\n\t\t\ti = 0;\n\t\t}\n\t\tif(i == j) \n\t\t{\n\t\t\tj++;\n\t\t}\n\t}\n\treturn min(i, j);\n}",
    "{\n\tlong n = str.length;\n\tlong count = 0;\n\tlong min = n;\n\tlong index = 0;\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong[] arr = new long[n];\n\t\n\tfor (i = 0; i < n; i++)\n\t{\n\t\tarr[i] = str[i];\n\t}\n\t\n\tfor (i = 0; i < n; i++)\n\t{\n\t\tj = i;\n\t\tk = 0;\n\t\tcount = 0;\n\t\twhile (k < n)\n\t\t{\n\t\t\tif (arr[j] != str[k])\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tj = (j + 1) % n;\n\t\t\tk++;\n\t\t}\n\t\tif (count < min)\n\t\t{\n\t\t\tmin = count;\n\t\t\tindex = i;\n\t\t}\n\t}\n\treturn index;\n}",
    "{\n\tlong n = str.length;\n\tlong count = 0;\n\tlong min = n;\n\tstring arr = str ~ str;\n\tlong i = 0;\n\tlong j = 1;\n\twhile (i < n && j < n) \n\t{\n\t\tif (arr[i] == arr[j]) \n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t} \n\t\telse if (arr[i] > arr[j]) \n\t\t{\n\t\t\tj++;\n\t\t\tcount = j - i;\n\t\t\tif (count < min) \n\t\t\t{\n\t\t\t\tmin = count;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\ti++;\n\t\t\tcount = j - i;\n\t\t\tif (count < min) \n\t\t\t{\n\t\t\t\tmin = count;\n\t\t\t}\n\t\t}\n\t}\n\treturn min;\n}",
    "{\n\tlong n = str.length;\n\tstring temp = str ~ str;\n\tlong i = 1, j = 0;\n\twhile (i < n && j < n) \n\t{\n\t\tif (temp[i + j] == temp[j]) \n\t\t{\n\t\t\tj++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\ti++;\n\t\t}\n\t}\n\treturn i;\n}",
    "{\n\tlong n = str.length;\n\tstring concat = str ~ str;\n\tlong i = 1, j = 0;\n\tlong lps[n];\n\tlps[0] = 0;\n\twhile (i < 2 * n) \n\t{\n\t\tif (concat[i] == concat[j]) \n\t\t{\n\t\t\tj++;\n\t\t\tlps[i] = j;\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tif (j != 0) \n\t\t\t{\n\t\t\t\tj = lps[j - 1];\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tlps[i] = 0;\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t}\n\tlong res = lps[n - 1];\n\tif (res > 0 && n % (n - res) == 0) \n\t{\n\t\treturn n - res;\n\t}\n\treturn n;\n}",
    "{\n\tlong n = str.length;\n\tlong count = 0;\n\tlong min = n;\n\tstring concat = str ~ str;\n\tforeach(i; 0 .. n)\n\t{\n\t\tcount = 0;\n\t\tforeach(j; 0 .. n)\n\t\t{\n\t\t\tif(concat[i + j] != str[j])\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tmin = min(min, count);\n\t}\n\treturn min;\n}",
    "{\n\tlong n = str.length;\n\tstring temp = str ~ str;\n\tlong i = 1, j = 0;\n\tlong lps[n];\n\tlps[0] = 0;\n\twhile (i < 2 * n) \n\t{\n\t\tif (temp[i] == temp[j]) \n\t\t{\n\t\t\tj++;\n\t\t\tlps[i] = j;\n\t\t\ti++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (j != 0) \n\t\t\t{\n\t\t\t\tj = lps[j - 1];\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tlps[i] = 0;\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t}\n\treturn (n - lps[n - 1]);\n}",
    "{\n\tlong n = str.length;\n\tstring temp = str ~ str;\n\tlong[] lps = new long[2 * n];\n\tlps[0] = 0;\n\tlong len = 0;\n\tlong i = 1;\n\twhile (i < 2 * n) \n\t{\n\t\tif (temp[i] == temp[len]) \n\t\t{\n\t\t\tlen++;\n\t\t\tlps[i] = len;\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tif (len != 0) \n\t\t\t{\n\t\t\t\tlen = lps[len - 1];\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tlps[i] = 0;\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t}\n\tlong res = lps[n - 1];\n\tif (res > 0 && n % (n - res) == 0) \n\t{\n\t\treturn (n - res);\n\t}\n\treturn n;\n}",
    "{\n\tlong n = str.length;\n\tlong count = 0;\n\tlong min = n;\n\tlong index = 0;\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tif (str[i] == '1') \n\t\t{\n\t\t\tcount = 0;\n\t\t\tfor (long j = i; j < n; j++) \n\t\t\t{\n\t\t\t\tif (str[j] == '1') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (long j = 0; j < i; j++) \n\t\t\t{\n\t\t\t\tif (str[j] == '1') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (count < min) \n\t\t\t{\n\t\t\t\tmin = count;\n\t\t\t\tindex = i;\n\t\t\t}\n\t\t}\n\t}\n\treturn index;\n}",
    "{\n\tlong n = str.length;\n\tlong count = 0;\n\tlong min = n;\n\tlong index = 0;\n\tlong i = 0;\n\tlong j = 0;\n\twhile (i < n) \n\t{\n\t\tif (str[i] == 'a') \n\t\t{\n\t\t\tcount = 0;\n\t\t\tj = i;\n\t\t\twhile (j < n) \n\t\t\t{\n\t\t\t\tif (str[j] == 'a') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t\tj++;\n\t\t\t}\n\t\t\tif (count < min) \n\t\t\t{\n\t\t\t\tmin = count;\n\t\t\t\tindex = i;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn index;\n}",
    "{\n\tlong len = str.length;\n\tlong i = 0;\n\tlong j = 1;\n\tlong k = 0;\n\twhile (i < len && j < len && k < len) \n\t{\n\t\tif (str[(i + k) % len] == str[(j + k) % len]) \n\t\t{\n\t\t\tk++;\n\t\t}\n\t\telse if (str[(i + k) % len] > str[(j + k) % len]) \n\t\t{\n\t\t\ti = i + k + 1;\n\t\t\tif (i <= j) \n\t\t\t{\n\t\t\t\ti = j + 1;\n\t\t\t}\n\t\t\tk = 0;\n\t\t}\n\t\telse if (str[(i + k) % len] < str[(j + k) % len]) \n\t\t{\n\t\t\tj = j + k + 1;\n\t\t\tif (j <= i) \n\t\t\t{\n\t\t\t\tj = i + 1;\n\t\t\t}\n\t\t\tk = 0;\n\t\t}\n\t}\n\treturn min(i, j);\n}",
    "{\n\tlong n = str.length;\n\tstring concat = str ~ str;\n\tlong i = 0;\n\tlong j = 1;\n\tlong k = 0;\n\twhile (i < n && j < n) \n\t{\n\t\tk = 0;\n\t\twhile (k < n && concat[i + k] == concat[j + k])\n\t\t\tk++;\n\t\tif (k == n)\n\t\t\tbreak;\n\t\tif (concat[i + k] > concat[j + k])\n\t\t\ti = i + k + 1;\n\t\telse\n\t\t\tj = j + k + 1;\n\t\tif (i == j)\n\t\t\tj++;\n\t}\n\treturn min(i, j);\n}",
    "{\n\tstring temp = str ~ str;\n\tlong n = str.length;\n\tlong[] lps = new long[n];\n\tlong i = 1, j = 0;\n\twhile (i < n) \n\t{\n\t\tif (temp[i] == temp[j]) \n\t\t{\n\t\t\tlps[i] = j + 1;\n\t\t\ti++;\n\t\t\tj++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (j != 0) \n\t\t\t{\n\t\t\t\tj = lps[j - 1];\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tlps[i] = 0;\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t}\n\treturn n - lps[n - 1];\n}",
    "{\n\tlong n = str.length;\n\tstring concat = str ~ str;\n\tlong min_length = n;\n\tlong index = 0;\n\tfor (long i = 1; i < n; i++) \n\t{\n\t\tif (concat[i..i+n-1] < concat[index..index+n-1]) \n\t\t{\n\t\t\tindex = i;\n\t\t}\n\t}\n\treturn index;\n}",
    "{\n\tlong n = str.length;\n\tlong min = n;\n\tlong i = 0;\n\tlong j = 1;\n\tlong count = 0;\n\twhile (i < n && j < n) \n\t{\n\t\tif (str[i] == str[j]) \n\t\t{\n\t\t\tj++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (count == 0) \n\t\t\t{\n\t\t\t\ti = j;\n\t\t\t\tj++;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tcount = 0;\n\t\t\t\ti++;\n\t\t\t\tj = i + 1;\n\t\t\t}\n\t\t}\n\t\tcount++;\n\t\tif (j == n && count < min) \n\t\t{\n\t\t\tmin = count;\n\t\t}\n\t}\n\treturn min;\n}",
    "{\n\tlong n = str.length;\n\tlong min = n;\n\tlong i = 0;\n\tlong j = 1;\n\twhile (i < n && j < n) \n\t{\n\t\tlong k = 0;\n\t\twhile (k < n && str[(i + k) % n] == str[(j + k) % n]) \n\t\t{\n\t\t\tk++;\n\t\t}\n\t\tif (k == n) \n\t\t{\n\t\t\tbreak;\n\t\t}\n\t\tif (str[(i + k) % n] > str[(j + k) % n]) \n\t\t{\n\t\t\ti = i + k + 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tj = j + k + 1;\n\t\t}\n\t\tif (i == j) \n\t\t{\n\t\t\tj++;\n\t\t}\n\t\tmin = min(min, min(i, j));\n\t}\n\treturn min;\n}",
    "{\n\tlong n = str.length;\n\tlong count = 0;\n\tlong min = n;\n\tlong index = 0;\n\tlong i = 0;\n\t\n\twhile(i < n) \n\t{\n\t\tif(str[i] == '1') \n\t\t{\n\t\t\tcount = 0;\n\t\t\tfor(long j = 0; j < n; j++) \n\t\t\t{\n\t\t\t\tif(str[(i + j) % n] != str[j]) \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(count < min) \n\t\t\t{\n\t\t\t\tmin = count;\n\t\t\t\tindex = i;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn index;\n}",
    "{\n\tlong n = str.length;\n\tstring concat = str ~ str;\n\tlong i = 1, j = 0;\n\tlong lps[n];\n\tlps[0] = 0;\n\twhile (i < 2 * n) \n\t{\n\t\tif (concat[i] == concat[j]) \n\t\t{\n\t\t\tlps[i] = j + 1;\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tif (j != 0) \n\t\t\t{\n\t\t\t\tj = lps[j - 1];\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tlps[i] = 0;\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t}\n\treturn (n - lps[n - 1]);\n}",
    "{\n\tlong n = str.length;\n\tlong min_rotations = n;\n\tlong i = 0;\n\tlong j = 1;\n\twhile (j < n) \n\t{\n\t\tif (str[i] == str[j]) \n\t\t{\n\t\t\tj++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\ti = 0;\n\t\t\tj++;\n\t\t}\n\t\tif (j == n) \n\t\t{\n\t\t\tif (i != 0) \n\t\t\t{\n\t\t\t\tj = 0;\n\t\t\t\ti = 0;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tmin_rotations = min(min_rotations, j - i);\n\t\t\t\tj++;\n\t\t\t}\n\t\t}\n\t}\n\treturn min_rotations;\n}",
    "{\n\tlong n = str.length;\n\tstring concat = str ~ str;\n\tlong i = 1, j = 0;\n\tlong lps[$];\n\tlps[0] = 0;\n\twhile(i < 2 * n) \n\t{\n\t\tif(concat[i] == concat[j]) \n\t\t{\n\t\t\tj++;\n\t\t\tlps[i] = j;\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tif(j != 0) \n\t\t\t{\n\t\t\t\tj = lps[j - 1];\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tlps[i] = 0;\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t}\n\treturn (n - lps[n - 1]);\n}",
    "{\n\tlong n = str.length;\n\tstring concat = str ~ str;\n\tlong i = 1, j = 0;\n\tlong lps[n];\n\tlps[0] = 0;\n\twhile (i < 2 * n) \n\t{\n\t\tif (concat[i] == concat[j]) \n\t\t{\n\t\t\tj++;\n\t\t\tlps[i] = j;\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tif (j != 0) \n\t\t\t{\n\t\t\t\tj = lps[j - 1];\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tlps[i] = 0;\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t}\n\tlong res = lps[n - 1];\n\treturn (res > n / 2) ? -1 : res;\n}",
    "{\n\tlong n = str.length;\n\tlong i = 0;\n\tlong j = 1;\n\tlong k = 0;\n\twhile (i < n && j < n && k < n) \n\t{\n\t\tif (str[(i + k) % n] == str[(j + k) % n]) \n\t\t{\n\t\t\tk++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (str[(i + k) % n] > str[(j + k) % n]) \n\t\t\t{\n\t\t\t\ti = i + k + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tj = j + k + 1;\n\t\t\t}\n\t\t\tif (i == j) \n\t\t\t{\n\t\t\t\tj++;\n\t\t\t}\n\t\t\tk = 0;\n\t\t}\n\t}\n\treturn min(i, j);\n}",
    "{\n\tlong n = str.length;\n\tlong min_rotations = n;\n\tlong i = 0;\n\tlong j = 1;\n\tlong count = 0;\n\twhile (count < n) \n\t{\n\t\ti = 0;\n\t\tj = j % n;\n\t\twhile (i < n) \n\t\t{\n\t\t\tif (str[i] != str[j])\n\t\t\t\tbreak;\n\t\t\ti++;\n\t\t\tj++;\n\t\t\tj = j % n;\n\t\t}\n\t\tif (i == n)\n\t\t\treturn min_rotations;\n\t\tif (j < min_rotations)\n\t\t\tmin_rotations = j;\n\t\tcount++;\n\t\tj++;\n\t}\n\treturn min_rotations;\n}",
    "{\n\tlong n = str.length;\n\tlong count = 0;\n\tlong min = n;\n\tlong index = 0;\n\tlong i = 0;\n\twhile (i < n) \n\t{\n\t\tif (str[i] == 'a') \n\t\t{\n\t\t\tcount = 0;\n\t\t\tindex = i;\n\t\t\twhile (str[index] == 'a') \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t\tindex = (index + 1) % n;\n\t\t\t}\n\t\t\tmin = min(min, count);\n\t\t\ti = index;\n\t\t} \n\t\telse \n\t\t{\n\t\t\ti++;\n\t\t}\n\t}\n\treturn min;\n}",
    "{\n\tlong len = str.length;\n\tlong i = 0;\n\tlong j = 1;\n\tlong k = 0;\n\twhile (i < len && j < len && k < len) \n\t{\n\t\tif (str[(i + k) % len] == str[(j + k) % len]) \n\t\t{\n\t\t\tk++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (str[(i + k) % len] > str[(j + k) % len]) \n\t\t\t{\n\t\t\t\ti = i + k + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tj = j + k + 1;\n\t\t\t}\n\t\t\tif (i == j) \n\t\t\t{\n\t\t\t\tj++;\n\t\t\t}\n\t\t\tk = 0;\n\t\t}\n\t}\n\treturn min(i, j);\n}",
    "{\n\tlong n = str.length;\n\tlong count = 0;\n\tlong min = n;\n\tlong index = 0;\n\tlong i = 0;\n\tlong j = 0;\n\t\n\twhile (i < n) \n\t{\n\t\tif (str[i] == str[0]) \n\t\t{\n\t\t\tj = 0;\n\t\t\tcount = 0;\n\t\t\twhile (j < n) \n\t\t\t{\n\t\t\t\tif (str[(i + j) % n] != str[j]) \n\t\t\t\t{\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcount++;\n\t\t\t\tj++;\n\t\t\t}\n\t\t\tif (count == n && min > i) \n\t\t\t{\n\t\t\t\tmin = i;\n\t\t\t\tindex = i;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn index;\n}",
    "{\n\tlong n = str.length;\n\tstring concat = str ~ str;\n\tlong min_length = n;\n\tlong min_index = 0;\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tlong length = 0;\n\t\tlong j = i;\n\t\twhile (j < i + n && concat[j] == str[j - i]) \n\t\t{\n\t\t\tlength++;\n\t\t\tj++;\n\t\t}\n\t\tif (length < min_length) \n\t\t{\n\t\t\tmin_length = length;\n\t\t\tmin_index = i;\n\t\t}\n\t}\n\treturn min_index;\n}",
    "{\n\tlong len = str.length;\n\tstring temp = str ~ str;\n\tlong min_rotations = len;\n\tforeach(i; 0 .. len) \n\t{\n\t\tlong rotations = 0;\n\t\tforeach(j; 0 .. len) \n\t\t{\n\t\t\tif(temp[i + j] != str[j]) \n\t\t\t{\n\t\t\t\trotations++;\n\t\t\t}\n\t\t}\n\t\tmin_rotations = min(min_rotations, rotations);\n\t}\n\treturn min_rotations;\n}",
    "{\n\tlong len = str.length;\n\tlong i = 0;\n\tlong j = 1;\n\tlong k = 0;\n\twhile (i < len && j < len && k < len) \n\t{\n\t\tif (str[(i + k) % len] == str[(j + k) % len]) \n\t\t{\n\t\t\tk++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tif (str[(i + k) % len] > str[(j + k) % len]) \n\t\t\t{\n\t\t\t\ti = i + k + 1;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tj = j + k + 1;\n\t\t\t}\n\t\t\tif (i == j) \n\t\t\t{\n\t\t\t\tj++;\n\t\t\t}\n\t\t\tk = 0;\n\t\t}\n\t}\n\treturn min(i, j);\n}",
    "{\n\tlong n = str.length;\n\tlong i = 0;\n\tlong j = 1;\n\tlong k = 0;\n\twhile (i < n && j < n && k < n) \n\t{\n\t\tif (str[(i + k) % n] == str[(j + k) % n]) \n\t\t{\n\t\t\tk++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (str[(i + k) % n] > str[(j + k) % n]) \n\t\t\t{\n\t\t\t\ti = i + k + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tj = j + k + 1;\n\t\t\t}\n\t\t\tif (i == j) \n\t\t\t{\n\t\t\t\tj++;\n\t\t\t}\n\t\t\tk = 0;\n\t\t}\n\t}\n\treturn min(i, j);\n}",
    "{\n\tlong n = str.length;\n\tlong count = 0;\n\tlong min = n;\n\tlong index = 0;\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong temp = 0;\n\tlong min_index = 0;\n\tlong min_index_prev = 0;\n\tlong min_index_next = 0;\n\tlong min_index_prev_prev = 0;\n\tlong min_index_next_next = 0;\n\tlong min_index_prev_prev_prev = 0;\n\tlong min_index_next_next_next = 0;\n\tlong min_index_prev_prev_prev_prev = 0;\n\tlong min_index_next_next_next_next = 0;\n\tlong min_index_prev_prev_prev_prev_prev = 0;\n\tlong min_index_next_next_next_next_next = 0;\n\tlong min_index_prev_prev_prev_prev_prev_prev = 0;\n\tlong min_index_next_next_next_next_next_next = 0;\n\tlong min_index_prev_prev_prev_prev_prev_prev_prev = 0;\n\tlong min_index_next_next_next_next_next_next_next = 0;\n\tlong min_index_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n\tlong min_index_next_next_next_next_next_next_next_next = 0;\n\tlong min_index_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n\tlong min_index_next_next_next_next_next_next_next_next_next = 0;\n\tlong min_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n\tlong min_index_next_next_next_next_next_next_next_next_next_next = 0;\n\tlong min_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n\tlong min_index_next_next_next",
    "{\n\tlong n = str.length;\n\tlong count = 0;\n\tlong min = n;\n\tlong index = 0;\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong temp = 0;\n\tlong[] arr = new long[n];\n\t\n\tfor (i = 0; i < n; i++) \n\t{\n\t\tarr[i] = str[i];\n\t}\n\t\n\tfor (i = 0; i < n; i++) \n\t{\n\t\tj = i;\n\t\tk = 0;\n\t\twhile (arr[j] <= arr[(j + 1) % n]) \n\t\t{\n\t\t\tj = (j + 1) % n;\n\t\t\tk++;\n\t\t\tif (j == i) \n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (k < min) \n\t\t{\n\t\t\tmin = k;\n\t\t\tindex = i;\n\t\t}\n\t}\n\t\n\treturn index;\n}",
    "{\n\tlong n = str.length;\n\tlong min_rotations = 0;\n\tlong min_index = 0;\n\tlong min_value = str[0];\n\t\n\tfor (long i = 1; i < n; i++) \n\t{\n\t\tif (str[i] < min_value) \n\t\t{\n\t\t\tmin_value = str[i];\n\t\t\tmin_index = i;\n\t\t}\n\t}\n\t\n\tmin_rotations = min_index;\n\t\n\treturn min_rotations;\n}",
    "{\n\tlong i, j, k, n, min_index, min_rotations;\n\tn = str.length;\n\tmin_index = 0;\n\tmin_rotations = n;\n\tfor (i = 0; i < n; i++) \n\t{\n\t\tj = i;\n\t\tk = 0;\n\t\twhile (j < n) \n\t\t{\n\t\t\tif (str[j] != str[k]) \n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tj++;\n\t\t\tk++;\n\t\t}\n\t\tif (j == n) \n\t\t{\n\t\t\tmin_index = i;\n\t\t\tbreak;\n\t\t}\n\t\tif (j < n) \n\t\t{\n\t\t\tmin_rotations = min(min_rotations, j - i);\n\t\t}\n\t}\n\treturn min_rotations;\n}",
    "{\n\tlong n = str.length;\n\tstring concat = str ~ str;\n\tlong i = 1, j = 0;\n\tlong lps[n];\n\tlps[0] = 0;\n\twhile (i < 2 * n) \n\t{\n\t\tif (concat[i] == concat[j]) \n\t\t{\n\t\t\tlps[i] = j + 1;\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tif (j != 0) \n\t\t\t{\n\t\t\t\tj = lps[j - 1];\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tlps[i] = 0;\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t}\n\treturn (n - lps[n - 1]);\n}",
    "{\n\tlong len = str.length;\n\tlong i = 0;\n\tlong min = 0;\n\tlong index = 0;\n\tlong min_val = 0;\n\tlong diff = 0;\n\tlong arr[len];\n\t\n\tfor (i = 0; i < len; i++) \n\t{\n\t\tarr[i] = str[i];\n\t}\n\t\n\tmin_val = arr[0];\n\t\n\tfor (i = 0; i < len; i++) \n\t{\n\t\tif (min_val > arr[i]) \n\t\t{\n\t\t\tmin_val = arr[i];\n\t\t\tindex = i;\n\t\t}\n\t}\n\t\n\tdiff = len - index;\n\t\n\tif (diff > index) \n\t{\n\t\tmin = index;\n\t}\n\telse \n\t{\n\t\tmin = diff;\n\t}\n\t\n\treturn min;\n}",
    "{\n\tstring temp = str;\n\tlong min_rotations = 0;\n\tlong min_rotations_index = 0;\n\tlong len = str.length;\n\tfor (long i = 0; i < len; i++) \n\t{\n\t\ttemp = temp[1..$] ~ temp[0..0];\n\t\tif (temp < str) \n\t\t{\n\t\t\tmin_rotations = i + 1;\n\t\t\tmin_rotations_index = i;\n\t\t}\n\t}\n\treturn min_rotations;\n}",
    "{\n\tlong n = str.length;\n\tlong count = 0;\n\tlong min = n;\n\tlong index = 0;\n\tlong i = 0;\n\twhile (i < n) \n\t{\n\t\tif (str[i] == 'a') \n\t\t{\n\t\t\tcount = 0;\n\t\t\tfor (long j = 0; j < n; j++) \n\t\t\t{\n\t\t\t\tif (str[(i + j) % n] != 'a') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (count < min) \n\t\t\t{\n\t\t\t\tmin = count;\n\t\t\t\tindex = i;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn index;\n}",
    "{\n\tlong n = str.length;\n\tlong i = 0;\n\tlong j = 1;\n\tlong k = 0;\n\twhile (i < n && j < n && k < n) \n\t{\n\t\tif (str[(i + k) % n] == str[(j + k) % n]) \n\t\t{\n\t\t\tk++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (str[(i + k) % n] > str[(j + k) % n]) \n\t\t\t{\n\t\t\t\ti = i + k + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tj = j + k + 1;\n\t\t\t}\n\t\t\tif (i == j) \n\t\t\t{\n\t\t\t\tj++;\n\t\t\t}\n\t\t\tk = 0;\n\t\t}\n\t}\n\treturn min(i, j);\n}",
    "{\n\tlong n = str.length;\n\tstring concat = str ~ str;\n\tlong i = 1, j = 0;\n\tlong lps[$];\n\tlps[0] = 0;\n\twhile (i < 2 * n) \n\t{\n\t\tif (concat[i] == concat[j]) \n\t\t{\n\t\t\tj++;\n\t\t\tlps[i] = j;\n\t\t\ti++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (j != 0) \n\t\t\t{\n\t\t\t\tj = lps[j - 1];\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tlps[i] = 0;\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t}\n\tlong res = lps[n - 1];\n\tif (res > 0 && n % (n - res) == 0)\n\t\treturn n - res;\n\treturn n;\n}",
    "{\n\tlong len = str.length;\n\tstring temp = str ~ str;\n\tlong min_index = 0;\n\tlong min_length = len;\n\tlong i = 0;\n\twhile (i < len) \n\t{\n\t\tlong j = i + 1;\n\t\tlong k = i;\n\t\twhile (j < len && temp[k] <= temp[j]) \n\t\t{\n\t\t\tif (temp[k] < temp[j]) \n\t\t\t{\n\t\t\t\tk = i;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tk++;\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\t\tif (k < min_index) \n\t\t{\n\t\t\tmin_index = k;\n\t\t\tmin_length = j - k;\n\t\t} \n\t\telse if (k == min_index && j - k < min_length) \n\t\t{\n\t\t\tmin_length = j - k;\n\t\t}\n\t\ti = max(i + 1, j - 1);\n\t}\n\treturn min_length;\n}",
    "{\n\tstring temp = str ~ str;\n\tlong n = str.length;\n\tlong[] lps = new long[n];\n\tlong i = 1, len = 0;\n\tlps[0] = 0;\n\twhile (i < n) \n\t{\n\t\tif (str[i] == str[len]) \n\t\t{\n\t\t\tlen++;\n\t\t\tlps[i] = len;\n\t\t\ti++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (len != 0) \n\t\t\t{\n\t\t\t\tlen = lps[len - 1];\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tlps[i] = 0;\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t}\n\treturn n - lps[n - 1];\n}",
    "{\n\tlong n = str.length;\n\tlong count = 0;\n\tlong min = n;\n\tlong index = 0;\n\tlong i = 0;\n\t\n\twhile (i < n) \n\t{\n\t\tif (str[i] == '1') \n\t\t{\n\t\t\tcount = 0;\n\t\t\tfor (long j = 0; j < n; j++) \n\t\t\t{\n\t\t\t\tif (str[(i + j) % n] != str[j]) \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (count < min) \n\t\t\t{\n\t\t\t\tmin = count;\n\t\t\t\tindex = i;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn index;\n}",
    "{\n\tlong n = str.length;\n\tstring concat = str ~ str;\n\tlong i = 1, j = 0;\n\tlong lps[n];\n\tlps[0] = 0;\n\twhile (i < 2 * n) \n\t{\n\t\tif (concat[i] == concat[j]) \n\t\t{\n\t\t\tj++;\n\t\t\tlps[i] = j;\n\t\t\ti++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (j != 0) \n\t\t\t{\n\t\t\t\tj = lps[j - 1];\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tlps[i] = 0;\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t}\n\tlong res = lps[n - 1];\n\tif (res > 0 && n % (n - res) == 0) \n\t{\n\t\treturn n - res;\n\t}\n\treturn n;\n}",
    "{\n\tstring temp = str ~ str;\n\tlong n = str.length;\n\tlong[] lps = new long[n];\n\tlong i = 1, j = 0;\n\twhile (i < n) \n\t{\n\t\tif (temp[i] == temp[j]) \n\t\t{\n\t\t\tlps[i] = j + 1;\n\t\t\ti++;\n\t\t\tj++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (j != 0)\n\t\t\t\tj = lps[j - 1];\n\t\t\telse \n\t\t\t{\n\t\t\t\tlps[i] = 0;\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t}\n\treturn n - lps[n - 1];\n}",
    "{\n\tlong n = str.length;\n\tstring concat = str ~ str;\n\tlong i = 1, j = 0;\n\tlong lps[$];\n\tlps[0] = 0;\n\twhile (i < 2 * n) \n\t{\n\t\tif (concat[i] == concat[j]) \n\t\t{\n\t\t\tj++;\n\t\t\tlps[i] = j;\n\t\t\ti++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (j != 0) \n\t\t\t{\n\t\t\t\tj = lps[j - 1];\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tlps[i] = 0;\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t}\n\tlong res = lps[n - 1];\n\treturn (n - res);\n}",
    "{\n\tlong n = str.length;\n\tstring temp = str ~ str;\n\tlong i = 1, j = 0;\n\tlong lps[$];\n\tlps[0] = 0;\n\twhile (i < 2 * n) \n\t{\n\t\tif (temp[i] == temp[j]) \n\t\t{\n\t\t\tj++;\n\t\t\tlps[i] = j;\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tif (j != 0) \n\t\t\t{\n\t\t\t\tj = lps[j - 1];\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tlps[i] = 0;\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t}\n\treturn (n - lps[n - 1]);\n}",
    "{\n\tlong n = str.length;\n\tstring temp = str ~ str;\n\tlong i = 1, j = 0;\n\twhile (i < n && j < n) \n\t{\n\t\tlong k = 0;\n\t\twhile (k < n && temp[i + k] == temp[j + k]) \n\t\t{\n\t\t\tk++;\n\t\t}\n\t\tif (k == n) \n\t\t{\n\t\t\tbreak;\n\t\t}\n\t\tif (temp[i + k] > temp[j + k]) \n\t\t{\n\t\t\ti = i + k + 1;\n\t\t\tif (i <= j) \n\t\t\t{\n\t\t\t\ti = j + 1;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tj = j + k + 1;\n\t\t\tif (j <= i) \n\t\t\t{\n\t\t\t\tj = i + 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn min(i, j);\n}",
    "{\n\tlong n = str.length;\n\tlong count = 0;\n\tlong min = n;\n\tlong index = 0;\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong temp = 0;\n\tlong temp_index = 0;\n\t\n\tfor (i = 0; i < n; i++)\n\t{\n\t\tif (str[i] == '1')\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\t\n\tif (count == n)\n\t{\n\t\treturn 0;\n\t}\n\t\n\tfor (i = 0; i < n; i++)\n\t{\n\t\tif (str[i] == '1')\n\t\t{\n\t\t\tindex = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tfor (i = 0; i < n; i++)\n\t{\n\t\ttemp = 0;\n\t\ttemp_index = index;\n\t\tfor (j = 0; j < n; j++)\n\t\t{\n\t\t\tif (str[temp_index] == '1')\n\t\t\t{\n\t\t\t\ttemp++;\n\t\t\t}\n\t\t\ttemp_index = (temp_index + 1) % n;\n\t\t}\n\t\t\n\t\tif (temp < min)\n\t\t{\n\t\t\tmin = temp;\n\t\t}\n\t\t\n\t\tindex = (index + 1) % n;\n\t}\n\t\n\treturn n - min;\n}",
    "{\n\tlong n = str.length;\n\tlong count = 0;\n\tlong min = n;\n\tlong index = 0;\n\tlong i = 0;\n\tlong j = 0;\n\twhile(i < n) \n\t{\n\t\tif(str[i] == 'a') \n\t\t{\n\t\t\tcount = 0;\n\t\t\tj = i;\n\t\t\twhile(j < n) \n\t\t\t{\n\t\t\t\tif(str[j] == 'a') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t\tj++;\n\t\t\t}\n\t\t\tj = 0;\n\t\t\twhile(j < i) \n\t\t\t{\n\t\t\t\tif(str[j] == 'a') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t\tj++;\n\t\t\t}\n\t\t\tif(count < min) \n\t\t\t{\n\t\t\t\tmin = count;\n\t\t\t\tindex = i;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn index;\n}",
    "{\n\tlong n = str.length;\n\tstring temp = str ~ str;\n\tlong i = 1, j = 0;\n\twhile (i < n) \n\t{\n\t\tif (temp[i] < temp[j]) \n\t\t{\n\t\t\tj = 0;\n\t\t}\n\t\telse if (temp[i] > temp[j]) \n\t\t{\n\t\t\tj = i;\n\t\t}\n\t\telse \n\t\t{\n\t\t\ti++;\n\t\t}\n\t}\n\treturn j;\n}",
    "{\n\tlong n = str.length;\n\tstring temp = str ~ str;\n\tlong[] lps = new long[n];\n\tlong len = 0;\n\tlong i = 1;\n\twhile (i < 2 * n) \n\t{\n\t\tif (temp[i] == temp[len]) \n\t\t{\n\t\t\tlen++;\n\t\t\tlps[i] = len;\n\t\t\ti++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (len != 0) \n\t\t\t{\n\t\t\t\tlen = lps[len - 1];\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tlps[i] = 0;\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t}\n\treturn (n - lps[n - 1]);\n}",
    "{\n\tlong n = str.length;\n\tlong count = 0;\n\tlong min = n;\n\tlong index = 0;\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong temp = 0;\n\tlong[] arr = new long[n];\n\t\n\tfor (i = 0; i < n; i++) \n\t{\n\t\tif (str[i] == '1') \n\t\t{\n\t\t\tarr[j] = i;\n\t\t\tj++;\n\t\t\tcount++;\n\t\t}\n\t}\n\t\n\tfor (i = 0; i < count; i++) \n\t{\n\t\tk = i;\n\t\ttemp = 0;\n\t\tfor (j = 0; j < count; j++) \n\t\t{\n\t\t\tif (arr[k] < n / 2) \n\t\t\t{\n\t\t\t\ttemp += n - arr[k] - 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\ttemp += arr[k];\n\t\t\t}\n\t\t\tk = (k + 1) % count;\n\t\t}\n\t\tif (temp < min) \n\t\t{\n\t\t\tmin = temp;\n\t\t\tindex = i;\n\t\t}\n\t}\n\treturn arr[index];\n}",
    "{\n\tlong n = str.length;\n\tstring temp = str ~ str;\n\tlong i = 1;\n\tlong j = 0;\n\tlong lps[n];\n\tlps[0] = 0;\n\twhile(i < n) \n\t{\n\t\tif(temp[i] == temp[j]) \n\t\t{\n\t\t\tlps[i] = j + 1;\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tif(j != 0) \n\t\t\t{\n\t\t\t\tj = lps[j - 1];\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tlps[i] = 0;\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t}\n\treturn n - lps[n - 1];\n}",
    "{\n\tlong len = str.length;\n\tlong i = 0;\n\tlong j = 1;\n\tlong k = 0;\n\twhile (i < len && j < len && k < len) \n\t{\n\t\tif (str[(i + k) % len] == str[(j + k) % len]) \n\t\t{\n\t\t\tk++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (str[(i + k) % len] > str[(j + k) % len]) \n\t\t\t{\n\t\t\t\ti = i + k + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tj = j + k + 1;\n\t\t\t}\n\t\t\tif (i == j) \n\t\t\t{\n\t\t\t\tj++;\n\t\t\t}\n\t\t\tk = 0;\n\t\t}\n\t}\n\treturn min(i, j);\n}",
    "{ \n\tlong n = str.length; \n\tlong count = 0; \n\tlong min = n; \n\tlong index = 0; \n\t\n\tfor (long i = 0; i < n; i++) \n\t{ \n\t\tif (str[i] == '1') \n\t\t{ \n\t\t\tcount = 0; \n\t\t\tfor (long j = i; j < n; j++) \n\t\t\t{ \n\t\t\t\tif (str[j] == '1') \n\t\t\t\t\tcount++; \n\t\t\t\telse\n\t\t\t\t\tbreak; \n\t\t\t} \n\t\t\tfor (long j = 0; j < i; j++) \n\t\t\t{ \n\t\t\t\tif (str[j] == '1') \n\t\t\t\t\tcount++; \n\t\t\t\telse\n\t\t\t\t\tbreak; \n\t\t\t} \n\t\t\tif (count < min) \n\t\t\t{ \n\t\t\t\tmin = count; \n\t\t\t\tindex = i; \n\t\t\t} \n\t\t} \n\t} \n\treturn (n - index); \n} ",
    "{\n\tlong n = str.length;\n\tlong count = 0;\n\tlong i = 0;\n\tlong j = 1;\n\tlong k = 0;\n\twhile (count < n) \n\t{\n\t\tk = 0;\n\t\twhile (k < n) \n\t\t{\n\t\t\tif (str[i] != str[j]) \n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\ti = (i + 1) % n;\n\t\t\tj = (j + 1) % n;\n\t\t\tk++;\n\t\t}\n\t\tif (k == n) \n\t\t{\n\t\t\treturn count;\n\t\t}\n\t\tif (j < i) \n\t\t{\n\t\t\tj = j + n;\n\t\t}\n\t\tcount++;\n\t\tj = j - i;\n\t\ti = 0;\n\t}\n\treturn count;\n}",
    "{\n\tlong n = str.length;\n\tlong count = 0;\n\tlong min = n;\n\tlong index = 0;\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tif (str[i] == '1') \n\t\t{\n\t\t\tcount = 0;\n\t\t\tfor (long j = i; j < n; j++) \n\t\t\t{\n\t\t\t\tif (str[j] == '1') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (long j = 0; j < i; j++) \n\t\t\t{\n\t\t\t\tif (str[j] == '1') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (count < min) \n\t\t\t{\n\t\t\t\tmin = count;\n\t\t\t\tindex = i;\n\t\t\t}\n\t\t}\n\t}\n\treturn index;\n}",
    "{\n\tlong len = str.length;\n\tlong i = 0;\n\tlong j = 1;\n\tlong k = 0;\n\twhile (i < len && j < len && k < len) \n\t{\n\t\tif (str[(i + k) % len] == str[(j + k) % len]) \n\t\t{\n\t\t\tk += 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (str[(i + k) % len] > str[(j + k) % len]) \n\t\t\t{\n\t\t\t\ti = i + k + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tj = j + k + 1;\n\t\t\t}\n\t\t\tif (i == j) \n\t\t\t{\n\t\t\t\tj += 1;\n\t\t\t}\n\t\t\tk = 0;\n\t\t}\n\t}\n\treturn min(i, j);\n}",
    "{\n\tlong n = str.length;\n\tlong count = 0;\n\tstring temp = str;\n\twhile (true) \n\t{\n\t\ttemp = temp[n - 1 .. $] ~ temp[0 .. n - 2];\n\t\tcount++;\n\t\tif (temp == str) \n\t\t{\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn count;\n}",
    "{\n\tlong n = str.length;\n\tlong i = 0;\n\tlong j = 1;\n\tlong k = 0;\n\twhile (i < n && j < n && k < n) \n\t{\n\t\tif (str[(i + k) % n] == str[(j + k) % n]) \n\t\t{\n\t\t\tk++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (str[(i + k) % n] > str[(j + k) % n]) \n\t\t\t{\n\t\t\t\ti = i + k + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tj = j + k + 1;\n\t\t\t}\n\t\t\tif (i == j) \n\t\t\t{\n\t\t\t\tj++;\n\t\t\t}\n\t\t\tk = 0;\n\t\t}\n\t}\n\treturn min(i, j);\n}",
    "{ \n    long n = str.length; \n    long count = 0; \n    for (long i = 0; i < n; i++) \n    { \n        if (str[i] == '1') \n            count++; \n    } \n    long max_diff = 0; \n    for (long i = 0; i < n; i++) \n    { \n        if (str[i] == '1') \n            count--; \n        else\n            count++; \n        max_diff = max(max_diff, count); \n    } \n    return (n - max_diff); \n} ",
    "{\n\tlong len = str.length;\n\tstring temp = str ~ str;\n\tlong[] lps = new long[2 * len];\n\tlps[0] = 0;\n\tlong i = 1;\n\tlong j = 0;\n\twhile (i < 2 * len) \n\t{\n\t\tif (temp[i] == temp[j]) \n\t\t{\n\t\t\tj++;\n\t\t\tlps[i] = j;\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tif (j != 0) \n\t\t\t{\n\t\t\t\tj = lps[j - 1];\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tlps[i] = 0;\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t}\n\treturn len - lps[2 * len - 1];\n}",
    "{\n\tlong len = str.length;\n\tlong i = 0;\n\tlong j = 1;\n\tlong k = 0;\n\twhile (i < len && j < len && k < len) \n\t{\n\t\tif (str[i + k] == str[j + k]) \n\t\t{\n\t\t\tk++;\n\t\t\tif (k == len) \n\t\t\t{\n\t\t\t\treturn i;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (str[i + k] > str[j + k]) \n\t\t\t{\n\t\t\t\ti = i + k + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tj = j + k + 1;\n\t\t\t}\n\t\t\tif (i == j) \n\t\t\t{\n\t\t\t\tj++;\n\t\t\t}\n\t\t\tk = 0;\n\t\t}\n\t}\n\treturn i;\n}",
    "{\n\tstring temp = str ~ str;\n\tlong n = str.length;\n\tlong[] lps = new long[2 * n];\n\tlong len = 0;\n\tlong i = 1;\n\tlps[0] = 0;\n\twhile (i < 2 * n) \n\t{\n\t\tif (temp[i] == temp[len]) \n\t\t{\n\t\t\tlen++;\n\t\t\tlps[i] = len;\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tif (len != 0) \n\t\t\t{\n\t\t\t\tlen = lps[len - 1];\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tlps[i] = 0;\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t}\n\treturn (n - lps[n - 1]);\n}",
    "{\n\tlong n = str.length;\n\tstring concat = str ~ str;\n\tlong i = 1, j = 0;\n\tlong lps[$];\n\tlps[0] = 0;\n\twhile (i < 2 * n) \n\t{\n\t\tif (concat[i] == concat[j]) \n\t\t{\n\t\t\tj++;\n\t\t\tlps[i] = j;\n\t\t\ti++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (j != 0) \n\t\t\t{\n\t\t\t\tj = lps[j - 1];\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tlps[i] = 0;\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t}\n\tlong res = lps[n - 1];\n\tif (res > 0 && n % (n - res) == 0) \n\t{\n\t\treturn (n - res);\n\t}\n\treturn n;\n}",
    "{\n\tlong n = str.length;\n\tlong min_rotations = n;\n\tlong i = 0;\n\tlong j = 1;\n\tlong k = 0;\n\twhile(i < n && j < n && k < n) \n\t{\n\t\tif(str[i + k] == str[j + k]) \n\t\t{\n\t\t\tk++;\n\t\t\tif(j + k == n) \n\t\t\t{\n\t\t\t\tmin_rotations = min(min_rotations, j - i);\n\t\t\t\ti = i + k + 1;\n\t\t\t\tj = i + 1;\n\t\t\t\tk = 0;\n\t\t\t}\n\t\t\telse if(i + k == n) \n\t\t\t{\n\t\t\t\tmin_rotations = min(min_rotations, j - i);\n\t\t\t\ti = 0;\n\t\t\t\tj = j + k + 1;\n\t\t\t\tk = 0;\n\t\t\t}\n\t\t}\n\t\telse \n\t\t{\n\t\t\tif(str[i + k] < str[j + k]) \n\t\t\t{\n\t\t\t\tmin_rotations = min(min_rotations, j - i + n);\n\t\t\t\ti = i + k + 1;\n\t\t\t\tif(i == j) \n\t\t\t\t{\n\t\t\t\t\tj = j + 1;\n\t\t\t\t}\n\t\t\t\tk = 0;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tmin_rotations = min(min_rotations, j - i);\n\t\t\t\tj = j + k + 1;\n\t\t\t\tif(i == j) \n\t\t\t\t{\n\t\t\t\t\ti = i + 1;\n\t\t\t\t}\n\t\t\t\tk = 0;\n\t\t\t}\n\t\t}\n\t}\n\treturn min_rotations;\n}",
    "{\n\tlong n = str.length;\n\tlong min_rotations = n;\n\tstring temp = str ~ str;\n\tforeach(i; 0 .. n)\n\t{\n\t\tif(temp[i .. i + n - 1] < str)\n\t\t{\n\t\t\tmin_rotations = min(min_rotations, i);\n\t\t}\n\t}\n\treturn min_rotations;\n}",
    "{\n\tstring temp = str ~ str;\n\tlong n = str.length;\n\tlong[] lps = new long[n];\n\tlong len = 0;\n\tlong i = 1;\n\twhile (i < n) \n\t{\n\t\tif (temp[i] == temp[len]) \n\t\t{\n\t\t\tlen++;\n\t\t\tlps[i] = len;\n\t\t\ti++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (len != 0) \n\t\t\t{\n\t\t\t\tlen = lps[len - 1];\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tlps[i] = 0;\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t}\n\treturn n - lps[n - 1];\n}",
    "{\n\tstring temp = str ~ str;\n\tlong n = str.length;\n\tlong i = 1;\n\tlong j = 0;\n\tlong k = 0;\n\twhile (i < n) \n\t{\n\t\tj = i;\n\t\tk = 0;\n\t\twhile (j < n && str[k] == temp[j]) \n\t\t{\n\t\t\tj++;\n\t\t\tk++;\n\t\t}\n\t\tif (j == n) \n\t\t{\n\t\t\tbreak;\n\t\t}\n\t\tif (str[k] > temp[j]) \n\t\t{\n\t\t\ti = j + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\ti = 0;\n\t\t}\n\t}\n\treturn i;\n}",
    "{\n\tlong n = str.length;\n\tlong min_rotations = n;\n\tstring str_concat = str ~ str;\n\tlong i = 0;\n\tlong j = 1;\n\twhile (i < n && j < n) \n\t{\n\t\tif (str_concat[i + j] == str_concat[i]) \n\t\t{\n\t\t\tj++;\n\t\t} \n\t\telse if (str_concat[i + j] > str_concat[i]) \n\t\t{\n\t\t\ti = i + j;\n\t\t\tj = 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\ti = 0;\n\t\t\tj = 1;\n\t\t}\n\t}\n\tmin_rotations = min(min_rotations, i);\n\treturn min_rotations;\n}",
    "{\n\tlong n = str.length;\n\tlong count = 0;\n\tlong min = n;\n\tlong index = 0;\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong temp = 0;\n\tlong min_index = 0;\n\t\n\tfor (i = 0; i < n; i++) \n\t{\n\t\tj = i;\n\t\tk = i;\n\t\tcount = 0;\n\t\twhile (count < n) \n\t\t{\n\t\t\tk = (k + 1) % n;\n\t\t\tcount++;\n\t\t\tif (str[j] != str[k]) \n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tj = (j + 1) % n;\n\t\t}\n\t\tif (count < min) \n\t\t{\n\t\t\tmin = count;\n\t\t\tmin_index = i;\n\t\t}\n\t}\n\treturn min_index;\n}",
    "{\n\tlong n = str.length;\n\tlong count = 0;\n\tlong min = 0;\n\tlong i = 0;\n\tlong j = 1;\n\twhile (i < n && j < n) \n\t{\n\t\tif (str[i] == str[j]) \n\t\t{\n\t\t\tj++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tif (count == 0) \n\t\t\t{\n\t\t\t\tmin = j - i;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tmin = min(min, j - i);\n\t\t\t}\n\t\t\tcount++;\n\t\t\ti = j;\n\t\t\tj++;\n\t\t}\n\t}\n\treturn min;\n}",
    "{\n\tlong n = str.length;\n\tlong count = 0;\n\tlong min = n;\n\tlong index = 0;\n\tlong i = 0;\n\twhile(i < n) \n\t{\n\t\tif(str[i] == 'a') \n\t\t{\n\t\t\tcount = 0;\n\t\t\tindex = i;\n\t\t\twhile(str[index] == 'a') \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t\tindex++;\n\t\t\t}\n\t\t\tmin = min(min, count);\n\t\t\ti = index;\n\t\t}\n\t\telse \n\t\t{\n\t\t\ti++;\n\t\t}\n\t}\n\treturn min;\n}",
    "{\n\tstring temp = str + str;\n\tlong n = str.length;\n\tlong i = 0;\n\tlong j = 1;\n\tlong k = 0;\n\twhile (i < n && j < n) \n\t{\n\t\tk = 0;\n\t\twhile (k < n && temp[i + k] == temp[j + k]) \n\t\t{\n\t\t\tk++;\n\t\t}\n\t\tif (k == n) \n\t\t{\n\t\t\tbreak;\n\t\t}\n\t\tif (temp[i + k] > temp[j + k]) \n\t\t{\n\t\t\ti = i + k + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tj = j + k + 1;\n\t\t}\n\t\tif (i == j) \n\t\t{\n\t\t\tj++;\n\t\t}\n\t}\n\treturn min(i, j);\n}",
    "{\n\tstring temp = str;\n\tlong n = str.length;\n\tlong min_rotations = n;\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\ttemp = temp[$-1 .. $] ~ temp[0 .. $-1];\n\t\tif (temp < str) \n\t\t{\n\t\t\tmin_rotations = min(min_rotations, i + 1);\n\t\t}\n\t}\n\treturn min_rotations;\n}",
    "{\n\tlong n = str.length;\n\tlong count = 0;\n\tlong min = n;\n\tlong index = 0;\n\tlong i = 0;\n\tlong j = 0;\n\t\n\tfor (i = 0; i < n; i++) \n\t{\n\t\tif (str[i] == '1') \n\t\t{\n\t\t\tcount = 0;\n\t\t\tfor (j = i; j < n; j++) \n\t\t\t{\n\t\t\t\tif (str[j] == '1') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (j = 0; j < i; j++) \n\t\t\t{\n\t\t\t\tif (str[j] == '1') \n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (count < min) \n\t\t\t{\n\t\t\t\tmin = count;\n\t\t\t\tindex = i;\n\t\t\t}\n\t\t}\n\t}\n\treturn index;\n}",
    "{\n\tlong len = str.length;\n\tstring temp = str ~ str;\n\tlong i = 1;\n\tlong j = 0;\n\tlong k = 0;\n\tlong[] lps = new long[len];\n\tlps[0] = 0;\n\twhile (i < 2 * len) \n\t{\n\t\tif (temp[i] == temp[j]) \n\t\t{\n\t\t\tj++;\n\t\t\tlps[i] = j;\n\t\t\ti++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (j != 0) \n\t\t\t{\n\t\t\t\tj = lps[j - 1];\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tlps[i] = 0;\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t}\n\tk = lps[2 * len - 1];\n\treturn (len - k);\n}",
    "{\n\tlong len = str.length;\n\tlong i = 0;\n\tlong j = 1;\n\tlong k = 0;\n\twhile (i < len && j < len && k < len) \n\t{\n\t\tif (str[i + k] == str[j + k]) \n\t\t{\n\t\t\tk++;\n\t\t\tif (k == len) \n\t\t\t{\n\t\t\t\treturn i;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (str[i + k] > str[j + k]) \n\t\t\t{\n\t\t\t\ti = i + k + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tj = j + k + 1;\n\t\t\t}\n\t\t\tif (i == j) \n\t\t\t{\n\t\t\t\tj++;\n\t\t\t}\n\t\t\tk = 0;\n\t\t}\n\t}\n\treturn i;\n}",
    "{\n\tlong len = str.length;\n\tstring temp = str ~ str;\n\tlong min_rotations = len;\n\tfor (long i = 1; i < len; i++) \n\t{\n\t\tif (temp[i..i + len - 1] < temp[min_rotations..min_rotations + len - 1]) \n\t\t{\n\t\t\tmin_rotations = i;\n\t\t}\n\t}\n\treturn min_rotations;\n}",
    "{\n\tlong n = str.length;\n\tstring concat = str ~ str;\n\tlong i = 1, j = 0;\n\tlong lps[n];\n\tlps[0] = 0;\n\twhile (i < 2 * n) \n\t{\n\t\tif (concat[i] == concat[j]) \n\t\t{\n\t\t\tj++;\n\t\t\tlps[i] = j;\n\t\t\ti++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (j != 0) \n\t\t\t{\n\t\t\t\tj = lps[j - 1];\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tlps[i] = 0;\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t}\n\tlong res = lps[n - 1];\n\treturn (n - res);\n}",
    "{\n\tlong len = str.length;\n\tlong i = 0;\n\tlong j = 1;\n\tlong k = 0;\n\twhile (i < len && j < len && k < len) \n\t{\n\t\tif (str[(i + k) % len] == str[(j + k) % len]) \n\t\t{\n\t\t\tk++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (str[(i + k) % len] > str[(j + k) % len]) \n\t\t\t{\n\t\t\t\ti = i + k + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tj = j + k + 1;\n\t\t\t}\n\t\t\tif (i == j) \n\t\t\t{\n\t\t\t\tj++;\n\t\t\t}\n\t\t\tk = 0;\n\t\t}\n\t}\n\treturn min(i, j);\n}",
    "{\n\tstring temp = str ~ str;\n\tlong n = str.length;\n\tlong[] lps = new long[n];\n\tlps[0] = 0;\n\tlong len = 0;\n\tlong i = 1;\n\twhile(i < n) \n\t{\n\t\tif(temp[i] == temp[len]) \n\t\t{\n\t\t\tlen++;\n\t\t\tlps[i] = len;\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tif(len != 0) \n\t\t\t{\n\t\t\t\tlen = lps[len - 1];\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tlps[i] = 0;\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t}\n\treturn n - lps[n - 1];\n}",
    "{\n\tlong n = str.length;\n\tstring concat = str ~ str;\n\tlong i = 1;\n\tlong j = 0;\n\tlong lps[n];\n\tlps[0] = 0;\n\twhile (i < 2 * n) \n\t{\n\t\tif (concat[i] == concat[j]) \n\t\t{\n\t\t\tj++;\n\t\t\tlps[i] = j;\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tif (j != 0) \n\t\t\t{\n\t\t\t\tj = lps[j - 1];\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tlps[i] = 0;\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t}\n\treturn (n - lps[n - 1]);\n}"
  ]
}