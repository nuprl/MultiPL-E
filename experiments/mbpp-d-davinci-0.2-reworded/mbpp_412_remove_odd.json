{
  "name": "mbpp_412_remove_odd",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to remove odd numbers from a given array.\n\t\n*/\nlong[] remove_odd(long[] l) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_412_remove_odd.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = remove_odd;\n\n    assert(candidate([1L, 2L, 3L]) == [2L]);\n    assert(candidate([2L, 4L, 6L]) == [2L, 4L, 6L]);\n    assert(candidate([10L, 20L, 3L]) == [10L, 20L]);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tlong[] result = new long[];\n\tforeach(i;l)\n\t{\n\t\tif(i%2==0)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] ret;\n\tforeach(i; l)\n\t{\n\t\tif(i % 2 == 0)\n\t\t\tret ~= i;\n\t}\n\treturn ret;\n}",
    "{\n\tauto evens = new long[];\n\tforeach(i; l)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tevens ~= i;\n\t\t}\n\t}\n\treturn evens;\n}",
    "{\n\treturn l.filter!(x => x % 2 == 0);\n}",
    "{\n\tlong[] ret;\n\tforeach(i; l)\n\t{\n\t\tif(i % 2 == 0)\n\t\t\tret ~= i;\n\t}\n\treturn ret;\n}",
    "{\n\tlong[] result;\n\tforeach(i; l)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[];\n\tforeach(i; l)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result;\n\tforeach(i; l)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result;\n\tforeach(i; l)\n\t{\n\t\tif(i % 2 == 0)\n\t\t\tresult ~= i;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[0];\n\tforeach(i; l)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] new_l = [];\n\tforeach(i; l)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tnew_l ~= i;\n\t\t}\n\t}\n\treturn new_l;\n}",
    "{\n\tlong[] res = new long[];\n\tforeach(i; l)\n\t{\n\t\tif(i % 2 == 0)\n\t\t\tres ~= i;\n\t}\n\treturn res;\n}",
    "{\n\tlong[] result;\n\tforeach(i; l)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] ret;\n\tforeach(i; l)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tret ~= i;\n\t\t}\n\t}\n\treturn ret;\n}",
    "{\n\tlong[] ret;\n\tforeach(i; l)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tret ~= i;\n\t\t}\n\t}\n\treturn ret;\n}",
    "{\n\tlong[] ret;\n\tforeach(i; l)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tret ~= i;\n\t\t}\n\t}\n\treturn ret;\n}",
    "{\n\tlong[] result;\n\tforeach(i; l)\n\t{\n\t\tif(i % 2 == 0)\n\t\t\tresult ~= i;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result;\n\tforeach(i; l)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] ret;\n\tforeach(i; l)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tret ~= i;\n\t\t}\n\t}\n\treturn ret;\n}",
    "{\n\tlong[] ret = new long[0];\n\tforeach(i; l)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tret ~= i;\n\t\t}\n\t}\n\treturn ret;\n}"
  ]
}