{
  "name": "mbpp_572_two_unique_nums",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to remove duplicate numbers from a given number of arrays.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_572_two_unique_nums.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tlong[] unique_nums = new long[2];\n\tlong xor_result = 0;\n\tforeach(num; nums)\n\t{\n\t\txor_result ^= num;\n\t}\n\t\n\tlong bit_pos = 0;\n\tfor(int i = 0; i < 64; i++)\n\t{\n\t\tif((xor_result & (1 << i)) != 0)\n\t\t{\n\t\t\tbit_pos = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tlong num1 = 0;\n\tlong num2 = 0;\n\tforeach(num; nums)\n\t{\n\t\tif((num & (1 << bit_pos)) != 0)\n\t\t{\n\t\t\tnum1 ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnum2 ^= num;\n\t\t}\n\t}\n\t\n\tunique_nums[0] = num1;\n\tunique_nums[1] = num2;\n\treturn unique_nums;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong mask = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & mask) != 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] unique_nums = new long[2];\n\tforeach(num; nums)\n\t{\n\t\tif(unique_nums[0] == num)\n\t\t{\n\t\t\tunique_nums[1] = num;\n\t\t\tbreak;\n\t\t}\n\t\telse\n\t\t\tunique_nums[0] = num;\n\t}\n\treturn unique_nums;\n}",
    "{\n\tlong[] unique_nums = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\tlong right_most_bit = xor & ~(xor - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & right_most_bit) != 0)\n\t\t{\n\t\t\tunique_nums[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tunique_nums[1] ^= num;\n\t\t}\n\t}\n\treturn unique_nums;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) != 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] unique_nums = new long[2];\n\tlong xor_res = 0;\n\tforeach(num; nums)\n\t{\n\t\txor_res ^= num;\n\t}\n\t\n\tlong bit_pos = xor_res & ~(xor_res - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit_pos) == 0)\n\t\t{\n\t\t\tunique_nums[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tunique_nums[1] ^= num;\n\t\t}\n\t}\n\treturn unique_nums;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor_result = 0;\n\tforeach(num; nums)\n\t{\n\t\txor_result ^= num;\n\t}\n\t\n\t// Get the rightmost set bit\n\tlong rightmost_set_bit = xor_result & ~(xor_result - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & rightmost_set_bit) != 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] unique_nums = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong bit = xor & ~(xor - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) != 0)\n\t\t{\n\t\t\tunique_nums[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tunique_nums[1] ^= num;\n\t\t}\n\t}\n\treturn unique_nums;\n}",
    "{\n\tlong[] unique_nums = new long[2];\n\tunique_nums[0] = nums[0];\n\tunique_nums[1] = nums[1];\n\t\n\tfor (int i = 2; i < nums.length; i++) \n\t{\n\t\tif (nums[i] != unique_nums[0] && nums[i] != unique_nums[1]) \n\t\t{\n\t\t\tunique_nums[0] = nums[i];\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tfor (int i = 2; i < nums.length; i++) \n\t{\n\t\tif (nums[i] != unique_nums[0] && nums[i] != unique_nums[1]) \n\t\t{\n\t\t\tunique_nums[1] = nums[i];\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn unique_nums;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\tlong mask = xor & -xor;\n\tforeach(num; nums)\n\t{\n\t\tif((num & mask) == 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] unique_nums = new long[2];\n\tforeach(num; nums)\n\t{\n\t\tif(unique_nums[0] == 0)\n\t\t{\n\t\t\tunique_nums[0] = num;\n\t\t}\n\t\telse if(unique_nums[1] == 0)\n\t\t{\n\t\t\tif(unique_nums[0] == num)\n\t\t\t{\n\t\t\t\tunique_nums[1] = num;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tunique_nums[1] = num;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(unique_nums[0] == num)\n\t\t\t{\n\t\t\t\tunique_nums[0] = unique_nums[1];\n\t\t\t\tunique_nums[1] = num;\n\t\t\t}\n\t\t\telse if(unique_nums[1] == num)\n\t\t\t{\n\t\t\t\tunique_nums[1] = num;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tunique_nums[0] = num;\n\t\t\t}\n\t\t}\n\t}\n\treturn unique_nums;\n}",
    "{\n\tlong[] unique_nums = new long[2];\n\tlong[] nums_copy = nums.dup;\n\tnums_copy.sort;\n\tnums_copy.uniq;\n\tunique_nums[0] = nums_copy[0];\n\tunique_nums[1] = nums_copy[1];\n\treturn unique_nums;\n}",
    "{\n\tlong[] unique_nums = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t\txor ^= num;\n\t\n\tlong bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) == 0)\n\t\t\tunique_nums[0] ^= num;\n\t\telse\n\t\t\tunique_nums[1] ^= num;\n\t}\n\treturn unique_nums;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\tlong bit = xor & ~(xor - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) == 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] unique_nums = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) == 0)\n\t\t{\n\t\t\tunique_nums[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tunique_nums[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn unique_nums;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums) \n\t{\n\t\txor ^= num;\n\t}\n\tlong mask = xor & -xor;\n\tforeach(num; nums) \n\t{\n\t\tif((num & mask) == 0) \n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\tlong bit = xor & ~(xor - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) != 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] unique_nums = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\tlong bit = xor & ~(xor - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) == 0)\n\t\t{\n\t\t\tunique_nums[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tunique_nums[1] ^= num;\n\t\t}\n\t}\n\treturn unique_nums;\n}",
    "{\n\tlong[] unique_nums = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\tlong bit = xor & ~(xor - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) != 0)\n\t\t{\n\t\t\tunique_nums[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tunique_nums[1] ^= num;\n\t\t}\n\t}\n\treturn unique_nums;\n}",
    "{\n\tlong[] unique_nums = new long[2];\n\tlong xor_result = 0;\n\tforeach(num; nums)\n\t{\n\t\txor_result ^= num;\n\t}\n\t\n\tunique_nums[0] = xor_result;\n\tunique_nums[1] = xor_result;\n\treturn unique_nums;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor_result = 0;\n\tforeach(num; nums)\n\t{\n\t\txor_result ^= num;\n\t}\n\tlong last_bit = xor_result & ~(xor_result - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & last_bit) == 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\tlong bit = xor & ~(xor - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) == 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] uniq_nums = new long[2];\n\tlong xor_result = 0;\n\tforeach(num; nums)\n\t{\n\t\txor_result ^= num;\n\t}\n\tlong rightmost_set_bit = xor_result & ~(xor_result - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & rightmost_set_bit) != 0)\n\t\t{\n\t\t\tuniq_nums[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tuniq_nums[1] ^= num;\n\t\t}\n\t}\n\treturn uniq_nums;\n}",
    "{\n\tlong[] unique_nums = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) == 0)\n\t\t{\n\t\t\tunique_nums[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tunique_nums[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn unique_nums;\n}",
    "{\n\tlong[] unique_nums = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\tlong right_most_bit = xor & ~(xor - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & right_most_bit) != 0)\n\t\t{\n\t\t\tunique_nums[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tunique_nums[1] ^= num;\n\t\t}\n\t}\n\treturn unique_nums;\n}",
    "{\n\tlong[] unique_nums = new long[2];\n\tlong[] num_count = new long[nums.length];\n\t\n\tforeach(i, num; nums)\n\t{\n\t\tnum_count[num]++;\n\t}\n\t\n\tforeach(i, num; num_count)\n\t{\n\t\tif(num == 1)\n\t\t{\n\t\t\tunique_nums ~= i;\n\t\t}\n\t}\n\t\n\treturn unique_nums;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\tlong bit = xor & ~(xor - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) != 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] unique_nums = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t\txor ^= num;\n\tunique_nums[0] = xor;\n\tunique_nums[1] = xor;\n\treturn unique_nums;\n}",
    "{\n\tlong[] unique_nums;\n\tlong[] temp_nums;\n\tlong[] temp_nums2;\n\tlong[] temp_nums3;\n\tlong[] temp_nums4;\n\tlong[] temp_nums5;\n\tlong[] temp_nums6;\n\tlong[] temp_nums7;\n\tlong[] temp_nums8;\n\tlong[] temp_nums9;\n\tlong[] temp_nums10;\n\tlong[] temp_nums11;\n\tlong[] temp_nums12;\n\tlong[] temp_nums13;\n\tlong[] temp_nums14;\n\tlong[] temp_nums15;\n\tlong[] temp_nums16;\n\tlong[] temp_nums17;\n\tlong[] temp_nums18;\n\tlong[] temp_nums19;\n\tlong[] temp_nums20;\n\tlong[] temp_nums21;\n\tlong[] temp_nums22;\n\tlong[] temp_nums23;\n\tlong[] temp_nums24;\n\tlong[] temp_nums25;\n\tlong[] temp_nums26;\n\tlong[] temp_nums27;\n\tlong[] temp_nums28;\n\tlong[] temp_nums29;\n\tlong[] temp_nums30;\n\tlong[] temp_nums31;\n\tlong[] temp_nums32;\n\tlong[] temp_nums33;\n\tlong[] temp_nums34;\n\tlong[] temp_nums35;\n\tlong[] temp_nums36;\n\tlong[] temp_nums37;\n\tlong[] temp_nums38;\n\tlong[] temp_nums39;\n\tlong[] temp_nums40;\n\tlong[] temp_nums41;\n\tlong[] temp_nums42;\n\tlong[] temp_nums43;\n\tlong[] temp_nums44;\n\tlong[] temp_nums45;\n\tlong[] temp_nums46;\n\tlong[] temp_nums47;\n\tlong[] temp_nums48;\n\tlong[] temp_nums49;\n\tlong[] temp_nums50;\n\t",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\tlong bit = xor & ~(xor - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) != 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\tlong bit = xor & ~(xor - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) != 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] unique_nums = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) != 0)\n\t\t{\n\t\t\tunique_nums[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tunique_nums[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn unique_nums;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\tlong bit = xor & ~(xor - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) == 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tauto nums_set = nums.dup.sort.uniq;\n\treturn nums_set[0..2];\n}",
    "{\n\tlong[] result;\n\tforeach(num; nums)\n\t{\n\t\tif(result.length == 0)\n\t\t{\n\t\t\tresult ~= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(result.length == 1)\n\t\t\t{\n\t\t\t\tif(result[0] != num)\n\t\t\t\t{\n\t\t\t\t\tresult ~= num;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(result[0] != num && result[1] != num)\n\t\t\t\t{\n\t\t\t\t\tresult ~= num;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] unique_nums = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\tunique_nums[0] = xor;\n\tunique_nums[1] = xor;\n\t\n\treturn unique_nums;\n}",
    "{\n\tlong[] unique_nums = new long[2];\n\tlong xor_num = 0;\n\tforeach(num; nums)\n\t{\n\t\txor_num ^= num;\n\t}\n\t\n\tlong bit_set = xor_num & ~(xor_num - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit_set) != 0)\n\t\t{\n\t\t\tunique_nums[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tunique_nums[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn unique_nums;\n}",
    "{\n\tlong[] unique_nums = new long[2];\n\tlong xor_result = 0;\n\tforeach(num; nums)\n\t{\n\t\txor_result ^= num;\n\t}\n\t\n\tlong bit_mask = xor_result & ~(xor_result - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit_mask) != 0)\n\t\t{\n\t\t\tunique_nums[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tunique_nums[1] ^= num;\n\t\t}\n\t}\n\treturn unique_nums;\n}",
    "{\n\tlong[] unique_nums = new long[2];\n\tlong xor_result = 0;\n\tforeach(num; nums)\n\t{\n\t\txor_result ^= num;\n\t}\n\tunique_nums[0] = xor_result;\n\tunique_nums[1] = xor_result;\n\treturn unique_nums;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\tlong bit = xor & ~(xor - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) == 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums) \n\t{\n\t\txor ^= num;\n\t}\n\tlong bit = xor & ~(xor - 1);\n\tforeach(num; nums) \n\t{\n\t\tif((num & bit) == 0) \n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor_result = 0;\n\tforeach(num; nums)\n\t{\n\t\txor_result ^= num;\n\t}\n\t\n\tlong right_most_bit = xor_result & ~(xor_result - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & right_most_bit) != 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) != 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) != 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong rightmost_set_bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & rightmost_set_bit) != 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] unique_nums = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\tlong bit = xor & ~(xor - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) != 0)\n\t\t{\n\t\t\tunique_nums[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tunique_nums[1] ^= num;\n\t\t}\n\t}\n\treturn unique_nums;\n}",
    "{\n\tlong[] unique_nums = new long[2];\n\tint i = 0;\n\tforeach(num; nums)\n\t{\n\t\tif(num != unique_nums[0] && num != unique_nums[1])\n\t\t{\n\t\t\tunique_nums[i] = num;\n\t\t\ti++;\n\t\t}\n\t}\n\treturn unique_nums;\n}",
    "{\n\tlong[] unique_nums = new long[2];\n\tunique_nums[0] = unique_nums[1] = 0;\n\tforeach(num; nums)\n\t{\n\t\tif(num == unique_nums[0])\n\t\t\tcontinue;\n\t\telse if(num == unique_nums[1])\n\t\t\tunique_nums[1] = 0;\n\t\telse if(unique_nums[0] == 0)\n\t\t\tunique_nums[0] = num;\n\t\telse if(unique_nums[1] == 0)\n\t\t\tunique_nums[1] = num;\n\t}\n\treturn unique_nums;\n}",
    "{\n\tlong[] unique_nums = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums) \n\t{\n\t\txor ^= num;\n\t}\n\tlong bit = xor & ~(xor - 1);\n\tforeach(num; nums) \n\t{\n\t\tif((num & bit) != 0) \n\t\t{\n\t\t\tunique_nums[0] ^= num;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tunique_nums[1] ^= num;\n\t\t}\n\t}\n\treturn unique_nums;\n}",
    "{\n\tlong[] unique_nums = new long[2];\n\tlong xor_result = 0;\n\tforeach(num; nums)\n\t{\n\t\txor_result ^= num;\n\t}\n\tlong right_most_set_bit = xor_result & ~(xor_result - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & right_most_set_bit) != 0)\n\t\t{\n\t\t\tunique_nums[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tunique_nums[1] ^= num;\n\t\t}\n\t}\n\treturn unique_nums;\n}",
    "{\n\tlong[] result;\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\tlong bit = xor & ~(xor - 1);\n\tlong num1 = 0;\n\tlong num2 = 0;\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) == 0)\n\t\t{\n\t\t\tnum1 ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnum2 ^= num;\n\t\t}\n\t}\n\tresult ~= num1;\n\tresult ~= num2;\n\treturn result;\n}",
    "{\n\tlong[] unique_nums = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) == 0)\n\t\t{\n\t\t\tunique_nums[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tunique_nums[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn unique_nums;\n}",
    "{\n\tlong[] unique_nums = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums) \n\t{\n\t\txor ^= num;\n\t}\n\tlong right_most_set_bit = xor & ~(xor - 1);\n\tforeach(num; nums) \n\t{\n\t\tif((num & right_most_set_bit) != 0) \n\t\t{\n\t\t\tunique_nums[0] ^= num;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tunique_nums[1] ^= num;\n\t\t}\n\t}\n\treturn unique_nums;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums) \n\t{\n\t\txor ^= num;\n\t}\n\tlong bit = xor & ~(xor - 1);\n\tforeach(num; nums) \n\t{\n\t\tif((num & bit) == 0) \n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] unique_nums = new long[2];\n\tforeach(num; nums)\n\t{\n\t\tif(num != unique_nums[0])\n\t\t{\n\t\t\tunique_nums[1] = unique_nums[0];\n\t\t\tunique_nums[0] = num;\n\t\t}\n\t}\n\treturn unique_nums;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong mask = xor & -xor;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & mask) == 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n    long[] result = new long[2];\n    long xor = 0;\n    foreach(num; nums)\n    {\n        xor ^= num;\n    }\n    long bit = xor & ~(xor - 1);\n    foreach(num; nums)\n    {\n        if((num & bit) != 0)\n        {\n            result[0] ^= num;\n        }\n        else\n        {\n            result[1] ^= num;\n        }\n    }\n    return result;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t\txor ^= num;\n\tlong bit = xor & ~(xor - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) == 0)\n\t\t\tresult[0] ^= num;\n\t\telse\n\t\t\tresult[1] ^= num;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\tlong bit = xor & ~(xor - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) == 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong mask = xor & -xor;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & mask) == 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] unique_nums = new long[2];\n\tlong xor_num = 0;\n\tforeach(num; nums)\n\t{\n\t\txor_num ^= num;\n\t}\n\t\n\tlong bit_mask = xor_num & ~(xor_num - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit_mask) != 0)\n\t\t{\n\t\t\tunique_nums[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tunique_nums[1] ^= num;\n\t\t}\n\t}\n\treturn unique_nums;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\tlong bit = xor & ~(xor - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) != 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t\txor ^= num;\n\tlong right_most_set_bit = xor & ~(xor - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & right_most_set_bit) != 0)\n\t\t\tresult[0] ^= num;\n\t\telse\n\t\t\tresult[1] ^= num;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t\txor ^= num;\n\t\n\tlong right_most_set_bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & right_most_set_bit) != 0)\n\t\t\tresult[0] ^= num;\n\t\telse\n\t\t\tresult[1] ^= num;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\tlong bit = xor & ~(xor - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) == 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] unique_nums = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) != 0)\n\t\t{\n\t\t\tunique_nums[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tunique_nums[1] ^= num;\n\t\t}\n\t}\n\treturn unique_nums;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t\txor ^= num;\n\tlong right_most_bit = xor & ~(xor - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & right_most_bit) != 0)\n\t\t\tresult[0] ^= num;\n\t\telse\n\t\t\tresult[1] ^= num;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) == 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] unique_nums = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) != 0)\n\t\t{\n\t\t\tunique_nums[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tunique_nums[1] ^= num;\n\t\t}\n\t}\n\treturn unique_nums;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) != 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\tlong right_most_set_bit = xor & ~(xor-1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & right_most_set_bit) != 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] unique_nums = new long[2];\n\tlong xor_num = 0;\n\tforeach(num; nums)\n\t{\n\t\txor_num ^= num;\n\t}\n\t\n\tint bit_index = 0;\n\twhile(xor_num != 0)\n\t{\n\t\tif(xor_num & 1)\n\t\t{\n\t\t\tbreak;\n\t\t}\n\t\tbit_index++;\n\t\txor_num >>= 1;\n\t}\n\t\n\tlong mask = 1 << bit_index;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & mask) != 0)\n\t\t{\n\t\t\tunique_nums[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tunique_nums[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn unique_nums;\n}",
    "{\n\tlong[] unique_nums = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\tunique_nums[0] = xor;\n\tunique_nums[1] = xor;\n\t\n\treturn unique_nums;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\tlong bit = xor & ~(xor - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) == 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) != 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t\txor ^= num;\n\t\n\tlong last_bit = xor & (~(xor - 1));\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & last_bit) != 0)\n\t\t\tresult[0] ^= num;\n\t\telse\n\t\t\tresult[1] ^= num;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t\txor ^= num;\n\t\n\tlong right_most_set_bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & right_most_set_bit) != 0)\n\t\t\tresult[0] ^= num;\n\t\telse\n\t\t\tresult[1] ^= num;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] unique_nums = new long[2];\n\tlong xor_num = 0;\n\tforeach(num; nums)\n\t{\n\t\txor_num ^= num;\n\t}\n\t\n\tlong right_most_bit = xor_num & ~(xor_num - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & right_most_bit) != 0)\n\t\t{\n\t\t\tunique_nums[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tunique_nums[1] ^= num;\n\t\t}\n\t}\n\treturn unique_nums;\n}",
    "{\n\tlong[] unique_nums = new long[2];\n\tforeach(i; 0 .. nums.length)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\tunique_nums[0] = nums[i];\n\t\t}\n\t\telse if(i == 1)\n\t\t{\n\t\t\tif(nums[i] != unique_nums[0])\n\t\t\t{\n\t\t\t\tunique_nums[1] = nums[i];\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(nums[i] != unique_nums[0] && nums[i] != unique_nums[1])\n\t\t\t{\n\t\t\t\tunique_nums[1] = nums[i];\n\t\t\t}\n\t\t\telse if(nums[i] == unique_nums[0])\n\t\t\t{\n\t\t\t\tunique_nums[0] = unique_nums[1];\n\t\t\t\tunique_nums[1] = nums[i];\n\t\t\t}\n\t\t}\n\t}\n\treturn unique_nums;\n}",
    "{\n\tlong[] unique_nums = new long[2];\n\tforeach(num; nums)\n\t{\n\t\tif(unique_nums[0] == 0)\n\t\t{\n\t\t\tunique_nums[0] = num;\n\t\t}\n\t\telse if(unique_nums[0] == num)\n\t\t{\n\t\t\tunique_nums[0] = 0;\n\t\t}\n\t\telse if(unique_nums[1] == 0)\n\t\t{\n\t\t\tunique_nums[1] = num;\n\t\t}\n\t\telse if(unique_nums[1] == num)\n\t\t{\n\t\t\tunique_nums[1] = 0;\n\t\t}\n\t}\n\treturn unique_nums;\n}",
    "{\n\tlong[] unique_nums = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) == 0)\n\t\t{\n\t\t\tunique_nums[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tunique_nums[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn unique_nums;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t\txor ^= num;\n\tlong bit = xor & ~(xor - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) != 0)\n\t\t\tresult[0] ^= num;\n\t\telse\n\t\t\tresult[1] ^= num;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong bit = 1;\n\twhile((xor & bit) == 0)\n\t{\n\t\tbit <<= 1;\n\t}\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) == 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t\txor ^= num;\n\tlong bit = xor & ~(xor - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) != 0)\n\t\t\tresult[0] ^= num;\n\t\telse\n\t\t\tresult[1] ^= num;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong bit = xor & ~(xor - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) != 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) != 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] unique_nums = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums) \n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong rightmost_set_bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums) \n\t{\n\t\tif((num & rightmost_set_bit) != 0) \n\t\t{\n\t\t\tunique_nums[0] ^= num;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tunique_nums[1] ^= num;\n\t\t}\n\t}\n\treturn unique_nums;\n}",
    "{\n\tlong[] unique_nums = new long[2];\n\tforeach(num; nums)\n\t{\n\t\tif(num != unique_nums[0] && num != unique_nums[1])\n\t\t{\n\t\t\tif(unique_nums[0] == 0)\n\t\t\t{\n\t\t\t\tunique_nums[0] = num;\n\t\t\t}\n\t\t\telse if(unique_nums[1] == 0)\n\t\t\t{\n\t\t\t\tunique_nums[1] = num;\n\t\t\t}\n\t\t}\n\t}\n\treturn unique_nums;\n}",
    "{\n\tlong[] unique_nums = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\tlong right_most_set_bit = xor & ~(xor-1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & right_most_set_bit) != 0)\n\t\t{\n\t\t\tunique_nums[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tunique_nums[1] ^= num;\n\t\t}\n\t}\n\treturn unique_nums;\n}",
    "{\n\tlong[] unique_nums;\n\tforeach(num; nums)\n\t{\n\t\tif(unique_nums.length == 0)\n\t\t{\n\t\t\tunique_nums ~= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(unique_nums.length == 1)\n\t\t\t{\n\t\t\t\tif(unique_nums[0] != num)\n\t\t\t\t{\n\t\t\t\t\tunique_nums ~= num;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tunique_nums = [];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn unique_nums;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\tlong bit = xor & ~(xor - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) == 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums) \n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong bit = xor & -xor;\n\t\n\tforeach(num; nums) \n\t{\n\t\tif((num & bit) == 0) \n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] unique_nums = new long[2];\n\tlong xor_result = 0;\n\tforeach(num; nums)\n\t{\n\t\txor_result ^= num;\n\t}\n\tlong right_most_set_bit = xor_result & ~(xor_result - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & right_most_set_bit) != 0)\n\t\t{\n\t\t\tunique_nums[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tunique_nums[1] ^= num;\n\t\t}\n\t}\n\treturn unique_nums;\n}",
    "{\n\tlong[] unique_nums = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\tlong right_most_set_bit = xor & ~(xor - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & right_most_set_bit) != 0)\n\t\t{\n\t\t\tunique_nums[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tunique_nums[1] ^= num;\n\t\t}\n\t}\n\treturn unique_nums;\n}",
    "{\n\tlong[] unique_nums = new long[2];\n\tlong xor_num = 0;\n\tforeach(num; nums)\n\t{\n\t\txor_num ^= num;\n\t}\n\tlong bit_mask = xor_num & ~(xor_num - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit_mask) != 0)\n\t\t{\n\t\t\tunique_nums[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tunique_nums[1] ^= num;\n\t\t}\n\t}\n\treturn unique_nums;\n}",
    "{\n\tlong[] unique_nums = new long[2];\n\tlong xor_result = 0;\n\tforeach(num; nums) \n\t{\n\t\txor_result ^= num;\n\t}\n\t\n\tlong bit_set = xor_result & ~(xor_result - 1);\n\t\n\tforeach(num; nums) \n\t{\n\t\tif((num & bit_set) == 0) \n\t\t{\n\t\t\tunique_nums[0] ^= num;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tunique_nums[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn unique_nums;\n}",
    "{\n\tlong[] unique_nums = new long[2];\n\tlong xor_result = 0;\n\tforeach(num; nums)\n\t{\n\t\txor_result ^= num;\n\t}\n\tlong bit_position = xor_result & ~(xor_result - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit_position) == 0)\n\t\t{\n\t\t\tunique_nums[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tunique_nums[1] ^= num;\n\t\t}\n\t}\n\treturn unique_nums;\n}",
    "{\n\tlong[] ret = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((bit & num) != 0)\n\t\t{\n\t\t\tret[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tret[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn ret;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\tlong bit = xor & ~(xor - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) == 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t\txor ^= num;\n\t\n\tlong right_most_bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & right_most_bit) == 0)\n\t\t\tresult[0] ^= num;\n\t\telse\n\t\t\tresult[1] ^= num;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] unique_nums = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((bit & num) == 0)\n\t\t{\n\t\t\tunique_nums[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tunique_nums[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn unique_nums;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) != 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t\txor ^= num;\n\tlong bit = xor & ~(xor - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) != 0)\n\t\t\tresult[0] ^= num;\n\t\telse\n\t\t\tresult[1] ^= num;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums) \n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums) \n\t{\n\t\tif((num & bit) == 0) \n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] unique_nums = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\tlong bit = xor & ~(xor - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) != 0)\n\t\t{\n\t\t\tunique_nums[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tunique_nums[1] ^= num;\n\t\t}\n\t}\n\treturn unique_nums;\n}",
    "{\n\tlong[] unique_nums = new long[2];\n\tforeach(i, num; nums)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\tunique_nums[0] = num;\n\t\t\tunique_nums[1] = num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num != unique_nums[0] && num != unique_nums[1])\n\t\t\t{\n\t\t\t\tunique_nums[0] = num;\n\t\t\t\tunique_nums[1] = num;\n\t\t\t}\n\t\t}\n\t}\n\treturn unique_nums;\n}",
    "{\n\tlong[] unique_nums = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\t// Get the rightmost set bit\n\tlong rightmost_set_bit = xor & ~(xor - 1);\n\t\n\t// Split the array into two groups\n\tforeach(num; nums)\n\t{\n\t\tif((num & rightmost_set_bit) == 0)\n\t\t{\n\t\t\tunique_nums[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tunique_nums[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn unique_nums;\n}",
    "{\n\tlong[] unique_nums = new long[2];\n\tforeach(num; nums)\n\t{\n\t\tif(unique_nums[0] == 0)\n\t\t{\n\t\t\tunique_nums[0] = num;\n\t\t}\n\t\telse if(unique_nums[1] == 0)\n\t\t{\n\t\t\tif(unique_nums[0] != num)\n\t\t\t{\n\t\t\t\tunique_nums[1] = num;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(unique_nums[0] == num)\n\t\t\t{\n\t\t\t\tunique_nums[0] = 0;\n\t\t\t}\n\t\t\telse if(unique_nums[1] == num)\n\t\t\t{\n\t\t\t\tunique_nums[1] = 0;\n\t\t\t}\n\t\t}\n\t}\n\treturn unique_nums;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) == 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach (num; nums) \n\t{\n\t\txor ^= num;\n\t}\n\tlong bit = xor & ~(xor - 1);\n\tforeach (num; nums) \n\t{\n\t\tif ((num & bit) != 0) \n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] unique_nums;\n\tforeach(num; nums)\n\t{\n\t\tif(!unique_nums.canFind(num))\n\t\t{\n\t\t\tunique_nums ~= num;\n\t\t}\n\t}\n\treturn unique_nums;\n}",
    "{\n\tlong[] result = new long[2];\n\tforeach(num; nums)\n\t{\n\t\tif(result[0] == 0)\n\t\t{\n\t\t\tresult[0] = num;\n\t\t}\n\t\telse if(result[1] == 0)\n\t\t{\n\t\t\tresult[1] = num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num == result[0])\n\t\t\t{\n\t\t\t\tresult[1] = 0;\n\t\t\t}\n\t\t\telse if(num == result[1])\n\t\t\t{\n\t\t\t\tresult[0] = 0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult[0] = num;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nlong[] three_unique_nums(long[] nums) \n{\n\tlong[] result = new long[3];\n\tforeach(num; nums)\n\t{\n\t\tif(result[0] == 0)\n\t\t{\n\t\t\tresult[0] = num;\n\t\t}\n\t\telse if(result[1] == 0)\n\t\t{\n\t\t\tresult[1] = num;\n\t\t}\n\t\telse if(result[2] == 0)\n\t\t{\n\t\t\tresult[2] = num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num == result[0])\n\t\t\t{\n\t\t\t\tresult[1] = 0;\n\t\t\t\tresult[2] = 0;\n\t\t\t}\n\t\t\telse if(num == result[1])\n\t\t\t{\n\t\t\t\tresult[0] = 0;\n\t\t\t\tresult[2] = 0;\n\t\t\t}\n\t\t\telse if(num == result[2])\n\t\t\t{\n\t\t\t\tresult[0] = 0;\n\t\t\t\tresult[1] = 0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult[0] =",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t\txor ^= num;\n\t\n\tlong mask = xor & -xor;\n\tlong num1 = 0;\n\tlong num2 = 0;\n\tforeach(num; nums)\n\t{\n\t\tif((num & mask) == 0)\n\t\t\tnum1 ^= num;\n\t\telse\n\t\t\tnum2 ^= num;\n\t}\n\tresult[0] = num1;\n\tresult[1] = num2;\n\treturn result;\n}",
    "{\n\tlong[] unique_nums = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\tlong bit_pos = xor & ~(xor - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit_pos) != 0)\n\t\t{\n\t\t\tunique_nums[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tunique_nums[1] ^= num;\n\t\t}\n\t}\n\treturn unique_nums;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums) \n\t{\n\t\txor ^= num;\n\t}\n\tlong bit = xor & ~(xor - 1);\n\tforeach(num; nums) \n\t{\n\t\tif((num & bit) == 0) \n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) != 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\t// Get the rightmost set bit\n\tlong right_most_set_bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & right_most_set_bit) != 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\tlong bit = xor & ~(xor - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) == 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\tlong mask = xor & -xor;\n\tforeach(num; nums)\n\t{\n\t\tif((num & mask) == 0)\n\t\t\tresult[0] ^= num;\n\t\telse\n\t\t\tresult[1] ^= num;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] unique_nums = new long[2];\n\tforeach(num; nums)\n\t{\n\t\tif(num != unique_nums[0])\n\t\t{\n\t\t\tunique_nums[1] = unique_nums[0];\n\t\t\tunique_nums[0] = num;\n\t\t}\n\t}\n\treturn unique_nums;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\tlong mask = xor & ~(xor - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & mask) != 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums) \n\t{\n\t\txor ^= num;\n\t}\n\tlong bit = xor & ~(xor - 1);\n\tforeach(num; nums) \n\t{\n\t\tif((num & bit) != 0) \n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(n; nums)\n\t{\n\t\txor ^= n;\n\t}\n\t\n\t// find the rightmost bit that is 1\n\tlong rightmost_bit = xor & ~(xor - 1);\n\t\n\tforeach(n; nums)\n\t{\n\t\tif((n & rightmost_bit) != 0)\n\t\t{\n\t\t\tresult[0] ^= n;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= n;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) != 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums) \n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums) \n\t{\n\t\tif((num & bit) != 0) \n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] unique_nums = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) != 0)\n\t\t{\n\t\t\tunique_nums[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tunique_nums[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn unique_nums;\n}",
    "{\n\tlong[] unique_nums = new long[2];\n\t\n\tforeach(i; 0 .. nums.length)\n\t{\n\t\tif(nums[i] != nums[i+1])\n\t\t{\n\t\t\tunique_nums[0] = nums[i];\n\t\t\tunique_nums[1] = nums[i+1];\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn unique_nums;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong right_most_bit = xor & ~(xor - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & right_most_bit) != 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] unique_nums = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\tlong bit_set = xor & ~(xor - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit_set) != 0)\n\t\t{\n\t\t\tunique_nums[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tunique_nums[1] ^= num;\n\t\t}\n\t}\n\treturn unique_nums;\n}",
    "{\n\tlong[] res = new long[2];\n\tlong xor = 0;\n\tfor (long num : nums)\n\t\txor ^= num;\n\t\n\tlong mask = xor & -xor;\n\t\n\tfor (long num : nums)\n\t{\n\t\tif ((num & mask) == 0)\n\t\t\tres[0] ^= num;\n\t\telse\n\t\t\tres[1] ^= num;\n\t}\n\t\n\treturn res;\n}",
    "{\n\tlong[] unique_nums = new long[2];\n\tlong xor_result = 0;\n\tforeach(num; nums)\n\t{\n\t\txor_result ^= num;\n\t}\n\tlong last_bit = xor_result & ~(xor_result - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & last_bit) != 0)\n\t\t{\n\t\t\tunique_nums[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tunique_nums[1] ^= num;\n\t\t}\n\t}\n\treturn unique_nums;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\tlong bit = xor & ~(xor - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) != 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] unique_nums = new long[2];\n\tlong xor_num = 0;\n\tforeach(num; nums)\n\t{\n\t\txor_num ^= num;\n\t}\n\t\n\tlong right_most_bit = xor_num & ~(xor_num - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & right_most_bit) != 0)\n\t\t{\n\t\t\tunique_nums[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tunique_nums[1] ^= num;\n\t\t}\n\t}\n\treturn unique_nums;\n}",
    "{\n\tlong[] unique_nums = new long[2];\n\tlong xor_result = 0;\n\tforeach(num; nums)\n\t{\n\t\txor_result ^= num;\n\t}\n\t\n\tlong last_bit = xor_result & ~(xor_result - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & last_bit) == 0)\n\t\t{\n\t\t\tunique_nums[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tunique_nums[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn unique_nums;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t\txor ^= num;\n\tlong bit = xor & ~(xor - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) == 0)\n\t\t\tresult[0] ^= num;\n\t\telse\n\t\t\tresult[1] ^= num;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) == 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\tlong bit = xor & ~(xor - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) == 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\tlong bit = xor & ~(xor - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) != 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\tlong bit = xor & ~(xor - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) != 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] unique_nums = new long[2];\n\tlong xor_result = 0;\n\tforeach(num; nums) \n\t{\n\t\txor_result ^= num;\n\t}\n\t\n\tlong right_most_set_bit = xor_result & ~(xor_result - 1);\n\t\n\tforeach(num; nums) \n\t{\n\t\tif((num & right_most_set_bit) != 0) \n\t\t{\n\t\t\tunique_nums[0] ^= num;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tunique_nums[1] ^= num;\n\t\t}\n\t}\n\treturn unique_nums;\n}",
    "{\n\tlong[] unique_nums = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong bit = xor & ~(xor-1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) == 0)\n\t\t{\n\t\t\tunique_nums[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tunique_nums[1] ^= num;\n\t\t}\n\t}\n\treturn unique_nums;\n}",
    "{\n\tlong[] unique_nums = new long[2];\n\tlong xor_result = 0;\n\tforeach(num; nums)\n\t{\n\t\txor_result ^= num;\n\t}\n\t\n\tlong right_most_set_bit = xor_result & ~(xor_result - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & right_most_set_bit) != 0)\n\t\t{\n\t\t\tunique_nums[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tunique_nums[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn unique_nums;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\tlong bit = xor & ~(xor - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) != 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tfor (int i = 0; i < nums.length; i++) \n\t{\n\t\txor ^= nums[i];\n\t}\n\tlong mask = xor & -xor;\n\tfor (int i = 0; i < nums.length; i++) \n\t{\n\t\tif ((nums[i] & mask) == 0) \n\t\t{\n\t\t\tresult[0] ^= nums[i];\n\t\t} \n\t\telse \n\t\t{\n\t\t\tresult[1] ^= nums[i];\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] unique_nums = new long[2];\n\tlong xor_num = 0;\n\tforeach(num; nums)\n\t{\n\t\txor_num ^= num;\n\t}\n\t\n\tlong bit_mask = xor_num & ~(xor_num - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit_mask) != 0)\n\t\t{\n\t\t\tunique_nums[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tunique_nums[1] ^= num;\n\t\t}\n\t}\n\treturn unique_nums;\n}",
    "{\n\tlong[] unique_nums = new long[2];\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(num != unique_nums[0])\n\t\t{\n\t\t\tunique_nums[1] = unique_nums[0];\n\t\t\tunique_nums[0] = num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tunique_nums[1] = num;\n\t\t}\n\t}\n\treturn unique_nums;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tfor (int i = 0; i < nums.length; i++) \n\t{\n\t\txor ^= nums[i];\n\t}\n\tlong bit = xor & ~(xor - 1);\n\tfor (int i = 0; i < nums.length; i++) \n\t{\n\t\tif ((nums[i] & bit) != 0) \n\t\t{\n\t\t\tresult[0] ^= nums[i];\n\t\t} \n\t\telse \n\t\t{\n\t\t\tresult[1] ^= nums[i];\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\tlong bit = xor & ~(xor - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) != 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\tlong bit = xor & ~(xor - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) != 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t\txor ^= num;\n\t\n\tlong mask = xor & -xor;\n\tforeach(num; nums)\n\t{\n\t\tif((num & mask) == 0)\n\t\t\tresult[0] ^= num;\n\t\telse\n\t\t\tresult[1] ^= num;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result;\n\tlong[] temp;\n\tlong[] temp2;\n\tlong[] temp3;\n\tlong[] temp4;\n\tlong[] temp5;\n\tlong[] temp6;\n\tlong[] temp7;\n\tlong[] temp8;\n\tlong[] temp9;\n\tlong[] temp10;\n\tlong[] temp11;\n\tlong[] temp12;\n\tlong[] temp13;\n\tlong[] temp14;\n\tlong[] temp15;\n\tlong[] temp16;\n\tlong[] temp17;\n\tlong[] temp18;\n\tlong[] temp19;\n\tlong[] temp20;\n\tlong[] temp21;\n\tlong[] temp22;\n\tlong[] temp23;\n\tlong[] temp24;\n\tlong[] temp25;\n\tlong[] temp26;\n\tlong[] temp27;\n\tlong[] temp28;\n\tlong[] temp29;\n\tlong[] temp30;\n\tlong[] temp31;\n\tlong[] temp32;\n\tlong[] temp33;\n\tlong[] temp34;\n\tlong[] temp35;\n\tlong[] temp36;\n\tlong[] temp37;\n\tlong[] temp38;\n\tlong[] temp39;\n\tlong[] temp40;\n\tlong[] temp41;\n\tlong[] temp42;\n\tlong[] temp43;\n\tlong[] temp44;\n\tlong[] temp45;\n\tlong[] temp46;\n\tlong[] temp47;\n\tlong[] temp48;\n\tlong[] temp49;\n\tlong[] temp50;\n\tlong[] temp51;\n\tlong[] temp52;\n\tlong[] temp53;\n\tlong[] temp54;\n\tlong[] temp55;\n\tlong[] temp56;\n\tlong[] temp57;\n\tlong[] temp58;\n\tlong[] temp59;\n\tlong[] temp60;\n\tlong[] temp61;\n\tlong[] temp62;\n\tlong[] temp63;\n\tlong[] temp64;\n\tlong[] temp65;\n\tlong[] temp66;\n\tlong[] temp67;\n\tlong[] temp68;\n\tlong[] temp69;\n\tlong[] temp70;\n\tlong[] temp71;\n\tlong[] temp72;\n",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t\txor ^= num;\n\t\n\tlong bit = xor & ~(xor - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) == 0)\n\t\t\tresult[0] ^= num;\n\t\telse\n\t\t\tresult[1] ^= num;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong mask = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & mask) != 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] unique_nums = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\tlong mask = xor & (-xor);\n\tforeach(num; nums)\n\t{\n\t\tif((num & mask) != 0)\n\t\t{\n\t\t\tunique_nums[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tunique_nums[1] ^= num;\n\t\t}\n\t}\n\treturn unique_nums;\n}",
    "{\n\tlong[] unique_nums = new long[2];\n\tlong xor_result = 0;\n\tforeach(num; nums)\n\t{\n\t\txor_result ^= num;\n\t}\n\tlong bit_pos = xor_result & ~(xor_result - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit_pos) != 0)\n\t\t{\n\t\t\tunique_nums[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tunique_nums[1] ^= num;\n\t\t}\n\t}\n\treturn unique_nums;\n}",
    "{\n\tlong[] unique_nums = new long[2];\n\tlong xor_result = 0;\n\tforeach(num; nums)\n\t{\n\t\txor_result ^= num;\n\t}\n\tlong last_set_bit = xor_result & ~(xor_result - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & last_set_bit) != 0)\n\t\t{\n\t\t\tunique_nums[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tunique_nums[1] ^= num;\n\t\t}\n\t}\n\treturn unique_nums;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t\txor ^= num;\n\t\n\tlong right_most_set_bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & right_most_set_bit) != 0)\n\t\t\tresult[0] ^= num;\n\t\telse\n\t\t\tresult[1] ^= num;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\tlong bit = xor & ~(xor - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) != 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] unique_nums;\n\tforeach(num; nums)\n\t{\n\t\tif(unique_nums.length == 0)\n\t\t{\n\t\t\tunique_nums ~= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tbool is_unique = true;\n\t\t\tforeach(unique_num; unique_nums)\n\t\t\t{\n\t\t\t\tif(num == unique_num)\n\t\t\t\t{\n\t\t\t\t\tis_unique = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(is_unique)\n\t\t\t{\n\t\t\t\tunique_nums ~= num;\n\t\t\t}\n\t\t}\n\t}\n\treturn unique_nums;\n}",
    "{\n\tlong[] unique_nums = new long[2];\n\tlong xor_result = 0;\n\tforeach(num; nums)\n\t{\n\t\txor_result ^= num;\n\t}\n\t\n\tlong bit_set = xor_result & ~(xor_result - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit_set) == 0)\n\t\t{\n\t\t\tunique_nums[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tunique_nums[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn unique_nums;\n}",
    "{\n\tlong[] unique_nums;\n\tforeach(num; nums)\n\t{\n\t\tif(unique_nums.length == 0)\n\t\t{\n\t\t\tunique_nums ~= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(!unique_nums.canFind(num))\n\t\t\t{\n\t\t\t\tunique_nums ~= num;\n\t\t\t}\n\t\t}\n\t}\n\treturn unique_nums;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(n; nums)\n\t{\n\t\txor ^= n;\n\t}\n\tlong bit = xor & ~(xor - 1);\n\tforeach(n; nums)\n\t{\n\t\tif((n & bit) == 0)\n\t\t\tresult[0] ^= n;\n\t\telse\n\t\t\tresult[1] ^= n;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\tlong last_bit = xor & ~(xor - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & last_bit) != 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] unique_nums = new long[2];\n\tlong[] temp = new long[2];\n\tlong[] temp_nums = new long[nums.length];\n\ttemp_nums = nums;\n\tint count = 0;\n\t\n\tfor (int i = 0; i < nums.length; i++)\n\t{\n\t\tfor (int j = 0; j < nums.length; j++)\n\t\t{\n\t\t\tif (nums[i] == temp_nums[j])\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tif (count == 1)\n\t\t{\n\t\t\ttemp[0] = nums[i];\n\t\t}\n\t\tif (count == 2)\n\t\t{\n\t\t\ttemp[1] = nums[i];\n\t\t}\n\t\tcount = 0;\n\t}\n\t\n\tunique_nums[0] = temp[0];\n\tunique_nums[1] = temp[1];\n\t\n\treturn unique_nums;\n}",
    "{\n\tlong[] unique_nums = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) == 0)\n\t\t{\n\t\t\tunique_nums[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tunique_nums[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn unique_nums;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t\txor ^= num;\n\tlong right_most_set_bit = xor & ~(xor - 1);\n\tlong x = 0;\n\tlong y = 0;\n\tforeach(num; nums)\n\t{\n\t\tif((num & right_most_set_bit) != 0)\n\t\t\tx ^= num;\n\t\telse\n\t\t\ty ^= num;\n\t}\n\tresult[0] = x;\n\tresult[1] = y;\n\treturn result;\n}",
    "{\n\tlong[] unique_nums = new long[2];\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(unique_nums[0] == 0)\n\t\t{\n\t\t\tunique_nums[0] = num;\n\t\t}\n\t\telse if(unique_nums[1] == 0)\n\t\t{\n\t\t\tif(unique_nums[0] != num)\n\t\t\t{\n\t\t\t\tunique_nums[1] = num;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(unique_nums[0] == num)\n\t\t\t{\n\t\t\t\tunique_nums[0] = 0;\n\t\t\t}\n\t\t\telse if(unique_nums[1] == num)\n\t\t\t{\n\t\t\t\tunique_nums[1] = 0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tunique_nums[0] = unique_nums[1];\n\t\t\t\tunique_nums[1] = num;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn unique_nums;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\tlong mask = xor & ~(xor - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & mask) != 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] unique_nums = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\tlong rightmost_set_bit = xor & ~(xor - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & rightmost_set_bit) != 0)\n\t\t{\n\t\t\tunique_nums[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tunique_nums[1] ^= num;\n\t\t}\n\t}\n\treturn unique_nums;\n}",
    "{\n\tlong[] unique_nums = new long[2];\n\tlong[] temp = new long[2];\n\tint counter = 0;\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\t\n\tfor (i = 0; i < nums.length; i++)\n\t{\n\t\tfor (j = 0; j < nums.length; j++)\n\t\t{\n\t\t\tif (nums[i] == nums[j])\n\t\t\t{\n\t\t\t\tcounter++;\n\t\t\t}\n\t\t}\n\t\tif (counter == 1)\n\t\t{\n\t\t\ttemp[k] = nums[i];\n\t\t\tk++;\n\t\t}\n\t\tcounter = 0;\n\t}\n\t\n\tunique_nums[0] = temp[0];\n\tunique_nums[1] = temp[1];\n\t\n\treturn unique_nums;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\tlong bit = xor & ~(xor - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) != 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] unique_nums = new long[2];\n\tlong xor_result = 0;\n\tforeach(num; nums)\n\t{\n\t\txor_result ^= num;\n\t}\n\t\n\tlong bit_set = xor_result & ~(xor_result - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit_set) != 0)\n\t\t{\n\t\t\tunique_nums[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tunique_nums[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn unique_nums;\n}",
    "{\n\tlong[] unique_nums = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\tunique_nums[0] = xor;\n\tunique_nums[1] = xor;\n\treturn unique_nums;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\tlong bit = xor & ~(xor - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) == 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\tlong bit = xor & ~(xor - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) != 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result;\n\tlong xor = 0;\n\tforeach(n; nums) \n\t{\n\t\txor ^= n;\n\t}\n\t\n\tlong bit = xor & ~(xor - 1);\n\t\n\tforeach(n; nums) \n\t{\n\t\tif((n & bit) != 0) \n\t\t{\n\t\t\tresult ~= n;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t\txor ^= num;\n\t\n\tlong bit = xor & ~(xor - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) == 0)\n\t\t\tresult[0] ^= num;\n\t\telse\n\t\t\tresult[1] ^= num;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] unique_nums = new long[2];\n\tlong xor_num = 0;\n\tforeach(num; nums)\n\t{\n\t\txor_num ^= num;\n\t}\n\t\n\tlong right_most_bit = xor_num & ~(xor_num - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & right_most_bit) != 0)\n\t\t{\n\t\t\tunique_nums[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tunique_nums[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn unique_nums;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) == 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) != 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums) \n\t{\n\t\txor ^= num;\n\t}\n\tlong bit = xor & ~(xor - 1);\n\tforeach(num; nums) \n\t{\n\t\tif((num & bit) == 0) \n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong right_most_set_bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & right_most_set_bit) != 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\tint bit = xor & ~(xor - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) != 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\tlong bit = xor & ~(xor - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((bit & num) != 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) == 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] unique_nums = new long[2];\n\tlong xor_num = 0;\n\tfor (int i = 0; i < nums.length; i++)\n\t{\n\t\txor_num ^= nums[i];\n\t}\n\tlong bit_set = xor_num & ~(xor_num - 1);\n\tfor (int i = 0; i < nums.length; i++)\n\t{\n\t\tif ((nums[i] & bit_set) == 0)\n\t\t{\n\t\t\tunique_nums[0] ^= nums[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tunique_nums[1] ^= nums[i];\n\t\t}\n\t}\n\treturn unique_nums;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t\txor ^= num;\n\t\n\tlong right_most_bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & right_most_bit) != 0)\n\t\t\tresult[0] ^= num;\n\t\telse\n\t\t\tresult[1] ^= num;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\tlong bit = xor & ~(xor - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) != 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\tlong bit = xor & ~(xor - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) != 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] unique_nums = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) != 0)\n\t\t{\n\t\t\tunique_nums[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tunique_nums[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn unique_nums;\n}",
    "{\n\tlong[] result;\n\tforeach(num; nums)\n\t{\n\t\tif(result.length == 0)\n\t\t{\n\t\t\tresult ~= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(result.length == 1)\n\t\t\t{\n\t\t\t\tif(result[0] != num)\n\t\t\t\t{\n\t\t\t\t\tresult ~= num;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(result[0] != num && result[1] != num)\n\t\t\t\t{\n\t\t\t\t\tresult[0] = result[1];\n\t\t\t\t\tresult[1] = num;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) != 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] ret = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums) \n\t{\n\t\txor ^= num;\n\t}\n\tlong mask = xor & ~(xor - 1);\n\tforeach(num; nums) \n\t{\n\t\tif((num & mask) == 0) \n\t\t{\n\t\t\tret[0] ^= num;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tret[1] ^= num;\n\t\t}\n\t}\n\treturn ret;\n}",
    "{\n\tlong[] unique_nums = new long[2];\n\tforeach(num; nums)\n\t{\n\t\tif(unique_nums[0] == 0)\n\t\t{\n\t\t\tunique_nums[0] = num;\n\t\t}\n\t\telse if(unique_nums[1] == 0)\n\t\t{\n\t\t\tif(unique_nums[0] == num)\n\t\t\t{\n\t\t\t\tunique_nums[1] = num;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tunique_nums[1] = num;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(unique_nums[0] == num)\n\t\t\t{\n\t\t\t\tunique_nums[0] = unique_nums[1];\n\t\t\t\tunique_nums[1] = num;\n\t\t\t}\n\t\t\telse if(unique_nums[1] == num)\n\t\t\t{\n\t\t\t\tunique_nums[1] = num;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tunique_nums[0] = num;\n\t\t\t}\n\t\t}\n\t}\n\treturn unique_nums;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t\txor ^= num;\n\t\n\tlong bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) == 0)\n\t\t\tresult[0] ^= num;\n\t\telse\n\t\t\tresult[1] ^= num;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) == 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] ret = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) != 0)\n\t\t{\n\t\t\tret[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tret[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn ret;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong mask = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & mask) == 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] unique_nums = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) != 0)\n\t\t{\n\t\t\tunique_nums[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tunique_nums[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn unique_nums;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) != 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn result;\n}"
  ]
}