{
  "name": "mbpp_56_checks",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check if a given number is one less than twice its reverse.\n\t\n*/\nbool checks(long n) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_56_checks.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = checks;\n\n    assert(candidate(70L) == false);\n    assert(candidate(23L) == false);\n    assert(candidate(73L) == true);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tlong r = 0;\n\tlong t = n;\n\twhile (t > 0) \n\t{\n\t\tr = r * 10 + t % 10;\n\t\tt /= 10;\n\t}\n\treturn n == 2 * r - 1;\n}",
    "{\n\tlong rev = 0;\n\tlong temp = n;\n\twhile (temp != 0) \n\t{\n\t\trev = rev * 10 + temp % 10;\n\t\ttemp /= 10;\n\t}\n\treturn (n == rev + 1);\n}",
    "{\n\tauto rev = n.to!string.reverse;\n\tauto rev_num = rev.to!long;\n\treturn (n == 2 * rev_num - 1);\n}",
    "{\n\tlong r = 0;\n\tlong m = n;\n\twhile (m > 0) \n\t{\n\t\tr = r * 10 + m % 10;\n\t\tm /= 10;\n\t}\n\treturn n == 2 * r - 1;\n}",
    "{ \n\tlong rev = 0, temp = n; \n\twhile (temp != 0) \n\t{ \n\t\trev = rev * 10 + temp % 10; \n\t\ttemp /= 10; \n\t} \n\treturn (n == rev + 1 || n == rev - 1); \n} ",
    "{\n\tauto rev = n.to!string.reverse.to!long;\n\treturn n == 2*rev - 1;\n}",
    "{\n\tlong reverse = 0;\n\tlong temp = n;\n\twhile (temp != 0) \n\t{\n\t\treverse = reverse * 10 + temp % 10;\n\t\ttemp /= 10;\n\t}\n\treturn (n == reverse + 1);\n}",
    "{\n\tauto rev = n.to!string.reverse.to!long;\n\treturn rev == n - 1;\n}",
    "{\n\tlong r = n.reverse;\n\treturn (n == (2 * r) - 1);\n}",
    "{\n\tlong r = 0;\n\tlong t = n;\n\twhile (t > 0) \n\t{\n\t\tr = r * 10 + t % 10;\n\t\tt /= 10;\n\t}\n\treturn n == r * 2 - 1;\n}",
    "{\n\tlong rev = 0;\n\tlong temp = n;\n\twhile(temp != 0) \n\t{\n\t\trev = rev * 10 + temp % 10;\n\t\ttemp /= 10;\n\t}\n\treturn n == 2 * rev - 1;\n}",
    "{\n\tlong rev = 0;\n\tlong num = n;\n\twhile(num != 0)\n\t{\n\t\trev = rev * 10 + num % 10;\n\t\tnum /= 10;\n\t}\n\treturn n == rev * 2 - 1;\n}",
    "{\n\tlong r = 0;\n\tlong t = n;\n\twhile(t > 0)\n\t{\n\t\tr = r * 10 + t % 10;\n\t\tt /= 10;\n\t}\n\treturn n == 2*r - 1;\n}",
    "{\n\tlong rev = 0, temp = n;\n\twhile (temp != 0) {\n\t\trev = rev * 10 + temp % 10;\n\t\ttemp /= 10;\n\t}\n\treturn n == rev * 2 - 1;\n}",
    "{\n\tlong rev = 0;\n\tlong temp = n;\n\twhile(temp != 0)\n\t{\n\t\trev = rev * 10 + temp % 10;\n\t\ttemp /= 10;\n\t}\n\treturn (n == (2 * rev - 1));\n}",
    "{\n\tlong r = 0;\n\tlong t = n;\n\twhile (t > 0) {\n\t\tr = r * 10 + t % 10;\n\t\tt /= 10;\n\t}\n\treturn n == 2 * r - 1;\n}",
    "{\n\tlong rev = 0;\n\tlong temp = n;\n\twhile (temp != 0) \n\t{\n\t\trev = rev * 10 + temp % 10;\n\t\ttemp /= 10;\n\t}\n\treturn (n == 2 * rev - 1);\n}",
    "{\n\tlong r = 0;\n\tlong t = n;\n\twhile (t > 0) \n\t{\n\t\tr = r * 10 + t % 10;\n\t\tt /= 10;\n\t}\n\treturn n == r * 2 - 1;\n}",
    "{\n\tlong rev = 0;\n\tlong num = n;\n\twhile (num > 0) \n\t{\n\t\trev = rev * 10 + num % 10;\n\t\tnum /= 10;\n\t}\n\treturn (n == 2 * rev - 1);\n}",
    "{\n\tlong r = 0;\n\tlong temp = n;\n\twhile (temp != 0) \n\t{\n\t\tr = r * 10 + temp % 10;\n\t\ttemp = temp / 10;\n\t}\n\treturn (n == 2 * r - 1);\n}"
  ]
}