{
  "name": "mbpp_141_pancake_sort",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to sort an array of elements.\n\t\n*/\nlong[] pancake_sort(long[] nums) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_141_pancake_sort.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = pancake_sort;\n\n    assert(candidate([15L, 79L, 25L, 38L, 69L]) == [15L, 25L, 38L, 69L, 79L]);\n    assert(candidate([98L, 12L, 54L, 36L, 85L]) == [12L, 36L, 54L, 85L, 98L]);\n    assert(candidate([41L, 42L, 32L, 12L, 23L]) == [12L, 23L, 32L, 41L, 42L]);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. result.length)\n\t{\n\t\tlong max = maxElement(result[0 .. i]);\n\t\tlong maxIndex = result[0 .. i].indexOf(max);\n\t\tresult = result[maxIndex .. i].reverse ~ result[i .. $];\n\t\tresult = result[0 .. i].reverse ~ result[i .. $];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tint n = result.length;\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tint max_idx = maxIndex(result[0..n-i]);\n\t\tresult = result[max_idx..$] ~ result[0..max_idx];\n\t\tresult = result[n-i-1..$] ~ result[0..n-i-1];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] res = nums;\n\tint n = nums.length;\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tint max_idx = maxIndex(res[0..n-i]);\n\t\tres = reverse(res[0..max_idx]);\n\t\tres = reverse(res[0..n-i]);\n\t}\n\treturn res;\n}",
    "{\n\tlong[] result = nums.dup;\n\tint n = nums.length;\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tint max_idx = maxIndex(result[0 .. n - i]);\n\t\tresult = reverse(result[0 .. max_idx + 1]) ~ result[max_idx + 1 .. $];\n\t\tresult = reverse(result[0 .. n - i]);\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. result.length)\n\t{\n\t\tlong max_index = maxIndex(result[0 .. result.length - i]);\n\t\tif(max_index != result.length - i - 1)\n\t\t{\n\t\t\tresult = result[max_index .. $] ~ result[0 .. max_index];\n\t\t\tresult = result[result.length - i - 1 .. $] ~ result[0 .. result.length - i - 1];\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. result.length)\n\t{\n\t\tlong max_index = maxIndex(result[0 .. i + 1]);\n\t\tif(max_index != i)\n\t\t{\n\t\t\tresult = result[max_index .. max_index + 1] ~ result[0 .. max_index] ~ result[max_index + 1 .. $];\n\t\t\tresult = result[i .. i + 1] ~ result[0 .. i] ~ result[i + 1 .. $];\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. nums.length)\n\t{\n\t\tlong max_index = maxIndex(result[0 .. i + 1]);\n\t\tif (max_index != i)\n\t\t{\n\t\t\tresult = result[max_index .. $].reverse.array;\n\t\t\tresult = result[0 .. i + 1].reverse.array;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. nums.length)\n\t{\n\t\tlong max_index = maxIndex(result[0 .. nums.length - i]);\n\t\tresult = result[max_index .. $] ~ result[0 .. max_index];\n\t\tresult = result[0 .. nums.length - i] ~ result[nums.length - i .. $];\n\t}\n\treturn result;\n}",
    "{\n\tint n = nums.length;\n\tlong[] result = new long[n];\n\tint[] index = new int[n];\n\tforeach(i; 0 .. n)\n\t\tindex[i] = i;\n\t\n\tforeach(i; 0 .. n)\n\t{\n\t\tint max_index = 0;\n\t\tforeach(j; 0 .. n - i)\n\t\t{\n\t\t\tif(nums[index[j]] > nums[index[max_index]])\n\t\t\t\tmax_index = j;\n\t\t}\n\t\t\n\t\tif(max_index != n - i - 1)\n\t\t{\n\t\t\tint temp = index[max_index];\n\t\t\tindex[max_index] = index[n - i - 1];\n\t\t\tindex[n - i - 1] = temp;\n\t\t\t\n\t\t\ttemp = index[0];\n\t\t\tindex[0] = index[n - i - 1];\n\t\t\tindex[n - i - 1] = temp;\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. n)\n\t\tresult[i] = nums[index[i]];\n\t\n\treturn result;\n}",
    "{\n\tint n = nums.length;\n\tforeach(i; 0 .. n)\n\t{\n\t\tint max_idx = maxIndex(nums[0 .. n - i]);\n\t\tif (max_idx != n - i - 1)\n\t\t{\n\t\t\tnums = nums[max_idx .. $] ~ nums[0 .. max_idx] ~ nums[$ - i .. $];\n\t\t\tnums = nums[0 .. n - i - 1] ~ nums[n - i .. $];\n\t\t}\n\t}\n\treturn nums;\n}",
    "{\n\tauto n = nums.length;\n\tfor (auto i = 0; i < n; i++) \n\t{\n\t\tauto max_idx = maxIndex(nums[0 .. n - i]);\n\t\treverse(nums[0 .. max_idx + 1]);\n\t\treverse(nums[0 .. n - i]);\n\t}\n\treturn nums;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. result.length)\n\t{\n\t\tlong max_index = maxIndex(result[0 .. result.length - i]);\n\t\tresult = result[max_index .. $] ~ result[0 .. max_index];\n\t\tresult = result[result.length - i .. $] ~ result[0 .. result.length - i];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\t\n\tforeach(i; 0 .. nums.length)\n\t{\n\t\tlong max_index = maxIndex(result[0 .. nums.length - i]);\n\t\t\n\t\tif(max_index != nums.length - i - 1)\n\t\t{\n\t\t\tresult = result[max_index .. $] ~ result[0 .. max_index];\n\t\t\tresult = result[0 .. nums.length - i] ~ result[nums.length - i .. $];\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tauto n = nums.length;\n\tforeach(i; 0 .. n)\n\t{\n\t\tauto max_index = maxIndex(nums[0 .. n - i]);\n\t\treverse(nums[0 .. max_index + 1]);\n\t\treverse(nums[0 .. n - i]);\n\t}\n\treturn nums;\n}",
    "{\n\tlong[] sorted = nums.dup;\n\tint n = nums.length;\n\t\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tint max_idx = maxIndex(sorted[0..n-i]);\n\t\t\n\t\tif (max_idx != n-i-1) \n\t\t{\n\t\t\tsorted = flip(sorted, max_idx);\n\t\t\tsorted = flip(sorted, n-i-1);\n\t\t}\n\t}\n\t\n\treturn sorted;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. result.length)\n\t{\n\t\tlong max_index = maxIndex(result[0 .. i + 1]);\n\t\tif(max_index != i)\n\t\t{\n\t\t\tresult = result[max_index .. max_index + 1] ~ result[0 .. max_index] ~ result[max_index + 1 .. $];\n\t\t\tresult = result[i .. i + 1] ~ result[0 .. i] ~ result[i + 1 .. $];\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tlong n = nums.length;\n\tforeach(i; 0 .. n) \n\t{\n\t\tlong max_idx = maxIndex(result[0 .. n - i]);\n\t\tresult = result[max_idx .. $] ~ result[0 .. max_idx];\n\t\tresult = result[n - i .. $] ~ result[0 .. n - i];\n\t}\n\treturn result;\n}",
    "{\n\tauto n = nums.length;\n\tforeach (i; 0 .. n) \n\t{\n\t\tauto max_idx = maxIndex(nums[0 .. n - i]);\n\t\treverse(nums[0 .. max_idx + 1]);\n\t\treverse(nums[0 .. n - i]);\n\t}\n\treturn nums;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. result.length)\n\t{\n\t\tlong max_index = maxIndex(result[0 .. i + 1]);\n\t\tif(max_index != i)\n\t\t{\n\t\t\tresult = result[max_index .. max_index + 1] ~ result[0 .. max_index] ~ result[max_index + 1 .. $];\n\t\t\tresult = result[i .. i + 1] ~ result[0 .. i] ~ result[i + 1 .. $];\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tint n = result.length;\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tint max_idx = maxIndex(result[0 .. n - i]);\n\t\tresult = result[max_idx .. $] ~ result[0 .. max_idx];\n\t\tresult = result[n - i .. $] ~ result[0 .. n - i];\n\t}\n\treturn result;\n}"
  ]
}