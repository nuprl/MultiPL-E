{
  "name": "mbpp_141_pancake_sort",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to sort an array of elements.\n\t\n*/\nlong[] pancake_sort(long[] nums) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_141_pancake_sort.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = pancake_sort;\n\n    assert(candidate([15L, 79L, 25L, 38L, 69L]) == [15L, 25L, 38L, 69L, 79L]);\n    assert(candidate([98L, 12L, 54L, 36L, 85L]) == [12L, 36L, 54L, 85L, 98L]);\n    assert(candidate([41L, 42L, 32L, 12L, 23L]) == [12L, 23L, 32L, 41L, 42L]);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. result.length)\n\t{\n\t\tlong max = maxElement(result[0 .. i]);\n\t\tlong maxIndex = result[0 .. i].indexOf(max);\n\t\tresult = result[maxIndex .. i].reverse ~ result[i .. $];\n\t\tresult = result[0 .. i].reverse ~ result[i .. $];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tint n = result.length;\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tint max_idx = maxIndex(result[0..n-i]);\n\t\tresult = result[max_idx..$] ~ result[0..max_idx];\n\t\tresult = result[n-i-1..$] ~ result[0..n-i-1];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] res = nums;\n\tint n = nums.length;\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tint max_idx = maxIndex(res[0..n-i]);\n\t\tres = reverse(res[0..max_idx]);\n\t\tres = reverse(res[0..n-i]);\n\t}\n\treturn res;\n}",
    "{\n\tlong[] result = nums.dup;\n\tint n = nums.length;\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tint max_idx = maxIndex(result[0 .. n - i]);\n\t\tresult = reverse(result[0 .. max_idx + 1]) ~ result[max_idx + 1 .. $];\n\t\tresult = reverse(result[0 .. n - i]);\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. result.length)\n\t{\n\t\tlong max_index = maxIndex(result[0 .. result.length - i]);\n\t\tif(max_index != result.length - i - 1)\n\t\t{\n\t\t\tresult = result[max_index .. $] ~ result[0 .. max_index];\n\t\t\tresult = result[result.length - i - 1 .. $] ~ result[0 .. result.length - i - 1];\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. result.length)\n\t{\n\t\tlong max_index = maxIndex(result[0 .. i + 1]);\n\t\tif(max_index != i)\n\t\t{\n\t\t\tresult = result[max_index .. max_index + 1] ~ result[0 .. max_index] ~ result[max_index + 1 .. $];\n\t\t\tresult = result[i .. i + 1] ~ result[0 .. i] ~ result[i + 1 .. $];\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. nums.length)\n\t{\n\t\tlong max_index = maxIndex(result[0 .. i + 1]);\n\t\tif (max_index != i)\n\t\t{\n\t\t\tresult = result[max_index .. $].reverse.array;\n\t\t\tresult = result[0 .. i + 1].reverse.array;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. nums.length)\n\t{\n\t\tlong max_index = maxIndex(result[0 .. nums.length - i]);\n\t\tresult = result[max_index .. $] ~ result[0 .. max_index];\n\t\tresult = result[0 .. nums.length - i] ~ result[nums.length - i .. $];\n\t}\n\treturn result;\n}",
    "{\n\tint n = nums.length;\n\tlong[] result = new long[n];\n\tint[] index = new int[n];\n\tforeach(i; 0 .. n)\n\t\tindex[i] = i;\n\t\n\tforeach(i; 0 .. n)\n\t{\n\t\tint max_index = 0;\n\t\tforeach(j; 0 .. n - i)\n\t\t{\n\t\t\tif(nums[index[j]] > nums[index[max_index]])\n\t\t\t\tmax_index = j;\n\t\t}\n\t\t\n\t\tif(max_index != n - i - 1)\n\t\t{\n\t\t\tint temp = index[max_index];\n\t\t\tindex[max_index] = index[n - i - 1];\n\t\t\tindex[n - i - 1] = temp;\n\t\t\t\n\t\t\ttemp = index[0];\n\t\t\tindex[0] = index[n - i - 1];\n\t\t\tindex[n - i - 1] = temp;\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. n)\n\t\tresult[i] = nums[index[i]];\n\t\n\treturn result;\n}",
    "{\n\tint n = nums.length;\n\tforeach(i; 0 .. n)\n\t{\n\t\tint max_idx = maxIndex(nums[0 .. n - i]);\n\t\tif (max_idx != n - i - 1)\n\t\t{\n\t\t\tnums = nums[max_idx .. $] ~ nums[0 .. max_idx] ~ nums[$ - i .. $];\n\t\t\tnums = nums[0 .. n - i - 1] ~ nums[n - i .. $];\n\t\t}\n\t}\n\treturn nums;\n}",
    "{\n\tauto n = nums.length;\n\tfor (auto i = 0; i < n; i++) \n\t{\n\t\tauto max_idx = maxIndex(nums[0 .. n - i]);\n\t\treverse(nums[0 .. max_idx + 1]);\n\t\treverse(nums[0 .. n - i]);\n\t}\n\treturn nums;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. result.length)\n\t{\n\t\tlong max_index = maxIndex(result[0 .. result.length - i]);\n\t\tresult = result[max_index .. $] ~ result[0 .. max_index];\n\t\tresult = result[result.length - i .. $] ~ result[0 .. result.length - i];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\t\n\tforeach(i; 0 .. nums.length)\n\t{\n\t\tlong max_index = maxIndex(result[0 .. nums.length - i]);\n\t\t\n\t\tif(max_index != nums.length - i - 1)\n\t\t{\n\t\t\tresult = result[max_index .. $] ~ result[0 .. max_index];\n\t\t\tresult = result[0 .. nums.length - i] ~ result[nums.length - i .. $];\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tauto n = nums.length;\n\tforeach(i; 0 .. n)\n\t{\n\t\tauto max_index = maxIndex(nums[0 .. n - i]);\n\t\treverse(nums[0 .. max_index + 1]);\n\t\treverse(nums[0 .. n - i]);\n\t}\n\treturn nums;\n}",
    "{\n\tlong[] sorted = nums.dup;\n\tint n = nums.length;\n\t\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tint max_idx = maxIndex(sorted[0..n-i]);\n\t\t\n\t\tif (max_idx != n-i-1) \n\t\t{\n\t\t\tsorted = flip(sorted, max_idx);\n\t\t\tsorted = flip(sorted, n-i-1);\n\t\t}\n\t}\n\t\n\treturn sorted;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. result.length)\n\t{\n\t\tlong max_index = maxIndex(result[0 .. i + 1]);\n\t\tif(max_index != i)\n\t\t{\n\t\t\tresult = result[max_index .. max_index + 1] ~ result[0 .. max_index] ~ result[max_index + 1 .. $];\n\t\t\tresult = result[i .. i + 1] ~ result[0 .. i] ~ result[i + 1 .. $];\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tlong n = nums.length;\n\tforeach(i; 0 .. n) \n\t{\n\t\tlong max_idx = maxIndex(result[0 .. n - i]);\n\t\tresult = result[max_idx .. $] ~ result[0 .. max_idx];\n\t\tresult = result[n - i .. $] ~ result[0 .. n - i];\n\t}\n\treturn result;\n}",
    "{\n\tauto n = nums.length;\n\tforeach (i; 0 .. n) \n\t{\n\t\tauto max_idx = maxIndex(nums[0 .. n - i]);\n\t\treverse(nums[0 .. max_idx + 1]);\n\t\treverse(nums[0 .. n - i]);\n\t}\n\treturn nums;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. result.length)\n\t{\n\t\tlong max_index = maxIndex(result[0 .. i + 1]);\n\t\tif(max_index != i)\n\t\t{\n\t\t\tresult = result[max_index .. max_index + 1] ~ result[0 .. max_index] ~ result[max_index + 1 .. $];\n\t\t\tresult = result[i .. i + 1] ~ result[0 .. i] ~ result[i + 1 .. $];\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tint n = result.length;\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tint max_idx = maxIndex(result[0 .. n - i]);\n\t\tresult = result[max_idx .. $] ~ result[0 .. max_idx];\n\t\tresult = result[n - i .. $] ~ result[0 .. n - i];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. nums.length) \n\t{\n\t\tauto max_index = maxIndex(result[0 .. nums.length - i]);\n\t\tif (max_index != nums.length - i - 1) \n\t\t{\n\t\t\tresult = result[max_index .. $] ~ result[0 .. max_index] ~ result[nums.length - i .. $];\n\t\t\tresult = result[0 .. nums.length - i] ~ result[nums.length - i .. $];\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] sorted = nums;\n\tforeach(i; 0 .. nums.length)\n\t{\n\t\tlong max = sorted[0];\n\t\tlong max_index = 0;\n\t\tforeach(j; 0 .. nums.length - i)\n\t\t{\n\t\t\tif(sorted[j] > max)\n\t\t\t{\n\t\t\t\tmax = sorted[j];\n\t\t\t\tmax_index = j;\n\t\t\t}\n\t\t}\n\t\tsorted = sorted[max_index .. $] ~ sorted[0 .. max_index];\n\t\tsorted = sorted[$ - i .. $] ~ sorted[0 .. $ - i];\n\t}\n\treturn sorted;\n}",
    "{\n\tlong[] sorted = nums.dup;\n\tforeach(i; 0 .. nums.length)\n\t{\n\t\tauto max_index = maxIndex(sorted[0 .. nums.length - i]);\n\t\tsorted = sorted[max_index .. $] ~ sorted[0 .. max_index];\n\t\tsorted = sorted[0 .. nums.length - i] ~ sorted[nums.length - i .. $];\n\t}\n\treturn sorted;\n}",
    "{\n\tlong[] result = nums.dup;\n\tlong[] temp;\n\tlong[] temp2;\n\tlong[] temp3;\n\tlong[] temp4;\n\tlong[] temp5;\n\tlong[] temp6;\n\tlong[] temp7;\n\tlong[] temp8;\n\tlong[] temp9;\n\tlong[] temp10;\n\tlong[] temp11;\n\tlong[] temp12;\n\tlong[] temp13;\n\tlong[] temp14;\n\tlong[] temp15;\n\tlong[] temp16;\n\tlong[] temp17;\n\tlong[] temp18;\n\tlong[] temp19;\n\tlong[] temp20;\n\tlong[] temp21;\n\tlong[] temp22;\n\tlong[] temp23;\n\tlong[] temp24;\n\tlong[] temp25;\n\tlong[] temp26;\n\tlong[] temp27;\n\tlong[] temp28;\n\tlong[] temp29;\n\tlong[] temp30;\n\tlong[] temp31;\n\tlong[] temp32;\n\tlong[] temp33;\n\tlong[] temp34;\n\tlong[] temp35;\n\tlong[] temp36;\n\tlong[] temp37;\n\tlong[] temp38;\n\tlong[] temp39;\n\tlong[] temp40;\n\tlong[] temp41;\n\tlong[] temp42;\n\tlong[] temp43;\n\tlong[] temp44;\n\tlong[] temp45;\n\tlong[] temp46;\n\tlong[] temp47;\n\tlong[] temp48;\n\tlong[] temp49;\n\tlong[] temp50;\n\tlong[] temp51;\n\tlong[] temp52;\n\tlong[] temp53;\n\tlong[] temp54;\n\tlong[] temp55;\n\tlong[] temp56;\n\tlong[] temp57;\n\tlong[] temp58;\n\tlong[] temp59;\n\tlong[] temp60;\n\tlong[] temp61;\n\tlong[] temp62;\n\tlong[] temp63;\n\tlong[] temp64;\n\tlong[] temp65;\n\tlong[] temp66;\n\tlong[] temp67;\n\tlong[] temp68;\n\tlong[] temp69;\n\tlong[] temp70;\n\tlong[] temp71;\n\t",
    "{\n\tlong[] nums_copy = nums.dup;\n\tlong[] result = [];\n\tforeach(i; 0 .. nums.length)\n\t{\n\t\tlong max_index = 0;\n\t\tforeach(j; 0 .. nums_copy.length)\n\t\t{\n\t\t\tif(nums_copy[j] > nums_copy[max_index])\n\t\t\t{\n\t\t\t\tmax_index = j;\n\t\t\t}\n\t\t}\n\t\tif(max_index != nums_copy.length - 1)\n\t\t{\n\t\t\tresult ~= max_index + 1;\n\t\t\tresult ~= nums_copy.length - i;\n\t\t\tnums_copy = nums_copy[max_index .. nums_copy.length].reverse ~ nums_copy[0 .. max_index];\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. nums.length)\n\t{\n\t\tlong maxIndex = 0;\n\t\tforeach(j; 0 .. nums.length - i)\n\t\t{\n\t\t\tif(result[j] > result[maxIndex])\n\t\t\t\tmaxIndex = j;\n\t\t}\n\t\tresult = result[0 .. maxIndex].reverse ~ result[maxIndex .. $];\n\t\tresult = result[0 .. $ - i].reverse ~ result[$ - i .. $];\n\t}\n\treturn result;\n}",
    "{\n\tint n = nums.length;\n\tforeach(i; 0..n)\n\t{\n\t\tint max_idx = maxIndex(nums[0..n-i]);\n\t\tif(max_idx != n-i-1)\n\t\t{\n\t\t\tnums = nums[max_idx..$] ~ nums[0..max_idx] ~ nums[n-i..$];\n\t\t\tnums = nums[0..n-i] ~ nums[n-i..$];\n\t\t}\n\t}\n\treturn nums;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. nums.length)\n\t{\n\t\tlong max_index = maxIndex(result[0 .. nums.length - i]);\n\t\tresult = result[max_index .. $] ~ result[0 .. max_index];\n\t\tresult = result[0 .. nums.length - i] ~ result[nums.length - i .. $];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. result.length)\n\t{\n\t\tlong max_index = maxIndex(result[0 .. i + 1]);\n\t\tif(max_index != i)\n\t\t{\n\t\t\tresult = result[max_index .. $] ~ result[0 .. max_index].reverse ~ result[i .. $];\n\t\t\tresult = result[i .. $] ~ result[0 .. i].reverse;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. result.length)\n\t{\n\t\tlong max_index = maxIndex(result[0 .. result.length - i]);\n\t\tresult = result[max_index .. $] ~ result[0 .. max_index] ~ result[$ - i .. $];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. nums.length)\n\t{\n\t\tlong max_index = maxIndex(result[0 .. nums.length - i]);\n\t\tresult = result[max_index .. $] ~ result[0 .. max_index];\n\t\tresult = result[0 .. nums.length - i] ~ result[nums.length - i .. $];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. result.length)\n\t{\n\t\tlong max = maxElement(result[0 .. result.length - i]);\n\t\tlong max_index = result.indexOf(max);\n\t\tresult = result[max_index .. $] ~ result[0 .. max_index];\n\t\tresult = result[result.length - i .. $] ~ result[0 .. result.length - i];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. result.length)\n\t{\n\t\tlong max_index = i;\n\t\tforeach(j; i .. result.length)\n\t\t{\n\t\t\tif(result[j] > result[max_index])\n\t\t\t\tmax_index = j;\n\t\t}\n\t\t\n\t\tresult = result[0 .. max_index].reverse ~ result[max_index .. result.length];\n\t\tresult = result[0 .. i].reverse ~ result[i .. result.length];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums;\n\tint n = result.length;\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tint max_idx = maxIndex(result[0 .. n - i]);\n\t\tresult = result[max_idx .. $] ~ result[0 .. max_idx];\n\t\tresult = result[0 .. n - i] ~ result[n - i .. $];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tint n = nums.length;\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tint max_idx = maxIndex(result[0..n-i]);\n\t\tresult = reverse(result, max_idx+1);\n\t\tresult = reverse(result, n-i);\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. result.length)\n\t{\n\t\tlong max_index = 0;\n\t\tforeach(j; 0 .. result.length - i)\n\t\t{\n\t\t\tif(result[j] > result[max_index])\n\t\t\t\tmax_index = j;\n\t\t}\n\t\tif(max_index != result.length - i - 1)\n\t\t{\n\t\t\tresult = result[0 .. max_index + 1].reverse ~ result[max_index + 1 .. result.length];\n\t\t\tresult = result[0 .. result.length - i].reverse ~ result[result.length - i .. result.length];\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n    long[] sorted = nums.dup;\n    sorted.sort;\n    return sorted;\n}",
    "{\n\tauto n = nums.length;\n\tforeach(i; 0 .. n) \n\t{\n\t\tauto max_idx = maxIndex(nums[0 .. n - i]);\n\t\treverse(nums[0 .. max_idx + 1]);\n\t\treverse(nums[0 .. n - i]);\n\t}\n\treturn nums;\n}",
    "{\n\tlong[] result = nums.dup;\n\tint n = nums.length;\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tint max_idx = maxIndex(result[0 .. n - i]);\n\t\tresult = result[max_idx .. $] ~ result[0 .. max_idx];\n\t\tresult = result[$ - 1 .. 0] ~ result[$ .. $];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. result.length)\n\t{\n\t\tlong max_index = maxIndex(result[0 .. i + 1]);\n\t\tif(max_index != i)\n\t\t{\n\t\t\tresult = result[max_index .. $] ~ result[max_index + 1 .. i] ~ result[0 .. max_index];\n\t\t\tresult = result[i .. $] ~ result[0 .. i];\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tauto n = nums.length;\n\tforeach(i; 0 .. n)\n\t{\n\t\tauto max_idx = maxIndex(nums[0 .. n - i]);\n\t\treverse(nums[0 .. max_idx + 1]);\n\t\treverse(nums[0 .. n - i]);\n\t}\n\treturn nums;\n}",
    "{\n\tlong[] result = nums.dup;\n\tint n = nums.length;\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tint max_idx = maxIndex(result[0 .. n - i]);\n\t\tresult = result[max_idx .. $] ~ result[0 .. max_idx];\n\t\tresult = result[n - i - 1 .. $] ~ result[0 .. n - i - 1];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. result.length)\n\t{\n\t\tlong max_index = maxIndex(result[0 .. i + 1]);\n\t\tif (max_index != i)\n\t\t{\n\t\t\tresult = result[max_index .. $] ~ result[0 .. max_index];\n\t\t\tresult = result[i .. $] ~ result[0 .. i];\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] sorted = nums.dup;\n\tforeach(i; 0 .. sorted.length)\n\t{\n\t\tlong max = sorted[0];\n\t\tlong max_index = 0;\n\t\tforeach(j; 0 .. sorted.length - i)\n\t\t{\n\t\t\tif(sorted[j] > max)\n\t\t\t{\n\t\t\t\tmax = sorted[j];\n\t\t\t\tmax_index = j;\n\t\t\t}\n\t\t}\n\t\tsorted = sorted[max_index .. $] ~ sorted[0 .. max_index];\n\t\tsorted = sorted[sorted.length - i .. $] ~ sorted[0 .. sorted.length - i];\n\t}\n\treturn sorted;\n}",
    "{\n\tlong[] nums_copy = nums.dup;\n\tint nums_len = nums.length;\n\tint[] indices = iota(nums_len).array;\n\t\n\tforeach(i; 0 .. nums_len)\n\t{\n\t\tint max_index = maxIndex(nums_copy[0 .. nums_len - i]);\n\t\tint max_index_in_original = indices[max_index];\n\t\t\n\t\tnums_copy[0 .. max_index + 1] = nums_copy[0 .. max_index + 1].reverse;\n\t\tnums_copy[0 .. nums_len - i] = nums_copy[0 .. nums_len - i].reverse;\n\t\t\n\t\tindices[max_index] = indices[nums_len - i - 1];\n\t\tindices[nums_len - i - 1] = max_index_in_original;\n\t}\n\t\n\treturn nums_copy;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. nums.length) \n\t{\n\t\tlong max_index = maxIndex(result[0 .. nums.length - i]);\n\t\tif (max_index != nums.length - i - 1) \n\t\t{\n\t\t\tresult = result[max_index .. $] ~ result[0 .. max_index] ~ result[nums.length - i .. $];\n\t\t\tresult = result[0 .. nums.length - i] ~ result[nums.length - i .. $];\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tlong[] temp = nums.dup;\n\tlong[] temp2 = nums.dup;\n\tlong[] temp3 = nums.dup;\n\tlong[] temp4 = nums.dup;\n\tlong[] temp5 = nums.dup;\n\tlong[] temp6 = nums.dup;\n\tlong[] temp7 = nums.dup;\n\tlong[] temp8 = nums.dup;\n\tlong[] temp9 = nums.dup;\n\tlong[] temp10 = nums.dup;\n\tlong[] temp11 = nums.dup;\n\tlong[] temp12 = nums.dup;\n\tlong[] temp13 = nums.dup;\n\tlong[] temp14 = nums.dup;\n\tlong[] temp15 = nums.dup;\n\tlong[] temp16 = nums.dup;\n\tlong[] temp17 = nums.dup;\n\tlong[] temp18 = nums.dup;\n\tlong[] temp19 = nums.dup;\n\tlong[] temp20 = nums.dup;\n\tlong[] temp21 = nums.dup;\n\tlong[] temp22 = nums.dup;\n\tlong[] temp23 = nums.dup;\n\tlong[] temp24 = nums.dup;\n\tlong[] temp25 = nums.dup;\n\tlong[] temp26 = nums.dup;\n\tlong[] temp27 = nums.dup;\n\tlong[] temp28 = nums.dup;\n\tlong[] temp29 = nums.dup;\n\tlong[] temp30 = nums.dup;\n\tlong[] temp31 = nums.dup;\n\tlong[] temp32 = nums.dup;\n\tlong[] temp33 = nums.dup;\n\tlong[] temp34 = nums.dup;\n\tlong[] temp35 = nums.dup;\n\tlong[] temp36 = nums.dup;\n\tlong[] temp37 = nums.dup;\n\tlong[] temp38 = nums.dup;\n\tlong[] temp",
    "{\n\tlong[] result = nums.dup;\n\tlong[] temp = new long[result.length];\n\tlong[] temp2 = new long[result.length];\n\tlong[] temp3 = new long[result.length];\n\tlong[] temp4 = new long[result.length];\n\tlong[] temp5 = new long[result.length];\n\tlong[] temp6 = new long[result.length];\n\tlong[] temp7 = new long[result.length];\n\tlong[] temp8 = new long[result.length];\n\tlong[] temp9 = new long[result.length];\n\tlong[] temp10 = new long[result.length];\n\tlong[] temp11 = new long[result.length];\n\tlong[] temp12 = new long[result.length];\n\tlong[] temp13 = new long[result.length];\n\tlong[] temp14 = new long[result.length];\n\tlong[] temp15 = new long[result.length];\n\tlong[] temp16 = new long[result.length];\n\tlong[] temp17 = new long[result.length];\n\tlong[] temp18 = new long[result.length];\n\tlong[] temp19 = new long[result.length];\n\tlong[] temp20 = new long[result.length];\n\tlong[] temp21 = new long[result.length];\n\tlong[] temp22 = new long[result.length];\n\tlong[] temp23 = new long[result.length];\n\tlong[] temp24 = new long[result.length];\n\tlong[] temp25 = new long[result.length];\n\tlong[] temp26 = new long[result.length];\n\tlong[] temp27 = new long[result.length];\n\tlong[] temp28 = new long[result.length];\n\tlong[] temp29 = new long[result.length];\n\tlong[] temp30 = new long[result.length];\n\tlong[] temp31 = new long[result.length];\n\tlong[] temp32 = new long[result.length];\n\tlong[] temp33 = new long[result.length];\n\tlong[] temp34 = new long[result.length];\n\tlong[] temp35 = new long[result.length];\n\tlong[] temp36 = new long",
    "{\n\tlong[] sorted = nums.dup;\n\t\n\tfor (int i = 0; i < nums.length; i++)\n\t{\n\t\tint max_index = maxIndex(sorted[0 .. nums.length - i]);\n\t\t\n\t\tif (max_index != nums.length - i - 1)\n\t\t{\n\t\t\tsorted = flip(sorted, max_index);\n\t\t\tsorted = flip(sorted, nums.length - i - 1);\n\t\t}\n\t}\n\t\n\treturn sorted;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0..result.length)\n\t{\n\t\tlong max = max(result[0..result.length - i]);\n\t\tlong max_index = result.indexOf(max);\n\t\tresult = result[max_index..$].reverse ~ result[0..max_index].reverse ~ result[result.length - i..$];\n\t}\n\treturn result;\n}",
    "{\n\t//long[] nums = [1,5,4,3,2];\n\tlong[] result = nums.dup;\n\tlong[] temp = nums.dup;\n\tlong[] temp2 = nums.dup;\n\tlong[] temp3 = nums.dup;\n\tlong[] temp4 = nums.dup;\n\tlong[] temp5 = nums.dup;\n\tlong[] temp6 = nums.dup;\n\tlong[] temp7 = nums.dup;\n\tlong[] temp8 = nums.dup;\n\tlong[] temp9 = nums.dup;\n\tlong[] temp10 = nums.dup;\n\tlong[] temp11 = nums.dup;\n\tlong[] temp12 = nums.dup;\n\tlong[] temp13 = nums.dup;\n\tlong[] temp14 = nums.dup;\n\tlong[] temp15 = nums.dup;\n\tlong[] temp16 = nums.dup;\n\tlong[] temp17 = nums.dup;\n\tlong[] temp18 = nums.dup;\n\tlong[] temp19 = nums.dup;\n\tlong[] temp20 = nums.dup;\n\tlong[] temp21 = nums.dup;\n\tlong[] temp22 = nums.dup;\n\tlong[] temp23 = nums.dup;\n\tlong[] temp24 = nums.dup;\n\tlong[] temp25 = nums.dup;\n\tlong[] temp26 = nums.dup;\n\tlong[] temp27 = nums.dup;\n\tlong[] temp28 = nums.dup;\n\tlong[] temp29 = nums.dup;\n\tlong[] temp30 = nums.dup;\n\tlong[] temp31 = nums.dup;\n\tlong[] temp32 = nums.dup;\n\tlong[] temp33 = nums.dup;\n\tlong[] temp34 = nums.dup;\n\tlong[] temp35 = nums.dup;\n\tlong[] temp36 = nums.dup;\n\tlong[] temp37 = nums.dup",
    "{\n\tlong[] result = nums.dup;\n\tlong[] temp = new long[nums.length];\n\tlong[] temp2 = new long[nums.length];\n\tlong[] temp3 = new long[nums.length];\n\tlong[] temp4 = new long[nums.length];\n\tlong[] temp5 = new long[nums.length];\n\tlong[] temp6 = new long[nums.length];\n\tlong[] temp7 = new long[nums.length];\n\tlong[] temp8 = new long[nums.length];\n\tlong[] temp9 = new long[nums.length];\n\tlong[] temp10 = new long[nums.length];\n\tlong[] temp11 = new long[nums.length];\n\tlong[] temp12 = new long[nums.length];\n\tlong[] temp13 = new long[nums.length];\n\tlong[] temp14 = new long[nums.length];\n\tlong[] temp15 = new long[nums.length];\n\tlong[] temp16 = new long[nums.length];\n\tlong[] temp17 = new long[nums.length];\n\tlong[] temp18 = new long[nums.length];\n\tlong[] temp19 = new long[nums.length];\n\tlong[] temp20 = new long[nums.length];\n\tlong[] temp21 = new long[nums.length];\n\tlong[] temp22 = new long[nums.length];\n\tlong[] temp23 = new long[nums.length];\n\tlong[] temp24 = new long[nums.length];\n\tlong[] temp25 = new long[nums.length];\n\tlong[] temp26 = new long[nums.length];\n\tlong[] temp27 = new long[nums.length];\n\tlong[] temp28 = new long[nums.length];\n\tlong[] temp29 = new long[nums.length];\n\tlong[] temp30 = new long[nums.length];\n\tlong[] temp31 = new long[nums.length];\n\tlong[] temp32 = new long[nums.length];\n\tlong[] temp33 = new long[nums.length];\n\tlong[]",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. nums.length) \n\t{\n\t\tlong max_index = 0;\n\t\tforeach(j; 0 .. nums.length - i) \n\t\t{\n\t\t\tif(result[j] > result[max_index]) \n\t\t\t{\n\t\t\t\tmax_index = j;\n\t\t\t}\n\t\t}\n\t\tresult = result[max_index .. $] ~ result[0 .. max_index].reverse ~ result[$ - i .. $];\n\t}\n\treturn result;\n}",
    "{\n\tint n = nums.length;\n\tforeach (i; 0 .. n) \n\t{\n\t\tint max_idx = maxIndex(nums[0 .. n - i]);\n\t\tif (max_idx == n - i - 1) \n\t\t\tcontinue;\n\t\treverse(nums[0 .. max_idx + 1]);\n\t\treverse(nums[0 .. n - i]);\n\t}\n\treturn nums;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. result.length)\n\t{\n\t\tlong max_index = maxIndex(result[0 .. result.length - i]);\n\t\tresult = result[max_index .. $] ~ result[0 .. max_index] ~ result[result.length - i .. $];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. result.length) \n\t{\n\t\tlong max_index = maxIndex(result[0 .. i + 1]);\n\t\tif (max_index != i) \n\t\t{\n\t\t\tresult = result[max_index .. max_index + 1] ~ result[0 .. max_index] ~ result[max_index + 1 .. $];\n\t\t\tresult = result[i .. i + 1] ~ result[0 .. i] ~ result[i + 1 .. $];\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tint n = nums.length;\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tint max_idx = maxIndex(nums[0 .. n - i]);\n\t\treverse(nums[0 .. max_idx + 1]);\n\t\treverse(nums[0 .. n - i]);\n\t}\n\treturn nums;\n}",
    "{\n\tint n = nums.length;\n\tlong[] res = nums.dup;\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tint max_idx = maxIndex(res[0 .. n - i]);\n\t\tres = res[max_idx .. $] ~ res[0 .. max_idx];\n\t\tres = res[n - i .. $] ~ res[0 .. n - i];\n\t}\n\treturn res;\n}",
    "{\n\tauto n = nums.length;\n\tforeach (i; 0 .. n) \n\t{\n\t\tauto max_idx = maxIndex(nums[0 .. n - i]);\n\t\tif (max_idx != n - i - 1) \n\t\t{\n\t\t\tnums = nums[max_idx .. $] ~ nums[0 .. max_idx] ~ nums[n - i .. $];\n\t\t\tnums = nums[0 .. n - i] ~ nums[n - i .. $];\n\t\t}\n\t}\n\treturn nums;\n}",
    "{\n\tlong[] result = nums.dup;\n\tint n = nums.length;\n\t\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\t// Find index of the maximum element\n\t\tint max_idx = maxIndex(result[0 .. n - i]);\n\t\t\n\t\t// Flip the subarray from 0 to max_idx\n\t\tresult = flip(result, max_idx + 1);\n\t\t\n\t\t// Flip the subarray from 0 to n - i - 1\n\t\tresult = flip(result, n - i);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tauto n = nums.length;\n\tforeach(i; 0 .. n) \n\t{\n\t\tauto max_idx = maxIndex(nums[0 .. n - i]);\n\t\treverse(nums[0 .. max_idx + 1]);\n\t\treverse(nums[0 .. n - i]);\n\t}\n\treturn nums;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. nums.length)\n\t{\n\t\tlong max_index = maxIndex(result[0 .. nums.length - i]);\n\t\tresult = result[max_index .. $] ~ result[0 .. max_index] ~ result[nums.length - i .. $];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. nums.length) \n\t{\n\t\tlong max = maxElement(result[0 .. nums.length - i]);\n\t\tlong max_index = result.indexOf(max);\n\t\tresult = result[max_index .. $] ~ result[0 .. max_index];\n\t\tresult = result[nums.length - i .. $] ~ result[0 .. nums.length - i];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. result.length)\n\t{\n\t\tlong max_index = maxIndex(result[0 .. i]);\n\t\tif(max_index != i)\n\t\t{\n\t\t\tresult = result[max_index .. $] ~ result[max_index + 1 .. i] ~ result[0 .. max_index];\n\t\t\tresult = result[i .. $] ~ result[0 .. i];\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. nums.length)\n\t{\n\t\tlong max_index = maxIndex(result[0 .. nums.length - i]);\n\t\tif(max_index != nums.length - i - 1)\n\t\t{\n\t\t\tresult = result[max_index .. $] ~ result[0 .. max_index] ~ result[$ - i .. $];\n\t\t\tresult = result[0 .. nums.length - i] ~ result[$ - i .. $];\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\t\n\tforeach(i; 0 .. nums.length)\n\t{\n\t\tlong[] temp = result[0 .. i + 1];\n\t\ttemp.reverse;\n\t\tresult[0 .. i + 1] = temp;\n\t\t\n\t\tlong[] temp2 = result[0 .. i + 1];\n\t\ttemp2.reverse;\n\t\tresult[0 .. i + 1] = temp2;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. result.length)\n\t{\n\t\tauto max_index = maxIndex(result[0 .. result.length - i]);\n\t\tresult = result[max_index .. $] ~ result[0 .. max_index];\n\t\tresult = result[0 .. result.length - i] ~ result[result.length - i .. $];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums;\n\tint size = nums.length;\n\tfor (int i = 0; i < size; i++) \n\t{\n\t\tint max = i;\n\t\tfor (int j = i + 1; j < size; j++) \n\t\t{\n\t\t\tif (result[j] > result[max]) \n\t\t\t{\n\t\t\t\tmax = j;\n\t\t\t}\n\t\t}\n\t\tif (max != i) \n\t\t{\n\t\t\tresult = result.take(max + 1).reverse.array;\n\t\t\tresult = result.take(i + 1).reverse.array;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. nums.length)\n\t{\n\t\tlong max_index = 0;\n\t\tforeach(j; 0 .. nums.length - i)\n\t\t{\n\t\t\tif(result[j] > result[max_index])\n\t\t\t\tmax_index = j;\n\t\t}\n\t\tif(max_index != nums.length - i - 1)\n\t\t{\n\t\t\tresult = result[0 .. max_index + 1].reverse ~ result[max_index + 1 .. $];\n\t\t\tresult = result[0 .. nums.length - i].reverse ~ result[nums.length - i .. $];\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tauto n = nums.length;\n\tforeach(i; 0 .. n) \n\t{\n\t\tauto max_idx = maxIndex(nums[0 .. n - i]);\n\t\treverse(nums[0 .. max_idx + 1]);\n\t\treverse(nums[0 .. n - i]);\n\t}\n\treturn nums;\n}",
    "{\n\tauto n = nums.length;\n\tforeach(i; 0 .. n) \n\t{\n\t\tauto max_idx = maxIndex(nums[0 .. n - i]);\n\t\treverse(nums[0 .. max_idx + 1]);\n\t\treverse(nums[0 .. n - i]);\n\t}\n\treturn nums;\n}",
    "{\n\tlong[] result = nums.dup;\n\tint N = result.length;\n\tfor (int i = 0; i < N; i++) \n\t{\n\t\tint max_idx = maxIndex(result[0 .. N - i]);\n\t\tresult = flip(result, max_idx + 1);\n\t\tresult = flip(result, N - i);\n\t}\n\treturn result;\n}",
    "{\n\tauto n = nums.length;\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tauto max_idx = maxIndex(nums[0 .. n - i]);\n\t\treverse(nums[0 .. max_idx + 1]);\n\t\treverse(nums[0 .. n - i]);\n\t}\n\treturn nums;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. result.length)\n\t{\n\t\tlong max = result[0];\n\t\tlong max_index = 0;\n\t\tforeach(j; 0 .. result.length - i)\n\t\t{\n\t\t\tif(result[j] > max)\n\t\t\t{\n\t\t\t\tmax = result[j];\n\t\t\t\tmax_index = j;\n\t\t\t}\n\t\t}\n\t\tresult = result[max_index .. $] ~ result[0 .. max_index];\n\t\tresult = result[result.length - i .. $] ~ result[0 .. result.length - i];\n\t}\n\treturn result;\n}",
    "{\n\tint n = nums.length;\n\tforeach(i; 0 .. n) \n\t{\n\t\tint max_idx = maxIndex(nums[0 .. n - i]);\n\t\treverse(nums[0 .. max_idx]);\n\t\treverse(nums[0 .. n - i]);\n\t}\n\treturn nums;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. result.length)\n\t{\n\t\tlong max_index = result[0 .. i].maxIndex;\n\t\tif(max_index != i)\n\t\t{\n\t\t\tresult[0 .. max_index] = result[max_index .. 0].reversed;\n\t\t\tresult[0 .. i] = result[i .. 0].reversed;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\t\n\tforeach(i; 0 .. result.length)\n\t{\n\t\tlong max_index = 0;\n\t\tforeach(j; 0 .. result.length - i)\n\t\t{\n\t\t\tif(result[j] > result[max_index])\n\t\t\t{\n\t\t\t\tmax_index = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(max_index != result.length - i - 1)\n\t\t{\n\t\t\tresult = result[max_index .. $] ~ result[0 .. max_index].reverse ~ result[$ - i .. $];\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] sorted = nums.dup;\n\tforeach(i; 0 .. nums.length)\n\t{\n\t\tlong max = sorted[0];\n\t\tlong max_index = 0;\n\t\tforeach(j; 0 .. sorted.length - i)\n\t\t{\n\t\t\tif(sorted[j] > max)\n\t\t\t{\n\t\t\t\tmax = sorted[j];\n\t\t\t\tmax_index = j;\n\t\t\t}\n\t\t}\n\t\tsorted = sorted[max_index .. $] ~ sorted[0 .. max_index].reverse ~ sorted[$ - i .. $];\n\t}\n\treturn sorted;\n}",
    "{\n\tlong[] result = nums.dup;\n\tint n = result.length;\n\t\n\tforeach(i; 0..n)\n\t{\n\t\tint max_idx = maxIndex(result[0..n-i]);\n\t\tresult = result[max_idx..$] ~ result[0..max_idx];\n\t\tresult = result[n-i..$] ~ result[0..n-i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. result.length) \n\t{\n\t\tlong max_index = maxIndex(result[0 .. i + 1]);\n\t\tif (max_index != i) \n\t\t{\n\t\t\tresult = result[max_index .. $] ~ result[max_index + 1 .. i + 1] ~ result[0 .. max_index];\n\t\t\tresult = result[i .. $] ~ result[0 .. i];\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tint n = nums.length;\n\tforeach(i; 0 .. n - 1)\n\t{\n\t\tint max_idx = maxIndex(nums[0 .. n - i]);\n\t\treverse(nums[0 .. max_idx]);\n\t\treverse(nums[0 .. n - i - 1]);\n\t}\n\treturn nums;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. nums.length)\n\t{\n\t\tlong max_index = 0;\n\t\tforeach(j; 0 .. nums.length - i)\n\t\t{\n\t\t\tif(result[j] > result[max_index])\n\t\t\t\tmax_index = j;\n\t\t}\n\t\tresult = result[max_index .. $] ~ result[0 .. max_index];\n\t\tresult = result[0 .. $ - i] ~ result[$ - i .. $];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\t\n\tforeach(i; 0 .. result.length)\n\t{\n\t\tlong max_index = maxIndex(result[0 .. i + 1]);\n\t\t\n\t\tif(max_index != i)\n\t\t{\n\t\t\tresult = result[max_index .. $] ~ result[0 .. max_index];\n\t\t\tresult = result[i .. $] ~ result[0 .. i];\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tauto n = nums.length;\n\tauto A = nums;\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\t// Find index of the maximum element in A[0..n-i-1]\n\t\tint max_idx = maxIndex(A[0..n-i]);\n\t\tif (max_idx != n-i-1) \n\t\t{\n\t\t\t// Move the maximum element to end of current array if it's not already at the end\n\t\t\treverse(A[0..max_idx+1]);\n\t\t\treverse(A[0..n-i]);\n\t\t}\n\t}\n\treturn A;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. nums.length) \n\t{\n\t\tlong max = result[0];\n\t\tlong max_index = 0;\n\t\tforeach(j; 0 .. nums.length - i) \n\t\t{\n\t\t\tif(result[j] > max) \n\t\t\t{\n\t\t\t\tmax = result[j];\n\t\t\t\tmax_index = j;\n\t\t\t}\n\t\t}\n\t\tresult = result[max_index .. $].reverse ~ result[0 .. max_index].reverse ~ result[$ - i .. $];\n\t}\n\treturn result;\n}",
    "{\n\tint n = nums.length;\n\tforeach(i; 0 .. n)\n\t{\n\t\tint max_idx = maxIndex(nums[0 .. n - i]);\n\t\tif(max_idx != n - i - 1)\n\t\t{\n\t\t\tnums = reverse(nums[0 .. max_idx + 1]);\n\t\t\tnums = reverse(nums[0 .. n - i]);\n\t\t}\n\t}\n\treturn nums;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. nums.length) \n\t{\n\t\tlong max_index = maxIndex(result[0 .. nums.length - i]);\n\t\tresult = result[max_index .. $] ~ result[0 .. max_index];\n\t\tresult = result[0 .. nums.length - i] ~ result[nums.length - i .. $];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. nums.length) \n\t{\n\t\tlong max_index = maxIndex(result[0 .. nums.length - i]);\n\t\tresult = result[max_index .. $] ~ result[0 .. max_index];\n\t\tresult = result[0 .. nums.length - i] ~ result[nums.length - i .. $];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] nums_sorted = nums.dup;\n\tlong[] nums_sorted_reversed = nums.dup;\n\tnums_sorted_reversed.reverse();\n\t\n\tforeach(i; 0..nums.length)\n\t{\n\t\tlong[] nums_sorted_reversed_sub = nums_sorted_reversed[0..i];\n\t\tlong[] nums_sorted_reversed_sub_reversed = nums_sorted_reversed_sub.dup;\n\t\tnums_sorted_reversed_sub_reversed.reverse;\n\t\t\n\t\tnums_sorted = nums_sorted_reversed_sub_reversed ~ nums_sorted[i..$];\n\t\tnums_sorted_reversed = nums_sorted_reversed[0..i] ~ nums_sorted_reversed[i..$];\n\t}\n\t\n\treturn nums_sorted;\n}",
    "{\n\tint n = nums.length;\n\tforeach(int i; 0..n)\n\t{\n\t\tint max_idx = maxIndex(nums[0..n-i]);\n\t\tif(max_idx != n-i-1)\n\t\t{\n\t\t\treverse(nums[0..max_idx+1]);\n\t\t\treverse(nums[0..n-i]);\n\t\t}\n\t}\n\treturn nums;\n}",
    "{\n\tlong[] sorted = nums.dup;\n\tforeach(i; 0 .. sorted.length)\n\t{\n\t\tlong max_index = 0;\n\t\tforeach(j; 0 .. sorted.length - i)\n\t\t{\n\t\t\tif(sorted[j] > sorted[max_index])\n\t\t\t{\n\t\t\t\tmax_index = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(max_index != sorted.length - i - 1)\n\t\t{\n\t\t\tsorted = sorted[max_index .. $] ~ sorted[0 .. max_index];\n\t\t\tsorted = sorted[sorted.length - i - 1 .. $] ~ sorted[0 .. sorted.length - i - 1];\n\t\t}\n\t}\n\treturn sorted;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. nums.length) \n\t{\n\t\tlong max = maxElement(result[0 .. $ - i]);\n\t\tlong maxIndex = result.indexOf(max);\n\t\tresult = result[maxIndex .. $] ~ result[0 .. maxIndex];\n\t\tresult = result[$ - 1 .. 0] ~ result[$ .. $];\n\t}\n\treturn result;\n}",
    "{\n\tauto n = nums.length;\n\tforeach(i; 0 .. n) \n\t{\n\t\tauto max_idx = maxIndex(nums[0 .. n - i]);\n\t\treverse(nums[0 .. max_idx + 1]);\n\t\treverse(nums[0 .. n - i]);\n\t}\n\treturn nums;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. result.length) \n\t{\n\t\tlong max_index = maxIndex(result[0 .. i + 1]);\n\t\tif (max_index != i) \n\t\t{\n\t\t\tresult = result[max_index .. $] ~ result[max_index + 1 .. i + 1] ~ result[0 .. max_index];\n\t\t\tresult = result[i .. $] ~ result[0 .. i];\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tint n = nums.length;\n\tforeach(i; 0 .. n) \n\t{\n\t\tint max_idx = maxIndex(nums[0 .. n - i]);\n\t\treverse(nums[0 .. max_idx]);\n\t\treverse(nums[0 .. n - i]);\n\t}\n\treturn nums;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. result.length)\n\t{\n\t\tauto max_index = maxIndex(result[0 .. i + 1]);\n\t\tif(max_index != i)\n\t\t{\n\t\t\tresult = result[max_index .. max_index + 1] ~ result[0 .. max_index] ~ result[max_index + 1 .. $];\n\t\t\tresult = result[i .. i + 1] ~ result[0 .. i] ~ result[i + 1 .. $];\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. result.length)\n\t{\n\t\tlong max_index = maxIndex(result[0 .. i + 1]);\n\t\tif(max_index != i)\n\t\t{\n\t\t\tresult = result[max_index .. $] ~ result[max_index + 1 .. i + 1] ~ result[0 .. max_index];\n\t\t\tresult = result[i .. $] ~ result[0 .. i];\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. nums.length) \n\t{\n\t\tlong max_index = max_element(result[0 .. nums.length - i]);\n\t\treverse(result[0 .. max_index + 1]);\n\t\treverse(result[0 .. nums.length - i]);\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tint n = nums.length;\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tint max_idx = maxIndex(result[0..n-i]);\n\t\tresult = flip(result, max_idx+1);\n\t\tresult = flip(result, n-i);\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tint n = nums.length;\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tint max_idx = maxIndex(result[0 .. n - i]);\n\t\tresult = result[max_idx .. $] ~ result[0 .. max_idx];\n\t\tresult = result[n - i .. $] ~ result[0 .. n - i];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. result.length) \n\t{\n\t\tlong max_index = maxIndex(result[0 .. i + 1]);\n\t\tif (max_index != i) \n\t\t{\n\t\t\tresult = result[max_index .. $].reverse ~ result[0 .. max_index].reverse ~ result[i + 1 .. $];\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\t// Write your code here\n\tlong[] result = new long[nums.length];\n\tint[] index = new int[nums.length];\n\tfor(int i = 0; i < nums.length; i++)\n\t{\n\t\tindex[i] = i;\n\t}\n\t\n\tfor(int i = 0; i < nums.length; i++)\n\t{\n\t\tfor(int j = i + 1; j < nums.length; j++)\n\t\t{\n\t\t\tif(nums[i] > nums[j])\n\t\t\t{\n\t\t\t\tlong tmp = nums[i];\n\t\t\t\tnums[i] = nums[j];\n\t\t\t\tnums[j] = tmp;\n\t\t\t\t\n\t\t\t\tint tmpIndex = index[i];\n\t\t\t\tindex[i] = index[j];\n\t\t\t\tindex[j] = tmpIndex;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor(int i = 0; i < nums.length; i++)\n\t{\n\t\tresult[index[i]] = nums[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tint n = nums.length;\n\tforeach(i; 0 .. n) \n\t{\n\t\t// Find index of the maximum element\n\t\tint max_idx = maxIndex(nums[0 .. n - i]);\n\t\t// Flip the subarray from 0 to max_idx\n\t\treverse(nums[0 .. max_idx]);\n\t\t// Flip the whole array\n\t\treverse(nums[0 .. n - i]);\n\t}\n\treturn nums;\n}",
    "{\n\tauto n = nums.length;\n\tfor (auto i = 0; i < n; i++) \n\t{\n\t\tauto max_idx = maxIndex(nums[0 .. n - i]);\n\t\treverse(nums[0 .. max_idx + 1]);\n\t\treverse(nums[0 .. n - i]);\n\t}\n\treturn nums;\n}",
    "{\n\tint n = nums.length;\n\tlong[] ans = new long[n];\n\tint[] index = new int[n];\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tindex[i] = i;\n\t}\n\t\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tint max = 0;\n\t\tfor (int j = 0; j < n - i; j++)\n\t\t{\n\t\t\tif (nums[j] > nums[max])\n\t\t\t{\n\t\t\t\tmax = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (max == n - i - 1)\n\t\t{\n\t\t\tcontinue;\n\t\t}\n\t\t\n\t\tif (max != 0)\n\t\t{\n\t\t\treverse(nums[0 .. max + 1]);\n\t\t\treverse(index[0 .. max + 1]);\n\t\t}\n\t\t\n\t\treverse(nums[0 .. n - i]);\n\t\treverse(index[0 .. n - i]);\n\t}\n\t\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tans[index[i]] = nums[i];\n\t}\n\t\n\treturn ans;\n}",
    "{\n\tauto n = nums.length;\n\tforeach(i; 0 .. n)\n\t{\n\t\tauto max_idx = maxIndex(nums[0 .. n - i]);\n\t\treverse(nums[0 .. max_idx + 1]);\n\t\treverse(nums[0 .. n - i]);\n\t}\n\treturn nums;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. result.length) \n\t{\n\t\tlong max_index = maxIndex(result[0 .. i + 1]);\n\t\tif(max_index != i) \n\t\t{\n\t\t\tresult = result[max_index .. $] ~ result[max_index + 1 .. i + 1] ~ result[0 .. max_index];\n\t\t\tresult = result[i .. $] ~ result[0 .. i];\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. result.length)\n\t{\n\t\tlong max_index = maxIndex(result[0 .. i + 1]);\n\t\tif(max_index != i)\n\t\t{\n\t\t\tresult = result[max_index .. max_index + 1] ~ result[0 .. max_index] ~ result[max_index + 1 .. result.length];\n\t\t\tresult = result[i .. i + 1] ~ result[0 .. i] ~ result[i + 1 .. result.length];\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tauto n = nums.length;\n\tforeach (i; 0 .. n) \n\t{\n\t\tauto max_idx = maxIndex(nums[0 .. n - i]);\n\t\treverse(nums[0 .. max_idx + 1]);\n\t\treverse(nums[0 .. n - i]);\n\t}\n\treturn nums;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. nums.length) \n\t{\n\t\tlong max_index = maxIndex(result[0 .. nums.length - i]);\n\t\tresult = result[max_index .. $] ~ result[0 .. max_index];\n\t\tresult = result[0 .. nums.length - i] ~ result[nums.length - i .. $];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] sorted = nums.dup;\n\t\n\tforeach(i; 0 .. sorted.length)\n\t{\n\t\tlong max_index = 0;\n\t\tforeach(j; 0 .. sorted.length - i)\n\t\t{\n\t\t\tif(sorted[j] > sorted[max_index])\n\t\t\t\tmax_index = j;\n\t\t}\n\t\t\n\t\tif(max_index == sorted.length - i - 1)\n\t\t\tcontinue;\n\t\t\n\t\tif(max_index != 0)\n\t\t{\n\t\t\tsorted = sorted[0 .. max_index + 1].reverse ~ sorted[max_index + 1 .. $];\n\t\t}\n\t\t\n\t\tsorted = sorted[0 .. sorted.length - i].reverse ~ sorted[sorted.length - i .. $];\n\t}\n\t\n\treturn sorted;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. nums.length) \n\t{\n\t\tlong max_index = maxIndex(result[0 .. nums.length - i]);\n\t\tif (max_index != nums.length - i - 1) \n\t\t{\n\t\t\tresult = result[max_index .. $] ~ result[0 .. max_index];\n\t\t\tresult = result[$ - 1 .. 0] ~ result[$ .. $];\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. result.length) \n\t{\n\t\tlong max_index = maxIndex(result[0 .. i+1]);\n\t\tif(max_index != i) \n\t\t{\n\t\t\tresult = result[max_index .. $] ~ result[max_index .. max_index] ~ result[0 .. max_index];\n\t\t\tresult = result[i .. $] ~ result[i .. i] ~ result[0 .. i];\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tint n = nums.length;\n\tforeach(i; 0 .. n) \n\t{\n\t\tint max_idx = maxIndex(nums[0 .. n - i]);\n\t\treverse(nums[0 .. max_idx]);\n\t\treverse(nums[0 .. n - i]);\n\t}\n\treturn nums;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. result.length)\n\t{\n\t\tlong max_index = maxIndex(result[0 .. i]);\n\t\tif(max_index != i)\n\t\t{\n\t\t\tresult = result[max_index .. $] ~ result[0 .. max_index];\n\t\t\tresult = result[i .. $] ~ result[0 .. i];\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. nums.length)\n\t{\n\t\tlong max_index = maxIndex(result[0 .. i + 1]);\n\t\tif(max_index != i)\n\t\t{\n\t\t\tresult = result[max_index .. $] ~ result[max_index + 1 .. i] ~ result[0 .. max_index];\n\t\t\tresult = result[i .. $] ~ result[0 .. i];\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. nums.length)\n\t{\n\t\tlong max_index = maxIndex(result[0 .. nums.length - i]);\n\t\tresult = result[max_index .. $] ~ result[0 .. max_index] ~ result[nums.length - i .. $];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. result.length)\n\t{\n\t\tlong max_index = maxIndex(result[0 .. i + 1]);\n\t\tif(max_index != i)\n\t\t{\n\t\t\tresult = result[max_index .. max_index + 1] ~ result[0 .. max_index] ~ result[max_index + 1 .. $];\n\t\t\tresult = result[i .. i + 1] ~ result[0 .. i] ~ result[i + 1 .. $];\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tint n = nums.length;\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tint max_idx = maxIndex(result[0 .. n - i]);\n\t\tresult = result[max_idx .. $] ~ result[0 .. max_idx];\n\t\tresult = result[n - i .. $] ~ result[0 .. n - i];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\t\n\tforeach(i; 0 .. nums.length)\n\t{\n\t\tlong max_index = maxIndex(result[0 .. i]);\n\t\t\n\t\tif(max_index != i)\n\t\t{\n\t\t\tresult = result[max_index .. $] ~ result[0 .. max_index];\n\t\t\tresult = result[0 .. i] ~ result[i .. $];\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. nums.length) \n\t{\n\t\tlong max = maxElement(result[0 .. nums.length - i]);\n\t\tlong max_index = result.indexOf(max);\n\t\tresult = result[max_index .. $] ~ result[0 .. max_index];\n\t\tresult = result[nums.length - i .. $] ~ result[0 .. nums.length - i];\n\t}\n\treturn result;\n}",
    "{\n\tauto n = nums.length;\n\tforeach(i; 0 .. n)\n\t{\n\t\tauto max_index = maxIndex(nums[0 .. n - i]);\n\t\tif (max_index != n - i - 1)\n\t\t{\n\t\t\tnums = nums[max_index .. $] ~ nums[0 .. max_index] ~ nums[max_index + 1 .. n - i - 1];\n\t\t\tnums = nums[0 .. n - i - 1] ~ nums[n - i .. $];\n\t\t}\n\t}\n\treturn nums;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. result.length)\n\t{\n\t\tlong max = maxElement(result[0 .. result.length - i]);\n\t\tlong max_index = result.indexOf(max);\n\t\tresult = result[max_index .. $] ~ result[0 .. max_index];\n\t\tresult = result[result.length - i .. $] ~ result[0 .. result.length - i];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tint n = result.length;\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tint max_idx = maxIndex(result[0..n-i]);\n\t\tresult = result[max_idx..$] ~ result[0..max_idx];\n\t\tresult = result[n-i..$] ~ result[0..n-i];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. result.length)\n\t{\n\t\tlong max_index = maxIndex(result[0 .. result.length - i]);\n\t\tif(max_index != result.length - i - 1)\n\t\t{\n\t\t\tresult = result[max_index .. $] ~ result[0 .. max_index] ~ result[$ - i .. $];\n\t\t\tresult = result[0 .. $ - i - 1] ~ result[$ .. $];\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] sorted = nums.dup;\n\tforeach(i; 0 .. nums.length) \n\t{\n\t\tlong max = sorted[0];\n\t\tlong max_index = 0;\n\t\tforeach(j; 0 .. sorted.length - i) \n\t\t{\n\t\t\tif(sorted[j] > max) \n\t\t\t{\n\t\t\t\tmax = sorted[j];\n\t\t\t\tmax_index = j;\n\t\t\t}\n\t\t}\n\t\tsorted = sorted[max_index .. $] ~ sorted[0 .. max_index];\n\t\tsorted = sorted[sorted.length - i .. $] ~ sorted[0 .. sorted.length - i];\n\t}\n\treturn sorted;\n}",
    "{\n\tlong[] nums_copy = nums.dup;\n\tlong[] result = [];\n\tforeach(i; 0 .. nums.length)\n\t{\n\t\tlong max_index = maxIndex(nums_copy);\n\t\tresult ~= max_index + 1;\n\t\tresult ~= i + 1;\n\t\tnums_copy = nums_copy[max_index .. $] ~ nums_copy[0 .. max_index];\n\t\tnums_copy = nums_copy[i .. $] ~ nums_copy[0 .. i];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] sorted = nums.dup;\n\t\n\tforeach(i; 0 .. nums.length)\n\t{\n\t\tlong max = sorted[0];\n\t\tlong max_index = 0;\n\t\t\n\t\tforeach(j; 0 .. sorted.length - i)\n\t\t{\n\t\t\tif(sorted[j] > max)\n\t\t\t{\n\t\t\t\tmax = sorted[j];\n\t\t\t\tmax_index = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(max_index != sorted.length - i - 1)\n\t\t{\n\t\t\tsorted = sorted[max_index .. $] ~ sorted[0 .. max_index];\n\t\t\tsorted = sorted[sorted.length - i .. $] ~ sorted[0 .. sorted.length - i];\n\t\t}\n\t}\n\t\n\treturn sorted;\n}",
    "{\n\tlong[] result = nums;\n\tint n = nums.length;\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tint max = maxIndex(result[0..n-i]);\n\t\tresult = flip(result, max);\n\t\tresult = flip(result, n-i-1);\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. result.length) \n\t{\n\t\tlong max_idx = maxIndex(result[0 .. i + 1]);\n\t\tif (max_idx != i) \n\t\t{\n\t\t\tresult = result[max_idx .. $] ~ result[max_idx + 1 .. i + 1] ~ result[0 .. max_idx];\n\t\t\tresult = result[i .. $] ~ result[0 .. i];\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums;\n\tforeach(i; 0 .. nums.length)\n\t{\n\t\tlong max_index = maxIndex(result[0 .. nums.length - i]);\n\t\tresult = flip(result, max_index + 1);\n\t\tresult = flip(result, nums.length - i);\n\t}\n\treturn result;\n}",
    "{\n\tlong[] sorted = nums.dup;\n\tforeach(i; 0 .. nums.length)\n\t{\n\t\tauto max = maxElement(sorted[0 .. nums.length - i]);\n\t\tauto max_index = max[1];\n\t\tif(max_index != nums.length - i - 1)\n\t\t{\n\t\t\treverse(sorted[0 .. max_index + 1]);\n\t\t\treverse(sorted[0 .. nums.length - i]);\n\t\t}\n\t}\n\treturn sorted;\n}",
    "{\n\tint n = nums.length;\n\tforeach(i; 0 .. n)\n\t{\n\t\tint max_idx = maxIndex(nums[0 .. n - i]);\n\t\treverse(nums[0 .. max_idx]);\n\t\treverse(nums[0 .. n - i]);\n\t}\n\treturn nums;\n}",
    "{\n\tlong[] result = nums.dup;\n\tint n = nums.length;\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tint max_idx = maxIndex(result[0..$-i]);\n\t\tresult = result[max_idx..$] + result[0..max_idx];\n\t\tresult = result[$-1..0] + result[$];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] nums_copy = nums.dup;\n\t\n\tforeach(i; 0 .. nums.length)\n\t{\n\t\tlong max_index = 0;\n\t\tforeach(j; 0 .. nums.length - i)\n\t\t{\n\t\t\tif(nums[j] > nums[max_index])\n\t\t\t\tmax_index = j;\n\t\t}\n\t\t\n\t\tif(max_index != nums.length - i - 1)\n\t\t{\n\t\t\tnums[0 .. max_index + 1] = nums[0 .. max_index + 1].reverse;\n\t\t\tnums[0 .. nums.length - i] = nums[0 .. nums.length - i].reverse;\n\t\t}\n\t}\n\t\n\treturn nums_copy;\n}",
    "{\n\tlong[] result = nums.dup;\n\tint n = nums.length;\n\t\n\tforeach(i; 0 .. n)\n\t{\n\t\tint max_idx = maxIndex(result[0 .. n - i]);\n\t\tresult = result[max_idx .. $] ~ result[0 .. max_idx];\n\t\tresult = result[n - i .. $] ~ result[0 .. n - i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] sorted = nums.dup;\n\tint n = nums.length;\n\tforeach(i; 0..n)\n\t{\n\t\tint max_idx = maxIndex(sorted[0..n-i]);\n\t\tsorted = sorted[max_idx..$] ~ sorted[0..max_idx];\n\t\tsorted = sorted[n-i..$] ~ sorted[0..n-i];\n\t}\n\treturn sorted;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. result.length)\n\t{\n\t\tlong max_index = maxIndex(result[0 .. i]);\n\t\tif(max_index != i)\n\t\t{\n\t\t\tresult = result[max_index .. $] ~ result[max_index + 1 .. i] ~ result[0 .. max_index];\n\t\t\tresult = result[i .. $] ~ result[0 .. i];\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tint n = nums.length;\n\tforeach(int i; 0..n)\n\t{\n\t\tint max_idx = maxIndex(nums[0..n-i]);\n\t\tif(max_idx != n-i-1)\n\t\t{\n\t\t\treverse(nums[0..max_idx+1]);\n\t\t\treverse(nums[0..n-i]);\n\t\t}\n\t}\n\treturn nums;\n}",
    "{\n\tlong[] nums_copy = nums.dup;\n\tlong[] result = new long[nums.length];\n\t\n\tforeach(i; 0 .. nums.length)\n\t{\n\t\tlong max_index = maxIndex(nums_copy);\n\t\t\n\t\tif(max_index != nums.length - 1 - i)\n\t\t{\n\t\t\tif(max_index != 0)\n\t\t\t{\n\t\t\t\tnums_copy = nums_copy[max_index .. $].reverse ~ nums_copy[0 .. max_index].reverse;\n\t\t\t}\n\t\t\t\n\t\t\tnums_copy = nums_copy[0 .. nums.length - 1 - i].reverse ~ nums_copy[nums.length - i .. $];\n\t\t}\n\t\t\n\t\tresult[i] = nums_copy[nums.length - 1 - i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tint n = nums.length;\n\tforeach(i; 0 .. n)\n\t{\n\t\tint max_idx = maxIndex(nums[0 .. n - i]);\n\t\tif(max_idx == n - i - 1)\n\t\t\tcontinue;\n\t\treverse(nums[0 .. max_idx + 1]);\n\t\treverse(nums[0 .. n - i]);\n\t}\n\treturn nums;\n}",
    "{\n\tauto n = nums.length;\n\tforeach(i; 0 .. n) \n\t{\n\t\tauto max_idx = maxIndex(nums[0 .. n - i]);\n\t\treverse(nums[0 .. max_idx + 1]);\n\t\treverse(nums[0 .. n - i]);\n\t}\n\treturn nums;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. result.length) \n\t{\n\t\tlong max_index = maxIndex(result[0 .. i + 1]);\n\t\tif(max_index != i) \n\t\t{\n\t\t\tresult = result[max_index .. $].reverse ~ result[0 .. max_index].reverse ~ result[i + 1 .. $];\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. result.length)\n\t{\n\t\tlong max_index = maxIndex(result[0 .. result.length - i]);\n\t\tresult = result[max_index .. $] ~ result[0 .. max_index];\n\t\tresult = result[0 .. result.length - i] ~ result[result.length - i .. $];\n\t}\n\treturn result;\n}",
    "{\n\tauto n = nums.length;\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tint max_idx = maxIndex(nums[0 .. n - i]);\n\t\tnums = nums[max_idx .. n - i].array.reverse() ~ nums[0 .. max_idx].array.reverse() ~ nums[n - i .. n].array;\n\t}\n\treturn nums;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. result.length)\n\t{\n\t\tlong max_index = maxIndex(result[0 .. i+1]);\n\t\tif(max_index != i)\n\t\t{\n\t\t\tresult = result[max_index .. $] ~ result[0 .. max_index];\n\t\t\tresult = result[i .. $] ~ result[0 .. i];\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tauto n = nums.length;\n\tforeach(i; 0 .. n)\n\t{\n\t\tauto max_idx = maxIndex(nums[0 .. n - i]);\n\t\treverse(nums[0 .. max_idx + 1]);\n\t\treverse(nums[0 .. n - i]);\n\t}\n\treturn nums;\n}",
    "{\n\tlong[] result = nums.dup;\n\t\n\tforeach(i; 0 .. result.length)\n\t{\n\t\tlong max_index = 0;\n\t\tforeach(j; 0 .. result.length - i)\n\t\t{\n\t\t\tif(result[j] > result[max_index])\n\t\t\t\tmax_index = j;\n\t\t}\n\t\t\n\t\tif(max_index != result.length - i - 1)\n\t\t{\n\t\t\tresult = result[0 .. max_index + 1].reverse ~ result[max_index + 1 .. $];\n\t\t\tresult = result[0 .. result.length - i].reverse ~ result[result.length - i .. $];\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] sorted = nums.dup;\n\tlong[] temp = nums.dup;\n\tlong[] temp2 = nums.dup;\n\tlong[] temp3 = nums.dup;\n\tlong[] temp4 = nums.dup;\n\tlong[] temp5 = nums.dup;\n\tlong[] temp6 = nums.dup;\n\tlong[] temp7 = nums.dup;\n\tlong[] temp8 = nums.dup;\n\tlong[] temp9 = nums.dup;\n\tlong[] temp10 = nums.dup;\n\tlong[] temp11 = nums.dup;\n\tlong[] temp12 = nums.dup;\n\tlong[] temp13 = nums.dup;\n\tlong[] temp14 = nums.dup;\n\tlong[] temp15 = nums.dup;\n\tlong[] temp16 = nums.dup;\n\tlong[] temp17 = nums.dup;\n\tlong[] temp18 = nums.dup;\n\tlong[] temp19 = nums.dup;\n\tlong[] temp20 = nums.dup;\n\tlong[] temp21 = nums.dup;\n\tlong[] temp22 = nums.dup;\n\tlong[] temp23 = nums.dup;\n\tlong[] temp24 = nums.dup;\n\tlong[] temp25 = nums.dup;\n\tlong[] temp26 = nums.dup;\n\tlong[] temp27 = nums.dup;\n\tlong[] temp28 = nums.dup;\n\tlong[] temp29 = nums.dup;\n\tlong[] temp30 = nums.dup;\n\tlong[] temp31 = nums.dup;\n\tlong[] temp32 = nums.dup;\n\tlong[] temp33 = nums.dup;\n\tlong[] temp34 = nums.dup;\n\tlong[] temp35 = nums.dup;\n\tlong[] temp36 = nums.dup;\n\tlong[] temp37 = nums.dup;\n\tlong[] temp38 = nums.dup;\n\tlong[] temp",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. result.length) \n\t{\n\t\tlong max_index = maxIndex(result[0 .. i + 1]);\n\t\tif (max_index != i) \n\t\t{\n\t\t\tresult = result[max_index .. max_index + 1] ~ result[0 .. max_index] ~ result[max_index + 1 .. $];\n\t\t\tresult = result[i .. i + 1] ~ result[0 .. i] ~ result[i + 1 .. $];\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tauto n = nums.length;\n\tforeach(i; 0 .. n - 1) \n\t{\n\t\t// Find index of the maximum element in the range [0, n - i)\n\t\tauto max_idx = maxIndex(nums[0 .. n - i]);\n\t\t\n\t\t// Flip the range [0, max_idx]\n\t\tnums[0 .. max_idx + 1] = nums[0 .. max_idx + 1].reversed;\n\t\t\n\t\t// Flip the range [0, n - i - 1]\n\t\tnums[0 .. n - i] = nums[0 .. n - i].reversed;\n\t}\n\treturn nums;\n}",
    "{\n\tauto n = nums.length;\n\tforeach(i; 0 .. n)\n\t{\n\t\tauto max_index = maxIndex(nums[0 .. n - i]);\n\t\tif(max_index != n - i - 1)\n\t\t{\n\t\t\tnums = nums[max_index .. $] ~ nums[0 .. max_index] ~ nums[n - i .. $];\n\t\t\tnums = nums[0 .. n - i] ~ nums[n - i .. $];\n\t\t}\n\t}\n\treturn nums;\n}",
    "{\n\tauto n = nums.length;\n\tforeach(i; 0 .. n) \n\t{\n\t\tauto max_idx = maxIndex(nums[0 .. n - i]);\n\t\treverse(nums[0 .. max_idx + 1]);\n\t\treverse(nums[0 .. n - i]);\n\t}\n\treturn nums;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. result.length)\n\t{\n\t\tlong max_index = maxIndex(result[0 .. i + 1]);\n\t\tif(max_index != i)\n\t\t{\n\t\t\tresult = result[max_index .. max_index + 1] ~ result[0 .. max_index] ~ result[max_index + 1 .. $];\n\t\t\tresult = result[i .. i + 1] ~ result[0 .. i] ~ result[i + 1 .. $];\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\t\n\tforeach(i; 0 .. nums.length)\n\t{\n\t\tlong max_index = maxIndex(result[0 .. nums.length - i]);\n\t\t\n\t\tresult = result[max_index .. $] ~ result[0 .. max_index];\n\t\tresult = result[0 .. nums.length - i] ~ result[nums.length - i .. $];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\t\n\tforeach(i; 0 .. result.length)\n\t{\n\t\tlong max_index = max_index_of(result[0 .. result.length - i]);\n\t\t\n\t\tif(max_index != result.length - i - 1)\n\t\t{\n\t\t\tresult = flip(result, max_index);\n\t\t\tresult = flip(result, result.length - i - 1);\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] sorted = nums.dup;\n\tforeach(i; 0 .. nums.length)\n\t{\n\t\tlong max_index = maxIndex(sorted[0 .. nums.length - i]);\n\t\tsorted = sorted[max_index .. $] ~ sorted[0 .. max_index];\n\t\tsorted = sorted[0 .. nums.length - i] ~ sorted[nums.length - i .. $];\n\t}\n\treturn sorted;\n}",
    "{\n\tauto n = nums.length;\n\tfor (auto i = 0; i < n; i++) \n\t{\n\t\tauto max_idx = maxIndex(nums[0 .. n - i]);\n\t\treverse(nums[0 .. max_idx + 1]);\n\t\treverse(nums[0 .. n - i]);\n\t}\n\treturn nums;\n}",
    "{\n\tint n = nums.length;\n\tforeach(i; 0 .. n) \n\t{\n\t\tint max_idx = maxIndex(nums[0 .. n - i]);\n\t\treverse(nums[0 .. max_idx]);\n\t\treverse(nums[0 .. n - i]);\n\t}\n\treturn nums;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. result.length)\n\t{\n\t\tlong max = result[0];\n\t\tlong max_index = 0;\n\t\tforeach(j; 0 .. result.length - i)\n\t\t{\n\t\t\tif(result[j] > max)\n\t\t\t{\n\t\t\t\tmax = result[j];\n\t\t\t\tmax_index = j;\n\t\t\t}\n\t\t}\n\t\tif(max_index != result.length - i - 1)\n\t\t{\n\t\t\tresult = result[max_index .. $] ~ result[0 .. max_index].reverse ~ result[$ - i .. $];\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tint n = nums.length;\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tint max_idx = maxIndex(result[0..$-i]);\n\t\tresult = result[max_idx..$] ~ result[0..max_idx];\n\t\tresult = result[$-1..0] ~ result[$];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tint n = nums.length;\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tint max = 0;\n\t\tfor (int j = 0; j < n - i; j++) \n\t\t{\n\t\t\tif (result[j] > result[max]) \n\t\t\t{\n\t\t\t\tmax = j;\n\t\t\t}\n\t\t}\n\t\tresult = result[max..$].reverse.cat(result[0..max].reverse).cat(result[$-i..$]);\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. result.length) \n\t{\n\t\tlong max_index = maxIndex(result[0 .. result.length - i]);\n\t\tif (max_index != result.length - i - 1) \n\t\t{\n\t\t\tresult = result[max_index .. $] ~ result[0 .. max_index];\n\t\t\tresult = result[0 .. result.length - i - 1] ~ result[result.length - i .. $];\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. nums.length) \n\t{\n\t\tauto max = maxElement(result[0 .. nums.length - i]);\n\t\tauto max_index = max.index;\n\t\tauto max_value = max.value;\n\t\t\n\t\tif(max_index != nums.length - i - 1) \n\t\t{\n\t\t\tresult = result[max_index .. $] ~ result[0 .. max_index].reverse ~ result[$ - i .. $];\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\t\n\tforeach(i; 0 .. result.length)\n\t{\n\t\tlong max_index = maxIndex(result[0 .. result.length - i]);\n\t\t\n\t\tif(max_index != result.length - i - 1)\n\t\t{\n\t\t\tresult = result[max_index .. $] ~ result[0 .. max_index];\n\t\t\tresult = result[result.length - i - 1 .. $] ~ result[0 .. result.length - i - 1];\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tint n = result.length;\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tint max_idx = maxIndex(result[0..$-i]);\n\t\tresult = result[max_idx..$] ~ result[0..max_idx];\n\t\tresult = result[$-1..0] ~ result[$];\n\t}\n\treturn result;\n}",
    "{\n\tint n = nums.length;\n\tforeach(i; 0 .. n) \n\t{\n\t\tint max_idx = maxIndex(nums[0 .. n - i]);\n\t\treverse(nums[0 .. max_idx]);\n\t\treverse(nums[0 .. n - i]);\n\t}\n\treturn nums;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. result.length)\n\t{\n\t\tlong max_index = maxIndex(result[0 .. i + 1]);\n\t\tif(max_index != i)\n\t\t{\n\t\t\tresult = result[max_index .. max_index + 1] ~ result[0 .. max_index] ~ result[max_index + 1 .. $];\n\t\t\tresult = result[i .. i + 1] ~ result[0 .. i] ~ result[i + 1 .. $];\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0..result.length)\n\t{\n\t\tlong max_index = maxIndex(result[0..result.length-i]);\n\t\tresult = result[max_index..$] ~ result[0..max_index];\n\t\tresult = result[result.length-i..$] ~ result[0..result.length-i];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. result.length)\n\t{\n\t\tlong max = maxElement(result[0 .. i]);\n\t\tlong maxIndex = result[0 .. i].indexOf(max);\n\t\tresult = result[maxIndex .. i].reverse ~ result[i .. $];\n\t\tresult = result[0 .. i].reverse ~ result[i .. $];\n\t}\n\treturn result;\n}",
    "{\n\tauto nums_copy = nums.dup;\n\tint n = nums.length;\n\t\n\tforeach(i; 0 .. n)\n\t{\n\t\tint max_index = maxIndex(nums_copy[0 .. n - i]);\n\t\t\n\t\tif(max_index != n - i - 1)\n\t\t{\n\t\t\treverse(nums_copy[0 .. max_index + 1]);\n\t\t\treverse(nums_copy[0 .. n - i]);\n\t\t}\n\t}\n\t\n\treturn nums_copy;\n}",
    "{\n\tlong[] result = nums.dup;\n\tlong[] temp = nums.dup;\n\tlong[] temp2 = nums.dup;\n\tlong[] temp3 = nums.dup;\n\tlong[] temp4 = nums.dup;\n\tlong[] temp5 = nums.dup;\n\tlong[] temp6 = nums.dup;\n\tlong[] temp7 = nums.dup;\n\tlong[] temp8 = nums.dup;\n\tlong[] temp9 = nums.dup;\n\tlong[] temp10 = nums.dup;\n\tlong[] temp11 = nums.dup;\n\tlong[] temp12 = nums.dup;\n\tlong[] temp13 = nums.dup;\n\tlong[] temp14 = nums.dup;\n\tlong[] temp15 = nums.dup;\n\tlong[] temp16 = nums.dup;\n\tlong[] temp17 = nums.dup;\n\tlong[] temp18 = nums.dup;\n\tlong[] temp19 = nums.dup;\n\tlong[] temp20 = nums.dup;\n\tlong[] temp21 = nums.dup;\n\tlong[] temp22 = nums.dup;\n\tlong[] temp23 = nums.dup;\n\tlong[] temp24 = nums.dup;\n\tlong[] temp25 = nums.dup;\n\tlong[] temp26 = nums.dup;\n\tlong[] temp27 = nums.dup;\n\tlong[] temp28 = nums.dup;\n\tlong[] temp29 = nums.dup;\n\tlong[] temp30 = nums.dup;\n\tlong[] temp31 = nums.dup;\n\tlong[] temp32 = nums.dup;\n\tlong[] temp33 = nums.dup;\n\tlong[] temp34 = nums.dup;\n\tlong[] temp35 = nums.dup;\n\tlong[] temp36 = nums.dup;\n\tlong[] temp37 = nums.dup;\n\tlong[] temp38 = nums.dup;\n\tlong[] temp",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. result.length)\n\t{\n\t\tlong max = maxElement(result[0 .. result.length - i]);\n\t\tlong max_index = result.indexOf(max);\n\t\tresult = result[max_index .. $] ~ result[0 .. max_index];\n\t\tresult = result[result.length - i .. $] ~ result[0 .. result.length - i];\n\t}\n\treturn result;\n}",
    "{\n\tint n = nums.length;\n\tforeach(int i; 0..n)\n\t{\n\t\tint max_idx = maxIndex(nums[0..n-i]);\n\t\treverse(nums[0..max_idx]);\n\t\treverse(nums[0..n-i]);\n\t}\n\treturn nums;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(index, value; nums)\n\t{\n\t\tlong max_index = max_element(result[0..index+1]).index;\n\t\tif(max_index != index)\n\t\t{\n\t\t\tresult = flip(result, max_index);\n\t\t\tresult = flip(result, index);\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] sorted = nums.dup;\n\tforeach(i; 0 .. nums.length)\n\t{\n\t\tlong max_index = maxIndex(sorted[0 .. nums.length - i]);\n\t\tif (max_index != nums.length - i - 1)\n\t\t{\n\t\t\tsorted = flip(sorted, max_index);\n\t\t\tsorted = flip(sorted, nums.length - i - 1);\n\t\t}\n\t}\n\treturn sorted;\n}",
    "{\n\tauto n = nums.length;\n\tforeach(i; 0 .. n) \n\t{\n\t\tauto max_idx = maxIndex(nums[0 .. n - i]);\n\t\treverse(nums[0 .. max_idx + 1]);\n\t\treverse(nums[0 .. n - i]);\n\t}\n\treturn nums;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. result.length)\n\t{\n\t\tlong max_index = maxIndex(result[0 .. i + 1]);\n\t\tif(max_index != i)\n\t\t{\n\t\t\tresult = result[max_index .. max_index + 1] ~ result[0 .. max_index] ~ result[max_index + 1 .. $];\n\t\t\tresult = result[i .. i + 1] ~ result[0 .. i] ~ result[i + 1 .. $];\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. result.length)\n\t{\n\t\tlong max_index = maxIndex(result[0 .. result.length - i]);\n\t\tresult = result[max_index .. $] ~ result[0 .. max_index];\n\t\tresult = result[0 .. result.length - i] ~ result[result.length - i .. $];\n\t}\n\treturn result;\n}",
    "{\n\tint n = nums.length;\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tint max_idx = maxIndex(nums[0..n-i]);\n\t\treverse(nums[0..max_idx]);\n\t\treverse(nums[0..n-i]);\n\t}\n\treturn nums;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. result.length)\n\t{\n\t\tlong max_index = maxIndex(result[0 .. i]);\n\t\tif(max_index != i)\n\t\t{\n\t\t\tresult = result[max_index .. $].reverse ~ result[0 .. max_index].reverse ~ result[i .. $];\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(index, value; result)\n\t{\n\t\tauto max_index = maxIndex(result[0..index+1]);\n\t\tif(max_index != index)\n\t\t{\n\t\t\tresult = result[max_index..$].reverse.cat(result[0..max_index]).reverse;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. nums.length) \n\t{\n\t\tlong max_index = maxIndex(result[0 .. nums.length - i]);\n\t\tresult = result[max_index .. $] ~ result[0 .. max_index];\n\t\tresult = result[0 .. nums.length - i] ~ result[nums.length - i .. $];\n\t}\n\treturn result;\n}",
    "{\n\tauto n = nums.length;\n\tfor (auto i = 0; i < n; i++) \n\t{\n\t\tauto max_idx = maxIndex(nums[0 .. n - i]);\n\t\treverse(nums[0 .. max_idx + 1]);\n\t\treverse(nums[0 .. n - i]);\n\t}\n\treturn nums;\n}",
    "{\n\tlong[] result = nums.dup;\n\tint n = nums.length;\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tint max_idx = maxIndex(result[0 .. n - i]);\n\t\tresult = result[max_idx .. $] ~ result[0 .. max_idx];\n\t\tresult = result[0 .. n - i - 1] ~ result[n - i .. $];\n\t}\n\treturn result;\n}",
    "{\n\tint n = nums.length;\n\tforeach(int i; 0 .. n) \n\t{\n\t\tint max_idx = maxIndex(nums[0 .. n - i]);\n\t\tif (max_idx == n - i - 1) \n\t\t\tcontinue;\n\t\treverse(nums[0 .. max_idx + 1]);\n\t\treverse(nums[0 .. n - i]);\n\t}\n\treturn nums;\n}",
    "{\n\tlong[] sorted = nums.dup;\n\t\n\tforeach(i; 0 .. nums.length)\n\t{\n\t\tauto max_index = maxIndex(sorted[0 .. nums.length - i]);\n\t\t\n\t\tif(max_index != nums.length - i - 1)\n\t\t{\n\t\t\tsorted = sorted[max_index .. $] ~ sorted[0 .. max_index];\n\t\t\tsorted = sorted[0 .. nums.length - i] ~ sorted[nums.length - i .. $];\n\t\t}\n\t}\n\t\n\treturn sorted;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. result.length)\n\t{\n\t\tlong max_index = maxIndex(result[0 .. result.length - i]);\n\t\tresult = result[max_index .. $] ~ result[0 .. max_index] ~ result[result.length - i .. $];\n\t}\n\treturn result;\n}",
    "{\n\tauto n = nums.length;\n\tif (n == 0) return nums;\n\tforeach (i; 0 .. n) \n\t{\n\t\tauto max_index = maxIndex(nums[0 .. n - i]);\n\t\treverse(nums[0 .. max_index + 1]);\n\t\treverse(nums[0 .. n - i]);\n\t}\n\treturn nums;\n}",
    "{\n\tlong[] result = nums.dup;\n\tint n = nums.length;\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tint max_idx = maxIndex(result[0..n-i]);\n\t\tresult = reverse(result[0..max_idx+1]);\n\t\tresult = reverse(result[0..n-i]);\n\t}\n\treturn result;\n}",
    "{\n\tlong[] sorted_nums = nums.dup;\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint n = nums.length;\n\tint max_index = 0;\n\tint max_value = 0;\n\t\n\twhile (n > 1)\n\t{\n\t\tmax_value = sorted_nums[0];\n\t\tmax_index = 0;\n\t\t\n\t\tfor (i = 1; i < n; i++)\n\t\t{\n\t\t\tif (sorted_nums[i] > max_value)\n\t\t\t{\n\t\t\t\tmax_value = sorted_nums[i];\n\t\t\t\tmax_index = i;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (max_index != n - 1)\n\t\t{\n\t\t\tif (max_index != 0)\n\t\t\t{\n\t\t\t\tfor (j = 0; j < max_index / 2; j++)\n\t\t\t\t{\n\t\t\t\t\tsorted_nums[j] = sorted_nums[j] ^ sorted_nums[max_index - j];\n\t\t\t\t\tsorted_nums[max_index - j] = sorted_nums[j] ^ sorted_nums[max_index - j];\n\t\t\t\t\tsorted_nums[j] = sorted_nums[j] ^ sorted_nums[max_index - j];\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tfor (k = 0; k < n / 2; k++)\n\t\t\t{\n\t\t\t\tsorted_nums[k] = sorted_nums[k] ^ sorted_nums[n - 1 - k];\n\t\t\t\tsorted_nums[n - 1 - k] = sorted_nums[k] ^ sorted_nums[n - 1 - k];\n\t\t\t\tsorted_nums[k] = sorted_nums[k] ^ sorted_nums[n - 1 - k];\n\t\t\t}\n\t\t}\n\t\t\n\t\tn--",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. nums.length) \n\t{\n\t\tlong max = maxElement(result[0 .. nums.length - i]);\n\t\tlong max_index = result.indexOf(max);\n\t\tresult = result[max_index .. $] ~ result[0 .. max_index];\n\t\tresult = result[nums.length - i .. $] ~ result[0 .. nums.length - i];\n\t}\n\treturn result;\n}",
    "{\n\tauto n = nums.length;\n\tforeach(i; 0 .. n) \n\t{\n\t\tauto max_idx = maxIndex(nums[0 .. n - i]);\n\t\tif (max_idx != n - i - 1) \n\t\t{\n\t\t\tnums = nums[max_idx .. $] ~ nums[0 .. max_idx];\n\t\t\tnums = nums[0 .. n - i] ~ nums[n - i .. $];\n\t\t}\n\t}\n\treturn nums;\n}",
    "{\n\tlong[] result = nums.dup;\n\tint n = nums.length;\n\t\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tint max_idx = maxIndex(result[0..n-i]);\n\t\tresult = flip(result, max_idx+1);\n\t\tresult = flip(result, n-i);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = nums;\n\tlong[] temp = new long[nums.length];\n\tlong[] temp2 = new long[nums.length];\n\tlong[] temp3 = new long[nums.length];\n\tlong[] temp4 = new long[nums.length];\n\tlong[] temp5 = new long[nums.length];\n\tlong[] temp6 = new long[nums.length];\n\tlong[] temp7 = new long[nums.length];\n\tlong[] temp8 = new long[nums.length];\n\tlong[] temp9 = new long[nums.length];\n\tlong[] temp10 = new long[nums.length];\n\tlong[] temp11 = new long[nums.length];\n\tlong[] temp12 = new long[nums.length];\n\tlong[] temp13 = new long[nums.length];\n\tlong[] temp14 = new long[nums.length];\n\tlong[] temp15 = new long[nums.length];\n\tlong[] temp16 = new long[nums.length];\n\tlong[] temp17 = new long[nums.length];\n\tlong[] temp18 = new long[nums.length];\n\tlong[] temp19 = new long[nums.length];\n\tlong[] temp20 = new long[nums.length];\n\tlong[] temp21 = new long[nums.length];\n\tlong[] temp22 = new long[nums.length];\n\tlong[] temp23 = new long[nums.length];\n\tlong[] temp24 = new long[nums.length];\n\tlong[] temp25 = new long[nums.length];\n\tlong[] temp26 = new long[nums.length];\n\tlong[] temp27 = new long[nums.length];\n\tlong[] temp28 = new long[nums.length];\n\tlong[] temp29 = new long[nums.length];\n\tlong[] temp30 = new long[nums.length];\n\tlong[] temp31 = new long[nums.length];\n\tlong[] temp32 = new long[nums.length];\n\tlong[] temp33 = new long[nums.length];\n\tlong[] temp34 =",
    "{\n\tlong[] result = nums.dup;\n\t\n\tforeach(i; 0 .. nums.length)\n\t{\n\t\tlong max_index = maxIndex(result[0 .. nums.length - i]);\n\t\t\n\t\tif(max_index != nums.length - i - 1)\n\t\t{\n\t\t\tresult = reverse(result[0 .. max_index + 1]) ~ result[max_index + 1 .. $];\n\t\t\tresult = reverse(result[0 .. nums.length - i]);\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] nums_copy = nums.dup;\n\tlong[] nums_sorted = nums.dup;\n\tnums_sorted.sort;\n\t\n\tforeach(i; 0..nums.length)\n\t{\n\t\tlong[] nums_copy_reversed = nums_copy[0..i].reverse;\n\t\tlong[] nums_copy_reversed_sorted = nums_copy_reversed.dup;\n\t\tnums_copy_reversed_sorted.sort;\n\t\t\n\t\tif(nums_copy_reversed_sorted != nums_sorted[0..i])\n\t\t{\n\t\t\tnums_copy = nums_copy_reversed ~ nums_copy[i..$];\n\t\t}\n\t}\n\t\n\treturn nums_copy;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. result.length)\n\t{\n\t\tlong max = maxElement(result[0 .. result.length - i]);\n\t\tlong max_index = result.indexOf(max);\n\t\tresult = result[max_index .. $] ~ result[0 .. max_index];\n\t\tresult = result[result.length - i .. $] ~ result[0 .. result.length - i];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = nums.dup;\n\tforeach(i; 0 .. result.length)\n\t{\n\t\tlong max = maxElement(result[0 .. result.length - i]);\n\t\tlong max_index = result.indexOf(max);\n\t\tresult = result[max_index .. $] ~ result[0 .. max_index];\n\t\tresult = result[result.length - i .. $] ~ result[0 .. result.length - i];\n\t}\n\treturn result;\n}",
    "{\n\tint n = nums.length;\n\tforeach(int i; 0 .. n) \n\t{\n\t\tint max_idx = maxIndex(nums[0 .. n - i]);\n\t\tif (max_idx != n - i - 1) \n\t\t{\n\t\t\tnums = nums[max_idx .. $] ~ nums[0 .. max_idx] ~ nums[n - i .. $];\n\t\t\tnums = nums[0 .. n - i - 1] ~ nums[n - i .. $];\n\t\t}\n\t}\n\treturn nums;\n}"
  ]
}