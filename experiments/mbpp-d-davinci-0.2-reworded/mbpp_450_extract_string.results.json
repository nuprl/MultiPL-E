{
  "name": "mbpp_450_extract_string",
  "language": "d",
  "prompt": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_450_extract_string.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t\tresult ~= s;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t\tresult ~= s;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result = new string[str.length];\n\tfor(long i = 0; i < str.length; i++)\n\t{\n\t\tif(str[i].length < l)\n\t\t{\n\t\t\tresult[i] = str[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[i] = str[i][0..l-1];\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpw6v8j99j.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x428ee5]\n??:? void tmpw6v8j99j.__unittest_L23_C1() [0x427e1f]\n??:? void tmpw6v8j99j.__modtest() [0x428150]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d88f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428c3e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a73d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a7cc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a6c9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428c15]\n??:? runModuleUnitTests [0x42d665]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4293a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result = new string[str.length];\n\tforeach(i, s; str)\n\t{\n\t\tresult[i] = s[0..l];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp8dkmb_yx.d(12): Range violation\n----------------\n??:? _d_arrayboundsp [0x428ef6]\n??:? immutable(char)[][] tmp8dkmb_yx.extract_string(immutable(char)[][], long) [0x427c37]\n??:? void tmp8dkmb_yx.__unittest_L16_C1() [0x427d18]\n??:? void tmp8dkmb_yx.__modtest() [0x4280b0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d7ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428b9e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a69d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a72c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a629]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428b75]\n??:? runModuleUnitTests [0x42d5c5]\n??:? void rt.dmain2._d_run_main(in",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result = new string[str.length];\n\tfor(int i = 0; i < str.length; i++)\n\t{\n\t\tif(str[i].length > l)\n\t\t{\n\t\t\tresult[i] = str[i].substr(0, l);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[i] = str[i];\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "/tmp/tmp_eev83jd.d(14): Error: no property `substr` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_eev83jd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result = new string[str.length];\n\tfor (long i = 0; i < str.length; i++) \n\t{\n\t\tresult[i] = str[i].substr(0, l);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "/tmp/tmpatgsudc6.d(12): Error: no property `substr` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpatgsudc6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result = new string[str.length];\n\tforeach(i, s; str)\n\t{\n\t\tif(s.length > l)\n\t\t{\n\t\t\tresult[i] = s[0..l];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[i] = s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjgkw6p7m.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x428e9d]\n??:? void tmpjgkw6p7m.__unittest_L23_C1() [0x427dd7]\n??:? void tmpjgkw6p7m.__modtest() [0x428108]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d847]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428bf6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a6f5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a784]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a681]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428bcd]\n??:? runModuleUnitTests [0x42d61d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429360]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t\tresult ~= s;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result = new string[str.length];\n\t\n\tforeach(i, s; str)\n\t{\n\t\tif(s.length > l)\n\t\t{\n\t\t\tresult[i] = s[0..l];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[i] = s;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1666123793,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp4e4zn78y.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x428e9d]\n??:? void tmp4e4zn78y.__unittest_L25_C1() [0x427dd7]\n??:? void tmp4e4zn78y.__modtest() [0x428108]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d847]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428bf6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a6f5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a784]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a681]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428bcd]\n??:? runModuleUnitTests [0x42d61d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429360]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t\tresult ~= s;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t\tresult ~= s;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t\tresult ~= s;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t\tresult ~= s;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t\tresult ~= s;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t\tresult ~= s;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] res;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t\tres ~= s;\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1666123793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str) \n\t{\n\t\tif(s.length == l) \n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1666123793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result = new string[str.length];\n\tforeach(i, s; str)\n\t{\n\t\tif(s.length > l)\n\t\t\tresult[i] = s[0..l];\n\t\telse\n\t\t\tresult[i] = s;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1666123793,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpmtd8vrbr.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x428e9d]\n??:? void tmpmtd8vrbr.__unittest_L19_C1() [0x427dd7]\n??:? void tmpmtd8vrbr.__modtest() [0x428108]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d847]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428bf6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a6f5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a784]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a681]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428bcd]\n??:? runModuleUnitTests [0x42d61d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429360]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t\tresult ~= s;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] str_extracted;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tstr_extracted ~= s;\n\t\t}\n\t}\n\treturn str_extracted;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1666123793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t\tresult ~= s;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str) \n\t{\n\t\tif(s.length == l) \n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1666123793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result = new string[str.length];\n\tforeach(i, s; str)\n\t{\n\t\tif(s.length == l)\n\t\t\tresult ~= s;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1666123793,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpli3altxp.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428e3d]\n??:? void tmpli3altxp.__unittest_L17_C1() [0x427d73]\n??:? void tmpli3altxp.__modtest() [0x4280a4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e15f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428b96]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b00d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b09c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42af99]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428b6d]\n??:? runModuleUnitTests [0x42df35]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42928c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t\tresult ~= s;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t\tresult ~= s;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result = new string[str.length];\n\tfor (int i = 0; i < str.length; i++) {\n\t\tresult[i] = str[i][0 .. l];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1666123793,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp2rthvtip.d(11): Range violation\n----------------\n??:? _d_arrayboundsp [0x428efe]\n??:? immutable(char)[][] tmp2rthvtip.extract_string(immutable(char)[][], long) [0x427c3e]\n??:? void tmp2rthvtip.__unittest_L15_C1() [0x427d1c]\n??:? void tmp2rthvtip.__modtest() [0x4280b4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d7f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428ba6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a6a5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a734]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a631]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428b7d]\n??:? runModuleUnitTests [0x42d5cd]\n??:? void rt.dmain2._d_run_main(in",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result = new string[str.length];\n\tforeach(i, s; str)\n\t{\n\t\tif(s.length >= l)\n\t\t\tresult[i] = s[0..l-1];\n\t\telse\n\t\t\tresult[i] = s;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1666123793,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpv9db8ugx.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x428e9d]\n??:? void tmpv9db8ugx.__unittest_L19_C1() [0x427dd7]\n??:? void tmpv9db8ugx.__modtest() [0x428108]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d847]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428bf6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a6f5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a784]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a681]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428bcd]\n??:? runModuleUnitTests [0x42d61d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429360]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] str2;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tstr2 ~= s;\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1666123793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result = new string[str.length];\n\tforeach(i, s; str)\n\t{\n\t\tif(s.length > l)\n\t\t{\n\t\t\tresult[i] = s[0..l];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[i] = s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjgkw6p7m.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x428e9d]\n??:? void tmpjgkw6p7m.__unittest_L23_C1() [0x427dd7]\n??:? void tmpjgkw6p7m.__modtest() [0x428108]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d847]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428bf6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a6f5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a784]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a681]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428bcd]\n??:? runModuleUnitTests [0x42d61d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429360]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t\tresult ~= s;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result = new string[str.length];\n\tint i = 0;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult[i] = s;\n\t\t\ti++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1666123793,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpvou78v3z.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x428e3d]\n??:? void tmpvou78v3z.__unittest_L21_C1() [0x427d77]\n??:? void tmpvou78v3z.__modtest() [0x4280a8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d7e7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428b96]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a695]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a724]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a621]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428b6d]\n??:? runModuleUnitTests [0x42d5bd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429300]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str) \n\t{\n\t\tif(s.length == l) \n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1666123793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t\tresult ~= s;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result = new string[str.length];\n\tint i = 0;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult[i] = s;\n\t\t\ti++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1666123793,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpvou78v3z.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x428e3d]\n??:? void tmpvou78v3z.__unittest_L21_C1() [0x427d77]\n??:? void tmpvou78v3z.__modtest() [0x4280a8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d7e7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428b96]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a695]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a724]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a621]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428b6d]\n??:? runModuleUnitTests [0x42d5bd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429300]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result = new string[str.length];\n\tforeach(i, s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult[i] = s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1666123793,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp9rv40ckz.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x428e3d]\n??:? void tmp9rv40ckz.__unittest_L19_C1() [0x427d77]\n??:? void tmp9rv40ckz.__modtest() [0x4280a8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d7e7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428b96]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a695]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a724]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a621]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428b6d]\n??:? runModuleUnitTests [0x42d5bd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429300]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t\tresult ~= s;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t\tresult ~= s;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] res;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t\tres ~= s;\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1666123793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result = new string[str.length];\n\tforeach(i, s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult[i] = s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1666123793,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp9rv40ckz.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x428e3d]\n??:? void tmp9rv40ckz.__unittest_L19_C1() [0x427d77]\n??:? void tmp9rv40ckz.__modtest() [0x4280a8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d7e7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428b96]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a695]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a724]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a621]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428b6d]\n??:? runModuleUnitTests [0x42d5bd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429300]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t\tresult ~= s;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] str2 = new string[str.length];\n\tint j = 0;\n\tfor (int i = 0; i < str.length; i++)\n\t{\n\t\tif (str[i].length == l)\n\t\t{\n\t\t\tstr2[j] = str[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1666123793,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp99kthoxw.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x428e5d]\n??:? void tmp99kthoxw.__unittest_L21_C1() [0x427d97]\n??:? void tmp99kthoxw.__modtest() [0x4280c8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d807]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428bb6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a6b5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a744]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a641]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428b8d]\n??:? runModuleUnitTests [0x42d5dd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429320]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] res;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tres ~= s;\n\t\t}\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1666123793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t\tresult ~= s;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t\tresult ~= s;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length > l)\n\t\t\tresult ~= s;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1666123793,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpocqr86iu.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428e35]\n??:? void tmpocqr86iu.__unittest_L17_C1() [0x427d6b]\n??:? void tmpocqr86iu.__modtest() [0x42809c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e0fb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428b8e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42afa9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b038]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42af35]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428b65]\n??:? runModuleUnitTests [0x42ded1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429284]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope void delegate()) [0x42920b]\n??:? _d_run_main [0x429176]\n??:? main [0x4280af]\n??:? __libc_start_main [0x42df8554]\n1/1 unittests FAILED\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t\tresult ~= s;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result = new string[l];\n\tforeach(i, s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1666123793,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpw4n6an03.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x428e3d]\n??:? void tmpw4n6an03.__unittest_L19_C1() [0x427d73]\n??:? void tmpw4n6an03.__modtest() [0x4280a4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e15f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428b96]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b00d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b09c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42af99]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428b6d]\n??:? runModuleUnitTests [0x42df35]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42928c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] res;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tres ~= s;\n\t\t}\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1666123793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result = new string[str.length];\n\tfor (long i = 0; i < str.length; i++)\n\t{\n\t\tresult[i] = str[i].substr(0, l);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1666123792,
      "stdout": "",
      "stderr": "/tmp/tmp5r61g7p4.d(12): Error: no property `substr` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5r61g7p4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result = new string[str.length];\n\tlong i = 0;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult[i] = s;\n\t\t\ti++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1666123793,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp8vrg_u3w.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x428e45]\n??:? void tmp8vrg_u3w.__unittest_L21_C1() [0x427d7b]\n??:? void tmp8vrg_u3w.__modtest() [0x4280ac]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d7ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428b9e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a69d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a72c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a629]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428b75]\n??:? runModuleUnitTests [0x42d5c5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429308]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t\tresult ~= s;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] res;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tres ~= s;\n\t\t}\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1666123793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t\tresult ~= s;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] res;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tres ~= s;\n\t\t}\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1666123793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] res;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tres ~= s;\n\t\t}\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1666123793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t\tresult ~= s;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t\tresult ~= s;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t\tresult ~= s;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t\tresult ~= s;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result = new string[str.length];\n\tfor (int i = 0; i < str.length; i++)\n\t{\n\t\tif (str[i].length == l)\n\t\t{\n\t\t\tresult[i] = str[i];\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1666123793,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp_ga5a66_.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x428e5d]\n??:? void tmp_ga5a66_.__unittest_L19_C1() [0x427d93]\n??:? void tmp_ga5a66_.__modtest() [0x4280c4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d807]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428bb6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a6b5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a744]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a641]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428b8d]\n??:? runModuleUnitTests [0x42d5dd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429320]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result = new string[str.length];\n\tfor (long i = 0; i < str.length; i++) \n\t{\n\t\tresult[i] = str[i][0..l];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1666123793,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp4bh2vd1t.d(12): Range violation\n----------------\n??:? _d_arrayboundsp [0x428efe]\n??:? immutable(char)[][] tmp4bh2vd1t.extract_string(immutable(char)[][], long) [0x427c3b]\n??:? void tmp4bh2vd1t.__unittest_L16_C1() [0x427d1c]\n??:? void tmp4bh2vd1t.__modtest() [0x4280b4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d7f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428ba6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a6a5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a734]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a631]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428b7d]\n??:? runModuleUnitTests [0x42d5cd]\n??:? void rt.dmain2._d_run_main(in",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] res;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tres ~= s;\n\t\t}\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1666123793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t\tresult ~= s;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result = new string[str.length];\n\tfor (long i = 0; i < str.length; i++) \n\t{\n\t\tif (str[i].length > l) \n\t\t{\n\t\t\tresult[i] = str[i].substr(0, l);\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult[i] = str[i];\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1666123792,
      "stdout": "",
      "stderr": "/tmp/tmp4fyyj_oz.d(14): Error: no property `substr` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4fyyj_oz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result = new string[str.length];\n\tint i = 0;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult[i] = s;\n\t\t\ti++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1666123793,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpvou78v3z.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x428e3d]\n??:? void tmpvou78v3z.__unittest_L21_C1() [0x427d77]\n??:? void tmpvou78v3z.__modtest() [0x4280a8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d7e7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428b96]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a695]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a724]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a621]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428b6d]\n??:? runModuleUnitTests [0x42d5bd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429300]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result = new string[str.length];\n\tforeach(i,s;str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult[i] = s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1666123793,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp6lz3b4ym.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x428e3d]\n??:? void tmp6lz3b4ym.__unittest_L19_C1() [0x427d77]\n??:? void tmp6lz3b4ym.__modtest() [0x4280a8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d7e7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428b96]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a695]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a724]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a621]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428b6d]\n??:? runModuleUnitTests [0x42d5bd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429300]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t\tresult ~= s;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] ret;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t\tret ~= s;\n\t}\n\treturn ret;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1666123793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str) \n\t{\n\t\tif(s.length == l) \n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1666123793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t\tresult ~= s;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t\tresult ~= s;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t\tresult ~= s;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result = new string[str.length];\n\tforeach(i, s; str)\n\t{\n\t\tif(s.length > l)\n\t\t\tresult[i] = s[0..l];\n\t\telse\n\t\t\tresult[i] = s;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1666123793,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpmtd8vrbr.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x428e9d]\n??:? void tmpmtd8vrbr.__unittest_L19_C1() [0x427dd7]\n??:? void tmpmtd8vrbr.__modtest() [0x428108]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d847]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428bf6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a6f5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a784]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a681]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428bcd]\n??:? runModuleUnitTests [0x42d61d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429360]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result = new string[str.length];\n\tforeach(i, s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult[i] = s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1666123793,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp9rv40ckz.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x428e3d]\n??:? void tmp9rv40ckz.__unittest_L19_C1() [0x427d77]\n??:? void tmp9rv40ckz.__modtest() [0x4280a8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d7e7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428b96]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a695]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a724]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a621]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428b6d]\n??:? runModuleUnitTests [0x42d5bd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429300]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result = new string[str.length];\n\tfor(long i = 0; i < str.length; i++)\n\t{\n\t\tif(str[i].length == l)\n\t\t{\n\t\t\tresult[i] = str[i];\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1666123793,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp_i2upky1.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x428e5d]\n??:? void tmp_i2upky1.__unittest_L19_C1() [0x427d93]\n??:? void tmp_i2upky1.__modtest() [0x4280c4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d807]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428bb6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a6b5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a744]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a641]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428b8d]\n??:? runModuleUnitTests [0x42d5dd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429320]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result = new string[str.length];\n\tforeach(i, s; str)\n\t{\n\t\tif(s.length == l)\n\t\t\tresult ~= s;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1666123793,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpli3altxp.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428e3d]\n??:? void tmpli3altxp.__unittest_L17_C1() [0x427d73]\n??:? void tmpli3altxp.__modtest() [0x4280a4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e15f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428b96]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b00d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b09c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42af99]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428b6d]\n??:? runModuleUnitTests [0x42df35]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42928c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] res;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t\tres ~= s;\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1666123793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t\tresult ~= s;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result = new string[str.length];\n\tfor (long i = 0; i < str.length; i++) \n\t{\n\t\tif (str[i].length == l) \n\t\t{\n\t\t\tresult[i] = str[i];\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1666123793,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmphkvywy87.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x428e5d]\n??:? void tmphkvywy87.__unittest_L19_C1() [0x427d93]\n??:? void tmphkvywy87.__modtest() [0x4280c4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d807]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428bb6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a6b5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a744]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a641]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428b8d]\n??:? runModuleUnitTests [0x42d5dd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429320]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult ~= s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result = new string[str.length];\n\tforeach(i,s;str)\n\t{\n\t\tif(s.length == l)\n\t\t{\n\t\t\tresult[i] = s;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1666123793,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp6lz3b4ym.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x428e3d]\n??:? void tmp6lz3b4ym.__unittest_L19_C1() [0x427d77]\n??:? void tmp6lz3b4ym.__modtest() [0x4280a8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d7e7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428b96]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a695]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a724]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a621]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428b6d]\n??:? runModuleUnitTests [0x42d5bd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429300]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to extract specified size of strings from a given array of string values.\n\t\n*/\nstring[] extract_string(string[] str, long l) \n{\n\tstring[] result;\n\tforeach(string s; str)\n\t{\n\t\tif(s.length == l)\n\t\t\tresult ~= s;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}