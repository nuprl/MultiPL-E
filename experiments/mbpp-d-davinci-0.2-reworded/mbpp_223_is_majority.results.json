{
  "name": "mbpp_223_is_majority",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_223_is_majority.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{ \n    long i = 0; \n    long j = n - 1; \n    long mid = (i + j) / 2; \n    while (i < j) \n    { \n        if (arr[mid] == x && arr[mid + n/2] == x) \n            return true; \n        else if (arr[mid] < x) \n            i = mid + 1; \n        else\n            j = mid - 1; \n  \n        mid = (i + j) / 2; \n    } \n    return false; \n} \nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp2iu0_2zx.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x428295]\n??:? void tmp2iu0_2zx.__unittest_L26_C1() [0x427e9a]\n??:? void tmp2iu0_2zx.__modtest() [0x428014]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c317]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1aa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43033d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4307ec]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302c9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b181]\n??:? runModuleUnitTests [0x42c0ed]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428758]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{ \n    long i = 0; \n    long j = n - 1; \n    long mid = (i + j) / 2; \n    while (i <= j) \n    { \n        if (arr[mid] == x && (mid == 0 || x != arr[mid - 1])) \n            break; \n        else if (arr[mid] >= x) \n            j = mid - 1; \n        else\n            i = mid + 1; \n        mid = (i + j) / 2; \n    } \n    if (i > j) \n        return false; \n    if ((mid + n / 2) <= (n - 1) && arr[mid + n / 2] == x) \n        return true; \n    else\n        return false; \n} \nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{ \n    long i = 0; \n    long j = n - 1; \n    long mid = (i + j) / 2; \n    while (i <= j) \n    { \n        if (arr[mid] == x && (mid == 0 || x > arr[mid - 1])) \n            break; \n        else if (x > arr[mid]) \n            i = mid + 1; \n        else\n            j = mid - 1; \n        mid = (i + j) / 2; \n    } \n    if (i > j) \n        return false; \n    if ((mid + n / 2) <= (n - 1) && arr[mid + n / 2] == x) \n        return true; \n    else\n        return false; \n} \nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(i; 0 .. n)\n\t{\n\t\tif(arr[i] == x)\n\t\t\tcount++;\n\t}\n\treturn count > n/2;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpqcl11tak.d(13): Range violation\n----------------\n??:? _d_arrayboundsp [0x4282b6]\n??:? bool tmpqcl11tak.is_majority(long[], long, long) [0x427d56]\n??:? void tmpqcl11tak.__unittest_L18_C1() [0x427f5a]\n??:? void tmpqcl11tak.__modtest() [0x427f84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c287]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b11a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43075c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430239]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f1]\n??:? runModuleUnitTests [0x42c05d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(i; 0 .. n)\n\t{\n\t\tif(arr[i] == x)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count > n/2;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpbck_k6qw.d(13): Range violation\n----------------\n??:? _d_arrayboundsp [0x4282b6]\n??:? bool tmpbck_k6qw.is_majority(long[], long, long) [0x427d56]\n??:? void tmpbck_k6qw.__unittest_L20_C1() [0x427f5a]\n??:? void tmpbck_k6qw.__modtest() [0x427f84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c287]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b11a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43075c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430239]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f1]\n??:? runModuleUnitTests [0x42c05d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(i; 0 .. n) \n\t{\n\t\tif(arr[i] == x) \n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count > n/2;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpa2nbusve.d(13): Range violation\n----------------\n??:? _d_arrayboundsp [0x4282b6]\n??:? bool tmpa2nbusve.is_majority(long[], long, long) [0x427d56]\n??:? void tmpa2nbusve.__unittest_L20_C1() [0x427f5a]\n??:? void tmpa2nbusve.__modtest() [0x427f84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c287]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b11a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43075c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430239]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f1]\n??:? runModuleUnitTests [0x42c05d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tif(arr[i] == x)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count > n / 2;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{ \n    long i = 0; \n    long j = n - 1; \n    long mid = 0; \n    while (i <= j) \n    { \n        mid = (i + j) / 2; \n        if (arr[mid] == x) \n            break; \n        else if (arr[mid] < x) \n            i = mid + 1; \n        else\n            j = mid - 1; \n    } \n    if (i > j) \n        return false; \n    if ((mid + n / 2 <= (n - 1)) && arr[mid + n / 2] == x) \n        return true; \n    else if (mid - n / 2 >= 0 && arr[mid - n / 2] == x) \n        return true; \n    else\n        return false; \n} \nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpixrsdaot.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x428305]\n??:? void tmpixrsdaot.__unittest_L32_C1() [0x427f0e]\n??:? void tmpixrsdaot.__modtest() [0x428088]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c387]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b21a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4303ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43085c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430339]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1f1]\n??:? runModuleUnitTests [0x42c15d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287c8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(i; 0 .. n)\n\t{\n\t\tif(arr[i] == x)\n\t\t\tcount++;\n\t}\n\tif(count > n/2)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpdqibj1sx.d(13): Range violation\n----------------\n??:? _d_arrayboundsp [0x4282be]\n??:? bool tmpdqibj1sx.is_majority(long[], long, long) [0x427d56]\n??:? void tmpdqibj1sx.__unittest_L21_C1() [0x427f62]\n??:? void tmpdqibj1sx.__modtest() [0x427f8c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c28f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b122]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302b5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430764]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430241]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f9]\n??:? runModuleUnitTests [0x42c065]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(i; 0..n)\n\t{\n\t\tif(arr[i] == x)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count > n/2;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpdlwh16cp.d(13): Range violation\n----------------\n??:? _d_arrayboundsp [0x4282b6]\n??:? bool tmpdlwh16cp.is_majority(long[], long, long) [0x427d56]\n??:? void tmpdlwh16cp.__unittest_L20_C1() [0x427f5a]\n??:? void tmpdlwh16cp.__modtest() [0x427f84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c287]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b11a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43075c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430239]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f1]\n??:? runModuleUnitTests [0x42c05d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(i; 0 .. n)\n\t{\n\t\tif(arr[i] == x)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count > n/2;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpbck_k6qw.d(13): Range violation\n----------------\n??:? _d_arrayboundsp [0x4282b6]\n??:? bool tmpbck_k6qw.is_majority(long[], long, long) [0x427d56]\n??:? void tmpbck_k6qw.__unittest_L20_C1() [0x427f5a]\n??:? void tmpbck_k6qw.__modtest() [0x427f84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c287]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b11a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43075c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430239]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f1]\n??:? runModuleUnitTests [0x42c05d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(i; 0 .. n) \n\t{\n\t\tif(arr[i] == x) \n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count > n / 2;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpqkpwxml3.d(13): Range violation\n----------------\n??:? _d_arrayboundsp [0x4282b6]\n??:? bool tmpqkpwxml3.is_majority(long[], long, long) [0x427d56]\n??:? void tmpqkpwxml3.__unittest_L20_C1() [0x427f5a]\n??:? void tmpqkpwxml3.__modtest() [0x427f84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c287]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b11a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43075c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430239]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f1]\n??:? runModuleUnitTests [0x42c05d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(i; 0..n)\n\t{\n\t\tif(arr[i] == x)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\tif(count > n/2)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp41g4k1_r.d(13): Range violation\n----------------\n??:? _d_arrayboundsp [0x4282be]\n??:? bool tmp41g4k1_r.is_majority(long[], long, long) [0x427d56]\n??:? void tmp41g4k1_r.__unittest_L27_C1() [0x427f62]\n??:? void tmp41g4k1_r.__modtest() [0x427f8c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c28f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b122]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302b5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430764]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430241]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f9]\n??:? runModuleUnitTests [0x42c065]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(i; 0 .. n)\n\t{\n\t\tif(arr[i] == x)\n\t\t\tcount++;\n\t}\n\tif(count > n/2)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpdqibj1sx.d(13): Range violation\n----------------\n??:? _d_arrayboundsp [0x4282be]\n??:? bool tmpdqibj1sx.is_majority(long[], long, long) [0x427d56]\n??:? void tmpdqibj1sx.__unittest_L21_C1() [0x427f62]\n??:? void tmpdqibj1sx.__modtest() [0x427f8c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c28f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b122]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302b5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430764]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430241]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f9]\n??:? runModuleUnitTests [0x42c065]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(i; 0..n)\n\t{\n\t\tif(arr[i] == x)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count > n/2;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpdlwh16cp.d(13): Range violation\n----------------\n??:? _d_arrayboundsp [0x4282b6]\n??:? bool tmpdlwh16cp.is_majority(long[], long, long) [0x427d56]\n??:? void tmpdlwh16cp.__unittest_L20_C1() [0x427f5a]\n??:? void tmpdlwh16cp.__modtest() [0x427f84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c287]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b11a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43075c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430239]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f1]\n??:? runModuleUnitTests [0x42c05d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(i; 0 .. n)\n\t{\n\t\tif(arr[i] == x)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count > n/2;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpbck_k6qw.d(13): Range violation\n----------------\n??:? _d_arrayboundsp [0x4282b6]\n??:? bool tmpbck_k6qw.is_majority(long[], long, long) [0x427d56]\n??:? void tmpbck_k6qw.__unittest_L20_C1() [0x427f5a]\n??:? void tmpbck_k6qw.__modtest() [0x427f84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c287]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b11a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43075c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430239]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f1]\n??:? runModuleUnitTests [0x42c05d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(i; 0 .. n) \n\t{\n\t\tif(arr[i] == x) \n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count > n / 2;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpqkpwxml3.d(13): Range violation\n----------------\n??:? _d_arrayboundsp [0x4282b6]\n??:? bool tmpqkpwxml3.is_majority(long[], long, long) [0x427d56]\n??:? void tmpqkpwxml3.__unittest_L20_C1() [0x427f5a]\n??:? void tmpqkpwxml3.__modtest() [0x427f84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c287]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b11a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43075c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430239]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f1]\n??:? runModuleUnitTests [0x42c05d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(i; arr)\n\t{\n\t\tif(i == x)\n\t\t\tcount++;\n\t}\n\treturn count > n/2;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(i; 0..n) \n\t{\n\t\tif(arr[i] == x) \n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count > (n / 2);\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpj0zd_pci.d(13): Range violation\n----------------\n??:? _d_arrayboundsp [0x4282b6]\n??:? bool tmpj0zd_pci.is_majority(long[], long, long) [0x427d56]\n??:? void tmpj0zd_pci.__unittest_L20_C1() [0x427f5a]\n??:? void tmpj0zd_pci.__modtest() [0x427f84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c287]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b11a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43075c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430239]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f1]\n??:? runModuleUnitTests [0x42c05d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(i; arr)\n\t{\n\t\tif(i == x)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\tif(count > n/2)\n\t{\n\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(long i; arr)\n\t{\n\t\tif(i == x)\n\t\t\tcount++;\n\t}\n\tif(count > n/2)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123086,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(elem; arr)\n\t{\n\t\tif(elem == x)\n\t\t\tcount++;\n\t}\n\treturn count > n/2;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123086,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{ \n    long i = 0, j = n - 1; \n    long mid = (i + j) / 2; \n    while (i <= j) \n    { \n        if (arr[mid] == x && (mid == 0 || x != arr[mid - 1])) \n            break; \n        else if (arr[mid] >= x) \n            j = mid - 1; \n        else\n            i = mid + 1; \n        mid = (i + j) / 2; \n    } \n    if (i > j) \n        return false; \n    if ((mid + n / 2) <= (n - 1) && arr[mid + n / 2] == x) \n        return true; \n    else\n        return false; \n} \nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123086,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(i; 0 .. n)\n\t{\n\t\tif(arr[i] == x)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn (count > n/2);\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123086,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpvmbhhz_5.d(13): Range violation\n----------------\n??:? _d_arrayboundsp [0x4282b6]\n??:? bool tmpvmbhhz_5.is_majority(long[], long, long) [0x427d56]\n??:? void tmpvmbhhz_5.__unittest_L20_C1() [0x427f5a]\n??:? void tmpvmbhhz_5.__modtest() [0x427f84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c287]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b11a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43075c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430239]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f1]\n??:? runModuleUnitTests [0x42c05d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(i; arr)\n\t{\n\t\tif(i == x)\n\t\t\tcount++;\n\t}\n\treturn count > n/2;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(i; arr)\n\t{\n\t\tif(i == x)\n\t\t\tcount++;\n\t}\n\tif(count > n/2)\n\t\treturn true;\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123086,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(i; arr)\n\t{\n\t\tif(i == x)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\tif(count > n/2)\n\t{\n\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{ \n    long i = 0; \n    long j = n - 1; \n    long mid = (i + j) / 2; \n    while (i <= j) \n    { \n        if (arr[mid] == x && (mid == 0 || x > arr[mid - 1])) \n        { \n            break; \n        } \n        else if (x > arr[mid]) \n        { \n            i = mid + 1; \n        } \n        else\n        { \n            j = mid - 1; \n        } \n        mid = (i + j) / 2; \n    } \n    if (i > j) \n    { \n        return false; \n    } \n    if (mid + n / 2 <= n - 1 && arr[mid + n / 2] == x) \n    { \n        return true; \n    } \n    else\n    { \n        return false; \n    } \n} \nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123086,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(i; 0..n)\n\t{\n\t\tif(arr[i] == x)\n\t\t\tcount++;\n\t}\n\treturn count > n/2;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123086,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp_fnzpfhp.d(13): Range violation\n----------------\n??:? _d_arrayboundsp [0x4282b6]\n??:? bool tmp_fnzpfhp.is_majority(long[], long, long) [0x427d56]\n??:? void tmp_fnzpfhp.__unittest_L18_C1() [0x427f5a]\n??:? void tmp_fnzpfhp.__modtest() [0x427f84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c287]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b11a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43075c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430239]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f1]\n??:? runModuleUnitTests [0x42c05d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{ \n    long i = 0; \n    long j = n - 1; \n    long mid = (i + j) / 2; \n    while (i <= j) \n    { \n        if (arr[mid] == x && (mid == 0 || x != arr[mid - 1])) \n            break; \n        else if (arr[mid] >= x) \n            j = mid - 1; \n        else\n            i = mid + 1; \n        mid = (i + j) / 2; \n    } \n    if (i > j) \n        return false; \n    if ((mid + n / 2) <= (n - 1) && arr[mid + n / 2] == x) \n        return true; \n    else\n        return false; \n} \nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(i; 0 .. n) \n\t{\n\t\tif(arr[i] == x) \n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count > n / 2;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpqkpwxml3.d(13): Range violation\n----------------\n??:? _d_arrayboundsp [0x4282b6]\n??:? bool tmpqkpwxml3.is_majority(long[], long, long) [0x427d56]\n??:? void tmpqkpwxml3.__unittest_L20_C1() [0x427f5a]\n??:? void tmpqkpwxml3.__modtest() [0x427f84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c287]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b11a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43075c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430239]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f1]\n??:? runModuleUnitTests [0x42c05d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(long i; arr)\n\t{\n\t\tif(i == x)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\tif(count > n/2)\n\t{\n\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123086,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong i = 0;\n\tlong count = 0;\n\t\n\twhile (i < n)\n\t{\n\t\tif (arr[i] == x)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t\ti++;\n\t}\n\t\n\treturn count > n/2;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123086,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpzkqffz2x.d(15): Range violation\n----------------\n??:? _d_arrayboundsp [0x4282a6]\n??:? bool tmpzkqffz2x.is_majority(long[], long, long) [0x427d4a]\n??:? void tmpzkqffz2x.__unittest_L24_C1() [0x427f4e]\n??:? void tmpzkqffz2x.__modtest() [0x427f78]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c277]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b10a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43029d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43074c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430229]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0e1]\n??:? runModuleUnitTests [0x42c04d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{ \n    long i = 0; \n    long j = n - 1; \n    long mid = (i + j) / 2; \n    while (i <= j) \n    { \n        if (arr[mid] == x && (mid == 0 || x > arr[mid - 1])) \n        { \n            break; \n        } \n        else if (x > arr[mid]) \n        { \n            i = mid + 1; \n        } \n        else\n        { \n            j = mid - 1; \n        } \n        mid = (i + j) / 2; \n    } \n    if (i > j) \n    { \n        return false; \n    } \n    if ((mid + n / 2) <= (n - 1) && arr[mid + n / 2] == x) \n    { \n        return true; \n    } \n    else\n    { \n        return false; \n    } \n} \nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123086,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(i; 0 .. n)\n\t{\n\t\tif(arr[i] == x)\n\t\t\tcount++;\n\t}\n\treturn count > n/2;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpqcl11tak.d(13): Range violation\n----------------\n??:? _d_arrayboundsp [0x4282b6]\n??:? bool tmpqcl11tak.is_majority(long[], long, long) [0x427d56]\n??:? void tmpqcl11tak.__unittest_L18_C1() [0x427f5a]\n??:? void tmpqcl11tak.__modtest() [0x427f84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c287]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b11a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43075c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430239]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f1]\n??:? runModuleUnitTests [0x42c05d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{ \n    long i = 0, j = n - 1; \n    long mid = (i + j) / 2; \n    while (i <= j) { \n        if (arr[mid] == x && (mid == 0 || arr[mid - 1] != x)) \n            break; \n        else if (arr[mid] >= x) \n            j = mid - 1; \n        else\n            i = mid + 1; \n        mid = (i + j) / 2; \n    } \n    if (i > j) \n        return false; \n    if ((mid + n / 2) <= (n - 1) && arr[mid + n / 2] == x) \n        return true; \n    else\n        return false; \n} \nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123086,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{ \n    long i = 0; \n    long j = n - 1; \n    long mid = (i + j) / 2; \n    while (i <= j) \n    { \n        if (arr[mid] == x && (mid == 0 || x > arr[mid - 1])) \n            break; \n        else if (x > arr[mid]) \n            i = mid + 1; \n        else\n            j = mid - 1; \n        mid = (i + j) / 2; \n    } \n    if (i > j) \n        return false; \n    if ((mid + n / 2) <= (n - 1) && arr[mid + n / 2] == x) \n        return true; \n    else\n        return false; \n} \nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(i; 0 .. n)\n\t{\n\t\tif(arr[i] == x)\n\t\t\tcount++;\n\t}\n\treturn count > n/2;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpqcl11tak.d(13): Range violation\n----------------\n??:? _d_arrayboundsp [0x4282b6]\n??:? bool tmpqcl11tak.is_majority(long[], long, long) [0x427d56]\n??:? void tmpqcl11tak.__unittest_L18_C1() [0x427f5a]\n??:? void tmpqcl11tak.__modtest() [0x427f84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c287]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b11a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43075c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430239]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f1]\n??:? runModuleUnitTests [0x42c05d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(i; 0 .. n)\n\t{\n\t\tif(arr[i] == x)\n\t\t\tcount++;\n\t}\n\treturn count > n/2;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpqcl11tak.d(13): Range violation\n----------------\n??:? _d_arrayboundsp [0x4282b6]\n??:? bool tmpqcl11tak.is_majority(long[], long, long) [0x427d56]\n??:? void tmpqcl11tak.__unittest_L18_C1() [0x427f5a]\n??:? void tmpqcl11tak.__modtest() [0x427f84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c287]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b11a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43075c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430239]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f1]\n??:? runModuleUnitTests [0x42c05d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(i; 0 .. n)\n\t{\n\t\tif(arr[i] == x)\n\t\t\tcount++;\n\t}\n\treturn count > n / 2;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123086,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp_rezg2ii.d(13): Range violation\n----------------\n??:? _d_arrayboundsp [0x4282b6]\n??:? bool tmp_rezg2ii.is_majority(long[], long, long) [0x427d56]\n??:? void tmp_rezg2ii.__unittest_L18_C1() [0x427f5a]\n??:? void tmp_rezg2ii.__modtest() [0x427f84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c287]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b11a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43075c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430239]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f1]\n??:? runModuleUnitTests [0x42c05d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(i; 0 .. n) \n\t{\n\t\tif(arr[i] == x) \n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count > n / 2;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpqkpwxml3.d(13): Range violation\n----------------\n??:? _d_arrayboundsp [0x4282b6]\n??:? bool tmpqkpwxml3.is_majority(long[], long, long) [0x427d56]\n??:? void tmpqkpwxml3.__unittest_L20_C1() [0x427f5a]\n??:? void tmpqkpwxml3.__modtest() [0x427f84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c287]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b11a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43075c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430239]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f1]\n??:? runModuleUnitTests [0x42c05d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{ \n    long i = 0, j = n - 1; \n    long mid = (i + j) / 2; \n    while (i <= j) \n    { \n        if (arr[mid] == x && (mid == 0 || arr[mid - 1] != x)) \n            break; \n        else if (arr[mid] >= x) \n            j = mid - 1; \n        else\n            i = mid + 1; \n        mid = (i + j) / 2; \n    } \n    if (i > j) \n        return false; \n    return (mid + n / 2 < n && arr[mid + n / 2] == x); \n} \nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123086,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(i; 0 .. n) \n\t{\n\t\tif(arr[i] == x)\n\t\t\tcount++;\n\t}\n\treturn count > n / 2;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123086,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpr8jaw4pb.d(13): Range violation\n----------------\n??:? _d_arrayboundsp [0x4282b6]\n??:? bool tmpr8jaw4pb.is_majority(long[], long, long) [0x427d56]\n??:? void tmpr8jaw4pb.__unittest_L18_C1() [0x427f5a]\n??:? void tmpr8jaw4pb.__modtest() [0x427f84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c287]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b11a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43075c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430239]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f1]\n??:? runModuleUnitTests [0x42c05d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong mid = n / 2;\n\tlong start = 0;\n\tlong end = n - 1;\n\tlong index = -1;\n\twhile (start <= end) \n\t{\n\t\tlong mid = (start + end) / 2;\n\t\tif (arr[mid] == x) \n\t\t{\n\t\t\tindex = mid;\n\t\t\tbreak;\n\t\t}\n\t\telse if (arr[mid] < x) \n\t\t{\n\t\t\tstart = mid + 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tend = mid - 1;\n\t\t}\n\t}\n\tif (index == -1) \n\t{\n\t\treturn false;\n\t}\n\tif (index + mid > n - 1) \n\t{\n\t\treturn true;\n\t}\n\treturn arr[index + mid] == x;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123086,
      "stdout": "",
      "stderr": "/tmp/tmpumtsi81v.d(16): Error: variable `mid` is shadowing variable `tmpumtsi81v.is_majority.mid`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpumtsi81v.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(i; 0 .. n) \n\t{\n\t\tif(arr[i] == x)\n\t\t\tcount++;\n\t}\n\treturn count > n / 2;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123086,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpr8jaw4pb.d(13): Range violation\n----------------\n??:? _d_arrayboundsp [0x4282b6]\n??:? bool tmpr8jaw4pb.is_majority(long[], long, long) [0x427d56]\n??:? void tmpr8jaw4pb.__unittest_L18_C1() [0x427f5a]\n??:? void tmpr8jaw4pb.__modtest() [0x427f84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c287]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b11a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43075c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430239]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f1]\n??:? runModuleUnitTests [0x42c05d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(i; 0 .. n)\n\t{\n\t\tif(arr[i] == x)\n\t\t\tcount++;\n\t}\n\treturn count > n/2;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpqcl11tak.d(13): Range violation\n----------------\n??:? _d_arrayboundsp [0x4282b6]\n??:? bool tmpqcl11tak.is_majority(long[], long, long) [0x427d56]\n??:? void tmpqcl11tak.__unittest_L18_C1() [0x427f5a]\n??:? void tmpqcl11tak.__modtest() [0x427f84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c287]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b11a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43075c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430239]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f1]\n??:? runModuleUnitTests [0x42c05d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(i; 0 .. n)\n\t{\n\t\tif(arr[i] == x)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn (count > n/2);\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123086,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpvmbhhz_5.d(13): Range violation\n----------------\n??:? _d_arrayboundsp [0x4282b6]\n??:? bool tmpvmbhhz_5.is_majority(long[], long, long) [0x427d56]\n??:? void tmpvmbhhz_5.__unittest_L20_C1() [0x427f5a]\n??:? void tmpvmbhhz_5.__modtest() [0x427f84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c287]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b11a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43075c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430239]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f1]\n??:? runModuleUnitTests [0x42c05d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(i; 0 .. n) \n\t{\n\t\tif(arr[i] == x) \n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count > n/2;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpa2nbusve.d(13): Range violation\n----------------\n??:? _d_arrayboundsp [0x4282b6]\n??:? bool tmpa2nbusve.is_majority(long[], long, long) [0x427d56]\n??:? void tmpa2nbusve.__unittest_L20_C1() [0x427f5a]\n??:? void tmpa2nbusve.__modtest() [0x427f84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c287]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b11a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43075c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430239]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f1]\n??:? runModuleUnitTests [0x42c05d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(i; 0..n) \n\t{\n\t\tif(arr[i] == x)\n\t\t\tcount++;\n\t}\n\treturn count > n / 2;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123086,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpuwiy8_sq.d(13): Range violation\n----------------\n??:? _d_arrayboundsp [0x4282b6]\n??:? bool tmpuwiy8_sq.is_majority(long[], long, long) [0x427d56]\n??:? void tmpuwiy8_sq.__unittest_L18_C1() [0x427f5a]\n??:? void tmpuwiy8_sq.__modtest() [0x427f84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c287]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b11a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43075c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430239]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f1]\n??:? runModuleUnitTests [0x42c05d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tif(arr[i] == x)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count > n/2;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123086,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(i; 0 .. n)\n\t{\n\t\tif(arr[i] == x)\n\t\t\tcount++;\n\t}\n\treturn count > n/2;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpqcl11tak.d(13): Range violation\n----------------\n??:? _d_arrayboundsp [0x4282b6]\n??:? bool tmpqcl11tak.is_majority(long[], long, long) [0x427d56]\n??:? void tmpqcl11tak.__unittest_L18_C1() [0x427f5a]\n??:? void tmpqcl11tak.__modtest() [0x427f84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c287]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b11a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43075c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430239]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f1]\n??:? runModuleUnitTests [0x42c05d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(i; 0..n)\n\t{\n\t\tif(arr[i] == x)\n\t\t\tcount++;\n\t}\n\tif(count > n/2)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123086,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpdvtp8igr.d(13): Range violation\n----------------\n??:? _d_arrayboundsp [0x4282be]\n??:? bool tmpdvtp8igr.is_majority(long[], long, long) [0x427d56]\n??:? void tmpdvtp8igr.__unittest_L21_C1() [0x427f62]\n??:? void tmpdvtp8igr.__modtest() [0x427f8c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c28f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b122]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302b5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430764]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430241]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f9]\n??:? runModuleUnitTests [0x42c065]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(i; arr)\n\t{\n\t\tif(i == x)\n\t\t\tcount++;\n\t}\n\tif(count > n/2)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123086,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong[] res = arr.filter!(a => a == x);\n\treturn res.length > n / 2;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123086,
      "stdout": "",
      "stderr": "/tmp/tmpmj6pj16q.d(10): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmj6pj16q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(i; 0..n)\n\t{\n\t\tif(arr[i] == x)\n\t\t\tcount++;\n\t}\n\treturn count > n/2;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123086,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp_fnzpfhp.d(13): Range violation\n----------------\n??:? _d_arrayboundsp [0x4282b6]\n??:? bool tmp_fnzpfhp.is_majority(long[], long, long) [0x427d56]\n??:? void tmp_fnzpfhp.__unittest_L18_C1() [0x427f5a]\n??:? void tmp_fnzpfhp.__modtest() [0x427f84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c287]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b11a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43075c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430239]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f1]\n??:? runModuleUnitTests [0x42c05d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(i; 0 .. n)\n\t{\n\t\tif(arr[i] == x)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count > n / 2;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123086,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp7xcg596u.d(13): Range violation\n----------------\n??:? _d_arrayboundsp [0x4282b6]\n??:? bool tmp7xcg596u.is_majority(long[], long, long) [0x427d56]\n??:? void tmp7xcg596u.__unittest_L20_C1() [0x427f5a]\n??:? void tmp7xcg596u.__modtest() [0x427f84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c287]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b11a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43075c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430239]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f1]\n??:? runModuleUnitTests [0x42c05d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(i; 0 .. n) \n\t{\n\t\tif (arr[i] == x) \n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count > n / 2;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123086,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpuuumckgi.d(13): Range violation\n----------------\n??:? _d_arrayboundsp [0x4282b6]\n??:? bool tmpuuumckgi.is_majority(long[], long, long) [0x427d56]\n??:? void tmpuuumckgi.__unittest_L20_C1() [0x427f5a]\n??:? void tmpuuumckgi.__modtest() [0x427f84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c287]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b11a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43075c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430239]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f1]\n??:? runModuleUnitTests [0x42c05d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(i; 0 .. n)\n\t{\n\t\tif(arr[i] == x)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count > n/2;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpbck_k6qw.d(13): Range violation\n----------------\n??:? _d_arrayboundsp [0x4282b6]\n??:? bool tmpbck_k6qw.is_majority(long[], long, long) [0x427d56]\n??:? void tmpbck_k6qw.__unittest_L20_C1() [0x427f5a]\n??:? void tmpbck_k6qw.__modtest() [0x427f84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c287]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b11a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43075c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430239]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f1]\n??:? runModuleUnitTests [0x42c05d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(i; 0 .. n)\n\t{\n\t\tif(arr[i] == x)\n\t\t\tcount++;\n\t}\n\treturn count > n / 2;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123086,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp_rezg2ii.d(13): Range violation\n----------------\n??:? _d_arrayboundsp [0x4282b6]\n??:? bool tmp_rezg2ii.is_majority(long[], long, long) [0x427d56]\n??:? void tmp_rezg2ii.__unittest_L18_C1() [0x427f5a]\n??:? void tmp_rezg2ii.__modtest() [0x427f84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c287]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b11a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43075c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430239]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f1]\n??:? runModuleUnitTests [0x42c05d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(elem; arr)\n\t{\n\t\tif(elem == x)\n\t\t\tcount++;\n\t}\n\treturn count > n/2;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123086,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{ \n    long i = 0; \n    long j = n - 1; \n    long mid = (i + j) / 2; \n    while (i <= j) \n    { \n        if (arr[mid] == x && (mid == 0 || arr[mid - 1] != x)) \n            break; \n        else if (arr[mid] >= x) \n            j = mid - 1; \n        else\n            i = mid + 1; \n        mid = (i + j) / 2; \n    } \n    if (i > j) \n        return false; \n    if ((mid + n / 2) <= (n - 1) && arr[mid + n / 2] == x) \n        return true; \n    else\n        return false; \n} \nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123086,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{ \n    long i = 0, j = n - 1; \n    while (i <= j) \n    { \n        long mid = (i + j) / 2; \n        if (arr[mid] == x) \n        { \n            long count = 0; \n            for (long k = mid; k < n; k++) \n            { \n                if (arr[k] == x) \n                    count++; \n                else\n                    break; \n            } \n            if (count > n / 2) \n                return true; \n            else\n                return false; \n        } \n        else if (arr[mid] > x) \n            j = mid - 1; \n        else\n            i = mid + 1; \n    } \n    return false; \n} \nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123087,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmphng3pjh4.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x4282bd]\n??:? void tmphng3pjh4.__unittest_L36_C1() [0x427ec6]\n??:? void tmphng3pjh4.__modtest() [0x428040]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c33f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430365]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430814]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1a9]\n??:? runModuleUnitTests [0x42c115]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428780]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(i; arr)\n\t{\n\t\tif(i == x)\n\t\t\tcount++;\n\t}\n\t\n\tif(count > n/2)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123087,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tif(arr[i] == x)\n\t\t\tcount++;\n\t}\n\tif(count > n/2)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123087,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(i; 0 .. n)\n\t{\n\t\tif(arr[i] == x)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count > n/2;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpbck_k6qw.d(13): Range violation\n----------------\n??:? _d_arrayboundsp [0x4282b6]\n??:? bool tmpbck_k6qw.is_majority(long[], long, long) [0x427d56]\n??:? void tmpbck_k6qw.__unittest_L20_C1() [0x427f5a]\n??:? void tmpbck_k6qw.__modtest() [0x427f84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c287]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b11a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43075c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430239]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f1]\n??:? runModuleUnitTests [0x42c05d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong i = 0;\n\tlong count = 0;\n\twhile (i < n) \n\t{\n\t\tif (arr[i] == x) \n\t\t{\n\t\t\tcount++;\n\t\t}\n\t\ti++;\n\t}\n\tif (count > n / 2) \n\t{\n\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123087,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp2c9juo_3.d(14): Range violation\n----------------\n??:? _d_arrayboundsp [0x4282ae]\n??:? bool tmp2c9juo_3.is_majority(long[], long, long) [0x427d4a]\n??:? void tmp2c9juo_3.__unittest_L26_C1() [0x427f56]\n??:? void tmp2c9juo_3.__modtest() [0x427f80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c27f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b112]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302a5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430754]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430231]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0e9]\n??:? runModuleUnitTests [0x42c055]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(i; 0 .. n)\n\t{\n\t\tif(arr[i] == x)\n\t\t\tcount++;\n\t}\n\treturn (count > n/2);\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123087,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp6adlq9o6.d(13): Range violation\n----------------\n??:? _d_arrayboundsp [0x4282b6]\n??:? bool tmp6adlq9o6.is_majority(long[], long, long) [0x427d56]\n??:? void tmp6adlq9o6.__unittest_L18_C1() [0x427f5a]\n??:? void tmp6adlq9o6.__modtest() [0x427f84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c287]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b11a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43075c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430239]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f1]\n??:? runModuleUnitTests [0x42c05d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(i; 0..n)\n\t{\n\t\tif(arr[i] == x)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\tif(count > n/2)\n\t{\n\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123087,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp55d7w7_o.d(13): Range violation\n----------------\n??:? _d_arrayboundsp [0x4282be]\n??:? bool tmp55d7w7_o.is_majority(long[], long, long) [0x427d56]\n??:? void tmp55d7w7_o.__unittest_L24_C1() [0x427f62]\n??:? void tmp55d7w7_o.__modtest() [0x427f8c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c28f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b122]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302b5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430764]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430241]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f9]\n??:? runModuleUnitTests [0x42c065]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(long i; arr)\n\t{\n\t\tif(i == x)\n\t\t\tcount++;\n\t}\n\tif(count > n/2)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123086,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(i; arr)\n\t{\n\t\tif(i == x)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\tif(count > n/2)\n\t{\n\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(i; arr)\n\t{\n\t\tif(i == x)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\tif(count > n/2)\n\t{\n\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(i; 0..n)\n\t{\n\t\tif(arr[i] == x)\n\t\t\tcount++;\n\t}\n\treturn count > n/2;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123086,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp_fnzpfhp.d(13): Range violation\n----------------\n??:? _d_arrayboundsp [0x4282b6]\n??:? bool tmp_fnzpfhp.is_majority(long[], long, long) [0x427d56]\n??:? void tmp_fnzpfhp.__unittest_L18_C1() [0x427f5a]\n??:? void tmp_fnzpfhp.__modtest() [0x427f84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c287]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b11a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43075c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430239]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f1]\n??:? runModuleUnitTests [0x42c05d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong i = 0;\n\tlong j = n - 1;\n\tlong mid = (i + j) / 2;\n\t\n\twhile (i <= j)\n\t{\n\t\tif (arr[mid] == x)\n\t\t{\n\t\t\tif (mid + n/2 < n && arr[mid + n/2] == x)\n\t\t\t\treturn true;\n\t\t\telse\n\t\t\t\treturn false;\n\t\t}\n\t\telse if (arr[mid] > x)\n\t\t\tj = mid - 1;\n\t\telse\n\t\t\ti = mid + 1;\n\t\t\n\t\tmid = (i + j) / 2;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123087,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpyvn525gu.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x4282ad]\n??:? void tmpyvn525gu.__unittest_L33_C1() [0x427eb6]\n??:? void tmpyvn525gu.__modtest() [0x428030]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c32f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1c2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430355]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430804]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302e1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b199]\n??:? runModuleUnitTests [0x42c105]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428770]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{ \n    long i = 0; \n    long j = n - 1; \n    long mid = (i + j) / 2; \n    while (i <= j) { \n        if (arr[mid] == x && (mid == 0 || arr[mid - 1] != x)) \n            break; \n        if (arr[mid] >= x) \n            j = mid - 1; \n        else\n            i = mid + 1; \n        mid = (i + j) / 2; \n    } \n    if (i > j) \n        return false; \n    return (mid + n / 2 < n && arr[mid + n / 2] == x); \n} \nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123087,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(i; arr)\n\t{\n\t\tif(i == x)\n\t\t\tcount++;\n\t}\n\treturn count > n/2;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{ \n    long i = 0, j = n - 1; \n    while (i <= j) { \n        long mid = (i + j) / 2; \n        if (arr[mid] == x && (mid == n / 2 || arr[mid + 1] != x)) \n            return true; \n        else if (arr[mid] >= x) \n            j = mid - 1; \n        else\n            i = mid + 1; \n    } \n    return false; \n} \nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123087,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(i; arr)\n\t{\n\t\tif(i == x)\n\t\t\tcount++;\n\t}\n\treturn count > n/2;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong[] result = arr.filter!(a => a == x);\n\tif(result.length > n / 2)\n\t\treturn true;\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123087,
      "stdout": "",
      "stderr": "/tmp/tmp66m0rbai.d(10): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp66m0rbai.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{ \n    long i = 0; \n    long j = n - 1; \n    long mid = 0; \n    while (i <= j) \n    { \n        mid = (i + j) / 2; \n        if (arr[mid] == x) \n            break; \n        if (arr[mid] > x) \n            j = mid - 1; \n        else\n            i = mid + 1; \n    } \n  \n    // If element is not present \n    if (i > j) \n        return false; \n  \n    // check if x is present more than n/2 times \n    if ((mid + n / 2 <= j) && arr[mid + n / 2] == x) \n        return true; \n    else\n        return false; \n} \nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123087,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpu1yxodvw.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x4282a5]\n??:? void tmpu1yxodvw.__unittest_L34_C1() [0x427eae]\n??:? void tmpu1yxodvw.__modtest() [0x428028]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c327]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1ba]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43034d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4307fc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302d9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b191]\n??:? runModuleUnitTests [0x42c0fd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428768]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong c = 0;\n\tforeach(long i; arr)\n\t{\n\t\tif(i == x)\n\t\t\tc++;\n\t}\n\treturn c > n/2;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123087,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(i; 0 .. n)\n\t{\n\t\tif(arr[i] == x)\n\t\t\tcount++;\n\t}\n\tif(count > n/2)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpdqibj1sx.d(13): Range violation\n----------------\n??:? _d_arrayboundsp [0x4282be]\n??:? bool tmpdqibj1sx.is_majority(long[], long, long) [0x427d56]\n??:? void tmpdqibj1sx.__unittest_L21_C1() [0x427f62]\n??:? void tmpdqibj1sx.__modtest() [0x427f8c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c28f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b122]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302b5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430764]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430241]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f9]\n??:? runModuleUnitTests [0x42c065]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(i; 0 .. n)\n\t{\n\t\tif(arr[i] == x)\n\t\t\tcount++;\n\t}\n\treturn count > n/2;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpqcl11tak.d(13): Range violation\n----------------\n??:? _d_arrayboundsp [0x4282b6]\n??:? bool tmpqcl11tak.is_majority(long[], long, long) [0x427d56]\n??:? void tmpqcl11tak.__unittest_L18_C1() [0x427f5a]\n??:? void tmpqcl11tak.__modtest() [0x427f84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c287]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b11a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43075c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430239]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f1]\n??:? runModuleUnitTests [0x42c05d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(i; arr)\n\t{\n\t\tif(i == x)\n\t\t\tcount++;\n\t}\n\treturn count > n/2;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{ \n    long i = 0; \n    long j = n - 1; \n    long mid = 0; \n    while (i <= j) \n    { \n        mid = (i + j) / 2; \n        if (arr[mid] == x) \n            break; \n        else if (arr[mid] < x) \n            i = mid + 1; \n        else\n            j = mid - 1; \n    } \n    if (i > j) \n        return false; \n    if ((mid + n / 2 <= (n - 1)) && arr[mid + n / 2] == x) \n        return true; \n    else if (mid - n / 2 >= 0 && arr[mid - n / 2] == x) \n        return true; \n    else\n        return false; \n} \nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpixrsdaot.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x428305]\n??:? void tmpixrsdaot.__unittest_L32_C1() [0x427f0e]\n??:? void tmpixrsdaot.__modtest() [0x428088]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c387]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b21a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4303ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43085c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430339]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1f1]\n??:? runModuleUnitTests [0x42c15d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287c8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong[] result = arr.filter!(a => a == x);\n\treturn result.length > n / 2;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123087,
      "stdout": "",
      "stderr": "/tmp/tmpymxvw5pv.d(10): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpymxvw5pv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(i; 0 .. n) \n\t{\n\t\tif(arr[i] == x) \n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count > n / 2;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpqkpwxml3.d(13): Range violation\n----------------\n??:? _d_arrayboundsp [0x4282b6]\n??:? bool tmpqkpwxml3.is_majority(long[], long, long) [0x427d56]\n??:? void tmpqkpwxml3.__unittest_L20_C1() [0x427f5a]\n??:? void tmpqkpwxml3.__modtest() [0x427f84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c287]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b11a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43075c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430239]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f1]\n??:? runModuleUnitTests [0x42c05d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(i; 0..n)\n\t{\n\t\tif(arr[i] == x)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count > n/2;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpdlwh16cp.d(13): Range violation\n----------------\n??:? _d_arrayboundsp [0x4282b6]\n??:? bool tmpdlwh16cp.is_majority(long[], long, long) [0x427d56]\n??:? void tmpdlwh16cp.__unittest_L20_C1() [0x427f5a]\n??:? void tmpdlwh16cp.__modtest() [0x427f84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c287]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b11a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43075c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430239]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f1]\n??:? runModuleUnitTests [0x42c05d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(i; 0..n)\n\t{\n\t\tif(arr[i] == x)\n\t\t\tcount++;\n\t}\n\treturn count > n/2;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123086,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp_fnzpfhp.d(13): Range violation\n----------------\n??:? _d_arrayboundsp [0x4282b6]\n??:? bool tmp_fnzpfhp.is_majority(long[], long, long) [0x427d56]\n??:? void tmp_fnzpfhp.__unittest_L18_C1() [0x427f5a]\n??:? void tmp_fnzpfhp.__modtest() [0x427f84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c287]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b11a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43075c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430239]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f1]\n??:? runModuleUnitTests [0x42c05d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(i; 0 .. n)\n\t{\n\t\tif(arr[i] == x)\n\t\t\tcount++;\n\t}\n\treturn count > n/2;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpqcl11tak.d(13): Range violation\n----------------\n??:? _d_arrayboundsp [0x4282b6]\n??:? bool tmpqcl11tak.is_majority(long[], long, long) [0x427d56]\n??:? void tmpqcl11tak.__unittest_L18_C1() [0x427f5a]\n??:? void tmpqcl11tak.__modtest() [0x427f84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c287]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b11a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43075c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430239]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f1]\n??:? runModuleUnitTests [0x42c05d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(i; 0 .. n)\n\t{\n\t\tif(arr[i] == x)\n\t\t\tcount++;\n\t}\n\treturn count > n / 2;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123086,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp_rezg2ii.d(13): Range violation\n----------------\n??:? _d_arrayboundsp [0x4282b6]\n??:? bool tmp_rezg2ii.is_majority(long[], long, long) [0x427d56]\n??:? void tmp_rezg2ii.__unittest_L18_C1() [0x427f5a]\n??:? void tmp_rezg2ii.__modtest() [0x427f84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c287]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b11a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43075c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430239]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f1]\n??:? runModuleUnitTests [0x42c05d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(i; arr)\n\t{\n\t\tif(i == x)\n\t\t\tcount++;\n\t}\n\tif(count > n/2)\n\t\treturn true;\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123086,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(i; arr)\n\t{\n\t\tif(i == x)\n\t\t\tcount++;\n\t}\n\tif(count > n/2)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123086,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(i; 0 .. n)\n\t{\n\t\tif(arr[i] == x)\n\t\t\tcount++;\n\t}\n\tif(count > n/2)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpdqibj1sx.d(13): Range violation\n----------------\n??:? _d_arrayboundsp [0x4282be]\n??:? bool tmpdqibj1sx.is_majority(long[], long, long) [0x427d56]\n??:? void tmpdqibj1sx.__unittest_L21_C1() [0x427f62]\n??:? void tmpdqibj1sx.__modtest() [0x427f8c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c28f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b122]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302b5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430764]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430241]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f9]\n??:? runModuleUnitTests [0x42c065]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(i; 0 .. n)\n\t{\n\t\tif(arr[i] == x)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count > n/2;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpbck_k6qw.d(13): Range violation\n----------------\n??:? _d_arrayboundsp [0x4282b6]\n??:? bool tmpbck_k6qw.is_majority(long[], long, long) [0x427d56]\n??:? void tmpbck_k6qw.__unittest_L20_C1() [0x427f5a]\n??:? void tmpbck_k6qw.__modtest() [0x427f84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c287]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b11a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43075c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430239]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f1]\n??:? runModuleUnitTests [0x42c05d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong[] result = arr.filter!(a => a == x);\n\treturn result.length > n / 2;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123087,
      "stdout": "",
      "stderr": "/tmp/tmpymxvw5pv.d(10): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpymxvw5pv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(i; arr)\n\t{\n\t\tif(i == x)\n\t\t\tcount++;\n\t}\n\tif(count > n/2)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123086,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(i; 0 .. n)\n\t{\n\t\tif(arr[i] == x)\n\t\t\tcount++;\n\t}\n\treturn count > n/2;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpqcl11tak.d(13): Range violation\n----------------\n??:? _d_arrayboundsp [0x4282b6]\n??:? bool tmpqcl11tak.is_majority(long[], long, long) [0x427d56]\n??:? void tmpqcl11tak.__unittest_L18_C1() [0x427f5a]\n??:? void tmpqcl11tak.__modtest() [0x427f84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c287]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b11a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43075c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430239]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f1]\n??:? runModuleUnitTests [0x42c05d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(i; arr)\n\t{\n\t\tif(i == x)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\tif(count > n/2)\n\t{\n\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{ \n    long i = 0; \n    long j = n - 1; \n    long mid = (i + j) / 2; \n    while (i <= j) \n    { \n        mid = (i + j) / 2; \n        if (arr[mid] == x) \n            break; \n        else if (arr[mid] < x) \n            i = mid + 1; \n        else\n            j = mid - 1; \n    } \n    if (i > j) \n        return false; \n    if ((mid + n / 2 <= n - 1) && arr[mid + n / 2] == x) \n        return true; \n    else if (mid - n / 2 >= 0 && arr[mid - n / 2] == x) \n        return true; \n    else\n        return false; \n} \nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123087,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpkgqbzndz.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x428315]\n??:? void tmpkgqbzndz.__unittest_L32_C1() [0x427f1a]\n??:? void tmpkgqbzndz.__modtest() [0x428094]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c397]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b22a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4303bd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43086c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430349]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b201]\n??:? runModuleUnitTests [0x42c16d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287d8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(i; 0 .. n)\n\t{\n\t\tif(arr[i] == x)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count > n/2;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpbck_k6qw.d(13): Range violation\n----------------\n??:? _d_arrayboundsp [0x4282b6]\n??:? bool tmpbck_k6qw.is_majority(long[], long, long) [0x427d56]\n??:? void tmpbck_k6qw.__unittest_L20_C1() [0x427f5a]\n??:? void tmpbck_k6qw.__modtest() [0x427f84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c287]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b11a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43075c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430239]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f1]\n??:? runModuleUnitTests [0x42c05d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(i; arr)\n\t{\n\t\tif(i == x)\n\t\t\tcount++;\n\t}\n\tif(count > n/2)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123086,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(i; 0 .. n)\n\t{\n\t\tif(arr[i] == x)\n\t\t\tcount++;\n\t}\n\tif(count > n / 2)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123087,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpxwiy_pkl.d(13): Range violation\n----------------\n??:? _d_arrayboundsp [0x4282be]\n??:? bool tmpxwiy_pkl.is_majority(long[], long, long) [0x427d56]\n??:? void tmpxwiy_pkl.__unittest_L21_C1() [0x427f62]\n??:? void tmpxwiy_pkl.__modtest() [0x427f8c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c28f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b122]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302b5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430764]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430241]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f9]\n??:? runModuleUnitTests [0x42c065]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(i; 0..n) \n\t{\n\t\tif(arr[i] == x) \n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count > n / 2;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123087,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpphk39gyn.d(13): Range violation\n----------------\n??:? _d_arrayboundsp [0x4282b6]\n??:? bool tmpphk39gyn.is_majority(long[], long, long) [0x427d56]\n??:? void tmpphk39gyn.__unittest_L20_C1() [0x427f5a]\n??:? void tmpphk39gyn.__modtest() [0x427f84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c287]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b11a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43075c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430239]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f1]\n??:? runModuleUnitTests [0x42c05d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(i; arr)\n\t{\n\t\tif(i == x)\n\t\t\tcount++;\n\t}\n\tif(count > n/2)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123086,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(i; 0..n)\n\t{\n\t\tif(arr[i] == x)\n\t\t\tcount++;\n\t}\n\treturn count > n/2;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123086,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp_fnzpfhp.d(13): Range violation\n----------------\n??:? _d_arrayboundsp [0x4282b6]\n??:? bool tmp_fnzpfhp.is_majority(long[], long, long) [0x427d56]\n??:? void tmp_fnzpfhp.__unittest_L18_C1() [0x427f5a]\n??:? void tmp_fnzpfhp.__modtest() [0x427f84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c287]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b11a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43075c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430239]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f1]\n??:? runModuleUnitTests [0x42c05d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(i; 0..n)\n\t{\n\t\tif(arr[i] == x)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\tif(count > n/2)\n\t{\n\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123087,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp55d7w7_o.d(13): Range violation\n----------------\n??:? _d_arrayboundsp [0x4282be]\n??:? bool tmp55d7w7_o.is_majority(long[], long, long) [0x427d56]\n??:? void tmp55d7w7_o.__unittest_L24_C1() [0x427f62]\n??:? void tmp55d7w7_o.__modtest() [0x427f8c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c28f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b122]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302b5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430764]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430241]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f9]\n??:? runModuleUnitTests [0x42c065]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{ \n    long i = 0; \n    long count = 0; \n    for (i = 0; i < n; i++) \n    { \n        if (arr[i] == x) \n            count++; \n    } \n    if (count > n / 2) \n        return true; \n    else\n        return false; \n} \nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123087,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpa0rz0oyd.d(14): Range violation\n----------------\n??:? _d_arrayboundsp [0x4282b6]\n??:? bool tmpa0rz0oyd.is_majority(long[], long, long) [0x427d4e]\n??:? void tmpa0rz0oyd.__unittest_L22_C1() [0x427f5a]\n??:? void tmpa0rz0oyd.__modtest() [0x427f84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c287]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b11a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43075c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430239]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f1]\n??:? runModuleUnitTests [0x42c05d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(long i; arr)\n\t{\n\t\tif(i == x)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count > n/2;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123087,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(i; arr)\n\t{\n\t\tif(i == x)\n\t\t\tcount++;\n\t}\n\treturn count > n/2;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(i; arr)\n\t{\n\t\tif(i == x)\n\t\t\tcount++;\n\t}\n\tif(count > n/2)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123086,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(i; arr)\n\t{\n\t\tif(i == x)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count > n/2;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123087,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(i; 0..n)\n\t{\n\t\tif(arr[i] == x)\n\t\t\tcount++;\n\t}\n\tif(count > n/2)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123086,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpdvtp8igr.d(13): Range violation\n----------------\n??:? _d_arrayboundsp [0x4282be]\n??:? bool tmpdvtp8igr.is_majority(long[], long, long) [0x427d56]\n??:? void tmpdvtp8igr.__unittest_L21_C1() [0x427f62]\n??:? void tmpdvtp8igr.__modtest() [0x427f8c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c28f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b122]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302b5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430764]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430241]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f9]\n??:? runModuleUnitTests [0x42c065]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{ \n    long i = 0; \n    long j = n - 1; \n    long mid = 0; \n  \n    while (i <= j) { \n        mid = (i + j) / 2; \n  \n        if (arr[mid] == x && (mid == n / 2 || arr[mid + 1] != x)) \n            return true; \n  \n        else if (arr[mid] >= x) \n            j = mid - 1; \n  \n        else\n            i = mid + 1; \n    } \n  \n    return false; \n} \nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123087,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(i; 0 .. n)\n\t{\n\t\tif(arr[i] == x)\n\t\t\tcount++;\n\t}\n\treturn count > n/2;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpqcl11tak.d(13): Range violation\n----------------\n??:? _d_arrayboundsp [0x4282b6]\n??:? bool tmpqcl11tak.is_majority(long[], long, long) [0x427d56]\n??:? void tmpqcl11tak.__unittest_L18_C1() [0x427f5a]\n??:? void tmpqcl11tak.__modtest() [0x427f84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c287]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b11a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43075c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430239]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f1]\n??:? runModuleUnitTests [0x42c05d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{ \n    long i = 0; \n    long j = n - 1; \n    long mid = (i + j) / 2; \n    while (i <= j) { \n        if (arr[mid] == x && (mid == 0 || arr[mid - 1] != x)) \n            return true; \n        if (arr[mid] >= x) \n            j = mid - 1; \n        else\n            i = mid + 1; \n        mid = (i + j) / 2; \n    } \n    return false; \n} \nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123087,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpntnnpaib.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x42828d]\n??:? void tmpntnnpaib.__unittest_L24_C1() [0x427f23]\n??:? void tmpntnnpaib.__modtest() [0x428010]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c30f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1a2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430335]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4307e4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302c1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b179]\n??:? runModuleUnitTests [0x42c0e5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428750]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(long i; arr)\n\t{\n\t\tif(i == x)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count > n/2;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123087,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(long i; arr)\n\t{\n\t\tif(i == x)\n\t\t\tcount++;\n\t}\n\tif(count > n/2)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123086,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(i; arr)\n\t{\n\t\tif(i == x)\n\t\t\tcount++;\n\t}\n\treturn count > n/2;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(i; arr)\n\t{\n\t\tif(i == x)\n\t\t\tcount++;\n\t}\n\treturn count > n/2;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(i; 0 .. n) \n\t{\n\t\tif (arr[i] == x) \n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count > n / 2;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123086,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpuuumckgi.d(13): Range violation\n----------------\n??:? _d_arrayboundsp [0x4282b6]\n??:? bool tmpuuumckgi.is_majority(long[], long, long) [0x427d56]\n??:? void tmpuuumckgi.__unittest_L20_C1() [0x427f5a]\n??:? void tmpuuumckgi.__modtest() [0x427f84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c287]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b11a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43075c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430239]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f1]\n??:? runModuleUnitTests [0x42c05d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(i; 0 .. n) \n\t{\n\t\tif(arr[i] == x) \n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count > n/2;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpa2nbusve.d(13): Range violation\n----------------\n??:? _d_arrayboundsp [0x4282b6]\n??:? bool tmpa2nbusve.is_majority(long[], long, long) [0x427d56]\n??:? void tmpa2nbusve.__unittest_L20_C1() [0x427f5a]\n??:? void tmpa2nbusve.__modtest() [0x427f84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c287]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b11a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43075c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430239]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f1]\n??:? runModuleUnitTests [0x42c05d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(i; 0 .. n)\n\t{\n\t\tif(arr[i] == x)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count > n/2;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpbck_k6qw.d(13): Range violation\n----------------\n??:? _d_arrayboundsp [0x4282b6]\n??:? bool tmpbck_k6qw.is_majority(long[], long, long) [0x427d56]\n??:? void tmpbck_k6qw.__unittest_L20_C1() [0x427f5a]\n??:? void tmpbck_k6qw.__modtest() [0x427f84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c287]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b11a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43075c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430239]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f1]\n??:? runModuleUnitTests [0x42c05d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(long i; arr)\n\t{\n\t\tif(i == x)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count > n/2;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123087,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(i; arr)\n\t{\n\t\tif(i == x)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count > n/2;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123087,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(i; arr)\n\t{\n\t\tif(i == x)\n\t\t\tcount++;\n\t}\n\treturn count > n/2;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(i; 0..n) \n\t{\n\t\tif(arr[i] == x) \n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count > n/2;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123087,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpeqrqrs6b.d(13): Range violation\n----------------\n??:? _d_arrayboundsp [0x4282b6]\n??:? bool tmpeqrqrs6b.is_majority(long[], long, long) [0x427d56]\n??:? void tmpeqrqrs6b.__unittest_L20_C1() [0x427f5a]\n??:? void tmpeqrqrs6b.__modtest() [0x427f84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c287]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b11a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43075c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430239]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f1]\n??:? runModuleUnitTests [0x42c05d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(i; arr)\n\t{\n\t\tif(i == x)\n\t\t\tcount++;\n\t}\n\tif(count > n/2)\n\t\treturn true;\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123086,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong[] res = arr.filter!(a => a == x);\n\treturn res.length > n / 2;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123086,
      "stdout": "",
      "stderr": "/tmp/tmpmj6pj16q.d(10): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmj6pj16q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(i; arr)\n\t{\n\t\tif(i == x)\n\t\t\tcount++;\n\t}\n\treturn count > n/2;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{ \n    long i = 0; \n    long count = 0; \n    for (i = 0; i < n; i++) \n    { \n        if (arr[i] == x) \n            count++; \n    } \n    if (count > n / 2) \n        return true; \n    else\n        return false; \n} \nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123087,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpa0rz0oyd.d(14): Range violation\n----------------\n??:? _d_arrayboundsp [0x4282b6]\n??:? bool tmpa0rz0oyd.is_majority(long[], long, long) [0x427d4e]\n??:? void tmpa0rz0oyd.__unittest_L22_C1() [0x427f5a]\n??:? void tmpa0rz0oyd.__modtest() [0x427f84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c287]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b11a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43075c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430239]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f1]\n??:? runModuleUnitTests [0x42c05d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{ \n    long i = 0; \n    long j = n - 1; \n    long mid = (i + j) / 2; \n    while (i < j) \n    { \n        if (arr[mid] == x && arr[mid + n/2] == x) \n            return true; \n        else if (arr[mid] < x) \n            i = mid + 1; \n        else\n            j = mid - 1; \n        mid = (i + j) / 2; \n    } \n    if (arr[mid] == x && arr[mid + n/2] == x) \n        return true; \n    else\n        return false; \n} \nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123087,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(i; arr)\n\t{\n\t\tif(i == x)\n\t\t\tcount++;\n\t}\n\t\n\tif(count > n/2)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123087,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(i; 0 .. n)\n\t{\n\t\tif(arr[i] == x)\n\t\t\tcount++;\n\t}\n\tif(count > n/2)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpdqibj1sx.d(13): Range violation\n----------------\n??:? _d_arrayboundsp [0x4282be]\n??:? bool tmpdqibj1sx.is_majority(long[], long, long) [0x427d56]\n??:? void tmpdqibj1sx.__unittest_L21_C1() [0x427f62]\n??:? void tmpdqibj1sx.__modtest() [0x427f8c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c28f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b122]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302b5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430764]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430241]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f9]\n??:? runModuleUnitTests [0x42c065]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(i; 0 .. n)\n\t{\n\t\tif(arr[i] == x)\n\t\t\tcount++;\n\t}\n\tif(count > n/2)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpdqibj1sx.d(13): Range violation\n----------------\n??:? _d_arrayboundsp [0x4282be]\n??:? bool tmpdqibj1sx.is_majority(long[], long, long) [0x427d56]\n??:? void tmpdqibj1sx.__unittest_L21_C1() [0x427f62]\n??:? void tmpdqibj1sx.__modtest() [0x427f8c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c28f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b122]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302b5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430764]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430241]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f9]\n??:? runModuleUnitTests [0x42c065]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(i; 0 .. n) \n\t{\n\t\tif(arr[i] == x) \n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count > n / 2;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpqkpwxml3.d(13): Range violation\n----------------\n??:? _d_arrayboundsp [0x4282b6]\n??:? bool tmpqkpwxml3.is_majority(long[], long, long) [0x427d56]\n??:? void tmpqkpwxml3.__unittest_L20_C1() [0x427f5a]\n??:? void tmpqkpwxml3.__modtest() [0x427f84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c287]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b11a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43075c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430239]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f1]\n??:? runModuleUnitTests [0x42c05d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(i; arr)\n\t{\n\t\tif(i == x)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\tif(count > n/2)\n\t{\n\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(i; arr)\n\t{\n\t\tif(i == x)\n\t\t\tcount++;\n\t}\n\treturn count > n/2;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(long i; arr)\n\t{\n\t\tif(i == x)\n\t\t\tcount++;\n\t}\n\treturn count > n/2;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123087,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(i; 0..n)\n\t{\n\t\tif(arr[i] == x)\n\t\t\tcount++;\n\t}\n\treturn count > n/2;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123086,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp_fnzpfhp.d(13): Range violation\n----------------\n??:? _d_arrayboundsp [0x4282b6]\n??:? bool tmp_fnzpfhp.is_majority(long[], long, long) [0x427d56]\n??:? void tmp_fnzpfhp.__unittest_L18_C1() [0x427f5a]\n??:? void tmp_fnzpfhp.__modtest() [0x427f84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c287]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b11a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43075c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430239]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f1]\n??:? runModuleUnitTests [0x42c05d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(i; 0 .. n)\n\t{\n\t\tif(arr[i] == x)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count > n/2;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpbck_k6qw.d(13): Range violation\n----------------\n??:? _d_arrayboundsp [0x4282b6]\n??:? bool tmpbck_k6qw.is_majority(long[], long, long) [0x427d56]\n??:? void tmpbck_k6qw.__unittest_L20_C1() [0x427f5a]\n??:? void tmpbck_k6qw.__modtest() [0x427f84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c287]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b11a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43075c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430239]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f1]\n??:? runModuleUnitTests [0x42c05d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(long i; arr)\n\t{\n\t\tif(i == x)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count > n/2;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123087,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(i; 0..n)\n\t{\n\t\tif(arr[i] == x)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count > n/2;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpdlwh16cp.d(13): Range violation\n----------------\n??:? _d_arrayboundsp [0x4282b6]\n??:? bool tmpdlwh16cp.is_majority(long[], long, long) [0x427d56]\n??:? void tmpdlwh16cp.__unittest_L20_C1() [0x427f5a]\n??:? void tmpdlwh16cp.__modtest() [0x427f84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c287]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b11a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43075c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430239]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f1]\n??:? runModuleUnitTests [0x42c05d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(i; arr)\n\t{\n\t\tif(i == x)\n\t\t\tcount++;\n\t}\n\treturn count > n/2;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(i; arr)\n\t{\n\t\tif(i == x)\n\t\t\tcount++;\n\t}\n\tif(count > n/2)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123086,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(i; 0 .. n)\n\t{\n\t\tif(arr[i] == x)\n\t\t\tcount++;\n\t}\n\tif(count > n/2)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpdqibj1sx.d(13): Range violation\n----------------\n??:? _d_arrayboundsp [0x4282be]\n??:? bool tmpdqibj1sx.is_majority(long[], long, long) [0x427d56]\n??:? void tmpdqibj1sx.__unittest_L21_C1() [0x427f62]\n??:? void tmpdqibj1sx.__modtest() [0x427f8c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c28f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b122]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302b5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430764]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430241]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f9]\n??:? runModuleUnitTests [0x42c065]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(i; 0 .. n)\n\t{\n\t\tif(arr[i] == x)\n\t\t\tcount++;\n\t}\n\tif(count > n/2)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpdqibj1sx.d(13): Range violation\n----------------\n??:? _d_arrayboundsp [0x4282be]\n??:? bool tmpdqibj1sx.is_majority(long[], long, long) [0x427d56]\n??:? void tmpdqibj1sx.__unittest_L21_C1() [0x427f62]\n??:? void tmpdqibj1sx.__modtest() [0x427f8c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c28f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b122]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302b5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430764]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430241]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f9]\n??:? runModuleUnitTests [0x42c065]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(long i; arr)\n\t{\n\t\tif(i == x)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count > n/2;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123087,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{ \n    long i = 0, j = n - 1; \n    while (i <= j) { \n        long mid = (i + j) / 2; \n        if (arr[mid] == x) \n            break; \n        else if (arr[mid] < x) \n            i = mid + 1; \n        else\n            j = mid - 1; \n    } \n  \n    // If x is present in arr[], then i is not changed, \n    // else i is changed \n    if (i <= j) { \n        // find the index of first occurrence of x \n        long first = i; \n        while (first < n && arr[first] == x) \n            first++; \n  \n        // If x is present more than n/2 times, then  \n        // first occurrence must be at-least at index  \n        // n/2 \n        if (first <= n / 2) \n            return true; \n    } \n  \n    return false; \n} \nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123087,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5v74ilwy.d(43): unittest failure\n----------------\n??:? _d_unittestp [0x4282ad]\n??:? void tmp5v74ilwy.__unittest_L38_C1() [0x427f43]\n??:? void tmp5v74ilwy.__modtest() [0x428030]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c32f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1c2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430355]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430804]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302e1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b199]\n??:? runModuleUnitTests [0x42c105]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428770]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{ \n    long i = 0; \n    long j = n - 1; \n    long mid = 0; \n    while (i <= j) \n    { \n        mid = (i + j) / 2; \n        if (arr[mid] == x) \n            break; \n        else if (arr[mid] < x) \n            i = mid + 1; \n        else\n            j = mid - 1; \n    } \n  \n    if (i > j) \n        return false; \n  \n    if ((mid + n / 2 <= (n - 1)) && arr[mid + n / 2] == x) \n        return true; \n    else if (mid - n / 2 >= 0 && arr[mid - n / 2] == x) \n        return true; \n    else\n        return false; \n} \nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123087,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmps1j3adew.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x428305]\n??:? void tmps1j3adew.__unittest_L34_C1() [0x427f0e]\n??:? void tmps1j3adew.__modtest() [0x428088]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c387]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b21a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4303ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43085c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430339]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1f1]\n??:? runModuleUnitTests [0x42c15d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287c8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(i; arr)\n\t{\n\t\tif(i == x)\n\t\t\tcount++;\n\t}\n\treturn count > n / 2;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123087,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{ \n    long i = 0; \n    while (i < n) \n    { \n        if (arr[i] == x) \n            break; \n        i++; \n    } \n  \n    // If element is not present \n    if (i == n) \n        return false; \n  \n    // check if the element is present more than n/2 times \n    if (((i + n / 2) <= (n - 1)) && arr[i + n / 2] == x) \n        return true; \n    else\n        return false; \n} \nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123087,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(i; arr)\n\t{\n\t\tif(i == x)\n\t\t\tcount++;\n\t}\n\treturn count > n/2;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(i; arr)\n\t{\n\t\tif(i == x)\n\t\t\tcount++;\n\t}\n\treturn count > n/2;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(i; 0 .. n)\n\t{\n\t\tif (arr[i] == x)\n\t\t\tcount++;\n\t}\n\treturn count > n / 2;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123087,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpkwd9con3.d(13): Range violation\n----------------\n??:? _d_arrayboundsp [0x4282b6]\n??:? bool tmpkwd9con3.is_majority(long[], long, long) [0x427d56]\n??:? void tmpkwd9con3.__unittest_L18_C1() [0x427f5a]\n??:? void tmpkwd9con3.__modtest() [0x427f84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c287]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b11a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43075c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430239]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f1]\n??:? runModuleUnitTests [0x42c05d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(i; 0 .. n)\n\t{\n\t\tif(arr[i] == x)\n\t\t\tcount++;\n\t}\n\treturn count > n/2;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpqcl11tak.d(13): Range violation\n----------------\n??:? _d_arrayboundsp [0x4282b6]\n??:? bool tmpqcl11tak.is_majority(long[], long, long) [0x427d56]\n??:? void tmpqcl11tak.__unittest_L18_C1() [0x427f5a]\n??:? void tmpqcl11tak.__modtest() [0x427f84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c287]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b11a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43075c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430239]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f1]\n??:? runModuleUnitTests [0x42c05d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong i = 0;\n\tlong j = n - 1;\n\tlong mid = (i + j) / 2;\n\t\n\twhile(i <= j)\n\t{\n\t\tif(arr[mid] == x)\n\t\t{\n\t\t\tif(mid + n / 2 < n && arr[mid + n / 2] == x)\n\t\t\t\treturn true;\n\t\t\telse\n\t\t\t\treturn false;\n\t\t}\n\t\telse if(arr[mid] > x)\n\t\t\tj = mid - 1;\n\t\telse\n\t\t\ti = mid + 1;\n\t\t\n\t\tmid = (i + j) / 2;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123087,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpnw_n_r1c.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x4282ad]\n??:? void tmpnw_n_r1c.__unittest_L33_C1() [0x427eb6]\n??:? void tmpnw_n_r1c.__modtest() [0x428030]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c32f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1c2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430355]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430804]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302e1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b199]\n??:? runModuleUnitTests [0x42c105]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428770]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(long i; arr)\n\t{\n\t\tif(i == x)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\tif(count > n/2)\n\t{\n\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123086,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(i; 0 .. n)\n\t{\n\t\tif(arr[i] == x)\n\t\t\tcount++;\n\t}\n\treturn count > n/2;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpqcl11tak.d(13): Range violation\n----------------\n??:? _d_arrayboundsp [0x4282b6]\n??:? bool tmpqcl11tak.is_majority(long[], long, long) [0x427d56]\n??:? void tmpqcl11tak.__unittest_L18_C1() [0x427f5a]\n??:? void tmpqcl11tak.__modtest() [0x427f84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c287]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b11a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43075c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430239]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f1]\n??:? runModuleUnitTests [0x42c05d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(i; arr)\n\t{\n\t\tif(i == x)\n\t\t\tcount++;\n\t}\n\tif(count > n/2)\n\t\treturn true;\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123086,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(i; arr)\n\t{\n\t\tif(i == x)\n\t\t\tcount++;\n\t}\n\tif(count > n/2)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123086,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(i; 0 .. n)\n\t{\n\t\tif(arr[i] == x)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count > n / 2;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123086,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp7xcg596u.d(13): Range violation\n----------------\n??:? _d_arrayboundsp [0x4282b6]\n??:? bool tmp7xcg596u.is_majority(long[], long, long) [0x427d56]\n??:? void tmp7xcg596u.__unittest_L20_C1() [0x427f5a]\n??:? void tmp7xcg596u.__modtest() [0x427f84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c287]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b11a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43075c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430239]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f1]\n??:? runModuleUnitTests [0x42c05d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(i; 0 .. n)\n\t{\n\t\tif(arr[i] == x)\n\t\t\tcount++;\n\t}\n\treturn count > n/2;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpqcl11tak.d(13): Range violation\n----------------\n??:? _d_arrayboundsp [0x4282b6]\n??:? bool tmpqcl11tak.is_majority(long[], long, long) [0x427d56]\n??:? void tmpqcl11tak.__unittest_L18_C1() [0x427f5a]\n??:? void tmpqcl11tak.__modtest() [0x427f84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c287]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b11a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43075c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430239]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f1]\n??:? runModuleUnitTests [0x42c05d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(i; 0 .. n) \n\t{\n\t\tif(arr[i] == x)\n\t\t\tcount++;\n\t}\n\tif(count > n/2)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123087,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpz0qqvd8e.d(13): Range violation\n----------------\n??:? _d_arrayboundsp [0x4282be]\n??:? bool tmpz0qqvd8e.is_majority(long[], long, long) [0x427d56]\n??:? void tmpz0qqvd8e.__unittest_L21_C1() [0x427f62]\n??:? void tmpz0qqvd8e.__modtest() [0x427f8c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c28f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b122]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302b5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430764]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430241]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f9]\n??:? runModuleUnitTests [0x42c065]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(i; 0..n)\n\t{\n\t\tif(arr[i] == x)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\tif(count > n/2)\n\t{\n\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123087,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp55d7w7_o.d(13): Range violation\n----------------\n??:? _d_arrayboundsp [0x4282be]\n??:? bool tmp55d7w7_o.is_majority(long[], long, long) [0x427d56]\n??:? void tmp55d7w7_o.__unittest_L24_C1() [0x427f62]\n??:? void tmp55d7w7_o.__modtest() [0x427f8c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c28f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b122]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302b5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430764]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430241]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f9]\n??:? runModuleUnitTests [0x42c065]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(i; arr)\n\t{\n\t\tif(i == x)\n\t\t\tcount++;\n\t}\n\tif(count > n/2)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123086,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(i; 0 .. n) \n\t{\n\t\tif(arr[i] == x) \n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count > n / 2;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpqkpwxml3.d(13): Range violation\n----------------\n??:? _d_arrayboundsp [0x4282b6]\n??:? bool tmpqkpwxml3.is_majority(long[], long, long) [0x427d56]\n??:? void tmpqkpwxml3.__unittest_L20_C1() [0x427f5a]\n??:? void tmpqkpwxml3.__modtest() [0x427f84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c287]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b11a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43075c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430239]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f1]\n??:? runModuleUnitTests [0x42c05d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(i; arr)\n\t{\n\t\tif(i == x)\n\t\t\tcount++;\n\t}\n\treturn count > n / 2;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123087,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(i; arr)\n\t{\n\t\tif(i == x)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\tif(count > n/2)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123087,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(i; 0..n)\n\t{\n\t\tif(arr[i] == x)\n\t\t\tcount++;\n\t}\n\tif(count > n/2)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123086,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpdvtp8igr.d(13): Range violation\n----------------\n??:? _d_arrayboundsp [0x4282be]\n??:? bool tmpdvtp8igr.is_majority(long[], long, long) [0x427d56]\n??:? void tmpdvtp8igr.__unittest_L21_C1() [0x427f62]\n??:? void tmpdvtp8igr.__modtest() [0x427f8c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c28f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b122]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302b5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430764]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430241]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f9]\n??:? runModuleUnitTests [0x42c065]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(i; 0 .. n) \n\t{\n\t\tif(arr[i] == x)\n\t\t\tcount++;\n\t}\n\treturn count > n/2;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123087,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpft0ceqt1.d(13): Range violation\n----------------\n??:? _d_arrayboundsp [0x4282b6]\n??:? bool tmpft0ceqt1.is_majority(long[], long, long) [0x427d56]\n??:? void tmpft0ceqt1.__unittest_L18_C1() [0x427f5a]\n??:? void tmpft0ceqt1.__modtest() [0x427f84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c287]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b11a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43075c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430239]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f1]\n??:? runModuleUnitTests [0x42c05d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(i; arr)\n\t{\n\t\tif(i == x)\n\t\t\tcount++;\n\t}\n\tif(count > n/2)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123086,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(i; 0 .. n) \n\t{\n\t\tif(arr[i] == x) \n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count > n/2;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpa2nbusve.d(13): Range violation\n----------------\n??:? _d_arrayboundsp [0x4282b6]\n??:? bool tmpa2nbusve.is_majority(long[], long, long) [0x427d56]\n??:? void tmpa2nbusve.__unittest_L20_C1() [0x427f5a]\n??:? void tmpa2nbusve.__modtest() [0x427f84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c287]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b11a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43075c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430239]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f1]\n??:? runModuleUnitTests [0x42c05d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(i; 0 .. n)\n\t{\n\t\tif(arr[i] == x)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count > n/2;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpbck_k6qw.d(13): Range violation\n----------------\n??:? _d_arrayboundsp [0x4282b6]\n??:? bool tmpbck_k6qw.is_majority(long[], long, long) [0x427d56]\n??:? void tmpbck_k6qw.__unittest_L20_C1() [0x427f5a]\n??:? void tmpbck_k6qw.__modtest() [0x427f84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c287]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b11a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43075c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430239]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f1]\n??:? runModuleUnitTests [0x42c05d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(i; arr) \n\t{\n\t\tif(i == x) \n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count > n / 2;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123087,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(i; 0 .. n)\n\t{\n\t\tif(arr[i] == x)\n\t\t\tcount++;\n\t}\n\treturn count > n / 2;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123086,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp_rezg2ii.d(13): Range violation\n----------------\n??:? _d_arrayboundsp [0x4282b6]\n??:? bool tmp_rezg2ii.is_majority(long[], long, long) [0x427d56]\n??:? void tmp_rezg2ii.__unittest_L18_C1() [0x427f5a]\n??:? void tmp_rezg2ii.__modtest() [0x427f84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c287]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b11a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43075c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430239]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f1]\n??:? runModuleUnitTests [0x42c05d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(i; 0 .. n) \n\t{\n\t\tif(arr[i] == x) \n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count > n / 2;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpqkpwxml3.d(13): Range violation\n----------------\n??:? _d_arrayboundsp [0x4282b6]\n??:? bool tmpqkpwxml3.is_majority(long[], long, long) [0x427d56]\n??:? void tmpqkpwxml3.__unittest_L20_C1() [0x427f5a]\n??:? void tmpqkpwxml3.__modtest() [0x427f84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c287]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b11a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43075c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430239]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f1]\n??:? runModuleUnitTests [0x42c05d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(i; arr)\n\t{\n\t\tif(i == x)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count > n/2;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123087,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{ \n    long i = 0; \n    long j = n - 1; \n    long mid = 0; \n  \n    // Find the index of the first occurrence of the element \n    while (i <= j) \n    { \n        mid = (i + j) / 2; \n        if (arr[mid] == x && (mid == 0 || arr[mid - 1] < x)) \n            break; \n        else if (arr[mid] < x) \n            i = mid + 1; \n        else\n            j = mid - 1; \n    } \n  \n    // If element is not present \n    if (i > j) \n        return false; \n  \n    // If element is present, check if it is majority element \n    if ((mid + n / 2) <= (n - 1) && arr[mid + n / 2] == x) \n        return true; \n    else\n        return false; \n} \nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123087,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(i; 0 .. n)\n\t{\n\t\tif(arr[i] == x)\n\t\t\tcount++;\n\t}\n\tif(count > n/2)\n\t\treturn true;\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123087,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpyca4bx3g.d(13): Range violation\n----------------\n??:? _d_arrayboundsp [0x4282be]\n??:? bool tmpyca4bx3g.is_majority(long[], long, long) [0x427d56]\n??:? void tmpyca4bx3g.__unittest_L20_C1() [0x427f62]\n??:? void tmpyca4bx3g.__modtest() [0x427f8c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c28f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b122]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302b5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430764]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430241]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f9]\n??:? runModuleUnitTests [0x42c065]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(i; 0 .. n) \n\t{\n\t\tif(arr[i] == x) \n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count > n / 2;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpqkpwxml3.d(13): Range violation\n----------------\n??:? _d_arrayboundsp [0x4282b6]\n??:? bool tmpqkpwxml3.is_majority(long[], long, long) [0x427d56]\n??:? void tmpqkpwxml3.__unittest_L20_C1() [0x427f5a]\n??:? void tmpqkpwxml3.__modtest() [0x427f84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c287]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b11a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43075c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430239]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f1]\n??:? runModuleUnitTests [0x42c05d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(i; 0 .. n)\n\t{\n\t\tif(arr[i] == x)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count > n / 2;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123086,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp7xcg596u.d(13): Range violation\n----------------\n??:? _d_arrayboundsp [0x4282b6]\n??:? bool tmp7xcg596u.is_majority(long[], long, long) [0x427d56]\n??:? void tmp7xcg596u.__unittest_L20_C1() [0x427f5a]\n??:? void tmp7xcg596u.__modtest() [0x427f84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c287]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b11a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43075c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430239]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f1]\n??:? runModuleUnitTests [0x42c05d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(i; arr)\n\t{\n\t\tif(i == x)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\tif(count > n/2)\n\t{\n\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(i; 0 .. n) \n\t{\n\t\tif(arr[i] == x) \n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count > n / 2;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpqkpwxml3.d(13): Range violation\n----------------\n??:? _d_arrayboundsp [0x4282b6]\n??:? bool tmpqkpwxml3.is_majority(long[], long, long) [0x427d56]\n??:? void tmpqkpwxml3.__unittest_L20_C1() [0x427f5a]\n??:? void tmpqkpwxml3.__modtest() [0x427f84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c287]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b11a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43075c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430239]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f1]\n??:? runModuleUnitTests [0x42c05d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(i; arr)\n\t{\n\t\tif(i == x)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count > n/2;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123087,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(i; arr)\n\t{\n\t\tif(i == x)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\tif(count > n/2)\n\t{\n\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{ \n    long i = 0, j = n - 1; \n    while (i <= j) { \n        long mid = (i + j) / 2; \n        if (arr[mid] == x) { \n            if ((mid == n / 2) || (arr[mid - 1] != x && mid == n / 2 - 1) || (arr[mid + 1] != x && mid == n / 2 + 1)) \n                return true; \n            else if (arr[mid - 1] == x) \n                j = mid - 2; \n            else\n                i = mid + 2; \n        } \n        else if (arr[mid] > x) \n            j = mid - 1; \n        else\n            i = mid + 1; \n    } \n    return false; \n} \nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123087,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpvv31x8tj.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x428335]\n??:? void tmpvv31x8tj.__unittest_L28_C1() [0x427fcb]\n??:? void tmpvv31x8tj.__modtest() [0x4280b8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3b7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b24a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4303dd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43088c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430369]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b221]\n??:? runModuleUnitTests [0x42c18d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287f8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{ \n    long i = 0; \n    long j = n - 1; \n    long mid = 0; \n    while (i <= j) \n    { \n        mid = (i + j) / 2; \n        if (arr[mid] == x && (mid == n / 2 || arr[mid - 1] != x)) \n            return true; \n        else if (arr[mid] >= x) \n            j = mid - 1; \n        else\n            i = mid + 1; \n    } \n    return false; \n} \nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123087,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpe8tdonpa.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x42828d]\n??:? void tmpe8tdonpa.__unittest_L25_C1() [0x427f23]\n??:? void tmpe8tdonpa.__modtest() [0x428010]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c30f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1a2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430335]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4307e4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302c1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b179]\n??:? runModuleUnitTests [0x42c0e5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428750]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{ \n    long i = 0; \n    long count = 0; \n    for (i = 0; i < n; i++) \n    { \n        if (arr[i] == x) \n            count++; \n    } \n    if (count > n / 2) \n        return true; \n  \n    return false; \n} \nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123087,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp8pxrphas.d(14): Range violation\n----------------\n??:? _d_arrayboundsp [0x4282b6]\n??:? bool tmp8pxrphas.is_majority(long[], long, long) [0x427d4e]\n??:? void tmp8pxrphas.__unittest_L22_C1() [0x427f5a]\n??:? void tmp8pxrphas.__modtest() [0x427f84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c287]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b11a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43075c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430239]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f1]\n??:? runModuleUnitTests [0x42c05d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(i; arr)\n\t{\n\t\tif(i == x)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\tif(count > n/2)\n\t{\n\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(i; 0 .. n)\n\t{\n\t\tif(arr[i] == x)\n\t\t\tcount++;\n\t}\n\treturn (count > n/2);\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123087,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp6adlq9o6.d(13): Range violation\n----------------\n??:? _d_arrayboundsp [0x4282b6]\n??:? bool tmp6adlq9o6.is_majority(long[], long, long) [0x427d56]\n??:? void tmp6adlq9o6.__unittest_L18_C1() [0x427f5a]\n??:? void tmp6adlq9o6.__modtest() [0x427f84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c287]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b11a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43075c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430239]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f1]\n??:? runModuleUnitTests [0x42c05d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(i; arr)\n\t{\n\t\tif(i == x)\n\t\t\tcount++;\n\t}\n\treturn count > n/2;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(i; arr)\n\t{\n\t\tif(i == x)\n\t\t\tcount++;\n\t}\n\tif(count > n/2)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123086,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(i; 0 .. n)\n\t{\n\t\tif(arr[i] == x)\n\t\t\tcount++;\n\t}\n\treturn count > n / 2;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123086,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp_rezg2ii.d(13): Range violation\n----------------\n??:? _d_arrayboundsp [0x4282b6]\n??:? bool tmp_rezg2ii.is_majority(long[], long, long) [0x427d56]\n??:? void tmp_rezg2ii.__unittest_L18_C1() [0x427f5a]\n??:? void tmp_rezg2ii.__modtest() [0x427f84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c287]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b11a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43075c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430239]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f1]\n??:? runModuleUnitTests [0x42c05d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(i; arr)\n\t{\n\t\tif(i == x)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\tif(count > n/2)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123087,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(i; 0 .. n) \n\t{\n\t\tif(arr[i] == x) \n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\tif(count > n / 2) \n\t{\n\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123087,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp_55gzx0i.d(13): Range violation\n----------------\n??:? _d_arrayboundsp [0x4282be]\n??:? bool tmp_55gzx0i.is_majority(long[], long, long) [0x427d56]\n??:? void tmp_55gzx0i.__unittest_L24_C1() [0x427f62]\n??:? void tmp_55gzx0i.__modtest() [0x427f8c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c28f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b122]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302b5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430764]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430241]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f9]\n??:? runModuleUnitTests [0x42c065]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(i; arr)\n\t{\n\t\tif(i == x)\n\t\t\tcount++;\n\t}\n\t\n\tif(count > n/2)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123087,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(i; arr)\n\t{\n\t\tif(i == x)\n\t\t\tcount++;\n\t}\n\treturn count > n/2;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(i; 0 .. n)\n\t{\n\t\tif(arr[i] == x)\n\t\t\tcount++;\n\t}\n\treturn count > n/2;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpqcl11tak.d(13): Range violation\n----------------\n??:? _d_arrayboundsp [0x4282b6]\n??:? bool tmpqcl11tak.is_majority(long[], long, long) [0x427d56]\n??:? void tmpqcl11tak.__unittest_L18_C1() [0x427f5a]\n??:? void tmpqcl11tak.__modtest() [0x427f84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c287]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b11a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43075c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430239]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f1]\n??:? runModuleUnitTests [0x42c05d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(long i; arr)\n\t{\n\t\tif(i == x)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\tif(count > n / 2)\n\t{\n\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123087,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n{\n\tlong count = 0;\n\tforeach(long i; arr)\n\t{\n\t\tif(i == x)\n\t\t\tcount++;\n\t}\n\tif(count > n/2)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nunittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123086,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}