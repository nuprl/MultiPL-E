{
  "name": "mbpp_610_remove_kth_element",
  "language": "d",
  "prompt": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_610_remove_kth_element.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length-1];\n\tlong i = 0;\n\tlong j = 0;\n\twhile (i < list1.length) \n\t{\n\t\tif (i != L) \n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj = j + 1;\n\t\t}\n\t\ti = i + 1;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517346,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpxgz8wsrm.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4285fd]\n??:? void tmpxgz8wsrm.__unittest_L23_C1() [0x428011]\n??:? void tmpxgz8wsrm.__modtest() [0x428380]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6db]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b56e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307f9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ca8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430785]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b545]\n??:? runModuleUnitTests [0x42c4b1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ac0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2;\n\tlong i, j;\n\t\n\tlist2 = new long[list1.length - 1];\n\t\n\tfor (i = 0, j = 0; i < list1.length; i++) \n\t{\n\t\tif (i != L) \n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj++;\n\t\t}\n\t}\n\t\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517346,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqppvqn_q.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x42860d]\n??:? void tmpqppvqn_q.__unittest_L25_C1() [0x42801d]\n??:? void tmpqppvqn_q.__modtest() [0x42838c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b57e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430809]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430cb8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430795]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b555]\n??:? runModuleUnitTests [0x42c4c1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ad0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length - 1];\n\tlong i = 0;\n\tlong j = 0;\n\twhile (i < list1.length) \n\t{\n\t\tif (i != L) \n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj = j + 1;\n\t\t}\n\t\ti = i + 1;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517346,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpn7ulu120.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4285fd]\n??:? void tmpn7ulu120.__unittest_L23_C1() [0x428011]\n??:? void tmpn7ulu120.__modtest() [0x428380]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6db]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b56e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307f9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ca8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430785]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b545]\n??:? runModuleUnitTests [0x42c4b1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ac0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length - 1];\n\tlong i = 0;\n\tlong j = 0;\n\twhile (i < list1.length) \n\t{\n\t\tif (i != L) \n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj = j + 1;\n\t\t}\n\t\ti = i + 1;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517346,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpn7ulu120.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4285fd]\n??:? void tmpn7ulu120.__unittest_L23_C1() [0x428011]\n??:? void tmpn7ulu120.__modtest() [0x428380]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6db]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b56e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307f9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ca8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430785]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b545]\n??:? runModuleUnitTests [0x42c4b1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ac0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length-1];\n\tlong i = 0;\n\tlong j = 0;\n\twhile (i < list1.length)\n\t{\n\t\tif (i != L)\n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj = j + 1;\n\t\t}\n\t\ti = i + 1;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517346,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpcuehhgss.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4285fd]\n??:? void tmpcuehhgss.__unittest_L23_C1() [0x428011]\n??:? void tmpcuehhgss.__modtest() [0x428380]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6db]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b56e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307f9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ca8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430785]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b545]\n??:? runModuleUnitTests [0x42c4b1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ac0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length - 1];\n\tlong i = 0;\n\tlong j = 0;\n\twhile (i < list1.length)\n\t{\n\t\tif (i != L)\n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj++;\n\t\t}\n\t\ti++;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517346,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpv00kjiyp.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4285ed]\n??:? void tmpv00kjiyp.__unittest_L23_C1() [0x427ffd]\n??:? void tmpv00kjiyp.__modtest() [0x42836c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6cb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b55e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307e9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430775]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b535]\n??:? runModuleUnitTests [0x42c4a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ab0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length - 1];\n\tlong i = 0;\n\tlong j = 0;\n\twhile (i < list1.length)\n\t{\n\t\tif (i != L)\n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj = j + 1;\n\t\t}\n\t\ti = i + 1;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517346,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqb7h_urh.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4285fd]\n??:? void tmpqb7h_urh.__unittest_L23_C1() [0x428011]\n??:? void tmpqb7h_urh.__modtest() [0x428380]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6db]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b56e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307f9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ca8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430785]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b545]\n??:? runModuleUnitTests [0x42c4b1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ac0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length-1];\n\tlong i = 0;\n\tlong j = 0;\n\twhile (i < list1.length)\n\t{\n\t\tif (i != L)\n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj = j + 1;\n\t\t}\n\t\ti = i + 1;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517346,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpcuehhgss.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4285fd]\n??:? void tmpcuehhgss.__unittest_L23_C1() [0x428011]\n??:? void tmpcuehhgss.__modtest() [0x428380]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6db]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b56e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307f9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ca8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430785]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b545]\n??:? runModuleUnitTests [0x42c4b1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ac0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length-1];\n\tlong i;\n\tfor(i=0;i<list1.length;i++)\n\t{\n\t\tif(i<L)\n\t\t{\n\t\t\tlist2[i] = list1[i];\n\t\t}\n\t\telse if(i>L)\n\t\t{\n\t\t\tlist2[i-1] = list1[i];\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517346,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpkanxut_v.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428655]\n??:? void tmpkanxut_v.__unittest_L24_C1() [0x428065]\n??:? void tmpkanxut_v.__modtest() [0x4283d4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c733]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5c6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430851]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d00]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4307dd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b59d]\n??:? runModuleUnitTests [0x42c509]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b18]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length - 1];\n\tlong i = 0;\n\tlong j = 0;\n\twhile (i < list1.length)\n\t{\n\t\tif (i != L)\n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj++;\n\t\t}\n\t\ti++;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517346,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpv00kjiyp.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4285ed]\n??:? void tmpv00kjiyp.__unittest_L23_C1() [0x427ffd]\n??:? void tmpv00kjiyp.__modtest() [0x42836c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6cb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b55e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307e9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430775]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b535]\n??:? runModuleUnitTests [0x42c4a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ab0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length-1];\n\tlong i = 0;\n\tlong j = 0;\n\twhile (i < list1.length)\n\t{\n\t\tif (i != L)\n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj++;\n\t\t}\n\t\ti++;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517346,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp2xz_q_5h.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4285ed]\n??:? void tmp2xz_q_5h.__unittest_L23_C1() [0x427ffd]\n??:? void tmp2xz_q_5h.__modtest() [0x42836c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6cb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b55e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307e9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430775]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b535]\n??:? runModuleUnitTests [0x42c4a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ab0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length - 1];\n\tlong i = 0;\n\tlong j = 0;\n\twhile (i < list1.length) \n\t{\n\t\tif (i != L) \n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj++;\n\t\t}\n\t\ti++;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517346,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmprr7vv0jz.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4285ed]\n??:? void tmprr7vv0jz.__unittest_L23_C1() [0x427ffd]\n??:? void tmprr7vv0jz.__modtest() [0x42836c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6cb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b55e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307e9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430775]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b535]\n??:? runModuleUnitTests [0x42c4a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ab0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2;\n\tlong i, j;\n\t\n\tlist2 = new long[list1.length - 1];\n\t\n\tfor (i = 0, j = 0; i < list1.length; i++)\n\t{\n\t\tif (i != L)\n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj++;\n\t\t}\n\t}\n\t\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517346,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp2qm14xwc.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x42860d]\n??:? void tmp2qm14xwc.__unittest_L25_C1() [0x42801d]\n??:? void tmp2qm14xwc.__modtest() [0x42838c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b57e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430809]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430cb8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430795]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b555]\n??:? runModuleUnitTests [0x42c4c1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ad0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length - 1];\n\tlong i = 0;\n\tlong j = 0;\n\twhile (i < list1.length)\n\t{\n\t\tif (i != L)\n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj = j + 1;\n\t\t}\n\t\ti = i + 1;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517346,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqb7h_urh.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4285fd]\n??:? void tmpqb7h_urh.__unittest_L23_C1() [0x428011]\n??:? void tmpqb7h_urh.__modtest() [0x428380]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6db]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b56e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307f9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ca8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430785]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b545]\n??:? runModuleUnitTests [0x42c4b1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ac0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length-1];\n\tlong i = 0;\n\twhile (i < L)\n\t{\n\t\tlist2[i] = list1[i];\n\t\ti += 1;\n\t}\n\twhile (i < list1.length-1)\n\t{\n\t\tlist2[i] = list1[i+1];\n\t\ti += 1;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517346,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpgc3x2_mr.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x42864d]\n??:? void tmpgc3x2_mr.__unittest_L23_C1() [0x428061]\n??:? void tmpgc3x2_mr.__modtest() [0x4283d0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c72b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5be]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430849]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430cf8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4307d5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b595]\n??:? runModuleUnitTests [0x42c501]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b10]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length - 1];\n\tlong i = 0;\n\tlong j = 0;\n\twhile (i < list1.length)\n\t{\n\t\tif (i != L)\n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj = j + 1;\n\t\t}\n\t\ti = i + 1;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517346,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqb7h_urh.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4285fd]\n??:? void tmpqb7h_urh.__unittest_L23_C1() [0x428011]\n??:? void tmpqb7h_urh.__modtest() [0x428380]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6db]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b56e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307f9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ca8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430785]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b545]\n??:? runModuleUnitTests [0x42c4b1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ac0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length - 1];\n\tlong i = 0;\n\tlong j = 0;\n\twhile (i < list1.length) {\n\t\tif (i != L) {\n\t\t\tlist2[j] = list1[i];\n\t\t\tj = j + 1;\n\t\t}\n\t\ti = i + 1;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517346,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpfomo_n83.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x4285fd]\n??:? void tmpfomo_n83.__unittest_L21_C1() [0x428011]\n??:? void tmpfomo_n83.__modtest() [0x428380]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6db]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b56e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307f9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ca8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430785]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b545]\n??:? runModuleUnitTests [0x42c4b1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ac0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length - 1];\n\tlong i = 0;\n\tlong j = 0;\n\twhile (i < list1.length)\n\t{\n\t\tif (i != L)\n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj++;\n\t\t}\n\t\ti++;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517346,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpv00kjiyp.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4285ed]\n??:? void tmpv00kjiyp.__unittest_L23_C1() [0x427ffd]\n??:? void tmpv00kjiyp.__modtest() [0x42836c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6cb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b55e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307e9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430775]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b535]\n??:? runModuleUnitTests [0x42c4a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ab0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length-1];\n\tlong i = 0;\n\tfor (long j = 0; j < list1.length; j++)\n\t{\n\t\tif (j != L)\n\t\t{\n\t\t\tlist2[i] = list1[j];\n\t\t\ti++;\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517346,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpm7c7gbt0.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x4285ed]\n??:? void tmpm7c7gbt0.__unittest_L21_C1() [0x427ffd]\n??:? void tmpm7c7gbt0.__modtest() [0x42836c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6cb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b55e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307e9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430775]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b535]\n??:? runModuleUnitTests [0x42c4a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ab0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length - 1];\n\tlong i = 0;\n\twhile (i < L)\n\t{\n\t\tlist2[i] = list1[i];\n\t\ti = i + 1;\n\t}\n\twhile (i < list2.length)\n\t{\n\t\tlist2[i] = list1[i + 1];\n\t\ti = i + 1;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517346,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp0b3w8pod.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x42864d]\n??:? void tmp0b3w8pod.__unittest_L23_C1() [0x428061]\n??:? void tmp0b3w8pod.__modtest() [0x4283d0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c72b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5be]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430849]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430cf8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4307d5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b595]\n??:? runModuleUnitTests [0x42c501]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b10]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2;\n\tlist2 = new long[list1.length - 1];\n\tlong i;\n\tlong j;\n\ti = 0;\n\tj = 0;\n\twhile (i < list1.length)\n\t{\n\t\tif (i != L)\n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj = j + 1;\n\t\t}\n\t\ti = i + 1;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666123033,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp1ul1is_4.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x428615]\n??:? void tmp1ul1is_4.__unittest_L26_C1() [0x428029]\n??:? void tmp1ul1is_4.__modtest() [0x428398]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430811]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430cc0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43079d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b55d]\n??:? runModuleUnitTests [0x42c4c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ad8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length - 1];\n\tlong i = 0;\n\tlong j = 0;\n\twhile (i < list1.length)\n\t{\n\t\tif (i != L)\n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj = j + 1;\n\t\t}\n\t\ti = i + 1;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517346,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqb7h_urh.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4285fd]\n??:? void tmpqb7h_urh.__unittest_L23_C1() [0x428011]\n??:? void tmpqb7h_urh.__modtest() [0x428380]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6db]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b56e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307f9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ca8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430785]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b545]\n??:? runModuleUnitTests [0x42c4b1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ac0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length-1];\n\tlong i = 0;\n\tlong j = 0;\n\twhile (i < list1.length)\n\t{\n\t\tif (i != L)\n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj = j + 1;\n\t\t}\n\t\ti = i + 1;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517346,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpcuehhgss.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4285fd]\n??:? void tmpcuehhgss.__unittest_L23_C1() [0x428011]\n??:? void tmpcuehhgss.__modtest() [0x428380]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6db]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b56e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307f9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ca8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430785]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b545]\n??:? runModuleUnitTests [0x42c4b1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ac0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length-1];\n\tlong i = 0;\n\tlong j = 0;\n\twhile (i < list1.length)\n\t{\n\t\tif (i != L)\n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj = j + 1;\n\t\t}\n\t\ti = i + 1;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517346,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpcuehhgss.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4285fd]\n??:? void tmpcuehhgss.__unittest_L23_C1() [0x428011]\n??:? void tmpcuehhgss.__modtest() [0x428380]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6db]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b56e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307f9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ca8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430785]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b545]\n??:? runModuleUnitTests [0x42c4b1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ac0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length - 1];\n\tlong i = 0;\n\tlong j = 0;\n\twhile(i < list1.length)\n\t{\n\t\tif(i != L)\n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj++;\n\t\t}\n\t\ti++;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666123033,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpvz9sb843.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4285ed]\n??:? void tmpvz9sb843.__unittest_L23_C1() [0x427ffd]\n??:? void tmpvz9sb843.__modtest() [0x42836c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6cb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b55e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307e9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430775]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b535]\n??:? runModuleUnitTests [0x42c4a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ab0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length - 1];\n\tlong i = 0;\n\tlong j = 0;\n\twhile (i < list1.length)\n\t{\n\t\tif (i != L)\n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj++;\n\t\t}\n\t\ti++;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517346,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpv00kjiyp.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4285ed]\n??:? void tmpv00kjiyp.__unittest_L23_C1() [0x427ffd]\n??:? void tmpv00kjiyp.__modtest() [0x42836c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6cb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b55e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307e9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430775]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b535]\n??:? runModuleUnitTests [0x42c4a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ab0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length-1];\n\tlong i = 0;\n\tlong j = 0;\n\twhile (i < list1.length)\n\t{\n\t\tif (i != L)\n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj = j + 1;\n\t\t}\n\t\ti = i + 1;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517346,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpcuehhgss.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4285fd]\n??:? void tmpcuehhgss.__unittest_L23_C1() [0x428011]\n??:? void tmpcuehhgss.__modtest() [0x428380]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6db]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b56e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307f9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ca8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430785]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b545]\n??:? runModuleUnitTests [0x42c4b1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ac0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length - 1];\n\tlong i = 0;\n\tlong j = 0;\n\twhile (i < list1.length)\n\t{\n\t\tif (i != L)\n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj = j + 1;\n\t\t}\n\t\ti = i + 1;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517346,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqb7h_urh.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4285fd]\n??:? void tmpqb7h_urh.__unittest_L23_C1() [0x428011]\n??:? void tmpqb7h_urh.__modtest() [0x428380]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6db]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b56e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307f9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ca8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430785]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b545]\n??:? runModuleUnitTests [0x42c4b1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ac0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2;\n\tlong i;\n\tlist2 = new long[list1.length - 1];\n\tfor (i = 0; i < list1.length; i++)\n\t{\n\t\tif (i < L)\n\t\t{\n\t\t\tlist2[i] = list1[i];\n\t\t}\n\t\telse if (i > L)\n\t\t{\n\t\t\tlist2[i - 1] = list1[i];\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666123033,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpzjynt1vj.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x428665]\n??:? void tmpzjynt1vj.__unittest_L25_C1() [0x428079]\n??:? void tmpzjynt1vj.__modtest() [0x4283e8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c743]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430861]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d10]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4307ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5ad]\n??:? runModuleUnitTests [0x42c519]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b28]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2;\n\tlong i, j;\n\t\n\tlist2 = new long[list1.size()-1];\n\t\n\tfor (i=0, j=0; i<list1.size(); i++)\n\t{\n\t\tif (i != L)\n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj++;\n\t\t}\n\t}\n\t\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666123033,
      "stdout": "",
      "stderr": "/tmp/tmpjpp74vaz.d(12): Error: no property `size` for type `long[]`\n/tmp/tmpjpp74vaz.d(14): Error: no property `size` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjpp74vaz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length-1];\n\tlong i = 0;\n\tlong j = 0;\n\twhile (i < list1.length)\n\t{\n\t\tif (i != L)\n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj = j + 1;\n\t\t}\n\t\ti = i + 1;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517346,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpcuehhgss.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4285fd]\n??:? void tmpcuehhgss.__unittest_L23_C1() [0x428011]\n??:? void tmpcuehhgss.__modtest() [0x428380]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6db]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b56e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307f9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ca8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430785]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b545]\n??:? runModuleUnitTests [0x42c4b1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ac0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length - 1];\n\tlong i = 0;\n\tlong j = 0;\n\twhile (i < list1.length)\n\t{\n\t\tif (i != L)\n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj++;\n\t\t}\n\t\ti++;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517346,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpv00kjiyp.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4285ed]\n??:? void tmpv00kjiyp.__unittest_L23_C1() [0x427ffd]\n??:? void tmpv00kjiyp.__modtest() [0x42836c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6cb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b55e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307e9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430775]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b535]\n??:? runModuleUnitTests [0x42c4a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ab0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length - 1];\n\tlong j = 0;\n\tfor (long i = 0; i < list1.length; i++)\n\t{\n\t\tif (i != L)\n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666123033,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp0vfgu8kh.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x4285ed]\n??:? void tmp0vfgu8kh.__unittest_L21_C1() [0x427ffd]\n??:? void tmp0vfgu8kh.__modtest() [0x42836c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6cb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b55e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307e9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430775]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b535]\n??:? runModuleUnitTests [0x42c4a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ab0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length - 1];\n\tlong i = 0;\n\tlong j = 0;\n\twhile (i < list1.length)\n\t{\n\t\tif (i != L)\n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj = j + 1;\n\t\t}\n\t\ti = i + 1;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517346,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqb7h_urh.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4285fd]\n??:? void tmpqb7h_urh.__unittest_L23_C1() [0x428011]\n??:? void tmpqb7h_urh.__modtest() [0x428380]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6db]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b56e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307f9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ca8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430785]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b545]\n??:? runModuleUnitTests [0x42c4b1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ac0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2;\n\tlong i, j;\n\t\n\tlist2 = new long[list1.length - 1];\n\t\n\tfor (i = 0, j = 0; i < list1.length; i++)\n\t{\n\t\tif (i != L)\n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj++;\n\t\t}\n\t}\n\t\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517346,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp2qm14xwc.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x42860d]\n??:? void tmp2qm14xwc.__unittest_L25_C1() [0x42801d]\n??:? void tmp2qm14xwc.__modtest() [0x42838c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b57e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430809]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430cb8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430795]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b555]\n??:? runModuleUnitTests [0x42c4c1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ad0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length-1];\n\tlong i = 0;\n\tlong j = 0;\n\twhile(i < list1.length)\n\t{\n\t\tif(i != L)\n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj = j + 1;\n\t\t}\n\t\ti = i + 1;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666123033,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpwfneq98x.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4285fd]\n??:? void tmpwfneq98x.__unittest_L23_C1() [0x428011]\n??:? void tmpwfneq98x.__modtest() [0x428380]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6db]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b56e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307f9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ca8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430785]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b545]\n??:? runModuleUnitTests [0x42c4b1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ac0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length - 1];\n\tlong i = 0;\n\tlong j = 0;\n\twhile (i < list1.length)\n\t{\n\t\tif (i != L)\n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj = j + 1;\n\t\t}\n\t\ti = i + 1;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517346,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqb7h_urh.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4285fd]\n??:? void tmpqb7h_urh.__unittest_L23_C1() [0x428011]\n??:? void tmpqb7h_urh.__modtest() [0x428380]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6db]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b56e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307f9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ca8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430785]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b545]\n??:? runModuleUnitTests [0x42c4b1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ac0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length-1];\n\tlong i = 0;\n\tlong j = 0;\n\twhile (i < list1.length)\n\t{\n\t\tif (i != L)\n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj = j + 1;\n\t\t}\n\t\ti = i + 1;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517346,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpcuehhgss.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4285fd]\n??:? void tmpcuehhgss.__unittest_L23_C1() [0x428011]\n??:? void tmpcuehhgss.__modtest() [0x428380]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6db]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b56e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307f9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ca8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430785]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b545]\n??:? runModuleUnitTests [0x42c4b1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ac0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length - 1];\n\tlong i = 0;\n\tlong j = 0;\n\twhile (i < list1.length)\n\t{\n\t\tif (i != L)\n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj++;\n\t\t}\n\t\ti++;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517346,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpv00kjiyp.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4285ed]\n??:? void tmpv00kjiyp.__unittest_L23_C1() [0x427ffd]\n??:? void tmpv00kjiyp.__modtest() [0x42836c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6cb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b55e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307e9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430775]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b535]\n??:? runModuleUnitTests [0x42c4a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ab0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length - 1];\n\tlong i = 0;\n\tlong j = 0;\n\twhile (i < list1.length)\n\t{\n\t\tif (i != L)\n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj = j + 1;\n\t\t}\n\t\ti = i + 1;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517346,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqb7h_urh.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4285fd]\n??:? void tmpqb7h_urh.__unittest_L23_C1() [0x428011]\n??:? void tmpqb7h_urh.__modtest() [0x428380]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6db]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b56e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307f9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ca8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430785]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b545]\n??:? runModuleUnitTests [0x42c4b1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ac0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length - 1];\n\tlong i = 0;\n\tlong j = 0;\n\twhile (i < list1.length)\n\t{\n\t\tif (i != L)\n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj++;\n\t\t}\n\t\ti++;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517346,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpv00kjiyp.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4285ed]\n??:? void tmpv00kjiyp.__unittest_L23_C1() [0x427ffd]\n??:? void tmpv00kjiyp.__modtest() [0x42836c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6cb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b55e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307e9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430775]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b535]\n??:? runModuleUnitTests [0x42c4a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ab0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length - 1];\n\tlong i = 0;\n\tlong j = 0;\n\twhile (i < list1.length)\n\t{\n\t\tif (i != L)\n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj++;\n\t\t}\n\t\ti++;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517346,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpv00kjiyp.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4285ed]\n??:? void tmpv00kjiyp.__unittest_L23_C1() [0x427ffd]\n??:? void tmpv00kjiyp.__modtest() [0x42836c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6cb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b55e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307e9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430775]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b535]\n??:? runModuleUnitTests [0x42c4a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ab0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length - 1];\n\tlong i = 0;\n\tlong j = 0;\n\twhile (i < list1.length)\n\t{\n\t\tif (i != L)\n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj++;\n\t\t}\n\t\ti++;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517346,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpv00kjiyp.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4285ed]\n??:? void tmpv00kjiyp.__unittest_L23_C1() [0x427ffd]\n??:? void tmpv00kjiyp.__modtest() [0x42836c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6cb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b55e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307e9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430775]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b535]\n??:? runModuleUnitTests [0x42c4a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ab0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.size()-1];\n\tlong j = 0;\n\tfor (long i = 0; i < list1.size(); i++)\n\t{\n\t\tif (i != L)\n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666123033,
      "stdout": "",
      "stderr": "/tmp/tmp7q8sy_x7.d(9): Error: no property `size` for type `long[]`\n/tmp/tmp7q8sy_x7.d(11): Error: no property `size` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7q8sy_x7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length-1];\n\tlong j = 0;\n\tfor (long i = 0; i < list1.length; i++)\n\t{\n\t\tif (i != L)\n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666123033,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpaa9xb7t7.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x4285ed]\n??:? void tmpaa9xb7t7.__unittest_L21_C1() [0x427ffd]\n??:? void tmpaa9xb7t7.__modtest() [0x42836c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6cb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b55e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307e9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430775]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b535]\n??:? runModuleUnitTests [0x42c4a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ab0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length-1];\n\tlong i = 0;\n\tlong j = 0;\n\twhile (i < list1.length) {\n\t\tif (i != L) {\n\t\t\tlist2[j] = list1[i];\n\t\t\tj = j + 1;\n\t\t}\n\t\ti = i + 1;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666123033,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmplzmkumri.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x4285fd]\n??:? void tmplzmkumri.__unittest_L21_C1() [0x428011]\n??:? void tmplzmkumri.__modtest() [0x428380]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6db]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b56e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307f9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ca8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430785]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b545]\n??:? runModuleUnitTests [0x42c4b1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ac0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length - 1];\n\tlong i = 0;\n\twhile (i < L)\n\t{\n\t\tlist2[i] = list1[i];\n\t\ti++;\n\t}\n\twhile (i < list1.length - 1)\n\t{\n\t\tlist2[i] = list1[i + 1];\n\t\ti++;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666123033,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmptqb_ygwz.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x428645]\n??:? void tmptqb_ygwz.__unittest_L23_C1() [0x428059]\n??:? void tmptqb_ygwz.__modtest() [0x4283c8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c723]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5b6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430841]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430cf0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4307cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b58d]\n??:? runModuleUnitTests [0x42c4f9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b08]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length-1];\n\tlong i = 0;\n\tlong j = 0;\n\t\n\twhile (i < list1.length)\n\t{\n\t\tif (i != L)\n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj = j + 1;\n\t\t}\n\t\ti = i + 1;\n\t}\n\t\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666123033,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmprzp2pewn.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x4285fd]\n??:? void tmprzp2pewn.__unittest_L25_C1() [0x428011]\n??:? void tmprzp2pewn.__modtest() [0x428380]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6db]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b56e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307f9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ca8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430785]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b545]\n??:? runModuleUnitTests [0x42c4b1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ac0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length-1];\n\tlong i = 0;\n\tlong j = 0;\n\twhile (i < list1.length)\n\t{\n\t\tif (i != L)\n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj = j + 1;\n\t\t}\n\t\ti = i + 1;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517346,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpcuehhgss.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4285fd]\n??:? void tmpcuehhgss.__unittest_L23_C1() [0x428011]\n??:? void tmpcuehhgss.__modtest() [0x428380]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6db]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b56e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307f9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ca8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430785]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b545]\n??:? runModuleUnitTests [0x42c4b1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ac0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length - 1];\n\tlong i = 0;\n\tlong j = 0;\n\twhile (i < list1.length)\n\t{\n\t\tif (i != L)\n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj = j + 1;\n\t\t}\n\t\ti = i + 1;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517346,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqb7h_urh.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4285fd]\n??:? void tmpqb7h_urh.__unittest_L23_C1() [0x428011]\n??:? void tmpqb7h_urh.__modtest() [0x428380]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6db]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b56e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307f9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ca8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430785]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b545]\n??:? runModuleUnitTests [0x42c4b1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ac0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2;\n\tlist2 = new long[list1.length-1];\n\tlong i;\n\tfor (i=0; i<L; i++)\n\t{\n\t\tlist2[i] = list1[i];\n\t}\n\tfor (i=L; i<list1.length-1; i++)\n\t{\n\t\tlist2[i] = list1[i+1];\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666123033,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp6bea8kpt.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x42865d]\n??:? void tmp6bea8kpt.__unittest_L22_C1() [0x428071]\n??:? void tmp6bea8kpt.__modtest() [0x4283e0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c73b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430859]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d08]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4307e5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5a5]\n??:? runModuleUnitTests [0x42c511]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b20]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length - 1];\n\tlong i = 0;\n\tlong j = 0;\n\twhile (i < list1.length)\n\t{\n\t\tif (i != L)\n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj++;\n\t\t}\n\t\ti++;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517346,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpv00kjiyp.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4285ed]\n??:? void tmpv00kjiyp.__unittest_L23_C1() [0x427ffd]\n??:? void tmpv00kjiyp.__modtest() [0x42836c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6cb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b55e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307e9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430775]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b535]\n??:? runModuleUnitTests [0x42c4a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ab0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length-1];\n\tlong i = 0;\n\tlong j = 0;\n\twhile(i < list1.length)\n\t{\n\t\tif(i != L)\n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj++;\n\t\t}\n\t\ti++;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666123033,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpa9obpuoo.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4285ed]\n??:? void tmpa9obpuoo.__unittest_L23_C1() [0x427ffd]\n??:? void tmpa9obpuoo.__modtest() [0x42836c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6cb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b55e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307e9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430775]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b535]\n??:? runModuleUnitTests [0x42c4a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ab0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length - 1];\n\tlong i = 0;\n\tlong j = 0;\n\twhile (i < list1.length)\n\t{\n\t\tif (i != L)\n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj = j + 1;\n\t\t}\n\t\ti = i + 1;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517346,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqb7h_urh.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4285fd]\n??:? void tmpqb7h_urh.__unittest_L23_C1() [0x428011]\n??:? void tmpqb7h_urh.__modtest() [0x428380]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6db]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b56e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307f9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ca8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430785]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b545]\n??:? runModuleUnitTests [0x42c4b1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ac0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length - 1];\n\tlong i = 0;\n\tlong j = 0;\n\twhile (i < list1.length)\n\t{\n\t\tif (i != L)\n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj = j + 1;\n\t\t}\n\t\ti = i + 1;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517346,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqb7h_urh.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4285fd]\n??:? void tmpqb7h_urh.__unittest_L23_C1() [0x428011]\n??:? void tmpqb7h_urh.__modtest() [0x428380]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6db]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b56e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307f9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ca8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430785]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b545]\n??:? runModuleUnitTests [0x42c4b1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ac0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length - 1];\n\tlong i = 0;\n\tlong j = 0;\n\twhile (i < list1.length) \n\t{\n\t\tif (i != L) \n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj = j + 1;\n\t\t}\n\t\ti = i + 1;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517346,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpn7ulu120.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4285fd]\n??:? void tmpn7ulu120.__unittest_L23_C1() [0x428011]\n??:? void tmpn7ulu120.__modtest() [0x428380]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6db]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b56e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307f9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ca8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430785]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b545]\n??:? runModuleUnitTests [0x42c4b1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ac0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length - 1];\n\tlong i = 0;\n\tlong j = 0;\n\twhile (i < list1.length)\n\t{\n\t\tif (i != L)\n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj = j + 1;\n\t\t}\n\t\ti = i + 1;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517346,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqb7h_urh.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4285fd]\n??:? void tmpqb7h_urh.__unittest_L23_C1() [0x428011]\n??:? void tmpqb7h_urh.__modtest() [0x428380]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6db]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b56e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307f9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ca8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430785]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b545]\n??:? runModuleUnitTests [0x42c4b1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ac0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length - 1];\n\tlong i = 0;\n\tlong j = 0;\n\twhile (i < list1.length)\n\t{\n\t\tif (i != L)\n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj++;\n\t\t}\n\t\ti++;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517346,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpv00kjiyp.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4285ed]\n??:? void tmpv00kjiyp.__unittest_L23_C1() [0x427ffd]\n??:? void tmpv00kjiyp.__modtest() [0x42836c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6cb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b55e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307e9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430775]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b535]\n??:? runModuleUnitTests [0x42c4a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ab0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length-1];\n\tlong i = 0;\n\tlong j = 0;\n\twhile (i < list1.length) \n\t{\n\t\tif (i != L) \n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj = j + 1;\n\t\t}\n\t\ti = i + 1;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517346,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpxgz8wsrm.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4285fd]\n??:? void tmpxgz8wsrm.__unittest_L23_C1() [0x428011]\n??:? void tmpxgz8wsrm.__modtest() [0x428380]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6db]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b56e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307f9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ca8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430785]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b545]\n??:? runModuleUnitTests [0x42c4b1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ac0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length - 1];\n\tlong i = 0;\n\tlong j = 0;\n\twhile(i < list1.length)\n\t{\n\t\tif(i != L)\n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj++;\n\t\t}\n\t\ti++;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666123033,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpvz9sb843.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4285ed]\n??:? void tmpvz9sb843.__unittest_L23_C1() [0x427ffd]\n??:? void tmpvz9sb843.__modtest() [0x42836c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6cb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b55e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307e9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430775]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b535]\n??:? runModuleUnitTests [0x42c4a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ab0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length-1];\n\tlong i = 0;\n\twhile (i < list1.length)\n\t{\n\t\tif (i < L)\n\t\t{\n\t\t\tlist2[i] = list1[i];\n\t\t}\n\t\telse if (i > L)\n\t\t{\n\t\t\tlist2[i-1] = list1[i];\n\t\t}\n\t\ti = i + 1;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666123033,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpnsgwhk5p.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x428655]\n??:? void tmpnsgwhk5p.__unittest_L25_C1() [0x428069]\n??:? void tmpnsgwhk5p.__modtest() [0x4283d8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c733]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5c6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430851]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d00]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4307dd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b59d]\n??:? runModuleUnitTests [0x42c509]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b18]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2;\n\tlong i;\n\t\n\tlist2 = new long[list1.length - 1];\n\t\n\tfor (i = 0; i < list1.length; i++)\n\t{\n\t\tif (i < L)\n\t\t{\n\t\t\tlist2[i] = list1[i];\n\t\t}\n\t\telse if (i > L)\n\t\t{\n\t\t\tlist2[i - 1] = list1[i];\n\t\t}\n\t}\n\t\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666123033,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp39axndc6.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x428665]\n??:? void tmp39axndc6.__unittest_L28_C1() [0x428079]\n??:? void tmp39axndc6.__modtest() [0x4283e8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c743]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430861]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d10]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4307ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5ad]\n??:? runModuleUnitTests [0x42c519]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b28]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2;\n\tlong i, j;\n\t\n\tlist2 = new long[list1.length - 1];\n\t\n\tfor (i = 0, j = 0; i < list1.length; i++)\n\t{\n\t\tif (i != L)\n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj++;\n\t\t}\n\t}\n\t\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517346,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp2qm14xwc.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x42860d]\n??:? void tmp2qm14xwc.__unittest_L25_C1() [0x42801d]\n??:? void tmp2qm14xwc.__modtest() [0x42838c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b57e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430809]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430cb8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430795]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b555]\n??:? runModuleUnitTests [0x42c4c1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ad0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2;\n\tlong i;\n\tlist2 = new long[list1.length-1];\n\tfor (i=0; i<list1.length; i++)\n\t{\n\t\tif (i<L)\n\t\t{\n\t\t\tlist2[i] = list1[i];\n\t\t}\n\t\telse if (i>L)\n\t\t{\n\t\t\tlist2[i-1] = list1[i];\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666123033,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpysjzcq5j.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x428665]\n??:? void tmpysjzcq5j.__unittest_L25_C1() [0x428079]\n??:? void tmpysjzcq5j.__modtest() [0x4283e8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c743]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430861]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d10]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4307ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5ad]\n??:? runModuleUnitTests [0x42c519]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b28]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length - 1];\n\tlong i = 0;\n\tlong j = 0;\n\twhile (i < list1.length)\n\t{\n\t\tif (i != L)\n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj++;\n\t\t}\n\t\ti++;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517346,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpv00kjiyp.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4285ed]\n??:? void tmpv00kjiyp.__unittest_L23_C1() [0x427ffd]\n??:? void tmpv00kjiyp.__modtest() [0x42836c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6cb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b55e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307e9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430775]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b535]\n??:? runModuleUnitTests [0x42c4a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ab0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length - 1];\n\tlong i = 0;\n\twhile (i < L)\n\t{\n\t\tlist2[i] = list1[i];\n\t\ti = i + 1;\n\t}\n\twhile (i < list1.length - 1)\n\t{\n\t\tlist2[i] = list1[i + 1];\n\t\ti = i + 1;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666123033,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpohyu3xka.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x428655]\n??:? void tmpohyu3xka.__unittest_L23_C1() [0x428065]\n??:? void tmpohyu3xka.__modtest() [0x4283d4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c733]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5c6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430851]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d00]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4307dd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b59d]\n??:? runModuleUnitTests [0x42c509]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b18]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length-1];\n\tlong i = 0;\n\tlong j = 0;\n\twhile(i < list1.length)\n\t{\n\t\tif(i != L)\n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj = j + 1;\n\t\t}\n\t\ti = i + 1;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666123033,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpwfneq98x.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4285fd]\n??:? void tmpwfneq98x.__unittest_L23_C1() [0x428011]\n??:? void tmpwfneq98x.__modtest() [0x428380]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6db]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b56e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307f9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ca8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430785]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b545]\n??:? runModuleUnitTests [0x42c4b1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ac0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length-1];\n\tlong i = 0;\n\tlong j = 0;\n\t\n\twhile (i < list1.length)\n\t{\n\t\tif (i != L)\n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj = j + 1;\n\t\t}\n\t\ti = i + 1;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666123033,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpumrrckle.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x4285fd]\n??:? void tmpumrrckle.__unittest_L24_C1() [0x428011]\n??:? void tmpumrrckle.__modtest() [0x428380]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6db]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b56e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307f9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ca8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430785]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b545]\n??:? runModuleUnitTests [0x42c4b1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ac0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2;\n\tlong i;\n\t\n\tlist2 = new long[L-1];\n\t\n\tfor (i = 0; i < L; i++)\n\t{\n\t\tif (i < L-1)\n\t\t{\n\t\t\tlist2[i] = list1[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlist2[i] = list1[i+1];\n\t\t}\n\t}\n\t\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666123033,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp_5iozveg.d(22): Range violation\n----------------\n??:? _d_arrayboundsp [0x428716]\n??:? long[] tmp_5iozveg.remove_kth_element(long[], long) [0x427f0c]\n??:? void tmp_5iozveg.__unittest_L28_C1() [0x427fe0]\n??:? void tmp_5iozveg.__modtest() [0x4283e4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c743]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430861]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d10]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4307ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5ad]\n??:? runModuleUnitTests [0x42c519]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) ",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length - 1];\n\tlong i = 0;\n\tlong j = 0;\n\twhile(i < list1.length)\n\t{\n\t\tif(i != L)\n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj = j + 1;\n\t\t}\n\t\ti = i + 1;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666123033,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpcq9uwq_6.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4285fd]\n??:? void tmpcq9uwq_6.__unittest_L23_C1() [0x428011]\n??:? void tmpcq9uwq_6.__modtest() [0x428380]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6db]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b56e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307f9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ca8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430785]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b545]\n??:? runModuleUnitTests [0x42c4b1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ac0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.size()-1];\n\tlong i = 0;\n\twhile (i < list1.size())\n\t{\n\t\tif (i == L)\n\t\t{\n\t\t\ti = i + 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlist2[i] = list1[i];\n\t\t\ti = i + 1;\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666123033,
      "stdout": "",
      "stderr": "/tmp/tmp5k_6qm11.d(9): Error: no property `size` for type `long[]`\n/tmp/tmp5k_6qm11.d(11): Error: no property `size` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5k_6qm11.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length - 1];\n\tlong i = 0;\n\tlong j = 0;\n\twhile (i < list1.length)\n\t{\n\t\tif (i != L)\n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj = j + 1;\n\t\t}\n\t\ti = i + 1;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517346,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqb7h_urh.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4285fd]\n??:? void tmpqb7h_urh.__unittest_L23_C1() [0x428011]\n??:? void tmpqb7h_urh.__modtest() [0x428380]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6db]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b56e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307f9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ca8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430785]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b545]\n??:? runModuleUnitTests [0x42c4b1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ac0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2;\n\tlong i;\n\t\n\tlist2 = new long[list1.length - 1];\n\t\n\tfor (i = 0; i < list1.length; i++)\n\t{\n\t\tif (i < L)\n\t\t{\n\t\t\tlist2[i] = list1[i];\n\t\t}\n\t\telse if (i > L)\n\t\t{\n\t\t\tlist2[i - 1] = list1[i];\n\t\t}\n\t}\n\t\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666123033,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp39axndc6.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x428665]\n??:? void tmp39axndc6.__unittest_L28_C1() [0x428079]\n??:? void tmp39axndc6.__modtest() [0x4283e8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c743]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430861]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d10]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4307ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5ad]\n??:? runModuleUnitTests [0x42c519]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b28]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length-1];\n\tlong i = 0;\n\tlong j = 0;\n\twhile (i < list1.length)\n\t{\n\t\tif (i != L)\n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj = j + 1;\n\t\t}\n\t\ti = i + 1;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517346,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpcuehhgss.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4285fd]\n??:? void tmpcuehhgss.__unittest_L23_C1() [0x428011]\n??:? void tmpcuehhgss.__modtest() [0x428380]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6db]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b56e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307f9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ca8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430785]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b545]\n??:? runModuleUnitTests [0x42c4b1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ac0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length - 1];\n\tlong i = 0;\n\tlong j = 0;\n\twhile (i < list1.length)\n\t{\n\t\tif (i != L)\n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj++;\n\t\t}\n\t\ti++;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517346,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpv00kjiyp.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4285ed]\n??:? void tmpv00kjiyp.__unittest_L23_C1() [0x427ffd]\n??:? void tmpv00kjiyp.__modtest() [0x42836c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6cb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b55e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307e9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430775]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b535]\n??:? runModuleUnitTests [0x42c4a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ab0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2;\n\tlong i;\n\tlist2 = new long[list1.size()-1];\n\tfor (i = 0; i < list1.size(); i++)\n\t{\n\t\tif (i < L)\n\t\t{\n\t\t\tlist2[i] = list1[i];\n\t\t}\n\t\telse if (i > L)\n\t\t{\n\t\t\tlist2[i-1] = list1[i];\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666123033,
      "stdout": "",
      "stderr": "/tmp/tmpi_hnt9vk.d(11): Error: no property `size` for type `long[]`\n/tmp/tmpi_hnt9vk.d(12): Error: no property `size` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi_hnt9vk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length - 1];\n\tlong i = 0;\n\tlong j = 0;\n\twhile (i < list1.length)\n\t{\n\t\tif (i != L)\n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj = j + 1;\n\t\t}\n\t\ti = i + 1;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517346,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqb7h_urh.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4285fd]\n??:? void tmpqb7h_urh.__unittest_L23_C1() [0x428011]\n??:? void tmpqb7h_urh.__modtest() [0x428380]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6db]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b56e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307f9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ca8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430785]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b545]\n??:? runModuleUnitTests [0x42c4b1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ac0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length - 1];\n\tlong i = 0;\n\twhile (i < L)\n\t{\n\t\tlist2[i] = list1[i];\n\t\ti = i + 1;\n\t}\n\twhile (i < list1.length - 1)\n\t{\n\t\tlist2[i] = list1[i + 1];\n\t\ti = i + 1;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666123033,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpohyu3xka.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x428655]\n??:? void tmpohyu3xka.__unittest_L23_C1() [0x428065]\n??:? void tmpohyu3xka.__modtest() [0x4283d4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c733]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5c6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430851]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d00]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4307dd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b59d]\n??:? runModuleUnitTests [0x42c509]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b18]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length - 1];\n\tlong i = 0;\n\tlong j = 0;\n\twhile (i < list1.length)\n\t{\n\t\tif (i != L)\n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj++;\n\t\t}\n\t\ti++;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517346,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpv00kjiyp.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4285ed]\n??:? void tmpv00kjiyp.__unittest_L23_C1() [0x427ffd]\n??:? void tmpv00kjiyp.__modtest() [0x42836c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6cb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b55e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307e9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430775]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b535]\n??:? runModuleUnitTests [0x42c4a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ab0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2;\n\tlong i, j;\n\t\n\tlist2 = new long[list1.length - 1];\n\t\n\tfor (i = 0, j = 0; i < list1.length; i++)\n\t{\n\t\tif (i != L)\n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj++;\n\t\t}\n\t}\n\t\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517346,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp2qm14xwc.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x42860d]\n??:? void tmp2qm14xwc.__unittest_L25_C1() [0x42801d]\n??:? void tmp2qm14xwc.__modtest() [0x42838c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b57e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430809]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430cb8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430795]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b555]\n??:? runModuleUnitTests [0x42c4c1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ad0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2;\n\tlong i;\n\tlist2 = new long[list1.length-1];\n\tfor (i=0; i<list1.length; i++)\n\t{\n\t\tif (i<L)\n\t\t{\n\t\t\tlist2[i] = list1[i];\n\t\t}\n\t\telse if (i>L)\n\t\t{\n\t\t\tlist2[i-1] = list1[i];\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666123033,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpysjzcq5j.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x428665]\n??:? void tmpysjzcq5j.__unittest_L25_C1() [0x428079]\n??:? void tmpysjzcq5j.__modtest() [0x4283e8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c743]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430861]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d10]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4307ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5ad]\n??:? runModuleUnitTests [0x42c519]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b28]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length - 1];\n\tlong j = 0;\n\tfor (long i = 0; i < list1.length; i++)\n\t{\n\t\tif (i != L)\n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666123033,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp0vfgu8kh.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x4285ed]\n??:? void tmp0vfgu8kh.__unittest_L21_C1() [0x427ffd]\n??:? void tmp0vfgu8kh.__modtest() [0x42836c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6cb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b55e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307e9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430775]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b535]\n??:? runModuleUnitTests [0x42c4a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ab0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2;\n\tlong i;\n\t\n\tlist2 = new long[list1.length - 1];\n\t\n\tfor (i = 0; i < list1.length; i++)\n\t{\n\t\tif (i < L)\n\t\t{\n\t\t\tlist2[i] = list1[i];\n\t\t}\n\t\telse if (i > L)\n\t\t{\n\t\t\tlist2[i - 1] = list1[i];\n\t\t}\n\t}\n\t\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666123033,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp39axndc6.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x428665]\n??:? void tmp39axndc6.__unittest_L28_C1() [0x428079]\n??:? void tmp39axndc6.__modtest() [0x4283e8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c743]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430861]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d10]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4307ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5ad]\n??:? runModuleUnitTests [0x42c519]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b28]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length-1];\n\tlong i = 0;\n\tlong j = 0;\n\twhile(i < list1.length)\n\t{\n\t\tif(i != L)\n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj++;\n\t\t}\n\t\ti++;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666123033,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpa9obpuoo.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4285ed]\n??:? void tmpa9obpuoo.__unittest_L23_C1() [0x427ffd]\n??:? void tmpa9obpuoo.__modtest() [0x42836c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6cb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b55e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307e9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430775]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b535]\n??:? runModuleUnitTests [0x42c4a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ab0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length-1];\n\tlong i = 0;\n\tlong j = 0;\n\twhile (i < list1.length)\n\t{\n\t\tif (i != L)\n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj++;\n\t\t}\n\t\ti++;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517346,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp2xz_q_5h.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4285ed]\n??:? void tmp2xz_q_5h.__unittest_L23_C1() [0x427ffd]\n??:? void tmp2xz_q_5h.__modtest() [0x42836c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6cb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b55e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307e9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430775]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b535]\n??:? runModuleUnitTests [0x42c4a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ab0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2;\n\tlist2 = new long[list1.length - 1];\n\tlong i;\n\tlong j;\n\tj = 0;\n\tfor (i = 0; i < list1.length; i++)\n\t{\n\t\tif (i != L)\n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj = j + 1;\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666123033,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp6050ea0h.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x42860d]\n??:? void tmp6050ea0h.__unittest_L24_C1() [0x42801d]\n??:? void tmp6050ea0h.__modtest() [0x42838c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b57e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430809]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430cb8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430795]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b555]\n??:? runModuleUnitTests [0x42c4c1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ad0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2;\n\tlong i, j;\n\t\n\tlist2 = new long[list1.length - 1];\n\t\n\tfor (i = 0, j = 0; i < list1.length; i++)\n\t{\n\t\tif (i != L)\n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj++;\n\t\t}\n\t}\n\t\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517346,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp2qm14xwc.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x42860d]\n??:? void tmp2qm14xwc.__unittest_L25_C1() [0x42801d]\n??:? void tmp2qm14xwc.__modtest() [0x42838c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b57e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430809]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430cb8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430795]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b555]\n??:? runModuleUnitTests [0x42c4c1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ad0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length - 1];\n\tlong i = 0;\n\tlong j = 0;\n\twhile (i < list1.length)\n\t{\n\t\tif (i != L)\n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj = j + 1;\n\t\t}\n\t\ti = i + 1;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517346,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqb7h_urh.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4285fd]\n??:? void tmpqb7h_urh.__unittest_L23_C1() [0x428011]\n??:? void tmpqb7h_urh.__modtest() [0x428380]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6db]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b56e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307f9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ca8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430785]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b545]\n??:? runModuleUnitTests [0x42c4b1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ac0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length - 1];\n\tlong i = 0;\n\tlong j = 0;\n\twhile (i < list1.length) \n\t{\n\t\tif (i != L) \n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj++;\n\t\t}\n\t\ti++;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517346,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmprr7vv0jz.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4285ed]\n??:? void tmprr7vv0jz.__unittest_L23_C1() [0x427ffd]\n??:? void tmprr7vv0jz.__modtest() [0x42836c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6cb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b55e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307e9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430775]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b535]\n??:? runModuleUnitTests [0x42c4a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ab0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length - 1];\n\tlong i = 0;\n\tlong j = 0;\n\twhile (i < list1.length)\n\t{\n\t\tif (i != L)\n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj++;\n\t\t}\n\t\ti++;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517346,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpv00kjiyp.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4285ed]\n??:? void tmpv00kjiyp.__unittest_L23_C1() [0x427ffd]\n??:? void tmpv00kjiyp.__modtest() [0x42836c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6cb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b55e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307e9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430775]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b535]\n??:? runModuleUnitTests [0x42c4a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ab0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length - 1];\n\tlong i = 0;\n\tlong j = 0;\n\twhile (i < list1.length) \n\t{\n\t\tif (i != L) \n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj++;\n\t\t}\n\t\ti++;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517346,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmprr7vv0jz.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4285ed]\n??:? void tmprr7vv0jz.__unittest_L23_C1() [0x427ffd]\n??:? void tmprr7vv0jz.__modtest() [0x42836c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6cb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b55e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307e9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430775]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b535]\n??:? runModuleUnitTests [0x42c4a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ab0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length - 1];\n\tlong i = 0;\n\tlong j = 0;\n\twhile(i < list1.length)\n\t{\n\t\tif(i != L)\n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj = j + 1;\n\t\t}\n\t\ti = i + 1;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666123033,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpcq9uwq_6.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4285fd]\n??:? void tmpcq9uwq_6.__unittest_L23_C1() [0x428011]\n??:? void tmpcq9uwq_6.__modtest() [0x428380]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6db]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b56e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307f9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ca8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430785]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b545]\n??:? runModuleUnitTests [0x42c4b1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ac0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length - 1];\n\tfor (long i = 0; i < list1.length; i++) \n\t{\n\t\tif (i < L) \n\t\t{\n\t\t\tlist2[i] = list1[i];\n\t\t}\n\t\telse if (i > L) \n\t\t{\n\t\t\tlist2[i - 1] = list1[i];\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666123033,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpruktub3a.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x42864d]\n??:? void tmpruktub3a.__unittest_L23_C1() [0x428061]\n??:? void tmpruktub3a.__modtest() [0x4283d0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c72b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5be]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430849]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430cf8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4307d5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b595]\n??:? runModuleUnitTests [0x42c501]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b10]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length-1];\n\tlong i = 0;\n\tfor (; i < L; i++)\n\t{\n\t\tlist2[i] = list1[i];\n\t}\n\tfor (; i < list1.length-1; i++)\n\t{\n\t\tlist2[i] = list1[i+1];\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666123033,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp2lkzcs_d.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x428645]\n??:? void tmp2lkzcs_d.__unittest_L21_C1() [0x428059]\n??:? void tmp2lkzcs_d.__modtest() [0x4283c8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c723]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5b6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430841]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430cf0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4307cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b58d]\n??:? runModuleUnitTests [0x42c4f9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b08]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length-1];\n\tlong i = 0;\n\tlong j = 0;\n\twhile (i < list1.length) \n\t{\n\t\tif (i != L) \n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj = j + 1;\n\t\t}\n\t\ti = i + 1;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517346,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpxgz8wsrm.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4285fd]\n??:? void tmpxgz8wsrm.__unittest_L23_C1() [0x428011]\n??:? void tmpxgz8wsrm.__modtest() [0x428380]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6db]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b56e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307f9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ca8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430785]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b545]\n??:? runModuleUnitTests [0x42c4b1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ac0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length - 1];\n\tlong i = 0;\n\tlong j = 0;\n\twhile (i < list1.length) \n\t{\n\t\tif (i != L) \n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj++;\n\t\t}\n\t\ti++;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517346,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmprr7vv0jz.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4285ed]\n??:? void tmprr7vv0jz.__unittest_L23_C1() [0x427ffd]\n??:? void tmprr7vv0jz.__modtest() [0x42836c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6cb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b55e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307e9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430775]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b535]\n??:? runModuleUnitTests [0x42c4a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ab0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length - 1];\n\tlong i = 0;\n\tlong j = 0;\n\twhile (i < list1.length)\n\t{\n\t\tif (i != L)\n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj++;\n\t\t}\n\t\ti++;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517346,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpv00kjiyp.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4285ed]\n??:? void tmpv00kjiyp.__unittest_L23_C1() [0x427ffd]\n??:? void tmpv00kjiyp.__modtest() [0x42836c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6cb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b55e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307e9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430775]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b535]\n??:? runModuleUnitTests [0x42c4a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ab0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length - 1];\n\tlong i = 0;\n\tlong j = 0;\n\twhile (i < list1.length)\n\t{\n\t\tif (i != L)\n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj = j + 1;\n\t\t}\n\t\ti = i + 1;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517346,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqb7h_urh.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4285fd]\n??:? void tmpqb7h_urh.__unittest_L23_C1() [0x428011]\n??:? void tmpqb7h_urh.__modtest() [0x428380]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6db]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b56e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307f9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ca8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430785]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b545]\n??:? runModuleUnitTests [0x42c4b1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ac0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2;\n\tlong i;\n\tlist2 = new long[list1.length - 1];\n\tfor (i = 0; i < L; i++) \n\t{\n\t\tlist2[i] = list1[i];\n\t}\n\tfor (i = L; i < list1.length - 1; i++) \n\t{\n\t\tlist2[i] = list1[i + 1];\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666123033,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp9tlzd3a_.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x428665]\n??:? void tmp9tlzd3a_.__unittest_L22_C1() [0x428075]\n??:? void tmp9tlzd3a_.__modtest() [0x4283e4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c743]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430861]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d10]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4307ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5ad]\n??:? runModuleUnitTests [0x42c519]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b28]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length - 1];\n\tlong i = 0;\n\tlong j = 0;\n\twhile (i < list1.length)\n\t{\n\t\tif (i != L)\n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj = j + 1;\n\t\t}\n\t\ti = i + 1;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517346,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqb7h_urh.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4285fd]\n??:? void tmpqb7h_urh.__unittest_L23_C1() [0x428011]\n??:? void tmpqb7h_urh.__modtest() [0x428380]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6db]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b56e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307f9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ca8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430785]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b545]\n??:? runModuleUnitTests [0x42c4b1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ac0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length-1];\n\tlong i = 0;\n\tlong j = 0;\n\twhile (i < list1.length) \n\t{\n\t\tif (i != L) \n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj++;\n\t\t}\n\t\ti++;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666123034,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp0zurau1i.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4285ed]\n??:? void tmp0zurau1i.__unittest_L23_C1() [0x427ffd]\n??:? void tmp0zurau1i.__modtest() [0x42836c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6cb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b55e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307e9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430775]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b535]\n??:? runModuleUnitTests [0x42c4a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ab0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length - 1];\n\tlong i = 0;\n\tlong j = 0;\n\twhile (i < list1.length) \n\t{\n\t\tif (i != L) \n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj++;\n\t\t}\n\t\ti++;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517346,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmprr7vv0jz.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4285ed]\n??:? void tmprr7vv0jz.__unittest_L23_C1() [0x427ffd]\n??:? void tmprr7vv0jz.__modtest() [0x42836c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6cb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b55e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307e9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430775]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b535]\n??:? runModuleUnitTests [0x42c4a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ab0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length - 1];\n\tlong i = 0;\n\tlong j = 0;\n\twhile(i < list1.length)\n\t{\n\t\tif(i != L)\n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj++;\n\t\t}\n\t\ti++;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666123033,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpvz9sb843.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4285ed]\n??:? void tmpvz9sb843.__unittest_L23_C1() [0x427ffd]\n??:? void tmpvz9sb843.__modtest() [0x42836c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6cb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b55e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307e9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430775]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b535]\n??:? runModuleUnitTests [0x42c4a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ab0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[L-1];\n\tlong i = 0;\n\twhile(i < L-1)\n\t{\n\t\tlist2[i] = list1[i];\n\t\ti = i + 1;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666123034,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3v2k9e0u.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x4285ed]\n??:? void tmp3v2k9e0u.__unittest_L18_C1() [0x427ffd]\n??:? void tmp3v2k9e0u.__modtest() [0x42836c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6cb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b55e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307e9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430775]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b535]\n??:? runModuleUnitTests [0x42c4a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ab0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2;\n\tlong i;\n\t\n\tlist2 = new long[list1.size() - 1];\n\t\n\tfor (i = 0; i < list1.size(); i++)\n\t{\n\t\tif (i < L)\n\t\t{\n\t\t\tlist2[i] = list1[i];\n\t\t}\n\t\telse if (i > L)\n\t\t{\n\t\t\tlist2[i - 1] = list1[i];\n\t\t}\n\t}\n\t\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666123033,
      "stdout": "",
      "stderr": "/tmp/tmp7it5s2gx.d(12): Error: no property `size` for type `long[]`\n/tmp/tmp7it5s2gx.d(14): Error: no property `size` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7it5s2gx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length - 1];\n\tlong i = 0;\n\tlong j = 0;\n\twhile (i < list1.length)\n\t{\n\t\tif (i != L)\n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj = j + 1;\n\t\t}\n\t\ti = i + 1;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517346,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqb7h_urh.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4285fd]\n??:? void tmpqb7h_urh.__unittest_L23_C1() [0x428011]\n??:? void tmpqb7h_urh.__modtest() [0x428380]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6db]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b56e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307f9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ca8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430785]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b545]\n??:? runModuleUnitTests [0x42c4b1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ac0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length - 1];\n\tlong i = 0;\n\tlong j = 0;\n\twhile (i < list1.length)\n\t{\n\t\tif (i != L)\n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj++;\n\t\t}\n\t\ti++;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517346,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpv00kjiyp.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4285ed]\n??:? void tmpv00kjiyp.__unittest_L23_C1() [0x427ffd]\n??:? void tmpv00kjiyp.__modtest() [0x42836c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6cb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b55e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307e9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430775]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b535]\n??:? runModuleUnitTests [0x42c4a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ab0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length - 1];\n\tlong i = 0;\n\tlong j = 0;\n\twhile (i < list1.length)\n\t{\n\t\tif (i != L)\n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj = j + 1;\n\t\t}\n\t\ti = i + 1;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517346,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqb7h_urh.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4285fd]\n??:? void tmpqb7h_urh.__unittest_L23_C1() [0x428011]\n??:? void tmpqb7h_urh.__modtest() [0x428380]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6db]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b56e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307f9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ca8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430785]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b545]\n??:? runModuleUnitTests [0x42c4b1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ac0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length - 1];\n\tlong i = 0;\n\tlong j = 0;\n\twhile (i < list1.length)\n\t{\n\t\tif (i != L)\n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj = j + 1;\n\t\t}\n\t\ti = i + 1;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517346,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqb7h_urh.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4285fd]\n??:? void tmpqb7h_urh.__unittest_L23_C1() [0x428011]\n??:? void tmpqb7h_urh.__modtest() [0x428380]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6db]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b56e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307f9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ca8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430785]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b545]\n??:? runModuleUnitTests [0x42c4b1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ac0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length - 1];\n\tlong i = 0;\n\twhile (i < L) {\n\t\tlist2[i] = list1[i];\n\t\ti = i + 1;\n\t}\n\twhile (i < list1.length - 1) {\n\t\tlist2[i] = list1[i + 1];\n\t\ti = i + 1;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666123034,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp65qid3p1.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x428655]\n??:? void tmp65qid3p1.__unittest_L21_C1() [0x428065]\n??:? void tmp65qid3p1.__modtest() [0x4283d4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c733]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5c6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430851]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d00]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4307dd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b59d]\n??:? runModuleUnitTests [0x42c509]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b18]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length - 1];\n\tlong i = 0;\n\tlong j = 0;\n\twhile (i < list1.length) \n\t{\n\t\tif (i != L) \n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj++;\n\t\t}\n\t\ti++;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517346,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmprr7vv0jz.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4285ed]\n??:? void tmprr7vv0jz.__unittest_L23_C1() [0x427ffd]\n??:? void tmprr7vv0jz.__modtest() [0x42836c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6cb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b55e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307e9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430775]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b535]\n??:? runModuleUnitTests [0x42c4a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ab0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length - 1];\n\tlong i = 0;\n\tlong j = 0;\n\tfor (i = 0; i < list1.length; i++)\n\t{\n\t\tif (i != L)\n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj = j + 1;\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666123034,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpfr0l5umi.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x4285f5]\n??:? void tmpfr0l5umi.__unittest_L22_C1() [0x428009]\n??:? void tmpfr0l5umi.__modtest() [0x428378]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6d3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b566]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307f1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ca0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43077d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b53d]\n??:? runModuleUnitTests [0x42c4a9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ab8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length - 1];\n\tlong i = 0;\n\tlong j = 0;\n\twhile (i < list1.length)\n\t{\n\t\tif (i != L)\n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj = j + 1;\n\t\t}\n\t\ti = i + 1;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517346,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqb7h_urh.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4285fd]\n??:? void tmpqb7h_urh.__unittest_L23_C1() [0x428011]\n??:? void tmpqb7h_urh.__modtest() [0x428380]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6db]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b56e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307f9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ca8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430785]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b545]\n??:? runModuleUnitTests [0x42c4b1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ac0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length - 1];\n\tlong i = 0;\n\tlong j = 0;\n\twhile (i < list1.length)\n\t{\n\t\tif (i != L)\n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj = j + 1;\n\t\t}\n\t\ti = i + 1;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517346,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqb7h_urh.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4285fd]\n??:? void tmpqb7h_urh.__unittest_L23_C1() [0x428011]\n??:? void tmpqb7h_urh.__modtest() [0x428380]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6db]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b56e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307f9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ca8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430785]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b545]\n??:? runModuleUnitTests [0x42c4b1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ac0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length-1];\n\tlong i = 0;\n\tlong j = 0;\n\twhile (i < list1.length)\n\t{\n\t\tif (i != L)\n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj++;\n\t\t}\n\t\ti++;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517346,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp2xz_q_5h.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4285ed]\n??:? void tmp2xz_q_5h.__unittest_L23_C1() [0x427ffd]\n??:? void tmp2xz_q_5h.__modtest() [0x42836c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6cb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b55e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307e9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430775]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b535]\n??:? runModuleUnitTests [0x42c4a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ab0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length - 1];\n\tlong i = 0;\n\tlong j = 0;\n\twhile (i < list1.length)\n\t{\n\t\tif (i != L)\n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj = j + 1;\n\t\t}\n\t\ti = i + 1;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517346,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqb7h_urh.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4285fd]\n??:? void tmpqb7h_urh.__unittest_L23_C1() [0x428011]\n??:? void tmpqb7h_urh.__modtest() [0x428380]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6db]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b56e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307f9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ca8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430785]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b545]\n??:? runModuleUnitTests [0x42c4b1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ac0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length - 1];\n\tlong i = 0;\n\tlong j = 0;\n\twhile (i < list1.length) \n\t{\n\t\tif (i != L) \n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj += 1;\n\t\t}\n\t\ti += 1;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666123034,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpsjaiwdaj.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4285f5]\n??:? void tmpsjaiwdaj.__unittest_L23_C1() [0x428005]\n??:? void tmpsjaiwdaj.__modtest() [0x428374]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6d3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b566]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307f1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ca0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43077d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b53d]\n??:? runModuleUnitTests [0x42c4a9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ab8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length - 1];\n\tlong i = 0;\n\tlong j = 0;\n\twhile (i < list1.length)\n\t{\n\t\tif (i != L)\n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj = j + 1;\n\t\t}\n\t\ti = i + 1;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517346,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqb7h_urh.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4285fd]\n??:? void tmpqb7h_urh.__unittest_L23_C1() [0x428011]\n??:? void tmpqb7h_urh.__modtest() [0x428380]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6db]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b56e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307f9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ca8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430785]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b545]\n??:? runModuleUnitTests [0x42c4b1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ac0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2;\n\tlist2 = new long[list1.length - 1];\n\tlong i;\n\tfor (i = 0; i < L; i++)\n\t{\n\t\tlist2[i] = list1[i];\n\t}\n\tfor (i = L; i < list1.length - 1; i++)\n\t{\n\t\tlist2[i] = list1[i + 1];\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666123034,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpfi032cc0.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x42865d]\n??:? void tmpfi032cc0.__unittest_L22_C1() [0x428071]\n??:? void tmpfi032cc0.__modtest() [0x4283e0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c73b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430859]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d08]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4307e5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5a5]\n??:? runModuleUnitTests [0x42c511]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b20]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2;\n\tlong i, j;\n\t\n\tlist2 = new long[list1.length - 1];\n\t\n\tfor (i = 0, j = 0; i < list1.length; i++)\n\t{\n\t\tif (i == L)\n\t\t{\n\t\t\tcontinue;\n\t\t}\n\t\t\n\t\tlist2[j] = list1[i];\n\t\tj++;\n\t}\n\t\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666123034,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpp3vnww5_.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x42860d]\n??:? void tmpp3vnww5_.__unittest_L27_C1() [0x42801d]\n??:? void tmpp3vnww5_.__modtest() [0x42838c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b57e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430809]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430cb8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430795]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b555]\n??:? runModuleUnitTests [0x42c4c1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ad0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length - 1];\n\tlong i = 0;\n\tlong j = 0;\n\twhile (i < list1.length) {\n\t\tif (i != L) {\n\t\t\tlist2[j] = list1[i];\n\t\t\tj++;\n\t\t}\n\t\ti++;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666123034,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpomerao0v.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x4285ed]\n??:? void tmpomerao0v.__unittest_L21_C1() [0x427ffd]\n??:? void tmpomerao0v.__modtest() [0x42836c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6cb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b55e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307e9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430775]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b535]\n??:? runModuleUnitTests [0x42c4a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ab0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length-1];\n\tlong i = 0;\n\tlong j = 0;\n\twhile (i < list1.length)\n\t{\n\t\tif (i != L)\n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj = j + 1;\n\t\t}\n\t\ti = i + 1;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517346,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpcuehhgss.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4285fd]\n??:? void tmpcuehhgss.__unittest_L23_C1() [0x428011]\n??:? void tmpcuehhgss.__modtest() [0x428380]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6db]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b56e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307f9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ca8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430785]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b545]\n??:? runModuleUnitTests [0x42c4b1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ac0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length - 1];\n\tlong i = 0;\n\tlong j = 0;\n\twhile (i < list1.length)\n\t{\n\t\tif (i != L)\n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj++;\n\t\t}\n\t\ti++;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517346,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpv00kjiyp.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4285ed]\n??:? void tmpv00kjiyp.__unittest_L23_C1() [0x427ffd]\n??:? void tmpv00kjiyp.__modtest() [0x42836c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6cb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b55e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307e9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430775]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b535]\n??:? runModuleUnitTests [0x42c4a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ab0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length - 1];\n\tlong i = 0;\n\tlong j = 0;\n\twhile (i < list1.length)\n\t{\n\t\tif (i != L)\n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj = j + 1;\n\t\t}\n\t\ti = i + 1;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517346,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqb7h_urh.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4285fd]\n??:? void tmpqb7h_urh.__unittest_L23_C1() [0x428011]\n??:? void tmpqb7h_urh.__modtest() [0x428380]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6db]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b56e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307f9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ca8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430785]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b545]\n??:? runModuleUnitTests [0x42c4b1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ac0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length - 1];\n\tlong i = 0;\n\tlong j = 0;\n\twhile (i < list1.length)\n\t{\n\t\tif (i != L)\n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj = j + 1;\n\t\t}\n\t\ti = i + 1;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517346,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqb7h_urh.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4285fd]\n??:? void tmpqb7h_urh.__unittest_L23_C1() [0x428011]\n??:? void tmpqb7h_urh.__modtest() [0x428380]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6db]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b56e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307f9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ca8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430785]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b545]\n??:? runModuleUnitTests [0x42c4b1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ac0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2;\n\tlong i;\n\t\n\tlist2 = new long[L-1];\n\t\n\tfor(i=0;i<L;i++)\n\t{\n\t\tif(i<L-1)\n\t\t{\n\t\t\tlist2[i] = list1[i];\n\t\t}\n\t\telse if(i>L-1)\n\t\t{\n\t\t\tlist2[i-1] = list1[i];\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666123034,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3q63yjvi.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x42866d]\n??:? void tmp3q63yjvi.__unittest_L27_C1() [0x428081]\n??:? void tmp3q63yjvi.__modtest() [0x4283f0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c74b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430869]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d18]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4307f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5b5]\n??:? runModuleUnitTests [0x42c521]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b30]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length - 1];\n\tlong i = 0;\n\tlong j = 0;\n\twhile (i < list1.length) \n\t{\n\t\tif (i != L) \n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj++;\n\t\t}\n\t\ti++;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517346,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmprr7vv0jz.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4285ed]\n??:? void tmprr7vv0jz.__unittest_L23_C1() [0x427ffd]\n??:? void tmprr7vv0jz.__modtest() [0x42836c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6cb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b55e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307e9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430775]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b535]\n??:? runModuleUnitTests [0x42c4a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ab0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length - 1];\n\tlong i = 0;\n\tlong j = 0;\n\twhile (i < list1.length) \n\t{\n\t\tif (i != L) \n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj++;\n\t\t}\n\t\ti++;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517346,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmprr7vv0jz.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4285ed]\n??:? void tmprr7vv0jz.__unittest_L23_C1() [0x427ffd]\n??:? void tmprr7vv0jz.__modtest() [0x42836c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6cb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b55e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307e9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430775]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b535]\n??:? runModuleUnitTests [0x42c4a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ab0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length-1];\n\tlong i = 0;\n\tlong j = 0;\n\twhile (i < list1.length)\n\t{\n\t\tif (i != L)\n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj++;\n\t\t}\n\t\ti++;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517346,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp2xz_q_5h.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4285ed]\n??:? void tmp2xz_q_5h.__unittest_L23_C1() [0x427ffd]\n??:? void tmp2xz_q_5h.__modtest() [0x42836c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6cb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b55e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307e9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430775]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b535]\n??:? runModuleUnitTests [0x42c4a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ab0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length - 1];\n\tlong i = 0;\n\tlong j = 0;\n\twhile (i < list1.length)\n\t{\n\t\tif (i != L)\n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj = j + 1;\n\t\t}\n\t\ti = i + 1;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517346,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqb7h_urh.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4285fd]\n??:? void tmpqb7h_urh.__unittest_L23_C1() [0x428011]\n??:? void tmpqb7h_urh.__modtest() [0x428380]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6db]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b56e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307f9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ca8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430785]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b545]\n??:? runModuleUnitTests [0x42c4b1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ac0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length - 1];\n\tlong i = 0;\n\tlong j = 0;\n\twhile (i < list1.length) {\n\t\tif (i != L) {\n\t\t\tlist2[j] = list1[i];\n\t\t\tj = j + 1;\n\t\t}\n\t\ti = i + 1;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517346,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpfomo_n83.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x4285fd]\n??:? void tmpfomo_n83.__unittest_L21_C1() [0x428011]\n??:? void tmpfomo_n83.__modtest() [0x428380]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6db]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b56e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307f9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ca8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430785]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b545]\n??:? runModuleUnitTests [0x42c4b1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ac0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length - 1];\n\tlong i = 0;\n\tlong j = 0;\n\twhile (i < list1.length)\n\t{\n\t\tif (i != L)\n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj = j + 1;\n\t\t}\n\t\ti = i + 1;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517346,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqb7h_urh.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4285fd]\n??:? void tmpqb7h_urh.__unittest_L23_C1() [0x428011]\n??:? void tmpqb7h_urh.__modtest() [0x428380]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6db]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b56e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307f9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ca8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430785]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b545]\n??:? runModuleUnitTests [0x42c4b1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ac0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2;\n\tlong i;\n\tlist2 = new long[list1.length - 1];\n\tfor (i = 0; i < list1.length; i++)\n\t{\n\t\tif (i < L)\n\t\t{\n\t\t\tlist2[i] = list1[i];\n\t\t}\n\t\telse if (i > L)\n\t\t{\n\t\t\tlist2[i - 1] = list1[i];\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666123033,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpzjynt1vj.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x428665]\n??:? void tmpzjynt1vj.__unittest_L25_C1() [0x428079]\n??:? void tmpzjynt1vj.__modtest() [0x4283e8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c743]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430861]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d10]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4307ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5ad]\n??:? runModuleUnitTests [0x42c519]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b28]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length - 1];\n\tlong i = 0;\n\tlong j = 0;\n\twhile (i < list1.length)\n\t{\n\t\tif (i != L)\n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj++;\n\t\t}\n\t\ti++;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517346,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpv00kjiyp.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4285ed]\n??:? void tmpv00kjiyp.__unittest_L23_C1() [0x427ffd]\n??:? void tmpv00kjiyp.__modtest() [0x42836c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6cb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b55e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307e9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430775]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b535]\n??:? runModuleUnitTests [0x42c4a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ab0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length - 1];\n\tlong i = 0;\n\tlong j = 0;\n\twhile (i < list1.length)\n\t{\n\t\tif (i != L)\n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj = j + 1;\n\t\t}\n\t\ti = i + 1;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517346,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqb7h_urh.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4285fd]\n??:? void tmpqb7h_urh.__unittest_L23_C1() [0x428011]\n??:? void tmpqb7h_urh.__modtest() [0x428380]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6db]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b56e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307f9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ca8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430785]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b545]\n??:? runModuleUnitTests [0x42c4b1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ac0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2;\n\tlong i;\n\tlist2 = new long[list1.length - 1];\n\tfor (i = 0; i < list1.length; i++) \n\t{\n\t\tif (i < L) \n\t\t{\n\t\t\tlist2[i] = list1[i];\n\t\t}\n\t\telse if (i > L) \n\t\t{\n\t\t\tlist2[i - 1] = list1[i];\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666123034,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpzmvtdm2y.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x428665]\n??:? void tmpzmvtdm2y.__unittest_L25_C1() [0x428079]\n??:? void tmpzmvtdm2y.__modtest() [0x4283e8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c743]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430861]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d10]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4307ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5ad]\n??:? runModuleUnitTests [0x42c519]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b28]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length-1];\n\tlong i = 0;\n\tlong j = 0;\n\twhile(i < list1.length)\n\t{\n\t\tif(i != L)\n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj++;\n\t\t}\n\t\ti++;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666123033,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpa9obpuoo.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4285ed]\n??:? void tmpa9obpuoo.__unittest_L23_C1() [0x427ffd]\n??:? void tmpa9obpuoo.__modtest() [0x42836c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6cb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b55e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307e9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430775]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b535]\n??:? runModuleUnitTests [0x42c4a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ab0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length - 1];\n\tlong i = 0;\n\tlong j = 0;\n\twhile(i < list1.length)\n\t{\n\t\tif(i != L)\n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj++;\n\t\t}\n\t\ti++;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666123033,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpvz9sb843.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4285ed]\n??:? void tmpvz9sb843.__unittest_L23_C1() [0x427ffd]\n??:? void tmpvz9sb843.__modtest() [0x42836c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6cb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b55e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307e9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430775]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b535]\n??:? runModuleUnitTests [0x42c4a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ab0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length - 1];\n\tlong i = 0;\n\tlong j = 0;\n\twhile (i < list1.length)\n\t{\n\t\tif (i != L)\n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj++;\n\t\t}\n\t\ti++;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517346,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpv00kjiyp.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4285ed]\n??:? void tmpv00kjiyp.__unittest_L23_C1() [0x427ffd]\n??:? void tmpv00kjiyp.__modtest() [0x42836c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6cb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b55e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307e9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430775]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b535]\n??:? runModuleUnitTests [0x42c4a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ab0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length-1];\n\tlong i = 0;\n\tlong j = 0;\n\twhile (i < list1.length)\n\t{\n\t\tif (i != L)\n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj = j + 1;\n\t\t}\n\t\ti = i + 1;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517346,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpcuehhgss.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4285fd]\n??:? void tmpcuehhgss.__unittest_L23_C1() [0x428011]\n??:? void tmpcuehhgss.__modtest() [0x428380]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6db]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b56e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307f9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ca8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430785]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b545]\n??:? runModuleUnitTests [0x42c4b1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ac0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length - 1];\n\tlong i = 0;\n\tlong j = 0;\n\twhile (i < list1.length) \n\t{\n\t\tif (i != L) \n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj = j + 1;\n\t\t}\n\t\ti = i + 1;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517346,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpn7ulu120.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4285fd]\n??:? void tmpn7ulu120.__unittest_L23_C1() [0x428011]\n??:? void tmpn7ulu120.__modtest() [0x428380]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6db]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b56e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307f9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ca8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430785]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b545]\n??:? runModuleUnitTests [0x42c4b1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ac0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length - 1];\n\tlong i = 0;\n\tlong j = 0;\n\twhile (i < list1.length) {\n\t\tif (i != L) {\n\t\t\tlist2[j] = list1[i];\n\t\t\tj++;\n\t\t}\n\t\ti++;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666123034,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpomerao0v.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x4285ed]\n??:? void tmpomerao0v.__unittest_L21_C1() [0x427ffd]\n??:? void tmpomerao0v.__modtest() [0x42836c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6cb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b55e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307e9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430775]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b535]\n??:? runModuleUnitTests [0x42c4a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ab0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2;\n\tlist2 = new long[list1.length-1];\n\tlong i;\n\tfor (i=0; i<L; i++)\n\t{\n\t\tlist2[i] = list1[i];\n\t}\n\tfor (i=L; i<list1.length-1; i++)\n\t{\n\t\tlist2[i] = list1[i+1];\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666123033,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp6bea8kpt.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x42865d]\n??:? void tmp6bea8kpt.__unittest_L22_C1() [0x428071]\n??:? void tmp6bea8kpt.__modtest() [0x4283e0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c73b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430859]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d08]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4307e5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5a5]\n??:? runModuleUnitTests [0x42c511]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b20]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length-1];\n\tlong i = 0;\n\tlong j = 0;\n\twhile (i < list1.length)\n\t{\n\t\tif (i != L)\n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj = j + 1;\n\t\t}\n\t\ti = i + 1;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517346,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpcuehhgss.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4285fd]\n??:? void tmpcuehhgss.__unittest_L23_C1() [0x428011]\n??:? void tmpcuehhgss.__modtest() [0x428380]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6db]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b56e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307f9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ca8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430785]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b545]\n??:? runModuleUnitTests [0x42c4b1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ac0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length-1];\n\tlong i = 0;\n\tlong j = 0;\n\twhile (i < list1.length)\n\t{\n\t\tif (i != L)\n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj++;\n\t\t}\n\t\ti++;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517346,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp2xz_q_5h.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4285ed]\n??:? void tmp2xz_q_5h.__unittest_L23_C1() [0x427ffd]\n??:? void tmp2xz_q_5h.__modtest() [0x42836c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6cb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b55e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307e9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430775]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b535]\n??:? runModuleUnitTests [0x42c4a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ab0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length-1];\n\tlong i = 0;\n\tlong j = 0;\n\twhile (i < list1.length)\n\t{\n\t\tif (i != L)\n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj++;\n\t\t}\n\t\ti++;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517346,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp2xz_q_5h.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4285ed]\n??:? void tmp2xz_q_5h.__unittest_L23_C1() [0x427ffd]\n??:? void tmp2xz_q_5h.__modtest() [0x42836c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6cb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b55e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307e9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430775]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b535]\n??:? runModuleUnitTests [0x42c4a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ab0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2;\n\tlist2 = new long[list1.length - 1];\n\tlong i;\n\tfor (i = 0; i < L; i++)\n\t{\n\t\tlist2[i] = list1[i];\n\t}\n\tfor (i = L; i < list1.length - 1; i++)\n\t{\n\t\tlist2[i] = list1[i + 1];\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666123034,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpfi032cc0.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x42865d]\n??:? void tmpfi032cc0.__unittest_L22_C1() [0x428071]\n??:? void tmpfi032cc0.__modtest() [0x4283e0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c73b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430859]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d08]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4307e5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5a5]\n??:? runModuleUnitTests [0x42c511]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b20]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length - 1];\n\tlong i = 0;\n\tlong j = 0;\n\twhile (i < list1.length)\n\t{\n\t\tif (i != L)\n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj = j + 1;\n\t\t}\n\t\ti = i + 1;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517346,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqb7h_urh.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4285fd]\n??:? void tmpqb7h_urh.__unittest_L23_C1() [0x428011]\n??:? void tmpqb7h_urh.__modtest() [0x428380]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6db]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b56e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307f9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ca8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430785]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b545]\n??:? runModuleUnitTests [0x42c4b1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ac0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length - 1];\n\tlong i = 0;\n\tlong j = 0;\n\twhile (i < list1.length)\n\t{\n\t\tif (i != L)\n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj++;\n\t\t}\n\t\ti++;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517346,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpv00kjiyp.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4285ed]\n??:? void tmpv00kjiyp.__unittest_L23_C1() [0x427ffd]\n??:? void tmpv00kjiyp.__modtest() [0x42836c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6cb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b55e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307e9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430775]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b535]\n??:? runModuleUnitTests [0x42c4a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ab0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length - 1];\n\tlong i = 0;\n\tlong j = 0;\n\twhile (i < list1.length) \n\t{\n\t\tif (i != L) \n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj++;\n\t\t}\n\t\ti++;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517346,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmprr7vv0jz.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4285ed]\n??:? void tmprr7vv0jz.__unittest_L23_C1() [0x427ffd]\n??:? void tmprr7vv0jz.__modtest() [0x42836c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6cb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b55e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307e9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430775]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b535]\n??:? runModuleUnitTests [0x42c4a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ab0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length - 1];\n\tlong i = 0;\n\tlong j = 0;\n\twhile (i < list1.length)\n\t{\n\t\tif (i != L)\n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj++;\n\t\t}\n\t\ti++;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517346,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpv00kjiyp.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4285ed]\n??:? void tmpv00kjiyp.__unittest_L23_C1() [0x427ffd]\n??:? void tmpv00kjiyp.__modtest() [0x42836c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6cb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b55e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307e9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430775]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b535]\n??:? runModuleUnitTests [0x42c4a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ab0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length - 1];\n\tlong i = 0;\n\tlong j = 0;\n\twhile (i < list1.length) \n\t{\n\t\tif (i != L) \n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj++;\n\t\t}\n\t\ti++;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517346,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmprr7vv0jz.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4285ed]\n??:? void tmprr7vv0jz.__unittest_L23_C1() [0x427ffd]\n??:? void tmprr7vv0jz.__modtest() [0x42836c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6cb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b55e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307e9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430775]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b535]\n??:? runModuleUnitTests [0x42c4a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ab0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length - 1];\n\tlong i = 0;\n\tlong j = 0;\n\twhile (i < list1.length) \n\t{\n\t\tif (i != L) \n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj++;\n\t\t}\n\t\ti++;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517346,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmprr7vv0jz.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4285ed]\n??:? void tmprr7vv0jz.__unittest_L23_C1() [0x427ffd]\n??:? void tmprr7vv0jz.__modtest() [0x42836c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6cb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b55e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307e9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430775]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b535]\n??:? runModuleUnitTests [0x42c4a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ab0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length - 1];\n\tlong i = 0;\n\tlong j = 0;\n\twhile (i < list1.length) \n\t{\n\t\tif (i != L) \n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj++;\n\t\t}\n\t\ti++;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517346,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmprr7vv0jz.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4285ed]\n??:? void tmprr7vv0jz.__unittest_L23_C1() [0x427ffd]\n??:? void tmprr7vv0jz.__modtest() [0x42836c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6cb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b55e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307e9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430775]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b535]\n??:? runModuleUnitTests [0x42c4a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ab0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length - 1];\n\tlong i = 0;\n\tlong j = 0;\n\twhile (i < list1.length) \n\t{\n\t\tif (i != L) \n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj++;\n\t\t}\n\t\ti++;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517346,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmprr7vv0jz.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4285ed]\n??:? void tmprr7vv0jz.__unittest_L23_C1() [0x427ffd]\n??:? void tmprr7vv0jz.__modtest() [0x42836c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6cb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b55e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307e9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430775]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b535]\n??:? runModuleUnitTests [0x42c4a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ab0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length - 1];\n\tlong i = 0;\n\tlong j = 0;\n\twhile (i < list1.length)\n\t{\n\t\tif (i != L)\n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj = j + 1;\n\t\t}\n\t\ti = i + 1;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517346,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqb7h_urh.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4285fd]\n??:? void tmpqb7h_urh.__unittest_L23_C1() [0x428011]\n??:? void tmpqb7h_urh.__modtest() [0x428380]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6db]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b56e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307f9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ca8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430785]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b545]\n??:? runModuleUnitTests [0x42c4b1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ac0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2;\n\tlong i, j;\n\t\n\tlist2 = new long[list1.length - 1];\n\t\n\tfor (i = 0, j = 0; i < list1.length; i++)\n\t{\n\t\tif (i != L)\n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj++;\n\t\t}\n\t}\n\t\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517346,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp2qm14xwc.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x42860d]\n??:? void tmp2qm14xwc.__unittest_L25_C1() [0x42801d]\n??:? void tmp2qm14xwc.__modtest() [0x42838c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b57e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430809]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430cb8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430795]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b555]\n??:? runModuleUnitTests [0x42c4c1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ad0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length - 1];\n\tlong i = 0;\n\tlong j = 0;\n\twhile (i < list1.length) {\n\t\tif (i != L) {\n\t\t\tlist2[j] = list1[i];\n\t\t\tj = j + 1;\n\t\t}\n\t\ti = i + 1;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517346,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpfomo_n83.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x4285fd]\n??:? void tmpfomo_n83.__unittest_L21_C1() [0x428011]\n??:? void tmpfomo_n83.__modtest() [0x428380]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6db]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b56e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307f9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ca8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430785]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b545]\n??:? runModuleUnitTests [0x42c4b1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ac0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length - 1];\n\tlong i = 0;\n\twhile (i < L) \n\t{\n\t\tlist2[i] = list1[i];\n\t\ti = i + 1;\n\t}\n\twhile (i < list1.length - 1) \n\t{\n\t\tlist2[i] = list1[i + 1];\n\t\ti = i + 1;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666123034,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpo8uw2_s5.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x428655]\n??:? void tmpo8uw2_s5.__unittest_L23_C1() [0x428065]\n??:? void tmpo8uw2_s5.__modtest() [0x4283d4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c733]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5c6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430851]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d00]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4307dd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b59d]\n??:? runModuleUnitTests [0x42c509]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b18]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length - 1];\n\tlong i = 0;\n\tlong j = 0;\n\twhile (i < list1.length)\n\t{\n\t\tif (i != L)\n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj++;\n\t\t}\n\t\ti++;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517346,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpv00kjiyp.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4285ed]\n??:? void tmpv00kjiyp.__unittest_L23_C1() [0x427ffd]\n??:? void tmpv00kjiyp.__modtest() [0x42836c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6cb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b55e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307e9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430775]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b535]\n??:? runModuleUnitTests [0x42c4a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ab0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length-1];\n\tlong i = 0;\n\tlong j = 0;\n\twhile (i < list1.length)\n\t{\n\t\tif (i != L)\n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj = j + 1;\n\t\t}\n\t\ti = i + 1;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517346,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpcuehhgss.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4285fd]\n??:? void tmpcuehhgss.__unittest_L23_C1() [0x428011]\n??:? void tmpcuehhgss.__modtest() [0x428380]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6db]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b56e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307f9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ca8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430785]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b545]\n??:? runModuleUnitTests [0x42c4b1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ac0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length - 1];\n\tlong i = 0;\n\tlong j = 0;\n\twhile (i < list1.length)\n\t{\n\t\tif (i != L)\n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj = j + 1;\n\t\t}\n\t\ti = i + 1;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517346,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqb7h_urh.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4285fd]\n??:? void tmpqb7h_urh.__unittest_L23_C1() [0x428011]\n??:? void tmpqb7h_urh.__modtest() [0x428380]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6db]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b56e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307f9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ca8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430785]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b545]\n??:? runModuleUnitTests [0x42c4b1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ac0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2;\n\tlong i;\n\t\n\tlist2 = new long[list1.length - 1];\n\t\n\tfor (i = 0; i < list1.length; i++)\n\t{\n\t\tif (i < L)\n\t\t{\n\t\t\tlist2[i] = list1[i];\n\t\t}\n\t\telse if (i > L)\n\t\t{\n\t\t\tlist2[i - 1] = list1[i];\n\t\t}\n\t}\n\t\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666123033,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp39axndc6.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x428665]\n??:? void tmp39axndc6.__unittest_L28_C1() [0x428079]\n??:? void tmp39axndc6.__modtest() [0x4283e8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c743]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430861]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d10]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4307ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5ad]\n??:? runModuleUnitTests [0x42c519]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b28]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length - 1];\n\tlong i = 0;\n\tlong j = 0;\n\twhile (i < list1.length)\n\t{\n\t\tif (i != L)\n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj = j + 1;\n\t\t}\n\t\ti = i + 1;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517346,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqb7h_urh.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4285fd]\n??:? void tmpqb7h_urh.__unittest_L23_C1() [0x428011]\n??:? void tmpqb7h_urh.__modtest() [0x428380]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6db]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b56e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307f9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ca8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430785]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b545]\n??:? runModuleUnitTests [0x42c4b1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ac0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length-1];\n\tlong i;\n\tfor (i=0; i<list1.length; i++) \n\t{\n\t\tif (i<L) \n\t\t{\n\t\t\tlist2[i] = list1[i];\n\t\t}\n\t\telse if (i>L) \n\t\t{\n\t\t\tlist2[i-1] = list1[i];\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666123034,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppoo6av7t.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428655]\n??:? void tmppoo6av7t.__unittest_L24_C1() [0x428065]\n??:? void tmppoo6av7t.__modtest() [0x4283d4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c733]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5c6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430851]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d00]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4307dd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b59d]\n??:? runModuleUnitTests [0x42c509]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b18]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length-1];\n\tlong i = 0;\n\tlong j = 0;\n\twhile (i < list1.length) {\n\t\tif (i != L) {\n\t\t\tlist2[j] = list1[i];\n\t\t\tj = j + 1;\n\t\t}\n\t\ti = i + 1;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666123033,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmplzmkumri.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x4285fd]\n??:? void tmplzmkumri.__unittest_L21_C1() [0x428011]\n??:? void tmplzmkumri.__modtest() [0x428380]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6db]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b56e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307f9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ca8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430785]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b545]\n??:? runModuleUnitTests [0x42c4b1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ac0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length - 1];\n\tlong i = 0;\n\tlong j = 0;\n\twhile (i < list1.length)\n\t{\n\t\tif (i != L)\n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj = j + 1;\n\t\t}\n\t\ti = i + 1;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517346,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqb7h_urh.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4285fd]\n??:? void tmpqb7h_urh.__unittest_L23_C1() [0x428011]\n??:? void tmpqb7h_urh.__modtest() [0x428380]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6db]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b56e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307f9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ca8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430785]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b545]\n??:? runModuleUnitTests [0x42c4b1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ac0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length - 1];\n\tlong i = 0;\n\tlong j = 0;\n\twhile (i < list1.length)\n\t{\n\t\tif (i != L)\n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj++;\n\t\t}\n\t\ti++;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517346,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpv00kjiyp.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4285ed]\n??:? void tmpv00kjiyp.__unittest_L23_C1() [0x427ffd]\n??:? void tmpv00kjiyp.__modtest() [0x42836c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6cb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b55e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307e9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430775]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b535]\n??:? runModuleUnitTests [0x42c4a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ab0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length-1];\n\tlong i = 0;\n\tlong j = 0;\n\twhile (i < list1.length) \n\t{\n\t\tif (i != L) \n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj += 1;\n\t\t}\n\t\ti += 1;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666123034,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmprg0iq8rl.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4285f5]\n??:? void tmprg0iq8rl.__unittest_L23_C1() [0x428005]\n??:? void tmprg0iq8rl.__modtest() [0x428374]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6d3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b566]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307f1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ca0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43077d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b53d]\n??:? runModuleUnitTests [0x42c4a9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ab8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length - 1];\n\tlong k = 0;\n\tfor (long i = 0; i < list1.length; i++)\n\t{\n\t\tif (i != L)\n\t\t{\n\t\t\tlist2[k] = list1[i];\n\t\t\tk++;\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666123034,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjommvbak.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x4285ed]\n??:? void tmpjommvbak.__unittest_L21_C1() [0x427ffd]\n??:? void tmpjommvbak.__modtest() [0x42836c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6cb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b55e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307e9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430775]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b535]\n??:? runModuleUnitTests [0x42c4a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ab0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length - 1];\n\tlong i = 0;\n\tlong j = 0;\n\twhile (i < list1.length) \n\t{\n\t\tif (i != L) \n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj++;\n\t\t}\n\t\ti++;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517346,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmprr7vv0jz.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4285ed]\n??:? void tmprr7vv0jz.__unittest_L23_C1() [0x427ffd]\n??:? void tmprr7vv0jz.__modtest() [0x42836c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6cb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b55e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307e9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430775]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b535]\n??:? runModuleUnitTests [0x42c4a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ab0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length-1];\n\tlong i = 0;\n\tlong j = 0;\n\twhile (i < list1.length)\n\t{\n\t\tif (i != L)\n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj = j + 1;\n\t\t}\n\t\ti = i + 1;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517346,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpcuehhgss.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4285fd]\n??:? void tmpcuehhgss.__unittest_L23_C1() [0x428011]\n??:? void tmpcuehhgss.__modtest() [0x428380]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6db]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b56e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307f9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ca8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430785]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b545]\n??:? runModuleUnitTests [0x42c4b1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ac0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length - 1];\n\tlong i = 0;\n\tlong j = 0;\n\twhile (i < list1.length)\n\t{\n\t\tif (i != L)\n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj = j + 1;\n\t\t}\n\t\ti = i + 1;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517346,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqb7h_urh.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4285fd]\n??:? void tmpqb7h_urh.__unittest_L23_C1() [0x428011]\n??:? void tmpqb7h_urh.__modtest() [0x428380]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6db]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b56e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307f9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ca8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430785]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b545]\n??:? runModuleUnitTests [0x42c4b1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ac0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length - 1];\n\tlong i = 0;\n\tlong j = 0;\n\twhile (i < list1.length) \n\t{\n\t\tif (i != L) \n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj = j + 1;\n\t\t}\n\t\ti = i + 1;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517346,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpn7ulu120.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4285fd]\n??:? void tmpn7ulu120.__unittest_L23_C1() [0x428011]\n??:? void tmpn7ulu120.__modtest() [0x428380]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6db]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b56e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307f9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ca8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430785]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b545]\n??:? runModuleUnitTests [0x42c4b1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ac0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length - 1];\n\tlong i = 0;\n\tlong j = 0;\n\twhile (i < list1.length)\n\t{\n\t\tif (i != L)\n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj = j + 1;\n\t\t}\n\t\ti = i + 1;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517346,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqb7h_urh.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4285fd]\n??:? void tmpqb7h_urh.__unittest_L23_C1() [0x428011]\n??:? void tmpqb7h_urh.__modtest() [0x428380]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6db]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b56e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307f9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ca8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430785]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b545]\n??:? runModuleUnitTests [0x42c4b1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ac0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length - 1];\n\tlong i = 0;\n\tlong j = 0;\n\twhile (i < list1.length)\n\t{\n\t\tif (i != L)\n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj = j + 1;\n\t\t}\n\t\ti = i + 1;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517346,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqb7h_urh.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4285fd]\n??:? void tmpqb7h_urh.__unittest_L23_C1() [0x428011]\n??:? void tmpqb7h_urh.__modtest() [0x428380]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6db]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b56e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307f9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ca8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430785]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b545]\n??:? runModuleUnitTests [0x42c4b1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ac0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length-1];\n\tint i = 0;\n\tint j = 0;\n\twhile (i < list1.length)\n\t{\n\t\tif (i != L)\n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj++;\n\t\t}\n\t\ti++;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666123034,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp0l5odevf.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4285e5]\n??:? void tmp0l5odevf.__unittest_L23_C1() [0x427ff9]\n??:? void tmp0l5odevf.__modtest() [0x428368]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6c3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b556]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307e1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c90]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43076d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b52d]\n??:? runModuleUnitTests [0x42c499]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428aa8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2;\n\tlist2 = new long[list1.length - 1];\n\tlong i = 0;\n\twhile (i < L)\n\t{\n\t\tlist2[i] = list1[i];\n\t\ti = i + 1;\n\t}\n\twhile (i < list2.length)\n\t{\n\t\tlist2[i] = list1[i + 1];\n\t\ti = i + 1;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666123034,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp6j4yyld2.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x42865d]\n??:? void tmp6j4yyld2.__unittest_L24_C1() [0x428071]\n??:? void tmp6j4yyld2.__modtest() [0x4283e0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c73b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430859]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d08]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4307e5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5a5]\n??:? runModuleUnitTests [0x42c511]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b20]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length - 1];\n\tlong i = 0;\n\tlong j = 0;\n\twhile (i < list1.length)\n\t{\n\t\tif (i != L)\n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj = j + 1;\n\t\t}\n\t\ti = i + 1;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517346,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqb7h_urh.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4285fd]\n??:? void tmpqb7h_urh.__unittest_L23_C1() [0x428011]\n??:? void tmpqb7h_urh.__modtest() [0x428380]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6db]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b56e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307f9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ca8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430785]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b545]\n??:? runModuleUnitTests [0x42c4b1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ac0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length - 1];\n\tlong i = 0;\n\tlong j = 0;\n\twhile (i < list1.length)\n\t{\n\t\tif (i != L)\n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj = j + 1;\n\t\t}\n\t\ti = i + 1;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517346,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqb7h_urh.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4285fd]\n??:? void tmpqb7h_urh.__unittest_L23_C1() [0x428011]\n??:? void tmpqb7h_urh.__modtest() [0x428380]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6db]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b56e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307f9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ca8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430785]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b545]\n??:? runModuleUnitTests [0x42c4b1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ac0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length-1];\n\tlong i = 0;\n\tlong j = 0;\n\twhile (i < list1.length) \n\t{\n\t\tif (i != L) \n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj = j + 1;\n\t\t}\n\t\ti = i + 1;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517346,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpxgz8wsrm.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4285fd]\n??:? void tmpxgz8wsrm.__unittest_L23_C1() [0x428011]\n??:? void tmpxgz8wsrm.__modtest() [0x428380]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6db]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b56e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307f9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ca8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430785]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b545]\n??:? runModuleUnitTests [0x42c4b1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ac0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length - 1];\n\tlong i = 0;\n\tlong j = 0;\n\twhile (i < list1.length)\n\t{\n\t\tif (i != L)\n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj = j + 1;\n\t\t}\n\t\ti = i + 1;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517346,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqb7h_urh.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4285fd]\n??:? void tmpqb7h_urh.__unittest_L23_C1() [0x428011]\n??:? void tmpqb7h_urh.__modtest() [0x428380]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6db]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b56e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307f9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ca8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430785]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b545]\n??:? runModuleUnitTests [0x42c4b1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ac0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length - 1];\n\tlong i = 0;\n\tlong j = 0;\n\twhile (i < list1.length)\n\t{\n\t\tif (i != L)\n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj = j + 1;\n\t\t}\n\t\ti = i + 1;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517346,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqb7h_urh.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4285fd]\n??:? void tmpqb7h_urh.__unittest_L23_C1() [0x428011]\n??:? void tmpqb7h_urh.__modtest() [0x428380]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6db]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b56e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307f9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ca8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430785]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b545]\n??:? runModuleUnitTests [0x42c4b1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ac0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length - 1];\n\tlong i = 0;\n\tlong j = 0;\n\twhile (i < list1.length)\n\t{\n\t\tif (i != L)\n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj++;\n\t\t}\n\t\ti++;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517346,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpv00kjiyp.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4285ed]\n??:? void tmpv00kjiyp.__unittest_L23_C1() [0x427ffd]\n??:? void tmpv00kjiyp.__modtest() [0x42836c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6cb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b55e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307e9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430775]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b535]\n??:? runModuleUnitTests [0x42c4a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ab0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length - 1];\n\tlong i = 0;\n\tlong j = 0;\n\twhile (i < list1.length) \n\t{\n\t\tif (i != L) \n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj = j + 1;\n\t\t}\n\t\ti = i + 1;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517346,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpn7ulu120.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4285fd]\n??:? void tmpn7ulu120.__unittest_L23_C1() [0x428011]\n??:? void tmpn7ulu120.__modtest() [0x428380]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6db]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b56e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307f9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ca8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430785]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b545]\n??:? runModuleUnitTests [0x42c4b1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ac0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length-1];\n\tlong i = 0;\n\tlong j = 0;\n\twhile(i < list1.length)\n\t{\n\t\tif(i != L)\n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj++;\n\t\t}\n\t\ti++;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666123033,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpa9obpuoo.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4285ed]\n??:? void tmpa9obpuoo.__unittest_L23_C1() [0x427ffd]\n??:? void tmpa9obpuoo.__modtest() [0x42836c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6cb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b55e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307e9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430775]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b535]\n??:? runModuleUnitTests [0x42c4a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ab0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length - 1];\n\tlong i = 0;\n\tlong j = 0;\n\twhile (i < list1.length) {\n\t\tif (i != L) {\n\t\t\tlist2[j] = list1[i];\n\t\t\tj = j + 1;\n\t\t}\n\t\ti = i + 1;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517346,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpfomo_n83.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x4285fd]\n??:? void tmpfomo_n83.__unittest_L21_C1() [0x428011]\n??:? void tmpfomo_n83.__modtest() [0x428380]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6db]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b56e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307f9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ca8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430785]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b545]\n??:? runModuleUnitTests [0x42c4b1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ac0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length - 1];\n\tlong i = 0;\n\tlong j = 0;\n\twhile (i < list1.length)\n\t{\n\t\tif (i != L)\n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj = j + 1;\n\t\t}\n\t\ti = i + 1;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517346,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqb7h_urh.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4285fd]\n??:? void tmpqb7h_urh.__unittest_L23_C1() [0x428011]\n??:? void tmpqb7h_urh.__modtest() [0x428380]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6db]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b56e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307f9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ca8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430785]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b545]\n??:? runModuleUnitTests [0x42c4b1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ac0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length - 1];\n\tlong i = 0;\n\tlong j = 0;\n\twhile (i < list1.length)\n\t{\n\t\tif (i != L)\n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj = j + 1;\n\t\t}\n\t\ti = i + 1;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517346,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqb7h_urh.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4285fd]\n??:? void tmpqb7h_urh.__unittest_L23_C1() [0x428011]\n??:? void tmpqb7h_urh.__modtest() [0x428380]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6db]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b56e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307f9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ca8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430785]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b545]\n??:? runModuleUnitTests [0x42c4b1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ac0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length - 1];\n\tlong i = 0;\n\tlong j = 0;\n\twhile (i < list1.length)\n\t{\n\t\tif (i != L)\n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj++;\n\t\t}\n\t\ti++;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517346,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpv00kjiyp.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4285ed]\n??:? void tmpv00kjiyp.__unittest_L23_C1() [0x427ffd]\n??:? void tmpv00kjiyp.__modtest() [0x42836c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6cb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b55e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307e9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430775]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b535]\n??:? runModuleUnitTests [0x42c4a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ab0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length - 1];\n\tlong i = 0;\n\tlong j = 0;\n\twhile (i < list1.length)\n\t{\n\t\tif (i != L)\n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj++;\n\t\t}\n\t\ti++;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517346,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpv00kjiyp.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4285ed]\n??:? void tmpv00kjiyp.__unittest_L23_C1() [0x427ffd]\n??:? void tmpv00kjiyp.__modtest() [0x42836c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6cb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b55e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307e9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430775]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b535]\n??:? runModuleUnitTests [0x42c4a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ab0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length - 1];\n\tlong i = 0;\n\tlong j = 0;\n\twhile (i < list1.length)\n\t{\n\t\tif (i != L)\n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj = j + 1;\n\t\t}\n\t\ti = i + 1;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517346,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqb7h_urh.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4285fd]\n??:? void tmpqb7h_urh.__unittest_L23_C1() [0x428011]\n??:? void tmpqb7h_urh.__modtest() [0x428380]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6db]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b56e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307f9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ca8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430785]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b545]\n??:? runModuleUnitTests [0x42c4b1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ac0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length-1];\n\tlong i = 0;\n\tlong j = 0;\n\twhile (i < list1.length)\n\t{\n\t\tif (i != L)\n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj = j + 1;\n\t\t}\n\t\ti = i + 1;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517346,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpcuehhgss.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4285fd]\n??:? void tmpcuehhgss.__unittest_L23_C1() [0x428011]\n??:? void tmpcuehhgss.__modtest() [0x428380]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6db]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b56e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307f9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ca8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430785]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b545]\n??:? runModuleUnitTests [0x42c4b1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ac0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2;\n\tlist2 = new long[list1.length - 1];\n\tlong i;\n\tfor (i = 0; i < list1.length; i++) \n\t{\n\t\tif (i < L) \n\t\t{\n\t\t\tlist2[i] = list1[i];\n\t\t}\n\t\telse if (i > L) \n\t\t{\n\t\t\tlist2[i - 1] = list1[i];\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666123034,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmplvjmxemt.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x428665]\n??:? void tmplvjmxemt.__unittest_L25_C1() [0x428075]\n??:? void tmplvjmxemt.__modtest() [0x4283e4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c743]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430861]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d10]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4307ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5ad]\n??:? runModuleUnitTests [0x42c519]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b28]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2;\n\tlist2 = new long[list1.length - 1];\n\t\n\tfor (long i = 0; i < list1.length; i++)\n\t{\n\t\tif (i < L)\n\t\t{\n\t\t\tlist2[i] = list1[i];\n\t\t}\n\t\telse if (i > L)\n\t\t{\n\t\t\tlist2[i - 1] = list1[i];\n\t\t}\n\t}\n\t\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666123034,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpf2xf04qi.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x42865d]\n??:? void tmpf2xf04qi.__unittest_L26_C1() [0x428071]\n??:? void tmpf2xf04qi.__modtest() [0x4283e0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c73b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430859]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d08]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4307e5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5a5]\n??:? runModuleUnitTests [0x42c511]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b20]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2;\n\tlong i;\n\tlist2 = new long[list1.size()-1];\n\tfor (i=0; i<list1.size(); i++)\n\t{\n\t\tif (i<L)\n\t\t{\n\t\t\tlist2[i] = list1[i];\n\t\t}\n\t\telse if (i>L)\n\t\t{\n\t\t\tlist2[i-1] = list1[i];\n\t\t}\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666123034,
      "stdout": "",
      "stderr": "/tmp/tmp5zho8to7.d(11): Error: no property `size` for type `long[]`\n/tmp/tmp5zho8to7.d(12): Error: no property `size` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5zho8to7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length - 1];\n\tlong i = 0;\n\tlong j = 0;\n\twhile (i < list1.length) \n\t{\n\t\tif (i != L) \n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj++;\n\t\t}\n\t\ti++;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517346,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmprr7vv0jz.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4285ed]\n??:? void tmprr7vv0jz.__unittest_L23_C1() [0x427ffd]\n??:? void tmprr7vv0jz.__modtest() [0x42836c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6cb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b55e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307e9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430775]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b535]\n??:? runModuleUnitTests [0x42c4a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ab0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length-1];\n\tlong i = 0;\n\tlong j = 0;\n\twhile(i < list1.length) {\n\t\tif(i != L) {\n\t\t\tlist2[j] = list1[i];\n\t\t\tj++;\n\t\t}\n\t\ti++;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1666123034,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmprv__i_7m.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x4285ed]\n??:? void tmprv__i_7m.__unittest_L21_C1() [0x427ffd]\n??:? void tmprv__i_7m.__modtest() [0x42836c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6cb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b55e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307e9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430775]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b535]\n??:? runModuleUnitTests [0x42c4a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ab0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length-1];\n\tlong i = 0;\n\tlong j = 0;\n\twhile (i < list1.length)\n\t{\n\t\tif (i != L)\n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj++;\n\t\t}\n\t\ti++;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517346,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp2xz_q_5h.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4285ed]\n??:? void tmp2xz_q_5h.__unittest_L23_C1() [0x427ffd]\n??:? void tmp2xz_q_5h.__modtest() [0x42836c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6cb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b55e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307e9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430775]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b535]\n??:? runModuleUnitTests [0x42c4a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ab0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n\t\n*/\nlong[] remove_kth_element(long[] list1, long L) \n{\n\tlong[] list2 = new long[list1.length - 1];\n\tlong i = 0;\n\tlong j = 0;\n\twhile (i < list1.length)\n\t{\n\t\tif (i != L)\n\t\t{\n\t\t\tlist2[j] = list1[i];\n\t\t\tj++;\n\t\t}\n\t\ti++;\n\t}\n\treturn list2;\n}\nunittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}",
      "timestamp": 1665517346,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpv00kjiyp.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4285ed]\n??:? void tmpv00kjiyp.__unittest_L23_C1() [0x427ffd]\n??:? void tmpv00kjiyp.__modtest() [0x42836c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6cb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b55e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307e9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430775]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b535]\n??:? runModuleUnitTests [0x42c4a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ab0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}