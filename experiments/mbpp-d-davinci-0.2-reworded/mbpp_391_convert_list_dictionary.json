{
  "name": "mbpp_391_convert_list_dictionary",
  "language": "d",
  "prompt": "import std.math;\n/*\n\n\tWrite a function to convert more than one array to nested associative array.\n\t\n*/\nNone[] convert_list_dictionary(string[] l1, string[] l2, long[] l3) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_391_convert_list_dictionary.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = convert_list_dictionary;\n\n    assert(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85L, 98L, 89L, 92L]) == [[\"S001\": [\"Adina Park\": 85L].nullable].nullable, [\"S002\": [\"Leyton Marsh\": 98L].nullable].nullable, [\"S003\": [\"Duncan Boyle\": 89L].nullable].nullable, [\"S004\": [\"Saim Richards\": 92L].nullable].nullable]);\n    assert(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100L, 200L, 300L, 400L]) == [[\"abc\": [\"python\": 100L].nullable].nullable, [\"def\": [\"program\": 200L].nullable].nullable, [\"ghi\": [\"language\": 300L].nullable].nullable, [\"jkl\": [\"programs\": 400L].nullable].nullable]);\n    assert(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10L, 20L, 30L, 40L]) == [[\"A1\": [\"java\": 10L].nullable].nullable, [\"A2\": [\"C\": 20L].nullable].nullable, [\"A3\": [\"C++\": 30L].nullable].nullable, [\"A4\": [\"DBMS\": 40L].nullable].nullable]);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tauto result = new None[];\n\tforeach(i, item; l1)\n\t{\n\t\tresult ~= [l1[i]:[l2[i]:l3[i]]];\n\t}\n\treturn result;\n}",
    "{\n\treturn [[\"name\" : l1[0], \"age\" : l3[0]], [\"name\" : l1[1], \"age\" : l3[1]], [\"name\" : l1[2], \"age\" : l3[2]]];\n}",
    "{\n\treturn [l1, l2, l3];\n}",
    "{\n\treturn [[\"name\":l1[0], \"age\":l2[0], \"salary\":l3[0]], [\"name\":l1[1], \"age\":l2[1], \"salary\":l3[1]]];\n}",
    "{\n\tlong len = l1.length;\n\tlong i;\n\tauto dict = new Dictionary!(string, string[])();\n\tfor (i = 0; i < len; i++) \n\t{\n\t\tdict[l1[i]] = [l2[i], to!string(l3[i])];\n\t}\n\treturn dict;\n}",
    "{\n\tNone[] result;\n\tforeach(i, v; l1)\n\t{\n\t\tresult ~= [l1[i]: [l2[i]: l3[i]]];\n\t}\n\treturn result;\n}",
    "{\n\t// Create a dictionary\n\tauto d = new Dictionary!(string, long)();\n\t\n\t// Add the elements of the first list to the dictionary\n\tforeach(i, e; l1)\n\t{\n\t\td[e] = l3[i];\n\t}\n\t\n\t// Create a dictionary\n\tauto d2 = new Dictionary!(string, long)();\n\t\n\t// Add the elements of the second list to the dictionary\n\tforeach(i, e; l2)\n\t{\n\t\td2[e] = l3[i];\n\t}\n\t\n\t// Create a dictionary\n\tauto d3 = new Dictionary!(string, Dictionary!(string, long))();\n\t\n\t// Add the elements of the dictionary to the dictionary\n\td3[\"d1\"] = d;\n\td3[\"d2\"] = d2;\n\t\n\treturn d3;\n}",
    "{\n\treturn [\n\t\t[\"name\" : l1[0], \"age\" : l2[0], \"id\" : l3[0]],\n\t\t[\"name\" : l1[1], \"age\" : l2[1], \"id\" : l3[1]],\n\t\t[\"name\" : l1[2], \"age\" : l2[2], \"id\" : l3[2]],\n\t\t[\"name\" : l1[3], \"age\" : l2[3], \"id\" : l3[3]],\n\t\t[\"name\" : l1[4], \"age\" : l2[4], \"id\" : l3[4]],\n\t];\n}",
    "{\n\treturn [[\"name\" : l1, \"surname\" : l2, \"age\" : l3]];\n}",
    "{\n\tlong n = l1.length;\n\tlong m = l2.length;\n\tlong o = l3.length;\n\t\n\tassert(n == m && m == o);\n\t\n\tNone[] result;\n\tresult.length = n;\n\t\n\tforeach(i; 0..n)\n\t{\n\t\tresult[i] = [l1[i]:[l2[i]:l3[i]]];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tauto result = new None[];\n\tforeach(i, item; l1)\n\t{\n\t\tresult ~= [l1[i]:[l2[i]:l3[i]]];\n\t}\n\treturn result;\n}",
    "{\n\tauto result = [];\n\tforeach(i, item; l1)\n\t{\n\t\tresult ~= [l1[i]:[l2[i]:l3[i]]];\n\t}\n\treturn result;\n}",
    "{\n\t// Create an empty associative array\n\tauto dict = [:];\n\t\n\t// Loop through the list\n\tforeach(i, item; l1)\n\t{\n\t\t// Add the item to the associative array\n\t\tdict[item] = [l2[i], l3[i]];\n\t}\n\t\n\t// Return the associative array\n\treturn dict;\n}",
    "{\n\tNone[] result;\n\tforeach(i, item; l1)\n\t{\n\t\tresult[i] = [l1[i]:[l2[i]:l3[i]]];\n\t}\n\treturn result;\n}",
    "{\n\tint n = l1.length;\n\tint m = l2.length;\n\tint o = l3.length;\n\t\n\tassert(n == m);\n\tassert(n == o);\n\t\n\tNone[] result;\n\t\n\tforeach(i; 0 .. n)\n\t{\n\t\tresult[i] = [l1[i] : [l2[i] : l3[i]]];\n\t}\n\t\n\treturn result;\n}",
    "{\n\treturn [[\"first\":l1], [\"second\":l2], [\"third\":l3]];\n}",
    "{\n\tNone[] result;\n\tforeach(i, item; l1)\n\t{\n\t\tresult ~= [l1[i]:[l2[i]:l3[i]]];\n\t}\n\treturn result;\n}",
    "{\n\treturn [[\"name\" : l1[0], \"age\" : l3[0]], [\"name\" : l1[1], \"age\" : l3[1]]];\n}",
    "{\n\tassert(l1.length == l2.length);\n\tassert(l1.length == l3.length);\n\t\n\tNone[] result;\n\tforeach (i, item; l1) \n\t{\n\t\tresult ~= [l1[i]:[l2[i]:l3[i]]];\n\t}\n\treturn result;\n}",
    "{\n\treturn [[\"name\":l1[0], \"age\":l3[0]], [\"name\":l1[1], \"age\":l3[1]], [\"name\":l1[2], \"age\":l3[2]]];\n}"
  ]
}