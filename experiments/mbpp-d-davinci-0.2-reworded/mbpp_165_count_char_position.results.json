{
  "name": "mbpp_165_count_char_position",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_165_count_char_position.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517293,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpwwnq8c71.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmpwwnq8c71.__unittest_L30_C1() [0x427af6]\n??:? void tmpwwnq8c71.__modtest() [0x427b60]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(i, c; str1)\n\t{\n\t\tif(c == 'a' + i || c == 'A' + i)\n\t\t\tcount++;\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517293,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable c; str1)\n\t{\n\t\tif(c.toLower() == (cast(char)(c.toLower() - 'a' + 'A')).toLower())\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517293,
      "stdout": "",
      "stderr": "/tmp/tmpvn9kp4ja.d(13): Error: no property `toLower` for type `immutable(char)`\n/tmp/tmpvn9kp4ja.d(13): Error: no property `toLower` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvn9kp4ja.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1) \n\t{\n\t\tif(c >= 'a' && c <= 'z') \n\t\t{\n\t\t\tif(c == 'a' + (count % 26)) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z') \n\t\t{\n\t\t\tif(c == 'A' + (count % 26)) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517293,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp10thd3la.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmp10thd3la.__unittest_L30_C1() [0x427af6]\n??:? void tmp10thd3la.__modtest() [0x427b60]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' + count)\n\t\t\t\tcount++;\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' + count)\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517293,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmplsskyp1a.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmplsskyp1a.__unittest_L26_C1() [0x427ae2]\n??:? void tmplsskyp1a.__modtest() [0x427b4c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' + count)\n\t\t\t\tcount++;\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' + count)\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517293,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpfu2hn4om.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmpfu2hn4om.__unittest_L26_C1() [0x427ae2]\n??:? void tmpfu2hn4om.__modtest() [0x427b4c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c - 'a' == count)\n\t\t\t\tcount++;\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c - 'A' == count)\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517293,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5uh3h_3r.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427dbd]\n??:? void tmp5uh3h_3r.__unittest_L26_C1() [0x427ad6]\n??:? void tmp5uh3h_3r.__modtest() [0x427b40]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bae3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a976]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb09]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa95]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a94d]\n??:? runModuleUnitTests [0x42b8b9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42820c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517293,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpu91qpkin.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmpu91qpkin.__unittest_L30_C1() [0x427af6]\n??:? void tmpu91qpkin.__modtest() [0x427b60]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(i, c; str1)\n\t{\n\t\tif(c == toUpper(c) && (c - 'A') == i)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517293,
      "stdout": "",
      "stderr": "/tmp/tmpfhnhdv51.d(13): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfhnhdv51.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(i, c; str1)\n\t{\n\t\tif(i == toLower(c) - 'a')\n\t\t\tcount++;\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517293,
      "stdout": "",
      "stderr": "/tmp/tmpgilq_j6h.d(13): Error: undefined identifier `toLower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgilq_j6h.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' + (c - 'a'))\n\t\t\t\tcount++;\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' + (c - 'A'))\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517293,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpdq_4yxtm.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427dad]\n??:? void tmpdq_4yxtm.__unittest_L26_C1() [0x427ac6]\n??:? void tmpdq_4yxtm.__modtest() [0x427b30]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bad3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a966]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42faf9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffa8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa85]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a93d]\n??:? runModuleUnitTests [0x42b8a9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281fc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char ch; str1)\n\t{\n\t\tif(ch == toUpper(ch))\n\t\t{\n\t\t\tif(ch == 'A' || ch == 'B' || ch == 'C' || ch == 'D' || ch == 'E' || ch == 'F' || ch == 'G' || ch == 'H' || ch == 'I' || ch == 'J' || ch == 'K' || ch == 'L' || ch == 'M' || ch == 'N' || ch == 'O' || ch == 'P' || ch == 'Q' || ch == 'R' || ch == 'S' || ch == 'T' || ch == 'U' || ch == 'V' || ch == 'W' || ch == 'X' || ch == 'Y' || ch == 'Z')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517293,
      "stdout": "",
      "stderr": "/tmp/tmp9z4xviqr.d(13): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9z4xviqr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1) \n\t{\n\t\tif(c >= 'a' && c <= 'z') \n\t\t{\n\t\t\tif(c == 'a' + count) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z') \n\t\t{\n\t\t\tif(c == 'A' + count) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517293,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp99rdkgk9.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmp99rdkgk9.__unittest_L30_C1() [0x427ae2]\n??:? void tmp99rdkgk9.__modtest() [0x427b4c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517293,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3lgd587t.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmp3lgd587t.__unittest_L30_C1() [0x427af6]\n??:? void tmp3lgd587t.__modtest() [0x427b60]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517293,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3lgd587t.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmp3lgd587t.__unittest_L30_C1() [0x427af6]\n??:? void tmp3lgd587t.__modtest() [0x427b60]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tint len = str1.length;\n\tforeach(i; 0 .. len)\n\t{\n\t\tif(str1[i] == (char)(i+97))\n\t\t\tcount++;\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517293,
      "stdout": "",
      "stderr": "/tmp/tmprcohybrx.d(14): Error: C style cast illegal, use `cast(char)(i + 97)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprcohybrx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' + count)\n\t\t\t\tcount++;\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' + count)\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517293,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmplsskyp1a.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmplsskyp1a.__unittest_L26_C1() [0x427ae2]\n??:? void tmplsskyp1a.__modtest() [0x427b4c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' + count)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' + count)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517293,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpzkybtklb.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmpzkybtklb.__unittest_L30_C1() [0x427ae2]\n??:? void tmpzkybtklb.__modtest() [0x427b4c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' + count)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' + count)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517293,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpzkybtklb.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmpzkybtklb.__unittest_L30_C1() [0x427ae2]\n??:? void tmpzkybtklb.__modtest() [0x427b4c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t\tcount++;\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517293,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpu_t2soj8.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmpu_t2soj8.__unittest_L26_C1() [0x427af6]\n??:? void tmpu_t2soj8.__modtest() [0x427b60]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' + count)\n\t\t\t\tcount++;\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' + count)\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517293,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpfu2hn4om.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmpfu2hn4om.__unittest_L26_C1() [0x427ae2]\n??:? void tmpfu2hn4om.__modtest() [0x427b4c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tint i = 0;\n\tforeach(char c; str1)\n\t{\n\t\tif(c == 'a' + i || c == 'A' + i)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t\ti++;\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122832,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c == toUpper(c) && c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tcount += c - 'A' + 1;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122832,
      "stdout": "",
      "stderr": "/tmp/tmp1q3iwv8l.d(13): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1q3iwv8l.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' || c == 'A')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'b' || c == 'B')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'c' || c == 'C')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'd' || c == 'D')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'e' || c == 'E')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'f' || c == 'F')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'g' || c == 'G')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'h' || c == 'H')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'i' || c == 'I')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'j' || c == 'J')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'k' || c == 'K')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'l' || c == 'L')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'm' || c == 'M')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'n' || c == 'N')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'o' || c == 'O')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'p' || c == 'P')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'q' || c == 'Q')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'r' || c == 'R')\n\t\t\t\tcount++;\n\t\t\telse if(c == 's' || c == 'S')\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122832,
      "stdout": "",
      "stderr": "/tmp/tmpzadhd40c.d(52): Error: found `unittest` instead of statement\n/tmp/tmpzadhd40c.d(60): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpzadhd40c.d(60): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzadhd40c.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tstr1 = toLower(str1);\n\tforeach(i, c; str1)\n\t{\n\t\tif(c == 'a' + i)\n\t\t\tcount++;\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122832,
      "stdout": "",
      "stderr": "/tmp/tmpq5vv88gy.d(11): Error: undefined identifier `toLower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq5vv88gy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517293,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3lgd587t.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmp3lgd587t.__unittest_L30_C1() [0x427af6]\n??:? void tmp3lgd587t.__modtest() [0x427b60]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' || c == 'A')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'b' || c == 'B')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'c' || c == 'C')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'd' || c == 'D')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'e' || c == 'E')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'f' || c == 'F')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'g' || c == 'G')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'h' || c == 'H')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'i' || c == 'I')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'j' || c == 'J')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'k' || c == 'K')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'l' || c == 'L')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'm' || c == 'M')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'n' || c == 'N')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'o' || c == 'O')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'p' || c == 'P')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'q' || c == 'Q')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'r' || c == 'R')\n\t\t\t\tcount++;\n\t\t\telse if(c == 's' || c == 'S')\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122832,
      "stdout": "",
      "stderr": "/tmp/tmpzadhd40c.d(52): Error: found `unittest` instead of statement\n/tmp/tmpzadhd40c.d(60): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpzadhd40c.d(60): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzadhd40c.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c - 'a' == count)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c - 'A' == count)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122832,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpw_67jct6.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427dbd]\n??:? void tmpw_67jct6.__unittest_L30_C1() [0x427ad6]\n??:? void tmpw_67jct6.__modtest() [0x427b40]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bae3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a976]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb09]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa95]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a94d]\n??:? runModuleUnitTests [0x42b8b9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42820c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' + count)\n\t\t\t\tcount++;\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' + count)\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517293,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpfu2hn4om.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmpfu2hn4om.__unittest_L26_C1() [0x427ae2]\n??:? void tmpfu2hn4om.__modtest() [0x427b4c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(i, c; str1)\n\t{\n\t\tif(i == toLower(c) - 'a')\n\t\t\tcount++;\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517293,
      "stdout": "",
      "stderr": "/tmp/tmpgilq_j6h.d(13): Error: undefined identifier `toLower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgilq_j6h.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' + (c - 'a'))\n\t\t\t\tcount++;\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' + (c - 'A'))\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517293,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpdq_4yxtm.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427dad]\n??:? void tmpdq_4yxtm.__unittest_L26_C1() [0x427ac6]\n??:? void tmpdq_4yxtm.__modtest() [0x427b30]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bad3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a966]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42faf9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffa8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa85]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a93d]\n??:? runModuleUnitTests [0x42b8a9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281fc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c == toLower(c) && c == toLower('a' + count))\n\t\t\tcount++;\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122832,
      "stdout": "",
      "stderr": "/tmp/tmp7yoo14gn.d(13): Error: undefined identifier `toLower`\n/tmp/tmp7yoo14gn.d(13): Error: undefined identifier `toLower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7yoo14gn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' + count)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' + count)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122832,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpcbrplyw8.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmpcbrplyw8.__unittest_L30_C1() [0x427ae2]\n??:? void tmpcbrplyw8.__modtest() [0x427b4c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c.toLower() == (cast(char)('a' + count)))\n\t\t\tcount++;\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122832,
      "stdout": "",
      "stderr": "/tmp/tmpps3_mr6d.d(13): Error: no property `toLower` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpps3_mr6d.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' + (c - 'a'))\n\t\t\t\tcount++;\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' + (c - 'A'))\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517293,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpdq_4yxtm.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427dad]\n??:? void tmpdq_4yxtm.__unittest_L26_C1() [0x427ac6]\n??:? void tmpdq_4yxtm.__modtest() [0x427b30]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bad3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a966]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42faf9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffa8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa85]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a93d]\n??:? runModuleUnitTests [0x42b8a9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281fc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(i, c; str1)\n\t{\n\t\tif(i == toLower(c) - 'a')\n\t\t\tcount++;\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517293,
      "stdout": "",
      "stderr": "/tmp/tmpgilq_j6h.d(13): Error: undefined identifier `toLower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgilq_j6h.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' + count)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' + count)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517293,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpzkybtklb.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmpzkybtklb.__unittest_L30_C1() [0x427ae2]\n??:? void tmpzkybtklb.__modtest() [0x427b4c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517293,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpu91qpkin.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmpu91qpkin.__unittest_L30_C1() [0x427af6]\n??:? void tmpu91qpkin.__modtest() [0x427b60]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' + count)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' + count)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517293,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpzkybtklb.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmpzkybtklb.__unittest_L30_C1() [0x427ae2]\n??:? void tmpzkybtklb.__modtest() [0x427b4c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(i, c; str1)\n\t{\n\t\tif(c == toLower(cast(char)(i + 97)))\n\t\t\tcount++;\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122832,
      "stdout": "",
      "stderr": "/tmp/tmpforhl8_f.d(13): Error: undefined identifier `toLower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpforhl8_f.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' + count)\n\t\t\t\tcount++;\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' + count)\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517293,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpfu2hn4om.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmpfu2hn4om.__unittest_L26_C1() [0x427ae2]\n??:? void tmpfu2hn4om.__modtest() [0x427b4c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(char ch; str1)\n\t{\n\t\tif(ch >= 'a' && ch <= 'z')\n\t\t{\n\t\t\tif(ch == 'a' || ch == 'A')\n\t\t\t\tcount++;\n\t\t\telse if(ch == 'b' || ch == 'B')\n\t\t\t\tcount++;\n\t\t\telse if(ch == 'c' || ch == 'C')\n\t\t\t\tcount++;\n\t\t\telse if(ch == 'd' || ch == 'D')\n\t\t\t\tcount++;\n\t\t\telse if(ch == 'e' || ch == 'E')\n\t\t\t\tcount++;\n\t\t\telse if(ch == 'f' || ch == 'F')\n\t\t\t\tcount++;\n\t\t\telse if(ch == 'g' || ch == 'G')\n\t\t\t\tcount++;\n\t\t\telse if(ch == 'h' || ch == 'H')\n\t\t\t\tcount++;\n\t\t\telse if(ch == 'i' || ch == 'I')\n\t\t\t\tcount++;\n\t\t\telse if(ch == 'j' || ch == 'J')\n\t\t\t\tcount++;\n\t\t\telse if(ch == 'k' || ch == 'K')\n\t\t\t\tcount++;\n\t\t\telse if(ch == 'l' || ch == 'L')\n\t\t\t\tcount++;\n\t\t\telse if(ch == 'm' || ch == 'M')\n\t\t\t\tcount++;\n\t\t\telse if(ch == 'n' || ch == 'N')\n\t\t\t\tcount++;\n\t\t\telse if(ch == 'o' || ch == 'O')\n\t\t\t\tcount++;\n\t\t\telse if(ch == 'p' || ch == 'P')\n\t\t\t\tcount++;\n\t\t\telse if(ch == 'q' || ch == 'Q')\n\t\t\t\tcount++;\n\t\t\telse if(ch == 'r' || ch == 'R')\n\t\t\t\tcount++;\n\t\t\telse if(ch == 's' || ch == 'S')\n\t\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122832,
      "stdout": "",
      "stderr": "/tmp/tmpw_go_ahm.d(53): Error: found `unittest` instead of statement\n/tmp/tmpw_go_ahm.d(61): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpw_go_ahm.d(61): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw_go_ahm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c - 'a' == count)\n\t\t\t\tcount++;\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c - 'A' == count)\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517293,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5uh3h_3r.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427dbd]\n??:? void tmp5uh3h_3r.__unittest_L26_C1() [0x427ad6]\n??:? void tmp5uh3h_3r.__modtest() [0x427b40]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bae3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a976]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb09]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa95]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a94d]\n??:? runModuleUnitTests [0x42b8b9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42820c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c - 'a' == count)\n\t\t\t\tcount++;\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c - 'A' == count)\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517293,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5uh3h_3r.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427dbd]\n??:? void tmp5uh3h_3r.__unittest_L26_C1() [0x427ad6]\n??:? void tmp5uh3h_3r.__modtest() [0x427b40]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bae3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a976]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb09]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa95]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a94d]\n??:? runModuleUnitTests [0x42b8b9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42820c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' + count)\n\t\t\t\tcount++;\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' + count)\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517293,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpfu2hn4om.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmpfu2hn4om.__unittest_L26_C1() [0x427ae2]\n??:? void tmpfu2hn4om.__modtest() [0x427b4c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' + count)\n\t\t\t\tcount++;\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' + count)\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517293,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmplsskyp1a.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmplsskyp1a.__unittest_L26_C1() [0x427ae2]\n??:? void tmplsskyp1a.__modtest() [0x427b4c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' + (count % 26))\n\t\t\t\tcount++;\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' + (count % 26))\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122832,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp16tkk5fz.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmp16tkk5fz.__unittest_L26_C1() [0x427af6]\n??:? void tmp16tkk5fz.__modtest() [0x427b60]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' + (count % 26))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' + (count % 26))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122832,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp0t9_q_fr.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmp0t9_q_fr.__unittest_L30_C1() [0x427af6]\n??:? void tmp0t9_q_fr.__modtest() [0x427b60]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1) \n\t{\n\t\tif(c.tolower() == c.tolower().to!int.to!char)\n\t\t\tcount++;\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122832,
      "stdout": "",
      "stderr": "/tmp/tmpt9oqw8kb.d(13): Error: no property `tolower` for type `immutable(char)`\n/tmp/tmpt9oqw8kb.d(13): Error: no property `tolower` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt9oqw8kb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c - 'a' == count)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c - 'A' == count)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122832,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpw_67jct6.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427dbd]\n??:? void tmpw_67jct6.__unittest_L30_C1() [0x427ad6]\n??:? void tmpw_67jct6.__modtest() [0x427b40]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bae3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a976]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb09]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa95]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a94d]\n??:? runModuleUnitTests [0x42b8b9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42820c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' + count)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' + count)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517293,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpzkybtklb.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmpzkybtklb.__unittest_L30_C1() [0x427ae2]\n??:? void tmpzkybtklb.__modtest() [0x427b4c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' + count)\n\t\t\t\tcount++;\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' + count)\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517293,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpfu2hn4om.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmpfu2hn4om.__unittest_L26_C1() [0x427ae2]\n??:? void tmpfu2hn4om.__modtest() [0x427b4c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c - 'a' == count)\n\t\t\t\tcount++;\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c - 'A' == count)\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517293,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5uh3h_3r.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427dbd]\n??:? void tmp5uh3h_3r.__unittest_L26_C1() [0x427ad6]\n??:? void tmp5uh3h_3r.__modtest() [0x427b40]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bae3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a976]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb09]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa95]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a94d]\n??:? runModuleUnitTests [0x42b8b9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42820c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c - 'a' == count)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c - 'A' == count)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122832,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpw_67jct6.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427dbd]\n??:? void tmpw_67jct6.__unittest_L30_C1() [0x427ad6]\n??:? void tmpw_67jct6.__modtest() [0x427b40]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bae3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a976]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb09]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa95]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a94d]\n??:? runModuleUnitTests [0x42b8b9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42820c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' || c == 'A')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'b' || c == 'B')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'c' || c == 'C')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'd' || c == 'D')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'e' || c == 'E')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'f' || c == 'F')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'g' || c == 'G')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'h' || c == 'H')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'i' || c == 'I')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'j' || c == 'J')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'k' || c == 'K')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'l' || c == 'L')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'm' || c == 'M')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'n' || c == 'N')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'o' || c == 'O')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'p' || c == 'P')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'q' || c == 'Q')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'r' || c == 'R')\n\t\t\t\tcount++;\n\t\t\telse if(c == 's' || c == 'S')\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122832,
      "stdout": "",
      "stderr": "/tmp/tmpzadhd40c.d(52): Error: found `unittest` instead of statement\n/tmp/tmpzadhd40c.d(60): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpzadhd40c.d(60): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzadhd40c.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' + (c - 'a'))\n\t\t\t\tcount++;\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' + (c - 'A'))\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517293,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpdq_4yxtm.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427dad]\n??:? void tmpdq_4yxtm.__unittest_L26_C1() [0x427ac6]\n??:? void tmpdq_4yxtm.__modtest() [0x427b30]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bad3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a966]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42faf9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffa8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa85]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a93d]\n??:? runModuleUnitTests [0x42b8a9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281fc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c - 'a' == count)\n\t\t\t\tcount++;\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c - 'A' == count)\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122832,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp9tqr5yna.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427dbd]\n??:? void tmp9tqr5yna.__unittest_L26_C1() [0x427ad6]\n??:? void tmp9tqr5yna.__modtest() [0x427b40]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bae3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a976]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb09]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa95]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a94d]\n??:? runModuleUnitTests [0x42b8b9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42820c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c - 'a' == count)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c - 'A' == count)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122832,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpw_67jct6.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427dbd]\n??:? void tmpw_67jct6.__unittest_L30_C1() [0x427ad6]\n??:? void tmpw_67jct6.__modtest() [0x427b40]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bae3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a976]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb09]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa95]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a94d]\n??:? runModuleUnitTests [0x42b8b9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42820c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' || c == 'A')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tcount += abs(c - 'a');\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122832,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpevtmsr4j.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x427e05]\n??:? void tmpevtmsr4j.__unittest_L27_C1() [0x427b06]\n??:? void tmpevtmsr4j.__modtest() [0x427b84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb2b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9be]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb51]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430000]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fadd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a995]\n??:? runModuleUnitTests [0x42b901]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428254]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' + count)\n\t\t\t\tcount++;\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' + count)\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517293,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmplsskyp1a.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmplsskyp1a.__unittest_L26_C1() [0x427ae2]\n??:? void tmplsskyp1a.__modtest() [0x427b4c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' + (count % 26))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' + (count % 26))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122832,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp0t9_q_fr.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmp0t9_q_fr.__unittest_L30_C1() [0x427af6]\n??:? void tmp0t9_q_fr.__modtest() [0x427b60]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char ch; str1)\n\t{\n\t\tif(ch >= 'a' && ch <= 'z')\n\t\t{\n\t\t\tif(ch == 'a' + count)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(ch >= 'A' && ch <= 'Z')\n\t\t{\n\t\t\tif(ch == 'A' + count)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122832,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp_wlc9maf.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmp_wlc9maf.__unittest_L30_C1() [0x427ae2]\n??:? void tmp_wlc9maf.__modtest() [0x427b4c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c.toLower() == 'a' + count)\n\t\t\tcount++;\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122832,
      "stdout": "",
      "stderr": "/tmp/tmpq4h78gzu.d(13): Error: no property `toLower` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq4h78gzu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' + count)\n\t\t\t\tcount++;\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' + count)\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517293,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmplsskyp1a.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmplsskyp1a.__unittest_L26_C1() [0x427ae2]\n??:? void tmplsskyp1a.__modtest() [0x427b4c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' + count)\n\t\t\t\tcount++;\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' + count)\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517293,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpfu2hn4om.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmpfu2hn4om.__unittest_L26_C1() [0x427ae2]\n??:? void tmpfu2hn4om.__modtest() [0x427b4c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' || c == 'A')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'b' || c == 'B')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'c' || c == 'C')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'd' || c == 'D')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'e' || c == 'E')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'f' || c == 'F')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'g' || c == 'G')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'h' || c == 'H')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'i' || c == 'I')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'j' || c == 'J')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'k' || c == 'K')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'l' || c == 'L')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'm' || c == 'M')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'n' || c == 'N')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'o' || c == 'O')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'p' || c == 'P')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'q' || c == 'Q')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'r' || c == 'R')\n\t\t\t\tcount++;\n\t\t\telse if(c == 's' || c == 'S')\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122832,
      "stdout": "",
      "stderr": "/tmp/tmpzadhd40c.d(52): Error: found `unittest` instead of statement\n/tmp/tmpzadhd40c.d(60): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpzadhd40c.d(60): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzadhd40c.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517293,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpu91qpkin.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmpu91qpkin.__unittest_L30_C1() [0x427af6]\n??:? void tmpu91qpkin.__modtest() [0x427b60]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(char c; str1)\n\t{\n\t\tif(c == toUpper(c) && c == toLower(c))\n\t\t\tcontinue;\n\t\tif(c == toUpper(c))\n\t\t{\n\t\t\tif(c == 'A' + count)\n\t\t\t\tcount++;\n\t\t}\n\t\telse if(c == toLower(c))\n\t\t{\n\t\t\tif(c == 'a' + count)\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122832,
      "stdout": "",
      "stderr": "/tmp/tmpldd393xa.d(13): Error: undefined identifier `toUpper`\n/tmp/tmpldd393xa.d(13): Error: undefined identifier `toLower`\n/tmp/tmpldd393xa.d(15): Error: undefined identifier `toUpper`\n/tmp/tmpldd393xa.d(20): Error: undefined identifier `toLower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpldd393xa.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c - 'a' == count)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c - 'A' == count)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122832,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpw_67jct6.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427dbd]\n??:? void tmpw_67jct6.__unittest_L30_C1() [0x427ad6]\n??:? void tmpw_67jct6.__modtest() [0x427b40]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bae3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a976]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb09]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa95]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a94d]\n??:? runModuleUnitTests [0x42b8b9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42820c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' + count)\n\t\t\t\tcount++;\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' + count)\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517293,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpfu2hn4om.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmpfu2hn4om.__unittest_L26_C1() [0x427ae2]\n??:? void tmpfu2hn4om.__modtest() [0x427b4c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' || c == 'A')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'b' || c == 'B')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'c' || c == 'C')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'd' || c == 'D')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'e' || c == 'E')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'f' || c == 'F')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'g' || c == 'G')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'h' || c == 'H')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'i' || c == 'I')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'j' || c == 'J')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'k' || c == 'K')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'l' || c == 'L')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'm' || c == 'M')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'n' || c == 'N')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'o' || c == 'O')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'p' || c == 'P')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'q' || c == 'Q')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'r' || c == 'R')\n\t\t\t\tcount++;\n\t\t\telse if(c == 's' || c == 'S')\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122832,
      "stdout": "",
      "stderr": "/tmp/tmpzadhd40c.d(52): Error: found `unittest` instead of statement\n/tmp/tmpzadhd40c.d(60): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpzadhd40c.d(60): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzadhd40c.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' || c == 'A')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'b' || c == 'B')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'c' || c == 'C')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'd' || c == 'D')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'e' || c == 'E')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'f' || c == 'F')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'g' || c == 'G')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'h' || c == 'H')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'i' || c == 'I')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'j' || c == 'J')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'k' || c == 'K')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'l' || c == 'L')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'm' || c == 'M')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'n' || c == 'N')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'o' || c == 'O')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'p' || c == 'P')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'q' || c == 'Q')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'r' || c == 'R')\n\t\t\t\tcount++;\n\t\t\telse if(c == 's' || c == 'S')\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122832,
      "stdout": "",
      "stderr": "/tmp/tmpzadhd40c.d(52): Error: found `unittest` instead of statement\n/tmp/tmpzadhd40c.d(60): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpzadhd40c.d(60): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzadhd40c.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517293,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3lgd587t.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmp3lgd587t.__unittest_L30_C1() [0x427af6]\n??:? void tmp3lgd587t.__modtest() [0x427b60]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517293,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpu91qpkin.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmpu91qpkin.__unittest_L30_C1() [0x427af6]\n??:? void tmpu91qpkin.__modtest() [0x427b60]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' + count)\n\t\t\t\tcount++;\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' + count)\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517293,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmplsskyp1a.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmplsskyp1a.__unittest_L26_C1() [0x427ae2]\n??:? void tmplsskyp1a.__modtest() [0x427b4c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c - 'a' == count)\n\t\t\t\tcount++;\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c - 'A' == count)\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517293,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5uh3h_3r.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427dbd]\n??:? void tmp5uh3h_3r.__unittest_L26_C1() [0x427ad6]\n??:? void tmp5uh3h_3r.__modtest() [0x427b40]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bae3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a976]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb09]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa95]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a94d]\n??:? runModuleUnitTests [0x42b8b9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42820c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c - 'a' == count)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c - 'A' == count)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122832,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmphtbdevtq.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427dbd]\n??:? void tmphtbdevtq.__unittest_L30_C1() [0x427ad6]\n??:? void tmphtbdevtq.__modtest() [0x427b40]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bae3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a976]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb09]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa95]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a94d]\n??:? runModuleUnitTests [0x42b8b9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42820c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' + count)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' + count)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517293,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpzkybtklb.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmpzkybtklb.__unittest_L30_C1() [0x427ae2]\n??:? void tmpzkybtklb.__modtest() [0x427b4c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517293,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3lgd587t.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmp3lgd587t.__unittest_L30_C1() [0x427af6]\n??:? void tmp3lgd587t.__modtest() [0x427b60]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' + count)\n\t\t\t\tcount++;\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' + count)\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517293,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmplsskyp1a.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmplsskyp1a.__unittest_L26_C1() [0x427ae2]\n??:? void tmplsskyp1a.__modtest() [0x427b4c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(i, c; str1)\n\t{\n\t\tif (c == to!string(i + 1))\n\t\t\tcount++;\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122832,
      "stdout": "",
      "stderr": "/tmp/tmpjwioenqs.d(13): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjwioenqs.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517293,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3lgd587t.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmp3lgd587t.__unittest_L30_C1() [0x427af6]\n??:? void tmp3lgd587t.__modtest() [0x427b60]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' + count)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' + count)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517293,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpzkybtklb.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmpzkybtklb.__unittest_L30_C1() [0x427ae2]\n??:? void tmpzkybtklb.__modtest() [0x427b4c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' + count)\n\t\t\t\tcount++;\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' + count)\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517293,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmplsskyp1a.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmplsskyp1a.__unittest_L26_C1() [0x427ae2]\n??:? void tmplsskyp1a.__modtest() [0x427b4c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' + count)\n\t\t\t\tcount++;\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' + count)\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517293,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpfu2hn4om.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmpfu2hn4om.__unittest_L26_C1() [0x427ae2]\n??:? void tmpfu2hn4om.__modtest() [0x427b4c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' + count)\n\t\t\t\tcount++;\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' + count)\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517293,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmplsskyp1a.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmplsskyp1a.__unittest_L26_C1() [0x427ae2]\n??:? void tmplsskyp1a.__modtest() [0x427b4c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c - 'a' == count)\n\t\t\t\tcount++;\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c - 'A' == count)\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517293,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5uh3h_3r.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427dbd]\n??:? void tmp5uh3h_3r.__unittest_L26_C1() [0x427ad6]\n??:? void tmp5uh3h_3r.__modtest() [0x427b40]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bae3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a976]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb09]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa95]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a94d]\n??:? runModuleUnitTests [0x42b8b9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42820c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' + count)\n\t\t\t\tcount++;\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' + count)\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517293,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmplsskyp1a.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmplsskyp1a.__unittest_L26_C1() [0x427ae2]\n??:? void tmplsskyp1a.__modtest() [0x427b4c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach (i, c; str1) \n\t{\n\t\tif (c >= 'a' && c <= 'z') \n\t\t{\n\t\t\tif (i == c - 'a') \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if (c >= 'A' && c <= 'Z') \n\t\t{\n\t\t\tif (i == c - 'A') \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122832,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c - 'a' == count)\n\t\t\t\tcount++;\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c - 'A' == count)\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517293,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5uh3h_3r.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427dbd]\n??:? void tmp5uh3h_3r.__unittest_L26_C1() [0x427ad6]\n??:? void tmp5uh3h_3r.__modtest() [0x427b40]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bae3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a976]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb09]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa95]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a94d]\n??:? runModuleUnitTests [0x42b8b9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42820c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' + (count % 26))\n\t\t\t\tcount++;\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' + (count % 26))\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122832,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpccmwnkwr.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmpccmwnkwr.__unittest_L26_C1() [0x427af6]\n??:? void tmpccmwnkwr.__modtest() [0x427b60]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' + (count % 26))\n\t\t\t\tcount++;\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' + (count % 26))\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122832,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp16tkk5fz.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmp16tkk5fz.__unittest_L26_C1() [0x427af6]\n??:? void tmp16tkk5fz.__modtest() [0x427b60]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(i, c; str1)\n\t{\n\t\tif(i == toLower(c) - 'a')\n\t\t\tcount++;\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517293,
      "stdout": "",
      "stderr": "/tmp/tmpgilq_j6h.d(13): Error: undefined identifier `toLower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgilq_j6h.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(char c; str1) \n\t{\n\t\tif(c >= 'a' && c <= 'z') \n\t\t{\n\t\t\tif(c == 'a' + count) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z') \n\t\t{\n\t\t\tif(c == 'A' + count) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122832,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpcxlrdo39.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmpcxlrdo39.__unittest_L30_C1() [0x427ae2]\n??:? void tmpcxlrdo39.__modtest() [0x427b4c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char ch; str1)\n\t{\n\t\tif(ch >= 'a' && ch <= 'z')\n\t\t{\n\t\t\tif(ch == 'a' || ch == 'A')\n\t\t\t\tcount++;\n\t\t\telse if(ch == 'b' || ch == 'B')\n\t\t\t\tcount++;\n\t\t\telse if(ch == 'c' || ch == 'C')\n\t\t\t\tcount++;\n\t\t\telse if(ch == 'd' || ch == 'D')\n\t\t\t\tcount++;\n\t\t\telse if(ch == 'e' || ch == 'E')\n\t\t\t\tcount++;\n\t\t\telse if(ch == 'f' || ch == 'F')\n\t\t\t\tcount++;\n\t\t\telse if(ch == 'g' || ch == 'G')\n\t\t\t\tcount++;\n\t\t\telse if(ch == 'h' || ch == 'H')\n\t\t\t\tcount++;\n\t\t\telse if(ch == 'i' || ch == 'I')\n\t\t\t\tcount++;\n\t\t\telse if(ch == 'j' || ch == 'J')\n\t\t\t\tcount++;\n\t\t\telse if(ch == 'k' || ch == 'K')\n\t\t\t\tcount++;\n\t\t\telse if(ch == 'l' || ch == 'L')\n\t\t\t\tcount++;\n\t\t\telse if(ch == 'm' || ch == 'M')\n\t\t\t\tcount++;\n\t\t\telse if(ch == 'n' || ch == 'N')\n\t\t\t\tcount++;\n\t\t\telse if(ch == 'o' || ch == 'O')\n\t\t\t\tcount++;\n\t\t\telse if(ch == 'p' || ch == 'P')\n\t\t\t\tcount++;\n\t\t\telse if(ch == 'q' || ch == 'Q')\n\t\t\t\tcount++;\n\t\t\telse if(ch == 'r' || ch == 'R')\n\t\t\t\tcount++;\n\t\t\telse if(ch == 's' || ch == 'S')\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122832,
      "stdout": "",
      "stderr": "/tmp/tmpkko5f4wr.d(52): Error: found `unittest` instead of statement\n/tmp/tmpkko5f4wr.d(60): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpkko5f4wr.d(60): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkko5f4wr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122832,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp139mx50l.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmp139mx50l.__unittest_L30_C1() [0x427af6]\n??:? void tmp139mx50l.__modtest() [0x427b60]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517293,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3lgd587t.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmp3lgd587t.__unittest_L30_C1() [0x427af6]\n??:? void tmp3lgd587t.__modtest() [0x427b60]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c - 'a' == count)\n\t\t\t\tcount++;\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c - 'A' == count)\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517293,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5uh3h_3r.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427dbd]\n??:? void tmp5uh3h_3r.__unittest_L26_C1() [0x427ad6]\n??:? void tmp5uh3h_3r.__modtest() [0x427b40]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bae3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a976]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb09]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa95]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a94d]\n??:? runModuleUnitTests [0x42b8b9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42820c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517293,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3lgd587t.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmp3lgd587t.__unittest_L30_C1() [0x427af6]\n??:? void tmp3lgd587t.__modtest() [0x427b60]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable i, immutable c; str1)\n\t{\n\t\tif(i == toLower(c) - 'a')\n\t\t\tcount++;\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122832,
      "stdout": "",
      "stderr": "/tmp/tmp2qwh3m7x.d(13): Error: undefined identifier `toLower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2qwh3m7x.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tint count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' + count)\n\t\t\t\tcount++;\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' + count)\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122832,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp09ijk0j5.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427dbd]\n??:? void tmp09ijk0j5.__unittest_L26_C1() [0x427ad2]\n??:? void tmp09ijk0j5.__modtest() [0x427b3c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bae3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a976]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb09]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa95]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a94d]\n??:? runModuleUnitTests [0x42b8b9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42820c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' + (count % 26))\n\t\t\t\tcount++;\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' + (count % 26))\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122832,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpccmwnkwr.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmpccmwnkwr.__unittest_L26_C1() [0x427af6]\n??:? void tmpccmwnkwr.__modtest() [0x427b60]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517293,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3lgd587t.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmp3lgd587t.__unittest_L30_C1() [0x427af6]\n??:? void tmp3lgd587t.__modtest() [0x427b60]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c - 'a' == count)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c - 'A' == count)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122832,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpw_67jct6.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427dbd]\n??:? void tmpw_67jct6.__unittest_L30_C1() [0x427ad6]\n??:? void tmpw_67jct6.__modtest() [0x427b40]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bae3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a976]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb09]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa95]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a94d]\n??:? runModuleUnitTests [0x42b8b9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42820c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char ch; str1)\n\t{\n\t\tif(ch >= 'a' && ch <= 'z')\n\t\t{\n\t\t\tif(ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(ch >= 'A' && ch <= 'Z')\n\t\t{\n\t\t\tif(ch == 'A' || ch == 'E' || ch == 'I' || ch == 'O' || ch == 'U')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122832,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpzih1h6ox.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmpzih1h6ox.__unittest_L30_C1() [0x427af6]\n??:? void tmpzih1h6ox.__modtest() [0x427b60]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' + count)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' + count)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122832,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpcbrplyw8.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmpcbrplyw8.__unittest_L30_C1() [0x427ae2]\n??:? void tmpcbrplyw8.__modtest() [0x427b4c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif (c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if (c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122832,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmplhc0v55z.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmplhc0v55z.__unittest_L30_C1() [0x427af6]\n??:? void tmplhc0v55z.__modtest() [0x427b60]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' + count)\n\t\t\t\tcount++;\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' + count)\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517293,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmplsskyp1a.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmplsskyp1a.__unittest_L26_C1() [0x427ae2]\n??:? void tmplsskyp1a.__modtest() [0x427b4c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' + count)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' + count)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517293,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpzkybtklb.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmpzkybtklb.__unittest_L30_C1() [0x427ae2]\n??:? void tmpzkybtklb.__modtest() [0x427b4c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c - 'a' == count)\n\t\t\t\tcount++;\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c - 'A' == count)\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517293,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5uh3h_3r.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427dbd]\n??:? void tmp5uh3h_3r.__unittest_L26_C1() [0x427ad6]\n??:? void tmp5uh3h_3r.__modtest() [0x427b40]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bae3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a976]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb09]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa95]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a94d]\n??:? runModuleUnitTests [0x42b8b9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42820c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(i, c; str1)\n\t{\n\t\tif(i == toLower(c) - 'a')\n\t\t\tcount++;\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517293,
      "stdout": "",
      "stderr": "/tmp/tmpgilq_j6h.d(13): Error: undefined identifier `toLower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgilq_j6h.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(i, c; str1)\n\t{\n\t\tif(c == 'a' + i || c == 'A' + i)\n\t\t\tcount++;\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517293,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517293,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3lgd587t.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmp3lgd587t.__unittest_L30_C1() [0x427af6]\n??:? void tmp3lgd587t.__modtest() [0x427b60]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(i, c; str1)\n\t{\n\t\tif (i == toLower(c) - 'a')\n\t\t\tcount++;\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122832,
      "stdout": "",
      "stderr": "/tmp/tmpxjzeptbj.d(13): Error: undefined identifier `toLower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxjzeptbj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(i, c; str1)\n\t{\n\t\tif(tolower(c) == tolower('a' + i))\n\t\t\tcount++;\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122832,
      "stdout": "",
      "stderr": "/tmp/tmpodg3d9uh.d(13): Error: undefined identifier `tolower`\n/tmp/tmpodg3d9uh.d(13): Error: undefined identifier `tolower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpodg3d9uh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517293,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpu91qpkin.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmpu91qpkin.__unittest_L30_C1() [0x427af6]\n??:? void tmpu91qpkin.__modtest() [0x427b60]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c == toUpper(c) && c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' + count)\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122832,
      "stdout": "",
      "stderr": "/tmp/tmpjvbkvdol.d(13): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjvbkvdol.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' || c == 'A')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'b' || c == 'B')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'c' || c == 'C')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'd' || c == 'D')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'e' || c == 'E')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'f' || c == 'F')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'g' || c == 'G')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'h' || c == 'H')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'i' || c == 'I')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'j' || c == 'J')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'k' || c == 'K')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'l' || c == 'L')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'm' || c == 'M')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'n' || c == 'N')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'o' || c == 'O')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'p' || c == 'P')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'q' || c == 'Q')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'r' || c == 'R')\n\t\t\t\tcount++;\n\t\t\telse if(c == 's' || c == 'S')\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122832,
      "stdout": "",
      "stderr": "/tmp/tmpzadhd40c.d(52): Error: found `unittest` instead of statement\n/tmp/tmpzadhd40c.d(60): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpzadhd40c.d(60): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzadhd40c.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' + count)\n\t\t\t\tcount++;\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' + count)\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517293,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpfu2hn4om.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmpfu2hn4om.__unittest_L26_C1() [0x427ae2]\n??:? void tmpfu2hn4om.__modtest() [0x427b4c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517293,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3lgd587t.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmp3lgd587t.__unittest_L30_C1() [0x427af6]\n??:? void tmp3lgd587t.__modtest() [0x427b60]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(i, c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(i == c - 'a')\n\t\t\t\tcount++;\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(i == c - 'A')\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122832,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' || c == 'A')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'b' || c == 'B')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'c' || c == 'C')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'd' || c == 'D')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'e' || c == 'E')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'f' || c == 'F')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'g' || c == 'G')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'h' || c == 'H')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'i' || c == 'I')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'j' || c == 'J')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'k' || c == 'K')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'l' || c == 'L')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'm' || c == 'M')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'n' ||\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122832,
      "stdout": "",
      "stderr": "/tmp/tmp5njt7v_z.d(68): Error: expression expected, not `unittest`\n/tmp/tmp5njt7v_z.d(69): Error: found `{` when expecting `)`\n/tmp/tmp5njt7v_z.d(76): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp5njt7v_z.d(76): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5njt7v_z.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c - 'a' == count)\n\t\t\t\tcount++;\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c - 'A' == count)\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517293,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5uh3h_3r.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427dbd]\n??:? void tmp5uh3h_3r.__unittest_L26_C1() [0x427ad6]\n??:? void tmp5uh3h_3r.__modtest() [0x427b40]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bae3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a976]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb09]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa95]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a94d]\n??:? runModuleUnitTests [0x42b8b9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42820c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(i, c; str1)\n\t{\n\t\tif(c.toLower() == i.toLower())\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122832,
      "stdout": "",
      "stderr": "/tmp/tmpcxqkd690.d(13): Error: no property `toLower` for type `immutable(char)`\n/tmp/tmpcxqkd690.d(13): Error: no property `toLower` for type `ulong`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcxqkd690.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(char c; str1)\n\t{\n\t\tif(c == toLower(c) && c == toLower('a' + count))\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122832,
      "stdout": "",
      "stderr": "/tmp/tmpqt2ald04.d(13): Error: undefined identifier `toLower`\n/tmp/tmpqt2ald04.d(13): Error: undefined identifier `toLower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqt2ald04.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c.toLower() == 'a' + count)\n\t\t\tcount++;\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122832,
      "stdout": "",
      "stderr": "/tmp/tmpq4h78gzu.d(13): Error: no property `toLower` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq4h78gzu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' || c == 'A')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'b' || c == 'B')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'c' || c == 'C')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'd' || c == 'D')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'e' || c == 'E')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'f' || c == 'F')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'g' || c == 'G')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'h' || c == 'H')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'i' || c == 'I')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'j' || c == 'J')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'k' || c == 'K')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'l' || c == 'L')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'm' || c == 'M')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'n' || c == 'N')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'o' || c == 'O')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'p' || c == 'P')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'q' || c == 'Q')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'r' || c == 'R')\n\t\t\t\tcount++;\n\t\t\telse if(c == 's' || c == 'S')\n\t\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122832,
      "stdout": "",
      "stderr": "/tmp/tmp_0tx9vql.d(53): Error: found `unittest` instead of statement\n/tmp/tmp_0tx9vql.d(61): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp_0tx9vql.d(61): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_0tx9vql.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' + count)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' + count)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517293,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpzkybtklb.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmpzkybtklb.__unittest_L30_C1() [0x427ae2]\n??:? void tmpzkybtklb.__modtest() [0x427b4c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(char c; str1)\n\t{\n\t\tif(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' + count)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' + count)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122833,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpkq9p9h2m.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmpkq9p9h2m.__unittest_L30_C1() [0x427ae2]\n??:? void tmpkq9p9h2m.__modtest() [0x427b4c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach (i, c; str1)\n\t{\n\t\tif (i == toLower(c) - 'a')\n\t\t\tcount++;\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122832,
      "stdout": "",
      "stderr": "/tmp/tmpzy4yzird.d(13): Error: undefined identifier `toLower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzy4yzird.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' + count)\n\t\t\t\tcount++;\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' + count)\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517293,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpfu2hn4om.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmpfu2hn4om.__unittest_L26_C1() [0x427ae2]\n??:? void tmpfu2hn4om.__modtest() [0x427b4c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' || c == 'A')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'b' || c == 'B')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'c' || c == 'C')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'd' || c == 'D')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'e' || c == 'E')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'f' || c == 'F')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'g' || c == 'G')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'h' || c == 'H')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'i' || c == 'I')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'j' || c == 'J')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'k' || c == 'K')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'l' || c == 'L')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'm' || c == 'M')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'n' || c == 'N')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'o' || c == 'O')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'p' || c == 'P')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'q' || c == 'Q')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'r' || c == 'R')\n\t\t\t\tcount++;\n\t\t\telse if(c == 's' || c == 'S')\n\t\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122832,
      "stdout": "",
      "stderr": "/tmp/tmp_0tx9vql.d(53): Error: found `unittest` instead of statement\n/tmp/tmp_0tx9vql.d(61): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp_0tx9vql.d(61): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_0tx9vql.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c - 'a' == count)\n\t\t\t\tcount++;\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c - 'A' == count)\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517293,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5uh3h_3r.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427dbd]\n??:? void tmp5uh3h_3r.__unittest_L26_C1() [0x427ad6]\n??:? void tmp5uh3h_3r.__modtest() [0x427b40]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bae3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a976]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb09]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa95]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a94d]\n??:? runModuleUnitTests [0x42b8b9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42820c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(i, c; str1)\n\t{\n\t\tif(c == 'a'+i || c == 'A'+i)\n\t\t\tcount++;\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122833,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' + count)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' + count)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517293,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpzkybtklb.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmpzkybtklb.__unittest_L30_C1() [0x427ae2]\n??:? void tmpzkybtklb.__modtest() [0x427b4c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' + count)\n\t\t\t\tcount++;\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' + count)\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517293,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpfu2hn4om.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmpfu2hn4om.__unittest_L26_C1() [0x427ae2]\n??:? void tmpfu2hn4om.__modtest() [0x427b4c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(i, c; str1)\n\t{\n\t\tif(i == toLower(c) - 'a')\n\t\t\tcount++;\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517293,
      "stdout": "",
      "stderr": "/tmp/tmpgilq_j6h.d(13): Error: undefined identifier `toLower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgilq_j6h.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517293,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3lgd587t.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmp3lgd587t.__unittest_L30_C1() [0x427af6]\n??:? void tmp3lgd587t.__modtest() [0x427b60]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' + (c - 'a'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' + (c - 'A'))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122833,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpo8_j4j5_.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427dad]\n??:? void tmpo8_j4j5_.__unittest_L30_C1() [0x427ac6]\n??:? void tmpo8_j4j5_.__modtest() [0x427b30]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bad3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a966]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42faf9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffa8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa85]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a93d]\n??:? runModuleUnitTests [0x42b8a9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281fc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' + (c - 'a'))\n\t\t\t\tcount++;\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' + (c - 'A'))\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122833,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp28jkzyh6.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427dad]\n??:? void tmp28jkzyh6.__unittest_L26_C1() [0x427ac6]\n??:? void tmp28jkzyh6.__modtest() [0x427b30]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bad3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a966]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42faf9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffa8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa85]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a93d]\n??:? runModuleUnitTests [0x42b8a9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281fc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' + count)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' + count)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122832,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpcbrplyw8.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmpcbrplyw8.__unittest_L30_C1() [0x427ae2]\n??:? void tmpcbrplyw8.__modtest() [0x427b4c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' + count)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' + count)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122832,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpcbrplyw8.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmpcbrplyw8.__unittest_L30_C1() [0x427ae2]\n??:? void tmpcbrplyw8.__modtest() [0x427b4c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c - 'a' == count)\n\t\t\t\tcount++;\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c - 'A' == count)\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517293,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5uh3h_3r.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427dbd]\n??:? void tmp5uh3h_3r.__unittest_L26_C1() [0x427ad6]\n??:? void tmp5uh3h_3r.__modtest() [0x427b40]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bae3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a976]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb09]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa95]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a94d]\n??:? runModuleUnitTests [0x42b8b9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42820c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517293,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpu91qpkin.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmpu91qpkin.__unittest_L30_C1() [0x427af6]\n??:? void tmpu91qpkin.__modtest() [0x427b60]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(i, c; str1)\n\t{\n\t\tif(c == toLower(cast(char)(i + 97)))\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122832,
      "stdout": "",
      "stderr": "/tmp/tmpclc5ubch.d(13): Error: undefined identifier `toLower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpclc5ubch.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' + count)\n\t\t\t\tcount++;\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' + count)\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517293,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmplsskyp1a.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmplsskyp1a.__unittest_L26_C1() [0x427ae2]\n??:? void tmplsskyp1a.__modtest() [0x427b4c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' || c == 'A')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'b' || c == 'B')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'c' || c == 'C')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'd' || c == 'D')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'e' || c == 'E')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'f' || c == 'F')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'g' || c == 'G')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'h' || c == 'H')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'i' || c == 'I')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'j' || c == 'J')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'k' || c == 'K')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'l' || c == 'L')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'm' || c == 'M')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'n' || c == 'N')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'o' || c == 'O')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'p' || c == 'P')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'q' || c == 'Q')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'r' || c == 'R')\n\t\t\t\tcount++;\n\t\t\telse if(c == 's' || c == 'S')\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122832,
      "stdout": "",
      "stderr": "/tmp/tmpzadhd40c.d(52): Error: found `unittest` instead of statement\n/tmp/tmpzadhd40c.d(60): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpzadhd40c.d(60): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzadhd40c.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' || c == 'A')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'b' || c == 'B')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'c' || c == 'C')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'd' || c == 'D')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'e' || c == 'E')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'f' || c == 'F')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'g' || c == 'G')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'h' || c == 'H')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'i' || c == 'I')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'j' || c == 'J')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'k' || c == 'K')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'l' || c == 'L')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'm' || c == 'M')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'n' ||\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122832,
      "stdout": "",
      "stderr": "/tmp/tmp5njt7v_z.d(68): Error: expression expected, not `unittest`\n/tmp/tmp5njt7v_z.d(69): Error: found `{` when expecting `)`\n/tmp/tmp5njt7v_z.d(76): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp5njt7v_z.d(76): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5njt7v_z.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' + count)\n\t\t\t\tcount++;\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' + count)\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517293,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpfu2hn4om.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmpfu2hn4om.__unittest_L26_C1() [0x427ae2]\n??:? void tmpfu2hn4om.__modtest() [0x427b4c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' + count)\n\t\t\t\tcount++;\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' + count)\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517293,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmplsskyp1a.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmplsskyp1a.__unittest_L26_C1() [0x427ae2]\n??:? void tmplsskyp1a.__modtest() [0x427b4c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tint len = str1.length;\n\tint i = 0;\n\twhile(i < len)\n\t{\n\t\tif(str1[i] == 'a' || str1[i] == 'A')\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t\telse if(str1[i] == 'b' || str1[i] == 'B')\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t\telse if(str1[i] == 'c' || str1[i] == 'C')\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t\telse if(str1[i] == 'd' || str1[i] == 'D')\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t\telse if(str1[i] == 'e' || str1[i] == 'E')\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t\telse if(str1[i] == 'f' || str1[i] == 'F')\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t\telse if(str1[i] == 'g' || str1[i] == 'G')\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t\telse if(str1[i] == 'h' || str1[i] == 'H')\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t\telse if(str1[i] == 'i' || str1[i] == 'I')\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t\telse if(str1[i] == 'j' || str1[i] == 'J')\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t\telse if(str1[i] == 'k' || str1[i] == 'K')\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t\telse if(str1[i] == 'l' || str1[i] == 'L')\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t\telse if(str1\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122832,
      "stdout": "",
      "stderr": "/tmp/tmpr4kver60.d(64): Error: found `unittest` when expecting `)`\n/tmp/tmpr4kver60.d(72): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpr4kver60.d(72): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr4kver60.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' + count)\n\t\t\t\tcount++;\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' + count)\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517293,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmplsskyp1a.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmplsskyp1a.__unittest_L26_C1() [0x427ae2]\n??:? void tmplsskyp1a.__modtest() [0x427b4c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(c; str1)\n\t{\n\t\tif(c.toLower() == 'a' || c.toLower() == 'e' || c.toLower() == 'i' || c.toLower() == 'o' || c.toLower() == 'u')\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122832,
      "stdout": "",
      "stderr": "/tmp/tmpf7d9mizm.d(13): Error: no property `toLower` for type `immutable(char)`\n/tmp/tmpf7d9mizm.d(13): Error: no property `toLower` for type `immutable(char)`\n/tmp/tmpf7d9mizm.d(13): Error: no property `toLower` for type `immutable(char)`\n/tmp/tmpf7d9mizm.d(13): Error: no property `toLower` for type `immutable(char)`\n/tmp/tmpf7d9mizm.d(13): Error: no property `toLower` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf7d9mizm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(i, c; str1)\n\t{\n\t\tif(c == 'a' + i || c == 'A' + i)\n\t\t\tcount++;\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517293,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' + count)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' + count)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122832,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpcbrplyw8.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmpcbrplyw8.__unittest_L30_C1() [0x427ae2]\n??:? void tmpcbrplyw8.__modtest() [0x427b4c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' || c == 'A')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'b' || c == 'B')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'c' || c == 'C')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'd' || c == 'D')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'e' || c == 'E')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'f' || c == 'F')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'g' || c == 'G')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'h' || c == 'H')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'i' || c == 'I')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'j' || c == 'J')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'k' || c == 'K')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'l' || c == 'L')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'm' || c == 'M')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(c == 'n' ||\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122832,
      "stdout": "",
      "stderr": "/tmp/tmp5njt7v_z.d(68): Error: expression expected, not `unittest`\n/tmp/tmp5njt7v_z.d(69): Error: found `{` when expecting `)`\n/tmp/tmp5njt7v_z.d(76): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp5njt7v_z.d(76): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5njt7v_z.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tstring alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n\tforeach(immutable char c, immutable long i; str1)\n\t{\n\t\tif(i < alphabet.length)\n\t\t{\n\t\t\tif(tolower(c) == alphabet[i])\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122832,
      "stdout": "",
      "stderr": "/tmp/tmpawau2hkw.d(16): Error: undefined identifier `tolower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpawau2hkw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(i, c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(i == c - 'a')\n\t\t\t\tcount++;\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(i == c - 'A')\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122832,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' + count)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' + count)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517293,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpzkybtklb.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmpzkybtklb.__unittest_L30_C1() [0x427ae2]\n??:? void tmpzkybtklb.__modtest() [0x427b4c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\t\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122833,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpw46xhji8.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmpw46xhji8.__unittest_L31_C1() [0x427af6]\n??:? void tmpw46xhji8.__modtest() [0x427b60]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(i, c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(i == c - 'a')\n\t\t\t\tcount++;\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(i == c - 'A')\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122832,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' || c == 'A')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'b' || c == 'B')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'c' || c == 'C')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'd' || c == 'D')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'e' || c == 'E')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'f' || c == 'F')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'g' || c == 'G')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'h' || c == 'H')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'i' || c == 'I')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'j' || c == 'J')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'k' || c == 'K')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'l' || c == 'L')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'm' || c == 'M')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'n' || c == 'N')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'o' || c == 'O')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'p' || c == 'P')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'q' || c == 'Q')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'r' || c == 'R')\n\t\t\t\tcount++;\n\t\t\telse if(c == 's' || c == 'S')\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122832,
      "stdout": "",
      "stderr": "/tmp/tmpzadhd40c.d(52): Error: found `unittest` instead of statement\n/tmp/tmpzadhd40c.d(60): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpzadhd40c.d(60): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzadhd40c.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' + count)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' + count)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517293,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpzkybtklb.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmpzkybtklb.__unittest_L30_C1() [0x427ae2]\n??:? void tmpzkybtklb.__modtest() [0x427b4c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c == toLower(c))\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122832,
      "stdout": "",
      "stderr": "/tmp/tmp9qiojdwd.d(13): Error: undefined identifier `toLower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9qiojdwd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' + (count % 26))\n\t\t\t\tcount++;\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' + (count % 26))\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122832,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp16tkk5fz.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmp16tkk5fz.__unittest_L26_C1() [0x427af6]\n??:? void tmp16tkk5fz.__modtest() [0x427b60]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' || c == 'A')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'b' || c == 'B')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'c' || c == 'C')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'd' || c == 'D')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'e' || c == 'E')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'f' || c == 'F')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'g' || c == 'G')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'h' || c == 'H')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'i' || c == 'I')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'j' || c == 'J')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'k' || c == 'K')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'l' || c == 'L')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'm' || c == 'M')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'n' || c == 'N')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'o' || c == 'O')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'p' || c == 'P')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'q' || c == 'Q')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'r' || c == 'R')\n\t\t\t\tcount++;\n\t\t\telse if(c == 's' || c == 'S')\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122832,
      "stdout": "",
      "stderr": "/tmp/tmpzadhd40c.d(52): Error: found `unittest` instead of statement\n/tmp/tmpzadhd40c.d(60): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpzadhd40c.d(60): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzadhd40c.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517293,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpu91qpkin.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmpu91qpkin.__unittest_L30_C1() [0x427af6]\n??:? void tmpu91qpkin.__modtest() [0x427b60]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(i, c; str1)\n\t{\n\t\tif(c == toUpper(cast(char)(i + 65)))\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122832,
      "stdout": "",
      "stderr": "/tmp/tmp8cq6dwzl.d(13): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8cq6dwzl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' + count)\n\t\t\t\tcount++;\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' + count)\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517293,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmplsskyp1a.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmplsskyp1a.__unittest_L26_C1() [0x427ae2]\n??:? void tmplsskyp1a.__modtest() [0x427b4c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c.toLower() == 'a' + count)\n\t\t\tcount++;\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122832,
      "stdout": "",
      "stderr": "/tmp/tmpq4h78gzu.d(13): Error: no property `toLower` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq4h78gzu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\t\n\tforeach(i, c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z' && i == c - 'a')\n\t\t\tcount++;\n\t\tif(c >= 'A' && c <= 'Z' && i == c - 'A')\n\t\t\tcount++;\n\t}\n\t\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122833,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517293,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3lgd587t.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmp3lgd587t.__unittest_L30_C1() [0x427af6]\n??:? void tmp3lgd587t.__modtest() [0x427b60]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c - 'a' == count)\n\t\t\t\tcount++;\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c - 'A' == count)\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517293,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5uh3h_3r.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427dbd]\n??:? void tmp5uh3h_3r.__unittest_L26_C1() [0x427ad6]\n??:? void tmp5uh3h_3r.__modtest() [0x427b40]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bae3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a976]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb09]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa95]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a94d]\n??:? runModuleUnitTests [0x42b8b9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42820c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' + count)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' + count)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122832,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpcbrplyw8.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmpcbrplyw8.__unittest_L30_C1() [0x427ae2]\n??:? void tmpcbrplyw8.__modtest() [0x427b4c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c.toLower() == (cast(char)('a' + count)))\n\t\t\tcount++;\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122832,
      "stdout": "",
      "stderr": "/tmp/tmpps3_mr6d.d(13): Error: no property `toLower` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpps3_mr6d.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(char ch; str1)\n\t{\n\t\tif(ch >= 'a' && ch <= 'z')\n\t\t{\n\t\t\tif(ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(ch >= 'A' && ch <= 'Z')\n\t\t{\n\t\t\tif(ch == 'A' || ch == 'E' || ch == 'I' || ch == 'O' || ch == 'U')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122833,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpgub15jxz.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmpgub15jxz.__unittest_L30_C1() [0x427af6]\n??:? void tmpgub15jxz.__modtest() [0x427b60]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' + (c - 'a'))\n\t\t\t\tcount++;\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' + (c - 'A'))\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517293,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpdq_4yxtm.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427dad]\n??:? void tmpdq_4yxtm.__unittest_L26_C1() [0x427ac6]\n??:? void tmpdq_4yxtm.__modtest() [0x427b30]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bad3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a966]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42faf9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffa8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa85]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a93d]\n??:? runModuleUnitTests [0x42b8a9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281fc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' + count)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' + count)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122832,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpcbrplyw8.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmpcbrplyw8.__unittest_L30_C1() [0x427ae2]\n??:? void tmpcbrplyw8.__modtest() [0x427b4c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(i, c; str1)\n\t{\n\t\tif(c.toLower() == 'a' + i)\n\t\t\tcount++;\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122832,
      "stdout": "",
      "stderr": "/tmp/tmppgv_b_4t.d(13): Error: no property `toLower` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppgv_b_4t.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' + count)\n\t\t\t\tcount++;\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' + count)\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517293,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmplsskyp1a.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmplsskyp1a.__unittest_L26_C1() [0x427ae2]\n??:? void tmplsskyp1a.__modtest() [0x427b4c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c - 'a' == count)\n\t\t\t\tcount++;\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c - 'A' == count)\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122832,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp9tqr5yna.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427dbd]\n??:? void tmp9tqr5yna.__unittest_L26_C1() [0x427ad6]\n??:? void tmp9tqr5yna.__modtest() [0x427b40]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bae3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a976]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb09]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa95]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a94d]\n??:? runModuleUnitTests [0x42b8b9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42820c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(i, c; str1)\n\t{\n\t\tif(i == toLower(c) - 'a')\n\t\t\tcount++;\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517293,
      "stdout": "",
      "stderr": "/tmp/tmpgilq_j6h.d(13): Error: undefined identifier `toLower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgilq_j6h.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tint i = 0;\n\tforeach(c; str1)\n\t{\n\t\tif(c == to!string(i))\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t\ti++;\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122832,
      "stdout": "",
      "stderr": "/tmp/tmpr_56r6zw.d(14): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr_56r6zw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' || c == 'A')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'b' || c == 'B')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'c' || c == 'C')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'd' || c == 'D')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'e' || c == 'E')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'f' || c == 'F')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'g' || c == 'G')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'h' || c == 'H')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'i' || c == 'I')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'j' || c == 'J')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'k' || c == 'K')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'l' || c == 'L')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'm' || c == 'M')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'n' || c == 'N')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'o' || c == 'O')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'p' || c == 'P')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'q' || c == 'Q')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'r' || c == 'R')\n\t\t\t\tcount++;\n\t\t\telse if(c == 's' || c == 'S')\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122832,
      "stdout": "",
      "stderr": "/tmp/tmpzadhd40c.d(52): Error: found `unittest` instead of statement\n/tmp/tmpzadhd40c.d(60): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpzadhd40c.d(60): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzadhd40c.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(i, c; str1)\n\t{\n\t\tif(c == toLower(cast(char)(i + 'a')))\n\t\t\tcount++;\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122832,
      "stdout": "",
      "stderr": "/tmp/tmps9k_op5f.d(13): Error: undefined identifier `toLower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps9k_op5f.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' || c == 'A')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'b' || c == 'B')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'c' || c == 'C')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'd' || c == 'D')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'e' || c == 'E')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'f' || c == 'F')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'g' || c == 'G')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'h' || c == 'H')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'i' || c == 'I')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'j' || c == 'J')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'k' || c == 'K')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'l' || c == 'L')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'm' || c == 'M')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'n' || c == 'N')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'o' || c == 'O')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'p' || c == 'P')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'q' || c == 'Q')\n\t\t\t\tcount++;\n\t\t\telse if(c == 'r' || c == 'R')\n\t\t\t\tcount++;\n\t\t\telse if(c == 's' || c == 'S')\n\t\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122832,
      "stdout": "",
      "stderr": "/tmp/tmp_0tx9vql.d(53): Error: found `unittest` instead of statement\n/tmp/tmp_0tx9vql.d(61): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp_0tx9vql.d(61): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_0tx9vql.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' + count)\n\t\t\t\tcount++;\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' + count)\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517293,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmplsskyp1a.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmplsskyp1a.__unittest_L26_C1() [0x427ae2]\n??:? void tmplsskyp1a.__modtest() [0x427b4c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(i, c; str1)\n\t{\n\t\tif(i == toLower(c) - 'a')\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122832,
      "stdout": "",
      "stderr": "/tmp/tmps6p5gde6.d(13): Error: undefined identifier `toLower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps6p5gde6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' + count)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' + count)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517293,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpzkybtklb.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmpzkybtklb.__unittest_L30_C1() [0x427ae2]\n??:? void tmpzkybtklb.__modtest() [0x427b4c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tint i = 0;\n\tforeach(char c; str1)\n\t{\n\t\tif(c == 'a' + i || c == 'A' + i)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t\ti++;\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122832,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' + count)\n\t\t\t\tcount++;\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' + count)\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517293,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmplsskyp1a.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmplsskyp1a.__unittest_L26_C1() [0x427ae2]\n??:? void tmplsskyp1a.__modtest() [0x427b4c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' + count)\n\t\t\t\tcount++;\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' + count)\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517293,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpfu2hn4om.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmpfu2hn4om.__unittest_L26_C1() [0x427ae2]\n??:? void tmpfu2hn4om.__modtest() [0x427b4c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(ch; str1)\n\t{\n\t\tif(ch >= 'a' && ch <= 'z')\n\t\t{\n\t\t\tif(ch == 'a' + count)\n\t\t\t\tcount++;\n\t\t}\n\t\telse if(ch >= 'A' && ch <= 'Z')\n\t\t{\n\t\t\tif(ch == 'A' + count)\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122833,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmph6ms5fav.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmph6ms5fav.__unittest_L26_C1() [0x427ae2]\n??:? void tmph6ms5fav.__modtest() [0x427b4c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' + (count % 26))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' + (count % 26))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122832,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp0t9_q_fr.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmp0t9_q_fr.__unittest_L30_C1() [0x427af6]\n??:? void tmp0t9_q_fr.__modtest() [0x427b60]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tstring str2 = \"abcdefghijklmnopqrstuvwxyz\";\n\tforeach(immutable i; 0 .. str1.length)\n\t{\n\t\tif(str1[i] == str2[i])\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122833,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpwqsjk8hy.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x427dc5]\n??:? void tmpwqsjk8hy.__unittest_L21_C1() [0x427b09]\n??:? void tmpwqsjk8hy.__modtest() [0x427b48]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb5f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9f2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb85]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430034]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb11]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9c9]\n??:? runModuleUnitTests [0x42b935]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428288]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c == 'a' + count)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c == 'A' + count)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517293,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpzkybtklb.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmpzkybtklb.__unittest_L30_C1() [0x427ae2]\n??:? void tmpzkybtklb.__modtest() [0x427b4c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c - 'a' == count)\n\t\t\t\tcount++;\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c - 'A' == count)\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1665517293,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5uh3h_3r.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427dbd]\n??:? void tmp5uh3h_3r.__unittest_L26_C1() [0x427ad6]\n??:? void tmp5uh3h_3r.__modtest() [0x427b40]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bae3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a976]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb09]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa95]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a94d]\n??:? runModuleUnitTests [0x42b8b9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42820c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(i, c; str1)\n\t{\n\t\tif(i == toLower(c) - 'a')\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122832,
      "stdout": "",
      "stderr": "/tmp/tmps6p5gde6.d(13): Error: undefined identifier `toLower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps6p5gde6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tint len = str1.length;\n\tforeach(i, c; str1)\n\t{\n\t\tif(c == 'a' + i || c == 'A' + i)\n\t\t\tcount++;\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122833,
      "stdout": "",
      "stderr": "/tmp/tmpfupuaroj.d(11): Error: cannot implicitly convert expression `str1.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfupuaroj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\n*/\nlong count_char_position(string str1) \n{\n\tlong count = 0;\n\tforeach(immutable char c; str1)\n\t{\n\t\tif(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(c - 'a' == count)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tif(c - 'A' == count)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}",
      "timestamp": 1666122832,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpw_67jct6.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427dbd]\n??:? void tmpw_67jct6.__unittest_L30_C1() [0x427ad6]\n??:? void tmpw_67jct6.__modtest() [0x427b40]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bae3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a976]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb09]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa95]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a94d]\n??:? runModuleUnitTests [0x42b8b9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42820c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}