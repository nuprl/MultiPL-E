{
  "name": "mbpp_635_heap_sort",
  "language": "d",
  "prompt": "import std.math;\n/*\n\n\tWrite a function to sort the given array.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_635_heap_sort.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\t\n\tfor (int i = 0; i < iterable.length; i++)\n\t{\n\t\theap[i] = iterable[i];\n\t}\n\t\n\tfor (int i = floor(heap.length / 2); i >= 0; i--)\n\t{\n\t\theap = heapify(heap, i);\n\t}\n\t\n\tfor (int i = heap.length - 1; i >= 0; i--)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[i];\n\t\theap = heapify(heap, 0);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\t\n\t// Build a max heap\n\tfor (int i = 0; i < iterable.length; i++)\n\t{\n\t\tresult[i] = iterable[i];\n\t\tint current = i;\n\t\twhile (current != 0)\n\t\t{\n\t\t\tint parent = (current - 1) / 2;\n\t\t\tif (result[current] > result[parent])\n\t\t\t{\n\t\t\t\tlong temp = result[current];\n\t\t\t\tresult[current] = result[parent];\n\t\t\t\tresult[parent] = temp;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcurrent = parent;\n\t\t}\n\t}\n\t\n\t// Heap sort\n\tfor (int i = iterable.length - 1; i > 0; i--)\n\t{\n\t\tlong temp = result[0];\n\t\tresult[0] = result[i];\n\t\tresult[i] = temp;\n\t\t\n\t\tint current = 0;\n\t\tint leftChild = 2 * current + 1;\n\t\twhile (leftChild < i)\n\t\t{\n\t\t\tint max = leftChild;\n\t\t\tint rightChild = leftChild + 1;\n\t\t\tif (rightChild < i)\n\t\t\t{\n\t\t\t\tif (result[rightChild] > result[leftChild])\n\t\t\t\t{\n\t\t\t\t\tmax++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (result[max] > result[current])\n\t\t\t{\n\t\t\t\tlong temp = result[max];\n\t\t\t\tresult[max] = result[current];\n\t\t\t\tresult[current] = temp;\n\t\t\t\tcurrent = max;\n\t\t\t\tleftChild = 2 * current + 1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] array = iterable.dup;\n\tlong[] heap = new long[array.length];\n\tlong heap_size = 0;\n\t\n\tvoid swap(long[] array, long i, long j) \n\t{\n\t\tlong temp = array[i];\n\t\tarray[i] = array[j];\n\t\tarray[j] = temp;\n\t}\n\t\n\tvoid heapify(long[] array, long index, long heap_size) \n\t{\n\t\tlong left = 2 * index + 1;\n\t\tlong right = 2 * index + 2;\n\t\tlong largest = index;\n\t\t\n\t\tif (left < heap_size && array[left] > array[largest]) \n\t\t{\n\t\t\tlargest = left;\n\t\t}\n\t\t\n\t\tif (right < heap_size && array[right] > array[largest]) \n\t\t{\n\t\t\tlargest = right;\n\t\t}\n\t\t\n\t\tif (largest != index) \n\t\t{\n\t\t\tswap(array, index, largest);\n\t\t\theapify(array, largest, heap_size);\n\t\t}\n\t}\n\t\n\tvoid build_heap(long[] array, long heap_size) \n\t{\n\t\tfor (long i = (heap_size / 2) - 1; i >= 0; i--) \n\t\t{\n\t\t\theapify(array, i, heap_size);\n\t\t}\n\t}\n\t\n\tvoid heap_sort(long[] array, long heap_size) \n\t{\n\t\tbuild_heap(array, heap_size);\n\t\t\n\t\tfor (long i = heap_size - 1; i >= 0; i--) \n\t\t{\n\t\t\tswap(array, 0, i);\n\t\t\theapify(array, 0, i);\n\t\t}\n\t}\n\t\n\theap_sort(array, array.length);\n\treturn array;\n}",
    "{\n\tlong[] heap = new long[iterable.length];\n\tforeach(i, item; iterable)\n\t{\n\t\theap[i] = item;\n\t}\n\t\n\tfor(int i = 0; i < heap.length; i++)\n\t{\n\t\theapify(heap, i);\n\t}\n\t\n\treturn heap;\n}",
    "{\n\tint n = iterable.length;\n\tfor (int i = n / 2 - 1; i >= 0; i--)\n\t\theapify(iterable, n, i);\n\tfor (int i = n - 1; i >= 0; i--) \n\t{\n\t\tlong temp = iterable[0];\n\t\titerable[0] = iterable[i];\n\t\titerable[i] = temp;\n\t\theapify(iterable, i, 0);\n\t}\n\treturn iterable;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tforeach(long i; iterable)\n\t{\n\t\theap[heap_size] = i;\n\t\theap_size++;\n\t\theapify_up(heap, heap_size);\n\t}\n\t\n\tforeach(long i; 0..result.length)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theapify_down(heap, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result;\n\tlong i, j, k, n;\n\tlong temp;\n\t\n\tn = iterable.length;\n\tresult = new long[n];\n\t\n\tfor (i = 0; i < n; i++)\n\t{\n\t\tresult[i] = iterable[i];\n\t}\n\t\n\tfor (i = n / 2 - 1; i >= 0; i--)\n\t{\n\t\tk = i;\n\t\tj = 2 * k + 1;\n\t\t\n\t\twhile (j < n)\n\t\t{\n\t\t\tif (j + 1 < n)\n\t\t\t{\n\t\t\t\tif (result[j] < result[j + 1])\n\t\t\t\t{\n\t\t\t\t\tj++;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (result[k] < result[j])\n\t\t\t{\n\t\t\t\ttemp = result[k];\n\t\t\t\tresult[k] = result[j];\n\t\t\t\tresult[j] = temp;\n\t\t\t\t\n\t\t\t\tk = j;\n\t\t\t\tj = 2 * k + 1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor (i = n - 1; i >= 0; i--)\n\t{\n\t\ttemp = result[0];\n\t\tresult[0] = result[i];\n\t\tresult[i] = temp;\n\t\t\n\t\tk = 0;\n\t\tj = 2 * k + 1;\n\t\t\n\t\twhile (j < i)\n\t\t{\n\t\t\tif (j + 1 < i)\n\t\t\t{\n\t\t\t\tif (result[j] < result[j + 1])\n\t\t\t\t{\n\t\t\t\t\tj++;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (result[k] < result[j])\n\t\t\t{\n\t\t\t\ttemp = result[k];\n\t\t\t\tresult[k",
    "{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tforeach(long i; iterable)\n\t{\n\t\theap_size++;\n\t\theap[heap_size] = i;\n\t\tlong j = heap_size;\n\t\twhile(j > 1)\n\t\t{\n\t\t\tif(heap[j] > heap[j/2])\n\t\t\t{\n\t\t\t\tlong temp = heap[j];\n\t\t\t\theap[j] = heap[j/2];\n\t\t\t\theap[j/2] = temp;\n\t\t\t}\n\t\t\tj = j/2;\n\t\t}\n\t}\n\t\n\tlong i = 0;\n\twhile(heap_size > 0)\n\t{\n\t\tresult[i] = heap[1];\n\t\theap[1] = heap[heap_size];\n\t\theap_size--;\n\t\tlong j = 1;\n\t\twhile(j <= heap_size)\n\t\t{\n\t\t\tlong max = j;\n\t\t\tif(j*2 <= heap_size && heap[j*2] > heap[max])\n\t\t\t\tmax = j*2;\n\t\t\tif(j*2+1 <= heap_size && heap[j*2+1] > heap[max])\n\t\t\t\tmax = j*2+1;\n\t\t\tif(max == j)\n\t\t\t\tbreak;\n\t\t\tlong temp = heap[j];\n\t\t\theap[j] = heap[max];\n\t\t\theap[max] = temp;\n\t\t\tj = max;\n\t\t}\n\t\ti++;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tforeach(long i; iterable)\n\t{\n\t\theap_size++;\n\t\theap[heap_size] = i;\n\t\tlong j = heap_size;\n\t\twhile(j > 1 && heap[j] > heap[j/2])\n\t\t{\n\t\t\tlong temp = heap[j];\n\t\t\theap[j] = heap[j/2];\n\t\t\theap[j/2] = temp;\n\t\t\tj = j/2;\n\t\t}\n\t}\n\t\n\tlong i = 0;\n\twhile(heap_size > 0)\n\t{\n\t\tresult[i] = heap[1];\n\t\theap[1] = heap[heap_size];\n\t\theap_size--;\n\t\tlong j = 1;\n\t\twhile(j <= heap_size)\n\t\t{\n\t\t\tlong max_index = j;\n\t\t\tif(j*2 <= heap_size && heap[j*2] > heap[max_index])\n\t\t\t\tmax_index = j*2;\n\t\t\tif(j*2+1 <= heap_size && heap[j*2+1] > heap[max_index])\n\t\t\t\tmax_index = j*2+1;\n\t\t\tif(max_index == j)\n\t\t\t\tbreak;\n\t\t\tlong temp = heap[j];\n\t\t\theap[j] = heap[max_index];\n\t\t\theap[max_index] = temp;\n\t\t\tj = max_index;\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] heap = new long[iterable.length];\n\tforeach(i, item; iterable)\n\t{\n\t\theap[i] = item;\n\t\theapify(heap, i);\n\t}\n\t\n\tlong[] sorted = new long[iterable.length];\n\tforeach(i, item; iterable)\n\t{\n\t\tsorted[i] = heap[0];\n\t\theap[0] = heap[heap.length - 1];\n\t\theap[heap.length - 1] = 0;\n\t\theapify(heap, heap.length - 1);\n\t}\n\treturn sorted;\n}",
    "{\n\tlong[] heap = new long[iterable.length];\n\tlong[] result = new long[iterable.length];\n\t\n\tfor (int i = 0; i < iterable.length; i++) \n\t{\n\t\theap[i] = iterable[i];\n\t\tresult[i] = 0;\n\t}\n\t\n\tfor (int i = 0; i < iterable.length; i++) \n\t{\n\t\tint parent = (i - 1) / 2;\n\t\tint current = i;\n\t\t\n\t\twhile (heap[current] > heap[parent]) \n\t\t{\n\t\t\tlong temp = heap[current];\n\t\t\theap[current] = heap[parent];\n\t\t\theap[parent] = temp;\n\t\t\t\n\t\t\tcurrent = parent;\n\t\t\tparent = (current - 1) / 2;\n\t\t}\n\t}\n\t\n\tfor (int i = iterable.length - 1; i >= 0; i--) \n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[i];\n\t\theap[i] = 0;\n\t\t\n\t\tint current = 0;\n\t\tint left = 1;\n\t\tint right = 2;\n\t\t\n\t\twhile (heap[current] < heap[left] || heap[current] < heap[right]) \n\t\t{\n\t\t\tif (heap[left] > heap[right]) \n\t\t\t{\n\t\t\t\tlong temp = heap[current];\n\t\t\t\theap[current] = heap[left];\n\t\t\t\theap[left] = temp;\n\t\t\t\t\n\t\t\t\tcurrent = left;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tlong temp = heap[current];\n\t\t\t\theap[current] = heap[right];\n\t\t\t\theap[right] = temp;\n\t\t\t\t\n\t\t\t\tcurrent = right;\n\t\t\t}\n\t\t\t\n\t\t\tleft = 2 * current + 1;\n",
    "{\n\tlong[] result = new long[iterable.length];\n\t\n\tforeach(long i; iterable)\n\t{\n\t\tresult[i] = iterable[i];\n\t}\n\t\n\tlong length = result.length;\n\t\n\tfor(long i = length / 2 - 1; i >= 0; i--)\n\t{\n\t\theapify(result, length, i);\n\t}\n\t\n\tfor(long i = length - 1; i >= 0; i--)\n\t{\n\t\tlong temp = result[0];\n\t\tresult[0] = result[i];\n\t\tresult[i] = temp;\n\t\t\n\t\theapify(result, i, 0);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] heap = new long[iterable.length];\n\tlong[] result = new long[iterable.length];\n\tlong[] temp = new long[iterable.length];\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint l = 0;\n\tint m = 0;\n\tint n = 0;\n\tint o = 0;\n\tint p = 0;\n\tint q = 0;\n\tint r = 0;\n\tint s = 0;\n\tint t = 0;\n\tint u = 0;\n\tint v = 0;\n\tint w = 0;\n\tint x = 0;\n\tint y = 0;\n\tint z = 0;\n\tint aa = 0;\n\tint ab = 0;\n\tint ac = 0;\n\tint ad = 0;\n\tint ae = 0;\n\tint af = 0;\n\tint ag = 0;\n\tint ah = 0;\n\tint ai = 0;\n\tint aj = 0;\n\tint ak = 0;\n\tint al = 0;\n\tint am = 0;\n\tint an = 0;\n\tint ao = 0;\n\tint ap = 0;\n\tint aq = 0;\n\tint ar = 0;\n\tint as = 0;\n\tint at = 0;\n\tint au = 0;\n\tint av = 0;\n\tint aw = 0;\n\tint ax = 0;\n\tint ay = 0;\n\tint az = 0;\n\tint ba = 0;\n\tint bb = 0;\n\tint bc = 0;\n\tint bd = 0;\n\tint be = 0;\n\tint bf = 0;\n\tint bg = 0;\n\tint bh = 0;\n\tint bi = 0;\n\tint bj = 0;\n\tint bk = 0;\n\tint bl = 0;\n\tint bm = 0;\n\tint bn = 0;\n\tint bo = 0;\n\tint bp = 0;\n\tint bq = 0;\n\tint br = 0;\n\tint bs = 0;\n\tint bt = 0;\n",
    "{\n\tlong[] heap = new long[iterable.length];\n\tforeach(i,v; iterable)\n\t{\n\t\theap[i] = v;\n\t}\n\t\n\tlong[] result = new long[iterable.length];\n\t\n\tforeach(i; 0..iterable.length)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap.length - 1];\n\t\theap.length--;\n\t\theapify(heap, 0);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\t\n\tforeach(long i; iterable)\n\t{\n\t\tresult ~= i;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\t\n\tfor (int i = 0; i < iterable.length; i++)\n\t{\n\t\tresult[i] = iterable[i];\n\t}\n\t\n\tfor (int i = result.length / 2 - 1; i >= 0; i--)\n\t{\n\t\theapify(result, result.length, i);\n\t}\n\t\n\tfor (int i = result.length - 1; i >= 0; i--)\n\t{\n\t\tlong temp = result[0];\n\t\tresult[0] = result[i];\n\t\tresult[i] = temp;\n\t\t\n\t\theapify(result, i, 0);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] heap = new long[iterable.length];\n\tforeach(i, v; iterable)\n\t{\n\t\theap[i] = v;\n\t}\n\t\n\tfor(long i = (heap.length / 2) - 1; i >= 0; i--)\n\t{\n\t\theapify(heap, heap.length, i);\n\t}\n\t\n\tfor(long i = heap.length - 1; i >= 0; i--)\n\t{\n\t\tlong temp = heap[0];\n\t\theap[0] = heap[i];\n\t\theap[i] = temp;\n\t\t\n\t\theapify(heap, i, 0);\n\t}\n\t\n\treturn heap;\n}",
    "{\n\tlong[] heap = new long[iterable.length];\n\tforeach(long i; 0 .. iterable.length)\n\t{\n\t\theap[i] = iterable[i];\n\t}\n\t\n\tlong heap_size = heap.length;\n\t\n\tfor(long i = heap_size / 2; i >= 0; i--)\n\t{\n\t\theapify(heap, heap_size, i);\n\t}\n\t\n\tfor(long i = heap_size - 1; i >= 0; i--)\n\t{\n\t\tlong temp = heap[0];\n\t\theap[0] = heap[i];\n\t\theap[i] = temp;\n\t\t\n\t\theapify(heap, i, 0);\n\t}\n\t\n\treturn heap;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tforeach(long element; iterable)\n\t{\n\t\theap_size++;\n\t\theap[heap_size] = element;\n\t\tlong i = heap_size;\n\t\twhile(i > 1 && heap[i] > heap[i/2])\n\t\t{\n\t\t\tlong temp = heap[i];\n\t\t\theap[i] = heap[i/2];\n\t\t\theap[i/2] = temp;\n\t\t\ti = i/2;\n\t\t}\n\t}\n\t\n\tlong result_index = 0;\n\twhile(heap_size > 0)\n\t{\n\t\tresult[result_index] = heap[1];\n\t\tresult_index++;\n\t\theap[1] = heap[heap_size];\n\t\theap_size--;\n\t\tlong i = 1;\n\t\twhile(i <= heap_size)\n\t\t{\n\t\t\tlong max_index = i;\n\t\t\tif(2*i <= heap_size && heap[2*i] > heap[max_index])\n\t\t\t\tmax_index = 2*i;\n\t\t\tif(2*i+1 <= heap_size && heap[2*i+1] > heap[max_index])\n\t\t\t\tmax_index = 2*i+1;\n\t\t\tif(max_index == i)\n\t\t\t\tbreak;\n\t\t\tlong temp = heap[i];\n\t\t\theap[i] = heap[max_index];\n\t\t\theap[max_index] = temp;\n\t\t\ti = max_index;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tfor (int i = 0; i < iterable.length; i++)\n\t{\n\t\tresult[i] = iterable[i];\n\t}\n\t\n\tfor (int i = result.length / 2 - 1; i >= 0; i--)\n\t{\n\t\theapify(result, result.length, i);\n\t}\n\t\n\tfor (int i = result.length - 1; i >= 0; i--)\n\t{\n\t\tlong temp = result[0];\n\t\tresult[0] = result[i];\n\t\tresult[i] = temp;\n\t\t\n\t\theapify(result, i, 0);\n\t}\n\t\n\treturn result;\n}"
  ]
}