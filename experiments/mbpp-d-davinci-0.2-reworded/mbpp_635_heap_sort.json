{
  "name": "mbpp_635_heap_sort",
  "language": "d",
  "prompt": "import std.math;\n/*\n\n\tWrite a function to sort the given array.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_635_heap_sort.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\t\n\tfor (int i = 0; i < iterable.length; i++)\n\t{\n\t\theap[i] = iterable[i];\n\t}\n\t\n\tfor (int i = floor(heap.length / 2); i >= 0; i--)\n\t{\n\t\theap = heapify(heap, i);\n\t}\n\t\n\tfor (int i = heap.length - 1; i >= 0; i--)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[i];\n\t\theap = heapify(heap, 0);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\t\n\t// Build a max heap\n\tfor (int i = 0; i < iterable.length; i++)\n\t{\n\t\tresult[i] = iterable[i];\n\t\tint current = i;\n\t\twhile (current != 0)\n\t\t{\n\t\t\tint parent = (current - 1) / 2;\n\t\t\tif (result[current] > result[parent])\n\t\t\t{\n\t\t\t\tlong temp = result[current];\n\t\t\t\tresult[current] = result[parent];\n\t\t\t\tresult[parent] = temp;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcurrent = parent;\n\t\t}\n\t}\n\t\n\t// Heap sort\n\tfor (int i = iterable.length - 1; i > 0; i--)\n\t{\n\t\tlong temp = result[0];\n\t\tresult[0] = result[i];\n\t\tresult[i] = temp;\n\t\t\n\t\tint current = 0;\n\t\tint leftChild = 2 * current + 1;\n\t\twhile (leftChild < i)\n\t\t{\n\t\t\tint max = leftChild;\n\t\t\tint rightChild = leftChild + 1;\n\t\t\tif (rightChild < i)\n\t\t\t{\n\t\t\t\tif (result[rightChild] > result[leftChild])\n\t\t\t\t{\n\t\t\t\t\tmax++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (result[max] > result[current])\n\t\t\t{\n\t\t\t\tlong temp = result[max];\n\t\t\t\tresult[max] = result[current];\n\t\t\t\tresult[current] = temp;\n\t\t\t\tcurrent = max;\n\t\t\t\tleftChild = 2 * current + 1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] array = iterable.dup;\n\tlong[] heap = new long[array.length];\n\tlong heap_size = 0;\n\t\n\tvoid swap(long[] array, long i, long j) \n\t{\n\t\tlong temp = array[i];\n\t\tarray[i] = array[j];\n\t\tarray[j] = temp;\n\t}\n\t\n\tvoid heapify(long[] array, long index, long heap_size) \n\t{\n\t\tlong left = 2 * index + 1;\n\t\tlong right = 2 * index + 2;\n\t\tlong largest = index;\n\t\t\n\t\tif (left < heap_size && array[left] > array[largest]) \n\t\t{\n\t\t\tlargest = left;\n\t\t}\n\t\t\n\t\tif (right < heap_size && array[right] > array[largest]) \n\t\t{\n\t\t\tlargest = right;\n\t\t}\n\t\t\n\t\tif (largest != index) \n\t\t{\n\t\t\tswap(array, index, largest);\n\t\t\theapify(array, largest, heap_size);\n\t\t}\n\t}\n\t\n\tvoid build_heap(long[] array, long heap_size) \n\t{\n\t\tfor (long i = (heap_size / 2) - 1; i >= 0; i--) \n\t\t{\n\t\t\theapify(array, i, heap_size);\n\t\t}\n\t}\n\t\n\tvoid heap_sort(long[] array, long heap_size) \n\t{\n\t\tbuild_heap(array, heap_size);\n\t\t\n\t\tfor (long i = heap_size - 1; i >= 0; i--) \n\t\t{\n\t\t\tswap(array, 0, i);\n\t\t\theapify(array, 0, i);\n\t\t}\n\t}\n\t\n\theap_sort(array, array.length);\n\treturn array;\n}",
    "{\n\tlong[] heap = new long[iterable.length];\n\tforeach(i, item; iterable)\n\t{\n\t\theap[i] = item;\n\t}\n\t\n\tfor(int i = 0; i < heap.length; i++)\n\t{\n\t\theapify(heap, i);\n\t}\n\t\n\treturn heap;\n}",
    "{\n\tint n = iterable.length;\n\tfor (int i = n / 2 - 1; i >= 0; i--)\n\t\theapify(iterable, n, i);\n\tfor (int i = n - 1; i >= 0; i--) \n\t{\n\t\tlong temp = iterable[0];\n\t\titerable[0] = iterable[i];\n\t\titerable[i] = temp;\n\t\theapify(iterable, i, 0);\n\t}\n\treturn iterable;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tforeach(long i; iterable)\n\t{\n\t\theap[heap_size] = i;\n\t\theap_size++;\n\t\theapify_up(heap, heap_size);\n\t}\n\t\n\tforeach(long i; 0..result.length)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theapify_down(heap, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result;\n\tlong i, j, k, n;\n\tlong temp;\n\t\n\tn = iterable.length;\n\tresult = new long[n];\n\t\n\tfor (i = 0; i < n; i++)\n\t{\n\t\tresult[i] = iterable[i];\n\t}\n\t\n\tfor (i = n / 2 - 1; i >= 0; i--)\n\t{\n\t\tk = i;\n\t\tj = 2 * k + 1;\n\t\t\n\t\twhile (j < n)\n\t\t{\n\t\t\tif (j + 1 < n)\n\t\t\t{\n\t\t\t\tif (result[j] < result[j + 1])\n\t\t\t\t{\n\t\t\t\t\tj++;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (result[k] < result[j])\n\t\t\t{\n\t\t\t\ttemp = result[k];\n\t\t\t\tresult[k] = result[j];\n\t\t\t\tresult[j] = temp;\n\t\t\t\t\n\t\t\t\tk = j;\n\t\t\t\tj = 2 * k + 1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor (i = n - 1; i >= 0; i--)\n\t{\n\t\ttemp = result[0];\n\t\tresult[0] = result[i];\n\t\tresult[i] = temp;\n\t\t\n\t\tk = 0;\n\t\tj = 2 * k + 1;\n\t\t\n\t\twhile (j < i)\n\t\t{\n\t\t\tif (j + 1 < i)\n\t\t\t{\n\t\t\t\tif (result[j] < result[j + 1])\n\t\t\t\t{\n\t\t\t\t\tj++;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (result[k] < result[j])\n\t\t\t{\n\t\t\t\ttemp = result[k];\n\t\t\t\tresult[k",
    "{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tforeach(long i; iterable)\n\t{\n\t\theap_size++;\n\t\theap[heap_size] = i;\n\t\tlong j = heap_size;\n\t\twhile(j > 1)\n\t\t{\n\t\t\tif(heap[j] > heap[j/2])\n\t\t\t{\n\t\t\t\tlong temp = heap[j];\n\t\t\t\theap[j] = heap[j/2];\n\t\t\t\theap[j/2] = temp;\n\t\t\t}\n\t\t\tj = j/2;\n\t\t}\n\t}\n\t\n\tlong i = 0;\n\twhile(heap_size > 0)\n\t{\n\t\tresult[i] = heap[1];\n\t\theap[1] = heap[heap_size];\n\t\theap_size--;\n\t\tlong j = 1;\n\t\twhile(j <= heap_size)\n\t\t{\n\t\t\tlong max = j;\n\t\t\tif(j*2 <= heap_size && heap[j*2] > heap[max])\n\t\t\t\tmax = j*2;\n\t\t\tif(j*2+1 <= heap_size && heap[j*2+1] > heap[max])\n\t\t\t\tmax = j*2+1;\n\t\t\tif(max == j)\n\t\t\t\tbreak;\n\t\t\tlong temp = heap[j];\n\t\t\theap[j] = heap[max];\n\t\t\theap[max] = temp;\n\t\t\tj = max;\n\t\t}\n\t\ti++;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tforeach(long i; iterable)\n\t{\n\t\theap_size++;\n\t\theap[heap_size] = i;\n\t\tlong j = heap_size;\n\t\twhile(j > 1 && heap[j] > heap[j/2])\n\t\t{\n\t\t\tlong temp = heap[j];\n\t\t\theap[j] = heap[j/2];\n\t\t\theap[j/2] = temp;\n\t\t\tj = j/2;\n\t\t}\n\t}\n\t\n\tlong i = 0;\n\twhile(heap_size > 0)\n\t{\n\t\tresult[i] = heap[1];\n\t\theap[1] = heap[heap_size];\n\t\theap_size--;\n\t\tlong j = 1;\n\t\twhile(j <= heap_size)\n\t\t{\n\t\t\tlong max_index = j;\n\t\t\tif(j*2 <= heap_size && heap[j*2] > heap[max_index])\n\t\t\t\tmax_index = j*2;\n\t\t\tif(j*2+1 <= heap_size && heap[j*2+1] > heap[max_index])\n\t\t\t\tmax_index = j*2+1;\n\t\t\tif(max_index == j)\n\t\t\t\tbreak;\n\t\t\tlong temp = heap[j];\n\t\t\theap[j] = heap[max_index];\n\t\t\theap[max_index] = temp;\n\t\t\tj = max_index;\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] heap = new long[iterable.length];\n\tforeach(i, item; iterable)\n\t{\n\t\theap[i] = item;\n\t\theapify(heap, i);\n\t}\n\t\n\tlong[] sorted = new long[iterable.length];\n\tforeach(i, item; iterable)\n\t{\n\t\tsorted[i] = heap[0];\n\t\theap[0] = heap[heap.length - 1];\n\t\theap[heap.length - 1] = 0;\n\t\theapify(heap, heap.length - 1);\n\t}\n\treturn sorted;\n}",
    "{\n\tlong[] heap = new long[iterable.length];\n\tlong[] result = new long[iterable.length];\n\t\n\tfor (int i = 0; i < iterable.length; i++) \n\t{\n\t\theap[i] = iterable[i];\n\t\tresult[i] = 0;\n\t}\n\t\n\tfor (int i = 0; i < iterable.length; i++) \n\t{\n\t\tint parent = (i - 1) / 2;\n\t\tint current = i;\n\t\t\n\t\twhile (heap[current] > heap[parent]) \n\t\t{\n\t\t\tlong temp = heap[current];\n\t\t\theap[current] = heap[parent];\n\t\t\theap[parent] = temp;\n\t\t\t\n\t\t\tcurrent = parent;\n\t\t\tparent = (current - 1) / 2;\n\t\t}\n\t}\n\t\n\tfor (int i = iterable.length - 1; i >= 0; i--) \n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[i];\n\t\theap[i] = 0;\n\t\t\n\t\tint current = 0;\n\t\tint left = 1;\n\t\tint right = 2;\n\t\t\n\t\twhile (heap[current] < heap[left] || heap[current] < heap[right]) \n\t\t{\n\t\t\tif (heap[left] > heap[right]) \n\t\t\t{\n\t\t\t\tlong temp = heap[current];\n\t\t\t\theap[current] = heap[left];\n\t\t\t\theap[left] = temp;\n\t\t\t\t\n\t\t\t\tcurrent = left;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tlong temp = heap[current];\n\t\t\t\theap[current] = heap[right];\n\t\t\t\theap[right] = temp;\n\t\t\t\t\n\t\t\t\tcurrent = right;\n\t\t\t}\n\t\t\t\n\t\t\tleft = 2 * current + 1;\n",
    "{\n\tlong[] result = new long[iterable.length];\n\t\n\tforeach(long i; iterable)\n\t{\n\t\tresult[i] = iterable[i];\n\t}\n\t\n\tlong length = result.length;\n\t\n\tfor(long i = length / 2 - 1; i >= 0; i--)\n\t{\n\t\theapify(result, length, i);\n\t}\n\t\n\tfor(long i = length - 1; i >= 0; i--)\n\t{\n\t\tlong temp = result[0];\n\t\tresult[0] = result[i];\n\t\tresult[i] = temp;\n\t\t\n\t\theapify(result, i, 0);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] heap = new long[iterable.length];\n\tlong[] result = new long[iterable.length];\n\tlong[] temp = new long[iterable.length];\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint l = 0;\n\tint m = 0;\n\tint n = 0;\n\tint o = 0;\n\tint p = 0;\n\tint q = 0;\n\tint r = 0;\n\tint s = 0;\n\tint t = 0;\n\tint u = 0;\n\tint v = 0;\n\tint w = 0;\n\tint x = 0;\n\tint y = 0;\n\tint z = 0;\n\tint aa = 0;\n\tint ab = 0;\n\tint ac = 0;\n\tint ad = 0;\n\tint ae = 0;\n\tint af = 0;\n\tint ag = 0;\n\tint ah = 0;\n\tint ai = 0;\n\tint aj = 0;\n\tint ak = 0;\n\tint al = 0;\n\tint am = 0;\n\tint an = 0;\n\tint ao = 0;\n\tint ap = 0;\n\tint aq = 0;\n\tint ar = 0;\n\tint as = 0;\n\tint at = 0;\n\tint au = 0;\n\tint av = 0;\n\tint aw = 0;\n\tint ax = 0;\n\tint ay = 0;\n\tint az = 0;\n\tint ba = 0;\n\tint bb = 0;\n\tint bc = 0;\n\tint bd = 0;\n\tint be = 0;\n\tint bf = 0;\n\tint bg = 0;\n\tint bh = 0;\n\tint bi = 0;\n\tint bj = 0;\n\tint bk = 0;\n\tint bl = 0;\n\tint bm = 0;\n\tint bn = 0;\n\tint bo = 0;\n\tint bp = 0;\n\tint bq = 0;\n\tint br = 0;\n\tint bs = 0;\n\tint bt = 0;\n",
    "{\n\tlong[] heap = new long[iterable.length];\n\tforeach(i,v; iterable)\n\t{\n\t\theap[i] = v;\n\t}\n\t\n\tlong[] result = new long[iterable.length];\n\t\n\tforeach(i; 0..iterable.length)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap.length - 1];\n\t\theap.length--;\n\t\theapify(heap, 0);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\t\n\tforeach(long i; iterable)\n\t{\n\t\tresult ~= i;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\t\n\tfor (int i = 0; i < iterable.length; i++)\n\t{\n\t\tresult[i] = iterable[i];\n\t}\n\t\n\tfor (int i = result.length / 2 - 1; i >= 0; i--)\n\t{\n\t\theapify(result, result.length, i);\n\t}\n\t\n\tfor (int i = result.length - 1; i >= 0; i--)\n\t{\n\t\tlong temp = result[0];\n\t\tresult[0] = result[i];\n\t\tresult[i] = temp;\n\t\t\n\t\theapify(result, i, 0);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] heap = new long[iterable.length];\n\tforeach(i, v; iterable)\n\t{\n\t\theap[i] = v;\n\t}\n\t\n\tfor(long i = (heap.length / 2) - 1; i >= 0; i--)\n\t{\n\t\theapify(heap, heap.length, i);\n\t}\n\t\n\tfor(long i = heap.length - 1; i >= 0; i--)\n\t{\n\t\tlong temp = heap[0];\n\t\theap[0] = heap[i];\n\t\theap[i] = temp;\n\t\t\n\t\theapify(heap, i, 0);\n\t}\n\t\n\treturn heap;\n}",
    "{\n\tlong[] heap = new long[iterable.length];\n\tforeach(long i; 0 .. iterable.length)\n\t{\n\t\theap[i] = iterable[i];\n\t}\n\t\n\tlong heap_size = heap.length;\n\t\n\tfor(long i = heap_size / 2; i >= 0; i--)\n\t{\n\t\theapify(heap, heap_size, i);\n\t}\n\t\n\tfor(long i = heap_size - 1; i >= 0; i--)\n\t{\n\t\tlong temp = heap[0];\n\t\theap[0] = heap[i];\n\t\theap[i] = temp;\n\t\t\n\t\theapify(heap, i, 0);\n\t}\n\t\n\treturn heap;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tforeach(long element; iterable)\n\t{\n\t\theap_size++;\n\t\theap[heap_size] = element;\n\t\tlong i = heap_size;\n\t\twhile(i > 1 && heap[i] > heap[i/2])\n\t\t{\n\t\t\tlong temp = heap[i];\n\t\t\theap[i] = heap[i/2];\n\t\t\theap[i/2] = temp;\n\t\t\ti = i/2;\n\t\t}\n\t}\n\t\n\tlong result_index = 0;\n\twhile(heap_size > 0)\n\t{\n\t\tresult[result_index] = heap[1];\n\t\tresult_index++;\n\t\theap[1] = heap[heap_size];\n\t\theap_size--;\n\t\tlong i = 1;\n\t\twhile(i <= heap_size)\n\t\t{\n\t\t\tlong max_index = i;\n\t\t\tif(2*i <= heap_size && heap[2*i] > heap[max_index])\n\t\t\t\tmax_index = 2*i;\n\t\t\tif(2*i+1 <= heap_size && heap[2*i+1] > heap[max_index])\n\t\t\t\tmax_index = 2*i+1;\n\t\t\tif(max_index == i)\n\t\t\t\tbreak;\n\t\t\tlong temp = heap[i];\n\t\t\theap[i] = heap[max_index];\n\t\t\theap[max_index] = temp;\n\t\t\ti = max_index;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tfor (int i = 0; i < iterable.length; i++)\n\t{\n\t\tresult[i] = iterable[i];\n\t}\n\t\n\tfor (int i = result.length / 2 - 1; i >= 0; i--)\n\t{\n\t\theapify(result, result.length, i);\n\t}\n\t\n\tfor (int i = result.length - 1; i >= 0; i--)\n\t{\n\t\tlong temp = result[0];\n\t\tresult[0] = result[i];\n\t\tresult[i] = temp;\n\t\t\n\t\theapify(result, i, 0);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\t\n\tfor (int i = 0; i < iterable.length; i++)\n\t{\n\t\tresult[i] = iterable[i];\n\t}\n\t\n\tfor (int i = result.length / 2 - 1; i >= 0; i--)\n\t{\n\t\theapify(result, result.length, i);\n\t}\n\t\n\tfor (int i = result.length - 1; i >= 0; i--)\n\t{\n\t\tlong temp = result[0];\n\t\tresult[0] = result[i];\n\t\tresult[i] = temp;\n\t\t\n\t\theapify(result, i, 0);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\t\n\t// copy the array\n\tforeach(i, item; iterable)\n\t\tresult[i] = item;\n\t\n\t// create the heap\n\tfor(int i = result.length / 2; i >= 0; i--)\n\t\theapify(result, i, result.length);\n\t\n\t// sort the heap\n\tfor(int i = result.length - 1; i >= 0; i--)\n\t{\n\t\tlong temp = result[0];\n\t\tresult[0] = result[i];\n\t\tresult[i] = temp;\n\t\theapify(result, 0, i);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] array = iterable.dup;\n\tint n = array.length;\n\tfor (int i = n / 2 - 1; i >= 0; i--)\n\t\theapify(array, n, i);\n\tfor (int i = n - 1; i >= 0; i--)\n\t{\n\t\tlong temp = array[0];\n\t\tarray[0] = array[i];\n\t\tarray[i] = temp;\n\t\theapify(array, i, 0);\n\t}\n\treturn array;\n}",
    "{\n\tint size = iterable.length;\n\t\n\tfor (int i = (size / 2) - 1; i >= 0; i--) \n\t{\n\t\theapify(iterable, size, i);\n\t}\n\t\n\tfor (int i = size - 1; i >= 0; i--) \n\t{\n\t\tlong temp = iterable[0];\n\t\titerable[0] = iterable[i];\n\t\titerable[i] = temp;\n\t\t\n\t\theapify(iterable, i, 0);\n\t}\n\t\n\treturn iterable;\n}",
    "{\n\tlong[] heap = new long[iterable.length];\n\t\n\tforeach(long i; 0 .. iterable.length)\n\t{\n\t\theap[i] = iterable[i];\n\t\theap_push(heap, i);\n\t}\n\t\n\tforeach(long i; 0 .. iterable.length)\n\t{\n\t\titerable[i] = heap[0];\n\t\theap_pop(heap, iterable.length - i);\n\t}\n\t\n\treturn iterable;\n}",
    "{\n\tlong[] heap = new long[iterable.length];\n\tforeach(i, item; iterable)\n\t{\n\t\theap[i] = item;\n\t\theap_up(heap, i);\n\t}\n\t\n\tlong[] result = new long[iterable.length];\n\tforeach(i, item; iterable)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap.length - 1];\n\t\theap_down(heap, 0, heap.length - 1);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] heap = new long[iterable.length];\n\tlong[] sorted = new long[iterable.length];\n\t\n\tforeach(long i; 0 .. iterable.length)\n\t{\n\t\theap[i] = iterable[i];\n\t\tsorted[i] = 0;\n\t}\n\t\n\tforeach(long i; 0 .. iterable.length)\n\t{\n\t\tlong temp = heap[i];\n\t\tlong j = i;\n\t\twhile(j > 0 && temp < heap[(j - 1) / 2])\n\t\t{\n\t\t\theap[j] = heap[(j - 1) / 2];\n\t\t\tj = (j - 1) / 2;\n\t\t}\n\t\theap[j] = temp;\n\t}\n\t\n\tforeach(long i; 0 .. iterable.length)\n\t{\n\t\tsorted[i] = heap[0];\n\t\theap[0] = heap[heap.length - 1];\n\t\theap[heap.length - 1] = 0;\n\t\t\n\t\tlong temp = heap[0];\n\t\tlong j = 0;\n\t\tlong k = 0;\n\t\twhile(j < heap.length && heap[j] != 0)\n\t\t{\n\t\t\tk = j;\n\t\t\tif(2 * j + 1 < heap.length && heap[2 * j + 1] != 0 && heap[2 * j + 1] < heap[k])\n\t\t\t{\n\t\t\t\tk = 2 * j + 1;\n\t\t\t}\n\t\t\tif(2 * j + 2 < heap.length && heap[2 * j + 2] != 0 && heap[2 * j + 2] < heap[k])\n\t\t\t{\n\t\t\t\tk = 2 * j + 2;\n\t\t\t}\n\t\t\tif(k == j)\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\ttemp = heap[j];\n\t\t\t\theap[j] = heap[k];\n\t\t\t",
    "{\n\tlong[] result = new long[iterable.length];\n\tforeach(i; 0 .. iterable.length)\n\t{\n\t\tresult[i] = iterable[i];\n\t}\n\t\n\tlong[] heap = new long[result.length];\n\tlong heap_size = 0;\n\t\n\tauto heap_insert = (long value)\n\t{\n\t\theap_size++;\n\t\theap[heap_size] = value;\n\t\tlong i = heap_size;\n\t\twhile(i > 1 && heap[i] > heap[i / 2])\n\t\t{\n\t\t\tlong temp = heap[i];\n\t\t\theap[i] = heap[i / 2];\n\t\t\theap[i / 2] = temp;\n\t\t\ti = i / 2;\n\t\t}\n\t};\n\t\n\tauto heap_remove = ()\n\t{\n\t\tlong result = heap[1];\n\t\theap[1] = heap[heap_size];\n\t\theap_size--;\n\t\tlong i = 1;\n\t\twhile(i <= heap_size)\n\t\t{\n\t\t\tlong max = i;\n\t\t\tif(2 * i <= heap_size && heap[max] < heap[2 * i])\n\t\t\t{\n\t\t\t\tmax = 2 * i;\n\t\t\t}\n\t\t\tif(2 * i + 1 <= heap_size && heap[max] < heap[2 * i + 1])\n\t\t\t{\n\t\t\t\tmax = 2 * i + 1;\n\t\t\t}\n\t\t\tif(max == i)\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tlong temp = heap[i];\n\t\t\theap[i] = heap[max];\n\t\t\theap[max] = temp;\n\t\t\ti = max;\n\t\t}\n\t\treturn result;\n\t};\n\t\n\tforeach(i; 0 .. result.length)\n\t{\n\t\theap_insert(result[i]);\n\t}\n\t\n\tforeach(i; 0 .. result.",
    "{\n\tlong[] arr = iterable.dup;\n\tlong[] heap = new long[arr.length];\n\tlong heap_size = 0;\n\t\n\tvoid heap_insert(long val) \n\t{\n\t\theap[heap_size] = val;\n\t\tlong i = heap_size;\n\t\twhile (i > 0) \n\t\t{\n\t\t\tlong parent = (i - 1) / 2;\n\t\t\tif (heap[i] > heap[parent]) \n\t\t\t{\n\t\t\t\tlong temp = heap[i];\n\t\t\t\theap[i] = heap[parent];\n\t\t\t\theap[parent] = temp;\n\t\t\t\ti = parent;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\theap_size++;\n\t}\n\t\n\tlong heap_pop() \n\t{\n\t\tlong result = heap[0];\n\t\theap_size--;\n\t\theap[0] = heap[heap_size];\n\t\tlong i = 0;\n\t\twhile (i < heap_size) \n\t\t{\n\t\t\tlong left = 2 * i + 1;\n\t\t\tlong right = 2 * i + 2;\n\t\t\tlong largest = i;\n\t\t\tif (left < heap_size && heap[left] > heap[largest]) \n\t\t\t{\n\t\t\t\tlargest = left;\n\t\t\t}\n\t\t\tif (right < heap_size && heap[right] > heap[largest]) \n\t\t\t{\n\t\t\t\tlargest = right;\n\t\t\t}\n\t\t\tif (largest != i) \n\t\t\t{\n\t\t\t\tlong temp = heap[i];\n\t\t\t\theap[i] = heap[largest];\n\t\t\t\theap[largest] = temp;\n\t\t\t\ti = largest;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn result",
    "{\n\tlong[] result = new long[iterable.length];\n\tforeach(i; 0 .. iterable.length)\n\t{\n\t\tresult[i] = iterable[i];\n\t}\n\t\n\tlong size = result.length;\n\t\n\tfor (long i = size / 2 - 1; i >= 0; i--)\n\t{\n\t\theapify(result, size, i);\n\t}\n\t\n\tfor (long i = size - 1; i >= 0; i--)\n\t{\n\t\tlong temp = result[0];\n\t\tresult[0] = result[i];\n\t\tresult[i] = temp;\n\t\t\n\t\theapify(result, i, 0);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tfor (int i = 0; i < iterable.length; i++)\n\t\theap[i] = iterable[i];\n\t\n\tfor (int i = heap.length / 2 - 1; i >= 0; i--)\n\t\theapify(heap, heap.length, i);\n\t\n\tfor (int i = heap.length - 1; i >= 0; i--)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[i];\n\t\theapify(heap, i, 0);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\t\n\tforeach(long i; iterable)\n\t{\n\t\tresult ~= i;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] heap = new long[iterable.length];\n\tlong[] result = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tfor (int i = 0; i < iterable.length; i++)\n\t{\n\t\theap_size = heap_insert(heap, heap_size, iterable[i]);\n\t}\n\t\n\tfor (int i = 0; i < iterable.length; i++)\n\t{\n\t\tresult[i] = heap_extract_max(heap, heap_size);\n\t\theap_size--;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length + 1];\n\tlong heap_size = 0;\n\t\n\tforeach(long element; iterable)\n\t{\n\t\theap_size++;\n\t\theap[heap_size] = element;\n\t\tlong i = heap_size;\n\t\twhile(i > 1 && heap[i] > heap[i / 2])\n\t\t{\n\t\t\tlong temp = heap[i];\n\t\t\theap[i] = heap[i / 2];\n\t\t\theap[i / 2] = temp;\n\t\t\ti /= 2;\n\t\t}\n\t}\n\t\n\tfor(long i = 0; i < iterable.length; i++)\n\t{\n\t\tresult[i] = heap[1];\n\t\theap[1] = heap[heap_size];\n\t\theap_size--;\n\t\tlong j = 1;\n\t\twhile(2 * j <= heap_size)\n\t\t{\n\t\t\tlong k = 2 * j;\n\t\t\tif(k + 1 <= heap_size && heap[k + 1] > heap[k])\n\t\t\t\tk++;\n\t\t\tif(heap[j] >= heap[k])\n\t\t\t\tbreak;\n\t\t\tlong temp = heap[j];\n\t\t\theap[j] = heap[k];\n\t\t\theap[k] = temp;\n\t\t\tj = k;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length + 1];\n\tlong heap_size = 0;\n\t\n\tforeach(long item; iterable)\n\t{\n\t\theap_size++;\n\t\theap[heap_size] = item;\n\t\tlong i = heap_size;\n\t\twhile(i > 1 && heap[i] > heap[i / 2])\n\t\t{\n\t\t\tlong temp = heap[i];\n\t\t\theap[i] = heap[i / 2];\n\t\t\theap[i / 2] = temp;\n\t\t\ti = i / 2;\n\t\t}\n\t}\n\t\n\tlong i = 0;\n\twhile(heap_size > 0)\n\t{\n\t\tresult[i] = heap[1];\n\t\theap[1] = heap[heap_size];\n\t\theap_size--;\n\t\tlong j = 1;\n\t\twhile(j <= heap_size)\n\t\t{\n\t\t\tlong max = j;\n\t\t\tif(j * 2 <= heap_size && heap[j * 2] > heap[max])\n\t\t\t\tmax = j * 2;\n\t\t\tif(j * 2 + 1 <= heap_size && heap[j * 2 + 1] > heap[max])\n\t\t\t\tmax = j * 2 + 1;\n\t\t\tif(max == j)\n\t\t\t\tbreak;\n\t\t\tlong temp = heap[j];\n\t\t\theap[j] = heap[max];\n\t\t\theap[max] = temp;\n\t\t\tj = max;\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tfor (long i = 0; i < iterable.length; i++) \n\t{\n\t\theap_size = heap_insert(heap, heap_size, iterable[i]);\n\t}\n\t\n\tfor (long i = 0; i < iterable.length; i++) \n\t{\n\t\tresult[i] = heap_extract_max(heap, heap_size);\n\t\theap_size--;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] heap = new long[iterable.length];\n\tlong[] result = new long[iterable.length];\n\t\n\tforeach(long i; 0 .. iterable.length)\n\t{\n\t\theap[i] = iterable[i];\n\t}\n\t\n\tforeach(long i; 0 .. iterable.length)\n\t{\n\t\tlong parent = (i - 1) / 2;\n\t\tlong child = i;\n\t\t\n\t\twhile(child > 0 && heap[parent] < heap[child])\n\t\t{\n\t\t\tlong temp = heap[parent];\n\t\t\theap[parent] = heap[child];\n\t\t\theap[child] = temp;\n\t\t\t\n\t\t\tchild = parent;\n\t\t\tparent = (child - 1) / 2;\n\t\t}\n\t}\n\t\n\tforeach(long i; 0 .. iterable.length)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[iterable.length - i - 1];\n\t\t\n\t\tlong parent = 0;\n\t\tlong child = 1;\n\t\t\n\t\twhile(child < iterable.length - i)\n\t\t{\n\t\t\tif(child + 1 < iterable.length - i && heap[child + 1] > heap[child])\n\t\t\t{\n\t\t\t\tchild++;\n\t\t\t}\n\t\t\t\n\t\t\tif(heap[parent] < heap[child])\n\t\t\t{\n\t\t\t\tlong temp = heap[parent];\n\t\t\t\theap[parent] = heap[child];\n\t\t\t\theap[child] = temp;\n\t\t\t\t\n\t\t\t\tparent = child;\n\t\t\t\tchild = parent * 2 + 1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tint length = iterable.length;\n\tint i = length / 2;\n\tint parent;\n\tint child;\n\tlong t;\n\t\n\tfor (;;) {\n\t\tif (i > 0) {\n\t\t\ti--;\n\t\t\tt = iterable[i];\n\t\t} else {\n\t\t\tlength--;\n\t\t\tif (length == 0) {\n\t\t\t\treturn iterable;\n\t\t\t}\n\t\t\tt = iterable[length];\n\t\t\titerable[length] = iterable[0];\n\t\t}\n\t\t\n\t\tparent = i;\n\t\tchild = i * 2 + 1;\n\t\t\n\t\twhile (child < length) {\n\t\t\tif (child + 1 < length && iterable[child + 1] > iterable[child]) {\n\t\t\t\tchild++;\n\t\t\t}\n\t\t\tif (iterable[child] > t) {\n\t\t\t\titerable[parent] = iterable[child];\n\t\t\t\tparent = child;\n\t\t\t\tchild = parent * 2 + 1;\n\t\t\t} else {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\titerable[parent] = t;\n\t}\n}",
    "{\n\tauto heap = new Heap(iterable);\n\treturn heap.sort();\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tforeach(long i; iterable)\n\t\tresult ~= i;\n\t\n\tfor(long i = result.length / 2 - 1; i >= 0; i--)\n\t\theapify(result, result.length, i);\n\t\n\tfor(long i = result.length - 1; i >= 0; i--)\n\t{\n\t\tlong temp = result[0];\n\t\tresult[0] = result[i];\n\t\tresult[i] = temp;\n\t\t\n\t\theapify(result, i, 0);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tforeach(i, item; iterable)\n\t{\n\t\tresult[i] = item;\n\t}\n\t\n\tfor(long i = result.length / 2 - 1; i >= 0; i--)\n\t{\n\t\theapify(result, result.length, i);\n\t}\n\t\n\tfor(long i = result.length - 1; i >= 0; i--)\n\t{\n\t\tlong temp = result[0];\n\t\tresult[0] = result[i];\n\t\tresult[i] = temp;\n\t\t\n\t\theapify(result, i, 0);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tforeach(long item; iterable)\n\t{\n\t\theap_size++;\n\t\theap[heap_size] = item;\n\t\t\n\t\tlong i = heap_size;\n\t\twhile(i > 1 && heap[i] > heap[i/2])\n\t\t{\n\t\t\tlong tmp = heap[i];\n\t\t\theap[i] = heap[i/2];\n\t\t\theap[i/2] = tmp;\n\t\t\ti /= 2;\n\t\t}\n\t}\n\t\n\tlong result_size = 0;\n\twhile(heap_size > 0)\n\t{\n\t\tresult_size++;\n\t\tresult[result_size] = heap[1];\n\t\t\n\t\theap[1] = heap[heap_size];\n\t\theap_size--;\n\t\t\n\t\tlong i = 1;\n\t\twhile(i <= heap_size)\n\t\t{\n\t\t\tlong j = i;\n\t\t\tif(i*2 <= heap_size && heap[i] < heap[i*2])\n\t\t\t\tj = i*2;\n\t\t\tif(i*2+1 <= heap_size && heap[j] < heap[i*2+1])\n\t\t\t\tj = i*2+1;\n\t\t\tif(i == j)\n\t\t\t\tbreak;\n\t\t\t\n\t\t\tlong tmp = heap[i];\n\t\t\theap[i] = heap[j];\n\t\t\theap[j] = tmp;\n\t\t\t\n\t\t\ti = j;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tint n = iterable.length;\n\tfor (int i = n / 2 - 1; i >= 0; i--)\n\t\theapify(iterable, n, i);\n\tfor (int i = n - 1; i >= 0; i--)\n\t{\n\t\tlong temp = iterable[0];\n\t\titerable[0] = iterable[i];\n\t\titerable[i] = temp;\n\t\theapify(iterable, i, 0);\n\t}\n\treturn iterable;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tforeach(long item; iterable)\n\t{\n\t\theap_size = heap_insert(heap, heap_size, item);\n\t}\n\t\n\tfor(long i = 0; i < iterable.length; i++)\n\t{\n\t\tresult[i] = heap_extract_max(heap, heap_size);\n\t\theap_size--;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tint size = iterable.length;\n\tlong[] heap = new long[size];\n\tforeach(i, item; iterable)\n\t{\n\t\theap[i] = item;\n\t}\n\t\n\tfor(int i = (size / 2) - 1; i >= 0; i--)\n\t{\n\t\theapify(heap, size, i);\n\t}\n\t\n\tfor(int i = size - 1; i >= 0; i--)\n\t{\n\t\tlong temp = heap[0];\n\t\theap[0] = heap[i];\n\t\theap[i] = temp;\n\t\theapify(heap, i, 0);\n\t}\n\t\n\treturn heap;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\t\n\tforeach(long i; iterable)\n\t{\n\t\tresult ~= i;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\t\n\tforeach(long i; iterable)\n\t{\n\t\tresult[i] = iterable[i];\n\t}\n\t\n\tlong[] heap = new long[result.length];\n\t\n\tforeach(long i; result)\n\t{\n\t\theap[i] = result[i];\n\t}\n\t\n\tforeach(long i; heap)\n\t{\n\t\tlong temp = heap[i];\n\t\tlong c = i;\n\t\t\n\t\twhile(c > 0 && heap[(c - 1) / 2] < temp)\n\t\t{\n\t\t\theap[c] = heap[(c - 1) / 2];\n\t\t\tc = (c - 1) / 2;\n\t\t}\n\t\t\n\t\theap[c] = temp;\n\t}\n\t\n\tforeach(long i; heap)\n\t{\n\t\tlong temp = heap[i];\n\t\tlong c = i;\n\t\tlong j = 2 * c + 1;\n\t\t\n\t\twhile(j < heap.length)\n\t\t{\n\t\t\tif(j + 1 < heap.length)\n\t\t\t{\n\t\t\t\tif(heap[j + 1] > heap[j])\n\t\t\t\t{\n\t\t\t\t\tj = j + 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif(temp >= heap[j])\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t\n\t\t\theap[c] = heap[j];\n\t\t\tc = j;\n\t\t\tj = 2 * c + 1;\n\t\t}\n\t\t\n\t\theap[c] = temp;\n\t}\n\t\n\tforeach(long i; heap)\n\t{\n\t\tresult[i] = heap[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tforeach(long element; iterable)\n\t{\n\t\theap_size = heap_insert(heap, heap_size, element);\n\t}\n\t\n\tfor(long i = 0; i < iterable.length; i++)\n\t{\n\t\tresult[i] = heap_extract(heap, heap_size);\n\t\theap_size--;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong[] heap_index = new long[iterable.length];\n\tlong[] heap_size = new long[1];\n\theap_size[0] = 0;\n\t\n\tfor (long i = 0; i < iterable.length; i++) \n\t{\n\t\theap_insert(heap, heap_index, heap_size, iterable[i], i);\n\t}\n\t\n\tfor (long i = 0; i < iterable.length; i++) \n\t{\n\t\tresult[i] = heap_pop(heap, heap_index, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tfor (long i = 0; i < iterable.length; i++) \n\t{\n\t\theap_size = heap_insert(heap, heap_size, iterable[i]);\n\t}\n\t\n\tfor (long i = 0; i < iterable.length; i++) \n\t{\n\t\tresult[i] = heap_extract_max(heap, heap_size);\n\t\theap_size--;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong[] heap_index = new long[iterable.length];\n\tlong[] heap_size = new long[1];\n\theap_size[0] = 0;\n\t\n\tfor (long i = 0; i < iterable.length; i++) \n\t{\n\t\theap_insert(heap, heap_index, heap_size, iterable[i], i);\n\t}\n\t\n\tfor (long i = 0; i < iterable.length; i++) \n\t{\n\t\tresult[i] = heap_pop(heap, heap_index, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tforeach(i; 0 .. iterable.length)\n\t{\n\t\tresult[i] = iterable[i];\n\t}\n\t\n\tlong heap_size = result.length;\n\t\n\tfor(long i = floor(result.length / 2); i >= 0; i--)\n\t{\n\t\tmax_heapify(result, i, heap_size);\n\t}\n\t\n\tfor(long i = result.length - 1; i >= 0; i--)\n\t{\n\t\tlong temp = result[0];\n\t\tresult[0] = result[i];\n\t\tresult[i] = temp;\n\t\theap_size--;\n\t\tmax_heapify(result, 0, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tfor(int i = 0; i < iterable.length; i++)\n\t{\n\t\tresult[i] = iterable[i];\n\t}\n\t\n\tfor(int i = result.length / 2 - 1; i >= 0; i--)\n\t{\n\t\theapify(result, result.length, i);\n\t}\n\t\n\tfor(int i = result.length - 1; i >= 0; i--)\n\t{\n\t\tlong temp = result[0];\n\t\tresult[0] = result[i];\n\t\tresult[i] = temp;\n\t\t\n\t\theapify(result, i, 0);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\t\n\tint heap_size = 0;\n\t\n\tforeach(long element; iterable)\n\t{\n\t\theap_size++;\n\t\theap[heap_size] = element;\n\t\t\n\t\tint i = heap_size;\n\t\twhile(i > 1)\n\t\t{\n\t\t\tint parent = i / 2;\n\t\t\tif(heap[i] > heap[parent])\n\t\t\t{\n\t\t\t\tlong tmp = heap[i];\n\t\t\t\theap[i] = heap[parent];\n\t\t\t\theap[parent] = tmp;\n\t\t\t\ti = parent;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tint result_index = 0;\n\twhile(heap_size > 0)\n\t{\n\t\tresult[result_index] = heap[1];\n\t\tresult_index++;\n\t\t\n\t\theap[1] = heap[heap_size];\n\t\theap_size--;\n\t\t\n\t\tint i = 1;\n\t\twhile(i <= heap_size)\n\t\t{\n\t\t\tint left = i * 2;\n\t\t\tint right = i * 2 + 1;\n\t\t\t\n\t\t\tif(left <= heap_size)\n\t\t\t{\n\t\t\t\tif(right <= heap_size)\n\t\t\t\t{\n\t\t\t\t\tif(heap[left] > heap[right])\n\t\t\t\t\t{\n\t\t\t\t\t\tif(heap[left] > heap[i])\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlong tmp = heap[left];\n\t\t\t\t\t\t\theap[left] = heap[i];\n\t\t\t\t\t\t\theap[i] = tmp;\n\t\t\t\t\t\t\ti = left;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t",
    "{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong[] heap_index = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tforeach(long i, long value; iterable)\n\t{\n\t\theap_size = heap_size + 1;\n\t\theap[heap_size] = value;\n\t\theap_index[value] = heap_size;\n\t\t\n\t\tlong current_index = heap_size;\n\t\twhile(current_index > 1)\n\t\t{\n\t\t\tlong parent_index = current_index / 2;\n\t\t\tif(heap[parent_index] > heap[current_index])\n\t\t\t{\n\t\t\t\tlong temp = heap[parent_index];\n\t\t\t\theap[parent_index] = heap[current_index];\n\t\t\t\theap[current_index] = temp;\n\t\t\t\t\n\t\t\t\theap_index[heap[parent_index]] = parent_index;\n\t\t\t\theap_index[heap[current_index]] = current_index;\n\t\t\t\t\n\t\t\t\tcurrent_index = parent_index;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tlong result_index = 0;\n\twhile(heap_size > 0)\n\t{\n\t\tresult[result_index] = heap[1];\n\t\tresult_index = result_index + 1;\n\t\t\n\t\theap[1] = heap[heap_size];\n\t\theap_size = heap_size - 1;\n\t\t\n\t\theap_index[heap[1]] = 1;\n\t\t\n\t\tlong current_index = 1;\n\t\twhile(current_index <= heap_size)\n\t\t{\n\t\t\tlong left_child_index = current_index * 2;\n\t\t\tlong right_child_index = current_index * 2 + 1;\n\t\t\t\n\t",
    "{\n\tlong[] result = new long[iterable.length];\n\t\n\tlong[] heap = new long[iterable.length];\n\t\n\tfor (int i = 0; i < iterable.length; i++)\n\t{\n\t\theap[i] = iterable[i];\n\t}\n\t\n\tfor (int i = 0; i < iterable.length; i++)\n\t{\n\t\tresult[i] = heap_pop(heap);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tint length = iterable.length;\n\tif (length <= 1)\n\t\treturn iterable;\n\t\n\tlong[] result = new long[length];\n\t\n\t// create a max heap\n\tfor (int i = 0; i < length; i++)\n\t{\n\t\tint index = i;\n\t\twhile (index != 0)\n\t\t{\n\t\t\tint parent = (index - 1) / 2;\n\t\t\tif (iterable[index] > iterable[parent])\n\t\t\t{\n\t\t\t\tlong temp = iterable[index];\n\t\t\t\titerable[index] = iterable[parent];\n\t\t\t\titerable[parent] = temp;\n\t\t\t}\n\t\t\tindex = parent;\n\t\t}\n\t}\n\t\n\t// sort\n\tfor (int i = length - 1; i >= 0; i--)\n\t{\n\t\tresult[i] = iterable[0];\n\t\t\n\t\titerable[0] = iterable[i];\n\t\t\n\t\tint index = 0;\n\t\twhile (true)\n\t\t{\n\t\t\tint child = index * 2 + 1;\n\t\t\tif (child > i - 1)\n\t\t\t\tbreak;\n\t\t\t\n\t\t\tint right = child + 1;\n\t\t\tif (right <= i - 1 && iterable[right] > iterable[child])\n\t\t\t{\n\t\t\t\tchild = right;\n\t\t\t}\n\t\t\t\n\t\t\tif (iterable[index] < iterable[child])\n\t\t\t{\n\t\t\t\tlong temp = iterable[index];\n\t\t\t\titerable[index] = iterable[child];\n\t\t\t\titerable[child] = temp;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t\n\t\t\tindex = child;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\t\n\t// create a heap\n\tHeap heap = new Heap(iterable);\n\t\n\t// sort the heap\n\theap.sort();\n\t\n\t// copy the heap to the result\n\tforeach(i, item; heap.heap)\n\t{\n\t\tresult[i] = item;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tforeach(long i; iterable)\n\t{\n\t\theap_size = heap_insert(heap, heap_size, i);\n\t}\n\t\n\tforeach(long i; 0..iterable.length)\n\t{\n\t\tresult[i] = heap_remove(heap, heap_size);\n\t\theap_size--;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] heap = new long[iterable.length];\n\tforeach(i, item; iterable)\n\t{\n\t\theap[i] = item;\n\t\theapify(heap, i);\n\t}\n\t\n\tlong[] sorted = new long[iterable.length];\n\tforeach(i; 0..iterable.length)\n\t{\n\t\tsorted[i] = heap[0];\n\t\theap[0] = heap[$ - 1 - i];\n\t\theapify(heap, $ - 1 - i);\n\t}\n\treturn sorted;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong[] heap_index = new long[iterable.length];\n\tlong[] heap_size = new long[1];\n\theap_size[0] = 0;\n\t\n\tfor (long i = 0; i < iterable.length; i++) \n\t{\n\t\theap_insert(heap, heap_index, heap_size, iterable[i], i);\n\t}\n\t\n\tfor (long i = 0; i < iterable.length; i++) \n\t{\n\t\tresult[i] = heap_pop(heap, heap_index, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length + 1];\n\tlong heap_size = 0;\n\t\n\tforeach(long item; iterable)\n\t{\n\t\theap_size = heap_insert(heap, heap_size, item);\n\t}\n\t\n\tforeach(long item; result)\n\t{\n\t\titem = heap_extract_max(heap, heap_size);\n\t\theap_size--;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tforeach(long i; iterable)\n\t{\n\t\theap_size++;\n\t\theap[heap_size] = i;\n\t\tlong j = heap_size;\n\t\twhile(j > 1 && heap[j] > heap[j/2])\n\t\t{\n\t\t\tlong tmp = heap[j];\n\t\t\theap[j] = heap[j/2];\n\t\t\theap[j/2] = tmp;\n\t\t\tj = j/2;\n\t\t}\n\t}\n\t\n\tforeach(ref long i; result)\n\t{\n\t\ti = heap[1];\n\t\theap[1] = heap[heap_size];\n\t\theap_size--;\n\t\tlong j = 1;\n\t\twhile(j <= heap_size)\n\t\t{\n\t\t\tlong k = j;\n\t\t\tif(j*2 <= heap_size && heap[j*2] > heap[k])\n\t\t\t\tk = j*2;\n\t\t\tif(j*2+1 <= heap_size && heap[j*2+1] > heap[k])\n\t\t\t\tk = j*2+1;\n\t\t\tif(k == j)\n\t\t\t\tbreak;\n\t\t\tlong tmp = heap[k];\n\t\t\theap[k] = heap[j];\n\t\t\theap[j] = tmp;\n\t\t\tj = k;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tforeach(long item; iterable)\n\t{\n\t\theap_size++;\n\t\theap[heap_size] = item;\n\t\tlong i = heap_size;\n\t\twhile(i > 1 && heap[i] > heap[i/2])\n\t\t{\n\t\t\tlong temp = heap[i];\n\t\t\theap[i] = heap[i/2];\n\t\t\theap[i/2] = temp;\n\t\t\ti = i/2;\n\t\t}\n\t}\n\t\n\tlong result_size = 0;\n\twhile(heap_size > 0)\n\t{\n\t\tresult_size++;\n\t\tresult[result_size] = heap[1];\n\t\theap[1] = heap[heap_size];\n\t\theap_size--;\n\t\t\n\t\tlong i = 1;\n\t\twhile(i <= heap_size)\n\t\t{\n\t\t\tlong left = i*2;\n\t\t\tlong right = i*2 + 1;\n\t\t\tlong max = i;\n\t\t\tif(left <= heap_size && heap[left] > heap[max])\n\t\t\t{\n\t\t\t\tmax = left;\n\t\t\t}\n\t\t\tif(right <= heap_size && heap[right] > heap[max])\n\t\t\t{\n\t\t\t\tmax = right;\n\t\t\t}\n\t\t\tif(max == i)\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tlong temp = heap[i];\n\t\t\theap[i] = heap[max];\n\t\t\theap[max] = temp;\n\t\t\ti = max;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\t\n\tfor(int i = 0; i < iterable.length; i++)\n\t{\n\t\theap[i] = iterable[i];\n\t}\n\t\n\tfor(int i = 0; i < iterable.length; i++)\n\t{\n\t\tlong temp = heap[0];\n\t\theap[0] = heap[heap.length - 1 - i];\n\t\theap[heap.length - 1 - i] = temp;\n\t\t\n\t\tfor(int j = 0; j < heap.length - 1 - i; j++)\n\t\t{\n\t\t\tif(heap[j] < heap[j + 1])\n\t\t\t{\n\t\t\t\ttemp = heap[j];\n\t\t\t\theap[j] = heap[j + 1];\n\t\t\t\theap[j + 1] = temp;\n\t\t\t}\n\t\t}\n\t\t\n\t\tresult[i] = heap[heap.length - 1 - i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] arr = iterable.dup;\n\tlong[] result = new long[arr.length];\n\tlong[] heap = new long[arr.length + 1];\n\tlong i = 0;\n\tlong heap_size = 0;\n\t\n\t// Build the heap\n\tforeach(long item; arr)\n\t{\n\t\theap_size++;\n\t\theap[heap_size] = item;\n\t\tlong j = heap_size;\n\t\twhile(j > 1)\n\t\t{\n\t\t\tlong parent = j / 2;\n\t\t\tif(heap[parent] < heap[j])\n\t\t\t{\n\t\t\t\tlong temp = heap[parent];\n\t\t\t\theap[parent] = heap[j];\n\t\t\t\theap[j] = temp;\n\t\t\t\tj = parent;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\t// Sort the heap\n\twhile(heap_size > 0)\n\t{\n\t\tresult[i] = heap[1];\n\t\ti++;\n\t\theap[1] = heap[heap_size];\n\t\theap_size--;\n\t\tlong j = 1;\n\t\twhile(true)\n\t\t{\n\t\t\tlong left = j * 2;\n\t\t\tlong right = j * 2 + 1;\n\t\t\tlong largest = j;\n\t\t\tif(left <= heap_size && heap[left] > heap[largest])\n\t\t\t{\n\t\t\t\tlargest = left;\n\t\t\t}\n\t\t\tif(right <= heap_size && heap[right] > heap[largest])\n\t\t\t{\n\t\t\t\tlargest = right;\n\t\t\t}\n\t\t\tif(largest != j)\n\t\t\t{\n\t\t\t\tlong temp = heap[j];\n\t\t\t\theap[j] = heap[largest];\n\t\t\t\theap[largest] = temp;\n\t\t\t\tj = largest;\n\t\t\t}\n\t\t\telse\n\t\t",
    "{\n    long[] heap = new long[iterable.length];\n    long[] result = new long[iterable.length];\n    long heap_size = 0;\n    foreach(long i; iterable)\n    {\n        heap_size++;\n        heap[heap_size] = i;\n        long current = heap_size;\n        while(current > 1 && heap[current] > heap[current/2])\n        {\n            long temp = heap[current];\n            heap[current] = heap[current/2];\n            heap[current/2] = temp;\n            current = current/2;\n        }\n    }\n    long result_size = 0;\n    while(heap_size > 0)\n    {\n        result_size++;\n        result[result_size] = heap[1];\n        heap[1] = heap[heap_size];\n        heap_size--;\n        long current = 1;\n        while(current <= heap_size)\n        {\n            long left = current*2;\n            long right = current*2 + 1;\n            long largest = current;\n            if(left <= heap_size && heap[left] > heap[largest])\n            {\n                largest = left;\n            }\n            if(right <= heap_size && heap[right] > heap[largest])\n            {\n                largest = right;\n            }\n            if(largest != current)\n            {\n                long temp = heap[current];\n                heap[current] = heap[largest];\n                heap[largest] = temp;\n                current = largest;\n            }\n            else\n            {\n                break;\n            }\n        }\n    }\n    return result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tforeach(long item; iterable)\n\t{\n\t\theap_size++;\n\t\theap[heap_size] = item;\n\t\tlong i = heap_size;\n\t\twhile(i > 1 && heap[i] > heap[i/2])\n\t\t{\n\t\t\tlong temp = heap[i];\n\t\t\theap[i] = heap[i/2];\n\t\t\theap[i/2] = temp;\n\t\t\ti = i/2;\n\t\t}\n\t}\n\t\n\tlong result_size = 0;\n\twhile(heap_size > 0)\n\t{\n\t\tresult_size++;\n\t\tresult[result_size] = heap[1];\n\t\theap[1] = heap[heap_size];\n\t\theap_size--;\n\t\t\n\t\tlong i = 1;\n\t\twhile(i <= heap_size)\n\t\t{\n\t\t\tlong left_child = 2*i;\n\t\t\tlong right_child = 2*i + 1;\n\t\t\tlong max_child = i;\n\t\t\tif(left_child <= heap_size && heap[left_child] > heap[max_child])\n\t\t\t{\n\t\t\t\tmax_child = left_child;\n\t\t\t}\n\t\t\tif(right_child <= heap_size && heap[right_child] > heap[max_child])\n\t\t\t{\n\t\t\t\tmax_child = right_child;\n\t\t\t}\n\t\t\tif(max_child == i)\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tlong temp = heap[i];\n\t\t\theap[i] = heap[max_child];\n\t\t\theap[max_child] = temp;\n\t\t\ti = max_child;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] array = iterable.dup;\n\tlong[] heap = new long[array.length];\n\tlong heap_size = 0;\n\t\n\tvoid heap_insert(long value) \n\t{\n\t\theap[heap_size] = value;\n\t\tlong i = heap_size;\n\t\twhile (i > 0 && heap[(i - 1) / 2] < heap[i]) \n\t\t{\n\t\t\tlong tmp = heap[(i - 1) / 2];\n\t\t\theap[(i - 1) / 2] = heap[i];\n\t\t\theap[i] = tmp;\n\t\t\ti = (i - 1) / 2;\n\t\t}\n\t\theap_size++;\n\t}\n\t\n\tlong heap_extract() \n\t{\n\t\tlong result = heap[0];\n\t\theap_size--;\n\t\theap[0] = heap[heap_size];\n\t\tlong i = 0;\n\t\twhile (true) \n\t\t{\n\t\t\tlong left = 2 * i + 1;\n\t\t\tlong right = 2 * i + 2;\n\t\t\tlong largest = i;\n\t\t\tif (left < heap_size && heap[left] > heap[largest]) \n\t\t\t{\n\t\t\t\tlargest = left;\n\t\t\t}\n\t\t\tif (right < heap_size && heap[right] > heap[largest]) \n\t\t\t{\n\t\t\t\tlargest = right;\n\t\t\t}\n\t\t\tif (largest != i) \n\t\t\t{\n\t\t\t\tlong tmp = heap[i];\n\t\t\t\theap[i] = heap[largest];\n\t\t\t\theap[largest] = tmp;\n\t\t\t\ti = largest;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\t\n\tforeach (value; array) \n\t{\n\t\theap_insert(value);\n\t}\n\t\n\tforeach (i",
    "{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong[] heap_index = new long[iterable.length];\n\tlong heap_size = 0;\n\tlong i = 0;\n\tlong j = 0;\n\tlong temp = 0;\n\tlong temp_index = 0;\n\tlong temp_index_2 = 0;\n\tlong temp_index_3 = 0;\n\tlong temp_index_4 = 0;\n\tlong temp_index_5 = 0;\n\tlong temp_index_6 = 0;\n\tlong temp_index_7 = 0;\n\tlong temp_index_8 = 0;\n\tlong temp_index_9 = 0;\n\tlong temp_index_10 = 0;\n\tlong temp_index_11 = 0;\n\tlong temp_index_12 = 0;\n\tlong temp_index_13 = 0;\n\tlong temp_index_14 = 0;\n\tlong temp_index_15 = 0;\n\tlong temp_index_16 = 0;\n\tlong temp_index_17 = 0;\n\tlong temp_index_18 = 0;\n\tlong temp_index_19 = 0;\n\tlong temp_index_20 = 0;\n\tlong temp_index_21 = 0;\n\tlong temp_index_22 = 0;\n\tlong temp_index_23 = 0;\n\tlong temp_index_24 = 0;\n\tlong temp_index_25 = 0;\n\tlong temp_index_26 = 0;\n\tlong temp_index_27 = 0;\n\tlong temp_index_28 = 0;\n\tlong temp_index_29 = 0;\n\tlong temp_index_30 = 0;\n\tlong temp_index_31 = 0;\n\tlong temp_index_32 = 0;\n\tlong temp_index_33 = 0;\n\tlong temp_index_34 = 0;\n\tlong temp_index_35 = 0;\n\tlong temp_index_36 = 0;\n\tlong temp_index_37 = 0;\n\tlong temp_index_38 = 0;\n\tlong temp_index_39 = 0;\n\tlong temp_index_40 =",
    "{\n\tlong[] result = new long[iterable.length];\n\t\n\t// Copy the array\n\tforeach(long i; 0 .. iterable.length)\n\t{\n\t\tresult[i] = iterable[i];\n\t}\n\t\n\t// Build the heap\n\tfor(long i = result.length / 2 - 1; i >= 0; i--)\n\t{\n\t\theapify(result, result.length, i);\n\t}\n\t\n\t// Extract elements\n\tfor(long i = result.length - 1; i >= 0; i--)\n\t{\n\t\t// Move current root to end\n\t\tlong temp = result[0];\n\t\tresult[0] = result[i];\n\t\tresult[i] = temp;\n\t\t\n\t\t// Call max heapify on the reduced heap\n\t\theapify(result, i, 0);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tforeach(long item; iterable)\n\t{\n\t\theap_size++;\n\t\theap[heap_size] = item;\n\t\tlong i = heap_size;\n\t\twhile(i > 1 && heap[i] > heap[i / 2])\n\t\t{\n\t\t\tlong temp = heap[i];\n\t\t\theap[i] = heap[i / 2];\n\t\t\theap[i / 2] = temp;\n\t\t\ti = i / 2;\n\t\t}\n\t}\n\t\n\tforeach(long item; iterable)\n\t{\n\t\tresult[heap_size] = heap[1];\n\t\theap[1] = heap[heap_size];\n\t\theap_size--;\n\t\t\n\t\tlong i = 1;\n\t\twhile(i <= heap_size)\n\t\t{\n\t\t\tlong left = i * 2;\n\t\t\tlong right = i * 2 + 1;\n\t\t\tlong largest = i;\n\t\t\tif(left <= heap_size && heap[left] > heap[largest])\n\t\t\t{\n\t\t\t\tlargest = left;\n\t\t\t}\n\t\t\tif(right <= heap_size && heap[right] > heap[largest])\n\t\t\t{\n\t\t\t\tlargest = right;\n\t\t\t}\n\t\t\tif(largest != i)\n\t\t\t{\n\t\t\t\tlong temp = heap[i];\n\t\t\t\theap[i] = heap[largest];\n\t\t\t\theap[largest] = temp;\n\t\t\t\ti = largest;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tforeach(long i; iterable)\n\t{\n\t\theap_size++;\n\t\theap[heap_size] = i;\n\t\tlong j = heap_size;\n\t\twhile(j > 1 && heap[j] < heap[j/2])\n\t\t{\n\t\t\tlong temp = heap[j];\n\t\t\theap[j] = heap[j/2];\n\t\t\theap[j/2] = temp;\n\t\t\tj = j/2;\n\t\t}\n\t}\n\t\n\tlong result_index = 0;\n\twhile(heap_size > 0)\n\t{\n\t\tresult[result_index] = heap[1];\n\t\tresult_index++;\n\t\theap[1] = heap[heap_size];\n\t\theap_size--;\n\t\t\n\t\tlong j = 1;\n\t\twhile(j <= heap_size)\n\t\t{\n\t\t\tlong min_index = j;\n\t\t\tif(2*j <= heap_size && heap[2*j] < heap[min_index])\n\t\t\t{\n\t\t\t\tmin_index = 2*j;\n\t\t\t}\n\t\t\tif(2*j+1 <= heap_size && heap[2*j+1] < heap[min_index])\n\t\t\t{\n\t\t\t\tmin_index = 2*j+1;\n\t\t\t}\n\t\t\tif(min_index == j)\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tlong temp = heap[j];\n\t\t\theap[j] = heap[min_index];\n\t\t\theap[min_index] = temp;\n\t\t\tj = min_index;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\t\n\tforeach(long i; iterable)\n\t{\n\t\tresult ~= i;\n\t}\n\t\n\tfor(long i = result.length / 2 - 1; i >= 0; i--)\n\t{\n\t\theapify(result, result.length, i);\n\t}\n\t\n\tfor(long i = result.length - 1; i >= 0; i--)\n\t{\n\t\tlong temp = result[0];\n\t\tresult[0] = result[i];\n\t\tresult[i] = temp;\n\t\t\n\t\theapify(result, i, 0);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] heap = new long[iterable.length];\n\tlong[] result = new long[iterable.length];\n\t\n\tforeach(long i; 0..iterable.length)\n\t{\n\t\theap[i] = iterable[i];\n\t}\n\t\n\tforeach(long i; 0..iterable.length)\n\t{\n\t\tlong j = i;\n\t\twhile(j > 0)\n\t\t{\n\t\t\tlong parent = (j - 1) / 2;\n\t\t\tif(heap[j] > heap[parent])\n\t\t\t{\n\t\t\t\tlong temp = heap[j];\n\t\t\t\theap[j] = heap[parent];\n\t\t\t\theap[parent] = temp;\n\t\t\t}\n\t\t\tj = parent;\n\t\t}\n\t}\n\t\n\tforeach(long i; 0..iterable.length)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap.length - 1 - i];\n\t\t\n\t\tlong j = 0;\n\t\twhile(true)\n\t\t{\n\t\t\tlong left = 2 * j + 1;\n\t\t\tlong right = 2 * j + 2;\n\t\t\tlong largest = j;\n\t\t\tif(left < heap.length - i && heap[left] > heap[largest])\n\t\t\t{\n\t\t\t\tlargest = left;\n\t\t\t}\n\t\t\tif(right < heap.length - i && heap[right] > heap[largest])\n\t\t\t{\n\t\t\t\tlargest = right;\n\t\t\t}\n\t\t\tif(largest != j)\n\t\t\t{\n\t\t\t\tlong temp = heap[j];\n\t\t\t\theap[j] = heap[largest];\n\t\t\t\theap[largest] = temp;\n\t\t\t\tj = largest;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tforeach(long i; iterable)\n\t{\n\t\theap[heap_size] = i;\n\t\theap_size++;\n\t\t\n\t\tlong j = heap_size - 1;\n\t\twhile(j > 0 && heap[j] > heap[(j-1)/2])\n\t\t{\n\t\t\tlong temp = heap[j];\n\t\t\theap[j] = heap[(j-1)/2];\n\t\t\theap[(j-1)/2] = temp;\n\t\t\t\n\t\t\tj = (j-1)/2;\n\t\t}\n\t}\n\t\n\tlong result_index = 0;\n\twhile(heap_size > 0)\n\t{\n\t\tresult[result_index] = heap[0];\n\t\tresult_index++;\n\t\t\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\t\n\t\tlong j = 0;\n\t\twhile(true)\n\t\t{\n\t\t\tlong left = 2*j + 1;\n\t\t\tlong right = 2*j + 2;\n\t\t\tlong largest = j;\n\t\t\t\n\t\t\tif(left < heap_size && heap[left] > heap[largest])\n\t\t\t\tlargest = left;\n\t\t\tif(right < heap_size && heap[right] > heap[largest])\n\t\t\t\tlargest = right;\n\t\t\t\n\t\t\tif(largest != j)\n\t\t\t{\n\t\t\t\tlong temp = heap[j];\n\t\t\t\theap[j] = heap[largest];\n\t\t\t\theap[largest] = temp;\n\t\t\t\t\n\t\t\t\tj = largest;\n\t\t\t}\n\t\t\telse\n\t\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong[] heap_index = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tfor (long i = 0; i < iterable.length; i++)\n\t{\n\t\theap_insert(heap, heap_index, heap_size, iterable[i], i);\n\t\theap_size++;\n\t}\n\t\n\tfor (long i = 0; i < iterable.length; i++)\n\t{\n\t\tresult[i] = heap_pop(heap, heap_index, heap_size);\n\t\theap_size--;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong[] heap_index = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tforeach(long i; 0 .. iterable.length) {\n\t\theap_size = heap_insert(heap, heap_index, heap_size, iterable[i], i);\n\t}\n\t\n\tforeach(long i; 0 .. iterable.length) {\n\t\tresult[i] = heap_remove(heap, heap_index, heap_size);\n\t\theap_size--;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] heap = new long[iterable.length];\n\tlong[] result = new long[iterable.length];\n\t\n\tforeach(long i; 0..iterable.length)\n\t{\n\t\theap[i] = iterable[i];\n\t}\n\t\n\tforeach(long i; 0..iterable.length)\n\t{\n\t\tlong j = i;\n\t\twhile(j > 0 && heap[j] > heap[(j-1)/2])\n\t\t{\n\t\t\tlong temp = heap[j];\n\t\t\theap[j] = heap[(j-1)/2];\n\t\t\theap[(j-1)/2] = temp;\n\t\t\tj = (j-1)/2;\n\t\t}\n\t}\n\t\n\tforeach(long i; 0..iterable.length)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap.length-1-i];\n\t\theap[heap.length-1-i] = 0;\n\t\t\n\t\tlong j = 0;\n\t\twhile(j < heap.length-1-i)\n\t\t{\n\t\t\tlong max = j;\n\t\t\tif(j*2+1 < heap.length-1-i && heap[j*2+1] > heap[max])\n\t\t\t{\n\t\t\t\tmax = j*2+1;\n\t\t\t}\n\t\t\tif(j*2+2 < heap.length-1-i && heap[j*2+2] > heap[max])\n\t\t\t{\n\t\t\t\tmax = j*2+2;\n\t\t\t}\n\t\t\tif(max == j)\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tlong temp = heap[j];\n\t\t\theap[j] = heap[max];\n\t\t\theap[max] = temp;\n\t\t\tj = max;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] heap = new long[iterable.length];\n\tforeach(index, value; iterable)\n\t{\n\t\theap[index] = value;\n\t\theap_push(heap, index);\n\t}\n\t\n\tlong[] result = new long[iterable.length];\n\tforeach(index; 0 .. iterable.length)\n\t{\n\t\tresult[index] = heap[0];\n\t\theap[0] = heap[$ - 1];\n\t\theap_pop(heap, $ - 1);\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length + 1];\n\tlong heap_size = 0;\n\t\n\tforeach(long i; iterable)\n\t{\n\t\theap_size++;\n\t\theap[heap_size] = i;\n\t\tlong j = heap_size;\n\t\twhile(j > 1 && heap[j] > heap[j/2])\n\t\t{\n\t\t\tlong temp = heap[j];\n\t\t\theap[j] = heap[j/2];\n\t\t\theap[j/2] = temp;\n\t\t\tj = j/2;\n\t\t}\n\t}\n\t\n\tlong i = 0;\n\twhile(heap_size > 0)\n\t{\n\t\tresult[i] = heap[1];\n\t\ti++;\n\t\theap[1] = heap[heap_size];\n\t\theap_size--;\n\t\tlong j = 1;\n\t\twhile(j <= heap_size)\n\t\t{\n\t\t\tlong max_index = j;\n\t\t\tif(j*2 <= heap_size && heap[j*2] > heap[max_index])\n\t\t\t{\n\t\t\t\tmax_index = j*2;\n\t\t\t}\n\t\t\tif(j*2 + 1 <= heap_size && heap[j*2 + 1] > heap[max_index])\n\t\t\t{\n\t\t\t\tmax_index = j*2 + 1;\n\t\t\t}\n\t\t\tif(max_index == j)\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tlong temp = heap[j];\n\t\t\theap[j] = heap[max_index];\n\t\t\theap[max_index] = temp;\n\t\t\tj = max_index;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\t\n\tforeach(long i; iterable)\n\t{\n\t\tresult[i] = iterable[i];\n\t}\n\t\n\tlong[] heap = new long[result.length];\n\t\n\tlong heap_size = 0;\n\t\n\tforeach(long i; result)\n\t{\n\t\theap_size++;\n\t\theap[heap_size] = result[i];\n\t\tlong j = heap_size;\n\t\twhile(j > 1 && heap[j] > heap[j/2])\n\t\t{\n\t\t\tlong temp = heap[j];\n\t\t\theap[j] = heap[j/2];\n\t\t\theap[j/2] = temp;\n\t\t\tj = j/2;\n\t\t}\n\t}\n\t\n\tlong[] sorted = new long[result.length];\n\t\n\tlong sorted_size = 0;\n\t\n\twhile(heap_size > 0)\n\t{\n\t\tsorted_size++;\n\t\tsorted[sorted_size] = heap[1];\n\t\theap[1] = heap[heap_size];\n\t\theap_size--;\n\t\t\n\t\tlong j = 1;\n\t\twhile(j < heap_size)\n\t\t{\n\t\t\tlong k = j;\n\t\t\tif(2*k <= heap_size && heap[2*k] > heap[k])\n\t\t\t{\n\t\t\t\tk = 2*k;\n\t\t\t}\n\t\t\tif(2*k+1 <= heap_size && heap[2*k+1] > heap[k])\n\t\t\t{\n\t\t\t\tk = 2*k+1;\n\t\t\t}\n\t\t\tif(k == j)\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tlong temp = heap[k];\n\t\t\theap[k] = heap[j];\n\t\t\theap[j] = temp;\n\t\t\tj = k;\n\t\t}\n\t}\n\t\n\t",
    "{\n\tlong[] heap = new long[iterable.length];\n\tforeach(long i; 0..iterable.length)\n\t{\n\t\theap[i] = iterable[i];\n\t}\n\t\n\tlong heap_size = iterable.length;\n\t\n\tfor(long i = floor(heap_size / 2); i >= 0; i--)\n\t{\n\t\theapify(heap, heap_size, i);\n\t}\n\t\n\tfor(long i = heap_size - 1; i >= 0; i--)\n\t{\n\t\tlong temp = heap[0];\n\t\theap[0] = heap[i];\n\t\theap[i] = temp;\n\t\theapify(heap, i, 0);\n\t}\n\t\n\treturn heap;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tforeach(i; 0 .. iterable.length)\n\t{\n\t\tresult[i] = iterable[i];\n\t}\n\t\n\tlong heap_size = result.length;\n\t\n\tfor(long i = floor(heap_size / 2) - 1; i >= 0; i--)\n\t{\n\t\tmax_heapify(result, heap_size, i);\n\t}\n\t\n\tfor(long i = heap_size - 1; i >= 0; i--)\n\t{\n\t\tlong temp = result[0];\n\t\tresult[0] = result[i];\n\t\tresult[i] = temp;\n\t\t\n\t\theap_size--;\n\t\tmax_heapify(result, heap_size, 0);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tforeach(long i; iterable)\n\t{\n\t\theap[heap_size] = i;\n\t\theap_size++;\n\t\theapify_up(heap, heap_size);\n\t}\n\t\n\tfor(long i = 0; i < iterable.length; i++)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theapify_down(heap, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] heap = new long[iterable.length];\n\tforeach(index, value; iterable)\n\t{\n\t\theap[index] = value;\n\t\theapify_up(heap, index);\n\t}\n\t\n\tlong[] sorted = new long[iterable.length];\n\tforeach(index; 0 .. iterable.length)\n\t{\n\t\tsorted[index] = heap[0];\n\t\theap[0] = heap[$ - 1];\n\t\theapify_down(heap, 0, $ - 1);\n\t}\n\t\n\treturn sorted;\n}",
    "{\n\tlong[] heap = new long[iterable.length];\n\tforeach(i, item; iterable)\n\t{\n\t\theap[i] = item;\n\t\theap_push(heap, i);\n\t}\n\t\n\tlong[] result = new long[iterable.length];\n\tforeach(i, item; iterable)\n\t{\n\t\tresult[i] = heap_pop(heap);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tforeach(i; 0 .. iterable.length)\n\t{\n\t\tresult[i] = iterable[i];\n\t}\n\t\n\tlong[] heap = new long[result.length];\n\tforeach(i; 0 .. result.length)\n\t{\n\t\theap[i] = result[i];\n\t}\n\t\n\tlong[] sorted = new long[result.length];\n\t\n\tlong heap_size = heap.length;\n\t\n\tfor(long i = floor(heap_size / 2); i >= 0; i--)\n\t{\n\t\theap = max_heapify(heap, i, heap_size);\n\t}\n\t\n\tfor(long i = heap_size - 1; i >= 0; i--)\n\t{\n\t\tsorted[i] = heap[0];\n\t\theap[0] = heap[i];\n\t\theap_size--;\n\t\theap = max_heapify(heap, 0, heap_size);\n\t}\n\t\n\treturn sorted;\n}",
    "{\n\tint n = iterable.length;\n\t\n\tfor (int i = n / 2 - 1; i >= 0; i--) \n\t\theapify(iterable, n, i);\n\t\n\tfor (int i = n - 1; i >= 0; i--) \n\t{\n\t\tlong temp = iterable[0];\n\t\titerable[0] = iterable[i];\n\t\titerable[i] = temp;\n\t\t\n\t\theapify(iterable, i, 0);\n\t}\n\t\n\treturn iterable;\n}",
    "{\n\tlong[] heap = new long[iterable.length];\n\tforeach(i, item; iterable)\n\t{\n\t\theap[i] = item;\n\t\tlong j = i;\n\t\twhile(j > 0 && heap[(j - 1) / 2] < heap[j])\n\t\t{\n\t\t\tlong temp = heap[j];\n\t\t\theap[j] = heap[(j - 1) / 2];\n\t\t\theap[(j - 1) / 2] = temp;\n\t\t\tj = (j - 1) / 2;\n\t\t}\n\t}\n\t\n\tlong[] sorted = new long[iterable.length];\n\tforeach(i; 0 .. iterable.length)\n\t{\n\t\tsorted[i] = heap[0];\n\t\theap[0] = heap[heap.length - 1 - i];\n\t\theap[heap.length - 1 - i] = 0;\n\t\tlong j = 0;\n\t\twhile(j < heap.length - 1 - i)\n\t\t{\n\t\t\tlong left = 2 * j + 1;\n\t\t\tlong right = 2 * j + 2;\n\t\t\tlong largest = j;\n\t\t\tif(left < heap.length - 1 - i && heap[left] > heap[largest])\n\t\t\t\tlargest = left;\n\t\t\tif(right < heap.length - 1 - i && heap[right] > heap[largest])\n\t\t\t\tlargest = right;\n\t\t\tif(largest != j)\n\t\t\t{\n\t\t\t\tlong temp = heap[j];\n\t\t\t\theap[j] = heap[largest];\n\t\t\t\theap[largest] = temp;\n\t\t\t\tj = largest;\n\t\t\t}\n\t\t\telse\n\t\t\t\tbreak;\n\t\t}\n\t}\n\treturn sorted;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tforeach(long i; iterable)\n\t{\n\t\theap_size++;\n\t\theap[heap_size] = i;\n\t\tlong index = heap_size;\n\t\twhile(index > 1 && heap[index] > heap[index/2])\n\t\t{\n\t\t\tlong temp = heap[index];\n\t\t\theap[index] = heap[index/2];\n\t\t\theap[index/2] = temp;\n\t\t\tindex /= 2;\n\t\t}\n\t}\n\t\n\tlong result_index = 0;\n\twhile(heap_size > 0)\n\t{\n\t\tresult[result_index] = heap[1];\n\t\tresult_index++;\n\t\theap[1] = heap[heap_size];\n\t\theap_size--;\n\t\tlong index = 1;\n\t\twhile(index <= heap_size)\n\t\t{\n\t\t\tlong left_child = index*2;\n\t\t\tlong right_child = index*2 + 1;\n\t\t\tlong max_child = left_child;\n\t\t\tif(right_child <= heap_size && heap[right_child] > heap[left_child])\n\t\t\t\tmax_child = right_child;\n\t\t\tif(max_child <= heap_size && heap[max_child] > heap[index])\n\t\t\t{\n\t\t\t\tlong temp = heap[index];\n\t\t\t\theap[index] = heap[max_child];\n\t\t\t\theap[max_child] = temp;\n\t\t\t\tindex = max_child;\n\t\t\t}\n\t\t\telse\n\t\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tforeach(long i; iterable)\n\t{\n\t\theap[heap_size] = i;\n\t\theap_size++;\n\t\theapify_up(heap, heap_size);\n\t}\n\t\n\tfor(long i = 0; i < iterable.length; i++)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theapify_down(heap, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] heap = new long[iterable.length];\n\tforeach(long i; 0..iterable.length)\n\t{\n\t\theap[i] = iterable[i];\n\t}\n\t\n\tlong heap_size = heap.length;\n\t\n\tfor(long i = heap_size / 2 - 1; i >= 0; i--)\n\t{\n\t\theapify(heap, heap_size, i);\n\t}\n\t\n\tfor(long i = heap_size - 1; i >= 0; i--)\n\t{\n\t\tlong temp = heap[0];\n\t\theap[0] = heap[i];\n\t\theap[i] = temp;\n\t\t\n\t\theapify(heap, i, 0);\n\t}\n\t\n\treturn heap;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\t\n\tlong[] heap = new long[iterable.length];\n\t\n\tlong heap_size = 0;\n\t\n\tfor (long i = 0; i < iterable.length; i++)\n\t{\n\t\theap_size++;\n\t\theap[heap_size] = iterable[i];\n\t\t\n\t\tlong j = heap_size;\n\t\t\n\t\twhile (j > 1)\n\t\t{\n\t\t\tif (heap[j] < heap[j / 2])\n\t\t\t{\n\t\t\t\tlong temp = heap[j];\n\t\t\t\theap[j] = heap[j / 2];\n\t\t\t\theap[j / 2] = temp;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t\n\t\t\tj = j / 2;\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < iterable.length; i++)\n\t{\n\t\tresult[i] = heap[1];\n\t\t\n\t\theap[1] = heap[heap_size];\n\t\theap[heap_size] = 0;\n\t\theap_size--;\n\t\t\n\t\tlong j = 1;\n\t\t\n\t\twhile (j < heap_size)\n\t\t{\n\t\t\tlong left = j * 2;\n\t\t\tlong right = j * 2 + 1;\n\t\t\t\n\t\t\tif (left > heap_size)\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t\n\t\t\tif (right > heap_size)\n\t\t\t{\n\t\t\t\tif (heap[left] < heap[j])\n\t\t\t\t{\n\t\t\t\t\tlong temp = heap[left];\n\t\t\t\t\theap[left] = heap[j];\n\t\t\t\t\theap[j] = temp;\n\t\t\t\t\t\n\t\t\t\t\tj = left;\n\t\t\t\t}\n\t\t\t\t",
    "{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tforeach(long i; iterable)\n\t{\n\t\theap_size++;\n\t\theap[heap_size] = i;\n\t\tlong j = heap_size;\n\t\twhile(j > 1 && heap[j] > heap[j/2])\n\t\t{\n\t\t\tlong temp = heap[j];\n\t\t\theap[j] = heap[j/2];\n\t\t\theap[j/2] = temp;\n\t\t\tj = j/2;\n\t\t}\n\t}\n\t\n\tlong result_size = 0;\n\twhile(heap_size > 0)\n\t{\n\t\tresult_size++;\n\t\tresult[result_size] = heap[1];\n\t\theap[1] = heap[heap_size];\n\t\theap_size--;\n\t\tlong j = 1;\n\t\twhile(j <= heap_size)\n\t\t{\n\t\t\tlong max_child = j;\n\t\t\tif(j*2 <= heap_size && heap[j*2] > heap[max_child])\n\t\t\t\tmax_child = j*2;\n\t\t\tif(j*2+1 <= heap_size && heap[j*2+1] > heap[max_child])\n\t\t\t\tmax_child = j*2+1;\n\t\t\tif(max_child == j)\n\t\t\t\tbreak;\n\t\t\tlong temp = heap[j];\n\t\t\theap[j] = heap[max_child];\n\t\t\theap[max_child] = temp;\n\t\t\tj = max_child;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\t\n\tforeach(long i; iterable)\n\t{\n\t\tresult[i] = iterable[i];\n\t}\n\t\n\tlong n = result.length;\n\t\n\tfor (long i = n / 2 - 1; i >= 0; i--)\n\t{\n\t\theapify(result, n, i);\n\t}\n\t\n\tfor (long i = n - 1; i >= 0; i--)\n\t{\n\t\tlong temp = result[0];\n\t\tresult[0] = result[i];\n\t\tresult[i] = temp;\n\t\t\n\t\theapify(result, i, 0);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong[] heap_index = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tforeach(long i; 0 .. iterable.length)\n\t{\n\t\theap_size = heap_insert(heap, heap_index, heap_size, iterable[i]);\n\t}\n\t\n\tforeach(long i; 0 .. iterable.length)\n\t{\n\t\tresult[i] = heap_extract_min(heap, heap_index, heap_size);\n\t\theap_size--;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\t\n\t// copy the array\n\tforeach(i, v; iterable)\n\t\tresult[i] = v;\n\t\n\t// heapify\n\tfor(long i = result.length / 2 - 1; i >= 0; i--)\n\t\theapify(result, result.length, i);\n\t\n\t// sort\n\tfor(long i = result.length - 1; i >= 0; i--)\n\t{\n\t\tlong temp = result[0];\n\t\tresult[0] = result[i];\n\t\tresult[i] = temp;\n\t\t\n\t\theapify(result, i, 0);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] heap = new long[iterable.length];\n\tforeach(i, item; iterable)\n\t{\n\t\theap[i] = item;\n\t\tlong j = i;\n\t\twhile(j > 0)\n\t\t{\n\t\t\tlong parent = (j - 1) / 2;\n\t\t\tif(heap[j] > heap[parent])\n\t\t\t{\n\t\t\t\tlong temp = heap[j];\n\t\t\t\theap[j] = heap[parent];\n\t\t\t\theap[parent] = temp;\n\t\t\t}\n\t\t\tj = parent;\n\t\t}\n\t}\n\t\n\tlong[] sorted = new long[iterable.length];\n\tlong i = 0;\n\twhile(i < iterable.length)\n\t{\n\t\tsorted[i] = heap[0];\n\t\theap[0] = heap[heap.length - 1];\n\t\theap = heap[0..$-1];\n\t\tlong j = 0;\n\t\twhile(j < heap.length)\n\t\t{\n\t\t\tlong left = 2 * j + 1;\n\t\t\tlong right = 2 * j + 2;\n\t\t\tlong largest = j;\n\t\t\tif(left < heap.length && heap[left] > heap[largest])\n\t\t\t{\n\t\t\t\tlargest = left;\n\t\t\t}\n\t\t\tif(right < heap.length && heap[right] > heap[largest])\n\t\t\t{\n\t\t\t\tlargest = right;\n\t\t\t}\n\t\t\tif(largest != j)\n\t\t\t{\n\t\t\t\tlong temp = heap[j];\n\t\t\t\theap[j] = heap[largest];\n\t\t\t\theap[largest] = temp;\n\t\t\t\tj = largest;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn sorted;\n}",
    "{\n\tauto n = iterable.length;\n\tauto heap = new long[n];\n\tforeach(i, e; iterable)\n\t\theap[i] = e;\n\t\n\tfor(long i = n/2; i >= 0; i--)\n\t\theapify(heap, n, i);\n\t\n\tfor(long i = n-1; i >= 0; i--)\n\t{\n\t\tswap(heap[0], heap[i]);\n\t\theapify(heap, i, 0);\n\t}\n\t\n\treturn heap;\n}",
    "{\n\tint n = iterable.length;\n\tlong[] heap = new long[n];\n\tfor (int i = 0; i < n; i++)\n\t\theap[i] = iterable[i];\n\t\n\tfor (int i = n / 2 - 1; i >= 0; i--)\n\t\theapify(heap, n, i);\n\t\n\tfor (int i = n - 1; i >= 0; i--)\n\t{\n\t\tlong temp = heap[0];\n\t\theap[0] = heap[i];\n\t\theap[i] = temp;\n\t\theapify(heap, i, 0);\n\t}\n\treturn heap;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\t\n\tforeach(long i; iterable)\n\t{\n\t\tresult ~= i;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\t\n\t// create a heap\n\tHeap heap = new Heap(iterable);\n\t\n\t// sort the heap\n\theap.sort();\n\t\n\t// copy the heap to the result\n\tfor (int i = 0; i < heap.length; i++)\n\t{\n\t\tresult[i] = heap[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\t\n\tfor (int i = 0; i < iterable.length; i++) \n\t{\n\t\tresult[i] = iterable[i];\n\t}\n\t\n\tfor (int i = result.length / 2 - 1; i >= 0; i--) \n\t{\n\t\theapify(result, result.length, i);\n\t}\n\t\n\tfor (int i = result.length - 1; i >= 0; i--) \n\t{\n\t\tlong temp = result[0];\n\t\tresult[0] = result[i];\n\t\tresult[i] = temp;\n\t\theapify(result, i, 0);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] heap = new long[iterable.length];\n\tforeach(i, item; iterable)\n\t{\n\t\theap[i] = item;\n\t\theapify(heap, i);\n\t}\n\t\n\tlong[] sorted = new long[heap.length];\n\tforeach(i, item; heap)\n\t{\n\t\tsorted[i] = heap[0];\n\t\theap[0] = heap[heap.length - i - 1];\n\t\theapify(heap[0 .. heap.length - i - 1], 0);\n\t}\n\t\n\treturn sorted;\n}",
    "{\n\tlong[] heap = new long[iterable.length];\n\tlong[] result = new long[iterable.length];\n\t\n\tforeach(long i; 0..iterable.length)\n\t{\n\t\theap[i] = iterable[i];\n\t}\n\t\n\tforeach(long i; 0..iterable.length)\n\t{\n\t\tlong k = i;\n\t\tlong v = heap[k];\n\t\tbool heapified = false;\n\t\twhile(!heapified && (2*k+1) < iterable.length)\n\t\t{\n\t\t\tlong j = 2*k+1;\n\t\t\tif(j < (iterable.length-1))\n\t\t\t{\n\t\t\t\tif(heap[j] < heap[j+1])\n\t\t\t\t{\n\t\t\t\t\tj += 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(v >= heap[j])\n\t\t\t{\n\t\t\t\theapified = true;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\theap[k] = heap[j];\n\t\t\t\tk = j;\n\t\t\t}\n\t\t}\n\t\theap[k] = v;\n\t}\n\t\n\tforeach(long i; 0..iterable.length)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[iterable.length-i-1];\n\t\t\n\t\tlong k = 0;\n\t\tlong v = heap[k];\n\t\tbool heapified = false;\n\t\twhile(!heapified && (2*k+1) < iterable.length-i-1)\n\t\t{\n\t\t\tlong j = 2*k+1;\n\t\t\tif(j < (iterable.length-i-1))\n\t\t\t{\n\t\t\t\tif(heap[j] < heap[j+1])\n\t\t\t\t{\n\t\t\t\t\tj += 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(",
    "{\n\tlong[] heap = new long[iterable.length];\n\tforeach(i, item; iterable)\n\t{\n\t\theap[i] = item;\n\t\theapify(heap, i);\n\t}\n\t\n\tlong[] sorted = new long[iterable.length];\n\tforeach(i; 0 .. iterable.length)\n\t{\n\t\tsorted[i] = heap[0];\n\t\theap[0] = heap[heap.length - 1];\n\t\theap.length -= 1;\n\t\theapify(heap, 0);\n\t}\n\t\n\treturn sorted;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\t\n\t// create a heap from the iterable\n\tHeap heap = new Heap(iterable);\n\t\n\t// sort the heap\n\theap.sort();\n\t\n\t// copy the sorted heap into the result\n\tfor (int i = 0; i < result.length; i++)\n\t\tresult[i] = heap.pop();\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\t\n\t// create a heap\n\tlong[] heap = new long[iterable.length + 1];\n\theap[0] = 0;\n\t\n\t// insert elements into the heap\n\tfor (int i = 0; i < iterable.length; i++) \n\t{\n\t\theap[i + 1] = iterable[i];\n\t\theap[0]++;\n\t\t\n\t\t// bubble up\n\t\tint j = heap[0];\n\t\twhile (j > 1) \n\t\t{\n\t\t\tif (heap[j] < heap[j / 2]) \n\t\t\t{\n\t\t\t\tlong temp = heap[j];\n\t\t\t\theap[j] = heap[j / 2];\n\t\t\t\theap[j / 2] = temp;\n\t\t\t\tj = j / 2;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\t// extract elements from the heap\n\tfor (int i = 0; i < iterable.length; i++) \n\t{\n\t\tresult[i] = heap[1];\n\t\t\n\t\t// bubble down\n\t\theap[1] = heap[heap[0]];\n\t\theap[0]--;\n\t\t\n\t\tint j = 1;\n\t\twhile (j <= heap[0] / 2) \n\t\t{\n\t\t\tint k = j * 2;\n\t\t\tif (k + 1 <= heap[0] && heap[k + 1] < heap[k]) \n\t\t\t{\n\t\t\t\tk++;\n\t\t\t}\n\t\t\t\n\t\t\tif (heap[k] < heap[j]) \n\t\t\t{\n\t\t\t\tlong temp = heap[k];\n\t\t\t\theap[k] = heap[j];\n\t\t\t\theap[j] = temp;\n\t\t\t\tj = k;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t",
    "{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tfor(long i = 0; i < iterable.length; i++)\n\t{\n\t\theap_size = heap_insert(heap, heap_size, iterable[i]);\n\t}\n\t\n\tfor(long i = 0; i < iterable.length; i++)\n\t{\n\t\tresult[i] = heap_extract_max(heap, heap_size);\n\t\theap_size--;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\t\n\tforeach(long i; iterable)\n\t{\n\t\tresult ~= i;\n\t}\n\t\n\tforeach(long i; 0..result.length)\n\t{\n\t\tlong parent = (i - 1) / 2;\n\t\tlong left = 2 * i + 1;\n\t\tlong right = 2 * i + 2;\n\t\t\n\t\tif(left < result.length && result[left] > result[i])\n\t\t{\n\t\t\tlong temp = result[i];\n\t\t\tresult[i] = result[left];\n\t\t\tresult[left] = temp;\n\t\t}\n\t\t\n\t\tif(right < result.length && result[right] > result[i])\n\t\t{\n\t\t\tlong temp = result[i];\n\t\t\tresult[i] = result[right];\n\t\t\tresult[right] = temp;\n\t\t}\n\t\t\n\t\tif(parent >= 0 && result[parent] < result[i])\n\t\t{\n\t\t\tlong temp = result[i];\n\t\t\tresult[i] = result[parent];\n\t\t\tresult[parent] = temp;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\t\n\tforeach(long i; iterable)\n\t{\n\t\tresult[i] = iterable[i];\n\t}\n\t\n\tlong n = result.length;\n\t\n\tfor(long i = n/2-1; i >= 0; i--)\n\t{\n\t\theapify(result, n, i);\n\t}\n\t\n\tfor(long i = n-1; i >= 0; i--)\n\t{\n\t\tlong temp = result[0];\n\t\tresult[0] = result[i];\n\t\tresult[i] = temp;\n\t\t\n\t\theapify(result, i, 0);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length + 1];\n\tlong heap_size = 0;\n\t\n\tforeach(long i; iterable)\n\t{\n\t\theap_size++;\n\t\theap[heap_size] = i;\n\t\tlong j = heap_size;\n\t\twhile(j > 1 && heap[j] > heap[j/2])\n\t\t{\n\t\t\tlong temp = heap[j];\n\t\t\theap[j] = heap[j/2];\n\t\t\theap[j/2] = temp;\n\t\t\tj = j/2;\n\t\t}\n\t}\n\t\n\tlong i = 0;\n\twhile(heap_size > 0)\n\t{\n\t\tresult[i] = heap[1];\n\t\theap[1] = heap[heap_size];\n\t\theap_size--;\n\t\tlong j = 1;\n\t\twhile(j <= heap_size)\n\t\t{\n\t\t\tlong max = j;\n\t\t\tif(j*2 <= heap_size && heap[j*2] > heap[max])\n\t\t\t\tmax = j*2;\n\t\t\tif(j*2 + 1 <= heap_size && heap[j*2 + 1] > heap[max])\n\t\t\t\tmax = j*2 + 1;\n\t\t\tif(max == j)\n\t\t\t\tbreak;\n\t\t\tlong temp = heap[j];\n\t\t\theap[j] = heap[max];\n\t\t\theap[max] = temp;\n\t\t\tj = max;\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tforeach(long i; iterable)\n\t{\n\t\theap_size++;\n\t\theap[heap_size] = i;\n\t\tlong j = heap_size;\n\t\twhile(j > 1 && heap[j] > heap[j/2])\n\t\t{\n\t\t\tlong temp = heap[j];\n\t\t\theap[j] = heap[j/2];\n\t\t\theap[j/2] = temp;\n\t\t\tj = j/2;\n\t\t}\n\t}\n\t\n\tlong i = 0;\n\twhile(heap_size > 0)\n\t{\n\t\tresult[i] = heap[1];\n\t\theap[1] = heap[heap_size];\n\t\theap_size--;\n\t\tlong j = 1;\n\t\twhile(j <= heap_size)\n\t\t{\n\t\t\tlong max = j;\n\t\t\tif(j*2 <= heap_size && heap[j*2] > heap[max])\n\t\t\t\tmax = j*2;\n\t\t\tif(j*2+1 <= heap_size && heap[j*2+1] > heap[max])\n\t\t\t\tmax = j*2+1;\n\t\t\tif(max == j)\n\t\t\t\tbreak;\n\t\t\tlong temp = heap[j];\n\t\t\theap[j] = heap[max];\n\t\t\theap[max] = temp;\n\t\t\tj = max;\n\t\t}\n\t\ti++;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tauto heap = new Heap!(long)(iterable);\n\treturn heap.sort();\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tforeach(long i; iterable)\n\t{\n\t\theap_size++;\n\t\theap[heap_size] = i;\n\t\tlong j = heap_size;\n\t\twhile(j > 1 && heap[j] > heap[j/2])\n\t\t{\n\t\t\tlong temp = heap[j];\n\t\t\theap[j] = heap[j/2];\n\t\t\theap[j/2] = temp;\n\t\t\tj /= 2;\n\t\t}\n\t}\n\t\n\tlong i = 0;\n\twhile(heap_size > 0)\n\t{\n\t\tresult[i] = heap[1];\n\t\theap[1] = heap[heap_size];\n\t\theap_size--;\n\t\t\n\t\tlong j = 1;\n\t\twhile(2*j <= heap_size)\n\t\t{\n\t\t\tlong k = 2*j;\n\t\t\tif(k < heap_size && heap[k] < heap[k+1])\n\t\t\t\tk++;\n\t\t\tif(heap[j] >= heap[k])\n\t\t\t\tbreak;\n\t\t\tlong temp = heap[j];\n\t\t\theap[j] = heap[k];\n\t\t\theap[k] = temp;\n\t\t\tj = k;\n\t\t}\n\t\ti++;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\t\n\tfor (int i = 0; i < iterable.length; i++)\n\t{\n\t\theap[i] = iterable[i];\n\t}\n\t\n\tfor (int i = 0; i < iterable.length; i++)\n\t{\n\t\tfor (int j = 0; j < iterable.length; j++)\n\t\t{\n\t\t\tif (heap[i] < heap[j])\n\t\t\t{\n\t\t\t\tlong temp = heap[i];\n\t\t\t\theap[i] = heap[j];\n\t\t\t\theap[j] = temp;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < iterable.length; i++)\n\t{\n\t\tresult[i] = heap[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tforeach(long i; iterable)\n\t{\n\t\theap_size++;\n\t\theap[heap_size] = i;\n\t\tlong j = heap_size;\n\t\twhile(j > 1 && heap[j] > heap[j/2])\n\t\t{\n\t\t\tlong temp = heap[j];\n\t\t\theap[j] = heap[j/2];\n\t\t\theap[j/2] = temp;\n\t\t\tj /= 2;\n\t\t}\n\t}\n\t\n\tlong i = 0;\n\twhile(heap_size > 0)\n\t{\n\t\tresult[i] = heap[1];\n\t\theap[1] = heap[heap_size];\n\t\theap_size--;\n\t\t\n\t\tlong j = 1;\n\t\twhile(j <= heap_size)\n\t\t{\n\t\t\tlong max_index = j;\n\t\t\tif(j*2 <= heap_size && heap[j*2] > heap[max_index])\n\t\t\t\tmax_index = j*2;\n\t\t\tif(j*2+1 <= heap_size && heap[j*2+1] > heap[max_index])\n\t\t\t\tmax_index = j*2+1;\n\t\t\tif(max_index == j)\n\t\t\t\tbreak;\n\t\t\tlong temp = heap[j];\n\t\t\theap[j] = heap[max_index];\n\t\t\theap[max_index] = temp;\n\t\t\tj = max_index;\n\t\t}\n\t\ti++;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tforeach(long i; iterable)\n\t{\n\t\theap_size++;\n\t\theap[heap_size] = i;\n\t\tlong j = heap_size;\n\t\twhile(j > 1 && heap[j] > heap[j/2])\n\t\t{\n\t\t\tlong temp = heap[j];\n\t\t\theap[j] = heap[j/2];\n\t\t\theap[j/2] = temp;\n\t\t\tj = j/2;\n\t\t}\n\t}\n\t\n\tlong i = 0;\n\twhile(heap_size > 0)\n\t{\n\t\tresult[i] = heap[1];\n\t\theap[1] = heap[heap_size];\n\t\theap_size--;\n\t\ti++;\n\t\tlong j = 1;\n\t\twhile(j <= heap_size/2)\n\t\t{\n\t\t\tlong k = 2*j;\n\t\t\tif(k < heap_size && heap[k] < heap[k+1])\n\t\t\t\tk++;\n\t\t\tif(heap[j] > heap[k])\n\t\t\t\tbreak;\n\t\t\tlong temp = heap[j];\n\t\t\theap[j] = heap[k];\n\t\t\theap[k] = temp;\n\t\t\tj = k;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] heap = new long[iterable.length];\n\tlong[] result = new long[iterable.length];\n\t\n\tforeach(i, item; iterable)\n\t{\n\t\theap[i] = item;\n\t\t\n\t\tif(i > 0)\n\t\t{\n\t\t\tlong parent = (i - 1) / 2;\n\t\t\t\n\t\t\twhile(heap[i] > heap[parent])\n\t\t\t{\n\t\t\t\tlong temp = heap[i];\n\t\t\t\theap[i] = heap[parent];\n\t\t\t\theap[parent] = temp;\n\t\t\t\t\n\t\t\t\ti = parent;\n\t\t\t\tparent = (i - 1) / 2;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tlong index = 0;\n\t\n\twhile(index < iterable.length)\n\t{\n\t\tresult[index] = heap[0];\n\t\t\n\t\theap[0] = heap[iterable.length - index - 1];\n\t\t\n\t\tlong i = 0;\n\t\tlong left = 1;\n\t\tlong right = 2;\n\t\t\n\t\twhile(left < iterable.length - index)\n\t\t{\n\t\t\tif(right < iterable.length - index)\n\t\t\t{\n\t\t\t\tif(heap[i] < heap[left] || heap[i] < heap[right])\n\t\t\t\t{\n\t\t\t\t\tif(heap[left] > heap[right])\n\t\t\t\t\t{\n\t\t\t\t\t\tlong temp = heap[i];\n\t\t\t\t\t\theap[i] = heap[left];\n\t\t\t\t\t\theap[left] = temp;\n\t\t\t\t\t\t\n\t\t\t\t\t\ti = left;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tlong temp = heap[i];\n\t\t\t\t\t\theap[i] = heap[right];\n\t\t\t\t\t\theap[right] = temp;",
    "{\n\tint size = iterable.length;\n\tfor (int i = size / 2 - 1; i >= 0; i--) \n\t{\n\t\theapify(iterable, size, i);\n\t}\n\tfor (int i = size - 1; i >= 0; i--) \n\t{\n\t\tlong temp = iterable[0];\n\t\titerable[0] = iterable[i];\n\t\titerable[i] = temp;\n\t\theapify(iterable, i, 0);\n\t}\n\treturn iterable;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tforeach(i; 0 .. iterable.length)\n\t{\n\t\tresult[i] = iterable[i];\n\t}\n\t\n\tlong size = result.length;\n\t\n\tfor(long i = size / 2 - 1; i >= 0; i--)\n\t{\n\t\theapify(result, size, i);\n\t}\n\t\n\tfor(long i = size - 1; i >= 0; i--)\n\t{\n\t\tlong temp = result[0];\n\t\tresult[0] = result[i];\n\t\tresult[i] = temp;\n\t\t\n\t\theapify(result, i, 0);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\t\n\tfor (int i = 0; i < iterable.length; i++)\n\t{\n\t\tresult[i] = iterable[i];\n\t}\n\t\n\tfor (int i = result.length / 2 - 1; i >= 0; i--)\n\t{\n\t\theapify(result, result.length, i);\n\t}\n\t\n\tfor (int i = result.length - 1; i >= 0; i--)\n\t{\n\t\tlong temp = result[0];\n\t\tresult[0] = result[i];\n\t\tresult[i] = temp;\n\t\t\n\t\theapify(result, i, 0);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tforeach(i, item; iterable)\n\t{\n\t\tresult[i] = item;\n\t}\n\t\n\tlong[] heap = new long[result.length];\n\tlong heap_size = 0;\n\t\n\tforeach(i, item; result)\n\t{\n\t\theap[heap_size] = item;\n\t\theap_size++;\n\t\t\n\t\tlong j = heap_size - 1;\n\t\twhile(j > 0)\n\t\t{\n\t\t\tlong parent = (j - 1) / 2;\n\t\t\tif(heap[parent] < heap[j])\n\t\t\t{\n\t\t\t\tlong temp = heap[parent];\n\t\t\t\theap[parent] = heap[j];\n\t\t\t\theap[j] = temp;\n\t\t\t\t\n\t\t\t\tj = parent;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i, item; result)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\t\n\t\tlong j = 0;\n\t\twhile(j < heap_size)\n\t\t{\n\t\t\tlong left = 2 * j + 1;\n\t\t\tlong right = 2 * j + 2;\n\t\t\t\n\t\t\tlong largest = j;\n\t\t\tif(left < heap_size && heap[left] > heap[largest])\n\t\t\t{\n\t\t\t\tlargest = left;\n\t\t\t}\n\t\t\tif(right < heap_size && heap[right] > heap[largest])\n\t\t\t{\n\t\t\t\tlargest = right;\n\t\t\t}\n\t\t\t\n\t\t\tif(largest != j)\n\t\t\t{\n\t\t\t\tlong temp = heap[largest];\n\t\t\t\theap[largest] = heap[j];\n\t\t\t\theap[",
    "{\n\tlong[] heap = new long[iterable.length];\n\tfor (long i = 0; i < iterable.length; i++) \n\t{\n\t\theap[i] = iterable[i];\n\t}\n\t\n\tfor (long i = 0; i < heap.length; i++) \n\t{\n\t\tlong j = i;\n\t\twhile (j > 0) \n\t\t{\n\t\t\tlong parent = (j - 1) / 2;\n\t\t\tif (heap[parent] < heap[j]) \n\t\t\t{\n\t\t\t\tlong temp = heap[j];\n\t\t\t\theap[j] = heap[parent];\n\t\t\t\theap[parent] = temp;\n\t\t\t}\n\t\t\tj = parent;\n\t\t}\n\t}\n\t\n\tfor (long i = heap.length - 1; i >= 0; i--) \n\t{\n\t\tlong temp = heap[0];\n\t\theap[0] = heap[i];\n\t\theap[i] = temp;\n\t\t\n\t\tlong j = 0;\n\t\twhile (true) \n\t\t{\n\t\t\tlong left = 2 * j + 1;\n\t\t\tlong right = 2 * j + 2;\n\t\t\tlong largest = j;\n\t\t\tif (left < i && heap[left] > heap[largest]) \n\t\t\t{\n\t\t\t\tlargest = left;\n\t\t\t}\n\t\t\tif (right < i && heap[right] > heap[largest]) \n\t\t\t{\n\t\t\t\tlargest = right;\n\t\t\t}\n\t\t\tif (largest != j) \n\t\t\t{\n\t\t\t\tlong temp2 = heap[j];\n\t\t\t\theap[j] = heap[largest];\n\t\t\t\theap[largest] = temp2;\n\t\t\t\tj = largest;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn heap;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong[] heap_index = new long[iterable.length];\n\tlong heap_size = 0;\n\tlong i = 0;\n\tlong j = 0;\n\tlong temp = 0;\n\tlong temp_index = 0;\n\tlong temp_index_2 = 0;\n\tlong temp_index_3 = 0;\n\tlong temp_index_4 = 0;\n\tlong temp_index_5 = 0;\n\tlong temp_index_6 = 0;\n\tlong temp_index_7 = 0;\n\tlong temp_index_8 = 0;\n\tlong temp_index_9 = 0;\n\tlong temp_index_10 = 0;\n\tlong temp_index_11 = 0;\n\tlong temp_index_12 = 0;\n\tlong temp_index_13 = 0;\n\tlong temp_index_14 = 0;\n\tlong temp_index_15 = 0;\n\tlong temp_index_16 = 0;\n\tlong temp_index_17 = 0;\n\tlong temp_index_18 = 0;\n\tlong temp_index_19 = 0;\n\tlong temp_index_20 = 0;\n\tlong temp_index_21 = 0;\n\tlong temp_index_22 = 0;\n\tlong temp_index_23 = 0;\n\tlong temp_index_24 = 0;\n\tlong temp_index_25 = 0;\n\tlong temp_index_26 = 0;\n\tlong temp_index_27 = 0;\n\tlong temp_index_28 = 0;\n\tlong temp_index_29 = 0;\n\tlong temp_index_30 = 0;\n\tlong temp_index_31 = 0;\n\tlong temp_index_32 = 0;\n\tlong temp_index_33 = 0;\n\tlong temp_index_34 = 0;\n\tlong temp_index_35 = 0;\n\tlong temp_index_36 = 0;\n\tlong temp_index_37 = 0;\n\tlong temp_index_38 = 0;\n\tlong temp_index_39 = 0;\n\tlong temp_index_40 =",
    "{\n\tlong[] result = new long[iterable.length];\n\t\n\t// copy the array\n\tfor (int i = 0; i < iterable.length; i++)\n\t{\n\t\tresult[i] = iterable[i];\n\t}\n\t\n\t// build the heap\n\tfor (int i = result.length / 2 - 1; i >= 0; i--)\n\t{\n\t\theapify(result, result.length, i);\n\t}\n\t\n\t// extract the elements\n\tfor (int i = result.length - 1; i >= 0; i--)\n\t{\n\t\t// swap the root with the last element\n\t\tlong temp = result[0];\n\t\tresult[0] = result[i];\n\t\tresult[i] = temp;\n\t\t\n\t\t// heapify the root element\n\t\theapify(result, i, 0);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] heap = new long[iterable.length];\n\tforeach(long i; 0..iterable.length)\n\t\theap[i] = iterable[i];\n\t\n\tforeach(long i; 0..iterable.length)\n\t{\n\t\tlong j = i;\n\t\twhile(j > 0)\n\t\t{\n\t\t\tlong parent = (j - 1) / 2;\n\t\t\tif(heap[j] > heap[parent])\n\t\t\t{\n\t\t\t\tlong temp = heap[j];\n\t\t\t\theap[j] = heap[parent];\n\t\t\t\theap[parent] = temp;\n\t\t\t\tj = parent;\n\t\t\t}\n\t\t\telse\n\t\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tforeach(long i; 0..iterable.length)\n\t{\n\t\tlong temp = heap[0];\n\t\theap[0] = heap[iterable.length - i - 1];\n\t\theap[iterable.length - i - 1] = temp;\n\t\t\n\t\tlong j = 0;\n\t\twhile(true)\n\t\t{\n\t\t\tlong left = 2 * j + 1;\n\t\t\tlong right = 2 * j + 2;\n\t\t\tlong largest = j;\n\t\t\tif(left < iterable.length - i && heap[left] > heap[largest])\n\t\t\t\tlargest = left;\n\t\t\tif(right < iterable.length - i && heap[right] > heap[largest])\n\t\t\t\tlargest = right;\n\t\t\tif(largest != j)\n\t\t\t{\n\t\t\t\tlong temp = heap[j];\n\t\t\t\theap[j] = heap[largest];\n\t\t\t\theap[largest] = temp;\n\t\t\t\tj = largest;\n\t\t\t}\n\t\t\telse\n\t\t\t\tbreak;\n\t\t}\n\t}\n\treturn heap;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tfor (int i = 0; i < iterable.length; i++)\n\t\tresult[i] = iterable[i];\n\t\n\tfor (int i = result.length / 2 - 1; i >= 0; i--)\n\t\theapify(result, result.length, i);\n\t\n\tfor (int i = result.length - 1; i >= 0; i--)\n\t{\n\t\tlong temp = result[0];\n\t\tresult[0] = result[i];\n\t\tresult[i] = temp;\n\t\theapify(result, i, 0);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\t\n\t// copy the array\n\tforeach(i, item; iterable)\n\t{\n\t\tresult[i] = item;\n\t}\n\t\n\t// build the heap\n\tfor(long i = result.length / 2 - 1; i >= 0; i--)\n\t{\n\t\theapify(result, result.length, i);\n\t}\n\t\n\t// extract the elements from the heap\n\tfor(long i = result.length - 1; i >= 0; i--)\n\t{\n\t\t// swap the root with the last element\n\t\tlong temp = result[0];\n\t\tresult[0] = result[i];\n\t\tresult[i] = temp;\n\t\t\n\t\t// heapify the root element\n\t\theapify(result, i, 0);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] heap = new long[iterable.length];\n\tforeach(i, item; iterable)\n\t{\n\t\theap[i] = item;\n\t\theapify(heap, i);\n\t}\n\t\n\tlong[] result = new long[iterable.length];\n\tforeach(i, item; heap)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[$ - 1];\n\t\theap[$ - 1] = 0;\n\t\theapify(heap, 0);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tint heap_size = 0;\n\t\n\tfor (int i = 0; i < iterable.length; i++)\n\t{\n\t\theap_size = heap_insert(heap, heap_size, iterable[i]);\n\t}\n\t\n\tfor (int i = 0; i < iterable.length; i++)\n\t{\n\t\tresult[i] = heap_extract_max(heap, heap_size);\n\t\theap_size--;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\t\n\tfor (int i = 0; i < iterable.length; i++)\n\t{\n\t\theap[i] = iterable[i];\n\t}\n\t\n\tfor (int i = 0; i < iterable.length; i++)\n\t{\n\t\tresult[i] = heap_pop(heap);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\t\n\t// make a heap\n\tlong[] heap = new long[iterable.length + 1];\n\theap[0] = 0;\n\tfor (long i = 0; i < iterable.length; i++)\n\t{\n\t\theap[i + 1] = iterable[i];\n\t\tlong j = i + 1;\n\t\twhile (j > 1)\n\t\t{\n\t\t\tlong parent = j / 2;\n\t\t\tif (heap[parent] < heap[j])\n\t\t\t{\n\t\t\t\tlong temp = heap[parent];\n\t\t\t\theap[parent] = heap[j];\n\t\t\t\theap[j] = temp;\n\t\t\t\tj = parent;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\t// sort\n\tfor (long i = 0; i < iterable.length; i++)\n\t{\n\t\tresult[i] = heap[1];\n\t\theap[1] = heap[heap[0]];\n\t\theap[0]--;\n\t\tlong j = 1;\n\t\twhile (j < heap[0])\n\t\t{\n\t\t\tlong left = j * 2;\n\t\t\tlong right = j * 2 + 1;\n\t\t\tif (left > heap[0])\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if (right > heap[0])\n\t\t\t{\n\t\t\t\tif (heap[j] < heap[left])\n\t\t\t\t{\n\t\t\t\t\tlong temp = heap[j];\n\t\t\t\t\theap[j] = heap[left];\n\t\t\t\t\theap[left] = temp;\n\t\t\t\t\tj = left;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t",
    "{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tforeach(long i; iterable)\n\t{\n\t\theap_size++;\n\t\theap[heap_size] = i;\n\t\tlong j = heap_size;\n\t\twhile(j > 1 && heap[j] > heap[j/2])\n\t\t{\n\t\t\tlong temp = heap[j];\n\t\t\theap[j] = heap[j/2];\n\t\t\theap[j/2] = temp;\n\t\t\tj = j/2;\n\t\t}\n\t}\n\t\n\tlong i = 0;\n\twhile(heap_size > 0)\n\t{\n\t\tresult[i] = heap[1];\n\t\theap[1] = heap[heap_size];\n\t\theap_size--;\n\t\ti++;\n\t\tlong j = 1;\n\t\twhile(j <= heap_size)\n\t\t{\n\t\t\tlong max_index = j;\n\t\t\tif(j*2 <= heap_size && heap[j*2] > heap[max_index])\n\t\t\t{\n\t\t\t\tmax_index = j*2;\n\t\t\t}\n\t\t\tif(j*2+1 <= heap_size && heap[j*2+1] > heap[max_index])\n\t\t\t{\n\t\t\t\tmax_index = j*2+1;\n\t\t\t}\n\t\t\tif(max_index == j)\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tlong temp = heap[j];\n\t\t\theap[j] = heap[max_index];\n\t\t\theap[max_index] = temp;\n\t\t\tj = max_index;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] heap = new long[iterable.length];\n\tlong[] result = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tforeach(long item; iterable)\n\t{\n\t\theap_size++;\n\t\theap[heap_size] = item;\n\t\theapify_up(heap, heap_size);\n\t}\n\t\n\tforeach(long item; result)\n\t{\n\t\titem = heap[1];\n\t\theap[1] = heap[heap_size];\n\t\theap_size--;\n\t\theapify_down(heap, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] heap = new long[iterable.length];\n\tforeach(i,v; iterable)\n\t{\n\t\theap[i] = v;\n\t}\n\t\n\tfor(long i = (heap.length / 2) - 1; i >= 0; i--)\n\t{\n\t\theapify(heap, heap.length, i);\n\t}\n\t\n\tfor(long i = heap.length - 1; i >= 0; i--)\n\t{\n\t\tlong temp = heap[0];\n\t\theap[0] = heap[i];\n\t\theap[i] = temp;\n\t\theapify(heap, i, 0);\n\t}\n\t\n\treturn heap;\n}",
    "{\n\tlong[] heap = new long[iterable.length];\n\tforeach(i, v; iterable)\n\t{\n\t\theap[i] = v;\n\t}\n\t\n\t// build heap\n\tfor(long i = floor(heap.length / 2); i >= 0; i--)\n\t{\n\t\theapify(heap, i, heap.length);\n\t}\n\t\n\t// sort\n\tfor(long i = heap.length - 1; i > 0; i--)\n\t{\n\t\tlong temp = heap[0];\n\t\theap[0] = heap[i];\n\t\theap[i] = temp;\n\t\theapify(heap, 0, i);\n\t}\n\t\n\treturn heap;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tforeach(long i; iterable)\n\t{\n\t\theap_size++;\n\t\theap[heap_size] = i;\n\t\tlong j = heap_size;\n\t\twhile(j > 1 && heap[j] > heap[j / 2])\n\t\t{\n\t\t\tlong temp = heap[j];\n\t\t\theap[j] = heap[j / 2];\n\t\t\theap[j / 2] = temp;\n\t\t\tj /= 2;\n\t\t}\n\t}\n\t\n\tlong i = 0;\n\twhile(heap_size > 0)\n\t{\n\t\tresult[i] = heap[1];\n\t\theap[1] = heap[heap_size];\n\t\theap_size--;\n\t\tlong j = 1;\n\t\twhile(j <= heap_size)\n\t\t{\n\t\t\tlong max = j;\n\t\t\tif(j * 2 <= heap_size && heap[j * 2] > heap[max])\n\t\t\t\tmax = j * 2;\n\t\t\tif(j * 2 + 1 <= heap_size && heap[j * 2 + 1] > heap[max])\n\t\t\t\tmax = j * 2 + 1;\n\t\t\tif(max == j)\n\t\t\t\tbreak;\n\t\t\tlong temp = heap[j];\n\t\t\theap[j] = heap[max];\n\t\t\theap[max] = temp;\n\t\t\tj = max;\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tforeach(long i; iterable)\n\t{\n\t\theap_size++;\n\t\theap[heap_size] = i;\n\t\tlong j = heap_size;\n\t\twhile(j > 1)\n\t\t{\n\t\t\tlong parent = j / 2;\n\t\t\tif(heap[parent] < heap[j])\n\t\t\t{\n\t\t\t\tlong temp = heap[parent];\n\t\t\t\theap[parent] = heap[j];\n\t\t\t\theap[j] = temp;\n\t\t\t\tj = parent;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tlong i = 0;\n\twhile(heap_size > 0)\n\t{\n\t\tresult[i] = heap[1];\n\t\theap[1] = heap[heap_size];\n\t\theap_size--;\n\t\tlong j = 1;\n\t\twhile(j <= heap_size)\n\t\t{\n\t\t\tlong left = j * 2;\n\t\t\tlong right = j * 2 + 1;\n\t\t\tlong largest = j;\n\t\t\tif(left <= heap_size && heap[left] > heap[largest])\n\t\t\t{\n\t\t\t\tlargest = left;\n\t\t\t}\n\t\t\tif(right <= heap_size && heap[right] > heap[largest])\n\t\t\t{\n\t\t\t\tlargest = right;\n\t\t\t}\n\t\t\tif(largest != j)\n\t\t\t{\n\t\t\t\tlong temp = heap[largest];\n\t\t\t\theap[largest] = heap[j];\n\t\t\t\theap[j] = temp;\n\t\t\t\tj = largest;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\ti++;\n",
    "{\n\tlong[] heap = new long[iterable.length];\n\tint heap_size = 0;\n\t\n\tforeach(long item; iterable)\n\t{\n\t\theap[heap_size] = item;\n\t\theap_size++;\n\t\t\n\t\tint i = heap_size - 1;\n\t\twhile(i > 0)\n\t\t{\n\t\t\tint parent = (i - 1) / 2;\n\t\t\tif(heap[i] > heap[parent])\n\t\t\t{\n\t\t\t\tlong temp = heap[i];\n\t\t\t\theap[i] = heap[parent];\n\t\t\t\theap[parent] = temp;\n\t\t\t\ti = parent;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tlong[] result = new long[heap_size];\n\tint result_size = 0;\n\t\n\twhile(heap_size > 0)\n\t{\n\t\tresult[result_size] = heap[0];\n\t\tresult_size++;\n\t\t\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\t\n\t\tint i = 0;\n\t\twhile(i < heap_size)\n\t\t{\n\t\t\tint left = 2 * i + 1;\n\t\t\tint right = 2 * i + 2;\n\t\t\t\n\t\t\tif(left >= heap_size)\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t\n\t\t\tint max = i;\n\t\t\tif(heap[left] > heap[max])\n\t\t\t{\n\t\t\t\tmax = left;\n\t\t\t}\n\t\t\tif(right < heap_size && heap[right] > heap[max])\n\t\t\t{\n\t\t\t\tmax = right;\n\t\t\t}\n\t\t\t\n\t\t\tif(max != i)\n\t\t\t{\n\t\t\t\tlong temp = heap[i];\n\t\t\t\the",
    "{\n\tint n = iterable.length;\n\tfor (int i = n / 2 - 1; i >= 0; i--)\n\t\theapify(iterable, n, i);\n\tfor (int i = n - 1; i >= 0; i--) \n\t{\n\t\tlong temp = iterable[0];\n\t\titerable[0] = iterable[i];\n\t\titerable[i] = temp;\n\t\theapify(iterable, i, 0);\n\t}\n\treturn iterable;\n}",
    "{\n\tint n = iterable.length;\n\tfor (int i = n / 2 - 1; i >= 0; i--) \n\t{\n\t\theapify(iterable, n, i);\n\t}\n\tfor (int i = n - 1; i >= 0; i--) \n\t{\n\t\tlong temp = iterable[0];\n\t\titerable[0] = iterable[i];\n\t\titerable[i] = temp;\n\t\theapify(iterable, i, 0);\n\t}\n\treturn iterable;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong[] heap_index = new long[iterable.length];\n\tlong heap_size = 0;\n\tlong i = 0;\n\tlong j = 0;\n\tlong temp = 0;\n\tlong temp_index = 0;\n\t\n\tfor (i = 0; i < iterable.length; i++)\n\t{\n\t\theap[i] = iterable[i];\n\t\theap_index[i] = i;\n\t\theap_size++;\n\t\t\n\t\tj = i;\n\t\twhile (j > 0)\n\t\t{\n\t\t\tif (heap[j] < heap[(j - 1) / 2])\n\t\t\t{\n\t\t\t\ttemp = heap[j];\n\t\t\t\ttemp_index = heap_index[j];\n\t\t\t\theap[j] = heap[(j - 1) / 2];\n\t\t\t\theap_index[j] = heap_index[(j - 1) / 2];\n\t\t\t\theap[(j - 1) / 2] = temp;\n\t\t\t\theap_index[(j - 1) / 2] = temp_index;\n\t\t\t\tj = (j - 1) / 2;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor (i = 0; i < iterable.length; i++)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_index[0] = heap_index[heap_size - 1];\n\t\theap_size--;\n\t\t\n\t\tj = 0;\n\t\twhile (j < heap_size)\n\t\t{\n\t\t\tif (j * 2 + 1 >= heap_size)\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if (j * 2 + 2 >= heap_size",
    "{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tint heap_size = 0;\n\t\n\tforeach(long item; iterable)\n\t{\n\t\theap_size = heap_insert(heap, heap_size, item);\n\t}\n\t\n\tint i = 0;\n\twhile(heap_size > 0)\n\t{\n\t\tresult[i] = heap_extract_max(heap, heap_size);\n\t\theap_size--;\n\t\ti++;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tfor (long i = 0; i < iterable.length; i++)\n\t{\n\t\theap[heap_size] = iterable[i];\n\t\theap_size++;\n\t\theapify_up(heap, heap_size);\n\t}\n\t\n\tfor (long i = 0; i < iterable.length; i++)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theapify_down(heap, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tforeach(long i; iterable)\n\t{\n\t\theap_size++;\n\t\theap[heap_size] = i;\n\t\tlong child = heap_size;\n\t\tlong parent = child / 2;\n\t\twhile(parent > 0 && heap[parent] < heap[child])\n\t\t{\n\t\t\tlong temp = heap[parent];\n\t\t\theap[parent] = heap[child];\n\t\t\theap[child] = temp;\n\t\t\tchild = parent;\n\t\t\tparent = child / 2;\n\t\t}\n\t}\n\t\n\tlong result_index = 0;\n\twhile(heap_size > 0)\n\t{\n\t\tresult[result_index] = heap[1];\n\t\tresult_index++;\n\t\theap[1] = heap[heap_size];\n\t\theap_size--;\n\t\tlong parent = 1;\n\t\tlong child = parent * 2;\n\t\twhile(child <= heap_size)\n\t\t{\n\t\t\tif(child < heap_size && heap[child] < heap[child + 1])\n\t\t\t{\n\t\t\t\tchild++;\n\t\t\t}\n\t\t\tif(heap[parent] < heap[child])\n\t\t\t{\n\t\t\t\tlong temp = heap[parent];\n\t\t\t\theap[parent] = heap[child];\n\t\t\t\theap[child] = temp;\n\t\t\t\tparent = child;\n\t\t\t\tchild = parent * 2;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tfor (int i = 0; i < iterable.length; i++) \n\t{\n\t\tresult[i] = iterable[i];\n\t}\n\t\n\tfor (int i = (result.length - 1) / 2; i >= 0; i--) \n\t{\n\t\theapify(result, i, result.length);\n\t}\n\t\n\tfor (int i = result.length - 1; i >= 0; i--) \n\t{\n\t\tlong temp = result[0];\n\t\tresult[0] = result[i];\n\t\tresult[i] = temp;\n\t\theapify(result, 0, i);\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tint heap_size = 0;\n\t\n\tforeach(long item; iterable)\n\t{\n\t\theap_size = heap_insert(heap, heap_size, item);\n\t}\n\t\n\tforeach(ref long item; result)\n\t{\n\t\titem = heap_extract(heap, heap_size);\n\t\theap_size--;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] heap = new long[iterable.length];\n\tforeach(i, item; iterable)\n\t{\n\t\theap[i] = item;\n\t\theap_push(heap, i);\n\t}\n\t\n\tlong[] result = new long[iterable.length];\n\tforeach(i; 0 .. iterable.length)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap.length - 1];\n\t\theap_pop(heap, heap.length - 1);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\t\n\tforeach(long i; iterable)\n\t{\n\t\tresult[i] = iterable[i];\n\t}\n\t\n\tlong[] heap = new long[result.length];\n\t\n\tlong heap_size = 0;\n\t\n\tforeach(long i; result)\n\t{\n\t\theap_size = heap_size + 1;\n\t\theap[heap_size] = result[i];\n\t\t\n\t\tlong current_index = heap_size;\n\t\t\n\t\twhile(current_index > 1)\n\t\t{\n\t\t\tlong parent_index = current_index / 2;\n\t\t\t\n\t\t\tif(heap[parent_index] < heap[current_index])\n\t\t\t{\n\t\t\t\tlong temp = heap[parent_index];\n\t\t\t\theap[parent_index] = heap[current_index];\n\t\t\t\theap[current_index] = temp;\n\t\t\t\t\n\t\t\t\tcurrent_index = parent_index;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tlong[] sorted_array = new long[result.length];\n\t\n\tlong sorted_array_index = 0;\n\t\n\twhile(heap_size > 0)\n\t{\n\t\tsorted_array[sorted_array_index] = heap[1];\n\t\t\n\t\theap[1] = heap[heap_size];\n\t\t\n\t\theap_size = heap_size - 1;\n\t\t\n\t\tlong current_index = 1;\n\t\t\n\t\twhile(current_index <= heap_size)\n\t\t{\n\t\t\tlong left_child_index = current_index * 2;\n\t\t\tlong right_child_index = current_index * 2 + 1;\n\t\t\t\n\t\t\tlong max_index = current_index;\n\t\t\t\n\t\t\tif(left_child_index <= heap_size && heap[left_child_index]",
    "{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\t\n\tfor (int i = 0; i < iterable.length; i++)\n\t{\n\t\theap[i] = iterable[i];\n\t}\n\t\n\tfor (int i = 0; i < iterable.length; i++)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap.length - 1];\n\t\theap = heap[0..$-1];\n\t\theap = heapify(heap, 0);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tforeach(long item; iterable)\n\t{\n\t\theap_size = heap_insert(heap, heap_size, item);\n\t}\n\t\n\tforeach(long item; iterable)\n\t{\n\t\tresult[item] = heap_extract_max(heap, heap_size);\n\t\theap_size--;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] heap = new long[iterable.length];\n\tlong[] result = new long[iterable.length];\n\t\n\tforeach(long i; 0 .. iterable.length)\n\t{\n\t\theap[i] = iterable[i];\n\t}\n\t\n\tforeach(long i; 0 .. iterable.length)\n\t{\n\t\tlong index = i;\n\t\tlong parent = (index - 1) / 2;\n\t\twhile(index > 0 && heap[index] > heap[parent])\n\t\t{\n\t\t\tlong temp = heap[index];\n\t\t\theap[index] = heap[parent];\n\t\t\theap[parent] = temp;\n\t\t\tindex = parent;\n\t\t\tparent = (index - 1) / 2;\n\t\t}\n\t}\n\t\n\tforeach(long i; 0 .. iterable.length)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[iterable.length - 1 - i];\n\t\tlong index = 0;\n\t\tlong left = 1;\n\t\tlong right = 2;\n\t\twhile(left < iterable.length - i && (heap[index] < heap[left] || heap[index] < heap[right]))\n\t\t{\n\t\t\tif(right < iterable.length - i && heap[left] < heap[right])\n\t\t\t{\n\t\t\t\tlong temp = heap[index];\n\t\t\t\theap[index] = heap[right];\n\t\t\t\theap[right] = temp;\n\t\t\t\tindex = right;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tlong temp = heap[index];\n\t\t\t\theap[index] = heap[left];\n\t\t\t\theap[left] = temp;\n\t\t\t\tindex = left;\n\t\t\t}\n\t\t\tleft = 2 * index + 1;\n\t\t\tright = 2 * index + 2;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] arr = iterable.dup;\n\tint n = arr.length;\n\tfor (int i = n / 2 - 1; i >= 0; i--) \n\t{\n\t\theapify(arr, n, i);\n\t}\n\tfor (int i = n - 1; i >= 0; i--) \n\t{\n\t\tlong temp = arr[0];\n\t\tarr[0] = arr[i];\n\t\tarr[i] = temp;\n\t\theapify(arr, i, 0);\n\t}\n\treturn arr;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong size = 0;\n\t\n\tforeach(long item; iterable)\n\t{\n\t\theap[size] = item;\n\t\tsize++;\n\t\t\n\t\tlong i = size - 1;\n\t\twhile(i > 0)\n\t\t{\n\t\t\tlong parent = (i - 1) / 2;\n\t\t\tif(heap[i] > heap[parent])\n\t\t\t{\n\t\t\t\tlong temp = heap[i];\n\t\t\t\theap[i] = heap[parent];\n\t\t\t\theap[parent] = temp;\n\t\t\t\ti = parent;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tlong i = 0;\n\twhile(size > 0)\n\t{\n\t\tresult[i] = heap[0];\n\t\ti++;\n\t\t\n\t\theap[0] = heap[size - 1];\n\t\tsize--;\n\t\t\n\t\tlong j = 0;\n\t\twhile(j < size)\n\t\t{\n\t\t\tlong left = 2 * j + 1;\n\t\t\tlong right = 2 * j + 2;\n\t\t\tlong largest = j;\n\t\t\t\n\t\t\tif(left < size && heap[left] > heap[largest])\n\t\t\t{\n\t\t\t\tlargest = left;\n\t\t\t}\n\t\t\t\n\t\t\tif(right < size && heap[right] > heap[largest])\n\t\t\t{\n\t\t\t\tlargest = right;\n\t\t\t}\n\t\t\t\n\t\t\tif(largest != j)\n\t\t\t{\n\t\t\t\tlong temp = heap[j];\n\t\t\t\theap[j] = heap[largest];\n\t\t\t\theap[largest] = temp;\n\t\t\t\tj = largest;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t",
    "{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tforeach(long item; iterable)\n\t{\n\t\theap_size++;\n\t\theap[heap_size] = item;\n\t\tlong i = heap_size;\n\t\twhile(i > 1 && heap[i] > heap[i / 2])\n\t\t{\n\t\t\tlong temp = heap[i];\n\t\t\theap[i] = heap[i / 2];\n\t\t\theap[i / 2] = temp;\n\t\t\ti = i / 2;\n\t\t}\n\t}\n\t\n\tlong i = 0;\n\twhile(heap_size > 0)\n\t{\n\t\tresult[i] = heap[1];\n\t\theap[1] = heap[heap_size];\n\t\theap_size--;\n\t\t\n\t\tlong j = 1;\n\t\twhile(j <= heap_size)\n\t\t{\n\t\t\tlong max = j;\n\t\t\tif(j * 2 <= heap_size && heap[j * 2] > heap[max])\n\t\t\t\tmax = j * 2;\n\t\t\tif(j * 2 + 1 <= heap_size && heap[j * 2 + 1] > heap[max])\n\t\t\t\tmax = j * 2 + 1;\n\t\t\tif(max == j)\n\t\t\t\tbreak;\n\t\t\tlong temp = heap[j];\n\t\t\theap[j] = heap[max];\n\t\t\theap[max] = temp;\n\t\t\tj = max;\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] heap = new long[iterable.length];\n\tforeach(i, v; iterable)\n\t{\n\t\theap[i] = v;\n\t}\n\t\n\tfor(long i = heap.length / 2; i >= 0; i--)\n\t{\n\t\theap = heapify(heap, i);\n\t}\n\t\n\tfor(long i = heap.length - 1; i >= 0; i--)\n\t{\n\t\tlong temp = heap[0];\n\t\theap[0] = heap[i];\n\t\theap[i] = temp;\n\t\theap = heapify(heap, 0, i);\n\t}\n\t\n\treturn heap;\n}",
    "{\n\tauto heap = new Heap(iterable);\n\treturn heap.sort();\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong[] heap_index = new long[iterable.length];\n\tlong heap_size = 0;\n\tlong i = 0;\n\tfor (i = 0; i < iterable.length; i++) \n\t{\n\t\theap_size = heap_size + 1;\n\t\theap[heap_size - 1] = iterable[i];\n\t\theap_index[heap_size - 1] = i;\n\t\tlong j = heap_size - 1;\n\t\twhile (j > 0) \n\t\t{\n\t\t\tlong parent = floor((j - 1) / 2);\n\t\t\tif (heap[j] < heap[parent]) \n\t\t\t{\n\t\t\t\tlong temp = heap[j];\n\t\t\t\theap[j] = heap[parent];\n\t\t\t\theap[parent] = temp;\n\t\t\t\tlong temp_index = heap_index[j];\n\t\t\t\theap_index[j] = heap_index[parent];\n\t\t\t\theap_index[parent] = temp_index;\n\t\t\t\tj = parent;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tfor (i = 0; i < iterable.length; i++) \n\t{\n\t\tresult[i] = heap[0];\n\t\theap_index[0] = heap_index[0] + 1;\n\t\theap[0] = iterable[heap_index[0]];\n\t\tlong j = 0;\n\t\twhile (j < heap_size) \n\t\t{\n\t\t\tlong left = 2 * j + 1;\n\t\t\tlong right = 2 * j + 2;\n\t\t\tlong smallest = j;\n\t\t\tif (left < heap_size && heap[left] < heap[smallest]) \n\t\t\t{\n\t\t\t\tsmallest = left;\n\t\t\t}\n\t",
    "{\n    long[] result = new long[iterable.length];\n    long[] heap = new long[iterable.length];\n    int heap_size = 0;\n    foreach (i; 0 .. iterable.length) \n    {\n        heap_size = heap_insert(heap, heap_size, iterable[i]);\n    }\n    foreach (i; 0 .. iterable.length) \n    {\n        result[i] = heap_extract(heap, heap_size);\n        heap_size--;\n    }\n    return result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tforeach(i; iterable)\n\t{\n\t\tresult[i] = iterable[i];\n\t}\n\t\n\tlong[] heap = new long[result.length + 1];\n\tlong heap_size = 0;\n\t\n\tvoid heap_insert(long value)\n\t{\n\t\theap_size++;\n\t\theap[heap_size] = value;\n\t\t\n\t\tlong i = heap_size;\n\t\twhile(i > 1 && heap[i] > heap[i / 2])\n\t\t{\n\t\t\tlong temp = heap[i];\n\t\t\theap[i] = heap[i / 2];\n\t\t\theap[i / 2] = temp;\n\t\t\ti /= 2;\n\t\t}\n\t}\n\t\n\tlong heap_pop()\n\t{\n\t\tlong result = heap[1];\n\t\theap[1] = heap[heap_size];\n\t\theap_size--;\n\t\t\n\t\tlong i = 1;\n\t\twhile(i < heap_size)\n\t\t{\n\t\t\tlong left = 2 * i;\n\t\t\tlong right = 2 * i + 1;\n\t\t\tlong largest = i;\n\t\t\t\n\t\t\tif(left <= heap_size && heap[left] > heap[largest])\n\t\t\t{\n\t\t\t\tlargest = left;\n\t\t\t}\n\t\t\t\n\t\t\tif(right <= heap_size && heap[right] > heap[largest])\n\t\t\t{\n\t\t\t\tlargest = right;\n\t\t\t}\n\t\t\t\n\t\t\tif(largest == i)\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t\n\t\t\tlong temp = heap[i];\n\t\t\theap[i] = heap[largest];\n\t\t\theap[largest] = temp;\n\t\t\t\n\t\t\ti = largest;\n\t\t}\n\t\t\n\t\treturn result;\n\t}\n\t\n\tforeach(i; result)\n\t{\n\t",
    "{\n\tlong[] result = new long[iterable.length];\n\t\n\t// copy the array\n\tfor (int i = 0; i < iterable.length; i++)\n\t{\n\t\tresult[i] = iterable[i];\n\t}\n\t\n\t// build the heap\n\tfor (int i = 0; i < result.length; i++)\n\t{\n\t\tint j = i;\n\t\twhile (j > 0)\n\t\t{\n\t\t\tint parent = (j - 1) / 2;\n\t\t\tif (result[j] > result[parent])\n\t\t\t{\n\t\t\t\tlong temp = result[j];\n\t\t\t\tresult[j] = result[parent];\n\t\t\t\tresult[parent] = temp;\n\t\t\t\tj = parent;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\t// sort the heap\n\tfor (int i = result.length - 1; i > 0; i--)\n\t{\n\t\tlong temp = result[0];\n\t\tresult[0] = result[i];\n\t\tresult[i] = temp;\n\t\t\n\t\tint j = 0;\n\t\twhile (j < i)\n\t\t{\n\t\t\tint left = 2 * j + 1;\n\t\t\tint right = 2 * j + 2;\n\t\t\tint largest = j;\n\t\t\tif (left < i && result[left] > result[largest])\n\t\t\t{\n\t\t\t\tlargest = left;\n\t\t\t}\n\t\t\tif (right < i && result[right] > result[largest])\n\t\t\t{\n\t\t\t\tlargest = right;\n\t\t\t}\n\t\t\tif (largest != j)\n\t\t\t{\n\t\t\t\tlong temp2 = result[j];\n\t\t\t\tresult[j] = result[largest];\n\t\t\t\tresult[largest] = temp2;\n\t\t\t\tj = largest;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbreak;\n\t",
    "{\n\tlong[] heap = new long[iterable.length];\n\tforeach(i, value; iterable)\n\t{\n\t\theap[i] = value;\n\t\theapify(heap, i);\n\t}\n\t\n\tlong[] result = new long[iterable.length];\n\tforeach(i; 0 .. iterable.length)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap.length - i - 1];\n\t\theapify(heap, 0, heap.length - i - 1);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\t\n\tfor(int i = 0; i < iterable.length; i++)\n\t{\n\t\tresult[i] = iterable[i];\n\t}\n\t\n\tfor(int i = 0; i < result.length; i++)\n\t{\n\t\tint j = i;\n\t\twhile(j > 0)\n\t\t{\n\t\t\tint p = (j - 1) / 2;\n\t\t\tif(result[j] > result[p])\n\t\t\t{\n\t\t\t\tlong temp = result[j];\n\t\t\t\tresult[j] = result[p];\n\t\t\t\tresult[p] = temp;\n\t\t\t}\n\t\t\tj = p;\n\t\t}\n\t}\n\t\n\tfor(int i = result.length - 1; i > 0; i--)\n\t{\n\t\tlong temp = result[0];\n\t\tresult[0] = result[i];\n\t\tresult[i] = temp;\n\t\t\n\t\tint j = 0;\n\t\twhile(true)\n\t\t{\n\t\t\tint left = 2 * j + 1;\n\t\t\tint right = 2 * j + 2;\n\t\t\tint largest = j;\n\t\t\tif(left < i && result[left] > result[largest])\n\t\t\t{\n\t\t\t\tlargest = left;\n\t\t\t}\n\t\t\tif(right < i && result[right] > result[largest])\n\t\t\t{\n\t\t\t\tlargest = right;\n\t\t\t}\n\t\t\tif(largest != j)\n\t\t\t{\n\t\t\t\tlong temp2 = result[j];\n\t\t\t\tresult[j] = result[largest];\n\t\t\t\tresult[largest] = temp2;\n\t\t\t\tj = largest;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tfor (int i = 0; i < iterable.length; i++)\n\t{\n\t\tresult[i] = iterable[i];\n\t}\n\t\n\tfor (int i = result.length / 2 - 1; i >= 0; i--)\n\t{\n\t\theapify(result, result.length, i);\n\t}\n\t\n\tfor (int i = result.length - 1; i >= 0; i--)\n\t{\n\t\tlong temp = result[0];\n\t\tresult[0] = result[i];\n\t\tresult[i] = temp;\n\t\t\n\t\theapify(result, i, 0);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] heap = new long[iterable.length];\n\tlong[] result = new long[iterable.length];\n\t\n\tforeach(long i; 0..iterable.length)\n\t{\n\t\theap[i] = iterable[i];\n\t}\n\t\n\tforeach(long i; 0..iterable.length)\n\t{\n\t\tlong index = i;\n\t\tlong parent = (index - 1) / 2;\n\t\t\n\t\twhile(heap[index] > heap[parent])\n\t\t{\n\t\t\tlong temp = heap[index];\n\t\t\theap[index] = heap[parent];\n\t\t\theap[parent] = temp;\n\t\t\t\n\t\t\tindex = parent;\n\t\t\tparent = (index - 1) / 2;\n\t\t}\n\t}\n\t\n\tforeach(long i; 0..iterable.length)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[iterable.length - i - 1];\n\t\theap[iterable.length - i - 1] = 0;\n\t\t\n\t\tlong index = 0;\n\t\tlong left = 1;\n\t\tlong right = 2;\n\t\tlong largest = 0;\n\t\t\n\t\twhile(left < iterable.length - i && right < iterable.length - i)\n\t\t{\n\t\t\tif(heap[left] > heap[right])\n\t\t\t{\n\t\t\t\tlargest = left;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tlargest = right;\n\t\t\t}\n\t\t\t\n\t\t\tif(heap[index] < heap[largest])\n\t\t\t{\n\t\t\t\tlong temp = heap[index];\n\t\t\t\theap[index] = heap[largest];\n\t\t\t\theap[largest] = temp;\n\t\t\t\t\n\t\t\t\tindex = largest;\n\t\t\t\tleft = 2 * index + 1;\n\t\t\t\tright = 2 * index + 2;\n\t\t\t}\n\t\t\telse\n\t",
    "{\n\tlong[] heap = new long[iterable.length];\n\tforeach(i, item; iterable)\n\t{\n\t\theap[i] = item;\n\t\theapify(heap, i);\n\t}\n\t\n\treturn heap;\n}",
    "{\n\tlong[] heap = new long[iterable.length];\n\tlong[] result = new long[iterable.length];\n\tint heap_size = 0;\n\t\n\tforeach(i; iterable)\n\t{\n\t\theap_size++;\n\t\theap[heap_size] = i;\n\t\tint current_index = heap_size;\n\t\twhile(current_index > 1)\n\t\t{\n\t\t\tint parent_index = current_index / 2;\n\t\t\tif(heap[current_index] > heap[parent_index])\n\t\t\t{\n\t\t\t\tlong temp = heap[current_index];\n\t\t\t\theap[current_index] = heap[parent_index];\n\t\t\t\theap[parent_index] = temp;\n\t\t\t\tcurrent_index = parent_index;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tint result_index = 0;\n\twhile(heap_size > 0)\n\t{\n\t\tresult[result_index] = heap[1];\n\t\tresult_index++;\n\t\theap[1] = heap[heap_size];\n\t\theap_size--;\n\t\tint current_index = 1;\n\t\twhile(current_index <= heap_size)\n\t\t{\n\t\t\tint left_child_index = current_index * 2;\n\t\t\tint right_child_index = current_index * 2 + 1;\n\t\t\tif(left_child_index <= heap_size)\n\t\t\t{\n\t\t\t\tif(right_child_index <= heap_size)\n\t\t\t\t{\n\t\t\t\t\tif(heap[current_index] < heap[left_child_index] || heap[current_index] < heap[right_child_index])\n\t\t\t\t\t{\n\t\t\t\t\t\tif(heap[left_child_index] > heap[right_child_index])\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlong temp = heap[current",
    "{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong[] heap_index = new long[iterable.length];\n\tlong heap_size = 0;\n\tlong i = 0;\n\tlong j = 0;\n\tlong temp = 0;\n\tlong temp_index = 0;\n\tlong parent = 0;\n\tlong left = 0;\n\tlong right = 0;\n\tlong largest = 0;\n\tlong largest_index = 0;\n\t\n\tfor (i = 0; i < iterable.length; i++) \n\t{\n\t\theap[i] = iterable[i];\n\t\theap_index[i] = i;\n\t\theap_size++;\n\t}\n\t\n\tfor (i = (heap_size / 2) - 1; i >= 0; i--) \n\t{\n\t\tparent = i;\n\t\tleft = 2 * parent + 1;\n\t\tright = 2 * parent + 2;\n\t\tlargest = parent;\n\t\tlargest_index = heap_index[parent];\n\t\t\n\t\tif (left < heap_size && heap[left] > heap[largest]) \n\t\t{\n\t\t\tlargest = left;\n\t\t\tlargest_index = heap_index[left];\n\t\t}\n\t\t\n\t\tif (right < heap_size && heap[right] > heap[largest]) \n\t\t{\n\t\t\tlargest = right;\n\t\t\tlargest_index = heap_index[right];\n\t\t}\n\t\t\n\t\tif (largest != parent) \n\t\t{\n\t\t\ttemp = heap[parent];\n\t\t\ttemp_index = heap_index[parent];\n\t\t\theap[parent] = heap[largest];\n\t\t\theap_index[parent] = heap_index[largest];\n\t\t\theap[largest] = temp;\n\t\t\theap_index[largest] = temp_index;\n\t\t}\n\t}\n\t\n\tfor (i = heap_size - 1; i >= 0; i--) \n\t{\n\t\tresult[j] = heap",
    "{\n\tlong[] heap = new long[iterable.length];\n\tforeach(i, item; iterable)\n\t\theap[i] = item;\n\t\n\tforeach(i; 0 .. heap.length)\n\t{\n\t\tlong left = 2 * i + 1;\n\t\tlong right = 2 * i + 2;\n\t\tlong largest = i;\n\t\t\n\t\tif (left < heap.length && heap[left] > heap[largest])\n\t\t\tlargest = left;\n\t\t\n\t\tif (right < heap.length && heap[right] > heap[largest])\n\t\t\tlargest = right;\n\t\t\n\t\tif (largest != i)\n\t\t{\n\t\t\tlong temp = heap[i];\n\t\t\theap[i] = heap[largest];\n\t\t\theap[largest] = temp;\n\t\t}\n\t}\n\t\n\tforeach(i; heap.length .. 0)\n\t{\n\t\tlong temp = heap[0];\n\t\theap[0] = heap[i];\n\t\theap[i] = temp;\n\t\t\n\t\tlong left = 2 * i + 1;\n\t\tlong right = 2 * i + 2;\n\t\tlong largest = i;\n\t\t\n\t\tif (left < heap.length && heap[left] > heap[largest])\n\t\t\tlargest = left;\n\t\t\n\t\tif (right < heap.length && heap[right] > heap[largest])\n\t\t\tlargest = right;\n\t\t\n\t\tif (largest != i)\n\t\t{\n\t\t\tlong temp = heap[i];\n\t\t\theap[i] = heap[largest];\n\t\t\theap[largest] = temp;\n\t\t}\n\t}\n\t\n\treturn heap;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\t\n\t// Copy the array\n\tforeach(long i; iterable)\n\t{\n\t\tresult[i] = iterable[i];\n\t}\n\t\n\t// Build the heap\n\tfor(long i = result.length / 2; i >= 0; i--)\n\t{\n\t\theapify(result, i, result.length);\n\t}\n\t\n\t// Sort the heap\n\tfor(long i = result.length - 1; i >= 0; i--)\n\t{\n\t\t// Swap the root with the last element\n\t\tlong temp = result[0];\n\t\tresult[0] = result[i];\n\t\tresult[i] = temp;\n\t\t\n\t\t// Rebuild the heap\n\t\theapify(result, 0, i);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\t\n\tforeach(i, item; iterable)\n\t{\n\t\theap[i] = item;\n\t}\n\t\n\tlong heap_size = iterable.length;\n\t\n\tfor(long i = floor(heap_size / 2) - 1; i >= 0; i--)\n\t{\n\t\theapify(heap, heap_size, i);\n\t}\n\t\n\tfor(long i = heap_size - 1; i >= 0; i--)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[i];\n\t\theap_size--;\n\t\theapify(heap, heap_size, 0);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] heap = new long[iterable.length];\n\tforeach(i, item; iterable)\n\t{\n\t\theap[i] = item;\n\t\theapify(heap, i);\n\t}\n\t\n\tlong[] result = new long[iterable.length];\n\tforeach(i, item; heap)\n\t{\n\t\tresult[i] = item;\n\t\theap[i] = 0;\n\t\theapify(heap, i);\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tforeach(i; 0..iterable.length)\n\t{\n\t\tresult[i] = iterable[i];\n\t}\n\t\n\tlong[] heap = new long[result.length];\n\tforeach(i; 0..result.length)\n\t{\n\t\theap[i] = result[i];\n\t}\n\t\n\tlong[] sorted = new long[result.length];\n\t\n\tlong heap_size = result.length;\n\t\n\tlong left_child_index = 0;\n\tlong right_child_index = 0;\n\tlong largest_child_index = 0;\n\t\n\tlong temp = 0;\n\t\n\tfor(long i = result.length/2 - 1; i >= 0; i--)\n\t{\n\t\theapify(heap, heap_size, i);\n\t}\n\t\n\tfor(long i = result.length - 1; i >= 0; i--)\n\t{\n\t\tsorted[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theapify(heap, heap_size, 0);\n\t}\n\t\n\treturn sorted;\n}",
    "{\n\tlong[] heap = new long[iterable.length];\n\tfor (int i = 0; i < iterable.length; i++)\n\t{\n\t\theap[i] = iterable[i];\n\t}\n\t\n\tfor (int i = heap.length / 2; i >= 0; i--)\n\t{\n\t\theapify(heap, i, heap.length);\n\t}\n\t\n\tfor (int i = heap.length - 1; i > 0; i--)\n\t{\n\t\tlong temp = heap[0];\n\t\theap[0] = heap[i];\n\t\theap[i] = temp;\n\t\theapify(heap, 0, i);\n\t}\n\t\n\treturn heap;\n}",
    "{\n\tauto heap = new Heap!(long)();\n\tforeach(e; iterable)\n\t\theap.push(e);\n\t\n\tlong[] result;\n\twhile(heap.length)\n\t\tresult ~= heap.pop();\n\t\n\treturn result;\n}",
    "{\n\tint n = iterable.length;\n\tfor (int i = n / 2 - 1; i >= 0; i--) \n\t{\n\t\theapify(iterable, n, i);\n\t}\n\tfor (int i = n - 1; i >= 0; i--) \n\t{\n\t\tlong temp = iterable[0];\n\t\titerable[0] = iterable[i];\n\t\titerable[i] = temp;\n\t\theapify(iterable, i, 0);\n\t}\n\treturn iterable;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tfor (int i = 0; i < iterable.length; i++)\n\t\tresult[i] = iterable[i];\n\t\n\tfor (int i = (result.length - 1) / 2; i >= 0; i--)\n\t\theapify(result, i, result.length);\n\t\n\tfor (int i = result.length - 1; i > 0; i--)\n\t{\n\t\tlong temp = result[0];\n\t\tresult[0] = result[i];\n\t\tresult[i] = temp;\n\t\theapify(result, 0, i);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong[] heap_index = new long[iterable.length];\n\tlong heap_size = 0;\n\tlong i = 0;\n\tfor (i = 0; i < iterable.length; i++) \n\t{\n\t\theap_size = heap_size + 1;\n\t\theap[heap_size - 1] = iterable[i];\n\t\theap_index[heap_size - 1] = i;\n\t\tlong j = heap_size - 1;\n\t\twhile (j > 0) \n\t\t{\n\t\t\tlong parent = (j - 1) / 2;\n\t\t\tif (heap[parent] > heap[j]) \n\t\t\t{\n\t\t\t\tlong temp = heap[parent];\n\t\t\t\theap[parent] = heap[j];\n\t\t\t\theap[j] = temp;\n\t\t\t\tlong temp_index = heap_index[parent];\n\t\t\t\theap_index[parent] = heap_index[j];\n\t\t\t\theap_index[j] = temp_index;\n\t\t\t\tj = parent;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tlong k = 0;\n\twhile (heap_size > 0) \n\t{\n\t\tresult[k] = heap[0];\n\t\tk = k + 1;\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_index[0] = heap_index[heap_size - 1];\n\t\theap_size = heap_size - 1;\n\t\tlong j = 0;\n\t\twhile (j < heap_size) \n\t\t{\n\t\t\tlong left = 2 * j + 1;\n\t\t\tlong right = 2 * j + 2;\n\t\t\tlong smallest = j;\n\t\t\tif (left < heap_size && heap[left] < heap[smallest])",
    "{\n\tint n = iterable.length;\n\tfor (int i = n / 2 - 1; i >= 0; i--) \n\t{\n\t\theapify(iterable, n, i);\n\t}\n\tfor (int i = n - 1; i >= 0; i--) \n\t{\n\t\tlong temp = iterable[0];\n\t\titerable[0] = iterable[i];\n\t\titerable[i] = temp;\n\t\theapify(iterable, i, 0);\n\t}\n\treturn iterable;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong[] heap_index = new long[iterable.length];\n\tlong heap_size = 0;\n\tlong i = 0;\n\tlong j = 0;\n\tlong temp = 0;\n\tlong temp_index = 0;\n\tlong parent = 0;\n\tlong left = 0;\n\tlong right = 0;\n\tlong largest = 0;\n\t\n\tfor (i = 0; i < iterable.length; i++) \n\t{\n\t\theap[i] = iterable[i];\n\t\theap_index[i] = i;\n\t\theap_size++;\n\t}\n\t\n\tfor (i = heap_size / 2 - 1; i >= 0; i--) \n\t{\n\t\tparent = i;\n\t\ttemp = heap[parent];\n\t\ttemp_index = heap_index[parent];\n\t\t\n\t\twhile (parent < heap_size / 2) \n\t\t{\n\t\t\tleft = 2 * parent + 1;\n\t\t\tright = 2 * parent + 2;\n\t\t\t\n\t\t\tif (right < heap_size && heap[right] > heap[left]) \n\t\t\t{\n\t\t\t\tlargest = right;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tlargest = left;\n\t\t\t}\n\t\t\t\n\t\t\tif (heap[largest] <= temp) \n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t\n\t\t\theap[parent] = heap[largest];\n\t\t\theap_index[parent] = heap_index[largest];\n\t\t\tparent = largest;\n\t\t}\n\t\t\n\t\theap[parent] = temp;\n\t\theap_index[parent] = temp_index;\n\t}\n\t\n\tfor (i = heap_size - 1; i > 0; i--) \n\t{\n\t\tresult[j] = heap[0];\n\t\tj++;\n\t\t\n\t\ttemp =",
    "{\n\tlong[] heap = new long[iterable.length];\n\tlong[] sorted = new long[iterable.length];\n\t\n\tforeach(long i; 0 .. iterable.length)\n\t{\n\t\theap[i] = iterable[i];\n\t\tsorted[i] = 0;\n\t}\n\t\n\theap = heapify(heap);\n\t\n\tforeach(long i; 0 .. iterable.length)\n\t{\n\t\tsorted[i] = heap[0];\n\t\theap[0] = heap[heap.length - 1];\n\t\theap[heap.length - 1] = 0;\n\t\theap = heapify(heap);\n\t}\n\t\n\treturn sorted;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tforeach(long item; iterable)\n\t{\n\t\theap_size++;\n\t\theap[heap_size] = item;\n\t\tlong i = heap_size;\n\t\twhile(i > 1 && heap[i] > heap[i/2])\n\t\t{\n\t\t\tswap(heap[i], heap[i/2]);\n\t\t\ti = i/2;\n\t\t}\n\t}\n\t\n\tlong i = 0;\n\twhile(heap_size > 0)\n\t{\n\t\tresult[i] = heap[1];\n\t\theap[1] = heap[heap_size];\n\t\theap_size--;\n\t\tlong j = 1;\n\t\twhile(j <= heap_size)\n\t\t{\n\t\t\tlong max_index = j;\n\t\t\tif(j*2 <= heap_size && heap[j*2] > heap[max_index])\n\t\t\t{\n\t\t\t\tmax_index = j*2;\n\t\t\t}\n\t\t\tif(j*2+1 <= heap_size && heap[j*2+1] > heap[max_index])\n\t\t\t{\n\t\t\t\tmax_index = j*2+1;\n\t\t\t}\n\t\t\tif(max_index == j)\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tswap(heap[j], heap[max_index]);\n\t\t\tj = max_index;\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\t\n\tforeach(i; 0 .. iterable.length)\n\t{\n\t\tresult[i] = iterable[i];\n\t}\n\t\n\tlong length = result.length;\n\t\n\tfor(long i = length / 2 - 1; i >= 0; i--)\n\t{\n\t\theapify(result, length, i);\n\t}\n\t\n\tfor(long i = length - 1; i >= 0; i--)\n\t{\n\t\tlong temp = result[0];\n\t\tresult[0] = result[i];\n\t\tresult[i] = temp;\n\t\t\n\t\theapify(result, i, 0);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] arr = iterable.dup;\n\tlong[] heap = new long[arr.length];\n\tlong heap_size = 0;\n\t\n\t// Inserting elements into the heap\n\tforeach(long i; arr)\n\t{\n\t\theap_size++;\n\t\theap[heap_size] = i;\n\t\tlong j = heap_size;\n\t\twhile(j > 1 && heap[j] > heap[j/2])\n\t\t{\n\t\t\tlong temp = heap[j];\n\t\t\theap[j] = heap[j/2];\n\t\t\theap[j/2] = temp;\n\t\t\tj = j/2;\n\t\t}\n\t}\n\t\n\t// Extracting elements from the heap\n\tlong i = 0;\n\twhile(heap_size > 0)\n\t{\n\t\tarr[i] = heap[1];\n\t\theap[1] = heap[heap_size];\n\t\theap_size--;\n\t\tlong j = 1;\n\t\twhile(2*j <= heap_size)\n\t\t{\n\t\t\tlong k = 2*j;\n\t\t\tif(k < heap_size && heap[k] < heap[k+1])\n\t\t\t\tk++;\n\t\t\tif(heap[j] > heap[k])\n\t\t\t\tbreak;\n\t\t\tlong temp = heap[j];\n\t\t\theap[j] = heap[k];\n\t\t\theap[k] = temp;\n\t\t\tj = k;\n\t\t}\n\t\ti++;\n\t}\n\treturn arr;\n}",
    "{\n\tint n = iterable.length;\n\tfor (int i = n / 2 - 1; i >= 0; i--)\n\t\theapify(iterable, n, i);\n\tfor (int i = n - 1; i >= 0; i--) {\n\t\tlong temp = iterable[0];\n\t\titerable[0] = iterable[i];\n\t\titerable[i] = temp;\n\t\theapify(iterable, i, 0);\n\t}\n\treturn iterable;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong[] heap_index = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tforeach(long i; 0 .. iterable.length)\n\t{\n\t\theap_size = heap_insert(heap, heap_index, heap_size, iterable[i], i);\n\t}\n\t\n\tforeach(long i; 0 .. iterable.length)\n\t{\n\t\tresult[i] = heap_extract_min(heap, heap_index, heap_size);\n\t\theap_size--;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\t\n\tforeach(long i; iterable)\n\t{\n\t\tresult ~= i;\n\t}\n\t\n\tfor(long i = result.length / 2; i >= 0; i--)\n\t{\n\t\tresult = heapify(result, i, result.length);\n\t}\n\t\n\tfor(long i = result.length - 1; i > 0; i--)\n\t{\n\t\tresult = swap(result, 0, i);\n\t\tresult = heapify(result, 0, i);\n\t}\n\t\n\treturn result;\n}",
    "{\n\t// Create a heap\n\tauto heap = new Heap!(long)();\n\t\n\t// Insert all the elements in the heap\n\tforeach(elem; iterable)\n\t\theap.insert(elem);\n\t\n\t// Create a new array to store the sorted elements\n\tlong[] sorted_array;\n\t\n\t// Extract all the elements from the heap\n\twhile(heap.size)\n\t\tsorted_array ~= heap.extract();\n\t\n\treturn sorted_array;\n}",
    "{\n\tlong[] heap = new long[iterable.length];\n\tint heap_size = 0;\n\t\n\tforeach(long i; iterable)\n\t{\n\t\theap_size++;\n\t\theap[heap_size] = i;\n\t\tint j = heap_size;\n\t\twhile(j > 1 && heap[j] > heap[j / 2])\n\t\t{\n\t\t\tlong temp = heap[j];\n\t\t\theap[j] = heap[j / 2];\n\t\t\theap[j / 2] = temp;\n\t\t\tj /= 2;\n\t\t}\n\t}\n\t\n\tlong[] result = new long[heap_size];\n\tint result_size = 0;\n\t\n\twhile(heap_size > 0)\n\t{\n\t\tresult[result_size] = heap[1];\n\t\tresult_size++;\n\t\theap[1] = heap[heap_size];\n\t\theap_size--;\n\t\t\n\t\tint j = 1;\n\t\twhile(j * 2 <= heap_size)\n\t\t{\n\t\t\tint k = j * 2;\n\t\t\tif(k + 1 <= heap_size && heap[k] < heap[k + 1])\n\t\t\t\tk++;\n\t\t\tif(heap[j] < heap[k])\n\t\t\t{\n\t\t\t\tlong temp = heap[j];\n\t\t\t\theap[j] = heap[k];\n\t\t\t\theap[k] = temp;\n\t\t\t\tj = k;\n\t\t\t}\n\t\t\telse\n\t\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] heap = new long[iterable.length];\n\tforeach(index, value; iterable) \n\t{\n\t\theap[index] = value;\n\t}\n\t\n\tfor(long i = heap.length / 2; i >= 0; i--) \n\t{\n\t\theap = heapify(heap, i, heap.length);\n\t}\n\t\n\tfor(long i = heap.length - 1; i >= 0; i--) \n\t{\n\t\theap[i] = heap[0] ^ heap[i];\n\t\theap[0] = heap[0] ^ heap[i];\n\t\theap[i] = heap[0] ^ heap[i];\n\t\theap = heapify(heap, 0, i);\n\t}\n\t\n\treturn heap;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tfor (long i = 0; i < iterable.length; i++)\n\t{\n\t\theap_size = heap_insert(heap, heap_size, iterable[i]);\n\t}\n\t\n\tfor (long i = 0; i < iterable.length; i++)\n\t{\n\t\tresult[i] = heap_extract_max(heap, heap_size);\n\t\theap_size--;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\t\n\tfor(int i = 0; i < iterable.length; i++)\n\t{\n\t\theap[i] = iterable[i];\n\t}\n\t\n\tfor(int i = 0; i < iterable.length; i++)\n\t{\n\t\tresult[i] = heap_pop(heap);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tforeach(long i; iterable)\n\t{\n\t\theap[heap_size] = i;\n\t\theap_size++;\n\t\theapify_up(heap, heap_size);\n\t}\n\t\n\tforeach(long i; 0..iterable.length)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theapify_down(heap, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tint length = iterable.length;\n\tlong[] result = new long[length];\n\t\n\tfor (int i = 0; i < length; i++)\n\t{\n\t\tresult[i] = iterable[i];\n\t}\n\t\n\tfor (int i = length / 2 - 1; i >= 0; i--)\n\t{\n\t\theapify(result, length, i);\n\t}\n\t\n\tfor (int i = length - 1; i >= 0; i--)\n\t{\n\t\tlong temp = result[0];\n\t\tresult[0] = result[i];\n\t\tresult[i] = temp;\n\t\t\n\t\theapify(result, i, 0);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tforeach(long i; iterable)\n\t{\n\t\theap_size++;\n\t\theap[heap_size] = i;\n\t\tlong child = heap_size;\n\t\tlong parent = child / 2;\n\t\twhile(parent > 0 && heap[parent] < heap[child])\n\t\t{\n\t\t\tlong temp = heap[parent];\n\t\t\theap[parent] = heap[child];\n\t\t\theap[child] = temp;\n\t\t\tchild = parent;\n\t\t\tparent = child / 2;\n\t\t}\n\t}\n\t\n\tlong result_index = 0;\n\twhile(heap_size > 0)\n\t{\n\t\tresult[result_index] = heap[1];\n\t\tresult_index++;\n\t\theap[1] = heap[heap_size];\n\t\theap_size--;\n\t\tlong parent = 1;\n\t\tlong child = parent * 2;\n\t\twhile(child <= heap_size)\n\t\t{\n\t\t\tif(child + 1 <= heap_size && heap[child] < heap[child + 1])\n\t\t\t{\n\t\t\t\tchild++;\n\t\t\t}\n\t\t\tif(heap[parent] < heap[child])\n\t\t\t{\n\t\t\t\tlong temp = heap[parent];\n\t\t\t\theap[parent] = heap[child];\n\t\t\t\theap[child] = temp;\n\t\t\t\tparent = child;\n\t\t\t\tchild = parent * 2;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tforeach(long i; iterable)\n\t{\n\t\theap_size = heap_insert(heap, heap_size, i);\n\t}\n\t\n\tlong i = 0;\n\twhile(heap_size > 0)\n\t{\n\t\tresult[i] = heap_extract_max(heap, heap_size);\n\t\theap_size--;\n\t\ti++;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tforeach(long i; iterable)\n\t{\n\t\theap_size++;\n\t\theap[heap_size] = i;\n\t\tlong j = heap_size;\n\t\twhile(j > 1 && heap[j] < heap[j/2])\n\t\t{\n\t\t\tlong temp = heap[j];\n\t\t\theap[j] = heap[j/2];\n\t\t\theap[j/2] = temp;\n\t\t\tj = j/2;\n\t\t}\n\t}\n\t\n\tlong i = 0;\n\twhile(heap_size > 0)\n\t{\n\t\tresult[i] = heap[1];\n\t\theap[1] = heap[heap_size];\n\t\theap_size--;\n\t\tlong j = 1;\n\t\twhile(j <= heap_size/2)\n\t\t{\n\t\t\tlong k = 2*j;\n\t\t\tif(k < heap_size && heap[k] > heap[k+1])\n\t\t\t\tk++;\n\t\t\tif(heap[j] <= heap[k])\n\t\t\t\tbreak;\n\t\t\tlong temp = heap[j];\n\t\t\theap[j] = heap[k];\n\t\t\theap[k] = temp;\n\t\t\tj = k;\n\t\t}\n\t\ti++;\n\t}\n\t\n\treturn result;\n}"
  ]
}