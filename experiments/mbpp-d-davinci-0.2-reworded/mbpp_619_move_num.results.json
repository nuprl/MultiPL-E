{
  "name": "mbpp_619_move_num",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_619_move_num.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpuiyom1mz.d(13): Error: no property `isDigit` for type `immutable(char)`\n/tmp/tmpuiyom1mz.d(20): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuiyom1mz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result;\n\tforeach(c; test_str) \n\t{\n\t\tif(c.isDigit) \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str) \n\t{\n\t\tif(!c.isDigit) \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmp734_f8sz.d(13): Error: no property `isDigit` for type `immutable(char)`\n/tmp/tmp734_f8sz.d(20): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp734_f8sz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tstring nums = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tnums ~= c;\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result ~ nums;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517309,
      "stdout": "",
      "stderr": "/tmp/tmps8r0g9b0.d(14): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps8r0g9b0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring[] str_arr = test_str.split(\"\");\n\tstring[] num_arr = [];\n\tstring[] result_arr = [];\n\tforeach(string str; str_arr)\n\t{\n\t\tif(str.length == 1 && str[0] >= '0' && str[0] <= '9')\n\t\t{\n\t\t\tnum_arr ~= str;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult_arr ~= str;\n\t\t}\n\t}\n\treturn result_arr.join(\"\") ~ num_arr.join(\"\");\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517309,
      "stdout": "",
      "stderr": "/tmp/tmp6lyukzy3.d(10): Error: no property `split` for type `string`\n/tmp/tmp6lyukzy3.d(24): Error: no property `join` for type `string[]`\n/tmp/tmp6lyukzy3.d(24): Error: no property `join` for type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6lyukzy3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring num_str;\n\tstring alpha_str;\n\tforeach(c; test_str)\n\t{\n\t\tif(isDigit(c))\n\t\t{\n\t\t\tnum_str ~= c;\n\t\t}\n\t\telse\n\t\t{\n\t\t\talpha_str ~= c;\n\t\t}\n\t}\n\treturn alpha_str ~ num_str;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpu6s11e3q.d(14): Error: undefined identifier `isDigit`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu6s11e3q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpuiyom1mz.d(13): Error: no property `isDigit` for type `immutable(char)`\n/tmp/tmpuiyom1mz.d(20): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuiyom1mz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpuiyom1mz.d(13): Error: no property `isDigit` for type `immutable(char)`\n/tmp/tmpuiyom1mz.d(20): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuiyom1mz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\t\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517309,
      "stdout": "",
      "stderr": "/tmp/tmp9m5wfbsz.d(13): Error: no property `isDigit` for type `immutable(char)`\n/tmp/tmp9m5wfbsz.d(21): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9m5wfbsz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tstring num = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c >= '0' && c <= '9')\n\t\t\tnum ~= c;\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result ~ num;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpuiyom1mz.d(13): Error: no property `isDigit` for type `immutable(char)`\n/tmp/tmpuiyom1mz.d(20): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuiyom1mz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result;\n\tforeach(c; test_str) \n\t{\n\t\tif(c.isDigit) \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str) \n\t{\n\t\tif(!c.isDigit) \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmp734_f8sz.d(13): Error: no property `isDigit` for type `immutable(char)`\n/tmp/tmp734_f8sz.d(20): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp734_f8sz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpuiyom1mz.d(13): Error: no property `isDigit` for type `immutable(char)`\n/tmp/tmpuiyom1mz.d(20): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuiyom1mz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result;\n\tforeach(char c; test_str)\n\t{\n\t\tif(isdigit(c))\n\t\t\tresult ~= c;\n\t}\n\tforeach(char c; test_str)\n\t{\n\t\tif(!isdigit(c))\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\n/*\n\tWrite a function to check if the given string is a palindrome.\n*/\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpjjk9_14k.d(13): Error: undefined identifier `isdigit`\n/tmp/tmpjjk9_14k.d(18): Error: undefined identifier `isdigit`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjjk9_14k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(isDigit(c))\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!isDigit(c))\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpwnwc0vo1.d(13): Error: undefined identifier `isDigit`\n/tmp/tmpwnwc0vo1.d(20): Error: undefined identifier `isDigit`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwnwc0vo1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tstring nums = \"\";\n\tforeach(c; test_str) \n\t{\n\t\tif(c.isDigit) \n\t\t{\n\t\t\tnums ~= c;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result ~ nums;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpl8oab8v0.d(14): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl8oab8v0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(isdigit(c))\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!isdigit(c))\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmp76poo2bv.d(13): Error: undefined identifier `isdigit`\n/tmp/tmp76poo2bv.d(20): Error: undefined identifier `isdigit`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp76poo2bv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpha62fudr.d(13): Error: no property `isDigit` for type `immutable(char)`\n/tmp/tmpha62fudr.d(18): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpha62fudr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tforeach(c; test_str) \n\t{\n\t\tif(c.isDigit) \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str) \n\t{\n\t\tif(!c.isDigit) \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmp9q9bdk55.d(13): Error: no property `isDigit` for type `immutable(char)`\n/tmp/tmp9q9bdk55.d(20): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9q9bdk55.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tstring num = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c >= '0' && c <= '9')\n\t\t\tnum ~= c;\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result ~ num;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result;\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpgt8wvh_b.d(13): Error: no property `isDigit` for type `immutable(char)`\n/tmp/tmpgt8wvh_b.d(18): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgt8wvh_b.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(isDigit(c))\n\t\t\tresult ~= c;\n\t\telse\n\t\t\tresult = c ~ result;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122863,
      "stdout": "",
      "stderr": "/tmp/tmp5fl1y21k.d(13): Error: undefined identifier `isDigit`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5fl1y21k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tint i = 0;\n\tint j = test_str.length - 1;\n\tstring result = test_str;\n\twhile (i < j) \n\t{\n\t\tif (result[i] >= '0' && result[i] <= '9') \n\t\t{\n\t\t\tif (result[j] >= '0' && result[j] <= '9') \n\t\t\t{\n\t\t\t\tj--;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tswap(result[i], result[j]);\n\t\t\t\ti++;\n\t\t\t\tj--;\n\t\t\t}\n\t\t}\n\t\telse \n\t\t{\n\t\t\ti++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122863,
      "stdout": "",
      "stderr": "/tmp/tmplm_ay6e2.d(11): Error: cannot implicitly convert expression `test_str.length - 1LU` of type `ulong` to `int`\n/tmp/tmplm_ay6e2.d(23): Error: undefined identifier `swap`, did you mean template `wrap(Targets...) if (Targets.length >= 1 && allSatisfy!(isMutable, Targets))`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplm_ay6e2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring res = \"\";\n\tstring nums = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c >= '0' && c <= '9')\n\t\t{\n\t\t\tnums ~= c;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tres ~= c;\n\t\t}\n\t}\n\treturn res ~ nums;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result;\n\tforeach(c; test_str)\n\t{\n\t\tif(isDigit(c))\n\t\t\tresult ~= c;\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!isDigit(c))\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122863,
      "stdout": "",
      "stderr": "/tmp/tmpwkdz_sdq.d(13): Error: undefined identifier `isDigit`\n/tmp/tmpwkdz_sdq.d(18): Error: undefined identifier `isDigit`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwkdz_sdq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tstring nums = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tnums ~= c;\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result ~ nums;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517309,
      "stdout": "",
      "stderr": "/tmp/tmps8r0g9b0.d(14): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps8r0g9b0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tstring num = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tnum ~= c;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result ~ num;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122863,
      "stdout": "",
      "stderr": "/tmp/tmpn90ss7xp.d(14): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn90ss7xp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tstring nums = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tnums ~= c;\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result ~ nums;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517309,
      "stdout": "",
      "stderr": "/tmp/tmps8r0g9b0.d(14): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps8r0g9b0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tstring nums = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c >= '0' && c <= '9')\n\t\t\tnums ~= c;\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result ~ nums;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpuiyom1mz.d(13): Error: no property `isDigit` for type `immutable(char)`\n/tmp/tmpuiyom1mz.d(20): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuiyom1mz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tstring nums = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(isDigit(c))\n\t\t\tnums ~= c;\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result ~ nums;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122863,
      "stdout": "",
      "stderr": "/tmp/tmpekrwmo8t.d(14): Error: undefined identifier `isDigit`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpekrwmo8t.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpha62fudr.d(13): Error: no property `isDigit` for type `immutable(char)`\n/tmp/tmpha62fudr.d(18): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpha62fudr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpha62fudr.d(13): Error: no property `isDigit` for type `immutable(char)`\n/tmp/tmpha62fudr.d(18): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpha62fudr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{ \n\tstring result = \"\";\n\tstring nums = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tnums ~= c;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result ~ nums;\n} \nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122863,
      "stdout": "",
      "stderr": "/tmp/tmpm4xycw9u.d(14): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm4xycw9u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tstring nums = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tnums ~= c;\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result ~ nums;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517309,
      "stdout": "",
      "stderr": "/tmp/tmps8r0g9b0.d(14): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps8r0g9b0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result;\n\tforeach(c; test_str)\n\t{\n\t\tif(isDigit(c))\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!isDigit(c))\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122863,
      "stdout": "",
      "stderr": "/tmp/tmpw9gepaob.d(13): Error: undefined identifier `isDigit`\n/tmp/tmpw9gepaob.d(20): Error: undefined identifier `isDigit`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw9gepaob.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tstring num = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tnum ~= c;\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result ~ num;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122863,
      "stdout": "",
      "stderr": "/tmp/tmpmbu1odpk.d(14): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmbu1odpk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tstring nums = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tnums ~= c;\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result ~ nums;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517309,
      "stdout": "",
      "stderr": "/tmp/tmps8r0g9b0.d(14): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps8r0g9b0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result;\n\tforeach(c; test_str)\n\t{\n\t\tif(isDigit(c))\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!isDigit(c))\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122863,
      "stdout": "",
      "stderr": "/tmp/tmpw9gepaob.d(13): Error: undefined identifier `isDigit`\n/tmp/tmpw9gepaob.d(20): Error: undefined identifier `isDigit`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw9gepaob.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring res;\n\tforeach(c; test_str)\n\t{\n\t\tif(isDigit(c))\n\t\t{\n\t\t\tres ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!isDigit(c))\n\t\t{\n\t\t\tres ~= c;\n\t\t}\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122863,
      "stdout": "",
      "stderr": "/tmp/tmpzq6gur40.d(13): Error: undefined identifier `isDigit`\n/tmp/tmpzq6gur40.d(20): Error: undefined identifier `isDigit`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzq6gur40.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpuiyom1mz.d(13): Error: no property `isDigit` for type `immutable(char)`\n/tmp/tmpuiyom1mz.d(20): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuiyom1mz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpuiyom1mz.d(13): Error: no property `isDigit` for type `immutable(char)`\n/tmp/tmpuiyom1mz.d(20): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuiyom1mz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tstring num = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tnum ~= c;\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result ~ num;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122863,
      "stdout": "",
      "stderr": "/tmp/tmpmbu1odpk.d(14): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmbu1odpk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpuiyom1mz.d(13): Error: no property `isDigit` for type `immutable(char)`\n/tmp/tmpuiyom1mz.d(20): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuiyom1mz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(isDigit(c))\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!isDigit(c))\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpwnwc0vo1.d(13): Error: undefined identifier `isDigit`\n/tmp/tmpwnwc0vo1.d(20): Error: undefined identifier `isDigit`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwnwc0vo1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tforeach(ch; test_str)\n\t{\n\t\tif(ch.isDigit)\n\t\t{\n\t\t\tresult ~= ch;\n\t\t}\n\t}\n\tforeach(ch; test_str)\n\t{\n\t\tif(!ch.isDigit)\n\t\t{\n\t\t\tresult ~= ch;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122863,
      "stdout": "",
      "stderr": "/tmp/tmpnakchr6z.d(13): Error: no property `isDigit` for type `immutable(char)`\n/tmp/tmpnakchr6z.d(20): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnakchr6z.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tint[] nums = test_str.filter!(a => a.isDigit).map!(a => a.to!int).array;\n\tstring[] strs = test_str.filter!(a => !a.isDigit).array;\n\treturn strs.join(\"\") ~ nums.join(\"\");\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122863,
      "stdout": "",
      "stderr": "/tmp/tmpprn5umr1.d(10): Error: no property `filter` for type `string`\n/tmp/tmpprn5umr1.d(11): Error: no property `filter` for type `string`\n/tmp/tmpprn5umr1.d(12): Error: no property `join` for type `string[]`\n/tmp/tmpprn5umr1.d(12): Error: no property `join` for type `int[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpprn5umr1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpuiyom1mz.d(13): Error: no property `isDigit` for type `immutable(char)`\n/tmp/tmpuiyom1mz.d(20): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuiyom1mz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tstring nums = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tnums ~= c;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result ~ nums;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122863,
      "stdout": "",
      "stderr": "/tmp/tmp_2x8ijx1.d(14): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_2x8ijx1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpha62fudr.d(13): Error: no property `isDigit` for type `immutable(char)`\n/tmp/tmpha62fudr.d(18): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpha62fudr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(isDigit(c))\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!isDigit(c))\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpwnwc0vo1.d(13): Error: undefined identifier `isDigit`\n/tmp/tmpwnwc0vo1.d(20): Error: undefined identifier `isDigit`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwnwc0vo1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result;\n\tforeach(c; test_str)\n\t{\n\t\tif(isDigit(c))\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!isDigit(c))\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122863,
      "stdout": "",
      "stderr": "/tmp/tmpw9gepaob.d(13): Error: undefined identifier `isDigit`\n/tmp/tmpw9gepaob.d(20): Error: undefined identifier `isDigit`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw9gepaob.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tint i = 0;\n\tint j = 0;\n\tint len = test_str.length;\n\tstring result_str = \"\";\n\t\n\twhile(i < len)\n\t{\n\t\tif(test_str[i] >= '0' && test_str[i] <= '9')\n\t\t{\n\t\t\tresult_str ~= test_str[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttest_str[j] = test_str[i];\n\t\t\tj++;\n\t\t}\n\t\ti++;\n\t}\n\t\n\treturn test_str[0..j] ~ result_str;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122863,
      "stdout": "",
      "stderr": "/tmp/tmpaliiyofy.d(12): Error: cannot implicitly convert expression `test_str.length` of type `ulong` to `int`\n/tmp/tmpaliiyofy.d(23): Error: cannot modify `immutable` expression `test_str[cast(ulong)j]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpaliiyofy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpuiyom1mz.d(13): Error: no property `isDigit` for type `immutable(char)`\n/tmp/tmpuiyom1mz.d(20): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuiyom1mz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result;\n\tstring nums;\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tnums ~= c;\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result ~ nums;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122863,
      "stdout": "",
      "stderr": "/tmp/tmpcaqubq3r.d(14): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcaqubq3r.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpha62fudr.d(13): Error: no property `isDigit` for type `immutable(char)`\n/tmp/tmpha62fudr.d(18): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpha62fudr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpha62fudr.d(13): Error: no property `isDigit` for type `immutable(char)`\n/tmp/tmpha62fudr.d(18): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpha62fudr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpha62fudr.d(13): Error: no property `isDigit` for type `immutable(char)`\n/tmp/tmpha62fudr.d(18): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpha62fudr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring[] str_arr = test_str.split(\"\");\n\tstring[] num_arr;\n\tstring[] char_arr;\n\tforeach(i, str; str_arr)\n\t{\n\t\tif(str.length > 0)\n\t\t{\n\t\t\tif(str[0] >= '0' && str[0] <= '9')\n\t\t\t{\n\t\t\t\tnum_arr ~= str;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tchar_arr ~= str;\n\t\t\t}\n\t\t}\n\t}\n\treturn char_arr.join(\"\") ~ num_arr.join(\"\");\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122863,
      "stdout": "",
      "stderr": "/tmp/tmp23pnv08j.d(10): Error: no property `split` for type `string`\n/tmp/tmp23pnv08j.d(27): Error: no property `join` for type `string[]`\n/tmp/tmp23pnv08j.d(27): Error: no property `join` for type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp23pnv08j.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tstring nums = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tnums ~= c;\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result ~ nums;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517309,
      "stdout": "",
      "stderr": "/tmp/tmps8r0g9b0.d(14): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps8r0g9b0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tstring nums = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tnums ~= c;\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result ~ nums;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517309,
      "stdout": "",
      "stderr": "/tmp/tmps8r0g9b0.d(14): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps8r0g9b0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tstring nums = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tnums ~= c;\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result ~ nums;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517309,
      "stdout": "",
      "stderr": "/tmp/tmps8r0g9b0.d(14): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps8r0g9b0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tstring num = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tnum ~= c;\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result ~ num;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122863,
      "stdout": "",
      "stderr": "/tmp/tmpmbu1odpk.d(14): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmbu1odpk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpuiyom1mz.d(13): Error: no property `isDigit` for type `immutable(char)`\n/tmp/tmpuiyom1mz.d(20): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuiyom1mz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result;\n\tforeach(c; test_str)\n\t{\n\t\tif(c >= '0' && c <= '9')\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(c < '0' || c > '9')\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmptpsszxgh.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x427f8d]\n??:? void tmptpsszxgh.__unittest_L27_C1() [0x427bca]\n??:? void tmptpsszxgh.__modtest() [0x427d10]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c623]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b532]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ff09]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4303b8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fe95]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b509]\n??:? runModuleUnitTests [0x42c3f9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283dc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpha62fudr.d(13): Error: no property `isDigit` for type `immutable(char)`\n/tmp/tmpha62fudr.d(18): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpha62fudr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tstring num = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(isdigit(c))\n\t\t{\n\t\t\tnum ~= c;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result ~ num;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122863,
      "stdout": "",
      "stderr": "/tmp/tmp98yw9trd.d(14): Error: undefined identifier `isdigit`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp98yw9trd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tstring nums = \"\";\n\tforeach(char c; test_str)\n\t{\n\t\tif(c >= '0' && c <= '9')\n\t\t\tnums ~= c;\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result ~ nums;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpuiyom1mz.d(13): Error: no property `isDigit` for type `immutable(char)`\n/tmp/tmpuiyom1mz.d(20): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuiyom1mz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tstring nums = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tnums ~= c;\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result ~ nums;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517309,
      "stdout": "",
      "stderr": "/tmp/tmps8r0g9b0.d(14): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps8r0g9b0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tstring nums = \"\";\n\tforeach(c; test_str) {\n\t\tif(c >= '0' && c <= '9') {\n\t\t\tnums ~= c;\n\t\t} else {\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result ~ nums;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring res = \"\";\n\tstring num = \"\";\n\tforeach(ch; test_str)\n\t{\n\t\tif(ch.isDigit)\n\t\t\tnum ~= ch;\n\t\telse\n\t\t\tres ~= ch;\n\t}\n\treturn res ~ num;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122863,
      "stdout": "",
      "stderr": "/tmp/tmp6avwvd99.d(14): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6avwvd99.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result;\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122863,
      "stdout": "",
      "stderr": "/tmp/tmpkj2u19gr.d(13): Error: no property `isDigit` for type `immutable(char)`\n/tmp/tmpkj2u19gr.d(20): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkj2u19gr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpuiyom1mz.d(13): Error: no property `isDigit` for type `immutable(char)`\n/tmp/tmpuiyom1mz.d(20): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuiyom1mz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tstring nums = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tnums ~= c;\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\tresult ~= nums;\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122863,
      "stdout": "",
      "stderr": "/tmp/tmplaho0clj.d(14): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplaho0clj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring str_num = \"\";\n\tstring str_char = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c >= '0' && c <= '9')\n\t\t{\n\t\t\tstr_num ~= c;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr_char ~= c;\n\t\t}\n\t}\n\treturn str_char ~ str_num;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring num_str = \"\";\n\tstring char_str = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif (c >= '0' && c <= '9')\n\t\t{\n\t\t\tnum_str ~= c;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tchar_str ~= c;\n\t\t}\n\t}\n\treturn char_str ~ num_str;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tstring num = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tnum ~= c;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result ~ num;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122863,
      "stdout": "",
      "stderr": "/tmp/tmpn90ss7xp.d(14): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn90ss7xp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result;\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122863,
      "stdout": "",
      "stderr": "/tmp/tmpkj2u19gr.d(13): Error: no property `isDigit` for type `immutable(char)`\n/tmp/tmpkj2u19gr.d(20): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkj2u19gr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tforeach(char c; test_str) \n\t{\n\t\tif(c.isDigit) \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(char c; test_str) \n\t{\n\t\tif(!c.isDigit) \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122863,
      "stdout": "",
      "stderr": "/tmp/tmp8sbojc0m.d(13): Error: no property `isDigit` for type `char`\n/tmp/tmp8sbojc0m.d(20): Error: no property `isDigit` for type `char`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8sbojc0m.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tforeach(char c; test_str)\n\t{\n\t\tif(c >= '0' && c <= '9')\n\t\t\tresult ~= c;\n\t}\n\tforeach(char c; test_str)\n\t{\n\t\tif(c < '0' || c > '9')\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpc0barhg5.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x427f8d]\n??:? void tmpc0barhg5.__unittest_L23_C1() [0x427bca]\n??:? void tmpc0barhg5.__modtest() [0x427d10]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c623]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b532]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ff09]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4303b8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fe95]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b509]\n??:? runModuleUnitTests [0x42c3f9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283dc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tstring num_str = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c >= '0' && c <= '9')\n\t\t{\n\t\t\tnum_str ~= c;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tresult ~= num_str;\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring nums = \"\";\n\tstring chars = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tnums ~= c;\n\t\telse\n\t\t\tchars ~= c;\n\t}\n\treturn chars ~ nums;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122863,
      "stdout": "",
      "stderr": "/tmp/tmpgjmrubdw.d(14): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgjmrubdw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result;\n\tstring nums;\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tnums ~= c;\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result ~ nums;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122863,
      "stdout": "",
      "stderr": "/tmp/tmpcaqubq3r.d(14): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcaqubq3r.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(isdigit(c))\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!isdigit(c))\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmp76poo2bv.d(13): Error: undefined identifier `isdigit`\n/tmp/tmp76poo2bv.d(20): Error: undefined identifier `isdigit`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp76poo2bv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tstring nums = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tnums ~= c;\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result ~ nums;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517309,
      "stdout": "",
      "stderr": "/tmp/tmps8r0g9b0.d(14): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps8r0g9b0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result;\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122863,
      "stdout": "",
      "stderr": "/tmp/tmpkj2u19gr.d(13): Error: no property `isDigit` for type `immutable(char)`\n/tmp/tmpkj2u19gr.d(20): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkj2u19gr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tforeach(c; test_str) \n\t{\n\t\tif(c.isDigit) \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str) \n\t{\n\t\tif(!c.isDigit) \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmp9q9bdk55.d(13): Error: no property `isDigit` for type `immutable(char)`\n/tmp/tmp9q9bdk55.d(20): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9q9bdk55.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tforeach(char c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\tforeach(char c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122863,
      "stdout": "",
      "stderr": "/tmp/tmpsy8c8mf6.d(13): Error: no property `isDigit` for type `char`\n/tmp/tmpsy8c8mf6.d(18): Error: no property `isDigit` for type `char`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsy8c8mf6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tforeach(c; test_str) \n\t{\n\t\tif(c.isDigit) \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str) \n\t{\n\t\tif(!c.isDigit) \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmp9q9bdk55.d(13): Error: no property `isDigit` for type `immutable(char)`\n/tmp/tmp9q9bdk55.d(20): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9q9bdk55.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tstring nums = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tnums ~= c;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result ~ nums;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122863,
      "stdout": "",
      "stderr": "/tmp/tmp_2x8ijx1.d(14): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_2x8ijx1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpha62fudr.d(13): Error: no property `isDigit` for type `immutable(char)`\n/tmp/tmpha62fudr.d(18): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpha62fudr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tstring num = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tnum ~= c;\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result ~ num;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122863,
      "stdout": "",
      "stderr": "/tmp/tmpmbu1odpk.d(14): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmbu1odpk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tstring nums = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tnums ~= c;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result ~ nums;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122863,
      "stdout": "",
      "stderr": "/tmp/tmp_2x8ijx1.d(14): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_2x8ijx1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring res;\n\tforeach(c; test_str)\n\t{\n\t\tif(isDigit(c))\n\t\t{\n\t\t\tres ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!isDigit(c))\n\t\t{\n\t\t\tres ~= c;\n\t\t}\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122863,
      "stdout": "",
      "stderr": "/tmp/tmpzq6gur40.d(13): Error: undefined identifier `isDigit`\n/tmp/tmpzq6gur40.d(20): Error: undefined identifier `isDigit`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzq6gur40.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(isDigit(c))\n\t\t\tresult ~= c;\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!isDigit(c))\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122863,
      "stdout": "",
      "stderr": "/tmp/tmpmlkni0uq.d(13): Error: undefined identifier `isDigit`\n/tmp/tmpmlkni0uq.d(18): Error: undefined identifier `isDigit`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmlkni0uq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tstring num = \"\";\n\tforeach(c; test_str) {\n\t\tif(c >= '0' && c <= '9') {\n\t\t\tnum ~= c;\n\t\t} else {\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result ~ num;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result;\n\tforeach(c; test_str)\n\t{\n\t\tif(isDigit(c))\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!isDigit(c))\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122863,
      "stdout": "",
      "stderr": "/tmp/tmpw9gepaob.d(13): Error: undefined identifier `isDigit`\n/tmp/tmpw9gepaob.d(20): Error: undefined identifier `isDigit`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw9gepaob.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpuiyom1mz.d(13): Error: no property `isDigit` for type `immutable(char)`\n/tmp/tmpuiyom1mz.d(20): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuiyom1mz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tstring num = \"\";\n\tforeach(c; test_str) \n\t{\n\t\tif(c >= '0' && c <= '9') \n\t\t{\n\t\t\tnum ~= c;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result ~ num;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpha62fudr.d(13): Error: no property `isDigit` for type `immutable(char)`\n/tmp/tmpha62fudr.d(18): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpha62fudr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpuiyom1mz.d(13): Error: no property `isDigit` for type `immutable(char)`\n/tmp/tmpuiyom1mz.d(20): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuiyom1mz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(isDigit(c))\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!isDigit(c))\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpwnwc0vo1.d(13): Error: undefined identifier `isDigit`\n/tmp/tmpwnwc0vo1.d(20): Error: undefined identifier `isDigit`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwnwc0vo1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring nums = \"0123456789\";\n\tstring result = \"\";\n\tstring num_result = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(nums.canFind(c))\n\t\t{\n\t\t\tnum_result ~= c;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result ~ num_result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122863,
      "stdout": "",
      "stderr": "/tmp/tmp9swo_vmj.d(15): Error: no property `canFind` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9swo_vmj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpuiyom1mz.d(13): Error: no property `isDigit` for type `immutable(char)`\n/tmp/tmpuiyom1mz.d(20): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuiyom1mz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tstring num = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tnum ~= c;\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result ~ num;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122863,
      "stdout": "",
      "stderr": "/tmp/tmpmbu1odpk.d(14): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmbu1odpk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result;\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122863,
      "stdout": "",
      "stderr": "/tmp/tmpkj2u19gr.d(13): Error: no property `isDigit` for type `immutable(char)`\n/tmp/tmpkj2u19gr.d(20): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkj2u19gr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tforeach(char c; test_str)\n\t{\n\t\tif(isDigit(c))\n\t\t\tresult ~= c;\n\t}\n\tforeach(char c; test_str)\n\t{\n\t\tif(!isDigit(c))\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122863,
      "stdout": "",
      "stderr": "/tmp/tmp228lr9jq.d(13): Error: undefined identifier `isDigit`\n/tmp/tmp228lr9jq.d(18): Error: undefined identifier `isDigit`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp228lr9jq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tstring nums = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c >= '0' && c <= '9')\n\t\t\tnums ~= c;\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result ~ nums;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result;\n\tforeach(c; test_str)\n\t{\n\t\tif(isDigit(c))\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!isDigit(c))\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122863,
      "stdout": "",
      "stderr": "/tmp/tmpw9gepaob.d(13): Error: undefined identifier `isDigit`\n/tmp/tmpw9gepaob.d(20): Error: undefined identifier `isDigit`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw9gepaob.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result;\n\tforeach(c; test_str)\n\t{\n\t\tif(isDigit(c))\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\t\n\tforeach(c; test_str)\n\t{\n\t\tif(!isDigit(c))\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122863,
      "stdout": "",
      "stderr": "/tmp/tmpnokskrfw.d(13): Error: undefined identifier `isDigit`\n/tmp/tmpnokskrfw.d(21): Error: undefined identifier `isDigit`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnokskrfw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring res;\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tres ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t{\n\t\t\tres ~= c;\n\t\t}\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122863,
      "stdout": "",
      "stderr": "/tmp/tmp7maji6nu.d(13): Error: no property `isDigit` for type `immutable(char)`\n/tmp/tmp7maji6nu.d(20): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7maji6nu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tstring nums = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tnums ~= c;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result ~ nums;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122863,
      "stdout": "",
      "stderr": "/tmp/tmp_2x8ijx1.d(14): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_2x8ijx1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tstring nums = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c >= '0' && c <= '9')\n\t\t\tnums ~= c;\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result ~ nums;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpha62fudr.d(13): Error: no property `isDigit` for type `immutable(char)`\n/tmp/tmpha62fudr.d(18): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpha62fudr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tforeach(char c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(char c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122863,
      "stdout": "",
      "stderr": "/tmp/tmpcux_boyj.d(13): Error: no property `isDigit` for type `char`\n/tmp/tmpcux_boyj.d(20): Error: no property `isDigit` for type `char`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcux_boyj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result;\n\tforeach(c; test_str)\n\t{\n\t\tif(isDigit(c))\n\t\t\tresult ~= c;\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!isDigit(c))\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122863,
      "stdout": "",
      "stderr": "/tmp/tmpwkdz_sdq.d(13): Error: undefined identifier `isDigit`\n/tmp/tmpwkdz_sdq.d(18): Error: undefined identifier `isDigit`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwkdz_sdq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpha62fudr.d(13): Error: no property `isDigit` for type `immutable(char)`\n/tmp/tmpha62fudr.d(18): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpha62fudr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpha62fudr.d(13): Error: no property `isDigit` for type `immutable(char)`\n/tmp/tmpha62fudr.d(18): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpha62fudr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tint i = 0;\n\tint j = 0;\n\tint len = test_str.length;\n\tstring result = \"\";\n\twhile (i < len)\n\t{\n\t\tif (test_str[i] >= '0' && test_str[i] <= '9')\n\t\t{\n\t\t\tresult ~= test_str[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttest_str[j] = test_str[i];\n\t\t\tj++;\n\t\t}\n\t\ti++;\n\t}\n\treturn test_str[0..j] ~ result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122863,
      "stdout": "",
      "stderr": "/tmp/tmp0v6c_ll9.d(12): Error: cannot implicitly convert expression `test_str.length` of type `ulong` to `int`\n/tmp/tmp0v6c_ll9.d(22): Error: cannot modify `immutable` expression `test_str[cast(ulong)j]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0v6c_ll9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpha62fudr.d(13): Error: no property `isDigit` for type `immutable(char)`\n/tmp/tmpha62fudr.d(18): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpha62fudr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tstring num_str = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c >= '0' && c <= '9')\n\t\t{\n\t\t\tnum_str ~= c;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tresult ~= num_str;\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tstring num = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tnum ~= c;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result ~ num;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122863,
      "stdout": "",
      "stderr": "/tmp/tmpn90ss7xp.d(14): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn90ss7xp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tstring num = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tnum ~= c;\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result ~ num;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122863,
      "stdout": "",
      "stderr": "/tmp/tmpmbu1odpk.d(14): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmbu1odpk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tforeach(ch; test_str)\n\t{\n\t\tif(isdigit(ch))\n\t\t{\n\t\t\tresult ~= ch;\n\t\t}\n\t}\n\tforeach(ch; test_str)\n\t{\n\t\tif(!isdigit(ch))\n\t\t{\n\t\t\tresult ~= ch;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122863,
      "stdout": "",
      "stderr": "/tmp/tmppjdspu5w.d(13): Error: undefined identifier `isdigit`\n/tmp/tmppjdspu5w.d(20): Error: undefined identifier `isdigit`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppjdspu5w.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring nums = \"0123456789\";\n\tstring result = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(nums.canFind(c))\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!nums.canFind(c))\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "/tmp/tmpqzs5fzmn.d(14): Error: no property `canFind` for type `string`\n/tmp/tmpqzs5fzmn.d(21): Error: no property `canFind` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqzs5fzmn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tforeach(char c; test_str) {\n\t\tif(c.isDigit) {\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(char c; test_str) {\n\t\tif(!c.isDigit) {\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "/tmp/tmpmpk2_uxj.d(12): Error: no property `isDigit` for type `char`\n/tmp/tmpmpk2_uxj.d(17): Error: no property `isDigit` for type `char`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmpk2_uxj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpha62fudr.d(13): Error: no property `isDigit` for type `immutable(char)`\n/tmp/tmpha62fudr.d(18): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpha62fudr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tstring nums = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tnums ~= c;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result ~ nums;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122863,
      "stdout": "",
      "stderr": "/tmp/tmp_2x8ijx1.d(14): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_2x8ijx1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result;\n\tstring num_str;\n\t\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tnum_str ~= c;\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\t\n\treturn result ~ num_str;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "/tmp/tmpon6sb2fh.d(15): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpon6sb2fh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring ret_str;\n\tint i = 0;\n\tint j = 0;\n\tint len = test_str.length;\n\t\n\twhile(i < len)\n\t{\n\t\tif(test_str[i] >= '0' && test_str[i] <= '9')\n\t\t{\n\t\t\tret_str ~= test_str[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tret_str = ret_str[0..$-1] ~ test_str[i] ~ ret_str[$-1..$];\n\t\t}\n\t\ti++;\n\t}\n\treturn ret_str;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "/tmp/tmpgfvl1t36.d(13): Error: cannot implicitly convert expression `test_str.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgfvl1t36.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result;\n\tforeach(c; test_str)\n\t{\n\t\tif(isDigit(c))\n\t\t\tresult ~= c;\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!isDigit(c))\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122863,
      "stdout": "",
      "stderr": "/tmp/tmpwkdz_sdq.d(13): Error: undefined identifier `isDigit`\n/tmp/tmpwkdz_sdq.d(18): Error: undefined identifier `isDigit`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwkdz_sdq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpha62fudr.d(13): Error: no property `isDigit` for type `immutable(char)`\n/tmp/tmpha62fudr.d(18): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpha62fudr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tstring nums = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tnums ~= c;\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result ~ nums;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517309,
      "stdout": "",
      "stderr": "/tmp/tmps8r0g9b0.d(14): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps8r0g9b0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tstring nums = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c >= '0' && c <= '9')\n\t\t\tnums ~= c;\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result ~ nums;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tstring num = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tnum ~= c;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result ~ num;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122863,
      "stdout": "",
      "stderr": "/tmp/tmpn90ss7xp.d(14): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn90ss7xp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring num_str = \"\";\n\tstring char_str = \"\";\n\tforeach(ch; test_str) \n\t{\n\t\tif(ch.isDigit) \n\t\t{\n\t\t\tnum_str ~= ch;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tchar_str ~= ch;\n\t\t}\n\t}\n\treturn char_str ~ num_str;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "/tmp/tmplzsd7cfl.d(14): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplzsd7cfl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tstring nums = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tnums ~= c;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result ~ nums;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122863,
      "stdout": "",
      "stderr": "/tmp/tmp_2x8ijx1.d(14): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_2x8ijx1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result;\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122863,
      "stdout": "",
      "stderr": "/tmp/tmpkj2u19gr.d(13): Error: no property `isDigit` for type `immutable(char)`\n/tmp/tmpkj2u19gr.d(20): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkj2u19gr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tstring num = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tnum ~= c;\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result ~ num;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122863,
      "stdout": "",
      "stderr": "/tmp/tmpmbu1odpk.d(14): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmbu1odpk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\t\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "/tmp/tmp60w1jyhk.d(13): Error: no property `isDigit` for type `immutable(char)`\n/tmp/tmp60w1jyhk.d(19): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp60w1jyhk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result;\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpgt8wvh_b.d(13): Error: no property `isDigit` for type `immutable(char)`\n/tmp/tmpgt8wvh_b.d(18): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgt8wvh_b.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpuiyom1mz.d(13): Error: no property `isDigit` for type `immutable(char)`\n/tmp/tmpuiyom1mz.d(20): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuiyom1mz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tstring nums = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tnums ~= c;\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result ~ nums;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517309,
      "stdout": "",
      "stderr": "/tmp/tmps8r0g9b0.d(14): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps8r0g9b0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tstring nums = \"\";\n\tforeach(char c; test_str) {\n\t\tif(c >= '0' && c <= '9') {\n\t\t\tnums ~= c;\n\t\t} else {\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result ~ nums;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tstring num = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c >= '0' && c <= '9')\n\t\t\tnum ~= c;\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result ~ num;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpha62fudr.d(13): Error: no property `isDigit` for type `immutable(char)`\n/tmp/tmpha62fudr.d(18): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpha62fudr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring str_result = \"\";\n\tstring num_result = \"\";\n\tforeach(char c; test_str)\n\t{\n\t\tif(c >= '0' && c <= '9')\n\t\t\tnum_result ~= c;\n\t\telse\n\t\t\tstr_result ~= c;\n\t}\n\treturn str_result ~ num_result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result;\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpgt8wvh_b.d(13): Error: no property `isDigit` for type `immutable(char)`\n/tmp/tmpgt8wvh_b.d(18): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgt8wvh_b.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tforeach(c; test_str) \n\t{\n\t\tif(c.isDigit) \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str) \n\t{\n\t\tif(!c.isDigit) \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmp9q9bdk55.d(13): Error: no property `isDigit` for type `immutable(char)`\n/tmp/tmp9q9bdk55.d(20): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9q9bdk55.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring[] str_arr;\n\tstring[] num_arr;\n\tstring result;\n\t\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tnum_arr ~= c;\n\t\telse\n\t\t\tstr_arr ~= c;\n\t}\n\t\n\tresult = str_arr.join ~ num_arr.join;\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "/tmp/tmpndb8nanr.d(16): Error: no property `isDigit` for type `immutable(char)`\n/tmp/tmpndb8nanr.d(17): Error: cannot append type `immutable(char)` to type `string[]`\n/tmp/tmpndb8nanr.d(19): Error: cannot append type `immutable(char)` to type `string[]`\n/tmp/tmpndb8nanr.d(22): Error: no property `join` for type `string[]`\n/tmp/tmpndb8nanr.d(22): Error: no property `join` for type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpndb8nanr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpha62fudr.d(13): Error: no property `isDigit` for type `immutable(char)`\n/tmp/tmpha62fudr.d(18): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpha62fudr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tresult ~= c;\n\t\telse\n\t\t\tresult = c ~ result;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "/tmp/tmpv9b6knxu.d(13): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv9b6knxu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpha62fudr.d(13): Error: no property `isDigit` for type `immutable(char)`\n/tmp/tmpha62fudr.d(18): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpha62fudr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result;\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpgt8wvh_b.d(13): Error: no property `isDigit` for type `immutable(char)`\n/tmp/tmpgt8wvh_b.d(18): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgt8wvh_b.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tstring nums = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tnums ~= c;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result ~ nums;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122863,
      "stdout": "",
      "stderr": "/tmp/tmp_2x8ijx1.d(14): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_2x8ijx1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring str_num = \"\";\n\tstring str_char = \"\";\n\t\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tstr_num ~= c;\n\t\telse\n\t\t\tstr_char ~= c;\n\t}\n\treturn str_char ~ str_num;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "/tmp/tmp50x2rddm.d(15): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp50x2rddm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpha62fudr.d(13): Error: no property `isDigit` for type `immutable(char)`\n/tmp/tmpha62fudr.d(18): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpha62fudr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result;\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122863,
      "stdout": "",
      "stderr": "/tmp/tmpkj2u19gr.d(13): Error: no property `isDigit` for type `immutable(char)`\n/tmp/tmpkj2u19gr.d(20): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkj2u19gr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpha62fudr.d(13): Error: no property `isDigit` for type `immutable(char)`\n/tmp/tmpha62fudr.d(18): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpha62fudr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isAlpha)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "/tmp/tmpkjqfpq9k.d(13): Error: no property `isAlpha` for type `immutable(char)`\n/tmp/tmpkjqfpq9k.d(20): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkjqfpq9k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tforeach(char c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\tforeach(char c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122863,
      "stdout": "",
      "stderr": "/tmp/tmpsy8c8mf6.d(13): Error: no property `isDigit` for type `char`\n/tmp/tmpsy8c8mf6.d(18): Error: no property `isDigit` for type `char`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsy8c8mf6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tstring nums = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c >= '0' && c <= '9')\n\t\t{\n\t\t\tnums ~= c;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result ~ nums;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tstring nums = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tnums ~= c;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result ~ nums;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122863,
      "stdout": "",
      "stderr": "/tmp/tmp_2x8ijx1.d(14): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_2x8ijx1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tstring num = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tnum ~= c;\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result ~ num;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122863,
      "stdout": "",
      "stderr": "/tmp/tmpmbu1odpk.d(14): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmbu1odpk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tstring nums = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c >= '0' && c <= '9')\n\t\t\tnums ~= c;\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result ~ nums;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result;\n\tforeach(c; test_str)\n\t{\n\t\tif(isDigit(c))\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!isDigit(c))\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122863,
      "stdout": "",
      "stderr": "/tmp/tmpw9gepaob.d(13): Error: undefined identifier `isDigit`\n/tmp/tmpw9gepaob.d(20): Error: undefined identifier `isDigit`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw9gepaob.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring nums = \"0123456789\";\n\tstring result = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(nums.canFind(c))\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!nums.canFind(c))\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "/tmp/tmpqzs5fzmn.d(14): Error: no property `canFind` for type `string`\n/tmp/tmpqzs5fzmn.d(21): Error: no property `canFind` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqzs5fzmn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tstring num = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tnum ~= c;\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result ~ num;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122863,
      "stdout": "",
      "stderr": "/tmp/tmpmbu1odpk.d(14): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmbu1odpk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tstring nums = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tnums ~= c;\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result ~ nums;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517309,
      "stdout": "",
      "stderr": "/tmp/tmps8r0g9b0.d(14): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps8r0g9b0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpuiyom1mz.d(13): Error: no property `isDigit` for type `immutable(char)`\n/tmp/tmpuiyom1mz.d(20): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuiyom1mz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring res = \"\";\n\tstring nums = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c >= '0' && c <= '9')\n\t\t{\n\t\t\tnums ~= c;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tres ~= c;\n\t\t}\n\t}\n\treturn res ~ nums;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tint i = 0;\n\twhile (i < test_str.length) \n\t{\n\t\tif (test_str[i] >= '0' && test_str[i] <= '9') \n\t\t{\n\t\t\tresult = result ~ test_str[i];\n\t\t}\n\t\ti++;\n\t}\n\ti = 0;\n\twhile (i < test_str.length) \n\t{\n\t\tif (test_str[i] < '0' || test_str[i] > '9') \n\t\t{\n\t\t\tresult = result ~ test_str[i];\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp17f_203u.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x42800d]\n??:? void tmp17f_203u.__unittest_L31_C1() [0x427c46]\n??:? void tmp17f_203u.__modtest() [0x427d8c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42be73]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ad82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fd51]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430200]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fcdd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ad59]\n??:? runModuleUnitTests [0x42bc49]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4284d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tstring nums = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(isDigit(c))\n\t\t\tnums ~= c;\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result ~ nums;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122863,
      "stdout": "",
      "stderr": "/tmp/tmpekrwmo8t.d(14): Error: undefined identifier `isDigit`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpekrwmo8t.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpha62fudr.d(13): Error: no property `isDigit` for type `immutable(char)`\n/tmp/tmpha62fudr.d(18): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpha62fudr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring res;\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tres ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t{\n\t\t\tres ~= c;\n\t\t}\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122863,
      "stdout": "",
      "stderr": "/tmp/tmp7maji6nu.d(13): Error: no property `isDigit` for type `immutable(char)`\n/tmp/tmp7maji6nu.d(20): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7maji6nu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tstring nums = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tnums ~= c;\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result ~ nums;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517309,
      "stdout": "",
      "stderr": "/tmp/tmps8r0g9b0.d(14): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps8r0g9b0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tint i = 0;\n\tint j = 0;\n\tint len = test_str.length;\n\tchar[] result = new char[len];\n\t\n\twhile(i < len) {\n\t\tif(test_str[i] >= '0' && test_str[i] <= '9') {\n\t\t\tresult[j] = test_str[i];\n\t\t\tj++;\n\t\t}\n\t\ti++;\n\t}\n\t\n\ti = 0;\n\twhile(i < len) {\n\t\tif(test_str[i] < '0' || test_str[i] > '9') {\n\t\t\tresult[j] = test_str[i];\n\t\t\tj++;\n\t\t}\n\t\ti++;\n\t}\n\t\n\treturn result.toString;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "/tmp/tmp0rli6imb.d(12): Error: cannot implicitly convert expression `test_str.length` of type `ulong` to `int`\n/tmp/tmp0rli6imb.d(32): Error: no property `toString` for type `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0rli6imb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result;\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpgt8wvh_b.d(13): Error: no property `isDigit` for type `immutable(char)`\n/tmp/tmpgt8wvh_b.d(18): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgt8wvh_b.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tstring num = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c >= '0' && c <= '9')\n\t\t{\n\t\t\tnum ~= c;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result ~ num;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result;\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122863,
      "stdout": "",
      "stderr": "/tmp/tmpkj2u19gr.d(13): Error: no property `isDigit` for type `immutable(char)`\n/tmp/tmpkj2u19gr.d(20): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkj2u19gr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tforeach(c; test_str) \n\t{\n\t\tif(c.isDigit) \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str) \n\t{\n\t\tif(!c.isDigit) \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmp9q9bdk55.d(13): Error: no property `isDigit` for type `immutable(char)`\n/tmp/tmp9q9bdk55.d(20): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9q9bdk55.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring res = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tres ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t{\n\t\t\tres ~= c;\n\t\t}\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "/tmp/tmpw1ppnr2d.d(13): Error: no property `isDigit` for type `immutable(char)`\n/tmp/tmpw1ppnr2d.d(20): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw1ppnr2d.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tstring nums = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c >= '0' && c <= '9')\n\t\t\tnums ~= c;\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result ~ nums;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tstring num = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tnum ~= c;\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result ~ num;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122863,
      "stdout": "",
      "stderr": "/tmp/tmpmbu1odpk.d(14): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmbu1odpk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result;\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tresult ~= c;\n\t\telse\n\t\t\tresult = c ~ result;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "/tmp/tmp0um93e63.d(13): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0um93e63.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tstring num = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tnum ~= c;\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result ~ num;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122863,
      "stdout": "",
      "stderr": "/tmp/tmpmbu1odpk.d(14): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmbu1odpk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tforeach(char c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(char c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122863,
      "stdout": "",
      "stderr": "/tmp/tmpcux_boyj.d(13): Error: no property `isDigit` for type `char`\n/tmp/tmpcux_boyj.d(20): Error: no property `isDigit` for type `char`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcux_boyj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result;\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122863,
      "stdout": "",
      "stderr": "/tmp/tmpkj2u19gr.d(13): Error: no property `isDigit` for type `immutable(char)`\n/tmp/tmpkj2u19gr.d(20): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkj2u19gr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tforeach(char c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(char c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122863,
      "stdout": "",
      "stderr": "/tmp/tmpcux_boyj.d(13): Error: no property `isDigit` for type `char`\n/tmp/tmpcux_boyj.d(20): Error: no property `isDigit` for type `char`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcux_boyj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tstring num = \"\";\n\tforeach(c; test_str) \n\t{\n\t\tif(c.isDigit) \n\t\t{\n\t\t\tnum ~= c;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result ~ num;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "/tmp/tmp4mtsktuk.d(14): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4mtsktuk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tstring num = \"\";\n\tforeach(c; test_str) \n\t{\n\t\tif(c >= '0' && c <= '9') \n\t\t{\n\t\t\tnum ~= c;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result ~ num;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tstring nums = \"0123456789\";\n\tforeach(c; test_str)\n\t{\n\t\tif(nums.canFind(c))\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!nums.canFind(c))\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "/tmp/tmpiyptxwc3.d(14): Error: no property `canFind` for type `string`\n/tmp/tmpiyptxwc3.d(21): Error: no property `canFind` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiyptxwc3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tstring num = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c >= '0' && c <= '9')\n\t\t{\n\t\t\tnum ~= c;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result ~ num;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tstring num = \"\";\n\t\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tnum ~= c;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\t\n\treturn result ~ num;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "/tmp/tmpvin5krer.d(15): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvin5krer.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring num_str = \"\";\n\tstring str_str = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c >= '0' && c <= '9')\n\t\t{\n\t\t\tnum_str ~= c;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr_str ~= c;\n\t\t}\n\t}\n\treturn str_str ~ num_str;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(isDigit(c))\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!isDigit(c))\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpwnwc0vo1.d(13): Error: undefined identifier `isDigit`\n/tmp/tmpwnwc0vo1.d(20): Error: undefined identifier `isDigit`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwnwc0vo1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result;\n\tforeach(char c; test_str)\n\t{\n\t\tif(isDigit(c))\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(char c; test_str)\n\t{\n\t\tif(!isDigit(c))\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "/tmp/tmp4qt3ocmj.d(13): Error: undefined identifier `isDigit`\n/tmp/tmp4qt3ocmj.d(20): Error: undefined identifier `isDigit`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4qt3ocmj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpha62fudr.d(13): Error: no property `isDigit` for type `immutable(char)`\n/tmp/tmpha62fudr.d(18): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpha62fudr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tstring nums = \"\";\n\tforeach(c; test_str) {\n\t\tif(c.isDigit) {\n\t\t\tnums ~= c;\n\t\t} else {\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result ~ nums;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "/tmp/tmp5ttqgcep.d(13): Error: no property `isDigit` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5ttqgcep.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n{\n\tstring result = \"\";\n\tstring num = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c >= '0' && c <= '9')\n\t\t{\n\t\t\tnum ~= c;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result ~ num;\n}\nunittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
      "timestamp": 1666122864,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}