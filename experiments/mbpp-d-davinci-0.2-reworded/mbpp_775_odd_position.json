{
  "name": "mbpp_775_odd_position",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n\t\n*/\nbool odd_position(long[] nums) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_775_odd_position.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0 && n % 2 == 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}",
    "{\n\tforeach(i,n; nums) \n\t{\n\t\tif(i % 2 != 0 && n % 2 == 0) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 1 && num % 2 == 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 1 && n % 2 == 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 1 && n % 2 == 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}",
    "{\n\tforeach(i, num; nums) \n\t{\n\t\tif(i % 2 == 0 && num % 2 == 0) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tif(num % 2 == 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tbool odd_position = true;\n\tforeach(i; 0..nums.length)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tif(nums[i] % 2 == 0)\n\t\t\t{\n\t\t\t\todd_position = false;\n\t\t\t}\n\t\t}\n\t}\n\treturn odd_position;\n}",
    "{\n\tforeach(idx, num; nums)\n\t{\n\t\tif(idx % 2 == 1 && num % 2 == 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}",
    "{\n\tforeach(i, n; nums) \n\t{\n\t\tif(i % 2 == 0 && n % 2 == 0) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 1 && num % 2 == 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 1 && num % 2 == 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\tif(num % 2 == 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tforeach(i; 0..nums.length)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tif(nums[i] % 2 == 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 1 && n % 2 == 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tif(num % 2 == 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tforeach(i,n; nums)\n\t{\n\t\tif(i%2==1)\n\t\t{\n\t\t\tif(n%2==0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tforeach(i, num; nums)\n\t{\n\t\tif(i % 2 == 1 && num % 2 == 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}",
    "{\n\tforeach(i, n; nums)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tif(n % 2 == 0)\n\t\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tforeach(i, num; nums) \n\t{\n\t\tif(i % 2 == 0 && num % 2 == 0) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}"
  ]
}