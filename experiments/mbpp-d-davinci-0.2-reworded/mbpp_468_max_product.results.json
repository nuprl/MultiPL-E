{
  "name": "mbpp_468_max_product",
  "language": "d",
  "prompt": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_468_max_product.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 1;\n\tlong[] max_products = new long[arr.length];\n\tmax_products[0] = arr[0];\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tmax_products[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tmax_products[i] = max(max_products[i], max_products[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax_product = max(max_product, max_products[i]);\n\t}\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "/tmp/tmpba8gplsi.d(19): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmpba8gplsi.d(22): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpba8gplsi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 1;\n\tlong max_so_far = 1;\n\tlong min_so_far = 1;\n\tforeach(i; arr)\n\t{\n\t\tif(i > 0)\n\t\t{\n\t\t\tmax_so_far *= i;\n\t\t\tmin_so_far *= i;\n\t\t}\n\t\telse if(i == 0)\n\t\t{\n\t\t\tmax_so_far = 1;\n\t\t\tmin_so_far = 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlong temp = max_so_far;\n\t\t\tmax_so_far = max(min_so_far * i, 1);\n\t\t\tmin_so_far = temp * i;\n\t\t}\n\t\tif(max_so_far > max_product)\n\t\t\tmax_product = max_so_far;\n\t}\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "/tmp/tmp3rfm_bgd.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3rfm_bgd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 0;\n\tlong[] max_product_arr = new long[arr.length];\n\t\n\tforeach(i, v; arr)\n\t{\n\t\tmax_product_arr[i] = v;\n\t\tforeach(j, v2; arr[0..i])\n\t\t{\n\t\t\tif(v2 < v)\n\t\t\t{\n\t\t\t\tmax_product_arr[i] = max(max_product_arr[i], v * max_product_arr[j]);\n\t\t\t}\n\t\t}\n\t\tmax_product = max(max_product, max_product_arr[i]);\n\t}\n\t\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "/tmp/tmp9eoy_kg3.d(19): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmp9eoy_kg3.d(22): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9eoy_kg3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 1;\n\tlong[] max_product_arr = new long[arr.length];\n\tmax_product_arr[0] = arr[0];\n\t\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tlong max_product_so_far = 1;\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[j] < arr[i]) \n\t\t\t{\n\t\t\t\tmax_product_so_far = max(max_product_so_far, max_product_arr[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax_product_arr[i] = max_product_so_far;\n\t\tmax_product = max(max_product, max_product_so_far);\n\t}\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "/tmp/tmp6vr07_zq.d(20): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmp6vr07_zq.d(24): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6vr07_zq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 1;\n\tlong max_product_so_far = 1;\n\t\n\tforeach(elem; arr)\n\t{\n\t\tif(elem > 0)\n\t\t{\n\t\t\tmax_product *= elem;\n\t\t\tmax_product_so_far = max(max_product_so_far, max_product);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tmax_product = 1;\n\t\t}\n\t}\n\treturn max_product_so_far;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "/tmp/tmpd4g4r0zh.d(17): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd4g4r0zh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max = 0;\n\tlong product = 1;\n\tlong[] dp = new long[arr.length];\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\tdp[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tdp[i] = max(dp[i], dp[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax = max(max, dp[i]);\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "/tmp/tmp_8d_nu1c.d(19): Error: function expected before `()`, not `max` of type `long`\n/tmp/tmp_8d_nu1c.d(22): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_8d_nu1c.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n    long[] max_product = new long[arr.length];\n    max_product[0] = arr[0];\n    long result = arr[0];\n    for (int i = 1; i < arr.length; i++) \n    {\n        max_product[i] = arr[i];\n        for (int j = 0; j < i; j++) \n        {\n            if (arr[i] > arr[j]) \n            {\n                max_product[i] = max(max_product[i], max_product[j] * arr[i]);\n            }\n        }\n        result = max(result, max_product[i]);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "/tmp/tmpawjbgtzg.d(19): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmpawjbgtzg.d(22): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpawjbgtzg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max = 0;\n\tlong product = 1;\n\tforeach(i; arr)\n\t{\n\t\tif(i > 0)\n\t\t{\n\t\t\tproduct *= i;\n\t\t\tif(product > max)\n\t\t\t\tmax = product;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tproduct = 1;\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpx6xo6a6j.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x42814d]\n??:? void tmpx6xo6a6j.__unittest_L26_C1() [0x427de1]\n??:? void tmpx6xo6a6j.__modtest() [0x427ed0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c137]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afca]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43015d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43060c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afa1]\n??:? runModuleUnitTests [0x42bf0d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42859c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong[] max_product = new long[arr.length];\n\tlong[] min_product = new long[arr.length];\n\t\n\tmax_product[0] = arr[0];\n\tmin_product[0] = arr[0];\n\t\n\tfor(int i = 1; i < arr.length; i++)\n\t{\n\t\tmax_product[i] = max(max(max_product[i-1] * arr[i], min_product[i-1] * arr[i]), arr[i]);\n\t\tmin_product[i] = min(min(max_product[i-1] * arr[i], min_product[i-1] * arr[i]), arr[i]);\n\t}\n\t\n\treturn max(max_product);\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "/tmp/tmpdhlzg856.d(17): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmpdhlzg856.d(18): Error: undefined identifier `min`, did you mean function `main`?\n/tmp/tmpdhlzg856.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdhlzg856.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max = 0;\n\tlong[] dp = new long[arr.length];\n\tdp[0] = arr[0];\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tdp[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tdp[i] = max(dp[i], dp[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax = max(max, dp[i]);\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "/tmp/tmpa2xrlfck.d(19): Error: function expected before `()`, not `max` of type `long`\n/tmp/tmpa2xrlfck.d(22): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa2xrlfck.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 0;\n\tlong[] max_product_arr = new long[arr.length];\n\tmax_product_arr[0] = arr[0];\n\tfor (int i = 1; i < arr.length; i++)\n\t{\n\t\tmax_product_arr[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++)\n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tmax_product_arr[i] = max(max_product_arr[i], max_product_arr[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax_product = max(max_product, max_product_arr[i]);\n\t}\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "/tmp/tmphb6z3ssy.d(19): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmphb6z3ssy.d(22): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphb6z3ssy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 1;\n\tlong product = 1;\n\tlong max_element = 0;\n\tlong min_element = 0;\n\t\n\tforeach(element; arr)\n\t{\n\t\tif(element > 0)\n\t\t{\n\t\t\tproduct *= element;\n\t\t\tmax_element = max(max_element, element);\n\t\t}\n\t\telse if(element == 0)\n\t\t{\n\t\t\tmax_product = max(max_product, product);\n\t\t\tproduct = 1;\n\t\t\tmax_element = 0;\n\t\t\tmin_element = 0;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tmax_product = max(max_product, product / min_element * element);\n\t\t\tproduct = product / min_element * element;\n\t\t\tmin_element = min(min_element, element);\n\t\t}\n\t}\n\t\n\tmax_product = max(max_product, product);\n\t\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "/tmp/tmprj73cxv8.d(19): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmprj73cxv8.d(23): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmprj73cxv8.d(30): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmprj73cxv8.d(32): Error: undefined identifier `min`, did you mean function `main`?\n/tmp/tmprj73cxv8.d(36): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprj73cxv8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n    long max = 0;\n    long[] dp = new long[arr.length];\n    dp[0] = arr[0];\n    for (int i = 1; i < arr.length; i++)\n    {\n        dp[i] = arr[i];\n        for (int j = 0; j < i; j++)\n        {\n            if (arr[j] < arr[i])\n            {\n                dp[i] = max(dp[i], dp[j] * arr[i]);\n            }\n        }\n        max = max(max, dp[i]);\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "/tmp/tmpzc31gzqf.d(19): Error: function expected before `()`, not `max` of type `long`\n/tmp/tmpzc31gzqf.d(22): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzc31gzqf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max = 0;\n\tlong[] dp = new long[arr.length];\n\tdp[0] = arr[0];\n\tforeach(i; 1 .. arr.length)\n\t{\n\t\tdp[i] = arr[i];\n\t\tforeach(j; 0 .. i)\n\t\t{\n\t\t\tif(arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tdp[i] = max(dp[i], dp[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax = max(max, dp[i]);\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "/tmp/tmpjjid3fd6.d(19): Error: function expected before `()`, not `max` of type `long`\n/tmp/tmpjjid3fd6.d(22): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjjid3fd6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max = 0;\n\tlong[] dp = new long[arr.length];\n\tdp[0] = arr[0];\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tdp[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tdp[i] = max(dp[i], dp[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax = max(max, dp[i]);\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "/tmp/tmpa2xrlfck.d(19): Error: function expected before `()`, not `max` of type `long`\n/tmp/tmpa2xrlfck.d(22): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa2xrlfck.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong[] max_prod = new long[arr.length];\n\tlong[] min_prod = new long[arr.length];\n\t\n\tmax_prod[0] = arr[0];\n\tmin_prod[0] = arr[0];\n\t\n\tlong max_so_far = arr[0];\n\t\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tmax_prod[i] = max(arr[i], max(arr[i] * max_prod[i - 1], arr[i] * min_prod[i - 1]));\n\t\tmin_prod[i] = min(arr[i], min(arr[i] * max_prod[i - 1], arr[i] * min_prod[i - 1]));\n\t\t\n\t\tmax_so_far = max(max_so_far, max_prod[i]);\n\t}\n\t\n\treturn max_so_far;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "/tmp/tmp4l150p7p.d(19): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmp4l150p7p.d(20): Error: undefined identifier `min`, did you mean function `main`?\n/tmp/tmp4l150p7p.d(22): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4l150p7p.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n    long max = 0;\n    long product = 1;\n    long[] dp = new long[arr.length];\n    dp[0] = 1;\n    for (int i = 1; i < arr.length; i++)\n    {\n        dp[i] = 1;\n        for (int j = 0; j < i; j++)\n        {\n            if (arr[i] > arr[j])\n            {\n                dp[i] = max(dp[i], dp[j] + 1);\n            }\n        }\n    }\n    for (int i = 0; i < arr.length; i++)\n    {\n        product = 1;\n        for (int j = i; j < arr.length; j++)\n        {\n            if (dp[j] == dp[i])\n            {\n                product *= arr[j];\n            }\n        }\n        max = max(max, product);\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "/tmp/tmpctg2fekt.d(20): Error: function expected before `()`, not `max` of type `long`\n/tmp/tmpctg2fekt.d(34): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpctg2fekt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max = 0;\n\tlong product = 1;\n\tforeach(i; arr)\n\t{\n\t\tproduct *= i;\n\t\tmax = max(max, product);\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "/tmp/tmpd96wsb7b.d(14): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd96wsb7b.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong[] max_product = new long[arr.length];\n\tmax_product[0] = arr[0];\n\tlong max = arr[0];\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tmax_product[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tmax_product[i] = max(max_product[i], max_product[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax = max(max, max_product[i]);\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "/tmp/tmpju6e0wdx.d(19): Error: function expected before `()`, not `max` of type `long`\n/tmp/tmpju6e0wdx.d(22): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpju6e0wdx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max = 0;\n\tlong max_product = 0;\n\tlong product = 1;\n\t\n\tforeach(i; arr)\n\t{\n\t\tif(i > max)\n\t\t{\n\t\t\tmax = i;\n\t\t\tproduct *= i;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(product > max_product)\n\t\t\t{\n\t\t\t\tmax_product = product;\n\t\t\t}\n\t\t\tproduct = 1;\n\t\t\tmax = i;\n\t\t\tproduct *= i;\n\t\t}\n\t}\n\t\n\tif(product > max_product)\n\t{\n\t\tmax_product = product;\n\t}\n\t\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 1;\n\tlong current_product = 1;\n\tlong current_max = arr[0];\n\tforeach(i; arr)\n\t{\n\t\tif(i > current_max)\n\t\t{\n\t\t\tcurrent_max = i;\n\t\t\tcurrent_product *= i;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(current_product > max_product)\n\t\t\t{\n\t\t\t\tmax_product = current_product;\n\t\t\t}\n\t\t\tcurrent_product = 1;\n\t\t\tcurrent_max = i;\n\t\t}\n\t}\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122555,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp1yn05s7v.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x42817d]\n??:? void tmp1yn05s7v.__unittest_L31_C1() [0x427e11]\n??:? void tmp1yn05s7v.__modtest() [0x427f00]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1db]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b06e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430201]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306b0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43018d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b045]\n??:? runModuleUnitTests [0x42bfb1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428640]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 1;\n\tlong[] max_product_arr = new long[arr.length];\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\tmax_product_arr[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[j] < arr[i]) \n\t\t\t{\n\t\t\t\tmax_product_arr[i] = max(max_product_arr[i], max_product_arr[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax_product = max(max_product, max_product_arr[i]);\n\t}\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122555,
      "stdout": "",
      "stderr": "/tmp/tmp0cpeec1h.d(18): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmp0cpeec1h.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0cpeec1h.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max = 0;\n\tlong[] dp = new long[arr.length];\n\tdp[0] = arr[0];\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tdp[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tdp[i] = max(dp[i], dp[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax = max(max, dp[i]);\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "/tmp/tmpa2xrlfck.d(19): Error: function expected before `()`, not `max` of type `long`\n/tmp/tmpa2xrlfck.d(22): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa2xrlfck.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max = 0;\n\tlong[] dp = new long[arr.length];\n\tdp[0] = arr[0];\n\tfor (int i = 1; i < arr.length; i++)\n\t{\n\t\tdp[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++)\n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tdp[i] = max(dp[i], dp[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax = max(max, dp[i]);\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122555,
      "stdout": "",
      "stderr": "/tmp/tmpnrd66ur1.d(19): Error: function expected before `()`, not `max` of type `long`\n/tmp/tmpnrd66ur1.d(22): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnrd66ur1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 1;\n\tlong[] max_products = new long[arr.length];\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\tmax_products[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tmax_products[i] = max(max_products[i], max_products[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax_product = max(max_product, max_products[i]);\n\t}\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122555,
      "stdout": "",
      "stderr": "/tmp/tmp5_drwpoe.d(18): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmp5_drwpoe.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5_drwpoe.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 1;\n\tlong product = 1;\n\tlong max_element = arr[0];\n\tforeach(elem; arr)\n\t{\n\t\tif(elem > max_element)\n\t\t{\n\t\t\tmax_element = elem;\n\t\t}\n\t\tproduct *= elem;\n\t\tif(product > max_product)\n\t\t{\n\t\t\tmax_product = product;\n\t\t}\n\t\tif(product == 0)\n\t\t{\n\t\t\tproduct = 1;\n\t\t}\n\t}\n\treturn max(max_product, max_element);\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122555,
      "stdout": "",
      "stderr": "/tmp/tmpujx_71lv.d(28): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpujx_71lv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 1;\n\tlong product = 1;\n\tlong max_num = 0;\n\tlong min_num = 0;\n\t\n\tforeach(num; arr)\n\t{\n\t\tif(num > 0)\n\t\t{\n\t\t\tmax_num = max(max_num * num, num);\n\t\t\tmin_num = min(min_num * num, num);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlong temp = max_num;\n\t\t\tmax_num = max(min_num * num, num);\n\t\t\tmin_num = min(temp * num, num);\n\t\t}\n\t\t\n\t\tmax_product = max(max_product, max_num);\n\t}\n\t\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122555,
      "stdout": "",
      "stderr": "/tmp/tmpdfeunhci.d(18): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmpdfeunhci.d(19): Error: undefined identifier `min`, did you mean function `main`?\n/tmp/tmpdfeunhci.d(24): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmpdfeunhci.d(25): Error: undefined identifier `min`, did you mean function `main`?\n/tmp/tmpdfeunhci.d(28): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdfeunhci.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 1;\n\tlong max_so_far = 1;\n\tlong min_so_far = 1;\n\t\n\tforeach(i; arr)\n\t{\n\t\tif(i > 0)\n\t\t{\n\t\t\tmax_so_far *= i;\n\t\t\tmin_so_far *= i;\n\t\t}\n\t\telse if(i == 0)\n\t\t{\n\t\t\tmax_so_far = 1;\n\t\t\tmin_so_far = 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlong temp = max_so_far;\n\t\t\tmax_so_far = max(min_so_far * i, 1);\n\t\t\tmin_so_far = temp * i;\n\t\t}\n\t\t\n\t\tif(max_so_far > max_product)\n\t\t\tmax_product = max_so_far;\n\t}\n\t\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122555,
      "stdout": "",
      "stderr": "/tmp/tmp1itr_8ke.d(28): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1itr_8ke.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong maxProduct = 1;\n\tlong[] maxProductArr = new long[arr.length];\n\tlong[] minProductArr = new long[arr.length];\n\t\n\tmaxProductArr[0] = arr[0];\n\tminProductArr[0] = arr[0];\n\t\n\tforeach(i, v; arr)\n\t{\n\t\tif(i == 0)\n\t\t\tcontinue;\n\t\t\n\t\tmaxProductArr[i] = max(maxProductArr[i-1] * v, minProductArr[i-1] * v, v);\n\t\tminProductArr[i] = min(maxProductArr[i-1] * v, minProductArr[i-1] * v, v);\n\t\t\n\t\tif(maxProductArr[i] > maxProduct)\n\t\t\tmaxProduct = maxProductArr[i];\n\t}\n\t\n\treturn maxProduct;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122555,
      "stdout": "",
      "stderr": "/tmp/tmpaqmwrjn6.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmpaqmwrjn6.d(22): Error: undefined identifier `min`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpaqmwrjn6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong[] max = new long[arr.length];\n\tlong[] min = new long[arr.length];\n\t\n\tmax[0] = arr[0];\n\tmin[0] = arr[0];\n\t\n\tlong result = arr[0];\n\t\n\tfor(int i = 1; i < arr.length; i++)\n\t{\n\t\tif(arr[i] > 0)\n\t\t{\n\t\t\tmax[i] = max(arr[i], max[i-1] * arr[i]);\n\t\t\tmin[i] = min(arr[i], min[i-1] * arr[i]);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tmax[i] = max(arr[i], min[i-1] * arr[i]);\n\t\t\tmin[i] = min(arr[i], max[i-1] * arr[i]);\n\t\t}\n\t\t\n\t\tresult = max(result, max[i]);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122555,
      "stdout": "",
      "stderr": "/tmp/tmp1usns3tm.d(21): Error: function expected before `()`, not `max` of type `long[]`\n/tmp/tmp1usns3tm.d(22): Error: function expected before `()`, not `min` of type `long[]`\n/tmp/tmp1usns3tm.d(26): Error: function expected before `()`, not `max` of type `long[]`\n/tmp/tmp1usns3tm.d(27): Error: function expected before `()`, not `min` of type `long[]`\n/tmp/tmp1usns3tm.d(30): Error: function expected before `()`, not `max` of type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1usns3tm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong[] max_product = new long[arr.length];\n\tmax_product[0] = arr[0];\n\tlong max = arr[0];\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tmax_product[i] = max(arr[i], max_product[i - 1] * arr[i]);\n\t\tmax = max(max, max_product[i]);\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122555,
      "stdout": "",
      "stderr": "/tmp/tmpa8uwotcg.d(14): Error: function expected before `()`, not `max` of type `long`\n/tmp/tmpa8uwotcg.d(15): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa8uwotcg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max = 0;\n\tlong[] dp = new long[arr.length];\n\tdp[0] = arr[0];\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tdp[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[j] < arr[i]) \n\t\t\t{\n\t\t\t\tdp[i] = max(dp[i], dp[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax = max(max, dp[i]);\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122555,
      "stdout": "",
      "stderr": "/tmp/tmpur9o_cqk.d(19): Error: function expected before `()`, not `max` of type `long`\n/tmp/tmpur9o_cqk.d(22): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpur9o_cqk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 1;\n\tlong max_product_ending_here = 1;\n\t\n\tforeach(i; arr)\n\t{\n\t\tmax_product_ending_here *= i;\n\t\tmax_product = max(max_product, max_product_ending_here);\n\t\tif(max_product_ending_here == 0)\n\t\t\tmax_product_ending_here = 1;\n\t}\n\t\n\tmax_product_ending_here = 1;\n\tforeach_reverse(i; arr)\n\t{\n\t\tmax_product_ending_here *= i;\n\t\tmax_product = max(max_product, max_product_ending_here);\n\t\tif(max_product_ending_here == 0)\n\t\t\tmax_product_ending_here = 1;\n\t}\n\t\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122555,
      "stdout": "",
      "stderr": "/tmp/tmprh0nc46o.d(15): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmprh0nc46o.d(24): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprh0nc46o.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 1;\n\tlong[] max_product_arr = new long[arr.length];\n\tfor(int i = 0; i < arr.length; i++)\n\t{\n\t\tmax_product_arr[i] = arr[i];\n\t}\n\tfor(int i = 1; i < arr.length; i++)\n\t{\n\t\tfor(int j = 0; j < i; j++)\n\t\t{\n\t\t\tif(arr[j] < arr[i])\n\t\t\t{\n\t\t\t\tmax_product_arr[i] = max(max_product_arr[i], max_product_arr[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax_product = max(max_product, max_product_arr[i]);\n\t}\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122555,
      "stdout": "",
      "stderr": "/tmp/tmplnl4p0h1.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmplnl4p0h1.d(24): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplnl4p0h1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 1;\n\tlong[] products = new long[arr.length];\n\tproducts[0] = arr[0];\n\tfor (int i = 1; i < arr.length; i++)\n\t{\n\t\tproducts[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++)\n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tproducts[i] = max(products[i], products[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax_product = max(max_product, products[i]);\n\t}\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122555,
      "stdout": "",
      "stderr": "/tmp/tmpgagxeb3q.d(19): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmpgagxeb3q.d(22): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgagxeb3q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max = 0;\n\tlong product = 1;\n\tforeach(i; arr)\n\t{\n\t\tif(i > max)\n\t\t{\n\t\t\tmax = i;\n\t\t\tproduct *= i;\n\t\t}\n\t}\n\treturn product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122555,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpj2lmtct8.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x42813d]\n??:? void tmpj2lmtct8.__unittest_L21_C1() [0x427dd1]\n??:? void tmpj2lmtct8.__modtest() [0x427ec0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c127]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afba]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43014d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305fc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300d9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af91]\n??:? runModuleUnitTests [0x42befd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42858c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong[] max_prod = new long[arr.length];\n\tlong[] min_prod = new long[arr.length];\n\t\n\tmax_prod[0] = arr[0];\n\tmin_prod[0] = arr[0];\n\t\n\tlong max_val = arr[0];\n\t\n\tfor (int i = 1; i < arr.length; i++)\n\t{\n\t\tmax_prod[i] = max(max(max_prod[i-1] * arr[i], min_prod[i-1] * arr[i]), arr[i]);\n\t\tmin_prod[i] = min(min(max_prod[i-1] * arr[i], min_prod[i-1] * arr[i]), arr[i]);\n\t\t\n\t\tmax_val = max(max_val, max_prod[i]);\n\t}\n\t\n\treturn max_val;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122555,
      "stdout": "",
      "stderr": "/tmp/tmpq9wr50o2.d(19): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmpq9wr50o2.d(20): Error: undefined identifier `min`, did you mean function `main`?\n/tmp/tmpq9wr50o2.d(22): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq9wr50o2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 0;\n\tlong[] products = new long[arr.length];\n\t\n\tforeach(i, v; arr)\n\t{\n\t\tlong max = 0;\n\t\tforeach(j, u; arr[0..i])\n\t\t{\n\t\t\tif(u < v)\n\t\t\t{\n\t\t\t\tmax = max(max, products[j]);\n\t\t\t}\n\t\t}\n\t\tproducts[i] = max * v;\n\t\tmax_product = max(max_product, products[i]);\n\t}\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122555,
      "stdout": "",
      "stderr": "/tmp/tmpl5ga_m38.d(19): Error: function expected before `()`, not `max` of type `long`\n/tmp/tmpl5ga_m38.d(23): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl5ga_m38.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong[] max_product = new long[arr.length];\n\tlong[] max_product_index = new long[arr.length];\n\tlong max = 0;\n\tlong max_index = 0;\n\t\n\tfor (int i = 0; i < arr.length; i++)\n\t{\n\t\tmax_product[i] = arr[i];\n\t\tmax_product_index[i] = i;\n\t\t\n\t\tfor (int j = 0; j < i; j++)\n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tif (max_product[i] < max_product[j] * arr[i])\n\t\t\t\t{\n\t\t\t\t\tmax_product[i] = max_product[j] * arr[i];\n\t\t\t\t\tmax_product_index[i] = j;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (max < max_product[i])\n\t\t{\n\t\t\tmax = max_product[i];\n\t\t\tmax_index = i;\n\t\t}\n\t}\n\t\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122555,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpcsouzijw.d(44): unittest failure\n----------------\n??:? _d_unittestp [0x4283b5]\n??:? void tmpcsouzijw.__unittest_L40_C1() [0x428045]\n??:? void tmpcsouzijw.__modtest() [0x428134]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c46f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b302]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43058d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a3c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430519]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2d9]\n??:? runModuleUnitTests [0x42c245]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428878]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong[] max_product = new long[arr.length];\n\tlong[] max_product_index = new long[arr.length];\n\tlong[] max_product_index_temp = new long[arr.length];\n\tlong[] max_product_temp = new long[arr.length];\n\tlong[] max_product_temp_index = new long[arr.length];\n\tlong[] max_product_temp_index_temp = new long[arr.length];\n\tlong max_product_temp_index_temp_max = 0;\n\tlong max_product_temp_index_temp_max_index = 0;\n\tlong max_product_temp_index_temp_max_index_temp = 0;\n\tlong max_product_temp_index_temp_max_index_temp_temp = 0;\n\tlong max_product_temp_index_temp_max_index_temp_temp_temp = 0;\n\tlong max_product_temp_index_temp_max_index_temp_temp_temp_temp = 0;\n\tlong max_product_temp_index_temp_max_index_temp_temp_temp_temp_temp = 0;\n\tlong max_product_temp_index_temp_max_index_temp_temp_temp_temp_temp_temp = 0;\n\tlong max_product_temp_index_temp_max_index_temp_temp_temp_temp_temp_temp_temp = 0;\n\tlong max_product_temp_index_temp_max_index_temp_temp_temp_temp_temp_temp_temp_temp = 0;\n\tlong max_product_temp_index_temp_max_index_temp_temp_temp_temp_temp_temp_temp_temp_temp = 0;\n\tlong max_product_temp_index_temp_max_index_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp = 0;\n\tlong max_product_temp_index_temp_max_index_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp = 0;\n\tlong max_product_temp_index_temp_max_index_temp_temp_temp_temp_\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122555,
      "stdout": "",
      "stderr": "/tmp/tmp5nw63_vy.d(29): Error: semicolon expected, not `unittest`\n/tmp/tmp5nw63_vy.d(29): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5nw63_vy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong[] max_product = new long[arr.length];\n\tmax_product[0] = arr[0];\n\t\n\tforeach(i; 1..arr.length)\n\t{\n\t\tlong max_product_so_far = arr[i];\n\t\tforeach(j; 0..i)\n\t\t{\n\t\t\tif(arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tmax_product_so_far = max(max_product_so_far, max_product[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax_product[i] = max_product_so_far;\n\t}\n\t\n\treturn max(max_product);\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122555,
      "stdout": "",
      "stderr": "/tmp/tmp_2elk_gs.d(19): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmp_2elk_gs.d(25): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_2elk_gs.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong[] max_product_arr = new long[arr.length];\n\tlong max_product = 0;\n\tfor (int i = 0; i < arr.length; i++)\n\t{\n\t\tmax_product_arr[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++)\n\t\t{\n\t\t\tif (arr[j] < arr[i])\n\t\t\t{\n\t\t\t\tmax_product_arr[i] = max(max_product_arr[i], max_product_arr[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax_product = max(max_product, max_product_arr[i]);\n\t}\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122555,
      "stdout": "",
      "stderr": "/tmp/tmpok_v7mc_.d(18): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmpok_v7mc_.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpok_v7mc_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 1;\n\tlong[] max_product_arr = new long[arr.length];\n\tmax_product_arr[0] = arr[0];\n\tfor(int i = 1; i < arr.length; i++) \n\t{\n\t\tlong max_product_so_far = 1;\n\t\tfor(int j = 0; j < i; j++) \n\t\t{\n\t\t\tif(arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tmax_product_so_far = max(max_product_so_far, max_product_arr[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax_product_arr[i] = max_product_so_far;\n\t\tmax_product = max(max_product, max_product_so_far);\n\t}\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122555,
      "stdout": "",
      "stderr": "/tmp/tmpoea1gl8i.d(19): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmpoea1gl8i.d(23): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoea1gl8i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max = 0;\n\tlong[] dp = new long[arr.length];\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\tdp[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[j] < arr[i]) \n\t\t\t{\n\t\t\t\tdp[i] = max(dp[i], dp[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax = max(max, dp[i]);\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122555,
      "stdout": "",
      "stderr": "/tmp/tmp_p8xyhqq.d(18): Error: function expected before `()`, not `max` of type `long`\n/tmp/tmp_p8xyhqq.d(21): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_p8xyhqq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max = 0;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tlong product = 1;\n\t\tforeach(j; i .. arr.length)\n\t\t{\n\t\t\tproduct *= arr[j];\n\t\t\tmax = max(max, product);\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122555,
      "stdout": "",
      "stderr": "/tmp/tmp9eoeg51n.d(16): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9eoeg51n.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 1;\n\tlong[] max_product_arr = new long[arr.length];\n\tmax_product_arr[0] = arr[0];\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tlong max_product_so_far = 1;\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tmax_product_so_far = max(max_product_so_far, max_product_arr[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax_product_arr[i] = max_product_so_far;\n\t\tmax_product = max(max_product, max_product_so_far);\n\t}\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122555,
      "stdout": "",
      "stderr": "/tmp/tmpfzn_hb2s.d(19): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmpfzn_hb2s.d(23): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfzn_hb2s.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max = 0;\n\tlong product = 1;\n\tlong[] products = new long[arr.length];\n\t\n\tfor (int i = 0; i < arr.length; i++)\n\t{\n\t\tproduct = 1;\n\t\tfor (int j = i; j < arr.length; j++)\n\t\t{\n\t\t\tproduct *= arr[j];\n\t\t\tproducts[j] = product;\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < products.length; i++)\n\t{\n\t\tif (products[i] > max)\n\t\t\tmax = products[i];\n\t}\n\t\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122555,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp74yiah5o.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x42820d]\n??:? void tmp74yiah5o.__unittest_L31_C1() [0x427ea1]\n??:? void tmp74yiah5o.__modtest() [0x427f90]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c2c7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b15a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4303e5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430894]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430371]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b131]\n??:? runModuleUnitTests [0x42c09d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max = 0;\n\tlong product = 1;\n\tforeach(i; arr)\n\t{\n\t\tproduct *= i;\n\t\tif(product > max)\n\t\t\tmax = product;\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122555,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpo5jijxlj.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x42813d]\n??:? void tmpo5jijxlj.__unittest_L19_C1() [0x427dcd]\n??:? void tmpo5jijxlj.__modtest() [0x427ebc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c127]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afba]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43014d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305fc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300d9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af91]\n??:? runModuleUnitTests [0x42befd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42858c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max = 0;\n\tlong product = 1;\n\tlong[] dp = new long[arr.length];\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\tdp[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tdp[i] = max(dp[i], dp[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax = max(max, dp[i]);\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "/tmp/tmp_8d_nu1c.d(19): Error: function expected before `()`, not `max` of type `long`\n/tmp/tmp_8d_nu1c.d(22): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_8d_nu1c.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n    long max_product = 1;\n    long current_product = 1;\n    foreach(i; arr) \n    {\n        current_product *= i;\n        if (current_product > max_product) \n        {\n            max_product = current_product;\n        }\n        if (current_product == 0) \n        {\n            current_product = 1;\n        }\n    }\n    return max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122555,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp67dcitsc.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x428145]\n??:? void tmp67dcitsc.__unittest_L25_C1() [0x427dd9]\n??:? void tmp67dcitsc.__modtest() [0x427ec8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c12f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afc2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430155]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430604]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300e1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af99]\n??:? runModuleUnitTests [0x42bf05]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428594]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 0;\n\tlong[] max_product_arr = new long[arr.length];\n\t\n\tmax_product_arr[0] = arr[0];\n\t\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tlong max_product_so_far = 0;\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tmax_product_so_far = max(max_product_so_far, max_product_arr[j]);\n\t\t\t}\n\t\t}\n\t\tmax_product_arr[i] = max_product_so_far * arr[i];\n\t\tmax_product = max(max_product, max_product_arr[i]);\n\t}\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122555,
      "stdout": "",
      "stderr": "/tmp/tmpyfmlfhqm.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmpyfmlfhqm.d(25): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyfmlfhqm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong[] max_product = new long[arr.length];\n\tlong[] min_product = new long[arr.length];\n\tmax_product[0] = arr[0];\n\tmin_product[0] = arr[0];\n\tlong max = arr[0];\n\tfor(int i=1;i<arr.length;i++)\n\t{\n\t\tmax_product[i] = max(arr[i],max(max_product[i-1]*arr[i],min_product[i-1]*arr[i]));\n\t\tmin_product[i] = min(arr[i],min(max_product[i-1]*arr[i],min_product[i-1]*arr[i]));\n\t\tmax = max(max,max_product[i]);\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122555,
      "stdout": "",
      "stderr": "/tmp/tmpynvq6tnh.d(16): Error: function expected before `()`, not `max` of type `long`\n/tmp/tmpynvq6tnh.d(17): Error: undefined identifier `min`, did you mean function `main`?\n/tmp/tmpynvq6tnh.d(18): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpynvq6tnh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max = 0;\n\tlong product = 1;\n\tforeach(i; arr)\n\t{\n\t\tif(i > max)\n\t\t{\n\t\t\tmax = i;\n\t\t\tproduct *= i;\n\t\t}\n\t}\n\treturn product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122555,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpj2lmtct8.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x42813d]\n??:? void tmpj2lmtct8.__unittest_L21_C1() [0x427dd1]\n??:? void tmpj2lmtct8.__modtest() [0x427ec0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c127]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afba]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43014d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305fc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300d9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af91]\n??:? runModuleUnitTests [0x42befd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42858c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong[] max_product = new long[arr.length];\n\tlong[] max_product_index = new long[arr.length];\n\tlong[] max_product_prev_index = new long[arr.length];\n\t\n\tmax_product[0] = arr[0];\n\tmax_product_index[0] = 0;\n\tmax_product_prev_index[0] = -1;\n\t\n\tfor (long i = 1; i < arr.length; i++)\n\t{\n\t\tmax_product[i] = arr[i];\n\t\tmax_product_index[i] = i;\n\t\tmax_product_prev_index[i] = -1;\n\t\t\n\t\tfor (long j = 0; j < i; j++)\n\t\t{\n\t\t\tif (arr[i] > arr[j] && max_product[i] < max_product[j] * arr[i])\n\t\t\t{\n\t\t\t\tmax_product[i] = max_product[j] * arr[i];\n\t\t\t\tmax_product_index[i] = i;\n\t\t\t\tmax_product_prev_index[i] = j;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tlong max_product_value = max_product[0];\n\tlong max_product_value_index = 0;\n\t\n\tfor (long i = 1; i < arr.length; i++)\n\t{\n\t\tif (max_product_value < max_product[i])\n\t\t{\n\t\t\tmax_product_value = max_product[i];\n\t\t\tmax_product_value_index = i;\n\t\t}\n\t}\n\t\n\treturn max_product_value;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122555,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpcbasf8a_.d(52): unittest failure\n----------------\n??:? _d_unittestp [0x4284fd]\n??:? void tmpcbasf8a_.__unittest_L48_C1() [0x428191]\n??:? void tmpcbasf8a_.__modtest() [0x428280]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5b7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b44a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4306d5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b84]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430661]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b421]\n??:? runModuleUnitTests [0x42c38d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4289c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 0;\n\tlong max_product_so_far = 0;\n\tlong max_product_ending_here = 0;\n\tlong max_product_ending_here_neg = 0;\n\t\n\tforeach(long i; arr)\n\t{\n\t\tif(i > 0)\n\t\t{\n\t\t\tmax_product_ending_here = max_product_ending_here * i;\n\t\t\tmax_product_ending_here_neg = max_product_ending_here_neg * i;\n\t\t}\n\t\telse if(i < 0)\n\t\t{\n\t\t\tlong temp = max_product_ending_here;\n\t\t\tmax_product_ending_here = max_product_ending_here_neg * i;\n\t\t\tmax_product_ending_here_neg = temp * i;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tmax_product_ending_here = 0;\n\t\t\tmax_product_ending_here_neg = 0;\n\t\t}\n\t\t\n\t\tif(max_product_ending_here < 0)\n\t\t\tmax_product_ending_here = 0;\n\t\t\n\t\tif(max_product_ending_here_neg < 0)\n\t\t\tmax_product_ending_here_neg = 0;\n\t\t\n\t\tif(max_product_ending_here > max_product_so_far)\n\t\t\tmax_product_so_far = max_product_ending_here;\n\t\t\n\t\tif(max_product_ending_here_neg > max_product_so_far)\n\t\t\tmax_product_so_far = max_product_ending_here_neg;\n\t}\n\t\n\treturn max_product_so_far;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122555,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp_qm3mi5q.d(52): unittest failure\n----------------\n??:? _d_unittestp [0x4281bd]\n??:? void tmp_qm3mi5q.__unittest_L48_C1() [0x427e4d]\n??:? void tmp_qm3mi5q.__modtest() [0x427f3c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1a7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b03a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4301cd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43067c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430159]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b011]\n??:? runModuleUnitTests [0x42bf7d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42860c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n    long max = 0;\n    long[] dp = new long[arr.length];\n    dp[0] = arr[0];\n    for (int i = 1; i < arr.length; i++) \n    {\n        long max_product = 0;\n        for (int j = 0; j < i; j++) \n        {\n            if (arr[i] > arr[j]) \n            {\n                max_product = max(max_product, dp[j] * arr[i]);\n            }\n        }\n        dp[i] = max_product;\n        max = max(max, max_product);\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122555,
      "stdout": "",
      "stderr": "/tmp/tmptp9xfagh.d(19): Error: function expected before `()`, not `max` of type `long`\n/tmp/tmptp9xfagh.d(23): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptp9xfagh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 1;\n\tlong max_so_far = 1;\n\tlong min_so_far = 1;\n\t\n\tforeach(i; arr)\n\t{\n\t\tif(i > 0)\n\t\t{\n\t\t\tmax_so_far = max_so_far * i;\n\t\t\tmin_so_far = min(min_so_far * i, 1);\n\t\t}\n\t\telse if(i == 0)\n\t\t{\n\t\t\tmax_so_far = 1;\n\t\t\tmin_so_far = 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlong temp = max_so_far;\n\t\t\tmax_so_far = max(min_so_far * i, 1);\n\t\t\tmin_so_far = temp * i;\n\t\t}\n\t\t\n\t\tif(max_so_far > max_product)\n\t\t\tmax_product = max_so_far;\n\t}\n\t\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122555,
      "stdout": "",
      "stderr": "/tmp/tmp6q4qt_8t.d(18): Error: undefined identifier `min`, did you mean function `main`?\n/tmp/tmp6q4qt_8t.d(28): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6q4qt_8t.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max = arr[0];\n\tlong min = arr[0];\n\tlong result = arr[0];\n\t\n\tforeach(i; 1 .. arr.length)\n\t{\n\t\tif(arr[i] < 0)\n\t\t{\n\t\t\tswap(max, min);\n\t\t}\n\t\t\n\t\tmax = max(arr[i], max * arr[i]);\n\t\tmin = min(arr[i], min * arr[i]);\n\t\t\n\t\tresult = max(result, max);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122555,
      "stdout": "",
      "stderr": "/tmp/tmp1xi9r40g.d(17): Error: undefined identifier `swap`\n/tmp/tmp1xi9r40g.d(20): Error: function expected before `()`, not `max` of type `long`\n/tmp/tmp1xi9r40g.d(21): Error: function expected before `()`, not `min` of type `long`\n/tmp/tmp1xi9r40g.d(23): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1xi9r40g.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong[] max_product = new long[arr.length];\n\tlong[] max_product_index = new long[arr.length];\n\tlong[] max_product_index_index = new long[arr.length];\n\tlong[] max_product_index_index_index = new long[arr.length];\n\tlong[] max_product_index_index_index_index = new long[arr.length];\n\tlong[] max_product_index_index_index_index_index = new long[arr.length];\n\tlong[] max_product_index_index_index_index_index_index = new long[arr.length];\n\tlong[] max_product_index_index_index_index_index_index_index = new long[arr.length];\n\tlong[] max_product_index_index_index_index_index_index_index_index = new long[arr.length];\n\tlong[] max_product_index_index_index_index_index_index_index_index_index = new long[arr.length];\n\tlong[] max_product_index_index_index_index_index_index_index_index_index_index = new long[arr.length];\n\tlong[] max_product_index_index_index_index_index_index_index_index_index_index_index = new long[arr.length];\n\tlong[] max_product_index_index_index_index_index_index_index_index_index_index_index_index = new long[arr.length];\n\tlong[] max_product_index_index_index_index_index_index_index_index_index_index_index_index_index = new long[arr.length];\n\tlong[] max_product_index_index_index_index_index_index_index_index_index_index_index_index_index_index = new long[arr.length];\n\tlong[] max_product_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = new long[arr.length];\n\tlong[] max_product_index_index_index_index_index_index_index_index_index_index_index_\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122555,
      "stdout": "",
      "stderr": "/tmp/tmpzjwgjimb.d(26): Error: semicolon expected, not `unittest`\n/tmp/tmpzjwgjimb.d(26): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzjwgjimb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max = 0;\n\tlong product = 1;\n\tlong[] dp = new long[arr.length];\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\tdp[i] = 1;\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tdp[i] = max(dp[i], dp[j] + 1);\n\t\t\t}\n\t\t}\n\t\tproduct = 1;\n\t\tfor (int j = 0; j <= i; j++) \n\t\t{\n\t\t\tif (dp[j] == dp[i]) \n\t\t\t{\n\t\t\t\tproduct *= arr[j];\n\t\t\t}\n\t\t}\n\t\tmax = max(max, product);\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122555,
      "stdout": "",
      "stderr": "/tmp/tmpw9x7zj8_.d(19): Error: function expected before `()`, not `max` of type `long`\n/tmp/tmpw9x7zj8_.d(30): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw9x7zj8_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max = 0;\n\tlong[] dp = new long[arr.length];\n\tdp[0] = arr[0];\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tdp[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tdp[i] = max(dp[i], dp[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax = max(max, dp[i]);\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "/tmp/tmpa2xrlfck.d(19): Error: function expected before `()`, not `max` of type `long`\n/tmp/tmpa2xrlfck.d(22): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa2xrlfck.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_prod = 1;\n\tlong curr_prod = 1;\n\tlong prev_prod = 1;\n\t\n\tforeach(elem; arr)\n\t{\n\t\tif(elem > 0)\n\t\t{\n\t\t\tcurr_prod *= elem;\n\t\t\tprev_prod = min(prev_prod, 1);\n\t\t}\n\t\telse if(elem == 0)\n\t\t{\n\t\t\tcurr_prod = 1;\n\t\t\tprev_prod = 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlong temp = curr_prod;\n\t\t\tcurr_prod = max(prev_prod * elem, 1);\n\t\t\tprev_prod = temp * elem;\n\t\t}\n\t\t\n\t\tmax_prod = max(max_prod, curr_prod);\n\t}\n\t\n\treturn max_prod;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122555,
      "stdout": "",
      "stderr": "/tmp/tmpi43ld3v6.d(18): Error: undefined identifier `min`, did you mean function `main`?\n/tmp/tmpi43ld3v6.d(28): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmpi43ld3v6.d(32): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi43ld3v6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 1;\n\tlong max_product_so_far = 1;\n\tlong min_product_so_far = 1;\n\tlong max_element = arr[0];\n\tlong min_element = arr[0];\n\t\n\tforeach(i, element; arr)\n\t{\n\t\tif(element > 0)\n\t\t{\n\t\t\tmax_product_so_far = max_product_so_far * element;\n\t\t\tmin_product_so_far = min(min_product_so_far * element, 1);\n\t\t}\n\t\telse if(element == 0)\n\t\t{\n\t\t\tmax_product_so_far = 1;\n\t\t\tmin_product_so_far = 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlong temp = max_product_so_far;\n\t\t\tmax_product_so_far = max(min_product_so_far * element, 1);\n\t\t\tmin_product_so_far = temp * element;\n\t\t}\n\t\t\n\t\tif(max_product_so_far > max_product)\n\t\t{\n\t\t\tmax_product = max_product_so_far;\n\t\t}\n\t}\n\t\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122555,
      "stdout": "",
      "stderr": "/tmp/tmpqd5yetp7.d(20): Error: undefined identifier `min`, did you mean function `main`?\n/tmp/tmpqd5yetp7.d(30): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqd5yetp7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong[] max_product = new long[arr.length];\n\tlong[] max_product_index = new long[arr.length];\n\tlong max_product_value = 0;\n\tlong max_product_index_value = 0;\n\t\n\tmax_product[0] = arr[0];\n\tmax_product_index[0] = 0;\n\t\n\tfor (int i = 1; i < arr.length; i++)\n\t{\n\t\tmax_product[i] = arr[i];\n\t\tmax_product_index[i] = i;\n\t\t\n\t\tfor (int j = 0; j < i; j++)\n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tif (max_product[j] * arr[i] > max_product[i])\n\t\t\t\t{\n\t\t\t\t\tmax_product[i] = max_product[j] * arr[i];\n\t\t\t\t\tmax_product_index[i] = j;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (max_product[i] > max_product_value)\n\t\t{\n\t\t\tmax_product_value = max_product[i];\n\t\t\tmax_product_index_value = i;\n\t\t}\n\t}\n\t\n\treturn max_product_value;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122555,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpvbqgdu1s.d(47): unittest failure\n----------------\n??:? _d_unittestp [0x42842d]\n??:? void tmpvbqgdu1s.__unittest_L43_C1() [0x4280c1]\n??:? void tmpvbqgdu1s.__modtest() [0x4281b0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4e7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b37a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430605]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ab4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430591]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b351]\n??:? runModuleUnitTests [0x42c2bd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288f0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max = 0;\n\tlong[] dp = new long[arr.length];\n\tdp[0] = arr[0];\n\tfor (int i = 1; i < arr.length; i++) {\n\t\tdp[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++) {\n\t\t\tif (arr[i] > arr[j]) {\n\t\t\t\tdp[i] = max(dp[i], dp[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax = max(max, dp[i]);\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122555,
      "stdout": "",
      "stderr": "/tmp/tmp2a6966pq.d(16): Error: function expected before `()`, not `max` of type `long`\n/tmp/tmp2a6966pq.d(19): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2a6966pq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 1;\n\tlong product = 1;\n\tlong last_max = 1;\n\t\n\tforeach(n; arr)\n\t{\n\t\tif(n > 0)\n\t\t{\n\t\t\tproduct *= n;\n\t\t\tmax_product = max(max_product, product);\n\t\t}\n\t\telse if(n == 0)\n\t\t{\n\t\t\tproduct = 1;\n\t\t\tlast_max = max_product;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tproduct *= n;\n\t\t\tif(product < 0)\n\t\t\t{\n\t\t\t\tmax_product = max(max_product, product / last_max);\n\t\t\t\tlast_max = 1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tmax_product = max(max_product, product);\n\t\t\t\tlast_max = 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122555,
      "stdout": "",
      "stderr": "/tmp/tmp4l681g93.d(18): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmp4l681g93.d(30): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmp4l681g93.d(35): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4l681g93.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 1;\n\tlong[] max_product_arr = new long[arr.length];\n\tmax_product_arr[0] = arr[0];\n\tfor(int i = 1; i < arr.length; i++)\n\t{\n\t\tmax_product_arr[i] = arr[i];\n\t\tfor(int j = 0; j < i; j++)\n\t\t{\n\t\t\tif(arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tmax_product_arr[i] = max(max_product_arr[i], max_product_arr[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax_product = max(max_product, max_product_arr[i]);\n\t}\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122555,
      "stdout": "",
      "stderr": "/tmp/tmpgbs15i5q.d(19): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmpgbs15i5q.d(22): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgbs15i5q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max = 0;\n\tlong[] dp = new long[arr.length];\n\tdp[0] = arr[0];\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tdp[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tdp[i] = max(dp[i], dp[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax = max(max, dp[i]);\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "/tmp/tmpa2xrlfck.d(19): Error: function expected before `()`, not `max` of type `long`\n/tmp/tmpa2xrlfck.d(22): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa2xrlfck.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 1;\n\tlong max_product_so_far = 1;\n\tforeach(long i; arr)\n\t{\n\t\tmax_product_so_far *= i;\n\t\tmax_product = max(max_product, max_product_so_far);\n\t\tif(max_product_so_far == 0)\n\t\t\tmax_product_so_far = 1;\n\t}\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122555,
      "stdout": "",
      "stderr": "/tmp/tmpbusqw6i7.d(14): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbusqw6i7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 1;\n\tlong[] max_products = new long[arr.length];\n\t\n\tforeach(i, v; arr)\n\t{\n\t\tmax_products[i] = v;\n\t}\n\t\n\tforeach(i, v; arr)\n\t{\n\t\tforeach(j; 0 .. i)\n\t\t{\n\t\t\tif(arr[j] < arr[i])\n\t\t\t{\n\t\t\t\tmax_products[i] = max(max_products[i], max_products[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\t\n\t\tmax_product = max(max_product, max_products[i]);\n\t}\n\t\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122555,
      "stdout": "",
      "stderr": "/tmp/tmp__4l2a_o.d(23): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmp__4l2a_o.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp__4l2a_o.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n    long max = 1;\n    long[] dp = new long[arr.length];\n    dp[0] = 1;\n    for (int i = 0; i < arr.length; i++) \n    {\n        dp[i] = 1;\n        for (int j = 0; j < i; j++) \n        {\n            if (arr[i] > arr[j]) \n            {\n                dp[i] = max(dp[i], dp[j] * arr[i]);\n            }\n        }\n        max = max(max, dp[i]);\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122555,
      "stdout": "",
      "stderr": "/tmp/tmpn1g_d2jz.d(19): Error: function expected before `()`, not `max` of type `long`\n/tmp/tmpn1g_d2jz.d(22): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn1g_d2jz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 1;\n\tlong product = 1;\n\tforeach(i; arr)\n\t{\n\t\tproduct *= i;\n\t\tmax_product = max(max_product, product);\n\t}\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122555,
      "stdout": "",
      "stderr": "/tmp/tmpahrdhcti.d(14): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpahrdhcti.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 1;\n\tlong[] max_product_arr = new long[arr.length];\n\tfor (int i = 0; i < arr.length; i++)\n\t{\n\t\tmax_product_arr[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++)\n\t\t{\n\t\t\tif (arr[j] < arr[i])\n\t\t\t{\n\t\t\t\tmax_product_arr[i] = max(max_product_arr[i], max_product_arr[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax_product = max(max_product, max_product_arr[i]);\n\t}\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122555,
      "stdout": "",
      "stderr": "/tmp/tmp6lz11gbd.d(18): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmp6lz11gbd.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6lz11gbd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 1;\n\tlong[] max_product_arr = new long[arr.length];\n\t\n\tfor(int i = 0; i < arr.length; i++)\n\t{\n\t\tmax_product_arr[i] = arr[i];\n\t}\n\t\n\tfor(int i = 1; i < arr.length; i++)\n\t{\n\t\tfor(int j = 0; j < i; j++)\n\t\t{\n\t\t\tif(arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tmax_product_arr[i] = max(max_product_arr[i], max_product_arr[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor(int i = 0; i < arr.length; i++)\n\t{\n\t\tmax_product = max(max_product, max_product_arr[i]);\n\t}\n\t\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122555,
      "stdout": "",
      "stderr": "/tmp/tmprts6vqca.d(23): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmprts6vqca.d(30): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprts6vqca.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 1;\n\tlong[] max_product_arr = new long[arr.length];\n\t\n\tmax_product_arr[0] = arr[0];\n\t\n\tfor (int i = 1; i < arr.length; i++)\n\t{\n\t\tmax_product_arr[i] = arr[i];\n\t\t\n\t\tfor (int j = 0; j < i; j++)\n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tmax_product_arr[i] = max(max_product_arr[i], arr[i] * max_product_arr[j]);\n\t\t\t}\n\t\t}\n\t\t\n\t\tmax_product = max(max_product, max_product_arr[i]);\n\t}\n\t\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122555,
      "stdout": "",
      "stderr": "/tmp/tmph_mr6so4.d(22): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmph_mr6so4.d(26): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph_mr6so4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 1;\n\tlong[] max_product_arr = new long[arr.length];\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\tmax_product_arr[i] = arr[i];\n\t}\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tmax_product_arr[i] = max(max_product_arr[i], max_product_arr[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax_product = max(max_product, max_product_arr[i]);\n\t}\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122555,
      "stdout": "",
      "stderr": "/tmp/tmpim3iknga.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmpim3iknga.d(24): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpim3iknga.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max = 1;\n\tlong product = 1;\n\tforeach(i; arr)\n\t{\n\t\tproduct *= i;\n\t\tif(product > max)\n\t\t\tmax = product;\n\t\tif(product == 0)\n\t\t\tproduct = 1;\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp63phgnbg.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x428145]\n??:? void tmp63phgnbg.__unittest_L21_C1() [0x427dd9]\n??:? void tmp63phgnbg.__modtest() [0x427ec8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c12f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afc2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430155]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430604]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300e1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af99]\n??:? runModuleUnitTests [0x42bf05]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428594]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong[] max = new long[arr.length];\n\tlong[] min = new long[arr.length];\n\tlong max_product = arr[0];\n\tmax[0] = arr[0];\n\tmin[0] = arr[0];\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tmax[i] = max(arr[i], max(arr[i] * max[i - 1], arr[i] * min[i - 1]));\n\t\tmin[i] = min(arr[i], min(arr[i] * max[i - 1], arr[i] * min[i - 1]));\n\t\tmax_product = max(max_product, max[i]);\n\t}\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122555,
      "stdout": "",
      "stderr": "/tmp/tmplyouaa8q.d(16): Error: function expected before `()`, not `max` of type `long[]`\n/tmp/tmplyouaa8q.d(17): Error: function expected before `()`, not `min` of type `long[]`\n/tmp/tmplyouaa8q.d(18): Error: function expected before `()`, not `max` of type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplyouaa8q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 1;\n\tlong max_product_so_far = 1;\n\tlong min_product_so_far = 1;\n\tforeach(i; arr)\n\t{\n\t\tif(i > 0)\n\t\t{\n\t\t\tmax_product_so_far *= i;\n\t\t\tmin_product_so_far *= i;\n\t\t}\n\t\telse if(i == 0)\n\t\t{\n\t\t\tmax_product_so_far = 1;\n\t\t\tmin_product_so_far = 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlong temp = max_product_so_far;\n\t\t\tmax_product_so_far = max(min_product_so_far * i, 1);\n\t\t\tmin_product_so_far = temp * i;\n\t\t}\n\t\tif(max_product_so_far > max_product)\n\t\t\tmax_product = max_product_so_far;\n\t}\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122555,
      "stdout": "",
      "stderr": "/tmp/tmpgl62kbad.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgl62kbad.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong[] max_product = new long[arr.length];\n\tlong[] max_product_index = new long[arr.length];\n\tlong[] max_product_prev_index = new long[arr.length];\n\tlong[] max_product_prev_index_index = new long[arr.length];\n\t\n\tlong max_product_value = 0;\n\tlong max_product_index_value = 0;\n\tlong max_product_prev_index_value = 0;\n\tlong max_product_prev_index_index_value = 0;\n\t\n\tmax_product[0] = arr[0];\n\tmax_product_index[0] = 0;\n\tmax_product_prev_index[0] = 0;\n\tmax_product_prev_index_index[0] = 0;\n\t\n\tfor (long i = 1; i < arr.length; i++)\n\t{\n\t\tmax_product[i] = arr[i];\n\t\tmax_product_index[i] = i;\n\t\tmax_product_prev_index[i] = i;\n\t\tmax_product_prev_index_index[i] = i;\n\t\t\n\t\tfor (long j = 0; j < i; j++)\n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tif (max_product[i] < max_product[j] * arr[i])\n\t\t\t\t{\n\t\t\t\t\tmax_product[i] = max_product[j] * arr[i];\n\t\t\t\t\tmax_product_index[i] = i;\n\t\t\t\t\tmax_product_prev_index[i] = j;\n\t\t\t\t\tmax_product_prev_index_index[i] = max_product_prev_index_index[j];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (max_product_value < max_product[i])\n\t\t{\n\t\t\tmax_product_value = max_product[i];\n\t\t\tmax_product_index_value = i;\n\t\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122555,
      "stdout": "",
      "stderr": "/tmp/tmp2wxt2x6q.d(50): Error: found `unittest` instead of statement\n/tmp/tmp2wxt2x6q.d(58): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp2wxt2x6q.d(58): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2wxt2x6q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 1;\n\tlong max_product_so_far = 1;\n\tlong max_product_ending_here = 1;\n\tlong min_product_ending_here = 1;\n\t\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tif(arr[i] > 0)\n\t\t{\n\t\t\tmax_product_ending_here = max_product_ending_here * arr[i];\n\t\t\tmin_product_ending_here = min(min_product_ending_here * arr[i], 1);\n\t\t}\n\t\telse if(arr[i] == 0)\n\t\t{\n\t\t\tmax_product_ending_here = 1;\n\t\t\tmin_product_ending_here = 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlong temp = max_product_ending_here;\n\t\t\tmax_product_ending_here = max(min_product_ending_here * arr[i], 1);\n\t\t\tmin_product_ending_here = temp * arr[i];\n\t\t}\n\t\t\n\t\tif(max_product_so_far < max_product_ending_here)\n\t\t{\n\t\t\tmax_product_so_far = max_product_ending_here;\n\t\t}\n\t}\n\t\n\treturn max_product_so_far;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122555,
      "stdout": "",
      "stderr": "/tmp/tmpyslmt86s.d(19): Error: undefined identifier `min`, did you mean function `main`?\n/tmp/tmpyslmt86s.d(29): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyslmt86s.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max = 0;\n\tlong[] dp = new long[arr.length];\n\tdp[0] = arr[0];\n\tfor(int i = 1; i < arr.length; i++)\n\t{\n\t\tdp[i] = arr[i];\n\t\tfor(int j = 0; j < i; j++)\n\t\t{\n\t\t\tif(arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tdp[i] = max(dp[i], dp[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax = max(max, dp[i]);\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122555,
      "stdout": "",
      "stderr": "/tmp/tmpayfw460a.d(19): Error: function expected before `()`, not `max` of type `long`\n/tmp/tmpayfw460a.d(22): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpayfw460a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong[] max_products = new long[arr.length];\n\tlong max_product = arr[0];\n\tmax_products[0] = arr[0];\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tmax_products[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[j] < arr[i]) \n\t\t\t{\n\t\t\t\tmax_products[i] = max(max_products[i], max_products[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax_product = max(max_product, max_products[i]);\n\t}\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122555,
      "stdout": "",
      "stderr": "/tmp/tmpdxim2l11.d(19): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmpdxim2l11.d(22): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdxim2l11.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 1;\n\tlong current_product = 1;\n\tlong last_product = 1;\n\tlong last_number = 0;\n\tlong current_number = 0;\n\t\n\tforeach(long i; arr)\n\t{\n\t\tcurrent_number = i;\n\t\tif(current_number > last_number)\n\t\t{\n\t\t\tlast_product = current_product;\n\t\t\tcurrent_product = current_product * current_number;\n\t\t\tlast_number = current_number;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tcurrent_product = last_product * current_number;\n\t\t\tlast_product = last_product * last_number;\n\t\t\tlast_number = current_number;\n\t\t}\n\t\t\n\t\tif(current_product > max_product)\n\t\t\tmax_product = current_product;\n\t}\n\t\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmptgbvzbu3.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x428185]\n??:? void tmptgbvzbu3.__unittest_L37_C1() [0x427e15]\n??:? void tmptgbvzbu3.__modtest() [0x427f04]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c16f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b002]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430195]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430644]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430121]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afd9]\n??:? runModuleUnitTests [0x42bf45]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285d4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 1;\n\tlong max_product_so_far = 1;\n\tlong min_product_so_far = 1;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tif(arr[i] > 0)\n\t\t{\n\t\t\tmax_product_so_far *= arr[i];\n\t\t\tmin_product_so_far = min(min_product_so_far * arr[i], 1);\n\t\t}\n\t\telse if(arr[i] == 0)\n\t\t{\n\t\t\tmax_product_so_far = 1;\n\t\t\tmin_product_so_far = 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlong temp = max_product_so_far;\n\t\t\tmax_product_so_far = max(min_product_so_far * arr[i], 1);\n\t\t\tmin_product_so_far = temp * arr[i];\n\t\t}\n\t\tif(max_product_so_far > max_product)\n\t\t{\n\t\t\tmax_product = max_product_so_far;\n\t\t}\n\t}\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122555,
      "stdout": "",
      "stderr": "/tmp/tmpyu1bf0yk.d(17): Error: undefined identifier `min`, did you mean function `main`?\n/tmp/tmpyu1bf0yk.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyu1bf0yk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong[] max_product_arr = new long[arr.length];\n\tmax_product_arr[0] = arr[0];\n\tlong max_product = arr[0];\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tmax_product_arr[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tmax_product_arr[i] = max(max_product_arr[i], max_product_arr[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax_product = max(max_product, max_product_arr[i]);\n\t}\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122555,
      "stdout": "",
      "stderr": "/tmp/tmpwsgnv6e1.d(19): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmpwsgnv6e1.d(22): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwsgnv6e1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 1;\n\tlong[] max_product_arr = new long[arr.length];\n\t\n\tforeach(i, v; arr)\n\t{\n\t\tmax_product_arr[i] = v;\n\t\tforeach(j; 0 .. i)\n\t\t{\n\t\t\tif(arr[j] < arr[i])\n\t\t\t{\n\t\t\t\tmax_product_arr[i] = max(max_product_arr[i], max_product_arr[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax_product = max(max_product, max_product_arr[i]);\n\t}\n\t\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122555,
      "stdout": "",
      "stderr": "/tmp/tmp92lp8jcs.d(19): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmp92lp8jcs.d(22): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp92lp8jcs.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 0;\n\tint n = arr.length;\n\tint[] dp = new int[n];\n\tdp[0] = 1;\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tdp[i] = max(dp[i], dp[j] + 1);\n\t\t\t}\n\t\t}\n\t}\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tmax_product = max(max_product, arr[i] * dp[i]);\n\t}\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122555,
      "stdout": "",
      "stderr": "/tmp/tmp4eamn5zu.d(10): Error: cannot implicitly convert expression `arr.length` of type `ulong` to `int`\n/tmp/tmp4eamn5zu.d(19): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmp4eamn5zu.d(25): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4eamn5zu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 1;\n\tlong product = 1;\n\tlong max_element = arr[0];\n\tlong min_element = arr[0];\n\t\n\tforeach(elem; arr)\n\t{\n\t\tif(elem > 0)\n\t\t{\n\t\t\tmax_element = max(max_element, elem);\n\t\t\tmin_element = min(min_element, elem);\n\t\t\tproduct *= elem;\n\t\t}\n\t\telse if(elem == 0)\n\t\t{\n\t\t\tmax_element = max(max_element, elem);\n\t\t\tmin_element = min(min_element, elem);\n\t\t\tproduct = 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlong temp = max_element;\n\t\t\tmax_element = max(min_element * elem, elem);\n\t\t\tmin_element = min(temp * elem, elem);\n\t\t\tproduct *= elem;\n\t\t}\n\t\t\n\t\tmax_product = max(max_product, product);\n\t}\n\t\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122555,
      "stdout": "",
      "stderr": "/tmp/tmp2sk7uezq.d(18): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmp2sk7uezq.d(19): Error: undefined identifier `min`, did you mean function `main`?\n/tmp/tmp2sk7uezq.d(24): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmp2sk7uezq.d(25): Error: undefined identifier `min`, did you mean function `main`?\n/tmp/tmp2sk7uezq.d(31): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmp2sk7uezq.d(32): Error: undefined identifier `min`, did you mean function `main`?\n/tmp/tmp2sk7uezq.d(36): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2sk7uezq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 1;\n\tlong[] max_product_arr = new long[arr.length];\n\t\n\tfor(int i = 0; i < arr.length; i++)\n\t{\n\t\tmax_product_arr[i] = arr[i];\n\t}\n\t\n\tfor(int i = 1; i < arr.length; i++)\n\t{\n\t\tfor(int j = 0; j < i; j++)\n\t\t{\n\t\t\tif(arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tmax_product_arr[i] = max(max_product_arr[i], max_product_arr[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor(int i = 0; i < arr.length; i++)\n\t{\n\t\tmax_product = max(max_product, max_product_arr[i]);\n\t}\n\t\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122555,
      "stdout": "",
      "stderr": "/tmp/tmprts6vqca.d(23): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmprts6vqca.d(30): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprts6vqca.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong[] max_product = new long[arr.length];\n\tmax_product[0] = arr[0];\n\tlong max = max_product[0];\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tmax_product[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tmax_product[i] = max(max_product[i], max_product[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax = max(max, max_product[i]);\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122555,
      "stdout": "",
      "stderr": "/tmp/tmpnv7z3f6e.d(19): Error: function expected before `()`, not `max` of type `long`\n/tmp/tmpnv7z3f6e.d(22): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnv7z3f6e.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong[] dp = new long[arr.length];\n\tdp[0] = arr[0];\n\tlong max = dp[0];\n\tfor(int i = 1; i < arr.length; i++)\n\t{\n\t\tdp[i] = arr[i];\n\t\tfor(int j = 0; j < i; j++)\n\t\t{\n\t\t\tif(arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tdp[i] = max(dp[i], dp[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax = max(max, dp[i]);\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122555,
      "stdout": "",
      "stderr": "/tmp/tmp_hxptfwk.d(19): Error: function expected before `()`, not `max` of type `long`\n/tmp/tmp_hxptfwk.d(22): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_hxptfwk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong[] max_product = new long[arr.length];\n\tlong[] max_product_index = new long[arr.length];\n\tlong[] max_product_prev = new long[arr.length];\n\tlong[] max_product_prev_index = new long[arr.length];\n\t\n\tmax_product[0] = arr[0];\n\tmax_product_index[0] = 0;\n\tmax_product_prev[0] = -1;\n\tmax_product_prev_index[0] = -1;\n\t\n\tfor (long i = 1; i < arr.length; i++)\n\t{\n\t\tmax_product[i] = arr[i];\n\t\tmax_product_index[i] = i;\n\t\tmax_product_prev[i] = -1;\n\t\tmax_product_prev_index[i] = -1;\n\t\t\n\t\tfor (long j = 0; j < i; j++)\n\t\t{\n\t\t\tif (arr[i] > arr[j] && max_product[i] < max_product[j] * arr[i])\n\t\t\t{\n\t\t\t\tmax_product[i] = max_product[j] * arr[i];\n\t\t\t\tmax_product_index[i] = i;\n\t\t\t\tmax_product_prev[i] = j;\n\t\t\t\tmax_product_prev_index[i] = max_product_index[j];\n\t\t\t}\n\t\t}\n\t}\n\t\n\tlong max = max_product[0];\n\tlong max_index = 0;\n\tfor (long i = 1; i < arr.length; i++)\n\t{\n\t\tif (max < max_product[i])\n\t\t{\n\t\t\tmax = max_product[i];\n\t\t\tmax_index = i;\n\t\t}\n\t}\n\t\n\t//std.stdio.writeln(max_product);\n\t//std.stdio.writeln(max_product_index);\n\t//std.stdio.writeln(max_product_prev);\n\t//std.stdio.writeln\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122555,
      "stdout": "",
      "stderr": "/tmp/tmp6rvlut0v.d(53): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6rvlut0v.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 1;\n\tlong[] max_product_arr = new long[arr.length];\n\t\n\tfor(int i = 0; i < arr.length; i++)\n\t{\n\t\tmax_product_arr[i] = arr[i];\n\t}\n\t\n\tfor(int i = 1; i < arr.length; i++)\n\t{\n\t\tfor(int j = 0; j < i; j++)\n\t\t{\n\t\t\tif(arr[j] < arr[i])\n\t\t\t{\n\t\t\t\tmax_product_arr[i] = max(max_product_arr[i], max_product_arr[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor(int i = 0; i < arr.length; i++)\n\t{\n\t\tmax_product = max(max_product, max_product_arr[i]);\n\t}\n\t\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122555,
      "stdout": "",
      "stderr": "/tmp/tmp94snt41b.d(23): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmp94snt41b.d(30): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp94snt41b.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max = 0;\n\tlong product = 1;\n\tfor (int i = 0; i < arr.length; i++)\n\t{\n\t\tproduct = 1;\n\t\tfor (int j = i; j < arr.length; j++)\n\t\t{\n\t\t\tproduct *= arr[j];\n\t\t\tif (product > max)\n\t\t\t\tmax = product;\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpwttihy1v.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x42815d]\n??:? void tmpwttihy1v.__unittest_L23_C1() [0x427ded]\n??:? void tmpwttihy1v.__modtest() [0x427edc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1bb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b04e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4301e1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430690]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43016d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b025]\n??:? runModuleUnitTests [0x42bf91]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428620]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 0;\n\tlong current_product = 0;\n\tlong[] products = new long[arr.length];\n\t\n\tfor(int i = 0; i < arr.length; i++)\n\t{\n\t\tcurrent_product = arr[i];\n\t\tfor(int j = i + 1; j < arr.length; j++)\n\t\t{\n\t\t\tif(arr[j] > arr[i])\n\t\t\t{\n\t\t\t\tcurrent_product *= arr[j];\n\t\t\t}\n\t\t}\n\t\tproducts[i] = current_product;\n\t}\n\t\n\tmax_product = products[0];\n\tfor(int i = 1; i < products.length; i++)\n\t{\n\t\tif(products[i] > max_product)\n\t\t{\n\t\t\tmax_product = products[i];\n\t\t}\n\t}\n\t\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpi8u_t15n.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x42829d]\n??:? void tmpi8u_t15n.__unittest_L37_C1() [0x427f31]\n??:? void tmpi8u_t15n.__modtest() [0x428020]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c357]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1ea]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430475]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430924]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430401]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1c1]\n??:? runModuleUnitTests [0x42c12d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428760]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max = 0;\n\tlong[] dp = new long[arr.length];\n\tdp[0] = arr[0];\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tlong max_val = arr[i];\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[j] < arr[i]) \n\t\t\t{\n\t\t\t\tmax_val = max(max_val, dp[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tdp[i] = max_val;\n\t\tmax = max(max, max_val);\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122555,
      "stdout": "",
      "stderr": "/tmp/tmp9msta4gt.d(19): Error: function expected before `()`, not `max` of type `long`\n/tmp/tmp9msta4gt.d(23): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9msta4gt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 0;\n\tlong max_product_so_far = 0;\n\tlong max_product_ending_here = 0;\n\tlong max_product_ending_here_negative = 0;\n\t\n\tforeach(long i; arr)\n\t{\n\t\tif(i > 0)\n\t\t{\n\t\t\tmax_product_ending_here = max(max_product_ending_here * i, i);\n\t\t\tmax_product_ending_here_negative = max_product_ending_here_negative * i;\n\t\t}\n\t\telse if(i == 0)\n\t\t{\n\t\t\tmax_product_ending_here = 0;\n\t\t\tmax_product_ending_here_negative = 0;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlong temp = max_product_ending_here;\n\t\t\tmax_product_ending_here = max(max_product_ending_here_negative * i, i);\n\t\t\tmax_product_ending_here_negative = temp * i;\n\t\t}\n\t\t\n\t\tmax_product_so_far = max(max_product_so_far, max_product_ending_here);\n\t}\n\t\n\treturn max_product_so_far;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122555,
      "stdout": "",
      "stderr": "/tmp/tmp65yd5032.d(18): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmp65yd5032.d(29): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmp65yd5032.d(33): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp65yd5032.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 1;\n\tlong[] max_products = new long[arr.length];\n\t\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\tmax_products[i] = arr[i];\n\t}\n\t\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tmax_products[i] = max(max_products[i], max_products[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\tmax_product = max(max_product, max_products[i]);\n\t}\n\t\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122555,
      "stdout": "",
      "stderr": "/tmp/tmpvvoea6vm.d(23): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmpvvoea6vm.d(30): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvvoea6vm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n    long[] max_product = new long[arr.length];\n    long[] max_product_index = new long[arr.length];\n    long max_product_value = 0;\n    long max_product_index_value = 0;\n    for (long i = 0; i < arr.length; i++) \n    {\n        max_product[i] = arr[i];\n        max_product_index[i] = i;\n        for (long j = 0; j < i; j++) \n        {\n            if (arr[i] > arr[j] && max_product[i] < max_product[j] * arr[i]) \n            {\n                max_product[i] = max_product[j] * arr[i];\n                max_product_index[i] = j;\n            }\n        }\n        if (max_product_value < max_product[i]) \n        {\n            max_product_value = max_product[i];\n            max_product_index_value = i;\n        }\n    }\n    return max_product_value;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpe37l1aju.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x4283bd]\n??:? void tmpe37l1aju.__unittest_L33_C1() [0x428051]\n??:? void tmpe37l1aju.__modtest() [0x428140]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c477]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b30a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430595]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a44]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430521]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2e1]\n??:? runModuleUnitTests [0x42c24d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428880]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max = 0;\n\tlong product = 1;\n\tforeach(i; arr)\n\t{\n\t\tif(i > max)\n\t\t{\n\t\t\tmax = i;\n\t\t\tproduct *= i;\n\t\t}\n\t}\n\treturn product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122555,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpj2lmtct8.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x42813d]\n??:? void tmpj2lmtct8.__unittest_L21_C1() [0x427dd1]\n??:? void tmpj2lmtct8.__modtest() [0x427ec0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c127]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afba]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43014d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305fc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300d9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af91]\n??:? runModuleUnitTests [0x42befd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42858c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong[] max_product = new long[arr.length];\n\tmax_product[0] = arr[0];\n\tlong max_product_so_far = arr[0];\n\tfor (int i = 1; i < arr.length; i++)\n\t{\n\t\tmax_product[i] = max(arr[i], max_product[i - 1] * arr[i]);\n\t\tmax_product_so_far = max(max_product_so_far, max_product[i]);\n\t}\n\treturn max_product_so_far;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122555,
      "stdout": "",
      "stderr": "/tmp/tmpj3zp98b3.d(14): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmpj3zp98b3.d(15): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj3zp98b3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 1;\n\tlong[] max_product_arr = new long[arr.length];\n\tlong[] max_product_arr_rev = new long[arr.length];\n\t\n\tmax_product_arr[0] = arr[0];\n\tmax_product_arr_rev[arr.length-1] = arr[arr.length-1];\n\t\n\tfor(int i = 1; i < arr.length; i++)\n\t{\n\t\tmax_product_arr[i] = max(arr[i], arr[i]*max_product_arr[i-1]);\n\t}\n\t\n\tfor(int i = arr.length-2; i >= 0; i--)\n\t{\n\t\tmax_product_arr_rev[i] = max(arr[i], arr[i]*max_product_arr_rev[i+1]);\n\t}\n\t\n\tfor(int i = 0; i < arr.length; i++)\n\t{\n\t\tmax_product = max(max_product, max_product_arr[i]*max_product_arr_rev[i]);\n\t}\n\t\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122555,
      "stdout": "",
      "stderr": "/tmp/tmpsjakamb1.d(18): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmpsjakamb1.d(21): Error: cannot implicitly convert expression `arr.length - 2LU` of type `ulong` to `int`\n/tmp/tmpsjakamb1.d(23): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmpsjakamb1.d(28): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsjakamb1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 0;\n\tlong[] max_product_arr = new long[arr.length];\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\tmax_product_arr[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[j] < arr[i]) \n\t\t\t{\n\t\t\t\tmax_product_arr[i] = max(max_product_arr[i], max_product_arr[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax_product = max(max_product, max_product_arr[i]);\n\t}\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122555,
      "stdout": "",
      "stderr": "/tmp/tmpqv_2o04x.d(18): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmpqv_2o04x.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqv_2o04x.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 1;\n\tlong product = 1;\n\tint i = 0;\n\twhile(i < arr.length)\n\t{\n\t\tif(arr[i] > 0)\n\t\t{\n\t\t\tproduct *= arr[i];\n\t\t\tmax_product = max(max_product, product);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tproduct = 1;\n\t\t}\n\t\ti++;\n\t}\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122555,
      "stdout": "",
      "stderr": "/tmp/tmp3vojmx0y.d(17): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3vojmx0y.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 1;\n\tlong current_product = 1;\n\tlong current_max = arr[0];\n\tforeach(i; arr)\n\t{\n\t\tif(i > current_max)\n\t\t{\n\t\t\tcurrent_max = i;\n\t\t\tcurrent_product = 1;\n\t\t}\n\t\tcurrent_product *= i;\n\t\tmax_product = max(max_product, current_product);\n\t}\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122555,
      "stdout": "",
      "stderr": "/tmp/tmp6fdxr0iu.d(20): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6fdxr0iu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 0;\n\tlong max_product_so_far = 0;\n\tlong product = 1;\n\tforeach(i; arr)\n\t{\n\t\tproduct *= i;\n\t\tif(product > max_product_so_far)\n\t\t{\n\t\t\tmax_product_so_far = product;\n\t\t}\n\t\telse if(product < 0)\n\t\t{\n\t\t\tproduct = 1;\n\t\t}\n\t\tif(max_product_so_far > max_product)\n\t\t{\n\t\t\tmax_product = max_product_so_far;\n\t\t}\n\t}\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpa8_m4n3h.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x42815d]\n??:? void tmpa8_m4n3h.__unittest_L30_C1() [0x427df1]\n??:? void tmpa8_m4n3h.__modtest() [0x427ee0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c147]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afda]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43016d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43061c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300f9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afb1]\n??:? runModuleUnitTests [0x42bf1d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285ac]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n    long max_product = 0;\n    long product = 1;\n    long[] max_arr = new long[arr.length];\n    max_arr[0] = arr[0];\n    for (int i = 1; i < arr.length; i++) \n    {\n        if (arr[i] > max_arr[i - 1]) \n        {\n            max_arr[i] = arr[i];\n        } \n        else \n        {\n            max_arr[i] = max_arr[i - 1];\n        }\n    }\n    for (int i = 0; i < arr.length; i++) \n    {\n        product *= max_arr[i];\n        if (product > max_product) \n        {\n            max_product = product;\n        }\n    }\n    return max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpnhhk8pp7.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x4282b5]\n??:? void tmpnhhk8pp7.__unittest_L34_C1() [0x427f49]\n??:? void tmpnhhk8pp7.__modtest() [0x428038]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c36f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b202]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43048d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43093c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430419]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1d9]\n??:? runModuleUnitTests [0x42c145]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428778]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong[] dp = new long[arr.length];\n\tdp[0] = arr[0];\n\tlong max = dp[0];\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tdp[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tdp[i] = max(dp[i], dp[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax = max(max, dp[i]);\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "/tmp/tmphvkb23i7.d(19): Error: function expected before `()`, not `max` of type `long`\n/tmp/tmphvkb23i7.d(22): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphvkb23i7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max = 0;\n\tlong[] dp = new long[arr.length];\n\tdp[0] = arr[0];\n\tforeach(i; 1..arr.length)\n\t{\n\t\tdp[i] = arr[i];\n\t\tforeach(j; 0..i)\n\t\t{\n\t\t\tif(arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tdp[i] = max(dp[i], dp[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax = max(max, dp[i]);\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "/tmp/tmppebsu8p0.d(19): Error: function expected before `()`, not `max` of type `long`\n/tmp/tmppebsu8p0.d(22): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppebsu8p0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 1;\n\tlong[] max_product_arr = new long[arr.length];\n\t\n\tmax_product_arr[0] = arr[0];\n\t\n\tfor(int i = 1; i < arr.length; i++)\n\t{\n\t\tmax_product_arr[i] = arr[i];\n\t\tfor(int j = 0; j < i; j++)\n\t\t{\n\t\t\tif(arr[j] < arr[i])\n\t\t\t{\n\t\t\t\tmax_product_arr[i] = max(max_product_arr[i], max_product_arr[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax_product = max(max_product, max_product_arr[i]);\n\t}\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "/tmp/tmp5c096jjk.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmp5c096jjk.d(24): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5c096jjk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max = 0;\n\tlong product = 1;\n\tlong[] dp = new long[arr.length];\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\tdp[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tdp[i] = max(dp[i], dp[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax = max(max, dp[i]);\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "/tmp/tmp_8d_nu1c.d(19): Error: function expected before `()`, not `max` of type `long`\n/tmp/tmp_8d_nu1c.d(22): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_8d_nu1c.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 1;\n\tlong[] max_product_ending_here = new long[arr.length];\n\tlong[] min_product_ending_here = new long[arr.length];\n\t\n\tmax_product_ending_here[0] = arr[0];\n\tmin_product_ending_here[0] = arr[0];\n\t\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tmax_product_ending_here[i] = max(arr[i], max(arr[i] * max_product_ending_here[i - 1], arr[i] * min_product_ending_here[i - 1]));\n\t\tmin_product_ending_here[i] = min(arr[i], min(arr[i] * max_product_ending_here[i - 1], arr[i] * min_product_ending_here[i - 1]));\n\t\t\n\t\tmax_product = max(max_product, max_product_ending_here[i]);\n\t}\n\t\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "/tmp/tmp8bk_eb_a.d(18): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmp8bk_eb_a.d(19): Error: undefined identifier `min`, did you mean function `main`?\n/tmp/tmp8bk_eb_a.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8bk_eb_a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 1;\n\tlong[] max_product_arr = new long[arr.length];\n\t\n\tfor (int i = 0; i < arr.length; i++)\n\t{\n\t\tmax_product_arr[i] = arr[i];\n\t}\n\t\n\tfor (int i = 1; i < arr.length; i++)\n\t{\n\t\tfor (int j = 0; j < i; j++)\n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tmax_product_arr[i] = max(max_product_arr[i], max_product_arr[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < arr.length; i++)\n\t{\n\t\tmax_product = max(max_product, max_product_arr[i]);\n\t}\n\t\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "/tmp/tmp7ayk3znc.d(23): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmp7ayk3znc.d(30): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7ayk3znc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 0;\n\tlong[] max_product_arr = new long[arr.length];\n\t\n\tforeach(i, v; arr)\n\t{\n\t\tmax_product_arr[i] = v;\n\t\tforeach(j; 0 .. i)\n\t\t{\n\t\t\tif(arr[j] < arr[i])\n\t\t\t{\n\t\t\t\tmax_product_arr[i] = max(max_product_arr[i], max_product_arr[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax_product = max(max_product, max_product_arr[i]);\n\t}\n\t\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "/tmp/tmpklfunl67.d(19): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmpklfunl67.d(22): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpklfunl67.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 1;\n\tlong[] max_product_arr = new long[arr.length];\n\t\n\tforeach(i, item; arr)\n\t{\n\t\tmax_product_arr[i] = item;\n\t\tforeach(j, item2; arr[0..i])\n\t\t{\n\t\t\tif(item2 < item)\n\t\t\t{\n\t\t\t\tmax_product_arr[i] = max(max_product_arr[i], item2 * item);\n\t\t\t}\n\t\t}\n\t\tmax_product = max(max_product, max_product_arr[i]);\n\t}\n\t\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "/tmp/tmpkxtd3_v_.d(19): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmpkxtd3_v_.d(22): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkxtd3_v_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 1;\n\tlong[] max_product_arr = new long[arr.length];\n\t\n\tmax_product_arr[0] = arr[0];\n\t\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tlong max_product_so_far = 1;\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[j] < arr[i]) \n\t\t\t{\n\t\t\t\tmax_product_so_far = max(max_product_so_far, max_product_arr[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax_product_arr[i] = max_product_so_far;\n\t\tmax_product = max(max_product, max_product_so_far);\n\t}\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "/tmp/tmpai_vna8g.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmpai_vna8g.d(25): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpai_vna8g.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 1;\n\tlong[] max_product_arr = new long[arr.length];\n\tlong[] max_arr = new long[arr.length];\n\tlong[] min_arr = new long[arr.length];\n\tmax_arr[0] = arr[0];\n\tmin_arr[0] = arr[0];\n\tmax_product_arr[0] = arr[0];\n\tfor(int i = 1; i < arr.length; i++)\n\t{\n\t\tmax_arr[i] = max(arr[i], max(arr[i] * max_arr[i - 1], arr[i] * min_arr[i - 1]));\n\t\tmin_arr[i] = min(arr[i], min(arr[i] * max_arr[i - 1], arr[i] * min_arr[i - 1]));\n\t\tmax_product_arr[i] = max(max_product_arr[i - 1], max_arr[i]);\n\t}\n\treturn max_product_arr[arr.length - 1];\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "/tmp/tmp7f1xfu2i.d(18): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmp7f1xfu2i.d(19): Error: undefined identifier `min`, did you mean function `main`?\n/tmp/tmp7f1xfu2i.d(20): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7f1xfu2i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong[] max_product = new long[arr.length];\n\tmax_product[0] = arr[0];\n\tlong max = arr[0];\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tmax_product[i] = max(arr[i], max_product[i - 1] * arr[i]);\n\t\tmax = max(max, max_product[i]);\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122555,
      "stdout": "",
      "stderr": "/tmp/tmpa8uwotcg.d(14): Error: function expected before `()`, not `max` of type `long`\n/tmp/tmpa8uwotcg.d(15): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa8uwotcg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max = 0;\n\tlong product = 1;\n\tlong[] products = new long[arr.length];\n\t\n\tfor (int i = 0; i < arr.length; i++)\n\t{\n\t\tproduct = 1;\n\t\tfor (int j = i; j < arr.length; j++)\n\t\t{\n\t\t\tproduct *= arr[j];\n\t\t\tproducts[j] = product;\n\t\t}\n\t}\n\t\n\tmax = products[0];\n\tfor (int i = 0; i < products.length; i++)\n\t{\n\t\tif (products[i] > max)\n\t\t{\n\t\t\tmax = products[i];\n\t\t}\n\t}\n\t\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpve8z3kwq.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x428235]\n??:? void tmpve8z3kwq.__unittest_L34_C1() [0x427ec9]\n??:? void tmpve8z3kwq.__modtest() [0x427fb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c2ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b182]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43040d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4308bc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430399]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b159]\n??:? runModuleUnitTests [0x42c0c5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286f8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n    long max = 1;\n    long min = 1;\n    long result = 1;\n    foreach(i; arr) \n    {\n        if(i > 0) \n        {\n            max *= i;\n            min *= i;\n        }\n        if(i < 0) \n        {\n            long temp = max;\n            max = max(min * i, 1);\n            min = min(temp * i, 1);\n        }\n        if(i == 0) \n        {\n            max = 1;\n            min = 1;\n        }\n        result = max(result, max);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "/tmp/tmp_n7t1iod.d(22): Error: function expected before `()`, not `max` of type `long`\n/tmp/tmp_n7t1iod.d(23): Error: function expected before `()`, not `min` of type `long`\n/tmp/tmp_n7t1iod.d(30): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_n7t1iod.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 1;\n\tlong min_product = 1;\n\tlong result = 1;\n\tforeach(i; arr)\n\t{\n\t\tif(i > 0)\n\t\t{\n\t\t\tmax_product *= i;\n\t\t\tmin_product *= i;\n\t\t}\n\t\telse if(i == 0)\n\t\t{\n\t\t\tmax_product = 1;\n\t\t\tmin_product = 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlong temp = max_product;\n\t\t\tmax_product = max(min_product * i, 1);\n\t\t\tmin_product = temp * i;\n\t\t}\n\t\tif(max_product > result)\n\t\t\tresult = max_product;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "/tmp/tmp_vq_uklt.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_vq_uklt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n    long max_product = 1;\n    long max_product_so_far = 1;\n    long max_product_so_far_neg = 1;\n    long max_product_so_far_neg_last = 1;\n    long max_product_so_far_last = 1;\n    long max_product_so_far_neg_last_last = 1;\n    long max_product_so_far_last_last = 1;\n    long max_product_so_far_neg_last_last_last = 1;\n    long max_product_so_far_last_last_last = 1;\n    long max_product_so_far_neg_last_last_last_last = 1;\n    long max_product_so_far_last_last_last_last = 1;\n    long max_product_so_far_neg_last_last_last_last_last = 1;\n    long max_product_so_far_last_last_last_last_last = 1;\n    long max_product_so_far_neg_last_last_last_last_last_last = 1;\n    long max_product_so_far_last_last_last_last_last_last = 1;\n    long max_product_so_far_neg_last_last_last_last_last_last_last = 1;\n    long max_product_so_far_last_last_last_last_last_last_last = 1;\n    long max_product_so_far_neg_last_last_last_last_last_last_last_last = 1;\n    long max_product_so_far_last_last_last_last_last_last_last_last = 1;\n    long max_product_so_far_neg_last_last_last_last_last_last_last_last_last = 1;\n    long max_product_so_far_last_last_last_last_last_last_last_last_last = 1;\n    long max_product_so_far_neg_last_last_last_last_last_last_last_last_last_last = 1;\n    long max_product\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "/tmp/tmphlxng_8i.d(32): Error: semicolon expected, not `unittest`\n/tmp/tmphlxng_8i.d(32): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphlxng_8i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max = 0;\n\tlong[] dp = new long[arr.length];\n\tfor (int i = 0; i < arr.length; i++)\n\t{\n\t\tdp[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++)\n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tdp[i] = max(dp[i], dp[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax = max(max, dp[i]);\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "/tmp/tmp3sl570qr.d(18): Error: function expected before `()`, not `max` of type `long`\n/tmp/tmp3sl570qr.d(21): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3sl570qr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 0;\n\tlong[] products = new long[arr.length];\n\t\n\tfor (int i = 0; i < arr.length; i++)\n\t{\n\t\tproducts[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++)\n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tproducts[i] = max(products[i], products[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax_product = max(max_product, products[i]);\n\t}\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "/tmp/tmpzcdlrzq9.d(19): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmpzcdlrzq9.d(22): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzcdlrzq9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max = 0;\n\tlong product = 1;\n\tlong[] max_arr = new long[arr.length];\n\t\n\tfor(int i = 0; i < arr.length; i++)\n\t{\n\t\tmax_arr[i] = arr[i];\n\t\tfor(int j = 0; j < i; j++)\n\t\t{\n\t\t\tif(arr[j] < arr[i])\n\t\t\t{\n\t\t\t\tmax_arr[i] = max(max_arr[i], max_arr[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax = max(max, max_arr[i]);\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "/tmp/tmp0m0t8prn.d(20): Error: function expected before `()`, not `max` of type `long`\n/tmp/tmp0m0t8prn.d(23): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0m0t8prn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max = 0;\n\tlong[] dp = new long[arr.length];\n\tdp[0] = arr[0];\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tdp[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tdp[i] = max(dp[i], dp[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax = max(max, dp[i]);\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "/tmp/tmpa2xrlfck.d(19): Error: function expected before `()`, not `max` of type `long`\n/tmp/tmpa2xrlfck.d(22): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa2xrlfck.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 0;\n\tlong max_product_so_far = 0;\n\tlong max_product_ending_here = 0;\n\tlong max_product_ending_here_negative = 0;\n\t\n\tforeach(i; arr)\n\t{\n\t\tif(i > 0)\n\t\t{\n\t\t\tmax_product_ending_here = max_product_ending_here == 0 ? i : max_product_ending_here * i;\n\t\t\tmax_product_ending_here_negative = max_product_ending_here_negative == 0 ? i : max_product_ending_here_negative * i;\n\t\t}\n\t\telse if(i < 0)\n\t\t{\n\t\t\tlong temp = max_product_ending_here;\n\t\t\tmax_product_ending_here = max_product_ending_here_negative == 0 ? i : max_product_ending_here_negative * i;\n\t\t\tmax_product_ending_here_negative = temp == 0 ? i : temp * i;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tmax_product_ending_here = 0;\n\t\t\tmax_product_ending_here_negative = 0;\n\t\t}\n\t\t\n\t\tmax_product_so_far = max(max_product_so_far, max_product_ending_here);\n\t}\n\t\n\treturn max_product_so_far;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "/tmp/tmpga3f37u1.d(33): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpga3f37u1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong[] max_product = new long[arr.length];\n\tlong[] max_product_index = new long[arr.length];\n\tlong max_product_value = 0;\n\tlong max_product_index_value = 0;\n\tlong max_product_index_value_index = 0;\n\t\n\tfor(int i = 0; i < arr.length; i++)\n\t{\n\t\tmax_product[i] = arr[i];\n\t\tmax_product_index[i] = i;\n\t\t\n\t\tfor(int j = 0; j < i; j++)\n\t\t{\n\t\t\tif(arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tif(max_product[i] < max_product[j] * arr[i])\n\t\t\t\t{\n\t\t\t\t\tmax_product[i] = max_product[j] * arr[i];\n\t\t\t\t\tmax_product_index[i] = j;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(max_product_value < max_product[i])\n\t\t{\n\t\t\tmax_product_value = max_product[i];\n\t\t\tmax_product_index_value = i;\n\t\t}\n\t}\n\t\n\treturn max_product_value;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp6zgyzjee.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x4283b5]\n??:? void tmp6zgyzjee.__unittest_L41_C1() [0x428045]\n??:? void tmp6zgyzjee.__modtest() [0x428134]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c46f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b302]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43058d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a3c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430519]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2d9]\n??:? runModuleUnitTests [0x42c245]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428878]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong[] max = new long[arr.length];\n\tlong[] min = new long[arr.length];\n\tmax[0] = arr[0];\n\tmin[0] = arr[0];\n\tlong result = arr[0];\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tif (arr[i] > 0) \n\t\t{\n\t\t\tmax[i] = max(arr[i], max[i - 1] * arr[i]);\n\t\t\tmin[i] = min(arr[i], min[i - 1] * arr[i]);\n\t\t} \n\t\telse \n\t\t{\n\t\t\tmax[i] = max(arr[i], min[i - 1] * arr[i]);\n\t\t\tmin[i] = min(arr[i], max[i - 1] * arr[i]);\n\t\t}\n\t\tresult = max(result, max[i]);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "/tmp/tmp0sqdoj85.d(18): Error: function expected before `()`, not `max` of type `long[]`\n/tmp/tmp0sqdoj85.d(19): Error: function expected before `()`, not `min` of type `long[]`\n/tmp/tmp0sqdoj85.d(23): Error: function expected before `()`, not `max` of type `long[]`\n/tmp/tmp0sqdoj85.d(24): Error: function expected before `()`, not `min` of type `long[]`\n/tmp/tmp0sqdoj85.d(26): Error: function expected before `()`, not `max` of type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0sqdoj85.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 1;\n\tlong[] max_product_arr = new long[arr.length];\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\tmax_product_arr[i] = arr[i];\n\t}\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j] && max_product_arr[i] < max_product_arr[j] * arr[i]) \n\t\t\t{\n\t\t\t\tmax_product_arr[i] = max_product_arr[j] * arr[i];\n\t\t\t}\n\t\t}\n\t}\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\tmax_product = max(max_product, max_product_arr[i]);\n\t}\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "/tmp/tmpvfu6jax7.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvfu6jax7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 0;\n\tlong[] max_product_arr = new long[arr.length];\n\t\n\tforeach(i, val; arr)\n\t{\n\t\tmax_product_arr[i] = val;\n\t\tforeach(j; 0 .. i)\n\t\t{\n\t\t\tif(arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tmax_product_arr[i] = max(max_product_arr[i], max_product_arr[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax_product = max(max_product, max_product_arr[i]);\n\t}\n\t\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "/tmp/tmpsvd6te1p.d(19): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmpsvd6te1p.d(22): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsvd6te1p.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong[] max_product_arr = new long[arr.length];\n\tlong[] max_product_arr_index = new long[arr.length];\n\tlong max_product = 0;\n\t\n\tmax_product_arr[0] = arr[0];\n\tmax_product_arr_index[0] = 0;\n\t\n\tfor(int i = 1; i < arr.length; i++)\n\t{\n\t\tmax_product_arr[i] = arr[i];\n\t\tmax_product_arr_index[i] = i;\n\t\t\n\t\tfor(int j = 0; j < i; j++)\n\t\t{\n\t\t\tif(arr[i] > arr[j] && max_product_arr[i] < max_product_arr[j] * arr[i])\n\t\t\t{\n\t\t\t\tmax_product_arr[i] = max_product_arr[j] * arr[i];\n\t\t\t\tmax_product_arr_index[i] = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(max_product < max_product_arr[i])\n\t\t{\n\t\t\tmax_product = max_product_arr[i];\n\t\t}\n\t}\n\t\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp8cjtb02a.d(42): unittest failure\n----------------\n??:? _d_unittestp [0x42843d]\n??:? void tmp8cjtb02a.__unittest_L38_C1() [0x4280d1]\n??:? void tmp8cjtb02a.__modtest() [0x4281c0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b38a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430615]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ac4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b361]\n??:? runModuleUnitTests [0x42c2cd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428900]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong[] max_product = new long[arr.length];\n\tlong[] max_product_index = new long[arr.length];\n\tlong max_product_value = 0;\n\tlong max_product_index_value = 0;\n\t\n\tfor (int i = 0; i < arr.length; i++)\n\t{\n\t\tmax_product[i] = arr[i];\n\t\tmax_product_index[i] = i;\n\t\t\n\t\tfor (int j = 0; j < i; j++)\n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tif (max_product[i] < max_product[j] * arr[i])\n\t\t\t\t{\n\t\t\t\t\tmax_product[i] = max_product[j] * arr[i];\n\t\t\t\t\tmax_product_index[i] = j;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (max_product_value < max_product[i])\n\t\t{\n\t\t\tmax_product_value = max_product[i];\n\t\t\tmax_product_index_value = i;\n\t\t}\n\t}\n\t\n\treturn max_product_value;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpv8bu0_qo.d(44): unittest failure\n----------------\n??:? _d_unittestp [0x4283b5]\n??:? void tmpv8bu0_qo.__unittest_L40_C1() [0x428045]\n??:? void tmpv8bu0_qo.__modtest() [0x428134]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c46f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b302]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43058d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a3c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430519]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2d9]\n??:? runModuleUnitTests [0x42c245]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428878]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 0;\n\tlong product = 1;\n\tlong[] max_arr = new long[arr.length];\n\tfor(int i = 0; i < arr.length; i++)\n\t{\n\t\tmax_arr[i] = arr[i];\n\t}\n\t\n\tfor(int i = 0; i < arr.length; i++)\n\t{\n\t\tfor(int j = 0; j < i; j++)\n\t\t{\n\t\t\tif(arr[j] < arr[i])\n\t\t\t{\n\t\t\t\tmax_arr[i] = max(max_arr[i], max_arr[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax_product = max(max_product, max_arr[i]);\n\t}\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "/tmp/tmpae9tu6xl.d(23): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmpae9tu6xl.d(26): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpae9tu6xl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max = 0;\n\tlong[] dp = new long[arr.length];\n\tdp[0] = arr[0];\n\tfor (int i = 1; i < arr.length; i++)\n\t{\n\t\tdp[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++)\n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tdp[i] = max(dp[i], dp[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax = max(max, dp[i]);\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122555,
      "stdout": "",
      "stderr": "/tmp/tmpnrd66ur1.d(19): Error: function expected before `()`, not `max` of type `long`\n/tmp/tmpnrd66ur1.d(22): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnrd66ur1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong[] max_product = new long[arr.length];\n\tlong[] max_product_index = new long[arr.length];\n\tlong[] max_product_length = new long[arr.length];\n\tlong max = 0;\n\tlong max_index = 0;\n\tlong max_length = 0;\n\t\n\tfor (int i = 0; i < arr.length; i++)\n\t{\n\t\tmax_product[i] = arr[i];\n\t\tmax_product_index[i] = i;\n\t\tmax_product_length[i] = 1;\n\t\t\n\t\tfor (int j = 0; j < i; j++)\n\t\t{\n\t\t\tif (arr[i] > arr[j] && max_product[i] < max_product[j] * arr[i])\n\t\t\t{\n\t\t\t\tmax_product[i] = max_product[j] * arr[i];\n\t\t\t\tmax_product_index[i] = j;\n\t\t\t\tmax_product_length[i] = max_product_length[j] + 1;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (max < max_product[i])\n\t\t{\n\t\t\tmax = max_product[i];\n\t\t\tmax_index = i;\n\t\t\tmax_length = max_product_length[i];\n\t\t}\n\t}\n\t\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpmlukc8de.d(46): unittest failure\n----------------\n??:? _d_unittestp [0x42848d]\n??:? void tmpmlukc8de.__unittest_L42_C1() [0x42811d]\n??:? void tmpmlukc8de.__modtest() [0x42820c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c547]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3da]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430665]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b14]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b1]\n??:? runModuleUnitTests [0x42c31d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428950]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max = 0;\n\tlong product = 1;\n\tforeach(i; arr)\n\t{\n\t\tproduct *= i;\n\t\tif(product > max)\n\t\t\tmax = product;\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122555,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpo5jijxlj.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x42813d]\n??:? void tmpo5jijxlj.__unittest_L19_C1() [0x427dcd]\n??:? void tmpo5jijxlj.__modtest() [0x427ebc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c127]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afba]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43014d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305fc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300d9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af91]\n??:? runModuleUnitTests [0x42befd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42858c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 1;\n\tlong max_product_so_far = 1;\n\tlong min_product_so_far = 1;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tif(arr[i] > 0)\n\t\t{\n\t\t\tmax_product_so_far *= arr[i];\n\t\t\tmin_product_so_far = min(min_product_so_far * arr[i], 1);\n\t\t}\n\t\telse if(arr[i] == 0)\n\t\t{\n\t\t\tmax_product_so_far = 1;\n\t\t\tmin_product_so_far = 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlong temp = max_product_so_far;\n\t\t\tmax_product_so_far = max(min_product_so_far * arr[i], 1);\n\t\t\tmin_product_so_far = temp * arr[i];\n\t\t}\n\t\tmax_product = max(max_product, max_product_so_far);\n\t}\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "/tmp/tmp0i31lp_h.d(17): Error: undefined identifier `min`, did you mean function `main`?\n/tmp/tmp0i31lp_h.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmp0i31lp_h.d(30): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0i31lp_h.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max = 0;\n\tlong[] dp = new long[arr.length];\n\tdp[0] = arr[0];\n\tforeach(i; 1..arr.length)\n\t{\n\t\tdp[i] = arr[i];\n\t\tforeach(j; 0..i)\n\t\t{\n\t\t\tif(arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tdp[i] = max(dp[i], dp[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax = max(max, dp[i]);\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "/tmp/tmppebsu8p0.d(19): Error: function expected before `()`, not `max` of type `long`\n/tmp/tmppebsu8p0.d(22): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppebsu8p0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n    long[] dp = new long[arr.length];\n    dp[0] = arr[0];\n    long max = dp[0];\n    for (int i = 1; i < arr.length; i++) {\n        dp[i] = arr[i];\n        for (int j = 0; j < i; j++) {\n            if (arr[i] > arr[j]) {\n                dp[i] = max(dp[i], dp[j] * arr[i]);\n            }\n        }\n        max = max(max, dp[i]);\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "/tmp/tmpd1ceb11n.d(16): Error: function expected before `()`, not `max` of type `long`\n/tmp/tmpd1ceb11n.d(19): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd1ceb11n.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 0;\n\tlong[] max_product_arr = new long[arr.length];\n\t\n\tforeach(i, v; arr)\n\t{\n\t\tmax_product_arr[i] = v;\n\t\tforeach(j, v2; arr[0..i])\n\t\t{\n\t\t\tif(v2 < v)\n\t\t\t{\n\t\t\t\tmax_product_arr[i] = max(max_product_arr[i], v2 * v);\n\t\t\t}\n\t\t}\n\t\tmax_product = max(max_product, max_product_arr[i]);\n\t}\n\t\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "/tmp/tmp218ik2qq.d(19): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmp218ik2qq.d(22): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp218ik2qq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n    long max = 0;\n    long[] dp = new long[arr.length];\n    dp[0] = arr[0];\n    for (int i = 1; i < arr.length; i++) \n    {\n        for (int j = 0; j < i; j++) \n        {\n            if (arr[i] > arr[j]) \n            {\n                dp[i] = max(dp[i], dp[j] * arr[i]);\n            }\n        }\n        max = max(max, dp[i]);\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "/tmp/tmp8sh4n0lw.d(18): Error: function expected before `()`, not `max` of type `long`\n/tmp/tmp8sh4n0lw.d(21): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8sh4n0lw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 0;\n\tlong[] max_product_arr = new long[arr.length];\n\t\n\tforeach(i; 0 .. arr.length)\n\t\tmax_product_arr[i] = arr[i];\n\t\n\tforeach(i; 1 .. arr.length)\n\t{\n\t\tforeach(j; 0 .. i)\n\t\t{\n\t\t\tif(arr[i] > arr[j] && max_product_arr[i] < max_product_arr[j] * arr[i])\n\t\t\t\tmax_product_arr[i] = max_product_arr[j] * arr[i];\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. arr.length)\n\t\tmax_product = max(max_product, max_product_arr[i]);\n\t\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "/tmp/tmpylcxykdl.d(25): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpylcxykdl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n    long max = 0;\n    long max_product = 1;\n    long[] products = new long[arr.length];\n    for (int i = 0; i < arr.length; i++) \n    {\n        max_product = max_product * arr[i];\n        products[i] = max_product;\n        if (arr[i] > max) \n        {\n            max = arr[i];\n        }\n    }\n    long min_product = 1;\n    for (int i = arr.length - 1; i >= 0; i--) \n    {\n        max_product = max_product / arr[i];\n        products[i] = max_product;\n        if (arr[i] < min_product) \n        {\n            min_product = arr[i];\n        }\n    }\n    long result = max;\n    for (int i = 0; i < arr.length; i++) \n    {\n        if (products[i] > result) \n        {\n            result = products[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "/tmp/tmp7u_d3sjn.d(22): Error: cannot implicitly convert expression `arr.length - 1LU` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7u_d3sjn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong[] max_product_arr = new long[arr.length];\n\tlong max_product = 1;\n\t\n\tforeach(i,v; arr)\n\t{\n\t\tmax_product_arr[i] = v;\n\t\tforeach(j,w; arr[0..i])\n\t\t{\n\t\t\tif(v > w)\n\t\t\t{\n\t\t\t\tmax_product_arr[i] = max(max_product_arr[i], max_product_arr[j] * v);\n\t\t\t}\n\t\t}\n\t\tmax_product = max(max_product, max_product_arr[i]);\n\t}\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "/tmp/tmp27elybpb.d(19): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmp27elybpb.d(22): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp27elybpb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong[] max_product = new long[arr.length];\n\tmax_product[0] = arr[0];\n\tlong max = arr[0];\n\tfor(int i = 1; i < arr.length; i++)\n\t{\n\t\tmax_product[i] = max(arr[i], max_product[i-1] * arr[i]);\n\t\tmax = max(max, max_product[i]);\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "/tmp/tmpczjoiufy.d(14): Error: function expected before `()`, not `max` of type `long`\n/tmp/tmpczjoiufy.d(15): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpczjoiufy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 1;\n\tlong[] max_product_arr = new long[arr.length];\n\tfor (int i = 0; i < arr.length; i++)\n\t{\n\t\tmax_product_arr[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++)\n\t\t{\n\t\t\tif (arr[j] < arr[i])\n\t\t\t{\n\t\t\t\tmax_product_arr[i] = max(max_product_arr[i], max_product_arr[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax_product = max(max_product, max_product_arr[i]);\n\t}\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122555,
      "stdout": "",
      "stderr": "/tmp/tmp6lz11gbd.d(18): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmp6lz11gbd.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6lz11gbd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max = 0;\n\tlong[] dp = new long[arr.length];\n\tdp[0] = arr[0];\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tdp[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[j] < arr[i]) \n\t\t\t{\n\t\t\t\tdp[i] = max(dp[i], dp[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax = max(max, dp[i]);\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122555,
      "stdout": "",
      "stderr": "/tmp/tmpur9o_cqk.d(19): Error: function expected before `()`, not `max` of type `long`\n/tmp/tmpur9o_cqk.d(22): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpur9o_cqk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 1;\n\tlong product = 1;\n\tlong[] max_arr = new long[arr.length];\n\tlong[] min_arr = new long[arr.length];\n\tmax_arr[0] = arr[0];\n\tmin_arr[0] = arr[0];\n\tfor (int i = 1; i < arr.length; i++)\n\t{\n\t\tmax_arr[i] = max(max_arr[i - 1] * arr[i], min_arr[i - 1] * arr[i], arr[i]);\n\t\tmin_arr[i] = min(max_arr[i - 1] * arr[i], min_arr[i - 1] * arr[i], arr[i]);\n\t\tmax_product = max(max_product, max_arr[i]);\n\t}\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "/tmp/tmptb3bpdsx.d(17): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmptb3bpdsx.d(18): Error: undefined identifier `min`, did you mean function `main`?\n/tmp/tmptb3bpdsx.d(19): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptb3bpdsx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 1;\n\tlong product = 1;\n\tlong[] products = new long[arr.length];\n\t\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tproducts[i] = 1;\n\t}\n\t\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; 0 .. i)\n\t\t{\n\t\t\tif(arr[i] > arr[j] && products[i] < products[j] * arr[i])\n\t\t\t{\n\t\t\t\tproducts[i] = products[j] * arr[i];\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tif(max_product < products[i])\n\t\t{\n\t\t\tmax_product = products[i];\n\t\t}\n\t}\n\t\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmphwjzy35w.d(43): unittest failure\n----------------\n??:? _d_unittestp [0x428395]\n??:? void tmphwjzy35w.__unittest_L39_C1() [0x428029]\n??:? void tmphwjzy35w.__modtest() [0x428118]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c44f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2e2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43056d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a1c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4304f9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2b9]\n??:? runModuleUnitTests [0x42c225]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428858]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 0;\n\tlong[] max_products = new long[arr.length];\n\t\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\tmax_products[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tmax_products[i] = max(max_products[i], max_products[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax_product = max(max_product, max_products[i]);\n\t}\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "/tmp/tmp__if74n7.d(19): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmp__if74n7.d(22): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp__if74n7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 1;\n\tlong[] max_product_arr = new long[arr.length];\n\tmax_product_arr[0] = arr[0];\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tmax_product_arr[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tmax_product_arr[i] = max(max_product_arr[i], max_product_arr[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax_product = max(max_product, max_product_arr[i]);\n\t}\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "/tmp/tmpz9omk0r1.d(19): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmpz9omk0r1.d(22): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz9omk0r1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 0;\n\tlong[] max_product_arr = new long[arr.length];\n\t\n\tmax_product_arr[0] = arr[0];\n\t\n\tfor (int i = 1; i < arr.length; i++)\n\t{\n\t\tlong max_product_so_far = 0;\n\t\t\n\t\tfor (int j = 0; j < i; j++)\n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tmax_product_so_far = max(max_product_so_far, max_product_arr[j]);\n\t\t\t}\n\t\t}\n\t\t\n\t\tmax_product_arr[i] = max_product_so_far * arr[i];\n\t\tmax_product = max(max_product, max_product_arr[i]);\n\t}\n\t\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "/tmp/tmpnb0eob1j.d(22): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmpnb0eob1j.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnb0eob1j.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 0;\n\tlong[] max_product_at_index = new long[arr.length];\n\tmax_product_at_index[0] = arr[0];\n\t\n\tfor(int i = 1; i < arr.length; i++)\n\t{\n\t\tmax_product_at_index[i] = arr[i];\n\t\tfor(int j = 0; j < i; j++)\n\t\t{\n\t\t\tif(arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tmax_product_at_index[i] = max(max_product_at_index[i], max_product_at_index[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax_product = max(max_product, max_product_at_index[i]);\n\t}\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "/tmp/tmpfsk0g4rz.d(20): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmpfsk0g4rz.d(23): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfsk0g4rz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 1;\n\tlong[] max_products = new long[arr.length];\n\tlong[] min_products = new long[arr.length];\n\tmax_products[0] = arr[0];\n\tmin_products[0] = arr[0];\n\tforeach(i, val; arr)\n\t{\n\t\tif(i == 0) continue;\n\t\tmax_products[i] = max(max(max_products[i-1]*val, min_products[i-1]*val), val);\n\t\tmin_products[i] = min(min(max_products[i-1]*val, min_products[i-1]*val), val);\n\t\tmax_product = max(max_product, max_products[i]);\n\t}\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "/tmp/tmps_ebtcub.d(17): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmps_ebtcub.d(18): Error: undefined identifier `min`, did you mean function `main`?\n/tmp/tmps_ebtcub.d(19): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps_ebtcub.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 1;\n\tlong max_product_so_far = 1;\n\tlong min_product_so_far = 1;\n\tforeach(i; arr)\n\t{\n\t\tif(i > 0)\n\t\t{\n\t\t\tmax_product_so_far *= i;\n\t\t\tmin_product_so_far *= i;\n\t\t}\n\t\telse if(i == 0)\n\t\t{\n\t\t\tmax_product_so_far = 1;\n\t\t\tmin_product_so_far = 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlong temp = max_product_so_far;\n\t\t\tmax_product_so_far = max(min_product_so_far * i, 1);\n\t\t\tmin_product_so_far = temp * i;\n\t\t}\n\t\tif(max_product_so_far > max_product)\n\t\t{\n\t\t\tmax_product = max_product_so_far;\n\t\t}\n\t}\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "/tmp/tmpurt9u2su.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpurt9u2su.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong[] max_product_arr = new long[arr.length];\n\tlong max_product = arr[0];\n\tmax_product_arr[0] = arr[0];\n\tfor (int i = 1; i < arr.length; i++)\n\t{\n\t\tmax_product_arr[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++)\n\t\t{\n\t\t\tif (arr[j] < arr[i])\n\t\t\t{\n\t\t\t\tmax_product_arr[i] = max(max_product_arr[i], max_product_arr[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax_product = max(max_product, max_product_arr[i]);\n\t}\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "/tmp/tmp8a5z1984.d(19): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmp8a5z1984.d(22): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8a5z1984.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max = 0;\n\tlong[] dp = new long[arr.length];\n\tdp[0] = arr[0];\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tdp[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tdp[i] = max(dp[i], dp[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax = max(max, dp[i]);\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "/tmp/tmpa2xrlfck.d(19): Error: function expected before `()`, not `max` of type `long`\n/tmp/tmpa2xrlfck.d(22): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa2xrlfck.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong[] max_product = new long[arr.length];\n\tlong[] max_product_index = new long[arr.length];\n\tlong max_product_value = 0;\n\tlong max_product_index_value = 0;\n\tlong max_product_index_value_index = 0;\n\t\n\tfor(int i = 0; i < arr.length; i++)\n\t{\n\t\tmax_product[i] = arr[i];\n\t\tmax_product_index[i] = i;\n\t\t\n\t\tfor(int j = 0; j < i; j++)\n\t\t{\n\t\t\tif(arr[i] > arr[j] && max_product[i] < max_product[j] * arr[i])\n\t\t\t{\n\t\t\t\tmax_product[i] = max_product[j] * arr[i];\n\t\t\t\tmax_product_index[i] = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(max_product_value < max_product[i])\n\t\t{\n\t\t\tmax_product_value = max_product[i];\n\t\t\tmax_product_index_value = i;\n\t\t}\n\t}\n\t\n\treturn max_product_value;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpgefac0df.d(42): unittest failure\n----------------\n??:? _d_unittestp [0x4283c5]\n??:? void tmpgefac0df.__unittest_L38_C1() [0x428059]\n??:? void tmpgefac0df.__modtest() [0x428148]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c47f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b312]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43059d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a4c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430529]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2e9]\n??:? runModuleUnitTests [0x42c255]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428888]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 1;\n\tlong[] max_product_arr = new long[arr.length];\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\tmax_product_arr[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[j] < arr[i]) \n\t\t\t{\n\t\t\t\tmax_product_arr[i] = max(max_product_arr[i], max_product_arr[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax_product = max(max_product, max_product_arr[i]);\n\t}\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122555,
      "stdout": "",
      "stderr": "/tmp/tmp0cpeec1h.d(18): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmp0cpeec1h.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0cpeec1h.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong[] max = new long[arr.length];\n\tlong[] min = new long[arr.length];\n\tlong max_product = arr[0];\n\tmax[0] = arr[0];\n\tmin[0] = arr[0];\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tmax[i] = max(arr[i], max(max[i - 1] * arr[i], min[i - 1] * arr[i]));\n\t\tmin[i] = min(arr[i], min(max[i - 1] * arr[i], min[i - 1] * arr[i]));\n\t\tmax_product = max(max_product, max[i]);\n\t}\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "/tmp/tmpyhhd7y3h.d(16): Error: function expected before `()`, not `max` of type `long[]`\n/tmp/tmpyhhd7y3h.d(17): Error: function expected before `()`, not `min` of type `long[]`\n/tmp/tmpyhhd7y3h.d(18): Error: function expected before `()`, not `max` of type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyhhd7y3h.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 0;\n\tlong[] max_product_arr = new long[arr.length];\n\t\n\tforeach(i, v; arr)\n\t{\n\t\tmax_product_arr[i] = v;\n\t\tforeach(j; 0 .. i)\n\t\t{\n\t\t\tif(arr[j] < arr[i])\n\t\t\t{\n\t\t\t\tmax_product_arr[i] = max(max_product_arr[i], max_product_arr[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax_product = max(max_product, max_product_arr[i]);\n\t}\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "/tmp/tmpq7j461z2.d(19): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmpq7j461z2.d(22): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq7j461z2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 1;\n\tlong current_product = 1;\n\tlong[] products = new long[arr.length];\n\t\n\tfor (int i = 0; i < arr.length; i++)\n\t{\n\t\tcurrent_product = 1;\n\t\tfor (int j = i; j < arr.length; j++)\n\t\t{\n\t\t\tcurrent_product *= arr[j];\n\t\t\tproducts[j] = max(products[j], current_product);\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < products.length; i++)\n\t{\n\t\tmax_product = max(max_product, products[i]);\n\t}\n\t\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "/tmp/tmpvi77k49a.d(19): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmpvi77k49a.d(25): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvi77k49a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong[] max_product = new long[arr.length];\n\tmax_product[0] = arr[0];\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tmax_product[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tmax_product[i] = max(max_product[i], max_product[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t}\n\treturn max(max_product);\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "/tmp/tmp8l4d0lt_.d(18): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmp8l4d0lt_.d(22): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8l4d0lt_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong[] max_product = new long[arr.length];\n\tlong[] max_product_index = new long[arr.length];\n\tlong max = 0;\n\tlong max_index = 0;\n\t\n\tmax_product[0] = arr[0];\n\tmax_product_index[0] = 0;\n\t\n\tfor (long i = 1; i < arr.length; i++)\n\t{\n\t\tmax = 0;\n\t\tmax_index = 0;\n\t\tfor (long j = 0; j < i; j++)\n\t\t{\n\t\t\tif (arr[i] > arr[j] && max_product[j] > max)\n\t\t\t{\n\t\t\t\tmax = max_product[j];\n\t\t\t\tmax_index = j;\n\t\t\t}\n\t\t}\n\t\tmax_product[i] = max * arr[i];\n\t\tmax_product_index[i] = max_index;\n\t}\n\t\n\tmax = 0;\n\tmax_index = 0;\n\tfor (long i = 0; i < arr.length; i++)\n\t{\n\t\tif (max_product[i] > max)\n\t\t{\n\t\t\tmax = max_product[i];\n\t\t\tmax_index = i;\n\t\t}\n\t}\n\t\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpkbmj5wtj.d(50): unittest failure\n----------------\n??:? _d_unittestp [0x42837d]\n??:? void tmpkbmj5wtj.__unittest_L46_C1() [0x42800d]\n??:? void tmpkbmj5wtj.__modtest() [0x4280fc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c437]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2ca]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430555]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a04]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4304e1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2a1]\n??:? runModuleUnitTests [0x42c20d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428840]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 0;\n\tlong max_product_so_far = 0;\n\tlong max_product_ending_here = 0;\n\t\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\tmax_product_ending_here = max(arr[i], max_product_ending_here * arr[i]);\n\t\tmax_product_so_far = max(max_product_so_far, max_product_ending_here);\n\t\t\n\t\tif (arr[i] > 0) \n\t\t{\n\t\t\tmax_product = max(max_product, max_product * arr[i]);\n\t\t}\n\t\telse if (arr[i] == 0) \n\t\t{\n\t\t\tmax_product = max(max_product, 0);\n\t\t}\n\t\telse \n\t\t{\n\t\t\tmax_product = max(max_product, max_product_so_far);\n\t\t}\n\t}\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "/tmp/tmpd64j3b70.d(15): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmpd64j3b70.d(16): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmpd64j3b70.d(20): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmpd64j3b70.d(24): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmpd64j3b70.d(28): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd64j3b70.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong[] max_product = new long[arr.length];\n\tlong[] max_product_index = new long[arr.length];\n\tlong[] max_product_index_reverse = new long[arr.length];\n\t\n\tmax_product[0] = arr[0];\n\tmax_product_index[0] = 0;\n\tmax_product_index_reverse[arr.length-1] = arr.length-1;\n\t\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tmax_product[i] = arr[i];\n\t\tmax_product_index[i] = i;\n\t\t\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j] && max_product[i] < max_product[j] * arr[i]) \n\t\t\t{\n\t\t\t\tmax_product[i] = max_product[j] * arr[i];\n\t\t\t\tmax_product_index[i] = j;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tlong max = max_product[0];\n\tint max_index = 0;\n\t\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tif (max < max_product[i]) \n\t\t{\n\t\t\tmax = max_product[i];\n\t\t\tmax_index = i;\n\t\t}\n\t}\n\t\n\tint index = max_index;\n\tint count = 0;\n\t\n\twhile (index != max_product_index[index]) \n\t{\n\t\tmax_product_index_reverse[count] = index;\n\t\tindex = max_product_index[index];\n\t\tcount++;\n\t}\n\t\n\tmax_product_index_reverse[count] = index;\n\t\n\tfor (int i = 0; i <= count/2; i++) \n\t{\n\t\tlong temp = max_product_index_reverse[i];\n\t\tmax_product_index_reverse[i] = max_product_index\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "/tmp/tmp7ty2ihis.d(60): Error: found `unittest` when expecting `;` following statement\n/tmp/tmp7ty2ihis.d(68): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp7ty2ihis.d(68): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7ty2ihis.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong[] max_product = new long[arr.length];\n\tlong[] max_product_index = new long[arr.length];\n\tlong[] max_product_index_index = new long[arr.length];\n\tlong[] max_product_index_index_index = new long[arr.length];\n\tlong[] max_product_index_index_index_index = new long[arr.length];\n\tlong[] max_product_index_index_index_index_index = new long[arr.length];\n\tlong[] max_product_index_index_index_index_index_index = new long[arr.length];\n\tlong[] max_product_index_index_index_index_index_index_index = new long[arr.length];\n\tlong[] max_product_index_index_index_index_index_index_index_index = new long[arr.length];\n\tlong[] max_product_index_index_index_index_index_index_index_index_index = new long[arr.length];\n\tlong[] max_product_index_index_index_index_index_index_index_index_index_index = new long[arr.length];\n\tlong[] max_product_index_index_index_index_index_index_index_index_index_index_index = new long[arr.length];\n\tlong[] max_product_index_index_index_index_index_index_index_index_index_index_index_index = new long[arr.length];\n\tlong[] max_product_index_index_index_index_index_index_index_index_index_index_index_index_index = new long[arr.length];\n\tlong[] max_product_index_index_index_index_index_index_index_index_index_index_index_index_index_index = new long[arr.length];\n\tlong[] max_product_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = new long[arr.length];\n\tlong[] max_product_index_index_index_index_index_index_index_index_index_index_index_\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122555,
      "stdout": "",
      "stderr": "/tmp/tmpzjwgjimb.d(26): Error: semicolon expected, not `unittest`\n/tmp/tmpzjwgjimb.d(26): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzjwgjimb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong[] max_product = new long[arr.length];\n\tlong[] min_product = new long[arr.length];\n\tmax_product[0] = arr[0];\n\tmin_product[0] = arr[0];\n\tlong max_prod = arr[0];\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tmax_product[i] = max(arr[i], max(arr[i] * max_product[i - 1], arr[i] * min_product[i - 1]));\n\t\tmin_product[i] = min(arr[i], min(arr[i] * max_product[i - 1], arr[i] * min_product[i - 1]));\n\t\tmax_prod = max(max_prod, max_product[i]);\n\t}\n\treturn max_prod;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "/tmp/tmpc_q7i4xs.d(16): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmpc_q7i4xs.d(17): Error: undefined identifier `min`, did you mean function `main`?\n/tmp/tmpc_q7i4xs.d(18): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc_q7i4xs.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong[] max_product = new long[arr.length];\n\tlong[] max_product_index = new long[arr.length];\n\tlong[] max_product_index_prev = new long[arr.length];\n\tlong max_product_value = 0;\n\tlong max_product_index_value = 0;\n\tlong max_product_index_prev_value = 0;\n\tlong max_product_value_final = 0;\n\tlong max_product_index_value_final = 0;\n\tlong max_product_index_prev_value_final = 0;\n\t\n\tmax_product[0] = arr[0];\n\tmax_product_index[0] = 0;\n\tmax_product_index_prev[0] = 0;\n\t\n\tfor (long i = 1; i < arr.length; i++)\n\t{\n\t\tmax_product_value = 0;\n\t\tmax_product_index_value = 0;\n\t\tmax_product_index_prev_value = 0;\n\t\t\n\t\tfor (long j = 0; j < i; j++)\n\t\t{\n\t\t\tif (arr[j] < arr[i])\n\t\t\t{\n\t\t\t\tif (max_product_value < max_product[j])\n\t\t\t\t{\n\t\t\t\t\tmax_product_value = max_product[j];\n\t\t\t\t\tmax_product_index_value = j;\n\t\t\t\t\tmax_product_index_prev_value = max_product_index_prev[j];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tmax_product[i] = max_product_value * arr[i];\n\t\tmax_product_index[i] = i;\n\t\tmax_product_index_prev[i] = max_product_index_value;\n\t\t\n\t\tif (max_product_value_final < max_product[i])\n\t\t{\n\t\t\tmax_product_value_final = max_product[i];\n\t\t\tmax_product_index_value_final = i;\n\t\t\tmax_product_index\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "/tmp/tmppeky3eow.d(51): Error: found `unittest` when expecting `;` following statement\n/tmp/tmppeky3eow.d(59): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmppeky3eow.d(59): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmppeky3eow.d(59): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppeky3eow.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 1;\n\tlong[] max_product_arr = new long[arr.length];\n\tmax_product_arr[0] = arr[0];\n\tfor (int i = 1; i < arr.length; i++)\n\t{\n\t\tlong max_product_so_far = 1;\n\t\tfor (int j = 0; j < i; j++)\n\t\t{\n\t\t\tif (arr[j] < arr[i])\n\t\t\t{\n\t\t\t\tmax_product_so_far = max(max_product_so_far, max_product_arr[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax_product_arr[i] = max_product_so_far;\n\t\tmax_product = max(max_product, max_product_so_far);\n\t}\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "/tmp/tmp0wnvkun5.d(19): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmp0wnvkun5.d(23): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0wnvkun5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 0;\n\tlong product = 1;\n\tlong[] max_arr = new long[arr.length];\n\t\n\tforeach(i;0..arr.length)\n\t{\n\t\tmax_arr[i] = arr[i];\n\t}\n\t\n\tforeach(i;1..arr.length)\n\t{\n\t\tforeach(j;0..i)\n\t\t{\n\t\t\tif(arr[i] > arr[j] && max_arr[i] < max_arr[j] * arr[i])\n\t\t\t{\n\t\t\t\tmax_arr[i] = max_arr[j] * arr[i];\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i;0..arr.length)\n\t{\n\t\tif(max_product < max_arr[i])\n\t\t{\n\t\t\tmax_product = max_arr[i];\n\t\t}\n\t}\n\t\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpv0z3qm3n.d(43): unittest failure\n----------------\n??:? _d_unittestp [0x4283ad]\n??:? void tmpv0z3qm3n.__unittest_L39_C1() [0x428041]\n??:? void tmpv0z3qm3n.__modtest() [0x428130]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c467]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2fa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430585]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a34]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430511]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2d1]\n??:? runModuleUnitTests [0x42c23d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428870]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 1;\n\tlong[] max_product_arr = new long[arr.length];\n\t\n\tfor (int i = 0; i < arr.length; i++)\n\t{\n\t\tmax_product_arr[i] = arr[i];\n\t}\n\t\n\tfor (int i = 1; i < arr.length; i++)\n\t{\n\t\tfor (int j = 0; j < i; j++)\n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tmax_product_arr[i] = max(max_product_arr[i], max_product_arr[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < arr.length; i++)\n\t{\n\t\tif (max_product_arr[i] > max_product)\n\t\t{\n\t\t\tmax_product = max_product_arr[i];\n\t\t}\n\t}\n\t\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "/tmp/tmphh3_cwpm.d(23): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphh3_cwpm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 1;\n\tlong[] max_product_arr = new long[arr.length];\n\tfor (int i = 0; i < arr.length; i++)\n\t{\n\t\tmax_product_arr[i] = arr[i];\n\t}\n\tfor (int i = 1; i < arr.length; i++)\n\t{\n\t\tfor (int j = 0; j < i; j++)\n\t\t{\n\t\t\tif (arr[i] > arr[j] && max_product_arr[i] < max_product_arr[j] * arr[i])\n\t\t\t{\n\t\t\t\tmax_product_arr[i] = max_product_arr[j] * arr[i];\n\t\t\t}\n\t\t}\n\t}\n\tfor (int i = 0; i < arr.length; i++)\n\t{\n\t\tif (max_product < max_product_arr[i])\n\t\t{\n\t\t\tmax_product = max_product_arr[i];\n\t\t}\n\t}\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp8uhwydqe.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x428375]\n??:? void tmp8uhwydqe.__unittest_L34_C1() [0x428009]\n??:? void tmp8uhwydqe.__modtest() [0x4280f8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c42f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2c2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43054d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4309fc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4304d9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b299]\n??:? runModuleUnitTests [0x42c205]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428838]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong[] max_product = new long[arr.length];\n\tlong[] max_product_index = new long[arr.length];\n\tlong max_product_value = 0;\n\tlong max_product_index_value = 0;\n\t\n\tfor (int i = 0; i < arr.length; i++)\n\t{\n\t\tmax_product[i] = arr[i];\n\t\tmax_product_index[i] = i;\n\t}\n\t\n\tfor (int i = 1; i < arr.length; i++)\n\t{\n\t\tfor (int j = 0; j < i; j++)\n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tif (max_product[i] < max_product[j] * arr[i])\n\t\t\t\t{\n\t\t\t\t\tmax_product[i] = max_product[j] * arr[i];\n\t\t\t\t\tmax_product_index[i] = j;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < arr.length; i++)\n\t{\n\t\tif (max_product_value < max_product[i])\n\t\t{\n\t\t\tmax_product_value = max_product[i];\n\t\t\tmax_product_index_value = i;\n\t\t}\n\t}\n\t\n\treturn max_product_value;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5soct6j4.d(50): unittest failure\n----------------\n??:? _d_unittestp [0x4283e5]\n??:? void tmp5soct6j4.__unittest_L46_C1() [0x428079]\n??:? void tmp5soct6j4.__modtest() [0x428168]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c49f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b332]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305bd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a6c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430549]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b309]\n??:? runModuleUnitTests [0x42c275]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max = 0;\n\tlong product = 1;\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\tproduct *= arr[i];\n\t\tmax = max(max, product);\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "/tmp/tmpla4ju_ic.d(14): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpla4ju_ic.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 1;\n\tlong product = 1;\n\tlong max_element = 0;\n\tlong min_element = 0;\n\t\n\tforeach(elem; arr)\n\t{\n\t\tif(elem > 0)\n\t\t{\n\t\t\tproduct *= elem;\n\t\t\tmax_element = max(max_element, elem);\n\t\t}\n\t\telse if(elem == 0)\n\t\t{\n\t\t\tmax_product = max(max_product, 0);\n\t\t\tproduct = 1;\n\t\t\tmax_element = 0;\n\t\t\tmin_element = 0;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlong temp = product;\n\t\t\tproduct = max(product * elem, min_element * elem);\n\t\t\tmin_element = min(temp * elem, min_element * elem);\n\t\t}\n\t\t\n\t\tmax_product = max(max_product, product);\n\t}\n\t\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "/tmp/tmpt4djonky.d(19): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmpt4djonky.d(23): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmpt4djonky.d(31): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmpt4djonky.d(32): Error: undefined identifier `min`, did you mean function `main`?\n/tmp/tmpt4djonky.d(35): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt4djonky.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n    long maxProduct = 1;\n    long[] maxProductArr = new long[arr.length];\n    long[] minProductArr = new long[arr.length];\n    maxProductArr[0] = arr[0];\n    minProductArr[0] = arr[0];\n    for (int i = 1; i < arr.length; i++) \n    {\n        if (arr[i] > 0) \n        {\n            maxProductArr[i] = max(arr[i], maxProductArr[i - 1] * arr[i]);\n            minProductArr[i] = min(arr[i], minProductArr[i - 1] * arr[i]);\n        } \n        else \n        {\n            maxProductArr[i] = max(arr[i], minProductArr[i - 1] * arr[i]);\n            minProductArr[i] = min(arr[i], maxProductArr[i - 1] * arr[i]);\n        }\n        maxProduct = max(maxProduct, maxProductArr[i]);\n    }\n    return maxProduct;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "/tmp/tmp7ihu_n1c.d(18): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmp7ihu_n1c.d(19): Error: undefined identifier `min`, did you mean function `main`?\n/tmp/tmp7ihu_n1c.d(23): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmp7ihu_n1c.d(24): Error: undefined identifier `min`, did you mean function `main`?\n/tmp/tmp7ihu_n1c.d(26): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7ihu_n1c.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max = 0;\n\tlong product = 1;\n\tforeach(i; arr)\n\t{\n\t\tproduct *= i;\n\t\tif(max < product)\n\t\t\tmax = product;\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5om2hnjj.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x42813d]\n??:? void tmp5om2hnjj.__unittest_L19_C1() [0x427dcd]\n??:? void tmp5om2hnjj.__modtest() [0x427ebc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c127]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afba]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43014d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305fc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300d9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af91]\n??:? runModuleUnitTests [0x42befd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42858c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong[] max_product = new long[arr.length];\n\tmax_product[0] = arr[0];\n\tlong max = max_product[0];\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tmax_product[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[j] < arr[i]) \n\t\t\t{\n\t\t\t\tmax_product[i] = max(max_product[i], max_product[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax = max(max, max_product[i]);\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "/tmp/tmpwrnrarsn.d(19): Error: function expected before `()`, not `max` of type `long`\n/tmp/tmpwrnrarsn.d(22): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwrnrarsn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max = 0;\n\tlong[] dp = new long[arr.length];\n\tdp[0] = arr[0];\n\tforeach(i; 1 .. arr.length)\n\t{\n\t\tdp[i] = arr[i];\n\t\tforeach(j; 0 .. i)\n\t\t{\n\t\t\tif(arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tdp[i] = max(dp[i], dp[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax = max(max, dp[i]);\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "/tmp/tmpjjid3fd6.d(19): Error: function expected before `()`, not `max` of type `long`\n/tmp/tmpjjid3fd6.d(22): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjjid3fd6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 1;\n\tlong product = 1;\n\tlong[] max_arr = new long[arr.length];\n\tmax_arr[0] = arr[0];\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tif (arr[i] > max_arr[i - 1]) \n\t\t{\n\t\t\tmax_arr[i] = arr[i];\n\t\t} \n\t\telse \n\t\t{\n\t\t\tmax_arr[i] = max_arr[i - 1];\n\t\t}\n\t}\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\tproduct *= max_arr[i];\n\t\tif (product > max_product) \n\t\t{\n\t\t\tmax_product = product;\n\t\t}\n\t}\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpf7f7fuio.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x4282b5]\n??:? void tmpf7f7fuio.__unittest_L34_C1() [0x427f45]\n??:? void tmpf7f7fuio.__modtest() [0x428034]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c36f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b202]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43048d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43093c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430419]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1d9]\n??:? runModuleUnitTests [0x42c145]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428778]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n    long max = 0;\n    long[] dp = new long[arr.length];\n    dp[0] = arr[0];\n    for (int i = 1; i < arr.length; i++) \n    {\n        dp[i] = arr[i];\n        for (int j = 0; j < i; j++) \n        {\n            if (arr[i] > arr[j]) \n            {\n                dp[i] = max(dp[i], dp[j] * arr[i]);\n            }\n        }\n        max = max(max, dp[i]);\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "/tmp/tmpjk9vwqsb.d(19): Error: function expected before `()`, not `max` of type `long`\n/tmp/tmpjk9vwqsb.d(22): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjk9vwqsb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_prod = 0;\n\tlong[] max_prod_arr = new long[arr.length];\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\tmax_prod_arr[i] = arr[i];\n\t}\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tmax_prod_arr[i] = max(max_prod_arr[i], max_prod_arr[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t}\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\tmax_prod = max(max_prod, max_prod_arr[i]);\n\t}\n\treturn max_prod;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "/tmp/tmpwonmzv_9.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmpwonmzv_9.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwonmzv_9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong[] max_product = new long[arr.length];\n\tmax_product[0] = arr[0];\n\tlong max = max_product[0];\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tmax_product[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tmax_product[i] = max(max_product[i], max_product[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax = max(max, max_product[i]);\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122555,
      "stdout": "",
      "stderr": "/tmp/tmpnv7z3f6e.d(19): Error: function expected before `()`, not `max` of type `long`\n/tmp/tmpnv7z3f6e.d(22): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnv7z3f6e.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 0;\n\tlong[] products = new long[arr.length];\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\tproducts[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tproducts[i] = max(products[i], products[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax_product = max(max_product, products[i]);\n\t}\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "/tmp/tmp3zkgqkmf.d(18): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmp3zkgqkmf.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3zkgqkmf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong[] max_prod = new long[arr.length];\n\tlong[] min_prod = new long[arr.length];\n\tlong max_prod_so_far = arr[0];\n\tmax_prod[0] = arr[0];\n\tmin_prod[0] = arr[0];\n\tfor(int i = 1; i < arr.length; i++)\n\t{\n\t\tmax_prod[i] = max(max(max_prod[i-1] * arr[i], min_prod[i-1] * arr[i]), arr[i]);\n\t\tmin_prod[i] = min(min(max_prod[i-1] * arr[i], min_prod[i-1] * arr[i]), arr[i]);\n\t\tmax_prod_so_far = max(max_prod_so_far, max_prod[i]);\n\t}\n\treturn max_prod_so_far;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "/tmp/tmp5qp9a_v9.d(16): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmp5qp9a_v9.d(17): Error: undefined identifier `min`, did you mean function `main`?\n/tmp/tmp5qp9a_v9.d(18): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5qp9a_v9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 1;\n\tlong current_product = 1;\n\tlong last_number = 0;\n\tlong current_number = 0;\n\t\n\tforeach(number; arr)\n\t{\n\t\tcurrent_number = number;\n\t\tif(current_number > last_number)\n\t\t{\n\t\t\tcurrent_product *= current_number;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tmax_product = max(max_product, current_product);\n\t\t\tcurrent_product = current_number;\n\t\t}\n\t\tlast_number = current_number;\n\t}\n\t\n\treturn max(max_product, current_product);\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "/tmp/tmpvszu39wg.d(23): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmpvszu39wg.d(29): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvszu39wg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong[] max_product = new long[arr.length];\n\tlong[] max_product_index = new long[arr.length];\n\tlong max_product_value = 0;\n\tlong max_product_index_value = 0;\n\t\n\tmax_product[0] = arr[0];\n\tmax_product_index[0] = 0;\n\t\n\tfor(int i = 1; i < arr.length; i++)\n\t{\n\t\tmax_product[i] = arr[i];\n\t\tmax_product_index[i] = i;\n\t\t\n\t\tfor(int j = 0; j < i; j++)\n\t\t{\n\t\t\tif(arr[i] > arr[j] && max_product[i] < max_product[j] * arr[i])\n\t\t\t{\n\t\t\t\tmax_product[i] = max_product[j] * arr[i];\n\t\t\t\tmax_product_index[i] = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(max_product_value < max_product[i])\n\t\t{\n\t\t\tmax_product_value = max_product[i];\n\t\t\tmax_product_index_value = i;\n\t\t}\n\t}\n\t\n\treturn max_product_value;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpufk4cpyd.d(44): unittest failure\n----------------\n??:? _d_unittestp [0x428445]\n??:? void tmpufk4cpyd.__unittest_L40_C1() [0x4280d5]\n??:? void tmpufk4cpyd.__modtest() [0x4281c4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4ff]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b392]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43061d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430acc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4305a9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b369]\n??:? runModuleUnitTests [0x42c2d5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428908]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong[] max_product = new long[arr.length];\n\tmax_product[0] = arr[0];\n\tfor (int i = 1; i < arr.length; i++)\n\t{\n\t\tmax_product[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++)\n\t\t{\n\t\t\tif (arr[i] > arr[j] && max_product[i] < max_product[j] * arr[i])\n\t\t\t{\n\t\t\t\tmax_product[i] = max_product[j] * arr[i];\n\t\t\t}\n\t\t}\n\t}\n\treturn max_product[arr.length - 1];\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpgmbr_9mj.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428345]\n??:? void tmpgmbr_9mj.__unittest_L24_C1() [0x427fd5]\n??:? void tmpgmbr_9mj.__modtest() [0x4280c4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3ff]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b292]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43051d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4309cc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4304a9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b269]\n??:? runModuleUnitTests [0x42c1d5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428808]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max = 0;\n\tlong product = 1;\n\tlong[] dp = new long[arr.length];\n\t\n\tfor (int i = 0; i < arr.length; i++)\n\t{\n\t\tdp[i] = 1;\n\t\tfor (int j = 0; j < i; j++)\n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tdp[i] = max(dp[i], dp[j] + 1);\n\t\t\t}\n\t\t}\n\t\t\n\t\tproduct = 1;\n\t\tfor (int j = 0; j < i; j++)\n\t\t{\n\t\t\tif (arr[i] > arr[j] && dp[j] == dp[i] - 1)\n\t\t\t{\n\t\t\t\tproduct *= arr[j];\n\t\t\t}\n\t\t}\n\t\t\n\t\tmax = max(max, product * arr[i]);\n\t}\n\t\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "/tmp/tmph2d_34na.d(20): Error: function expected before `()`, not `max` of type `long`\n/tmp/tmph2d_34na.d(33): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph2d_34na.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong[] max_product_arr = new long[arr.length];\n\tmax_product_arr[0] = arr[0];\n\tlong max_product = arr[0];\n\tfor(int i = 1; i < arr.length; i++)\n\t{\n\t\tlong max_product_so_far = arr[i];\n\t\tfor(int j = 0; j < i; j++)\n\t\t{\n\t\t\tif(arr[j] < arr[i])\n\t\t\t{\n\t\t\t\tmax_product_so_far = max(max_product_so_far, max_product_arr[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax_product_arr[i] = max_product_so_far;\n\t\tmax_product = max(max_product, max_product_so_far);\n\t}\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "/tmp/tmp36f7k5ov.d(19): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmp36f7k5ov.d(23): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp36f7k5ov.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 0;\n\tlong[] max_product_arr = new long[arr.length];\n\t\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tmax_product_arr[i] = arr[i];\n\t\tforeach(j; 0 .. i)\n\t\t{\n\t\t\tif(arr[j] < arr[i])\n\t\t\t{\n\t\t\t\tmax_product_arr[i] = max(max_product_arr[i], max_product_arr[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax_product = max(max_product, max_product_arr[i]);\n\t}\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "/tmp/tmpqf_fxlxa.d(19): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmpqf_fxlxa.d(22): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqf_fxlxa.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong[] max_product = new long[arr.length];\n\tlong[] max_product_index = new long[arr.length];\n\tlong[] max_product_index_reverse = new long[arr.length];\n\tlong max_product_value = 0;\n\tlong max_product_index_value = 0;\n\tlong max_product_index_reverse_value = 0;\n\t\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\tmax_product[i] = arr[i];\n\t\tmax_product_index[i] = i;\n\t\tmax_product_index_reverse[i] = i;\n\t}\n\t\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tif (max_product[i] < max_product[j] * arr[i]) \n\t\t\t\t{\n\t\t\t\t\tmax_product[i] = max_product[j] * arr[i];\n\t\t\t\t\tmax_product_index[i] = j;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor (int i = arr.length - 2; i >= 0; i--) \n\t{\n\t\tfor (int j = arr.length - 1; j > i; j--) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tif (max_product[i] < max_product[j] * arr[i]) \n\t\t\t\t{\n\t\t\t\t\tmax_product[i] = max_product[j] * arr[i];\n\t\t\t\t\tmax_product_index_reverse[i] = j;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\tif (\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "/tmp/tmp7r3pege4.d(56): Error: expression expected, not `unittest`\n/tmp/tmp7r3pege4.d(57): Error: found `{` when expecting `)`\n/tmp/tmp7r3pege4.d(64): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7r3pege4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = arr[0];\n\tlong[] max_product_ending_here = new long[arr.length];\n\tmax_product_ending_here[0] = arr[0];\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tmax_product_ending_here[i] = max(max_product_ending_here[i - 1] * arr[i], arr[i]);\n\t\tmax_product = max(max_product, max_product_ending_here[i]);\n\t}\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "/tmp/tmp1jfyhbbb.d(14): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmp1jfyhbbb.d(15): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1jfyhbbb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max_product = 1;\n\tlong[] max_product_arr = new long[arr.length];\n\t\n\tmax_product_arr[0] = arr[0];\n\t\n\tfor(int i = 1; i < arr.length; i++)\n\t{\n\t\tmax_product_arr[i] = arr[i];\n\t\t\n\t\tfor(int j = 0; j < i; j++)\n\t\t{\n\t\t\tif(arr[i] > arr[j] && max_product_arr[i] < max_product_arr[j] * arr[i])\n\t\t\t{\n\t\t\t\tmax_product_arr[i] = max_product_arr[j] * arr[i];\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor(int i = 0; i < arr.length; i++)\n\t{\n\t\tif(max_product < max_product_arr[i])\n\t\t{\n\t\t\tmax_product = max_product_arr[i];\n\t\t}\n\t}\n\t\n\treturn max_product;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpldomvuyz.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x42839d]\n??:? void tmpldomvuyz.__unittest_L37_C1() [0x42802d]\n??:? void tmpldomvuyz.__modtest() [0x42811c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c457]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2ea]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430575]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a24]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430501]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2c1]\n??:? runModuleUnitTests [0x42c22d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428860]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max = 0;\n\tlong product = 1;\n\tforeach(i; arr)\n\t{\n\t\tproduct *= i;\n\t\tmax = max(max, product);\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "/tmp/tmpd96wsb7b.d(14): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd96wsb7b.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max = 0;\n\tlong[] dp = new long[arr.length];\n\tdp[0] = arr[0];\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tdp[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tdp[i] = max(dp[i], dp[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax = max(max, dp[i]);\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "/tmp/tmpa2xrlfck.d(19): Error: function expected before `()`, not `max` of type `long`\n/tmp/tmpa2xrlfck.d(22): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa2xrlfck.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n{\n\tlong max = 0;\n\tlong[] dp = new long[arr.length];\n\tdp[0] = arr[0];\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tdp[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tdp[i] = max(dp[i], dp[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax = max(max, dp[i]);\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
      "timestamp": 1665517131,
      "stdout": "",
      "stderr": "/tmp/tmpa2xrlfck.d(19): Error: function expected before `()`, not `max` of type `long`\n/tmp/tmpa2xrlfck.d(22): Error: function expected before `()`, not `max` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa2xrlfck.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}