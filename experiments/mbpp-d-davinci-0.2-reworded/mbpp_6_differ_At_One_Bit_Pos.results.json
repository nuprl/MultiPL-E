{
  "name": "mbpp_6_differ_At_One_Bit_Pos",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_6_differ_At_One_Bit_Pos.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong xor = a ^ b;\n\treturn (xor & (xor - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong x = a ^ b;\n\treturn (x & (x - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn ((c & (c - 1)) == 0);\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong x = a ^ b;\n\treturn (x & (x - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong x = a ^ b;\n\treturn (x & (x - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong x = a ^ b;\n\treturn (x & (x - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong x = a ^ b;\n\treturn (x & (x - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong x = a ^ b;\n\treturn (x & (x - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong x = a ^ b;\n\treturn (x & (x - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn c != 0 && (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn ((c & (c - 1)) == 0);\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong x = a ^ b;\n\treturn (x & (x - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn c != 0 && (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong x = a ^ b;\n\treturn (x & (x - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn c != 0 && (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{ \n    long c = a ^ b; \n    return ((c & (c - 1)) == 0); \n} \nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1666123454,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong x = a ^ b;\n\treturn (x & (x - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong x = a ^ b;\n\treturn (x & (x-1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1666123454,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong x = a ^ b;\n\treturn x && !(x & (x - 1));\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1666123454,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong x = a ^ b;\n\treturn (x & (x - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn ((c & (c - 1)) == 0);\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong x = a ^ b;\n\treturn (x & (x - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn ((c & (c - 1)) == 0);\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong x = a ^ b;\n\treturn x && !(x & (x - 1));\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1666123454,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong x = a ^ b;\n\treturn (x & (x - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tint count = 0;\n\tfor (int i = 0; i < 64; i++) \n\t{\n\t\tif ((a & 1) != (b & 1)) \n\t\t{\n\t\t\tcount++;\n\t\t}\n\t\ta >>= 1;\n\t\tb >>= 1;\n\t}\n\treturn count == 1;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1666123455,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c != 0) && ((c & (c - 1)) == 0);\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1666123454,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong x = a ^ b;\n\treturn (x & (x - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong x = a ^ b;\n\treturn (x & (x - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n    long c = a ^ b;\n    return (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1666123454,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong x = a ^ b;\n\treturn (x & (x - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong x = a ^ b;\n\treturn (x & (x - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong x = a ^ b;\n\treturn (x & (x - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong x = a ^ b;\n\treturn (x & (x - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong x = a ^ b;\n\treturn (x & (x - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn c != 0 && (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn c != 0 && (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong x = a ^ b;\n\treturn (x & (x - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong x = a ^ b;\n\treturn (x & (x - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong x = a ^ b;\n\treturn (x & (x - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong x = a ^ b;\n\treturn (x & (x - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong x = a ^ b;\n\treturn (x & (x - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong x = a ^ b;\n\treturn (x & (x - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn c != 0 && (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong xor = a ^ b;\n\treturn (xor & (xor - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong x = a ^ b;\n\treturn (x & (x - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong x = a ^ b;\n\treturn (x & (x - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong x = a ^ b;\n\treturn (x & (x - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong x = a ^ b;\n\treturn (x & (x - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong x = a ^ b;\n\treturn (x & (x - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong x = a ^ b;\n\treturn (x & (x - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong x = a ^ b;\n\treturn (x & (x - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong x = a ^ b;\n\treturn (x & (x - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong x = a ^ b;\n\treturn (x & (x - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong x = a ^ b;\n\treturn (x & (x - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong x = a ^ b;\n\treturn (x & (x - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong x = a ^ b;\n\treturn (x & (x - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong x = a ^ b;\n\treturn (x & (x - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong x = a ^ b;\n\treturn (x & (x - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{ \n\tlong c = a ^ b; \n\treturn (c & (c - 1)) == 0; \n} \nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1666123454,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong x = a ^ b;\n\treturn (x & (x - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong x = a ^ b;\n\treturn (x & (x - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong x = a ^ b;\n\treturn (x & (x - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong x = a ^ b;\n\treturn (x & (x - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong x = a ^ b;\n\treturn (x & (x - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong x = a ^ b;\n\treturn (x & (x - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn ((c != 0) && ((c & (c - 1)) == 0));\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1666123454,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong x = a ^ b;\n\treturn (x & (x - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong x = a ^ b;\n\treturn (x & (x - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong x = a ^ b;\n\treturn (x & (x - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong x = a ^ b;\n\treturn (x & (x - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn c != 0 && (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong x = a ^ b;\n\treturn (x & (x - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong x = a ^ b;\n\treturn (x & (x - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong x = a ^ b;\n\treturn (x & (x - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong x = a ^ b;\n\treturn (x & (x - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong x = a ^ b;\n\treturn (x & (x - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong x = a ^ b;\n\treturn (x & (x - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong x = a ^ b;\n\treturn (x & (x - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong x = a ^ b;\n\treturn (x & (x - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong x = a ^ b;\n\treturn (x & (x - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong x = a ^ b;\n\treturn (x & (x - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong x = a ^ b;\n\treturn (x & (x - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c != 0) && ((c & (c - 1)) == 0);\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1666123454,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong x = a ^ b;\n\treturn (x & (x - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong x = a ^ b;\n\treturn (x & (x - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n\t\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n{\n\tlong c = a ^ b;\n\treturn (c & (c - 1)) == 0;\n}\nunittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}