{
  "name": "mbpp_119_search",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n\t\n*/\nlong search(long[] arr) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_119_search.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\t\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid == 0 || arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) \n\t\t{\n\t\t\treturn arr[mid];\n\t\t}\n\t\tif (arr[mid] == arr[mid - 1]) \n\t\t{\n\t\t\tif ((mid - 1) % 2 == 0) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (mid % 2 == 0) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn -1;\n}",
    "{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong mid = 0;\n\twhile (low < high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[low];\n}",
    "{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[mid];\n}",
    "{ \n    long low = 0; \n    long high = arr.length - 1; \n    long mid = 0; \n    while (low <= high) \n    { \n        mid = (low + high) / 2; \n        if (mid % 2 == 0) \n        { \n            if (arr[mid] == arr[mid + 1]) \n                low = mid + 2; \n            else\n                high = mid; \n        } \n        else\n        { \n            if (arr[mid] == arr[mid - 1]) \n                low = mid + 1; \n            else\n                high = mid - 1; \n        } \n    } \n    return arr[mid]; \n} ",
    "{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong mid = 0;\n\twhile (low <= high)\n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid % 2 == 0)\n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1])\n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1])\n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[mid];\n}",
    "{ \n    long n = arr.length; \n    long low = 0, high = n - 1; \n    long mid = 0; \n  \n    // Iterate till single element is left \n    while (low != high) { \n        // Find the mid element \n        mid = (low + high) / 2; \n  \n        // If mid is even and element next to mid is \n        // same as mid, then output element lies on \n        // right side, else on left side \n        if (mid % 2 == 0) { \n            if (arr[mid] == arr[mid + 1]) \n                low = mid + 2; \n            else\n                high = mid; \n        } \n  \n        // If mid is odd \n        else if (mid % 2 == 1) { \n            if (arr[mid] == arr[mid - 1]) \n                low = mid + 1; \n            else\n                high = mid - 1; \n        } \n    } \n  \n    return arr[low]; \n} ",
    "{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[low];\n}",
    "{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[mid];\n}",
    "{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (mid + 1 < n && arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse if (mid - 1 >= 0 && arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\thigh = mid - 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\treturn arr[mid];\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (mid - 1 >= 0 && arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse if (mid + 1 < n && arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\treturn arr[mid];\n\t\t\t}\n\t\t}\n\t}\n\treturn -1;\n}",
    "{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[low];\n}",
    "{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\twhile (low < high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t}\n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[low];\n}",
    "{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[mid];\n}",
    "{ \n\tlong n = arr.length; \n\tlong low = 0; \n\tlong high = n - 1; \n\tlong mid = 0; \n\twhile (low <= high) \n\t{ \n\t\tmid = (low + high) / 2; \n\t\tif (mid % 2 == 0) \n\t\t{ \n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t\tlow = mid + 2; \n\t\t\telse\n\t\t\t\thigh = mid; \n\t\t} \n\t\telse\n\t\t{ \n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t\tlow = mid + 1; \n\t\t\telse\n\t\t\t\thigh = mid - 1; \n\t\t} \n\t} \n\treturn arr[low]; \n} ",
    "{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n-1;\n\tlong mid = 0;\n\twhile(low <= high)\n\t{\n\t\tmid = (low+high)/2;\n\t\tif(mid == 0 || mid == n-1)\n\t\t\treturn arr[mid];\n\t\tif(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1])\n\t\t\treturn arr[mid];\n\t\telse if(arr[mid] == arr[mid-1] && mid%2 == 0)\n\t\t\tlow = mid+1;\n\t\telse if(arr[mid] == arr[mid+1] && mid%2 == 1)\n\t\t\tlow = mid+1;\n\t\telse\n\t\t\thigh = mid-1;\n\t}\n\treturn -1;\n}",
    "{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\t\n\twhile (low <= high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\t\n\t\tif (mid == 0 || arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) \n\t\t{\n\t\t\treturn arr[mid];\n\t\t}\n\t\t\n\t\tif (arr[mid] == arr[mid - 1]) \n\t\t{\n\t\t\tif ((mid - 1) % 2 == 0) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t\telse \n\t\t{\n\t\t\tif (mid % 2 == 0) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn -1;\n}",
    "{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[mid];\n}",
    "{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile(low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif(mid % 2 == 0) \n\t\t{\n\t\t\tif(arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 2;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t}\n\t\telse \n\t\t{\n\t\t\tif(arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[low];\n}",
    "{ \n    long low = 0; \n    long high = arr.length - 1; \n    long mid = 0; \n    while (low <= high) { \n        mid = (low + high) / 2; \n        if (mid % 2 == 0) { \n            if (arr[mid] == arr[mid + 1]) \n                low = mid + 2; \n            else if (arr[mid] == arr[mid - 1]) \n                high = mid - 2; \n            else\n                return arr[mid]; \n        } else { \n            if (arr[mid] == arr[mid - 1]) \n                low = mid + 1; \n            else if (arr[mid] == arr[mid + 1]) \n                high = mid - 1; \n        } \n    } \n    return arr[mid]; \n} ",
    "{\n\tlong l = 0;\n\tlong r = arr.length - 1;\n\tlong mid = 0;\n\twhile (l <= r) \n\t{\n\t\tmid = (l + r) / 2;\n\t\tif (mid % 2 == 0) \n\t\t{\n\t\t\tif (arr[mid] == arr[mid + 1]) \n\t\t\t{\n\t\t\t\tl = mid + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tr = mid;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (arr[mid] == arr[mid - 1]) \n\t\t\t{\n\t\t\t\tl = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tr = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[l];\n}",
    "{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (mid == 0 || arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) \n\t\t{\n\t\t\treturn arr[mid];\n\t\t}\n\t\tif (arr[mid] == arr[mid - 1]) \n\t\t{\n\t\t\tif ((mid - 1) % 2 == 0) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (mid % 2 == 0) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn -1;\n}"
  ]
}