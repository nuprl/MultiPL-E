{
  "name": "mbpp_479_first_Digit",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the first digit of a given number.\n\t\n*/\nlong first_Digit(long n) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_479_first_Digit.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = first_Digit;\n\n    assert(candidate(123L) == 1L);\n    assert(candidate(456L) == 4L);\n    assert(candidate(12L) == 1L);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tif (n < 0)\n\t\tn = -n;\n\twhile (n >= 10)\n\t\tn /= 10;\n\treturn n;\n}",
    "{\n\tif (n < 0)\n\t\tn = -n;\n\twhile (n >= 10)\n\t\tn /= 10;\n\treturn n;\n}",
    "{ \n    // Remove last digit from number \n    // till only one digit is left \n    while (n >= 10)  \n        n /= 10; \n  \n    // return the first digit \n    return n; \n} ",
    "{\n\tif (n < 0)\n\t\tn = -n;\n\twhile (n >= 10)\n\t\tn /= 10;\n\treturn n;\n}\n/*\n\tWrite a dthon function to find the last digit of a given number.\n*/\nlong last_Digit(long n) \n{\n\treturn abs(n % 10);\n}\n/*\n\tWrite a dthon function to find the sum of all digits of a given number.\n*/\nlong sum_Digits(long n) \n{\n\tlong sum = 0;\n\twhile (n != 0) \n\t{\n\t\tsum += n % 10;\n\t\tn /= 10;\n\t}\n\treturn sum;\n}\n/*\n\tWrite a dthon function to find the sum of all digits of a given number.\n*/\nlong sum_Digits(long n) \n{\n\tlong sum = 0;\n\twhile (n != 0) \n\t{\n\t\tsum += n % 10;\n\t\tn /= 10;\n\t}\n\treturn sum;\n}\n/*\n\tWrite a dthon function to find the sum of all digits of a given number.\n*/\nlong sum_Digits(long n) \n{\n\tlong sum = 0;\n\twhile (n != 0) \n\t{\n\t\tsum += n % 10;\n\t\tn /= 10;\n\t}\n\treturn sum;\n}\n/*\n\tWrite a dthon function to find the sum of all digits of a given number.\n*/\nlong sum_Digits(long n) \n{\n\tlong sum = 0;\n\twhile (n != 0) \n\t{\n\t\tsum += n % 10;\n\t\tn /= 10;\n\t}\n\treturn sum;\n}\n/*\n\tWrite a dthon function to find the sum of all digits of a given number.\n*/\nlong sum_Digits(long n) \n{\n\tlong sum = 0;\n\twhile (n != 0) \n\t{\n\t\tsum += n % 10;\n\t\tn /= 10;\n\t}\n\treturn sum;\n}\n/*\n\tWrite a dthon function",
    "{\n\tif (n < 0)\n\t\tn = -n;\n\twhile (n >= 10)\n\t\tn /= 10;\n\treturn n;\n}",
    "{\n\tif (n < 0)\n\t\tn = -n;\n\twhile (n >= 10)\n\t\tn /= 10;\n\treturn n;\n}",
    "{\n\treturn n.abs.to!string[0].to!long;\n}",
    "{ \n    // Remove last digit from number \n    // till only one digit is left \n    while (n >= 10)  \n        n /= 10; \n  \n    // return the first digit \n    return n; \n} ",
    "{\n\treturn n < 0 ? first_Digit(-n) : n < 10 ? n : first_Digit(n / 10);\n}",
    "{ \n    // Remove last digit from number \n    // till only one digit is left \n    while (n >= 10)  \n        n /= 10; \n  \n    // return the first digit \n    return n; \n} ",
    "{\n\treturn n < 0 ? first_Digit(-n) : n < 10 ? n : first_Digit(n / 10);\n}",
    "{ \n    // Remove last digit from number \n    // till only one digit is left \n    while (n >= 10)  \n        n /= 10; \n  \n    // return the first digit \n    return n; \n} ",
    "{ \n    // Remove last digit from number \n    // till only one digit is left \n    while (n >= 10)  \n        n /= 10; \n  \n    // return the first digit \n    return n; \n} ",
    "{ \n    // Remove last digit from number \n    // till only one digit is left \n    while (n >= 10)  \n        n /= 10; \n  \n    // return the first digit \n    return n; \n} ",
    "{ \n    while (n >= 10)  \n        n /= 10; \n    return n; \n} ",
    "{\n\tif (n < 0)\n\t\tn = -n;\n\twhile (n >= 10)\n\t\tn /= 10;\n\treturn n;\n}",
    "{ \n    // Remove last digit from number \n    // till only one digit is left \n    while (n >= 10)  \n        n /= 10; \n  \n    // return the first digit \n    return n; \n} ",
    "{ \n    // Remove last digit from number \n    // till only one digit is left \n    while (n >= 10)  \n        n /= 10; \n  \n    // return the first digit \n    return n; \n} ",
    "{ \n    while (n >= 10)  \n        n /= 10; \n    return n; \n} ",
    "{\n\tif (n < 0)\n\t\tn *= -1;\n\twhile (n >= 10) \n\t{\n\t\tn /= 10;\n\t}\n\treturn n;\n}"
  ]
}