{
  "name": "mbpp_622_get_median",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the median of two sorted arrays of same size.\n\t\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_622_get_median.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{ \n\tlong i = 0; \n\tlong j = 0; \n\tlong count; \n\tlong m1 = -1, m2 = -1; ",
    "{ \n\tif (n <= 0) \n\t\treturn -1; \n\tif (n == 1) \n\t\treturn (arr1[0] + arr2[0]) / 2.0; \n\tif (n == 2) \n\t\treturn (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2.0; ",
    "{ \n\tlong i = 0; \n\tlong j = 0; \n\tlong count; \n\tlong m1 = -1, m2 = -1; \n\t\n\tfor (count = 0; count <= n; count++) \n\t{ \n\t\tif (i == n) \n\t\t{ \n\t\t\tm1 = m2; \n\t\t\tm2 = arr2[0]; \n\t\t\tbreak; \n\t\t} \n\t\telse if (j == n) \n\t\t{ \n\t\t\tm1 = m2; \n\t\t\tm2 = arr1[0]; \n\t\t\tbreak; \n\t\t} \n\t\tif (arr1[i] < arr2[j]) \n\t\t{ \n\t\t\tm1 = m2;  \n\t\t\tm2 = arr1[i]; \n\t\t\ti++; \n\t\t} \n\t\telse\n\t\t{ \n\t\t\tm1 = m2;  \n\t\t\tm2 = arr2[j]; \n\t\t\tj++; \n\t\t} \n\t} \n\t\n\treturn (m1 + m2)/2.0; \n} ",
    "{ \n\tlong[] arr3 = new long[n * 2];\n\tlong i = 0, j = 0, k = 0;\n\twhile (i < n && j < n) \n\t{ \n\t\tif (arr1[i] < arr2[j]) \n\t\t\tarr3[k++] = arr1[i++]; \n\t\telse\n\t\t\tarr3[k++] = arr2[j++]; \n\t} \n\twhile (i < n) \n\t\tarr3[k++] = arr1[i++]; \n\twhile (j < n) \n\t\tarr3[k++] = arr2[j++]; \n\treturn arr3[n - 1]; \n} ",
    "{ \n\tlong i = 0; \n\tlong j = 0; \n\tlong count; \n\tlong m1 = -1, m2 = -1; \n\t\n\tfor (count = 0; count <= n; count++) \n\t{ \n\t\tif (i == n) \n\t\t{ \n\t\t\tm1 = m2; \n\t\t\tm2 = arr2[0]; \n\t\t\tbreak; \n\t\t} \n\t\telse if (j == n) \n\t\t{ \n\t\t\tm1 = m2; \n\t\t\tm2 = arr1[0]; \n\t\t\tbreak; \n\t\t} \n\t\tif (arr1[i] < arr2[j]) \n\t\t{ \n\t\t\tm1 = m2; \n\t\t\tm2 = arr1[i]; \n\t\t\ti++; \n\t\t} \n\t\telse\n\t\t{ \n\t\t\tm1 = m2; \n\t\t\tm2 = arr2[j]; \n\t\t\tj++; \n\t\t} \n\t} \n\t\n\treturn (m1 + m2)/2.0; \n} ",
    "{ \n    long i = 0; \n    long j = 0; \n    long count; \n    long m1 = -1, m2 = -1; \n  \n    /* Since there are 2n elements, median will  \n    be average of elements at index n-1 and n in  \n    the array obtained after merging arr1 and arr2 */\n    for (count = 0; count <= n; count++) \n    { \n        /*Below is to handle case where all elements  \n        of ar1[] are smaller than smallest(or first)  \n        element of ar2[]*/\n        if (i == n) \n        { \n            m1 = m2; \n            m2 = arr2[0]; \n            break; \n        } \n  \n        /*Below is to handle case where all elements  \n        of ar2[] are smaller than smallest(or first)  \n        element of ar1[]*/\n        else if (j == n) \n        { \n            m1 = m2; \n            m2 = arr1[0]; \n            break; \n        } \n  \n        if (arr1[i] < arr2[j]) \n        { \n            /* Store the prev median */\n            m1 = m2;  \n            m2 = arr1[i]; \n            i++; \n        } \n        else\n        { \n            /* Store the prev median */\n            m1 = m2;   \n            m2 = arr2[j]; \n            j++; \n        } \n    } \n  \n    return (m1 + m2)/2.0; \n} ",
    "{ \n\tlong i = 0; \n\tlong j = 0; \n\tlong count; \n\tlong m1 = -1, m2 = -1; ",
    "{ \n    long i = 0; \n    long j = 0; \n    long count; \n    long m1 = -1, m2 = -1; \n  \n    /* Since there are 2n elements, median will  \n    be average of elements at index n-1 and  \n    n in the array obtained after merging arr1  \n    and arr2 */\n    for (count = 0; count <= n; count++) \n    { \n        /*Below is to handle case where all  \n        elements of ar1[] are smaller than  \n        smallest(or first) element of ar2[]*/\n        if (i == n) \n        { \n            m1 = m2; \n            m2 = arr2[0]; \n            break; \n        } \n  \n        /*Below is to handle case where all  \n        elements of ar2[] are smaller than  \n        smallest(or first) element of ar1[]*/\n        else if (j == n) \n        { \n            m1 = m2; \n            m2 = arr1[0]; \n            break; \n        } \n  \n        if (arr1[i] < arr2[j]) \n        { \n            /* Store the prev median */\n            m1 = m2;  \n            m2 = arr1[i]; \n            i++; \n        } \n        else\n        { \n            /* Store the prev median */\n            m1 = m2;  \n            m2 = arr2[j]; \n            j++; \n        } \n    } \n  \n    return (m1 + m2)/2.0; \n} ",
    "{ \n\tif (n <= 0) \n\t\treturn -1; \n\tif (n == 1) \n\t\treturn (arr1[0] + arr2[0]) / 2.0; \n\tif (n == 2) \n\t\treturn (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2.0; ",
    "{\n\tlong i = 0;\n\tlong j = 0;\n\tlong m1 = -1;\n\tlong m2 = -1;\n\t\n\tfor (long count = 0; count <= n; count++) \n\t{\n\t\tif (i == n) \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr2[0];\n\t\t\tbreak;\n\t\t}\n\t\telse if (j == n) \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr1[0];\n\t\t\tbreak;\n\t\t}\n\t\t\n\t\tif (arr1[i] < arr2[j]) \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr1[i];\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr2[j];\n\t\t\tj++;\n\t\t}\n\t}\n\t\n\treturn (m1 + m2) / 2.0;\n}",
    "{\n\tlong i = 0;\n\tlong j = 0;\n\tlong count;\n\tlong m1 = -1;\n\tlong m2 = -1;\n\t\n\tfor (count = 0; count <= n; count++) \n\t{\n\t\tif (i == n) \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr2[0];\n\t\t\tbreak;\n\t\t}\n\t\telse if (j == n) \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr1[0];\n\t\t\tbreak;\n\t\t}\n\t\t\n\t\tif (arr1[i] < arr2[j]) \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr1[i];\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr2[j];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn (m1 + m2) / 2.0;\n}",
    "{ \n    long i = 0; \n    long j = 0; \n    long count; \n    long m1 = -1, m2 = -1; \n  \n    /* Since there are 2n elements, median will be average \n       of elements at index n-1 and n in the array obtained after \n       merging ar1 and ar2 */\n    for (count = 0; count <= n; count++) \n    { \n        /*Below is to handle case where all elements of ar1[] are \n          smaller than smallest(or first) element of ar2[]*/\n        if (i == n) \n        { \n            m1 = m2; \n            m2 = arr2[0]; \n            break; \n        } \n  \n        /*Below is to handle case where all elements of ar2[] are \n          smaller than smallest(or first) element of ar1[]*/\n        else if (j == n) \n        { \n            m1 = m2; \n            m2 = arr1[0]; \n            break; \n        } \n  \n        if (arr1[i] < arr2[j]) \n        { \n            /* Store the prev median */\n            m1 = m2;  \n            m2 = arr1[i]; \n            i++; \n        } \n        else\n        { \n            /* Store the prev median */\n            m1 = m2;   \n            m2 = arr2[j]; \n            j++; \n        } \n    } \n  \n    return (m1 + m2)/2.0; \n} ",
    "{\n\tlong i = 0;\n\tlong j = 0;\n\tlong count;\n\tlong m1 = -1;\n\tlong m2 = -1;\n\t\n\tfor(count = 0; count <= n; count++) \n\t{\n\t\tif(i == n) \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr2[0];\n\t\t\tbreak;\n\t\t}\n\t\telse if(j == n) \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr1[0];\n\t\t\tbreak;\n\t\t}\n\t\tif(arr1[i] < arr2[j]) \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr1[i];\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tm1 = m2;\n\t\t\tm2 = arr2[j];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn (m1 + m2) / 2.0;\n}",
    "{ \n\tlong i = 0; \n\tlong j = 0; \n\tlong count; \n\tlong m1 = -1, m2 = -1; ",
    "{ \n    long i = 0; \n    long j = 0; \n    long count; \n    long m1 = -1, m2 = -1; \n  \n    /* Since there are 2n elements, median will  \n    be average of elements at index n-1 and  \n    n in the array obtained after merging ar1  \n    and ar2 */\n    for (count = 0; count <= n; count++) \n    { \n        /*Below is to handle case where all  \n        elements of ar1[] are smaller than  \n        smallest(or first) element of ar2[]*/\n        if (i == n) \n        { \n            m1 = m2; \n            m2 = arr2[0]; \n            break; \n        } \n  \n        /*Below is to handle case where all  \n        elements of ar2[] are smaller than  \n        smallest(or first) element of ar1[]*/\n        else if (j == n) \n        { \n            m1 = m2; \n            m2 = arr1[0]; \n            break; \n        } \n  \n        if (arr1[i] < arr2[j]) \n        { \n            /* Store the prev median */\n            m1 = m2;  \n            m2 = arr1[i]; \n            i++; \n        } \n        else\n        { \n            /* Store the prev median */\n            m1 = m2;  \n            m2 = arr2[j]; \n            j++; \n        } \n    } \n  \n    return (m1 + m2)/2.0; \n} ",
    "{ \n\tif (n <= 0) \n\t\treturn -1; \n\tif (n == 1) \n\t\treturn (arr1[0] + arr2[0]) / 2.0; \n\tif (n == 2) \n\t\treturn (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2.0; ",
    "{ \n    long i = 0; \n    long j = 0; \n    long count; \n    long m1 = -1, m2 = -1; \n  \n    /* Since there are 2n elements, median will be average of elements at index n-1 and n in the array obtained after merging arr1 and arr2 */\n    for (count = 0; count <= n; count++) \n    { \n        /* Below is to handle case where all elements of ar1[] are smaller than smallest(or first) element of ar2[] */\n        if (i == n) \n        { \n            m1 = m2; \n            m2 = arr2[0]; \n            break; \n        } \n  \n        /* Below is to handle case where all elements of ar2[] are smaller than smallest(or first) element of ar1[] */\n        else if (j == n) \n        { \n            m1 = m2; \n            m2 = arr1[0]; \n            break; \n        } \n  \n        if (arr1[i] < arr2[j]) \n        { \n            /* Store the prev median */\n            m1 = m2;  \n            m2 = arr1[i]; \n            i++; \n        } \n        else\n        { \n            /* Store the prev median */\n            m1 = m2;   \n            m2 = arr2[j]; \n            j++; \n        } \n    } \n  \n    return (m1 + m2)/2; \n} ",
    "{ \n    long i = 0; \n    long j = 0; \n    long count; \n    long m1 = -1, m2 = -1; \n  \n    /* Since there are 2n elements, median will be average \n       of elements at index n-1 and n in the array obtained after \n       merging ar1 and ar2 */\n    for (count = 0; count <= n; count++) \n    { \n        /*Below is to handle case where all elements of ar1[] are \n          smaller than smallest(or first) element of ar2[]*/\n        if (i == n) \n        { \n            m1 = m2; \n            m2 = arr2[0]; \n            break; \n        } \n  \n        /*Below is to handle case where all elements of ar2[] are \n          smaller than smallest(or first) element of ar1[]*/\n        else if (j == n) \n        { \n            m1 = m2; \n            m2 = arr1[0]; \n            break; \n        } \n  \n        if (arr1[i] < arr2[j]) \n        { \n            /* Store the prev median */\n            m1 = m2;  \n            m2 = arr1[i]; \n            i++; \n        } \n        else\n        { \n            /* Store the prev median */\n            m1 = m2;   \n            m2 = arr2[j]; \n            j++; \n        } \n    } \n  \n    return (m1 + m2)/2; \n} ",
    "{ \n    long i = 0; \n    long j = 0; \n    long count; \n    long m1 = -1, m2 = -1; \n  \n    /* Since there are 2n elements, median will \n    be average of elements at index n-1 and \n    n in the array obtained after merging arr1 \n    and arr2 */\n    for (count = 0; count <= n; count++) \n    { \n        /*Below is to handle case where all \n        elements of ar1[] are smaller than \n        smallest(or first) element of ar2[]*/\n        if (i == n) \n        { \n            m1 = m2; \n            m2 = arr2[0]; \n            break; \n        } \n  \n        /*Below is to handle case where all \n        elements of ar2[] are smaller than \n        smallest(or first) element of ar1[]*/\n        else if (j == n) \n        { \n            m1 = m2; \n            m2 = arr1[0]; \n            break; \n        } \n  \n        if (arr1[i] < arr2[j]) \n        { \n            /* Store the prev median */\n            m1 = m2;  \n            m2 = arr1[i]; \n            i++; \n        } \n        else\n        { \n            /* Store the prev median */\n            m1 = m2;   \n            m2 = arr2[j]; \n            j++; \n        } \n    } \n  \n    return (m1 + m2)/2.0; \n} ",
    "{ \n\tlong i = 0; \n\tlong j = 0; \n\tlong count; \n\tlong m1 = -1, m2 = -1; \n\t\n\tfor (count = 0; count <= n; count++) \n\t{ \n\t\tif (i == n) \n\t\t{ \n\t\t\tm1 = m2; \n\t\t\tm2 = arr2[0]; \n\t\t\tbreak; \n\t\t} \n\t\telse if (j == n) \n\t\t{ \n\t\t\tm1 = m2; \n\t\t\tm2 = arr1[0]; \n\t\t\tbreak; \n\t\t} \n\t\tif (arr1[i] < arr2[j]) \n\t\t{ \n\t\t\tm1 = m2; \n\t\t\tm2 = arr1[i]; \n\t\t\ti++; \n\t\t} \n\t\telse\n\t\t{ \n\t\t\tm1 = m2; \n\t\t\tm2 = arr2[j]; \n\t\t\tj++; \n\t\t} \n\t} \n\t\n\treturn (m1 + m2)/2.0; \n} "
  ]
}