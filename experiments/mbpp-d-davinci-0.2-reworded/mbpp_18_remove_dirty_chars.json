{
  "name": "mbpp_18_remove_dirty_chars",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\n*/\nstring remove_dirty_chars(string string, string second_string) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_18_remove_dirty_chars.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(c; string)\n\t{\n\t\tif(second_string.canFind(c))\n\t\t\tcontinue;\n\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(char c; string) \n\t{\n\t\tif(second_string.find(c) == -1) \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(char c; string) \n\t{\n\t\tif(second_string.find(c) == -1) \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(char c; string) \n\t{\n\t\tif(second_string.find(c) == -1) \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\t\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tstring result;\n\tint[] chars = new int[256];\n\tforeach(char c; second_string)\n\t{\n\t\tchars[cast(int)c] = 1;\n\t}\n\tforeach(char c; string)\n\t{\n\t\tif(chars[cast(int)c] == 0)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(c; string) \n\t{\n\t\tif(second_string.find(c) == -1) \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(char c; string) \n\t{\n\t\tif(!second_string.canFind(c)) \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tint[] char_set = new int[256];\n\tint string_length = string.length;\n\tint second_string_length = second_string.length;\n\t\n\tfor (int i = 0; i < second_string_length; i++)\n\t{\n\t\tchar_set[second_string[i]] = 1;\n\t}\n\t\n\tfor (int i = 0; i < string_length; i++)\n\t{\n\t\tif (char_set[string[i]] == 0)\n\t\t{\n\t\t\tresult ~= string[i];\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tauto result = string.dup;\n\tforeach(char c; second_string)\n\t{\n\t\tresult = result.replace(c, \"\");\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\t\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t\tresult ~= c;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach (char c; string) \n\t{\n\t\tif (second_string.find(c) == -1) \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(char c; string) \n\t{\n\t\tif(second_string.find(c) == -1) \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(c; string)\n\t{\n\t\tif(second_string.find(c) == -1)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}"
  ]
}