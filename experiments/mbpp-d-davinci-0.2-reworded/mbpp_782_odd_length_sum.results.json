{
  "name": "mbpp_782_odd_length_sum",
  "language": "d",
  "prompt": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_782_odd_length_sum.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{\n\tlong sum = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tlong odd_length = 1;\n\t\tfor (long j = i; j < arr.length; j++) \n\t\t{\n\t\t\tsum += arr[j] * odd_length;\n\t\t\todd_length += 2;\n\t\t}\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpkw2cwc7t.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x4280f5]\n??:? void tmpkw2cwc7t.__unittest_L21_C1() [0x427dc4]\n??:? void tmpkw2cwc7t.__modtest() [0x427e78]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c153]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afe6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430179]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430628]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430105]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afbd]\n??:? runModuleUnitTests [0x42bf29]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285b8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{ \n    long sum = 0; \n    for (int i = 0; i < arr.length; i++) { \n        for (int j = i; j < arr.length; j++) { \n            int len = j - i + 1; \n            if (len % 2 != 0) \n                sum += sum_of_subarray(arr, i, j); \n        } \n    } \n    return sum; \n} \nlong sum_of_subarray(long[] arr, int start, int end) \n{ \n    long sum = 0; \n    for (int i = start; i <= end; i++) \n        sum += arr[i]; \n    return sum; \n} \nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{ \n    long sum = 0; \n    for (long i = 0; i < arr.length; i++) \n    { \n        long curr_sum = 0; \n        for (long j = i; j < arr.length; j++) \n        { \n            curr_sum += arr[j]; \n            if (((j - i) & 1) == 0) \n                sum += curr_sum; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{\n\tlong sum = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i; j < arr.length; j++) \n\t\t{\n\t\t\tif ((j - i + 1) % 2 != 0) \n\t\t\t{\n\t\t\t\tfor (long k = i; k <= j; k++) \n\t\t\t\t{\n\t\t\t\t\tsum += arr[k];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{\n\tlong sum = 0;\n\tfor (int i = 0; i < arr.length; i++) {\n\t\tfor (int j = i; j < arr.length; j++) {\n\t\t\tif ((j - i + 1) % 2 != 0) {\n\t\t\t\tfor (int k = i; k <= j; k++) {\n\t\t\t\t\tsum += arr[k];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{\n    long sum = 0;\n    for (int i = 0; i < arr.length; i++) \n    {\n        for (int j = i; j < arr.length; j++) \n        {\n            int len = j - i + 1;\n            if (len % 2 == 1) \n            {\n                for (int k = i; k <= j; k++) \n                {\n                    sum += arr[k];\n                }\n            }\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{ \n    long sum = 0; \n    for (long i = 0; i < arr.length; i++) { \n        long curr_sum = 0; \n        for (long j = i; j < arr.length; j++) { \n            curr_sum += arr[j]; \n            if (((j - i + 1) & 1) != 0) \n                sum += curr_sum; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{\n\tlong sum = 0;\n\tint n = arr.length;\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tfor (int j = i; j < n; j++) \n\t\t{\n\t\t\tif ((j - i + 1) % 2 != 0) \n\t\t\t{\n\t\t\t\tfor (int k = i; k <= j; k++) \n\t\t\t\t{\n\t\t\t\t\tsum += arr[k];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpfox5kvi5.d(10): Error: cannot implicitly convert expression `arr.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfox5kvi5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{ \n    long sum = 0; \n    for (int i = 0; i < arr.length; i++) { \n        for (int j = i; j < arr.length; j++) { \n            if ((j - i + 1) % 2 != 0) \n                sum += arr[j]; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpp4a0v8h8.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x4280fd]\n??:? void tmpp4a0v8h8.__unittest_L18_C1() [0x427dc8]\n??:? void tmpp4a0v8h8.__modtest() [0x427e7c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c15b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430181]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430630]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43010d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afc5]\n??:? runModuleUnitTests [0x42bf31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{ \n    long sum = 0; \n    for (int i = 0; i < arr.length; i++) \n    { \n        for (int j = i; j < arr.length; j++) \n        { \n            if ((j - i + 1) % 2 == 1) \n                sum += sum_of_subarray(arr, i, j); \n        } \n    } \n    return sum; \n} \nlong sum_of_subarray(long[] arr, int start, int end) \n{ \n    long sum = 0; \n    for (int i = start; i <= end; i++) \n        sum += arr[i]; \n    return sum; \n} \nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{\n\tlong sum = 0;\n\tint n = arr.length;\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tfor (int j = i; j < n; j++) \n\t\t{\n\t\t\tif ((j - i + 1) % 2 == 1) \n\t\t\t{\n\t\t\t\tfor (int k = i; k <= j; k++) \n\t\t\t\t{\n\t\t\t\t\tsum += arr[k];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmp9yyte4u1.d(10): Error: cannot implicitly convert expression `arr.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9yyte4u1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{\n\tlong sum = 0;\n\tlong n = arr.length;\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tfor (long j = i; j < n; j++) \n\t\t{\n\t\t\tlong len = j - i + 1;\n\t\t\tif (len % 2 == 1) \n\t\t\t{\n\t\t\t\tfor (long k = i; k <= j; k++) \n\t\t\t\t{\n\t\t\t\t\tsum += arr[k];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n    for (long i = 0; i < n; i++) { \n        for (long j = i; j < n; j++) { \n            long len = j - i + 1; \n            if (len % 2 != 0) \n                sum += (len * (len + 1)) / 2; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpl7of9v0y.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x4280f5]\n??:? void tmpl7of9v0y.__unittest_L20_C1() [0x427dc0]\n??:? void tmpl7of9v0y.__modtest() [0x427e74]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0df]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af72]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430105]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305b4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430091]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af49]\n??:? runModuleUnitTests [0x42beb5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428544]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{\n\tlong sum = 0;\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\tfor (int j = i; j < arr.length; j++) \n\t\t{\n\t\t\tif ((j - i + 1) % 2 != 0) \n\t\t\t{\n\t\t\t\tfor (int k = i; k <= j; k++) \n\t\t\t\t{\n\t\t\t\t\tsum += arr[k];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{\n\tlong sum = 0;\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\tfor (int j = i; j < arr.length; j++) \n\t\t{\n\t\t\tif ((j - i + 1) % 2 != 0) \n\t\t\t{\n\t\t\t\tfor (int k = i; k <= j; k++) \n\t\t\t\t{\n\t\t\t\t\tsum += arr[k];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{ \n    long sum = 0; \n    for (int i = 0; i < arr.length; i++) { \n        for (int j = i; j < arr.length; j++) { \n            if ((j - i + 1) % 2 != 0) \n                sum += sum_of_subarray(arr, i, j); \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpujlg5all.d(13): Error: undefined identifier `sum_of_subarray`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpujlg5all.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{ \n    long sum = 0; \n    for (int i = 0; i < arr.length; i++) { \n        for (int j = i; j < arr.length; j++) { \n            if (((j - i + 1) & 1) != 0) { \n                for (int k = i; k <= j; k++) \n                    sum += arr[k]; \n            } \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{\n\tlong sum = 0;\n\tlong n = arr.length;\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tlong curr_sum = 0;\n\t\tfor (long j = i; j < n; j++) \n\t\t{\n\t\t\tcurr_sum += arr[j];\n\t\t\tif ((j - i + 1) % 2 == 1) \n\t\t\t{\n\t\t\t\tsum += curr_sum;\n\t\t\t}\n\t\t}\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{\n\tlong sum = 0;\n\tlong n = arr.length;\n\t\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tfor (long j = i; j < n; j++) \n\t\t{\n\t\t\tif ((j - i + 1) % 2 == 1) \n\t\t\t{\n\t\t\t\tfor (long k = i; k <= j; k++) \n\t\t\t\t{\n\t\t\t\t\tsum += arr[k];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{\n\tlong sum = 0;\n\tlong n = arr.length;\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tsum += ((i + 1) * (n - i) + 1) / 2 * arr[i];\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{\n\tlong sum = 0;\n\tint n = arr.length;\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tfor (int j = i; j < n; j++) \n\t\t{\n\t\t\tif ((j - i + 1) % 2 == 1) \n\t\t\t{\n\t\t\t\tfor (int k = i; k <= j; k++) \n\t\t\t\t{\n\t\t\t\t\tsum += arr[k];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmp9yyte4u1.d(10): Error: cannot implicitly convert expression `arr.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9yyte4u1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{\n\tlong sum = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i; j < arr.length; j++) \n\t\t{\n\t\t\tif ((j - i + 1) % 2 != 0) \n\t\t\t{\n\t\t\t\tfor (long k = i; k <= j; k++) \n\t\t\t\t{\n\t\t\t\t\tsum += arr[k];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n    for (long i = 0; i < n; i++) { \n        for (long j = i; j < n; j++) { \n            long len = j - i + 1; \n            if (len % 2 != 0) \n                sum += sum_of_subarray(arr, i, j); \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1666122406,
      "stdout": "",
      "stderr": "/tmp/tmpuf1zgqrr.d(15): Error: undefined identifier `sum_of_subarray`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuf1zgqrr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{\n\tlong sum = 0;\n\tlong n = arr.length;\n\t\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tfor (long j = i; j < n; j++) \n\t\t{\n\t\t\tlong len = j - i + 1;\n\t\t\tif (len % 2 != 0) \n\t\t\t{\n\t\t\t\tfor (long k = i; k <= j; k++) \n\t\t\t\t{\n\t\t\t\t\tsum += arr[k];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1666122407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n  \n    // Iterate over all subarrays \n    for (long i = 0; i < n; i++) { \n        // Iterate over all subarrays starting with i \n        for (long j = i; j < n; j++) { \n            // Sum of current subarray \n            long curr_sum = 0; \n  \n            // Sum of elements from i to j \n            for (long k = i; k <= j; k++) \n                curr_sum += arr[k]; \n  \n            // If length of current subarray is odd \n            if ((j - i + 1) % 2 != 0) \n                sum += curr_sum; \n        } \n    } \n  \n    return sum; \n} \nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1666122407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n  \n    for (long i = 0; i < n; i++) { \n        for (long j = i; j < n; j++) { \n            long len = j - i + 1; \n            if (len % 2 == 1) \n                sum += sum(arr[i..j+1]); \n        } \n    } \n  \n    return sum; \n} \nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1666122406,
      "stdout": "",
      "stderr": "/tmp/tmpqd9vzf6o.d(16): Error: function expected before `()`, not `sum` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqd9vzf6o.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{ \n    long sum = 0; \n    for (int i = 0; i < arr.length; i++) { \n        for (int j = i; j < arr.length; j++) { \n            if ((j - i + 1) % 2 != 0) { \n                for (int k = i; k <= j; k++) { \n                    sum += arr[k]; \n                } \n            } \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1666122407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{\n\tlong sum = 0;\n\tlong n = arr.length;\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tsum += ((i + 1) * (n - i) + 1) / 2 * arr[i];\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{ \n    long sum = 0; \n    for (int i = 0; i < arr.length; i++) { \n        for (int j = i; j < arr.length; j++) { \n            if ((j - i + 1) % 2 != 0) \n                sum += sum_array(arr[i..j]); \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1666122406,
      "stdout": "",
      "stderr": "/tmp/tmpmbusgy19.d(13): Error: undefined identifier `sum_array`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmbusgy19.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{\n\tlong sum = 0;\n\tlong n = arr.length;\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tfor (long j = i; j < n; j++) \n\t\t{\n\t\t\tif ((j - i + 1) % 2 != 0) \n\t\t\t{\n\t\t\t\tfor (long k = i; k <= j; k++) \n\t\t\t\t{\n\t\t\t\t\tsum += arr[k];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1666122407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{\n\tlong sum = 0;\n\tlong n = arr.length;\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tlong curr_sum = 0;\n\t\tfor (long j = i; j < n; j++) \n\t\t{\n\t\t\tcurr_sum += arr[j];\n\t\t\tif ((j - i + 1) % 2 == 1)\n\t\t\t\tsum += curr_sum;\n\t\t}\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1666122407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{\n\tlong sum = 0;\n\tlong n = arr.length;\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tfor (long j = i; j < n; j++) \n\t\t{\n\t\t\tlong len = j - i + 1;\n\t\t\tif (len % 2 == 1) \n\t\t\t{\n\t\t\t\tfor (long k = i; k <= j; k++) \n\t\t\t\t{\n\t\t\t\t\tsum += arr[k];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n    for (long i = 0; i < n; i++) { \n        for (long j = i; j < n; j++) { \n            long len = j - i + 1; \n            if (len % 2 == 1) \n                sum += arr[j]; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1666122407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3nnckex4.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x42810d]\n??:? void tmp3nnckex4.__unittest_L20_C1() [0x427dd8]\n??:? void tmp3nnckex4.__modtest() [0x427e8c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c16b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42affe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430191]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430640]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43011d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afd5]\n??:? runModuleUnitTests [0x42bf41]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{\n\tlong sum = 0;\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\tsum += (i + 1) * (arr.length - i) * arr[i];\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1666122407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp2kx57j05.d(20): unittest failure\n----------------\n??:? _d_unittestp [0x4280ed]\n??:? void tmp2kx57j05.__unittest_L16_C1() [0x427dbc]\n??:? void tmp2kx57j05.__modtest() [0x427e70]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c14b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afde]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430171]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430620]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afb5]\n??:? runModuleUnitTests [0x42bf21]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285b0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{ \n    long sum = 0; \n    for (int i = 0; i < arr.length; i++) { \n        for (int j = i; j < arr.length; j++) { \n            if (((j - i + 1) & 1) != 0) \n                sum += sum_of_subarray(arr, i, j); \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1666122406,
      "stdout": "",
      "stderr": "/tmp/tmp7b68liyd.d(13): Error: undefined identifier `sum_of_subarray`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7b68liyd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{\n\tlong sum = 0;\n\tfor (int i = 0; i < arr.length; i++) {\n\t\tfor (int j = i; j < arr.length; j++) {\n\t\t\tif ((j - i + 1) % 2 == 1) {\n\t\t\t\tfor (int k = i; k <= j; k++) {\n\t\t\t\t\tsum += arr[k];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1666122407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n    for (long i = 0; i < n; i++) { \n        for (long j = i; j < n; j++) { \n            long len = j - i + 1; \n            if (len % 2 != 0) \n                sum += sum_of_subarray(arr, i, j); \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1666122406,
      "stdout": "",
      "stderr": "/tmp/tmpuf1zgqrr.d(15): Error: undefined identifier `sum_of_subarray`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuf1zgqrr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{\n\tlong sum = 0;\n\tlong n = arr.length;\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tsum += ((i + 1) * (n - i) + 1) / 2 * arr[i];\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{\n\tlong sum = 0;\n\tlong n = arr.length;\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tsum += ((i + 1) * (n - i) + 1) / 2 * arr[i];\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{\n\tlong sum = 0;\n\tlong n = arr.length;\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tlong left = i + 1;\n\t\tlong right = n - i;\n\t\tlong curr_sum = 0;\n\t\tfor (long j = i; j < n; j++) \n\t\t{\n\t\t\tcurr_sum += arr[j];\n\t\t\tif (left % 2 != 0) \n\t\t\t{\n\t\t\t\tsum += curr_sum;\n\t\t\t}\n\t\t\tif (right % 2 != 0) \n\t\t\t{\n\t\t\t\tsum += curr_sum;\n\t\t\t}\n\t\t\tleft += 1;\n\t\t\tright -= 1;\n\t\t}\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1666122407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpvp4o55m0.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x428155]\n??:? void tmpvp4o55m0.__unittest_L33_C1() [0x427e24]\n??:? void tmpvp4o55m0.__modtest() [0x427ed8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b046]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4301d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430688]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430165]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b01d]\n??:? runModuleUnitTests [0x42bf89]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428618]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{ \n    long n = arr.length; \n    long sum = 0; \n    for (long i = 0; i < n; i++) { \n        long curr_sum = 0; \n        for (long j = i; j < n; j++) { \n            curr_sum += arr[j]; \n            if ((j - i + 1) % 2 != 0) \n                sum += curr_sum; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1666122407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{ \n    long sum = 0; \n    for (int i = 0; i < arr.length; i++) { \n        for (int j = i; j < arr.length; j++) { \n            if (((j - i + 1) & 1) != 0) { \n                for (int k = i; k <= j; k++) { \n                    sum += arr[k]; \n                } \n            } \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1666122407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{ \n    long sum = 0; \n    for (int i = 0; i < arr.length; i++) { \n        for (int j = i; j < arr.length; j++) { \n            int len = j - i + 1; \n            if (len % 2 != 0) \n                sum += sum_of_subarray(arr, i, j); \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1666122406,
      "stdout": "",
      "stderr": "/tmp/tmpaoq7m5v7.d(14): Error: undefined identifier `sum_of_subarray`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpaoq7m5v7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{\n\tlong sum = 0;\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\tfor (int j = i; j < arr.length; j++) \n\t\t{\n\t\t\tif ((j - i + 1) % 2 != 0) \n\t\t\t{\n\t\t\t\tfor (int k = i; k <= j; k++) \n\t\t\t\t{\n\t\t\t\t\tsum += arr[k];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{\n\tlong sum = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i; j < arr.length; j++) \n\t\t{\n\t\t\tif ((j - i + 1) % 2 == 1) \n\t\t\t{\n\t\t\t\tfor (long k = i; k <= j; k++) \n\t\t\t\t{\n\t\t\t\t\tsum += arr[k];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1666122407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{ \n    long sum = 0; \n    for (int i = 0; i < arr.length; i++) { \n        for (int j = i; j < arr.length; j++) { \n            if ((j - i + 1) % 2 != 0) \n                sum += sum_of_subarray(arr, i, j); \n        } \n    } \n    return sum; \n} \n  \nlong sum_of_subarray(long[] arr, int start, int end) \n{ \n    long sum = 0; \n    for (int i = start; i <= end; i++) \n        sum += arr[i]; \n    return sum; \n} \n  \nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1666122407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{ \n    long sum = 0; \n    for (long i = 0; i < arr.length; i++) { \n        long curr_sum = 0; \n        for (long j = i; j < arr.length; j++) { \n            curr_sum += arr[j]; \n            if ((j - i + 1) % 2 == 1) \n                sum += curr_sum; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1666122407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n    for (long i = 0; i < n; i++) { \n        for (long j = i; j < n; j++) { \n            long len = j - i + 1; \n            if (len % 2 != 0) \n                sum += sum_of_subarray(arr, i, j); \n        } \n    } \n    return sum; \n} \n  \nlong sum_of_subarray(long[] arr, long start, long end) \n{ \n    long sum = 0; \n    for (long i = start; i <= end; i++) \n        sum += arr[i]; \n    return sum; \n} \n  \n// Driver code \npublic static void main(String[] args) \n{ \n    long[] arr = { 1, 2, 3, 4, 5 }; \n    System.out.println(odd_length_sum(arr)); \n}\nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1666122406,
      "stdout": "",
      "stderr": "/tmp/tmpydw1kkyl.d(33): Error: identifier expected following `.`, not `out`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpydw1kkyl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{\n\tlong sum = 0;\n\tlong n = arr.length;\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tfor (long j = i; j < n; j++) \n\t\t{\n\t\t\tlong len = j - i + 1;\n\t\t\tif (len % 2 == 1) \n\t\t\t{\n\t\t\t\tfor (long k = i; k <= j; k++) \n\t\t\t\t{\n\t\t\t\t\tsum += arr[k];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{\n\tlong sum = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i; j < arr.length; j++) \n\t\t{\n\t\t\tif ((j - i + 1) % 2 != 0) \n\t\t\t{\n\t\t\t\tfor (long k = i; k <= j; k++) \n\t\t\t\t{\n\t\t\t\t\tsum += arr[k];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{ \n    long sum = 0; \n    for (int i = 0; i < arr.length; i++) { \n        for (int j = i; j < arr.length; j++) { \n            if (((j - i + 1) & 1) != 0) \n                sum += sum_of_subarray(arr, i, j); \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1666122406,
      "stdout": "",
      "stderr": "/tmp/tmp7b68liyd.d(13): Error: undefined identifier `sum_of_subarray`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7b68liyd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{ \n    long sum = 0; \n    for (int i = 0; i < arr.length; i++) { \n        for (int j = i; j < arr.length; j++) { \n            if ((j - i + 1) % 2 != 0) \n                sum += sum_of_subarray(arr, i, j); \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpujlg5all.d(13): Error: undefined identifier `sum_of_subarray`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpujlg5all.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{ \n    long sum = 0; \n    for (int i = 0; i < arr.length; i++) { \n        for (int j = i; j < arr.length; j++) { \n            if ((j - i + 1) % 2 != 0) { \n                for (int k = i; k <= j; k++) { \n                    sum += arr[k]; \n                } \n            } \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1666122407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{\n\tlong sum = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i; j < arr.length; j++) \n\t\t{\n\t\t\tif ((j - i + 1) % 2 != 0) \n\t\t\t{\n\t\t\t\tfor (long k = i; k <= j; k++) \n\t\t\t\t{\n\t\t\t\t\tsum += arr[k];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{ \n    long sum = 0; \n    for (int i = 0; i < arr.length; i++) { \n        for (int j = i; j < arr.length; j++) { \n            int len = j - i + 1; \n            if (len % 2 != 0) \n                sum += sum_of_subarray(arr, i, j); \n        } \n    } \n    return sum; \n} \nlong sum_of_subarray(long[] arr, int i, int j) \n{ \n    long sum = 0; \n    for (int k = i; k <= j; k++) \n        sum += arr[k]; \n    return sum; \n} \nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1666122407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n    for (long i = 0; i < n; i++) { \n        long curr_sum = 0; \n        for (long j = i; j < n; j++) { \n            curr_sum += arr[j]; \n            if ((j - i + 1) % 2 != 0) \n                sum += curr_sum; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1666122407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{\n\tlong sum = 0;\n\tlong n = arr.length;\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tlong count = 0;\n\t\tfor (long j = i; j < n; j++) \n\t\t{\n\t\t\tcount++;\n\t\t\tif (count % 2 == 1) \n\t\t\t{\n\t\t\t\tsum += arr[j];\n\t\t\t}\n\t\t}\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1666122407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpulyd75rl.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x42810d]\n??:? void tmpulyd75rl.__unittest_L25_C1() [0x427dd8]\n??:? void tmpulyd75rl.__modtest() [0x427e8c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c16b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42affe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430191]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430640]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43011d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afd5]\n??:? runModuleUnitTests [0x42bf41]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{\n\tlong sum = 0;\n\tlong n = arr.length;\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tsum += ((i + 1) * (n - i) + 1) / 2 * arr[i];\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n    for (long i = 0; i < n; i++) { \n        for (long j = i; j < n; j++) { \n            long len = j - i + 1; \n            if (len % 2 != 0) \n                sum += sum_of_subarray(arr, i, j); \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1666122406,
      "stdout": "",
      "stderr": "/tmp/tmpuf1zgqrr.d(15): Error: undefined identifier `sum_of_subarray`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuf1zgqrr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{ \n\tlong sum = 0; \n\tfor (int i = 0; i < arr.length; i++) \n\t{ \n\t\tfor (int j = i; j < arr.length; j++) \n\t\t{ \n\t\t\tif ((j - i + 1) % 2 != 0) \n\t\t\t\tsum += arr[j]; \n\t\t} \n\t} \n\treturn sum; \n} \nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1666122407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp57t72f1h.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x4280fd]\n??:? void tmp57t72f1h.__unittest_L20_C1() [0x427dc8]\n??:? void tmp57t72f1h.__modtest() [0x427e7c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c15b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430181]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430630]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43010d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afc5]\n??:? runModuleUnitTests [0x42bf31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{ \n\tlong sum = 0; \n\tfor (int i = 0; i < arr.length; i++) \n\t{ \n\t\tfor (int j = i; j < arr.length; j++) \n\t\t{ \n\t\t\tint len = (j - i + 1); \n\t\t\tif (len % 2 == 1) \n\t\t\t\tsum += (arr[j] * len); \n\t\t} \n\t} \n\treturn sum; \n} \nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1666122407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpucweyy2n.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x428105]\n??:? void tmpucweyy2n.__unittest_L21_C1() [0x427dd4]\n??:? void tmpucweyy2n.__modtest() [0x427e88]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c163]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aff6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430189]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430638]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430115]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afcd]\n??:? runModuleUnitTests [0x42bf39]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285c8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{\n\tlong sum = 0;\n\tlong n = arr.length;\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tfor (long j = i; j < n; j++) \n\t\t{\n\t\t\tif ((j - i + 1) % 2 != 0) \n\t\t\t{\n\t\t\t\tfor (long k = i; k <= j; k++) \n\t\t\t\t{\n\t\t\t\t\tsum += arr[k];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1666122407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n    for (long i = 0; i < n; i++) { \n        for (long j = i; j < n; j++) { \n            long len = j - i + 1; \n            if (len % 2 == 1) \n                sum += (len * (len + 1)) / 2; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1666122407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmplkgrd0xd.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x4280f5]\n??:? void tmplkgrd0xd.__unittest_L20_C1() [0x427dc4]\n??:? void tmplkgrd0xd.__modtest() [0x427e78]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0df]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af72]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430105]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305b4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430091]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af49]\n??:? runModuleUnitTests [0x42beb5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428544]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{\n\tlong sum = 0;\n\tlong n = arr.length;\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tsum += ((i + 1) * (n - i) + 1) / 2 * arr[i];\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n    for (long i = 0; i < n; i++) { \n        for (long j = i; j < n; j++) { \n            long len = j - i + 1; \n            if (len % 2 != 0) \n                sum += sum_of_subarray(arr, i, j); \n        } \n    } \n    return sum; \n} \n  \nlong sum_of_subarray(long[] arr, long start, long end) \n{ \n    long sum = 0; \n    for (long i = start; i <= end; i++) \n        sum += arr[i]; \n    return sum; \n} \n  \n// Driver code \nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1666122407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{ \n    long sum = 0; \n    for (long i = 0; i < arr.length; i++) { \n        for (long j = i; j < arr.length; j++) { \n            long len = (j - i + 1); \n            if (len % 2 != 0) \n                sum += (len * (len + 1)) / 2; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1666122407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpp90ktfmd.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x4280f5]\n??:? void tmpp90ktfmd.__unittest_L19_C1() [0x427dc4]\n??:? void tmpp90ktfmd.__modtest() [0x427e78]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0df]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af72]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430105]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305b4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430091]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af49]\n??:? runModuleUnitTests [0x42beb5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428544]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{\n\tlong sum = 0;\n\tlong n = arr.length;\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tlong curr_sum = 0;\n\t\tfor (long j = i; j < n; j++) \n\t\t{\n\t\t\tcurr_sum += arr[j];\n\t\t\tif (((j - i + 1) & 1) != 0) \n\t\t\t{\n\t\t\t\tsum += curr_sum;\n\t\t\t}\n\t\t}\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1666122407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{\n\tlong sum = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i; j < arr.length; j++) \n\t\t{\n\t\t\tif ((j - i + 1) % 2 != 0) \n\t\t\t{\n\t\t\t\tfor (long k = i; k <= j; k++) \n\t\t\t\t{\n\t\t\t\t\tsum += arr[k];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n    for (long i = 0; i < n; i++) { \n        for (long j = i; j < n; j++) { \n            long len = j - i + 1; \n            if (len % 2 == 1) \n                sum += (len * (len + 1)) / 2; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1666122407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmplkgrd0xd.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x4280f5]\n??:? void tmplkgrd0xd.__unittest_L20_C1() [0x427dc4]\n??:? void tmplkgrd0xd.__modtest() [0x427e78]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0df]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af72]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430105]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305b4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430091]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af49]\n??:? runModuleUnitTests [0x42beb5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428544]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n    for (long i = 0; i < n; i++) { \n        for (long j = i; j < n; j++) { \n            long len = j - i + 1; \n            if (len % 2 == 1) \n                sum += sum_of_subarray(arr, i, j); \n        } \n    } \n    return sum; \n} \n  \nlong sum_of_subarray(long[] arr, long i, long j) \n{ \n    long sum = 0; \n    for (long k = i; k <= j; k++) \n        sum += arr[k]; \n    return sum; \n} \n  \n// Driver code \nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1666122407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{\n\tlong sum = 0;\n\tlong n = arr.length;\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tsum += ((i + 1) * (n - i) + 1) / 2 * arr[i];\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{ \n    long sum = 0; \n    for (int i = 0; i < arr.length; i++) \n    { \n        for (int j = i; j < arr.length; j++) \n        { \n            int len = j - i + 1; \n            if (len % 2 != 0) \n                sum += sum_of_subarray(arr, i, j); \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1666122407,
      "stdout": "",
      "stderr": "/tmp/tmpgvvw3sw4.d(16): Error: undefined identifier `sum_of_subarray`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgvvw3sw4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{ \n    long sum = 0; \n    for (int i = 0; i < arr.length; i++) \n    { \n        for (int j = i; j < arr.length; j++) \n        { \n            int len = j - i + 1; \n            if (len % 2 != 0) \n                sum += arr[j]; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1666122407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpyp2pyzes.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x4280fd]\n??:? void tmpyp2pyzes.__unittest_L21_C1() [0x427dcc]\n??:? void tmpyp2pyzes.__modtest() [0x427e80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c15b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430181]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430630]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43010d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afc5]\n??:? runModuleUnitTests [0x42bf31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{\n\tlong sum = 0;\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\tfor (int j = i; j < arr.length; j++) \n\t\t{\n\t\t\tif ((j - i + 1) % 2 != 0) \n\t\t\t{\n\t\t\t\tfor (int k = i; k <= j; k++) \n\t\t\t\t{\n\t\t\t\t\tsum += arr[k];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{ \n    long sum = 0; \n    int n = arr.length; \n    for (int i = 0; i < n; i++) { \n        for (int j = i; j < n; j++) { \n            int len = j - i + 1; \n            if (len % 2 != 0) \n                sum += sum_range(arr, i, j); \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1666122407,
      "stdout": "",
      "stderr": "/tmp/tmp74fxmkc1.d(10): Error: cannot implicitly convert expression `arr.length` of type `ulong` to `int`\n/tmp/tmp74fxmkc1.d(15): Error: undefined identifier `sum_range`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp74fxmkc1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{ \n    long sum = 0; \n    for (int i = 0; i < arr.length; i++) \n    { \n        long curr_sum = 0; \n        for (int j = i; j < arr.length; j++) \n        { \n            curr_sum += arr[j]; \n            if (((j - i + 1) & 1) != 0) \n                sum += curr_sum; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1666122407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{\n\tlong sum = 0;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; i .. arr.length)\n\t\t{\n\t\t\tif((j - i + 1) % 2 != 0)\n\t\t\t{\n\t\t\t\tforeach(k; i .. j + 1)\n\t\t\t\t{\n\t\t\t\t\tsum += arr[k];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1666122407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n    for (long i = 0; i < n; i++) { \n        for (long j = i; j < n; j++) { \n            long len = j - i + 1; \n            if (len % 2 != 0) \n                sum += sum_of_subarray(arr, i, j); \n        } \n    } \n    return sum; \n} \nlong sum_of_subarray(long[] arr, long start, long end) \n{ \n    long sum = 0; \n    for (long i = start; i <= end; i++) \n        sum += arr[i]; \n    return sum; \n} \nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1666122407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{\n\tlong sum = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i; j < arr.length; j++) \n\t\t{\n\t\t\tif ((j - i + 1) % 2 != 0) \n\t\t\t{\n\t\t\t\tfor (long k = i; k <= j; k++) \n\t\t\t\t{\n\t\t\t\t\tsum += arr[k];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{ \n    long sum = 0; \n    int n = arr.length; \n    for (int i = 0; i < n; i++) { \n        for (int j = i; j < n; j++) { \n            int len = j - i + 1; \n            if (len % 2 != 0) \n                sum += sum_of_subarray(arr, i, j); \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1666122407,
      "stdout": "",
      "stderr": "/tmp/tmp8dhx_y9n.d(10): Error: cannot implicitly convert expression `arr.length` of type `ulong` to `int`\n/tmp/tmp8dhx_y9n.d(15): Error: undefined identifier `sum_of_subarray`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8dhx_y9n.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{\n\tlong sum = 0;\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\tfor (int j = i; j < arr.length; j++) \n\t\t{\n\t\t\tif ((j - i + 1) % 2 != 0) \n\t\t\t{\n\t\t\t\tfor (int k = i; k <= j; k++) \n\t\t\t\t{\n\t\t\t\t\tsum += arr[k];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{\n\tlong sum = 0;\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\tfor (int j = i; j < arr.length; j++) \n\t\t{\n\t\t\tif ((j - i + 1) % 2 != 0) \n\t\t\t{\n\t\t\t\tfor (int k = i; k <= j; k++) \n\t\t\t\t{\n\t\t\t\t\tsum += arr[k];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{ \n    long sum = 0; \n    for (int i = 0; i < arr.length; i++) { \n        for (int j = i; j < arr.length; j++) { \n            if (((j - i + 1) & 1) != 0) \n                sum += sum_of_subarray(arr, i, j); \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1666122406,
      "stdout": "",
      "stderr": "/tmp/tmp7b68liyd.d(13): Error: undefined identifier `sum_of_subarray`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7b68liyd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{\n\tlong sum = 0;\n\tlong n = arr.length;\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tfor (long j = i; j < n; j++) \n\t\t{\n\t\t\tif ((j - i + 1) % 2 != 0) \n\t\t\t{\n\t\t\t\tfor (long k = i; k <= j; k++) \n\t\t\t\t{\n\t\t\t\t\tsum += arr[k];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1666122407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{ \n    long sum = 0; \n    for (int i = 0; i < arr.length; i++) { \n        for (int j = i; j < arr.length; j++) { \n            if ((j - i + 1) % 2 == 1) { \n                for (int k = i; k <= j; k++) { \n                    sum += arr[k]; \n                } \n            } \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1666122407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n    for (long i = 0; i < n; i++) { \n        for (long j = i; j < n; j++) { \n            long len = j - i + 1; \n            if (len % 2 != 0) \n                sum += sum_of_subarray(arr, i, j); \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1666122406,
      "stdout": "",
      "stderr": "/tmp/tmpuf1zgqrr.d(15): Error: undefined identifier `sum_of_subarray`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuf1zgqrr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{ \n    long sum = 0; \n    int n = arr.length; \n  \n    // Iterate over all subarrays \n    for (int i = 0; i < n; i++) { \n  \n        // Iterate over all subarrays starting from i \n        for (int j = i; j < n; j++) { \n  \n            // Calculate sum of current subarray \n            long curr_sum = 0; \n            for (int k = i; k <= j; k++) \n                curr_sum += arr[k]; \n  \n            // Add current subarray sum to result \n            // if it is odd \n            if (curr_sum % 2 != 0) \n                sum += curr_sum; \n        } \n    } \n  \n    return sum; \n} \nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1666122407,
      "stdout": "",
      "stderr": "/tmp/tmpiefl9n2d.d(10): Error: cannot implicitly convert expression `arr.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiefl9n2d.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{ \n    long sum = 0; \n    for (int i = 0; i < arr.length; i++) \n    { \n        long curr_sum = 0; \n        for (int j = i; j < arr.length; j++) \n        { \n            curr_sum += arr[j]; \n            if (((j - i + 1) & 1) != 0) \n                sum += curr_sum; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1666122407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{ \n    long sum = 0; \n    for (int i = 0; i < arr.length; i++) { \n        for (int j = i; j < arr.length; j++) { \n            if ((j - i + 1) % 2 != 0) \n                sum += sum_of_subarray(arr, i, j); \n        } \n    } \n    return sum; \n} \nlong sum_of_subarray(long[] arr, int start, int end) \n{ \n    long sum = 0; \n    for (int i = start; i <= end; i++) \n        sum += arr[i]; \n    return sum; \n} \nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1666122407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{ \n    long sum = 0; \n    for (int i = 0; i < arr.length; i++) { \n        for (int j = i; j < arr.length; j++) { \n            if (((j - i + 1) & 1) != 0) \n                sum += sum_of_subarray(arr, i, j); \n        } \n    } \n    return sum; \n} \nlong sum_of_subarray(long[] arr, int start, int end) \n{ \n    long sum = 0; \n    for (int i = start; i <= end; i++) \n        sum += arr[i]; \n    return sum; \n} \nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1666122407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{ \n    long sum = 0; \n    for (int i = 0; i < arr.length; i++) \n    { \n        for (int j = i; j < arr.length; j++) \n        { \n            int len = j - i + 1; \n            if (len % 2 != 0) \n                sum += sum_of_subarray(arr, i, j); \n        } \n    } \n    return sum; \n} \nlong sum_of_subarray(long[] arr, int start, int end) \n{ \n    long sum = 0; \n    for (int i = start; i <= end; i++) \n        sum += arr[i]; \n    return sum; \n} \nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1666122407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{\n\tlong sum = 0;\n\tlong n = arr.length;\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tlong curr_sum = 0;\n\t\tfor (long j = i; j < n; j++) \n\t\t{\n\t\t\tcurr_sum += arr[j];\n\t\t\tif ((j - i + 1) % 2 != 0) \n\t\t\t{\n\t\t\t\tsum += curr_sum;\n\t\t\t}\n\t\t}\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1666122407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{\n\tlong sum = 0;\n\tlong n = arr.length;\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tfor (long j = i; j < n; j++) \n\t\t{\n\t\t\tif ((j - i + 1) % 2 == 1) \n\t\t\t{\n\t\t\t\tfor (long k = i; k <= j; k++) \n\t\t\t\t{\n\t\t\t\t\tsum += arr[k];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1666122407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{ \n    long sum = 0; \n    for (int i = 0; i < arr.length; i++) \n    { \n        for (int j = i; j < arr.length; j++) \n        { \n            if (((j - i + 1) & 1) != 0) \n                sum += arr[j]; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1666122407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmph6ub360d.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x4280f5]\n??:? void tmph6ub360d.__unittest_L20_C1() [0x427dc0]\n??:? void tmph6ub360d.__modtest() [0x427e74]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c153]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afe6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430179]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430628]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430105]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afbd]\n??:? runModuleUnitTests [0x42bf29]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285b8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{ \n    long sum = 0; \n    for (long i = 0; i < arr.length; i++) { \n        for (long j = i; j < arr.length; j++) { \n            long len = j - i + 1; \n            if (len % 2 != 0) \n                sum += sum_of_subarray(arr, i, j); \n        } \n    } \n    return sum; \n} \n  \nlong sum_of_subarray(long[] arr, long start, long end) \n{ \n    long sum = 0; \n    for (long i = start; i <= end; i++) \n        sum += arr[i]; \n    return sum; \n} \n  \n// Driver code \nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1666122407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{\n\tlong sum = 0;\n\tint n = arr.length;\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tfor (int j = i; j < n; j++) \n\t\t{\n\t\t\tif ((j - i + 1) % 2 == 1) \n\t\t\t{\n\t\t\t\tfor (int k = i; k <= j; k++) \n\t\t\t\t{\n\t\t\t\t\tsum += arr[k];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmp9yyte4u1.d(10): Error: cannot implicitly convert expression `arr.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9yyte4u1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{\n\tlong sum = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i; j < arr.length; j++) \n\t\t{\n\t\t\tif ((j - i + 1) % 2 != 0) \n\t\t\t{\n\t\t\t\tfor (long k = i; k <= j; k++) \n\t\t\t\t{\n\t\t\t\t\tsum += arr[k];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{ \n    long sum = 0; \n    for (int i = 0; i < arr.length; i++) { \n        for (int j = i; j < arr.length; j++) { \n            if ((j - i + 1) % 2 != 0) \n                sum += sum_of_subarray(arr, i, j); \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpujlg5all.d(13): Error: undefined identifier `sum_of_subarray`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpujlg5all.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{\n\tlong sum = 0;\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\tfor (int j = i; j < arr.length; j++) \n\t\t{\n\t\t\tif ((j - i + 1) % 2 == 1) \n\t\t\t{\n\t\t\t\tfor (int k = i; k <= j; k++) \n\t\t\t\t{\n\t\t\t\t\tsum += arr[k];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1666122407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{\n\tlong sum = 0;\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\tfor (int j = i; j < arr.length; j++) \n\t\t{\n\t\t\tif ((j - i + 1) % 2 != 0) \n\t\t\t{\n\t\t\t\tfor (int k = i; k <= j; k++) \n\t\t\t\t{\n\t\t\t\t\tsum += arr[k];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{ \n    long sum = 0; \n    for (int i = 0; i < arr.length; i++) \n    { \n        for (int j = i; j < arr.length; j++) \n        { \n            if ((j - i + 1) % 2 != 0) \n                sum += sum_of_subarray(arr, i, j); \n        } \n    } \n    return sum; \n} \n  \nlong sum_of_subarray(long[] arr, int start, int end) \n{ \n    long sum = 0; \n    for (int i = start; i <= end; i++) \n        sum += arr[i]; \n    return sum; \n} \n  \n// Driver code \nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1666122407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n    for (long i = 0; i < n; i++) \n    { \n        for (long j = i; j < n; j++) \n        { \n            long len = j - i + 1; \n            if (len % 2 != 0) \n                sum += sum_of_subarray(arr, i, j); \n        } \n    } \n    return sum; \n} \n  \nlong sum_of_subarray(long[] arr, long i, long j) \n{ \n    long sum = 0; \n    for (long k = i; k <= j; k++) \n        sum += arr[k]; \n    return sum; \n} \nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1666122407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{\n\tlong sum = 0;\n\tlong n = arr.length;\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tsum += ((i + 1) * (n - i) + 1) / 2 * arr[i];\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{ \n    long sum = 0; \n    for (int i = 0; i < arr.length; i++) { \n        for (int j = i; j < arr.length; j++) { \n            if (((j - i + 1) & 1) != 0) { \n                for (int k = i; k <= j; k++) \n                    sum += arr[k]; \n            } \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{\n\tlong sum = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i; j < arr.length; j++) \n\t\t{\n\t\t\tif ((j - i + 1) % 2 != 0) \n\t\t\t{\n\t\t\t\tfor (long k = i; k <= j; k++) \n\t\t\t\t{\n\t\t\t\t\tsum += arr[k];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{\n    long sum = 0;\n    long n = arr.length;\n    for (long i = 0; i < n; i++) \n    {\n        for (long j = i; j < n; j++) \n        {\n            long len = j - i + 1;\n            if (len % 2 == 1) \n            {\n                for (long k = i; k <= j; k++) \n                {\n                    sum += arr[k];\n                }\n            }\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1666122407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{\n\tlong sum = 0;\n\tlong n = arr.length;\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tlong odd = 1;\n\t\tfor (long j = i; j < n; j++) \n\t\t{\n\t\t\tsum += odd * arr[j];\n\t\t\todd += 2;\n\t\t}\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1666122407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp_wo2ljgr.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x4280fd]\n??:? void tmp_wo2ljgr.__unittest_L22_C1() [0x427dc8]\n??:? void tmp_wo2ljgr.__modtest() [0x427e7c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c15b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430181]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430630]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43010d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afc5]\n??:? runModuleUnitTests [0x42bf31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n    for (long i = 0; i < n; i++) \n    { \n        long j = i; \n        while (j < n) \n        { \n            long len = j - i + 1; \n            if (len % 2 == 1) \n                sum += (len * (len + 1)) / 2; \n            j++; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1666122407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpcoki2132.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x4280f5]\n??:? void tmpcoki2132.__unittest_L24_C1() [0x427dc4]\n??:? void tmpcoki2132.__modtest() [0x427e78]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0df]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af72]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430105]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305b4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430091]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af49]\n??:? runModuleUnitTests [0x42beb5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428544]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{\n\tlong sum = 0;\n\tlong n = arr.length;\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tfor (long j = i; j < n; j++) \n\t\t{\n\t\t\tif ((j - i + 1) % 2 != 0) \n\t\t\t{\n\t\t\t\tfor (long k = i; k <= j; k++) \n\t\t\t\t{\n\t\t\t\t\tsum += arr[k];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1666122407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{\n\tlong sum = 0;\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\tfor (int j = i; j < arr.length; j++) \n\t\t{\n\t\t\tif ((j - i + 1) % 2 == 1) \n\t\t\t{\n\t\t\t\tfor (int k = i; k <= j; k++) \n\t\t\t\t{\n\t\t\t\t\tsum += arr[k];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1666122407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{\n\tlong sum = 0;\n\tlong n = arr.length;\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tfor (long j = i; j < n; j++) \n\t\t{\n\t\t\tif ((j - i + 1) % 2 == 1) \n\t\t\t{\n\t\t\t\tfor (long k = i; k <= j; k++) \n\t\t\t\t{\n\t\t\t\t\tsum += arr[k];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1666122407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{ \n    long sum = 0; \n    int n = arr.length; \n    for (int i = 0; i < n; i++) { \n        for (int j = i; j < n; j++) { \n            int len = (j - i + 1); \n            if (len % 2 != 0) \n                sum += sum_of_subarray(arr, i, j); \n        } \n    } \n    return sum; \n} \nlong sum_of_subarray(long[] arr, int start, int end) \n{ \n    long sum = 0; \n    for (int i = start; i <= end; i++) \n        sum += arr[i]; \n    return sum; \n} \nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1666122407,
      "stdout": "",
      "stderr": "/tmp/tmp2ngv3quc.d(10): Error: cannot implicitly convert expression `arr.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2ngv3quc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n    for (long i = 0; i < n; i++) { \n        for (long j = i; j < n; j++) { \n            long len = j - i + 1; \n            if (len % 2 == 1) \n                sum += sum(arr[i..j]); \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1666122407,
      "stdout": "",
      "stderr": "/tmp/tmpnkdb7te6.d(15): Error: function expected before `()`, not `sum` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnkdb7te6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{\n\tlong sum = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i; j < arr.length; j++) \n\t\t{\n\t\t\tif ((j - i + 1) % 2 == 1) \n\t\t\t{\n\t\t\t\tfor (long k = i; k <= j; k++) \n\t\t\t\t{\n\t\t\t\t\tsum += arr[k];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1666122407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{\n\tlong sum = 0;\n\tlong n = arr.length;\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tfor (long j = i; j < n; j++) \n\t\t{\n\t\t\tif ((j - i + 1) % 2 == 1) \n\t\t\t{\n\t\t\t\tfor (long k = i; k <= j; k++) \n\t\t\t\t{\n\t\t\t\t\tsum += arr[k];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1666122407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n    for (long i = 0; i < n; i++) { \n        for (long j = i; j < n; j++) { \n            long len = j - i + 1; \n            if (len % 2 != 0) \n                sum += sum_of_subarray(arr, i, j); \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1666122406,
      "stdout": "",
      "stderr": "/tmp/tmpuf1zgqrr.d(15): Error: undefined identifier `sum_of_subarray`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuf1zgqrr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{ \n    long sum = 0; \n    for (int i = 0; i < arr.length; i++) \n    { \n        for (int j = i; j < arr.length; j++) \n        { \n            int len = j - i + 1; \n            if (len % 2 != 0) \n                sum += sum_of_subarray(arr, i, j); \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1666122407,
      "stdout": "",
      "stderr": "/tmp/tmpgvvw3sw4.d(16): Error: undefined identifier `sum_of_subarray`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgvvw3sw4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{ \n    long sum = 0; \n    for (int i = 0; i < arr.length; i++)  \n    { \n        for (int j = i; j < arr.length; j++)  \n        { \n            if ((j - i + 1) % 2 == 1) \n                sum += arr[j]; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1666122407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpgiqvzx4h.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x4280fd]\n??:? void tmpgiqvzx4h.__unittest_L20_C1() [0x427dcc]\n??:? void tmpgiqvzx4h.__modtest() [0x427e80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c15b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430181]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430630]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43010d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afc5]\n??:? runModuleUnitTests [0x42bf31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{\n\tlong sum = 0;\n\tlong n = arr.length;\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tfor (int j = i; j < n; j++) \n\t\t{\n\t\t\tif ((j - i + 1) % 2 != 0) \n\t\t\t{\n\t\t\t\tfor (int k = i; k <= j; k++) \n\t\t\t\t{\n\t\t\t\t\tsum += arr[k];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1666122407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{ \n    long sum = 0; \n    for (long i = 0; i < arr.length; i++) { \n        long curr_sum = 0; \n        for (long j = i; j < arr.length; j++) { \n            curr_sum += arr[j]; \n            if ((j - i + 1) % 2 != 0) \n                sum += curr_sum; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1666122407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n    for (long i = 0; i < n; i++) \n    { \n        long curr_sum = 0; \n        for (long j = i; j < n; j++) \n        { \n            curr_sum += arr[j]; \n            if ((j - i + 1) % 2 == 1) \n                sum += curr_sum; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1666122407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{\n\tlong sum = 0;\n\tlong n = arr.length;\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tfor (long j = i; j < n; j++) \n\t\t{\n\t\t\tlong len = j - i + 1;\n\t\t\tif (len % 2 != 0) \n\t\t\t{\n\t\t\t\tfor (long k = i; k <= j; k++) \n\t\t\t\t{\n\t\t\t\t\tsum += arr[k];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1666122408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{\n\tlong sum = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i; j < arr.length; j++) \n\t\t{\n\t\t\tif ((j - i + 1) % 2 != 0) \n\t\t\t{\n\t\t\t\tfor (long k = i; k <= j; k++) \n\t\t\t\t{\n\t\t\t\t\tsum += arr[k];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{ \n    long sum = 0; \n    for (int i = 0; i < arr.length; i++) \n    { \n        long curr_sum = 0; \n        for (int j = i; j < arr.length; j++) \n        { \n            curr_sum += arr[j]; \n            if (((j - i + 1) & 1) != 0) \n                sum += curr_sum; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1666122407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{\n\tlong sum = 0;\n\tlong n = arr.length;\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tfor (int j = i; j < n; j++) \n\t\t{\n\t\t\tif ((j - i + 1) % 2 != 0) \n\t\t\t{\n\t\t\t\tfor (int k = i; k <= j; k++) \n\t\t\t\t{\n\t\t\t\t\tsum += arr[k];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1666122407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{ \n    long sum = 0; \n    for (int i = 0; i < arr.length; i++) { \n        for (int j = i; j < arr.length; j++) { \n            if (((j - i + 1) & 1) != 0) { \n                for (int k = i; k <= j; k++) { \n                    sum += arr[k]; \n                } \n            } \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1666122407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{ \n    long sum = 0; \n    for (int i = 0; i < arr.length; i++) \n    { \n        for (int j = i; j < arr.length; j++) \n        { \n            if ((j - i + 1) % 2 != 0) \n                sum += arr[j]; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1666122408,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmplb1dmlvv.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x4280fd]\n??:? void tmplb1dmlvv.__unittest_L20_C1() [0x427dc8]\n??:? void tmplb1dmlvv.__modtest() [0x427e7c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c15b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430181]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430630]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43010d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afc5]\n??:? runModuleUnitTests [0x42bf31]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{ \n\tlong sum = 0; \n\tfor (long i = 0; i < arr.length; i++) \n\t{ \n\t\tlong curr_sum = 0; \n\t\tfor (long j = i; j < arr.length; j++) \n\t\t{ \n\t\t\tcurr_sum += arr[j]; \n\t\t\tif ((j - i + 1) % 2 != 0) \n\t\t\t\tsum += curr_sum; \n\t\t} \n\t} \n\treturn sum; \n} \nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1666122408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{ \n    long sum = 0; \n    for (int i = 0; i < arr.length; i++) { \n        for (int j = i; j < arr.length; j++) { \n            if ((j - i + 1) % 2 != 0) { \n                for (int k = i; k <= j; k++) { \n                    sum += arr[k]; \n                } \n            } \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1666122407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{ \n    long sum = 0; \n    for (int i = 0; i < arr.length; i++) { \n        for (int j = i; j < arr.length; j++) { \n            if (((j - i + 1) & 1) != 0) \n                sum += arr[j]; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1666122408,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp64ihs1qc.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x4280f5]\n??:? void tmp64ihs1qc.__unittest_L18_C1() [0x427dc0]\n??:? void tmp64ihs1qc.__modtest() [0x427e74]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c153]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afe6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430179]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430628]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430105]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afbd]\n??:? runModuleUnitTests [0x42bf29]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285b8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{ \n    long sum = 0; \n    for (int i = 0; i < arr.length; i++) { \n        for (int j = i; j < arr.length; j++) { \n            if ((j - i + 1) % 2 == 1) { \n                for (int k = i; k <= j; k++) { \n                    sum += arr[k]; \n                } \n            } \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1666122407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{\n\tlong sum = 0;\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\tfor (int j = i; j < arr.length; j++) \n\t\t{\n\t\t\tif ((j - i + 1) % 2 != 0) \n\t\t\t{\n\t\t\t\tfor (int k = i; k <= j; k++) \n\t\t\t\t{\n\t\t\t\t\tsum += arr[k];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n  \n    // Iterate over all subarrays \n    for (long i = 0; i < n; i++) { \n  \n        // Iterate over all subarrays starting with i \n        for (long j = i; j < n; j++) { \n  \n            // Find length of current subarray \n            long len = j - i + 1; \n  \n            // If length is odd, add current subarray \n            if (len & 1) \n                sum += sum_of_subarray(arr, i, j); \n        } \n    } \n    return sum; \n} \n  \n// Function to find sum of all subarrays \nlong sum_of_subarray(long[] arr, long start, long end) \n{ \n    long sum = 0; \n    for (long i = start; i <= end; i++) \n        sum += arr[i]; \n    return sum; \n} \nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1666122408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{\n\tlong sum = 0;\n\tlong n = arr.length;\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tsum += ((i + 1) * (n - i) + 1) / 2 * arr[i];\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1666122408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{ \n    long sum = 0; \n    for (int i = 0; i < arr.length; i++) { \n        for (int j = i; j < arr.length; j++) { \n            if ((j - i + 1) % 2 != 0) \n                sum += sum_array(arr[i..j]); \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1666122406,
      "stdout": "",
      "stderr": "/tmp/tmpmbusgy19.d(13): Error: undefined identifier `sum_array`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmbusgy19.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{ \n    long sum = 0; \n    int n = arr.length; \n    for (int i = 0; i < n; i++) { \n        sum += ((i + 1) * (n - i) + 1) / 2 * arr[i]; \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1666122407,
      "stdout": "",
      "stderr": "/tmp/tmpwuj72032.d(10): Error: cannot implicitly convert expression `arr.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwuj72032.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{\n\tlong sum = 0;\n\tlong n = arr.length;\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tlong curr_sum = 0;\n\t\tfor (long j = i; j < n; j++) \n\t\t{\n\t\t\tcurr_sum += arr[j];\n\t\t\tif ((j - i + 1) % 2 == 1) \n\t\t\t{\n\t\t\t\tsum += curr_sum;\n\t\t\t}\n\t\t}\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{\n\tlong sum = 0;\n\tlong n = arr.length;\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tfor (long j = i; j < n; j++) \n\t\t{\n\t\t\tif ((j - i + 1) % 2 != 0) \n\t\t\t{\n\t\t\t\tfor (long k = i; k <= j; k++) \n\t\t\t\t{\n\t\t\t\t\tsum += arr[k];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1666122407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{\n\tlong sum = 0;\n\tlong n = arr.length;\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tsum += ((i + 1) * (n - i) + 1) / 2 * arr[i];\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{ \n    long sum = 0; \n    for (long i = 0; i < arr.length; i++) \n    { \n        long curr_sum = 0; \n        for (long j = i; j < arr.length; j++) \n        { \n            curr_sum += arr[j]; \n            if ((j - i + 1) % 2 != 0) \n                sum += curr_sum; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1666122408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n  \n    // Iterate over all subarrays \n    for (long i = 0; i < n; i++) { \n  \n        // Iterate over all subarrays starting with i \n        for (long j = i; j < n; j++) { \n  \n            // Find length of current subarray \n            long len = j - i + 1; \n  \n            // If length is odd, add current subarray \n            if (len & 1) \n                sum += sum_of_array(arr[i..j]); \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1666122407,
      "stdout": "",
      "stderr": "/tmp/tmpka2m84cw.d(23): Error: undefined identifier `sum_of_array`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpka2m84cw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{ \n    long sum = 0; \n    for (int i = 0; i < arr.length; i++) { \n        for (int j = i; j < arr.length; j++) { \n            int len = j - i + 1; \n            if (len % 2 != 0) \n                sum += sum_of_subarray(arr, i, j); \n        } \n    } \n    return sum; \n} \n  \nlong sum_of_subarray(long[] arr, int start, int end) \n{ \n    long sum = 0; \n    for (int i = start; i <= end; i++) \n        sum += arr[i]; \n    return sum; \n} \n  \n// Driver code \nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1666122408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{\n\tlong sum = 0;\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\tfor (int j = i; j < arr.length; j++) \n\t\t{\n\t\t\tif ((j - i + 1) % 2 != 0) \n\t\t\t{\n\t\t\t\tfor (int k = i; k <= j; k++) \n\t\t\t\t{\n\t\t\t\t\tsum += arr[k];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{\n\tlong sum = 0;\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\tfor (int j = i; j < arr.length; j++) \n\t\t{\n\t\t\tif ((j - i + 1) % 2 != 0) \n\t\t\t{\n\t\t\t\tfor (int k = i; k <= j; k++) \n\t\t\t\t{\n\t\t\t\t\tsum += arr[k];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n    for (long i = 0; i < n; i++) \n    { \n        long curr_sum = 0; \n        for (long j = i; j < n; j++) \n        { \n            curr_sum += arr[j]; \n            if (((j - i + 1) & 1) != 0) \n                sum += curr_sum; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1666122408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{ \n    long sum = 0; \n    for (int i = 0; i < arr.length; i++) { \n        for (int j = i; j < arr.length; j++) { \n            if (((j - i + 1) & 1) != 0) { \n                for (int k = i; k <= j; k++) { \n                    sum += arr[k]; \n                } \n            } \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1666122407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{\n\tlong sum = 0;\n\tlong n = arr.length;\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tlong curr_sum = 0;\n\t\tfor (long j = i; j < n; j++) \n\t\t{\n\t\t\tcurr_sum += arr[j];\n\t\t\tif ((j - i + 1) % 2 != 0) \n\t\t\t{\n\t\t\t\tsum += curr_sum;\n\t\t\t}\n\t\t}\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1666122407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{\n    long sum = 0;\n    for (int i = 0; i < arr.length; i++) {\n        for (int j = i; j < arr.length; j++) {\n            int len = j - i + 1;\n            if (len % 2 != 0) {\n                for (int k = i; k <= j; k++) {\n                    sum += arr[k];\n                }\n            }\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1666122408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{ \n    long sum = 0; \n    for (int i = 0; i < arr.length; i++) { \n        for (int j = i; j < arr.length; j++) { \n            if (((j - i + 1) & 1) != 0) { \n                for (int k = i; k <= j; k++) { \n                    sum += arr[k]; \n                } \n            } \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1666122407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{\n\tlong sum = 0;\n\tlong n = arr.length;\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tlong odd_count = (i + 1) * (n - i);\n\t\tsum += arr[i] * odd_count;\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1666122408,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpq6arvt6h.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x4280e5]\n??:? void tmpq6arvt6h.__unittest_L18_C1() [0x427db4]\n??:? void tmpq6arvt6h.__modtest() [0x427e68]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c143]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afd6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430169]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430618]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afad]\n??:? runModuleUnitTests [0x42bf19]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{\n\tlong sum = 0;\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\tfor (int j = i; j < arr.length; j++) \n\t\t{\n\t\t\tif ((j - i + 1) % 2 != 0) \n\t\t\t{\n\t\t\t\tfor (int k = i; k <= j; k++) \n\t\t\t\t{\n\t\t\t\t\tsum += arr[k];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{\n\tlong result = 0;\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\tfor (int j = i; j < arr.length; j++) \n\t\t{\n\t\t\tif ((j - i + 1) % 2 != 0) \n\t\t\t{\n\t\t\t\tfor (int k = i; k <= j; k++) \n\t\t\t\t{\n\t\t\t\t\tresult += arr[k];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1666122408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n    for (long i = 0; i < n; i++) { \n        for (long j = i; j < n; j++) { \n            long len = j - i + 1; \n            if (len % 2 != 0) \n                sum += sum_of_subarray(arr, i, j); \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1666122406,
      "stdout": "",
      "stderr": "/tmp/tmpuf1zgqrr.d(15): Error: undefined identifier `sum_of_subarray`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuf1zgqrr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{\n\tlong sum = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i; j < arr.length; j++) \n\t\t{\n\t\t\tif ((j - i + 1) % 2 != 0) \n\t\t\t{\n\t\t\t\tfor (long k = i; k <= j; k++) \n\t\t\t\t{\n\t\t\t\t\tsum += arr[k];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{ \n    long sum = 0; \n    for (int i = 0; i < arr.length; i++) { \n        for (int j = i; j < arr.length; j++) { \n            if (((j - i + 1) & 1) != 0) { \n                for (int k = i; k <= j; k++) \n                    sum += arr[k]; \n            } \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{\n\tlong sum = 0;\n\tlong n = arr.length;\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tlong curr_sum = 0;\n\t\tfor (long j = i; j < n; j++) \n\t\t{\n\t\t\tcurr_sum += arr[j];\n\t\t\tif ((j - i + 1) % 2 != 0) \n\t\t\t{\n\t\t\t\tsum += curr_sum;\n\t\t\t}\n\t\t}\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1666122407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{\n\tlong sum = 0;\n\tlong n = arr.length;\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong count = 0;\n\tlong l = 0;\n\tlong m = 0;\n\t\n\tfor (i = 0; i < n; i++) \n\t{\n\t\tfor (j = i; j < n; j++) \n\t\t{\n\t\t\tcount = 0;\n\t\t\tfor (k = i; k <= j; k++) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tif (count % 2 != 0) \n\t\t\t{\n\t\t\t\tfor (l = i; l <= j; l++) \n\t\t\t\t{\n\t\t\t\t\tsum += arr[l];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1666122408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{\n\tlong sum = 0;\n\tlong n = arr.length;\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tfor (long j = i; j < n; j++) \n\t\t{\n\t\t\tif ((j - i + 1) % 2 == 1) \n\t\t\t{\n\t\t\t\tfor (long k = i; k <= j; k++) \n\t\t\t\t{\n\t\t\t\t\tsum += arr[k];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1666122407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{\n\tlong sum = 0;\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\tfor (int j = i; j < arr.length; j++) \n\t\t{\n\t\t\tif ((j - i + 1) % 2 != 0) \n\t\t\t{\n\t\t\t\tfor (int k = i; k <= j; k++) \n\t\t\t\t{\n\t\t\t\t\tsum += arr[k];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{\n\tlong sum = 0;\n\tlong n = arr.length;\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tfor (long j = i; j < n; j++) \n\t\t{\n\t\t\tlong len = j - i + 1;\n\t\t\tif (len % 2 == 1) \n\t\t\t{\n\t\t\t\tfor (long k = i; k <= j; k++) \n\t\t\t\t{\n\t\t\t\t\tsum += arr[k];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{\n\tlong sum = 0;\n\tlong n = arr.length;\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tfor (long j = i; j < n; j++) \n\t\t{\n\t\t\tif ((j - i + 1) % 2 != 0) \n\t\t\t{\n\t\t\t\tfor (long k = i; k <= j; k++) \n\t\t\t\t{\n\t\t\t\t\tsum += arr[k];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1666122407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n    for (long i = 0; i < n; i++) { \n        for (long j = i; j < n; j++) { \n            long len = j - i + 1; \n            if (len % 2 != 0) \n                sum += sum_of_subarray(arr, i, j); \n        } \n    } \n    return sum; \n} \n  \nlong sum_of_subarray(long[] arr, long i, long j) \n{ \n    long sum = 0; \n    for (long k = i; k <= j; k++) \n        sum += arr[k]; \n    return sum; \n} \n  \n// Driver code \nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1666122408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{\n\tlong sum = 0;\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\tfor (int j = i; j < arr.length; j++) \n\t\t{\n\t\t\tif ((j - i + 1) % 2 == 1) \n\t\t\t{\n\t\t\t\tfor (int k = i; k <= j; k++) \n\t\t\t\t{\n\t\t\t\t\tsum += arr[k];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1666122407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n    for (long i = 0; i < n; i++) \n    { \n        long curr_sum = 0; \n        for (long j = i; j < n; j++) \n        { \n            curr_sum += arr[j]; \n            if ((j - i + 1) % 2 != 0) \n                sum += curr_sum; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1666122408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{ \n    long sum = 0; \n    for (int i = 0; i < arr.length; i++) { \n        for (int j = i; j < arr.length; j++) { \n            if (((j - i + 1) & 1) != 0) \n                sum += arr[j]; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1666122408,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp64ihs1qc.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x4280f5]\n??:? void tmp64ihs1qc.__unittest_L18_C1() [0x427dc0]\n??:? void tmp64ihs1qc.__modtest() [0x427e74]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c153]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afe6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430179]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430628]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430105]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afbd]\n??:? runModuleUnitTests [0x42bf29]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285b8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n    for (long i = 0; i < n; i++) { \n        for (long j = i; j < n; j++) { \n            long len = j - i + 1; \n            if (len % 2 != 0) \n                sum += sum_of_subarray(arr, i, j); \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1666122406,
      "stdout": "",
      "stderr": "/tmp/tmpuf1zgqrr.d(15): Error: undefined identifier `sum_of_subarray`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuf1zgqrr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{\n\tlong sum = 0;\n\tlong n = arr.length;\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tfor (long j = i; j < n; j++) \n\t\t{\n\t\t\tlong len = j - i + 1;\n\t\t\tif (len & 1) \n\t\t\t{\n\t\t\t\tfor (long k = i; k <= j; k++) \n\t\t\t\t{\n\t\t\t\t\tsum += arr[k];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1666122408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{\n\tlong sum = 0;\n\tlong n = arr.length;\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tsum += ((i + 1) * (n - i) + 1) / 2 * arr[i];\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{\n\tlong sum = 0;\n\tlong n = arr.length;\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tfor (long j = i; j < n; j++) \n\t\t{\n\t\t\tif ((j - i + 1) % 2 != 0) \n\t\t\t{\n\t\t\t\tfor (long k = i; k <= j; k++) \n\t\t\t\t{\n\t\t\t\t\tsum += arr[k];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1666122407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n    for (long i = 0; i < n; i++) { \n        for (long j = i; j < n; j++) { \n            long len = j - i + 1; \n            if (len % 2 != 0) \n                sum += sum_of_subarray(arr, i, j); \n        } \n    } \n    return sum; \n} \nlong sum_of_subarray(long[] arr, long start, long end) \n{ \n    long sum = 0; \n    for (long i = start; i <= end; i++) \n        sum += arr[i]; \n    return sum; \n} \nlong odd_length_sum_opt(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n    for (long i = 0; i < n; i++) { \n        long len = 1; \n        long j = i; \n        while (j < n) { \n            if (len % 2 != 0) \n                sum += sum_of_subarray(arr, i, j); \n            j++; \n            len++; \n        } \n    } \n    return sum; \n} \nlong odd_length_sum_opt_2(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n    for (long i = 0; i < n; i++) { \n        long len = 1; \n        long j = i; \n        while (j < n) { \n            if (len % 2 != 0) \n                sum += sum_of_subarray(arr, i, j); \n            j++; \n            len++; \n        } \n    } \n    return sum; \n} \nlong odd_length_sum_opt_3(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n    for (long i = 0; i < n; i++) { \n        long len = 1;\nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1666122407,
      "stdout": "",
      "stderr": "/tmp/tmpdyati_9k.d(65): Error: found `unittest` instead of statement\n/tmp/tmpdyati_9k.d(73): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdyati_9k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{\n\tlong sum = 0;\n\tlong n = arr.length;\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tfor (int j = i; j < n; j++) \n\t\t{\n\t\t\tif ((j - i + 1) % 2 == 1) \n\t\t\t{\n\t\t\t\tfor (int k = i; k <= j; k++) \n\t\t\t\t{\n\t\t\t\t\tsum += arr[k];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1666122408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{ \n    long sum = 0; \n    for (int i = 0; i < arr.length; i++) \n    { \n        long curr_sum = 0; \n        for (int j = i; j < arr.length; j++) \n        { \n            curr_sum += arr[j]; \n            if (((j - i + 1) & 1) != 0) \n                sum += curr_sum; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1666122407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{ \n    long sum = 0; \n    for (int i = 0; i < arr.length; i++) { \n        for (int j = i; j < arr.length; j++) { \n            if (((j - i + 1) & 1) != 0) \n                sum += arr[j]; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1666122408,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp64ihs1qc.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x4280f5]\n??:? void tmp64ihs1qc.__unittest_L18_C1() [0x427dc0]\n??:? void tmp64ihs1qc.__modtest() [0x427e74]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c153]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afe6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430179]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430628]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430105]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afbd]\n??:? runModuleUnitTests [0x42bf29]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285b8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{ \n    long sum = 0; \n    for (int i = 0; i < arr.length; i++) { \n        long curr_sum = 0; \n        for (int j = i; j < arr.length; j++) { \n            curr_sum += arr[j]; \n            if ((j - i + 1) % 2 != 0) \n                sum += curr_sum; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1666122408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{\n\tlong sum = 0;\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\tfor (int j = i; j < arr.length; j++) \n\t\t{\n\t\t\tif ((j - i + 1) % 2 != 0) \n\t\t\t{\n\t\t\t\tfor (int k = i; k <= j; k++) \n\t\t\t\t{\n\t\t\t\t\tsum += arr[k];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{\n\tlong sum = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i; j < arr.length; j++) \n\t\t{\n\t\t\tif ((j - i + 1) % 2 != 0) \n\t\t\t{\n\t\t\t\tfor (long k = i; k <= j; k++) \n\t\t\t\t{\n\t\t\t\t\tsum += arr[k];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{\n\tlong sum = 0;\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\tfor (int j = i; j < arr.length; j++) \n\t\t{\n\t\t\tif ((j - i + 1) % 2 == 1) \n\t\t\t{\n\t\t\t\tfor (int k = i; k <= j; k++) \n\t\t\t\t{\n\t\t\t\t\tsum += arr[k];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1666122407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{\n\tlong sum = 0;\n\tlong n = arr.length;\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tlong curr_sum = 0;\n\t\tfor (long j = i; j < n; j++) \n\t\t{\n\t\t\tcurr_sum += arr[j];\n\t\t\tif ((j - i + 1) % 2 != 0) \n\t\t\t{\n\t\t\t\tsum += curr_sum;\n\t\t\t}\n\t\t}\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1666122407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{\n\tlong sum = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i; j < arr.length; j++) \n\t\t{\n\t\t\tif ((j - i + 1) % 2 != 0) \n\t\t\t{\n\t\t\t\tfor (long k = i; k <= j; k++) \n\t\t\t\t{\n\t\t\t\t\tsum += arr[k];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n    for (long i = 0; i < n; i++) { \n        for (long j = i; j < n; j++) { \n            long len = j - i + 1; \n            if (len % 2 == 1) \n                sum += sum_of_subarray(arr, i, j); \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1666122407,
      "stdout": "",
      "stderr": "/tmp/tmpx07dlpwz.d(15): Error: undefined identifier `sum_of_subarray`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx07dlpwz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n    for (long i = 0; i < n; i++) { \n        for (long j = i; j < n; j++) { \n            long len = j - i + 1; \n            if (len % 2 != 0) \n                sum += sum_of_subarray(arr, i, j); \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1666122406,
      "stdout": "",
      "stderr": "/tmp/tmpuf1zgqrr.d(15): Error: undefined identifier `sum_of_subarray`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuf1zgqrr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n  \n    // Iterate over all subarrays \n    for (long i = 0; i < n; i++) { \n  \n        // Iterate over all subarrays starting with i \n        for (long j = i; j < n; j++) { \n  \n            // Calculate length of subarray \n            long len = j - i + 1; \n  \n            // Add current subarray if length is odd \n            if (len & 1) \n                sum += sum_of_array(arr[i..j]); \n        } \n    } \n  \n    return sum; \n} \n  \n// Driver code \nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1666122407,
      "stdout": "",
      "stderr": "/tmp/tmpd07_70r0.d(23): Error: undefined identifier `sum_of_array`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd07_70r0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{ \n    long sum = 0; \n    for (int i = 0; i < arr.length; i++) { \n        for (int j = i; j < arr.length; j++) { \n            if (((j - i + 1) & 1) != 0) { \n                for (int k = i; k <= j; k++) \n                    sum += arr[k]; \n            } \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n    for (long i = 0; i < n; i++) { \n        for (long j = i; j < n; j++) { \n            long len = j - i + 1; \n            if (len % 2 != 0) \n                sum += (len * (len + 1)) / 2; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpl7of9v0y.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x4280f5]\n??:? void tmpl7of9v0y.__unittest_L20_C1() [0x427dc0]\n??:? void tmpl7of9v0y.__modtest() [0x427e74]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0df]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af72]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430105]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305b4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430091]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af49]\n??:? runModuleUnitTests [0x42beb5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428544]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{\n\tlong sum = 0;\n\tlong n = arr.length;\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tsum += ((i + 1) * (n - i) + 1) / 2 * arr[i];\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{\n\tlong sum = 0;\n\tlong n = arr.length;\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tfor (long j = i; j < n; j++) \n\t\t{\n\t\t\tlong len = j - i + 1;\n\t\t\tif (len % 2 != 0) \n\t\t\t{\n\t\t\t\tfor (long k = i; k <= j; k++) \n\t\t\t\t{\n\t\t\t\t\tsum += arr[k];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1666122408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{\n\tlong sum = 0;\n\tlong n = arr.length;\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tsum += ((i + 1) * (n - i) + 1) / 2 * arr[i];\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n  \n    // Iterate over all subarrays \n    for (long i = 0; i < n; i++) \n    { \n        // Iterate over all subarrays starting at i \n        for (long j = i; j < n; j++) \n        { \n            // Sum all elements of current subarray \n            long curr_sum = 0; \n            for (long k = i; k <= j; k++) \n                curr_sum += arr[k]; \n  \n            // If length of current subarray is odd \n            if ((j - i + 1) % 2 != 0) \n                sum += curr_sum; \n        } \n    } \n  \n    return sum; \n} \nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1666122408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{\n\tlong sum = 0;\n\tlong n = arr.length;\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tlong curr_sum = 0;\n\t\tfor (long j = i; j < n; j++) \n\t\t{\n\t\t\tcurr_sum += arr[j];\n\t\t\tif ((j - i + 1) % 2 != 0) \n\t\t\t{\n\t\t\t\tsum += curr_sum;\n\t\t\t}\n\t\t}\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1666122407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n    for (long i = 0; i < n; i++) \n    { \n        long curr_sum = 0; \n        for (long j = i; j < n; j++) \n        { \n            curr_sum += arr[j]; \n            if ((j - i + 1) % 2 == 1) \n                sum += curr_sum; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1666122407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{\n\tlong sum = 0;\n\tint n = arr.length;\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tfor (int j = i; j < n; j++) \n\t\t{\n\t\t\tint len = j - i + 1;\n\t\t\tif (len % 2 == 1) \n\t\t\t{\n\t\t\t\tsum += sum(arr[i..j]);\n\t\t\t}\n\t\t}\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1666122407,
      "stdout": "",
      "stderr": "/tmp/tmpc5l40vt6.d(10): Error: cannot implicitly convert expression `arr.length` of type `ulong` to `int`\n/tmp/tmpc5l40vt6.d(18): Error: function expected before `()`, not `sum` of type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc5l40vt6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{\n\tlong sum = 0;\n\tlong n = arr.length;\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tfor (long j = i; j < n; j++) \n\t\t{\n\t\t\tif ((j - i + 1) % 2 == 1) \n\t\t\t{\n\t\t\t\tfor (long k = i; k <= j; k++) \n\t\t\t\t{\n\t\t\t\t\tsum += arr[k];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1666122407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{\n\tlong sum = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tfor (long j = i; j < arr.length; j++) \n\t\t{\n\t\t\tif ((j - i + 1) % 2 != 0) \n\t\t\t{\n\t\t\t\tfor (long k = i; k <= j; k++) \n\t\t\t\t{\n\t\t\t\t\tsum += arr[k];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{ \n    long sum = 0; \n    for (int i = 0; i < arr.length; i++) { \n        for (int j = i; j < arr.length; j++) { \n            if ((j - i + 1) % 2 != 0) { \n                for (int k = i; k <= j; k++) { \n                    sum += arr[k]; \n                } \n            } \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1666122407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{\n\tlong sum = 0;\n\tint n = arr.length;\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tfor (int j = i; j < n; j++) \n\t\t{\n\t\t\tint len = j - i + 1;\n\t\t\tif (len % 2 == 1) \n\t\t\t{\n\t\t\t\tfor (int k = i; k <= j; k++) \n\t\t\t\t{\n\t\t\t\t\tsum += arr[k];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1666122407,
      "stdout": "",
      "stderr": "/tmp/tmp2t6byoav.d(10): Error: cannot implicitly convert expression `arr.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2t6byoav.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n    for (long i = 0; i < n; i++) { \n        for (long j = i; j < n; j++) { \n            long len = j - i + 1; \n            if (len % 2 == 1) \n                sum += (len * (len + 1)) / 2; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1666122407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmplkgrd0xd.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x4280f5]\n??:? void tmplkgrd0xd.__unittest_L20_C1() [0x427dc4]\n??:? void tmplkgrd0xd.__modtest() [0x427e78]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0df]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af72]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430105]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4305b4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430091]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af49]\n??:? runModuleUnitTests [0x42beb5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428544]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{ \n    long sum = 0; \n    long n = arr.length; \n    for (long i = 0; i < n; i++) { \n        for (long j = i; j < n; j++) { \n            long len = j - i + 1; \n            if (len % 2 != 0) \n                sum += sum_of_subarray(arr, i, j); \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1666122406,
      "stdout": "",
      "stderr": "/tmp/tmpuf1zgqrr.d(15): Error: undefined identifier `sum_of_subarray`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuf1zgqrr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{ \n    long sum = 0; \n    for (int i = 0; i < arr.length; i++) { \n        for (int j = i; j < arr.length; j++) { \n            if (((j - i + 1) & 1) != 0) { \n                for (int k = i; k <= j; k++) { \n                    sum += arr[k]; \n                } \n            } \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1666122407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{\n\tlong sum = 0;\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\tfor (int j = i; j < arr.length; j++) \n\t\t{\n\t\t\tif ((j - i + 1) % 2 != 0) \n\t\t\t{\n\t\t\t\tfor (int k = i; k <= j; k++) \n\t\t\t\t{\n\t\t\t\t\tsum += arr[k];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn sum;\n}\nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\n*/\nlong odd_length_sum(long[] arr) \n{ \n    long sum = 0; \n    for (long i = 0; i < arr.length; i++) \n    { \n        long curr_sum = 0; \n        for (long j = i; j < arr.length; j++) \n        { \n            curr_sum += arr[j]; \n            if (((j - i + 1) & 1) != 0) \n                sum += curr_sum; \n        } \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}",
      "timestamp": 1666122408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}