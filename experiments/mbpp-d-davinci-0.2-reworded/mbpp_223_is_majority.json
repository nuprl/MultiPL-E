{
  "name": "mbpp_223_is_majority",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\n*/\nbool is_majority(long[] arr, long n, long x) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_223_is_majority.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{ \n    long i = 0; \n    long j = n - 1; \n    long mid = (i + j) / 2; \n    while (i < j) \n    { \n        if (arr[mid] == x && arr[mid + n/2] == x) \n            return true; \n        else if (arr[mid] < x) \n            i = mid + 1; \n        else\n            j = mid - 1; \n  \n        mid = (i + j) / 2; \n    } \n    return false; \n} ",
    "{ \n    long i = 0; \n    long j = n - 1; \n    long mid = (i + j) / 2; \n    while (i <= j) \n    { \n        if (arr[mid] == x && (mid == 0 || x != arr[mid - 1])) \n            break; \n        else if (arr[mid] >= x) \n            j = mid - 1; \n        else\n            i = mid + 1; \n        mid = (i + j) / 2; \n    } \n    if (i > j) \n        return false; \n    if ((mid + n / 2) <= (n - 1) && arr[mid + n / 2] == x) \n        return true; \n    else\n        return false; \n} ",
    "{ \n    long i = 0; \n    long j = n - 1; \n    long mid = (i + j) / 2; \n    while (i <= j) \n    { \n        if (arr[mid] == x && (mid == 0 || x > arr[mid - 1])) \n            break; \n        else if (x > arr[mid]) \n            i = mid + 1; \n        else\n            j = mid - 1; \n        mid = (i + j) / 2; \n    } \n    if (i > j) \n        return false; \n    if ((mid + n / 2) <= (n - 1) && arr[mid + n / 2] == x) \n        return true; \n    else\n        return false; \n} ",
    "{\n\tlong count = 0;\n\tforeach(i; 0 .. n)\n\t{\n\t\tif(arr[i] == x)\n\t\t\tcount++;\n\t}\n\treturn count > n/2;\n}",
    "{\n\tlong count = 0;\n\tforeach(i; 0 .. n)\n\t{\n\t\tif(arr[i] == x)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count > n/2;\n}",
    "{\n\tlong count = 0;\n\tforeach(i; 0 .. n) \n\t{\n\t\tif(arr[i] == x) \n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count > n/2;\n}",
    "{\n\tlong count = 0;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tif(arr[i] == x)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count > n / 2;\n}",
    "{ \n    long i = 0; \n    long j = n - 1; \n    long mid = 0; \n    while (i <= j) \n    { \n        mid = (i + j) / 2; \n        if (arr[mid] == x) \n            break; \n        else if (arr[mid] < x) \n            i = mid + 1; \n        else\n            j = mid - 1; \n    } \n    if (i > j) \n        return false; \n    if ((mid + n / 2 <= (n - 1)) && arr[mid + n / 2] == x) \n        return true; \n    else if (mid - n / 2 >= 0 && arr[mid - n / 2] == x) \n        return true; \n    else\n        return false; \n} ",
    "{\n\tlong count = 0;\n\tforeach(i; 0 .. n)\n\t{\n\t\tif(arr[i] == x)\n\t\t\tcount++;\n\t}\n\tif(count > n/2)\n\t\treturn true;\n\telse\n\t\treturn false;\n}",
    "{\n\tlong count = 0;\n\tforeach(i; 0..n)\n\t{\n\t\tif(arr[i] == x)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count > n/2;\n}",
    "{\n\tlong count = 0;\n\tforeach(i; 0 .. n)\n\t{\n\t\tif(arr[i] == x)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count > n/2;\n}",
    "{\n\tlong count = 0;\n\tforeach(i; 0 .. n) \n\t{\n\t\tif(arr[i] == x) \n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count > n / 2;\n}",
    "{\n\tlong count = 0;\n\tforeach(i; 0..n)\n\t{\n\t\tif(arr[i] == x)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\tif(count > n/2)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}",
    "{\n\tlong count = 0;\n\tforeach(i; 0 .. n)\n\t{\n\t\tif(arr[i] == x)\n\t\t\tcount++;\n\t}\n\tif(count > n/2)\n\t\treturn true;\n\telse\n\t\treturn false;\n}",
    "{\n\tlong count = 0;\n\tforeach(i; 0..n)\n\t{\n\t\tif(arr[i] == x)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count > n/2;\n}",
    "{\n\tlong count = 0;\n\tforeach(i; 0 .. n)\n\t{\n\t\tif(arr[i] == x)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count > n/2;\n}",
    "{\n\tlong count = 0;\n\tforeach(i; 0 .. n) \n\t{\n\t\tif(arr[i] == x) \n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count > n / 2;\n}",
    "{\n\tlong count = 0;\n\tforeach(i; arr)\n\t{\n\t\tif(i == x)\n\t\t\tcount++;\n\t}\n\treturn count > n/2;\n}",
    "{\n\tlong count = 0;\n\tforeach(i; 0..n) \n\t{\n\t\tif(arr[i] == x) \n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count > (n / 2);\n}",
    "{\n\tlong count = 0;\n\tforeach(i; arr)\n\t{\n\t\tif(i == x)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\tif(count > n/2)\n\t{\n\t\treturn true;\n\t}\n\treturn false;\n}"
  ]
}