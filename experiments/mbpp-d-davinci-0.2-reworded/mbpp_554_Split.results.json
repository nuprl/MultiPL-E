{
  "name": "mbpp_554_Split",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_554_Split.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[list.length];\n\tint count = 0;\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd[count] = i;\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpl86i8y54.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x4283e5]\n??:? void tmpl86i8y54.__unittest_L22_C1() [0x427f71]\n??:? void tmpl86i8y54.__modtest() [0x428164]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c49f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b332]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305bd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a6c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430549]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b309]\n??:? runModuleUnitTests [0x42c275]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] result;\n\tforeach(i;list)\n\t{\n\t\tif(i%2==1)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = [];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 1)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(i;list)\n\t{\n\t\tif(i%2==1)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] result;\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 1)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odds = new long[];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todds ~= i;\n\t\t}\n\t}\n\treturn odds;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517465,
      "stdout": "",
      "stderr": "/tmp/tmpy4cbmwvk.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy4cbmwvk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517465,
      "stdout": "",
      "stderr": "/tmp/tmp8r4b4n0p.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8r4b4n0p.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odds = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 == 1)\n\t\t{\n\t\t\todds ~= i;\n\t\t}\n\t}\n\treturn odds;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] result;\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 1)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] result;\n\tforeach(item; list)\n\t{\n\t\tif(item % 2 == 1)\n\t\t{\n\t\t\tresult ~= item;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(int i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517465,
      "stdout": "",
      "stderr": "/tmp/tmp462n6ygq.d(11): Error: cannot implicitly convert expression `__r73[__key74]` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp462n6ygq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[list.length];\n\tint j = 0;\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd[j] = i;\n\t\t\tj++;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp8sd7k2e_.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x4283e5]\n??:? void tmp8sd7k2e_.__unittest_L22_C1() [0x427f71]\n??:? void tmp8sd7k2e_.__modtest() [0x428164]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c49f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b332]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305bd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a6c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430549]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b309]\n??:? runModuleUnitTests [0x42c275]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] result;\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 1)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tlong[] even = new long[0];\n\tforeach(i; 0 .. list.length)\n\t{\n\t\tif(list[i] % 2 == 0)\n\t\t{\n\t\t\teven ~= list[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\todd ~= list[i];\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[list.length];\n\tint count = 0;\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd[count] = i;\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn odd[0..count];\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odds = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todds ~= i;\n\t\t}\n\t}\n\treturn odds;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] result;\n\tforeach(item; list)\n\t{\n\t\tif(item % 2 == 1)\n\t\t{\n\t\t\tresult ~= item;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] result;\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 1)\n\t\t\tresult ~= i;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach (i; list)\n\t{\n\t\tif (i % 2 != 0)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[list.length];\n\tint j = 0;\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd[j] = i;\n\t\t\tj++;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp8sd7k2e_.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x4283e5]\n??:? void tmp8sd7k2e_.__unittest_L22_C1() [0x427f71]\n??:? void tmp8sd7k2e_.__modtest() [0x428164]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c49f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b332]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305bd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a6c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430549]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b309]\n??:? runModuleUnitTests [0x42c275]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odds;\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todds ~= i;\n\t\t}\n\t}\n\treturn odds;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 == 1)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 1)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123061,
      "stdout": "",
      "stderr": "/tmp/tmpi4ucv81o.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi4ucv81o.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] oddList = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\toddList ~= i;\n\t\t}\n\t}\n\treturn oddList;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(i; list) \n\t{\n\t\tif(i % 2 == 1) \n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 1)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123061,
      "stdout": "",
      "stderr": "/tmp/tmpi4ucv81o.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi4ucv81o.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] result;\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 1)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[list.length];\n\tint j = 0;\n\tfor (int i = 0; i < list.length; i++)\n\t{\n\t\tif (list[i] % 2 == 1)\n\t\t{\n\t\t\todd[j] = list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123061,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpmm9wto5c.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x428405]\n??:? void tmpmm9wto5c.__unittest_L22_C1() [0x427f95]\n??:? void tmpmm9wto5c.__modtest() [0x428188]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4bf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b352]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305dd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a8c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430569]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b329]\n??:? runModuleUnitTests [0x42c295]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288c8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] oddList = new long[];\n\tforeach(num; list)\n\t{\n\t\tif(num % 2 != 0)\n\t\t{\n\t\t\toddList ~= num;\n\t\t}\n\t}\n\treturn oddList;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123061,
      "stdout": "",
      "stderr": "/tmp/tmpc9di4mac.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc9di4mac.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[];\n\tforeach(int i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t\todd ~= i;\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123061,
      "stdout": "",
      "stderr": "/tmp/tmpzddf64ta.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\n/tmp/tmpzddf64ta.d(11): Error: cannot implicitly convert expression `__r73[__key74]` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzddf64ta.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] result;\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odds = new long[list.length];\n\tint j = 0;\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todds[j] = i;\n\t\t\tj++;\n\t\t}\n\t}\n\treturn odds;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123061,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpgb_hv9fq.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x4283e5]\n??:? void tmpgb_hv9fq.__unittest_L22_C1() [0x427f71]\n??:? void tmpgb_hv9fq.__modtest() [0x428164]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c49f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b332]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305bd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a6c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430549]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b309]\n??:? runModuleUnitTests [0x42c275]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 1)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 1)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] result = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odds = new long[];\n\tforeach(num; list)\n\t{\n\t\tif(num % 2 == 1)\n\t\t{\n\t\t\todds ~= num;\n\t\t}\n\t}\n\treturn odds;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123061,
      "stdout": "",
      "stderr": "/tmp/tmpngrluh_9.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpngrluh_9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif (i % 2 != 0)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odds = new long[list.length];\n\tint i = 0;\n\tforeach(long item; list)\n\t{\n\t\tif(item % 2 != 0)\n\t\t{\n\t\t\todds[i] = item;\n\t\t\ti++;\n\t\t}\n\t}\n\treturn odds;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123061,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpuggb999d.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x4283e5]\n??:? void tmpuggb999d.__unittest_L22_C1() [0x427f71]\n??:? void tmpuggb999d.__modtest() [0x428164]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c49f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b332]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305bd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a6c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430549]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b309]\n??:? runModuleUnitTests [0x42c275]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[list.length];\n\tint j = 0;\n\tfor (int i = 0; i < list.length; i++)\n\t{\n\t\tif (list[i] % 2 != 0)\n\t\t{\n\t\t\todd[j] = list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123061,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpzw8ht3lp.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x428405]\n??:? void tmpzw8ht3lp.__unittest_L22_C1() [0x427f95]\n??:? void tmpzw8ht3lp.__modtest() [0x428188]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4bf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b352]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305dd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a8c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430569]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b329]\n??:? runModuleUnitTests [0x42c295]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288c8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 1)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123061,
      "stdout": "",
      "stderr": "/tmp/tmpi4ucv81o.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi4ucv81o.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 1)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 1)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odds = new long[];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 1)\n\t\t{\n\t\t\todds ~= i;\n\t\t}\n\t}\n\treturn odds;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123061,
      "stdout": "",
      "stderr": "/tmp/tmpwj4nlp2_.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwj4nlp2_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] result;\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 1)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 1)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[list.length];\n\tint j = 0;\n\tfor (int i = 0; i < list.length; i++)\n\t{\n\t\tif (list[i] % 2 == 1)\n\t\t{\n\t\t\todd[j] = list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123061,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpmm9wto5c.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x428405]\n??:? void tmpmm9wto5c.__unittest_L22_C1() [0x427f95]\n??:? void tmpmm9wto5c.__modtest() [0x428188]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4bf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b352]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305dd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a8c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430569]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b329]\n??:? runModuleUnitTests [0x42c295]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288c8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] result;\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 1)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 == 1)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(i; list) \n\t{\n\t\tif(i % 2 != 0) \n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[list.length];\n\tint j = 0;\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd[j] = i;\n\t\t\tj++;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp8sd7k2e_.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x4283e5]\n??:? void tmp8sd7k2e_.__unittest_L22_C1() [0x427f71]\n??:? void tmp8sd7k2e_.__modtest() [0x428164]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c49f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b332]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305bd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a6c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430549]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b309]\n??:? runModuleUnitTests [0x42c275]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 1)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[];\n\tforeach(item; list)\n\t{\n\t\tif(item % 2 != 0)\n\t\t{\n\t\t\todd ~= item;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123061,
      "stdout": "",
      "stderr": "/tmp/tmpna25rjb4.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpna25rjb4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] oddList = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 == 1)\n\t\t{\n\t\t\toddList ~= i;\n\t\t}\n\t}\n\treturn oddList;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = [];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] oddList = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\toddList ~= i;\n\t\t}\n\t}\n\treturn oddList;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] result;\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 1)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odds = new long[list.length];\n\tint count = 0;\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 1)\n\t\t{\n\t\t\todds[count] = i;\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn odds[0..count];\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[];\n\tforeach(i; list)\n\t{\n\t\tif (i % 2 == 1)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123061,
      "stdout": "",
      "stderr": "/tmp/tmpx3adik4q.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx3adik4q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517465,
      "stdout": "",
      "stderr": "/tmp/tmp8r4b4n0p.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8r4b4n0p.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] result;\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 1)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[list.length];\n\tint j = 0;\n\tfor (int i = 0; i < list.length; i++)\n\t{\n\t\tif (list[i] % 2 == 1)\n\t\t{\n\t\t\todd[j] = list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123061,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpmm9wto5c.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x428405]\n??:? void tmpmm9wto5c.__unittest_L22_C1() [0x427f95]\n??:? void tmpmm9wto5c.__modtest() [0x428188]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4bf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b352]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305dd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a8c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430569]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b329]\n??:? runModuleUnitTests [0x42c295]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288c8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] result;\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 1)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t\todd ~= i;\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] result;\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 1)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(int i; list)\n\t{\n\t\tif(i % 2 == 1)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123061,
      "stdout": "",
      "stderr": "/tmp/tmpjlxdb1x_.d(11): Error: cannot implicitly convert expression `__r73[__key74]` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjlxdb1x_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] result;\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 1)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517465,
      "stdout": "",
      "stderr": "/tmp/tmp8r4b4n0p.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8r4b4n0p.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(int i; list)\n\t{\n\t\tif(i % 2 == 1)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123061,
      "stdout": "",
      "stderr": "/tmp/tmpjlxdb1x_.d(11): Error: cannot implicitly convert expression `__r73[__key74]` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjlxdb1x_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 1)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] oddList;\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 1)\n\t\t{\n\t\t\toddList ~= i;\n\t\t}\n\t}\n\treturn oddList;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = [];\n\tforeach (item; list) \n\t{\n\t\tif (item % 2 == 1) \n\t\t{\n\t\t\todd ~= item;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[list.length];\n\tint j = 0;\n\tfor (int i = 0; i < list.length; i++)\n\t{\n\t\tif (list[i] % 2 != 0)\n\t\t{\n\t\t\todd[j] = list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123061,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpzw8ht3lp.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x428405]\n??:? void tmpzw8ht3lp.__unittest_L22_C1() [0x427f95]\n??:? void tmpzw8ht3lp.__modtest() [0x428188]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4bf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b352]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305dd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a8c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430569]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b329]\n??:? runModuleUnitTests [0x42c295]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288c8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] result = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 1)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] result = new long[0];\n\tforeach(i; list) \n\t{\n\t\tif(i % 2 == 1) \n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517465,
      "stdout": "",
      "stderr": "/tmp/tmp8r4b4n0p.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8r4b4n0p.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] ret = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 1)\n\t\t{\n\t\t\tret ~= i;\n\t\t}\n\t}\n\treturn ret;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] result;\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] result;\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odds;\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 1)\n\t\t{\n\t\t\todds ~= i;\n\t\t}\n\t}\n\treturn odds;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] oddList = new long[];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\toddList ~= i;\n\t\t}\n\t}\n\treturn oddList;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmphxba8bpt.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphxba8bpt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odds = new long[];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 1)\n\t\t{\n\t\t\todds ~= i;\n\t\t}\n\t}\n\treturn odds;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123061,
      "stdout": "",
      "stderr": "/tmp/tmpwj4nlp2_.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwj4nlp2_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517465,
      "stdout": "",
      "stderr": "/tmp/tmp8r4b4n0p.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8r4b4n0p.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[list.length];\n\tint j = 0;\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd[j] = i;\n\t\t\tj++;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp8sd7k2e_.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x4283e5]\n??:? void tmp8sd7k2e_.__unittest_L22_C1() [0x427f71]\n??:? void tmp8sd7k2e_.__modtest() [0x428164]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c49f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b332]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305bd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a6c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430549]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b309]\n??:? runModuleUnitTests [0x42c275]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tlong[] even = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven ~= i;\n\t\t}\n\t\telse\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] result;\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odds = new long[];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 1)\n\t\t{\n\t\t\todds ~= i;\n\t\t}\n\t}\n\treturn odds;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123061,
      "stdout": "",
      "stderr": "/tmp/tmpwj4nlp2_.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwj4nlp2_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] result;\n\tforeach(i;list)\n\t{\n\t\tif(i%2!=0)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[list.length];\n\tint j = 0;\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd[j] = i;\n\t\t\tj++;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp8sd7k2e_.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x4283e5]\n??:? void tmp8sd7k2e_.__unittest_L22_C1() [0x427f71]\n??:? void tmp8sd7k2e_.__modtest() [0x428164]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c49f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b332]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305bd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a6c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430549]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b309]\n??:? runModuleUnitTests [0x42c275]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] result = new long[];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 1)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmp976n0qk4.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp976n0qk4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odds = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todds ~= i;\n\t\t}\n\t}\n\treturn odds;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 1)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = [];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 1)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[list.length];\n\tint j = 0;\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd[j] = i;\n\t\t\tj++;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp8sd7k2e_.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x4283e5]\n??:? void tmp8sd7k2e_.__unittest_L22_C1() [0x427f71]\n??:? void tmp8sd7k2e_.__modtest() [0x428164]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c49f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b332]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305bd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a6c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430549]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b309]\n??:? runModuleUnitTests [0x42c275]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] result;\n\tforeach(i;list)\n\t{\n\t\tif(i%2!=0)\n\t\t{\n\t\t\tresult~=i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tauto odd = new long[];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmpzzltnzyi.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzzltnzyi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(i; list) \n\t{\n\t\tif(i % 2 != 0) \n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[list.length];\n\tint j = 0;\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd[j] = i;\n\t\t\tj++;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp8sd7k2e_.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x4283e5]\n??:? void tmp8sd7k2e_.__unittest_L22_C1() [0x427f71]\n??:? void tmp8sd7k2e_.__modtest() [0x428164]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c49f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b332]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305bd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a6c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430549]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b309]\n??:? runModuleUnitTests [0x42c275]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odds = new long[];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todds ~= i;\n\t\t}\n\t}\n\treturn odds;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517465,
      "stdout": "",
      "stderr": "/tmp/tmpy4cbmwvk.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy4cbmwvk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odds = [];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 1)\n\t\t{\n\t\t\todds ~= i;\n\t\t}\n\t}\n\treturn odds;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] result;\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odds = new long[];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todds ~= i;\n\t\t}\n\t}\n\treturn odds;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517465,
      "stdout": "",
      "stderr": "/tmp/tmpy4cbmwvk.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy4cbmwvk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odds = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 1)\n\t\t{\n\t\t\todds ~= i;\n\t\t}\n\t}\n\treturn odds;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odds;\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 1)\n\t\t{\n\t\t\todds ~= i;\n\t\t}\n\t}\n\treturn odds;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] result = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 1)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\t\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\t\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[list.length];\n\tint j = 0;\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 1)\n\t\t{\n\t\t\todd[j] = i;\n\t\t\tj++;\n\t\t}\n\t}\n\treturn odd[0..j];\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[list.length];\n\tint j = 0;\n\tfor (int i = 0; i < list.length; i++) \n\t{\n\t\tif (list[i] % 2 != 0) \n\t\t{\n\t\t\todd[j] = list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpkud2q9hj.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x428405]\n??:? void tmpkud2q9hj.__unittest_L22_C1() [0x427f95]\n??:? void tmpkud2q9hj.__modtest() [0x428188]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4bf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b352]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305dd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a8c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430569]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b329]\n??:? runModuleUnitTests [0x42c295]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288c8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[];\n\tforeach(int i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmplw91pt7h.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\n/tmp/tmplw91pt7h.d(11): Error: cannot implicitly convert expression `__r73[__key74]` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplw91pt7h.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd_list;\n\tforeach(item; list)\n\t{\n\t\tif(item % 2 != 0)\n\t\t{\n\t\t\todd_list ~= item;\n\t\t}\n\t}\n\treturn odd_list;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[list.length];\n\tlong[] even = new long[list.length];\n\tlong[] result = new long[list.length];\n\tint odd_index = 0;\n\tint even_index = 0;\n\t\n\tforeach(i; 0 .. list.length)\n\t{\n\t\tif(list[i] % 2 == 0)\n\t\t{\n\t\t\teven[even_index] = list[i];\n\t\t\teven_index++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\todd[odd_index] = list[i];\n\t\t\todd_index++;\n\t\t}\n\t}\n\t\n\tresult = odd ~ even;\n\treturn result;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpdx4tn85y.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x4284ad]\n??:? void tmpdx4tn85y.__unittest_L33_C1() [0x42803d]\n??:? void tmpdx4tn85y.__modtest() [0x428230]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6af]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b542]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430685]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b34]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430611]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b519]\n??:? runModuleUnitTests [0x42c485]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428970]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 1)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 1)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(item; list)\n\t{\n\t\tif(item % 2 != 0)\n\t\t{\n\t\t\todd ~= item;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odds;\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todds ~= i;\n\t\t}\n\t}\n\treturn odds;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odds;\n\tforeach(i; list) \n\t{\n\t\tif(i % 2 == 1) \n\t\t{\n\t\t\todds ~= i;\n\t\t}\n\t}\n\treturn odds;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 1)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123061,
      "stdout": "",
      "stderr": "/tmp/tmpi4ucv81o.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi4ucv81o.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] result;\n\tforeach(item; list)\n\t{\n\t\tif (item % 2 != 0)\n\t\t{\n\t\t\tresult ~= item;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] result;\n\tforeach(item; list)\n\t{\n\t\tif(item % 2 != 0)\n\t\t{\n\t\t\tresult ~= item;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 1)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = [];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 1)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odds = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todds ~= i;\n\t\t}\n\t}\n\treturn odds;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 1)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123061,
      "stdout": "",
      "stderr": "/tmp/tmpi4ucv81o.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi4ucv81o.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] result;\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odds;\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 1)\n\t\t{\n\t\t\todds ~= i;\n\t\t}\n\t}\n\treturn odds;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] result = [];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 1)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517465,
      "stdout": "",
      "stderr": "/tmp/tmp8r4b4n0p.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8r4b4n0p.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] result;\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] result;\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] result = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] result;\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 1)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 1)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] oddList;\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\toddList ~= i;\n\t\t}\n\t}\n\treturn oddList;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = [];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 1)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[list.length];\n\tint i = 0;\n\tforeach(long x; list)\n\t{\n\t\tif(x % 2 != 0)\n\t\t{\n\t\t\todd[i] = x;\n\t\t\ti++;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmph035wwnj.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x4283e5]\n??:? void tmph035wwnj.__unittest_L22_C1() [0x427f71]\n??:? void tmph035wwnj.__modtest() [0x428164]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c49f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b332]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305bd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a6c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430549]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b309]\n??:? runModuleUnitTests [0x42c275]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 1)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] oddList;\n\tforeach(i;list)\n\t{\n\t\tif(i%2!=0)\n\t\t{\n\t\t\toddList ~= i;\n\t\t}\n\t}\n\treturn oddList;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] result;\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 1)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 1)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] result;\n\tforeach(i; list)\n\t{\n\t\tif(i % 2)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] result;\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 1)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] result;\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 1)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] oddList = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t\toddList ~= i;\n\t}\n\treturn oddList;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517465,
      "stdout": "",
      "stderr": "/tmp/tmp8r4b4n0p.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8r4b4n0p.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(int i; list)\n\t{\n\t\tif(i % 2 == 1)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123061,
      "stdout": "",
      "stderr": "/tmp/tmpjlxdb1x_.d(11): Error: cannot implicitly convert expression `__r73[__key74]` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjlxdb1x_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] result;\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 1)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach (i; list)\n\t{\n\t\tif (i % 2 == 1)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 1)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[];\n\tforeach(int i; list)\n\t{\n\t\tif(i % 2 == 1)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmpn8tw8wte.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\n/tmp/tmpn8tw8wte.d(11): Error: cannot implicitly convert expression `__r73[__key74]` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn8tw8wte.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[list.length];\n\tint j = 0;\n\tfor (int i = 0; i < list.length; i++)\n\t{\n\t\tif (list[i] % 2 != 0)\n\t\t{\n\t\t\todd[j] = list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123061,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpzw8ht3lp.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x428405]\n??:? void tmpzw8ht3lp.__unittest_L22_C1() [0x427f95]\n??:? void tmpzw8ht3lp.__modtest() [0x428188]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4bf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b352]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305dd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a8c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430569]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b329]\n??:? runModuleUnitTests [0x42c295]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288c8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] result;\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 1)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] result = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 == 1)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n    long[] odd = new long[list.length];\n    int j = 0;\n    for (int i = 0; i < list.length; i++)\n    {\n        if (list[i] % 2 != 0)\n        {\n            odd[j] = list[i];\n            j++;\n        }\n    }\n    return odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpab111v6h.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x428405]\n??:? void tmpab111v6h.__unittest_L22_C1() [0x427f95]\n??:? void tmpab111v6h.__modtest() [0x428188]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4bf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b352]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305dd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a8c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430569]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b329]\n??:? runModuleUnitTests [0x42c295]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288c8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] result = new long[list.length];\n\tint j = 0;\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\tresult[j] = i;\n\t\t\tj++;\n\t\t}\n\t}\n\treturn result[0..j];\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] result;\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 1)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] result;\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 1)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 1)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[list.length];\n\tlong[] even = new long[list.length];\n\tint oddCount = 0;\n\tint evenCount = 0;\n\t\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\teven[evenCount] = i;\n\t\t\tevenCount++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\todd[oddCount] = i;\n\t\t\toddCount++;\n\t\t}\n\t}\n\t\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp7hdqu42e.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x428435]\n??:? void tmp7hdqu42e.__unittest_L31_C1() [0x427fc5]\n??:? void tmp7hdqu42e.__modtest() [0x4281b8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b382]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43060d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430abc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430599]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b359]\n??:? runModuleUnitTests [0x42c2c5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288f8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odds = new long[list.length];\n\tint j = 0;\n\tfor (int i = 0; i < list.length; i++)\n\t{\n\t\tif (list[i] % 2 == 1)\n\t\t{\n\t\t\todds[j] = list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn odds;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpo1wjpp4r.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x428405]\n??:? void tmpo1wjpp4r.__unittest_L22_C1() [0x427f95]\n??:? void tmpo1wjpp4r.__modtest() [0x428188]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4bf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b352]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305dd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a8c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430569]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b329]\n??:? runModuleUnitTests [0x42c295]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288c8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odds = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 == 1)\n\t\t{\n\t\t\todds ~= i;\n\t\t}\n\t}\n\treturn odds;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 == 1)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(long i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[list.length];\n\tint i = 0;\n\tforeach(long item; list)\n\t{\n\t\tif(item % 2 != 0)\n\t\t{\n\t\t\todd[i] = item;\n\t\t\ti++;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpm0gqa7sn.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x4283e5]\n??:? void tmpm0gqa7sn.__unittest_L22_C1() [0x427f71]\n??:? void tmpm0gqa7sn.__modtest() [0x428164]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c49f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b332]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305bd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a6c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430549]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b309]\n??:? runModuleUnitTests [0x42c275]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 1)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517465,
      "stdout": "",
      "stderr": "/tmp/tmp8r4b4n0p.d(10): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8r4b4n0p.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] odd = new long[0];\n\tforeach(int i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\todd ~= i;\n\t\t}\n\t}\n\treturn odd;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1665517465,
      "stdout": "",
      "stderr": "/tmp/tmp462n6ygq.d(11): Error: cannot implicitly convert expression `__r73[__key74]` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp462n6ygq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] oddList;\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 == 1)\n\t\t{\n\t\t\toddList ~= i;\n\t\t}\n\t}\n\treturn oddList;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n\t\n*/\nlong[] Split(long[] list) \n{\n\tlong[] result = new long[0];\n\tforeach(i; list)\n\t{\n\t\tif(i % 2 != 0)\n\t\t{\n\t\t\tresult ~= i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}",
      "timestamp": 1666123061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}