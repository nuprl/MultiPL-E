{
  "name": "mbpp_90_len_log",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest word.\n\t\n*/\nlong len_log(string[] list1) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_90_len_log.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = len_log;\n\n    assert(candidate([\"python\", \"PHP\", \"bigdata\"]) == 7L);\n    assert(candidate([\"a\", \"ab\", \"abc\"]) == 3L);\n    assert(candidate([\"small\", \"big\", \"tall\"]) == 5L);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tlong max = 0;\n\tforeach(string s; list1)\n\t{\n\t\tif(s.length > max)\n\t\t{\n\t\t\tmax = s.length;\n\t\t}\n\t}\n\treturn max;\n}",
    "{\n\tlong len = 0;\n\tforeach(string s; list1)\n\t{\n\t\tif(len < s.length)\n\t\t{\n\t\t\tlen = s.length;\n\t\t}\n\t}\n\treturn len;\n}",
    "{\n\tlong max = 0;\n\tforeach(string s; list1)\n\t{\n\t\tif(s.length > max)\n\t\t\tmax = s.length;\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tforeach(string word; list1)\n\t{\n\t\tif(word.length > max)\n\t\t{\n\t\t\tmax = word.length;\n\t\t}\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tforeach(string s; list1)\n\t{\n\t\tif(s.length > max)\n\t\t\tmax = s.length;\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tforeach(string s; list1)\n\t{\n\t\tif(s.length > max)\n\t\t{\n\t\t\tmax = s.length;\n\t\t}\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tforeach(string s; list1)\n\t{\n\t\tif(s.length > max)\n\t\t{\n\t\t\tmax = s.length;\n\t\t}\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tforeach(string s; list1)\n\t{\n\t\tif(s.length > max)\n\t\t\tmax = s.length;\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tforeach(string word; list1)\n\t{\n\t\tif(word.length > max)\n\t\t{\n\t\t\tmax = word.length;\n\t\t}\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tforeach(string s; list1)\n\t{\n\t\tif(s.length > max)\n\t\t\tmax = s.length;\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tforeach(string s; list1)\n\t{\n\t\tif(s.length > max)\n\t\t\tmax = s.length;\n\t}\n\treturn max;\n}",
    "{\n\tlong max_len = 0;\n\tforeach(string s; list1) \n\t{\n\t\tmax_len = max(max_len, s.length);\n\t}\n\treturn max_len;\n}",
    "{\n\tlong max = 0;\n\tforeach(string word; list1) \n\t{\n\t\tif(word.length > max) \n\t\t{\n\t\t\tmax = word.length;\n\t\t}\n\t}\n\treturn max;\n}",
    "{\n\tlong len = 0;\n\tforeach(string word; list1)\n\t{\n\t\tif(word.length > len)\n\t\t\tlen = word.length;\n\t}\n\treturn len;\n}",
    "{\n\tlong max = 0;\n\tforeach(string s; list1)\n\t{\n\t\tif(s.length > max)\n\t\t\tmax = s.length;\n\t}\n\treturn max;\n}",
    "{\n\tlong len = 0;\n\tforeach(string s; list1)\n\t{\n\t\tif(s.length > len)\n\t\t\tlen = s.length;\n\t}\n\treturn len;\n}",
    "{\n\tlong len = 0;\n\tforeach(string s; list1)\n\t{\n\t\tif(s.length > len)\n\t\t\tlen = s.length;\n\t}\n\treturn len;\n}",
    "{\n\tlong len = 0;\n\tforeach(string word; list1)\n\t{\n\t\tif(word.length > len)\n\t\t{\n\t\t\tlen = word.length;\n\t\t}\n\t}\n\treturn len;\n}",
    "{\n\tlong max = 0;\n\tforeach(string str; list1)\n\t{\n\t\tif(str.length > max)\n\t\t\tmax = str.length;\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tforeach(string word; list1)\n\t{\n\t\tif(word.length > max)\n\t\t{\n\t\t\tmax = word.length;\n\t\t}\n\t}\n\treturn max;\n}"
  ]
}