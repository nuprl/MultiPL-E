{
  "name": "mbpp_388_highest_Power_of_2",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the highest power of 2 that is less than or equal to n.\n\t\n*/\nlong highest_Power_of_2(long n) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_388_highest_Power_of_2.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = highest_Power_of_2;\n\n    assert(candidate(10L) == 8L);\n    assert(candidate(19L) == 16L);\n    assert(candidate(32L) == 32L);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{ \n    long p = (long)log2(n); \n    return (long)pow(2, p);  \n} ",
    "{ \n    long p = (long)log2(n); \n    return (long)pow(2, p);  \n} ",
    "{ \n    long p = (long)log2(n); \n    return (long)pow(2, p);  \n} ",
    "{ \n\tlong p = (long) (log2(n)); \n\treturn (long) (pow(2, p)); \n} ",
    "{ \n    long p = (long)log2(n); \n    return (long)pow(2, p);  \n} ",
    "{ \n    long p = (long)log2(n); \n    return (long)pow(2, p);  \n} ",
    "{ \n\tlong p = (long) (log2(n)); \n\treturn (long) (pow(2, p)); \n} ",
    "{ \n\tlong p = (long) (log2(n)); \n\treturn (long) (pow(2, p)); \n} ",
    "{ \n    long p = (long)log2(n); \n    return (long)pow(2, p);  \n} ",
    "{\n\tlong p = 1;\n\twhile (p <= n) \n\t{\n\t\tp *= 2;\n\t}\n\treturn p / 2;\n}",
    "{ \n    long p = (long)log2(n); \n    return (long)pow(2, p);  \n} ",
    "{ \n    long p = (long)log2(n); \n    return (long)pow(2, p);  \n} ",
    "{ \n    long p = (long)log2(n); \n    return (long)pow(2, p);  \n} ",
    "{ \n    long p = (long)log2(n); \n    return (long)pow(2, p);  \n} ",
    "{ \n\t// Initialize the result \n\tlong p = (long)log2(n); \n\treturn (long)pow(2, p); \n} ",
    "{ \n    long p = (long)log2(n); \n    return (long)pow(2, p);  \n} ",
    "{ \n    long p = (long)log2(n); \n    return (long)pow(2, p);  \n} ",
    "{ \n\tlong p = (long) (log2(n)); \n\treturn (long) (pow(2, p)); \n} ",
    "{ \n\t// Initialize result \n\tlong res = 1; \n\t\n\t// Keep multiplying 2 \n\t// with res while res \n\t// is smaller than n. \n\twhile (res * 2 <= n) \n\t\tres *= 2; \n\t\n\treturn res; \n} ",
    "{ \n    long p = (long)log2(n); \n    return (long)pow(2, p);  \n} "
  ]
}