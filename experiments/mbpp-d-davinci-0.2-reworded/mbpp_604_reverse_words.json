{
  "name": "mbpp_604_reverse_words",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to reverse words seperated by spaces in a given string.\n\t\n*/\nstring reverse_words(string s) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_604_reverse_words.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = reverse_words;\n\n    assert(candidate(\"python program\") == \"program python\");\n    assert(candidate(\"java language\") == \"language java\");\n    assert(candidate(\"indian man\") == \"man indian\");\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tstring[] words = split(s);\n\tstring result = \"\";\n\tforeach(word; words)\n\t{\n\t\tresult ~= word.reverse;\n\t\tresult ~= \" \";\n\t}\n\treturn result.idup;\n}",
    "{\n\tauto words = split(s, \" \");\n\tauto reversed = words.reverse();\n\treturn join(reversed, \" \");\n}",
    "{\n\tauto words = split(s, \" \");\n\tstring result;\n\tforeach(word; words)\n\t\tresult ~= word ~ \" \";\n\treturn result[0..$-1];\n}",
    "{\n\tstring[] words = split(s);\n\tstring reversed_words = \"\";\n\tforeach(word; words) \n\t{\n\t\treversed_words ~= reverse(word);\n\t\treversed_words ~= \" \";\n\t}\n\treturn reversed_words;\n}",
    "{\n\tstring[] words = split(s, \" \");\n\tstring reversed = \"\";\n\tforeach(word; words)\n\t{\n\t\treversed ~= reverse(word) ~ \" \";\n\t}\n\treturn reversed;\n}",
    "{\n\tauto words = split(s, \" \");\n\tstring result = \"\";\n\tforeach(word; words)\n\t{\n\t\tresult ~= word ~ \" \";\n\t}\n\treturn result;\n}",
    "{\n\tauto words = split(s, \" \");\n\tstring result;\n\tforeach(word; words)\n\t{\n\t\tresult ~= word ~ \" \";\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = split(s);\n\tstring result = \"\";\n\tforeach(word; words)\n\t{\n\t\tresult ~= word.reverse;\n\t\tresult ~= \" \";\n\t}\n\treturn result.stripRight;\n}",
    "{\n\tauto words = split(s, \" \");\n\tstring result;\n\tforeach(word; words)\n\t{\n\t\tresult ~= word ~ \" \";\n\t}\n\treturn result;\n}",
    "{\n\tauto words = s.split(\" \");\n\tstring result = \"\";\n\tforeach(word; words)\n\t{\n\t\tresult ~= word.dup.reverse;\n\t\tresult ~= \" \";\n\t}\n\treturn result.idup.idup[0..$-1];\n}",
    "{\n\tstring[] words = split(s);\n\tstring result = \"\";\n\tforeach(word; words)\n\t{\n\t\tresult ~= reverse(word) ~ \" \";\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = split(s, ' ');\n\tstring[] reversed_words;\n\tforeach(word; words)\n\t{\n\t\treversed_words ~= word.dup.reverse;\n\t}\n\treturn join(reversed_words, \" \");\n}",
    "{\n\tstring[] words = s.split(\" \");\n\tstring result = \"\";\n\tforeach(word; words)\n\t{\n\t\tresult ~= word.reverse;\n\t}\n\treturn result;\n}",
    "{\n\tauto words = split(s, \" \");\n\tstring result = \"\";\n\tforeach(word; words)\n\t{\n\t\tresult ~= word ~ \" \";\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = split(s, \" \");\n\tstring result = \"\";\n\tforeach(word; words)\n\t{\n\t\tresult ~= reverse(word) ~ \" \";\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = split(s);\n\tstring result = \"\";\n\tforeach(word; words)\n\t{\n\t\tresult ~= reverse(word);\n\t\tresult ~= \" \";\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = s.split(\" \");\n\tstring result = \"\";\n\tforeach(word; words)\n\t{\n\t\tresult ~= word.reverse() ~ \" \";\n\t}\n\treturn result.idup;\n}",
    "{\n\tstring[] words = split(s);\n\tstring result = \"\";\n\tforeach(word; words)\n\t{\n\t\tresult ~= reverse(word) ~ \" \";\n\t}\n\treturn result;\n}",
    "{\n\tstring[] words = split(s, \" \");\n\tstring result = \"\";\n\tforeach(word; words)\n\t{\n\t\tresult ~= reverse(word) ~ \" \";\n\t}\n\treturn result;\n}",
    "{\n\tauto words = split(s, \" \");\n\tstring result;\n\tforeach(word; words)\n\t{\n\t\tresult ~= word ~ \" \";\n\t}\n\treturn result;\n}"
  ]
}