{
  "name": "mbpp_611_max_of_nth",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function which given a matrix represented as an array of arrays returns the max of the n'th column.\n\t\n*/\nlong max_of_nth(long[][] test_list, long N) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_611_max_of_nth.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tlong max = test_list[0][N];\n\tforeach(long[] i; test_list)\n\t{\n\t\tif(i[N] > max)\n\t\t\tmax = i[N];\n\t}\n\treturn max;\n}",
    "{\n\tlong max = test_list[0][N];\n\tforeach(i; test_list)\n\t{\n\t\tif(i[N] > max)\n\t\t\tmax = i[N];\n\t}\n\treturn max;\n}",
    "{\n\treturn test_list.map!(a => a[N]).max;\n}",
    "{\n\tlong max = 0;\n\tforeach(long[] i; test_list)\n\t{\n\t\tif(i[N] > max)\n\t\t\tmax = i[N];\n\t}\n\treturn max;\n}",
    "{\n\tlong max = test_list[0][N];\n\tforeach(long[] i; test_list)\n\t{\n\t\tif(i[N] > max)\n\t\t{\n\t\t\tmax = i[N];\n\t\t}\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tforeach(long[] i; test_list)\n\t{\n\t\tif(i[N] > max)\n\t\t\tmax = i[N];\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tforeach(long[] i; test_list)\n\t{\n\t\tif(i[N] > max)\n\t\t\tmax = i[N];\n\t}\n\treturn max;\n}",
    "{\n\tlong max = test_list[0][N];\n\tforeach(i; test_list)\n\t{\n\t\tif(i[N] > max)\n\t\t{\n\t\t\tmax = i[N];\n\t\t}\n\t}\n\treturn max;\n}",
    "{\n\tlong max = test_list[0][N];\n\tforeach(row; test_list)\n\t{\n\t\tif(row[N] > max)\n\t\t{\n\t\t\tmax = row[N];\n\t\t}\n\t}\n\treturn max;\n}",
    "{\n\tlong max = test_list[0][N];\n\tforeach(i; test_list)\n\t{\n\t\tif(i[N] > max)\n\t\t\tmax = i[N];\n\t}\n\treturn max;\n}",
    "{\n\tlong max = test_list[0][N];\n\tforeach(i; test_list)\n\t{\n\t\tif(i[N] > max)\n\t\t{\n\t\t\tmax = i[N];\n\t\t}\n\t}\n\treturn max;\n}",
    "{\n\tlong max = test_list[0][N];\n\tforeach(long[] row; test_list)\n\t{\n\t\tif(row[N] > max)\n\t\t{\n\t\t\tmax = row[N];\n\t\t}\n\t}\n\treturn max;\n}",
    "{\n\tlong max = test_list[0][N];\n\tforeach(long[] row; test_list)\n\t{\n\t\tif(row[N] > max)\n\t\t\tmax = row[N];\n\t}\n\treturn max;\n}",
    "{\n\tlong max = test_list[0][N];\n\tforeach(long[] i; test_list)\n\t{\n\t\tif(i[N] > max)\n\t\t{\n\t\t\tmax = i[N];\n\t\t}\n\t}\n\treturn max;\n}",
    "{\n\tlong max = test_list[0][N];\n\tforeach(long[] row; test_list)\n\t{\n\t\tif (row[N] > max)\n\t\t\tmax = row[N];\n\t}\n\treturn max;\n}",
    "{\n\tlong max = test_list[0][N];\n\tforeach(long[] row; test_list)\n\t{\n\t\tif(row[N] > max)\n\t\t\tmax = row[N];\n\t}\n\treturn max;\n}",
    "{\n\tlong max = test_list[0][N];\n\tforeach(long[] row; test_list)\n\t{\n\t\tif(row[N] > max)\n\t\t\tmax = row[N];\n\t}\n\treturn max;\n}",
    "{\n\tlong max = test_list[0][N];\n\tforeach (row; test_list)\n\t{\n\t\tif (row[N] > max)\n\t\t\tmax = row[N];\n\t}\n\treturn max;\n}",
    "{\n\tlong max = test_list[0][N];\n\tforeach(long[] i; test_list)\n\t{\n\t\tif(i[N] > max)\n\t\t{\n\t\t\tmax = i[N];\n\t\t}\n\t}\n\treturn max;\n}",
    "{\n\tlong max = test_list[0][N];\n\tforeach(long[] i; test_list)\n\t{\n\t\tif(i[N] > max)\n\t\t\tmax = i[N];\n\t}\n\treturn max;\n}"
  ]
}