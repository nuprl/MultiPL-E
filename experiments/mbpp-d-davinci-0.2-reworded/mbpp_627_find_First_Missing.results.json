{
  "name": "mbpp_627_find_First_Missing",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_627_find_First_Missing.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong left = 0;\n\tlong right = n - 1;\n\tlong mid = 0;\n\twhile (left <= right) \n\t{\n\t\tmid = (left + right) / 2;\n\t\tif (array[mid] != mid + 1 && array[mid - 1] == mid) \n\t\t{\n\t\t\treturn mid + 1;\n\t\t}\n\t\telse if (array[mid] != mid + 1) \n\t\t{\n\t\t\tright = mid - 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tleft = mid + 1;\n\t\t}\n\t}\n\tif (left == n) \n\t{\n\t\treturn n + 1;\n\t}\n\treturn 1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517549,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpb_31t1ya.d(17): Range violation\n----------------\n??:? _d_arrayboundsp [0x42827e]\n??:? long tmpb_31t1ya.find_First_Missing(long[]) [0x427d92]\n??:? void tmpb_31t1ya.__unittest_L36_C1() [0x427e69]\n??:? void tmpb_31t1ya.__modtest() [0x427f4c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c22b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0be]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430251]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430700]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301dd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b095]\n??:? runModuleUnitTests [0x42c001]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int func",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong low = 0;\n\tlong high = array.length - 1;\n\tlong mid;\n\t\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\t\n\t\tif (array[mid] != mid + 1 && array[mid - 1] == mid) \n\t\t{\n\t\t\treturn mid + 1;\n\t\t}\n\t\t\n\t\tif (array[mid] != mid + 1) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\t\n\treturn -1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517549,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmppp0ci93r.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x42825e]\n??:? long tmppp0ci93r.find_First_Missing(long[]) [0x427d8a]\n??:? void tmppp0ci93r.__unittest_L35_C1() [0x427e4d]\n??:? void tmppp0ci93r.__modtest() [0x427f30]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c20b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b09e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430231]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306e0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301bd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b075]\n??:? runModuleUnitTests [0x42bfe1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int func",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (array[mid] != mid + 1 && array[mid - 1] == mid) \n\t\t{\n\t\t\treturn mid + 1;\n\t\t}\n\t\telse if (array[mid] != mid + 1) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\tif (low > 0) \n\t{\n\t\treturn low + 1;\n\t}\n\treturn 1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517549,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmplwczm730.d(17): Range violation\n----------------\n??:? _d_arrayboundsp [0x428276]\n??:? long tmplwczm730.find_First_Missing(long[]) [0x427d8e]\n??:? void tmplwczm730.__unittest_L36_C1() [0x427e61]\n??:? void tmplwczm730.__modtest() [0x427f44]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c223]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0b6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430249]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306f8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301d5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b08d]\n??:? runModuleUnitTests [0x42bff9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int func",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong i = 0;\n\tlong n = array.length;\n\twhile (i < n) \n\t{\n\t\tif (array[i] != i) \n\t\t{\n\t\t\treturn i;\n\t\t}\n\t\ti += 1;\n\t}\n\treturn n;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n-1;\n\tlong mid = 0;\n\t\n\twhile(low <= high)\n\t{\n\t\tmid = (low + high) / 2;\n\t\tif(array[mid] != mid)\n\t\t{\n\t\t\tif(mid == 0 || array[mid-1] == mid-1)\n\t\t\t\treturn mid;\n\t\t\telse\n\t\t\t\thigh = mid - 1;\n\t\t}\n\t\telse\n\t\t\tlow = mid + 1;\n\t}\n\treturn n;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\twhile (low <= high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (array[mid] != mid + 1 && array[mid - 1] == mid) \n\t\t{\n\t\t\treturn mid + 1;\n\t\t}\n\t\telse if (array[mid] != mid + 1) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517549,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpeg6b5wvo.d(16): Range violation\n----------------\n??:? _d_arrayboundsp [0x42825e]\n??:? long tmpeg6b5wvo.find_First_Missing(long[]) [0x427d8c]\n??:? void tmpeg6b5wvo.__unittest_L31_C1() [0x427e4d]\n??:? void tmpeg6b5wvo.__modtest() [0x427f30]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c20b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b09e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430231]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306e0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301bd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b075]\n??:? runModuleUnitTests [0x42bfe1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int func",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong length = array.length;\n\tlong i = 0;\n\twhile (i < length) \n\t{\n\t\tif (array[i] != i) \n\t\t{\n\t\t\treturn i;\n\t\t}\n\t\ti++;\n\t}\n\treturn i;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong i = 0;\n\twhile (i < n) \n\t{\n\t\tif (array[i] != i + 1)\n\t\t\tbreak;\n\t\ti++;\n\t}\n\treturn i + 1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517549,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpl83_mbgv.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x42810d]\n??:? void tmpl83_mbgv.__unittest_L20_C1() [0x427dc0]\n??:? void tmpl83_mbgv.__modtest() [0x427e8c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c16b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42affe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430191]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430640]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43011d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afd5]\n??:? runModuleUnitTests [0x42bf41]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong left = 0;\n\tlong right = array.length - 1;\n\tlong mid;\n\t\n\twhile (left <= right) \n\t{\n\t\tmid = (left + right) / 2;\n\t\t\n\t\tif (array[mid] != mid + 1 && array[mid - 1] == mid) \n\t\t{\n\t\t\treturn mid + 1;\n\t\t}\n\t\telse if (array[mid] != mid + 1) \n\t\t{\n\t\t\tright = mid - 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tleft = mid + 1;\n\t\t}\n\t}\n\t\n\treturn -1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517549,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpliocz85d.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x42825e]\n??:? long tmpliocz85d.find_First_Missing(long[]) [0x427d8a]\n??:? void tmpliocz85d.__unittest_L34_C1() [0x427e4d]\n??:? void tmpliocz85d.__modtest() [0x427f30]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c20b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b09e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430231]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306e0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301bd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b075]\n??:? runModuleUnitTests [0x42bfe1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int func",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n-1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (array[mid] == mid) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong first = 0;\n\tlong last = array.length;\n\tlong mid = 0;\n\twhile(first < last) \n\t{\n\t\tmid = (first + last) / 2;\n\t\tif(array[mid] == mid) \n\t\t{\n\t\t\tfirst = mid + 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tlast = mid;\n\t\t}\n\t}\n\treturn first;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (array[mid] == mid + 1) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t}\n\treturn low + 1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517549,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmplls7rbau.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x42813d]\n??:? void tmplls7rbau.__unittest_L28_C1() [0x427df4]\n??:? void tmplls7rbau.__modtest() [0x427ec0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c19b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b02e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4301c1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430670]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43014d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b005]\n??:? runModuleUnitTests [0x42bf71]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428600]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong first = array[0];\n\tlong last = array[$-1];\n\tlong mid = 0;\n\tlong mid_val = 0;\n\t\n\twhile(first <= last)\n\t{\n\t\tmid = (first + last) / 2;\n\t\tmid_val = array[mid];\n\t\t\n\t\tif(mid_val > mid)\n\t\t{\n\t\t\tlast = mid - 1;\n\t\t}\n\t\telse if(mid_val < mid)\n\t\t{\n\t\t\tfirst = mid + 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tfirst = mid + 1;\n\t\t}\n\t}\n\t\n\treturn first;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517549,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp3q7rqvzv.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x42824e]\n??:? long tmp3q7rqvzv.find_First_Missing(long[]) [0x427d9e]\n??:? void tmp3q7rqvzv.__unittest_L36_C1() [0x427ef4]\n??:? void tmp3q7rqvzv.__modtest() [0x427f20]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1fb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b08e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430221]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306d0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301ad]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b065]\n??:? runModuleUnitTests [0x42bfd1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int func",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong i = 0;\n\tlong j = array.length;\n\tlong m = (i + j) / 2;\n\t\n\twhile(i < j)\n\t{\n\t\tif(array[m] > m)\n\t\t{\n\t\t\tj = m;\n\t\t}\n\t\telse if(array[m] < m)\n\t\t{\n\t\t\ti = m + 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\ti = m + 1;\n\t\t}\n\t\tm = (i + j) / 2;\n\t}\n\t\n\treturn i;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong first = 0;\n\tlong last = array.length;\n\tlong mid = 0;\n\t\n\twhile(first < last)\n\t{\n\t\tmid = (first + last) / 2;\n\t\tif(array[mid] == mid)\n\t\t{\n\t\t\tfirst = mid + 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlast = mid;\n\t\t}\n\t}\n\treturn first;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (array[mid] != mid + 1 && array[mid - 1] == mid) \n\t\t{\n\t\t\treturn mid + 1;\n\t\t}\n\t\tif (array[mid] != mid + 1) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\tif (low > 0) \n\t{\n\t\treturn low + 1;\n\t}\n\treturn 1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517549,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpz9ukdinx.d(17): Range violation\n----------------\n??:? _d_arrayboundsp [0x428276]\n??:? long tmpz9ukdinx.find_First_Missing(long[]) [0x427d8e]\n??:? void tmpz9ukdinx.__unittest_L36_C1() [0x427e61]\n??:? void tmpz9ukdinx.__modtest() [0x427f44]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c223]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0b6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430249]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306f8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301d5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b08d]\n??:? runModuleUnitTests [0x42bff9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428688]\n??:? void rt.dmain2._d_run_main(int, char**, ",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (array[mid] == mid + 1) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t}\n\treturn low + 1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517549,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpomectxlm.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x42813d]\n??:? void tmpomectxlm.__unittest_L28_C1() [0x427df4]\n??:? void tmpomectxlm.__modtest() [0x427ec0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c19b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b02e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4301c1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430670]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43014d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b005]\n??:? runModuleUnitTests [0x42bf71]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428600]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (array[mid] != mid + 1 && array[mid - 1] == mid) \n\t\t{\n\t\t\treturn mid + 1;\n\t\t}\n\t\telse if (array[mid] != mid + 1) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517549,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpl3i7osyd.d(17): Range violation\n----------------\n??:? _d_arrayboundsp [0x428266]\n??:? long tmpl3i7osyd.find_First_Missing(long[]) [0x427d8e]\n??:? void tmpl3i7osyd.__unittest_L32_C1() [0x427e51]\n??:? void tmpl3i7osyd.__modtest() [0x427f34]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c213]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0a6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430239]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306e8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301c5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b07d]\n??:? runModuleUnitTests [0x42bfe9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int func",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong first = 0;\n\tlong last = array.length;\n\tlong mid = 0;\n\t\n\twhile(first < last)\n\t{\n\t\tmid = first + (last - first) / 2;\n\t\t\n\t\tif(array[mid] > mid)\n\t\t{\n\t\t\tlast = mid;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tfirst = mid + 1;\n\t\t}\n\t}\n\t\n\treturn first;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong left = 0;\n\tlong right = n - 1;\n\tlong mid;\n\twhile (left <= right) \n\t{\n\t\tmid = (left + right) / 2;\n\t\tif (array[mid] != mid + 1 && array[mid - 1] == mid) \n\t\t{\n\t\t\treturn mid + 1;\n\t\t}\n\t\tif (array[mid] != mid + 1) \n\t\t{\n\t\t\tright = mid - 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tleft = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517549,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpoh9mf7jb.d(17): Range violation\n----------------\n??:? _d_arrayboundsp [0x428266]\n??:? long tmpoh9mf7jb.find_First_Missing(long[]) [0x427d8e]\n??:? void tmpoh9mf7jb.__unittest_L32_C1() [0x427e51]\n??:? void tmpoh9mf7jb.__modtest() [0x427f34]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c213]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0a6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430239]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306e8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301c5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b07d]\n??:? runModuleUnitTests [0x42bfe9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int func",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong first = array[0];\n\tlong last = array[$-1];\n\tlong count = last - first + 1;\n\tlong[] temp = new long[count];\n\tforeach(i; 0 .. count)\n\t\ttemp[i] = first + i;\n\treturn temp.difference(array).front;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123190,
      "stdout": "",
      "stderr": "/tmp/tmptg6gjohs.d(16): Error: no property `difference` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptg6gjohs.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong first = array[0];\n\tlong last = array[$-1];\n\tlong mid;\n\twhile(first <= last) \n\t{\n\t\tmid = first + (last - first) / 2;\n\t\tif(array[mid] == mid) \n\t\t{\n\t\t\tfirst = mid + 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tlast = mid - 1;\n\t\t}\n\t}\n\treturn first;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp836asjvt.d(16): Range violation\n----------------\n??:? _d_arrayboundsp [0x42822e]\n??:? long tmp836asjvt.find_First_Missing(long[]) [0x427d9c]\n??:? void tmp836asjvt.__unittest_L27_C1() [0x427ed4]\n??:? void tmp836asjvt.__modtest() [0x427f00]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1db]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b06e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430201]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306b0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43018d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b045]\n??:? runModuleUnitTests [0x42bfb1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int func",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong first = array[0];\n\tlong last = array[$-1];\n\tlong mid = 0;\n\tlong mid_value = 0;\n\t\n\twhile(first <= last)\n\t{\n\t\tmid = first + (last - first) / 2;\n\t\tmid_value = array[mid];\n\t\t\n\t\tif(mid_value == mid)\n\t\t{\n\t\t\tfirst = mid + 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlast = mid - 1;\n\t\t}\n\t}\n\t\n\treturn first;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpljg5_13n.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x42822e]\n??:? long tmpljg5_13n.find_First_Missing(long[]) [0x427d9a]\n??:? void tmpljg5_13n.__unittest_L32_C1() [0x427ed0]\n??:? void tmpljg5_13n.__modtest() [0x427efc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1db]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b06e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430201]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306b0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43018d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b045]\n??:? runModuleUnitTests [0x42bfb1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int func",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong i = 0;\n\twhile (i < n) \n\t{\n\t\tif (array[i] != i)\n\t\t\treturn i;\n\t\ti++;\n\t}\n\treturn i;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (array[mid] != mid + 1 && array[mid - 1] == mid) \n\t\t{\n\t\t\treturn mid + 1;\n\t\t}\n\t\telse if (array[mid] != mid + 1) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517549,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpl3i7osyd.d(17): Range violation\n----------------\n??:? _d_arrayboundsp [0x428266]\n??:? long tmpl3i7osyd.find_First_Missing(long[]) [0x427d8e]\n??:? void tmpl3i7osyd.__unittest_L32_C1() [0x427e51]\n??:? void tmpl3i7osyd.__modtest() [0x427f34]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c213]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0a6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430239]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306e8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301c5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b07d]\n??:? runModuleUnitTests [0x42bfe9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int func",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (array[mid] == mid + 1) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t}\n\treturn low + 1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517549,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmplls7rbau.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x42813d]\n??:? void tmplls7rbau.__unittest_L28_C1() [0x427df4]\n??:? void tmplls7rbau.__modtest() [0x427ec0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c19b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b02e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4301c1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430670]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43014d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b005]\n??:? runModuleUnitTests [0x42bf71]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428600]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong first = array[0];\n\tlong last = array[$-1];\n\tlong mid = 0;\n\tlong index = 0;\n\tlong n = array.length;\n\twhile (first <= last) \n\t{\n\t\tmid = (first + last) / 2;\n\t\tif (mid == array[mid - 1]) \n\t\t{\n\t\t\tfirst = mid + 1;\n\t\t}\n\t\telse if (mid == array[mid]) \n\t\t{\n\t\t\tlast = mid - 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\treturn mid;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpc9i_9607.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x428286]\n??:? long tmpc9i_9607.find_First_Missing(long[]) [0x427da5]\n??:? void tmpc9i_9607.__unittest_L33_C1() [0x427e71]\n??:? void tmpc9i_9607.__modtest() [0x427f54]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c233]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0c6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430259]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b09d]\n??:? runModuleUnitTests [0x42c009]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int func",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong length = array.length;\n\tlong start = 0;\n\tlong end = length - 1;\n\tlong mid = 0;\n\twhile (start <= end) \n\t{\n\t\tmid = (start + end) / 2;\n\t\tif (array[mid] != mid + 1) \n\t\t{\n\t\t\tif (mid == 0 || array[mid - 1] == mid)\n\t\t\t\treturn mid + 1;\n\t\t\tend = mid - 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tstart = mid + 1;\n\t\t}\n\t}\n\treturn mid + 1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjiadi_tn.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x42818d]\n??:? void tmpjiadi_tn.__unittest_L30_C1() [0x427e44]\n??:? void tmpjiadi_tn.__modtest() [0x427f10]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b07e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430211]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306c0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43019d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b055]\n??:? runModuleUnitTests [0x42bfc1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428650]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (array[mid] != mid + 1 && array[mid - 1] == mid) \n\t\t{\n\t\t\treturn mid + 1;\n\t\t}\n\t\telse if (array[mid] != mid + 1) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn mid + 1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp96kx5wjv.d(17): Range violation\n----------------\n??:? _d_arrayboundsp [0x428266]\n??:? long tmp96kx5wjv.find_First_Missing(long[]) [0x427d8e]\n??:? void tmp96kx5wjv.__unittest_L32_C1() [0x427e51]\n??:? void tmp96kx5wjv.__modtest() [0x427f34]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c213]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0a6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430239]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306e8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301c5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b07d]\n??:? runModuleUnitTests [0x42bfe9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int func",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong n = array.length;\n\tlong first_missing = 0;\n\t\n\tfor(i = 0; i < n; i++) \n\t{\n\t\tif(array[i] != i) \n\t\t{\n\t\t\tfirst_missing = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn first_missing;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpoge6vgqy.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x428115]\n??:? void tmpoge6vgqy.__unittest_L26_C1() [0x427dc8]\n??:? void tmpoge6vgqy.__modtest() [0x427e94]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c173]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b006]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430199]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430648]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430125]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afdd]\n??:? runModuleUnitTests [0x42bf49]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285d8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong first = 0;\n\tlong last = array.length;\n\tlong mid = 0;\n\twhile(first < last) \n\t{\n\t\tmid = (first + last) / 2;\n\t\tif(array[mid] == mid) \n\t\t{\n\t\t\tfirst = mid + 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tlast = mid;\n\t\t}\n\t}\n\treturn first;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong first = 0;\n\tlong last = array.length;\n\tlong mid = 0;\n\twhile (first < last) \n\t{\n\t\tmid = (first + last) / 2;\n\t\tif (array[mid] == mid) \n\t\t{\n\t\t\tfirst = mid + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tlast = mid;\n\t\t}\n\t}\n\treturn first;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong first = 0;\n\tlong last = array.length;\n\tlong mid;\n\twhile(first < last)\n\t{\n\t\tmid = (first + last) / 2;\n\t\tif(array[mid] == mid)\n\t\t{\n\t\t\tfirst = mid + 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlast = mid;\n\t\t}\n\t}\n\treturn first;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong first = array[0];\n\tlong last = array[$-1];\n\tlong mid;\n\t\n\twhile(first <= last)\n\t{\n\t\tmid = (first + last) / 2;\n\t\t\n\t\tif(array[mid] == mid)\n\t\t{\n\t\t\tfirst = mid + 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlast = mid - 1;\n\t\t}\n\t}\n\t\n\treturn first;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpwb5vkzqc.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x42822e]\n??:? long tmpwb5vkzqc.find_First_Missing(long[]) [0x427d98]\n??:? void tmpwb5vkzqc.__unittest_L30_C1() [0x427ed0]\n??:? void tmpwb5vkzqc.__modtest() [0x427efc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1db]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b06e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430201]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306b0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43018d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b045]\n??:? runModuleUnitTests [0x42bfb1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int func",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong left = 0;\n\tlong right = array.length - 1;\n\tlong mid;\n\twhile (left <= right) \n\t{\n\t\tmid = (left + right) / 2;\n\t\tif (array[mid] == mid) \n\t\t{\n\t\t\tleft = mid + 1;\n\t\t} \n\t\telse if (array[mid] > mid) \n\t\t{\n\t\t\tright = mid - 1;\n\t\t}\n\t}\n\treturn left;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong i = 0;\n\twhile (i < n) \n\t{\n\t\tif (array[i] != i) \n\t\t{\n\t\t\treturn i;\n\t\t}\n\t\ti++;\n\t}\n\treturn n;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong first = array[0];\n\tlong last = array[$-1];\n\tlong mid;\n\t\n\twhile(first <= last) \n\t{\n\t\tmid = (first + last) / 2;\n\t\tif(array[mid] == mid) \n\t\t{\n\t\t\tfirst = mid + 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tlast = mid - 1;\n\t\t}\n\t}\n\t\n\treturn first;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp6bl7p6fd.d(17): Range violation\n----------------\n??:? _d_arrayboundsp [0x42822e]\n??:? long tmp6bl7p6fd.find_First_Missing(long[]) [0x427d98]\n??:? void tmp6bl7p6fd.__unittest_L29_C1() [0x427ed0]\n??:? void tmp6bl7p6fd.__modtest() [0x427efc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1db]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b06e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430201]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306b0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43018d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b045]\n??:? runModuleUnitTests [0x42bfb1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int func",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong first = array[0];\n\tlong last = array[$-1];\n\tlong count = last - first + 1;\n\tlong[] temp = new long[count];\n\tforeach(i; 0 .. count)\n\t{\n\t\ttemp[i] = first + i;\n\t}\n\treturn temp[0];\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmps7z1znyh.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x4281a5]\n??:? void tmps7z1znyh.__unittest_L20_C1() [0x427e58]\n??:? void tmps7z1znyh.__modtest() [0x427f24]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c25f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0f2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43037d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43082c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430309]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0c9]\n??:? runModuleUnitTests [0x42c035]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428668]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong first = 0;\n\tlong last = array.length;\n\tlong mid = 0;\n\twhile (first < last) \n\t{\n\t\tmid = (first + last) / 2;\n\t\tif (array[mid] > mid) \n\t\t{\n\t\t\tlast = mid;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tfirst = mid + 1;\n\t\t}\n\t}\n\treturn first;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (array[mid] == mid + 1) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t}\n\treturn low + 1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517549,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpomectxlm.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x42813d]\n??:? void tmpomectxlm.__unittest_L28_C1() [0x427df4]\n??:? void tmpomectxlm.__modtest() [0x427ec0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c19b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b02e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4301c1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430670]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43014d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b005]\n??:? runModuleUnitTests [0x42bf71]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428600]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n-1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (array[mid] != mid + 1) \n\t\t{\n\t\t\tif (mid == 0 || array[mid - 1] == mid) \n\t\t\t{\n\t\t\t\treturn mid + 1;\n\t\t\t}\n\t\t\thigh = mid - 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn n + 1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpd8oelmo7.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x428195]\n??:? void tmpd8oelmo7.__unittest_L32_C1() [0x427e48]\n??:? void tmpd8oelmo7.__modtest() [0x427f14]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b086]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430219]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306c8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301a5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b05d]\n??:? runModuleUnitTests [0x42bfc9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428658]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid;\n\twhile(low <= high)\n\t{\n\t\tmid = (low + high) / 2;\n\t\tif(array[mid] == mid)\n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong first = 0;\n\tlong last = array.length;\n\tlong mid = 0;\n\twhile (first < last) \n\t{\n\t\tmid = (first + last) / 2;\n\t\tif (array[mid] == mid) \n\t\t{\n\t\t\tfirst = mid + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tlast = mid;\n\t\t}\n\t}\n\treturn first;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid;\n\twhile(low <= high)\n\t{\n\t\tmid = (low + high) / 2;\n\t\tif(array[mid] != mid + 1 && array[mid - 1] == mid)\n\t\t{\n\t\t\treturn mid + 1;\n\t\t}\n\t\telse if(array[mid] != mid + 1)\n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp0ntn9y0u.d(17): Range violation\n----------------\n??:? _d_arrayboundsp [0x428266]\n??:? long tmp0ntn9y0u.find_First_Missing(long[]) [0x427d8e]\n??:? void tmp0ntn9y0u.__unittest_L32_C1() [0x427e51]\n??:? void tmp0ntn9y0u.__modtest() [0x427f34]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c213]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0a6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430239]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306e8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301c5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b07d]\n??:? runModuleUnitTests [0x42bfe9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int func",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong first = array[0];\n\tlong last = array[$-1];\n\tlong mid = 0;\n\tlong result = 0;\n\t\n\twhile(first <= last)\n\t{\n\t\tmid = (first + last) / 2;\n\t\t\n\t\tif(array[mid] == mid)\n\t\t{\n\t\t\tfirst = mid + 1;\n\t\t}\n\t\telse if(array[mid] > mid)\n\t\t{\n\t\t\tlast = mid - 1;\n\t\t}\n\t}\n\t\n\treturn first;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp8ixvjq6_.d(19): Range violation\n----------------\n??:? _d_arrayboundsp [0x42825e]\n??:? long tmp8ixvjq6_.find_First_Missing(long[]) [0x427d9a]\n??:? void tmp8ixvjq6_.__unittest_L31_C1() [0x427f04]\n??:? void tmp8ixvjq6_.__modtest() [0x427f30]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c20b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b09e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430231]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306e0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301bd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b075]\n??:? runModuleUnitTests [0x42bfe1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int func",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong i = 0;\n\twhile (i < n) \n\t{\n\t\tif (array[i] != i + 1) \n\t\t{\n\t\t\treturn i + 1;\n\t\t}\n\t\ti++;\n\t}\n\treturn n + 1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp7jqhkeu0.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x42811d]\n??:? void tmp7jqhkeu0.__unittest_L22_C1() [0x427dd0]\n??:? void tmp7jqhkeu0.__modtest() [0x427e9c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c17b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b00e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4301a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430650]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43012d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afe5]\n??:? runModuleUnitTests [0x42bf51]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285e0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong i = 0;\n\tlong n = array.length;\n\twhile(i < n) \n\t{\n\t\tif(array[i] != i) \n\t\t{\n\t\t\treturn i;\n\t\t}\n\t\ti++;\n\t}\n\treturn n;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong i = 0;\n\twhile (i < n) \n\t{\n\t\tif (array[i] != i + 1) \n\t\t{\n\t\t\treturn i + 1;\n\t\t}\n\t\ti++;\n\t}\n\treturn n + 1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp7jqhkeu0.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x42811d]\n??:? void tmp7jqhkeu0.__unittest_L22_C1() [0x427dd0]\n??:? void tmp7jqhkeu0.__modtest() [0x427e9c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c17b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b00e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4301a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430650]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43012d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afe5]\n??:? runModuleUnitTests [0x42bf51]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285e0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile(low <= high)\n\t{\n\t\tmid = (low + high) / 2;\n\t\tif(array[mid] == mid)\n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong first = 0;\n\tlong last = array.length;\n\tlong mid = 0;\n\twhile (first < last) \n\t{\n\t\tmid = (first + last) / 2;\n\t\tif (array[mid] > mid) \n\t\t{\n\t\t\tlast = mid;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tfirst = mid + 1;\n\t\t}\n\t}\n\treturn first;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong[] temp = array.dup;\n\ttemp.sort;\n\tlong i = 0;\n\tforeach(long num; temp)\n\t{\n\t\tif(num != i)\n\t\t\treturn i;\n\t\ti++;\n\t}\n\treturn i;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "/tmp/tmpdnlkr98e.d(11): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdnlkr98e.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong min = array[0];\n\tlong max = array[$-1];\n\tlong range = max - min + 1;\n\tlong[] count = new long[range];\n\tforeach(i; array)\n\t{\n\t\tcount[i-min]++;\n\t}\n\tfor(long i = 0; i < range; i++)\n\t{\n\t\tif(count[i] == 0)\n\t\t{\n\t\t\treturn i+min;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpou882gg2.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x4281dd]\n??:? void tmpou882gg2.__unittest_L27_C1() [0x427e90]\n??:? void tmpou882gg2.__modtest() [0x427f5c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c297]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b12a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4303b5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430864]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430341]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b101]\n??:? runModuleUnitTests [0x42c06d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong i = 0;\n\twhile(i < n)\n\t{\n\t\tif(array[i] != i)\n\t\t{\n\t\t\treturn i;\n\t\t}\n\t\ti++;\n\t}\n\treturn n;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong first = array[0];\n\tlong last = array[$-1];\n\tlong mid = 0;\n\t\n\twhile (first <= last) \n\t{\n\t\tmid = first + (last - first) / 2;\n\t\t\n\t\tif (array[mid] == mid) \n\t\t{\n\t\t\tfirst = mid + 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tlast = mid - 1;\n\t\t}\n\t}\n\t\n\treturn first;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpn67_acjv.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x42822e]\n??:? long tmpn67_acjv.find_First_Missing(long[]) [0x427d9c]\n??:? void tmpn67_acjv.__unittest_L30_C1() [0x427ed4]\n??:? void tmpn67_acjv.__modtest() [0x427f00]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1db]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b06e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430201]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306b0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43018d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b045]\n??:? runModuleUnitTests [0x42bfb1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int func",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong first = 0;\n\tlong last = array.length;\n\tlong mid = 0;\n\t\n\twhile (first < last) \n\t{\n\t\tmid = (first + last) / 2;\n\t\tif (array[mid] == mid) \n\t\t{\n\t\t\tfirst = mid + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tlast = mid;\n\t\t}\n\t}\n\treturn first;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong first = 0;\n\tlong last = array.length;\n\tlong mid;\n\twhile (first < last) \n\t{\n\t\tmid = first + (last - first) / 2;\n\t\tif (array[mid] == mid) \n\t\t{\n\t\t\tfirst = mid + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tlast = mid;\n\t\t}\n\t}\n\treturn first;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong first = array[0];\n\tlong last = array[$-1];\n\tlong mid;\n\tlong index;\n\t\n\twhile (first <= last)\n\t{\n\t\tmid = (first + last) / 2;\n\t\t\n\t\tif (array[mid] == mid)\n\t\t{\n\t\t\tfirst = mid + 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlast = mid - 1;\n\t\t}\n\t}\n\t\n\treturn first;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp29na8azq.d(19): Range violation\n----------------\n??:? _d_arrayboundsp [0x428226]\n??:? long tmp29na8azq.find_First_Missing(long[]) [0x427d96]\n??:? void tmp29na8azq.__unittest_L31_C1() [0x427ecc]\n??:? void tmp29na8azq.__modtest() [0x427ef8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1d3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b066]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4301f9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306a8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430185]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b03d]\n??:? runModuleUnitTests [0x42bfa9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int func",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong first = 0;\n\tlong last = array.length;\n\tlong mid = 0;\n\twhile(first < last) \n\t{\n\t\tmid = (first + last) / 2;\n\t\tif(array[mid] != mid) \n\t\t{\n\t\t\tif(mid == 0 || array[mid - 1] == mid - 1) \n\t\t\t{\n\t\t\t\treturn mid;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tlast = mid;\n\t\t\t}\n\t\t}\n\t\telse \n\t\t{\n\t\t\tfirst = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmplrlydxii.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x428185]\n??:? void tmplrlydxii.__unittest_L34_C1() [0x427e38]\n??:? void tmplrlydxii.__modtest() [0x427f04]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1e3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b076]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430209]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306b8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430195]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b04d]\n??:? runModuleUnitTests [0x42bfb9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428648]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong l = 0;\n\tlong h = n - 1;\n\tlong mid;\n\twhile (l <= h) \n\t{\n\t\tmid = (l + h) / 2;\n\t\tif (array[mid] == mid) \n\t\t{\n\t\t\tl = mid + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\th = mid - 1;\n\t\t}\n\t}\n\treturn l;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong first = array[0];\n\tlong last = array[$-1];\n\tlong mid = 0;\n\tlong i = 0;\n\twhile(first <= last) \n\t{\n\t\tmid = (first + last) / 2;\n\t\tif(array[mid] == mid + 1) \n\t\t{\n\t\t\tfirst = mid + 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tlast = mid - 1;\n\t\t}\n\t}\n\treturn first;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpukrovx8b.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x42817d]\n??:? void tmpukrovx8b.__unittest_L28_C1() [0x427e30]\n??:? void tmpukrovx8b.__modtest() [0x427efc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1db]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b06e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430201]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306b0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43018d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b045]\n??:? runModuleUnitTests [0x42bfb1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428640]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid;\n\t\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\t\n\t\tif (array[mid] != mid + 1 && array[mid - 1] == mid) \n\t\t{\n\t\t\treturn mid + 1;\n\t\t}\n\t\telse if (array[mid] != mid + 1) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\t\n\treturn -1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp2or49bk7.d(19): Range violation\n----------------\n??:? _d_arrayboundsp [0x428266]\n??:? long tmp2or49bk7.find_First_Missing(long[]) [0x427d8e]\n??:? void tmp2or49bk7.__unittest_L35_C1() [0x427e51]\n??:? void tmp2or49bk7.__modtest() [0x427f34]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c213]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0a6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430239]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306e8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301c5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b07d]\n??:? runModuleUnitTests [0x42bfe9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int func",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong first = array[0];\n\tlong last = array[$-1];\n\tlong count = last - first + 1;\n\tlong[] temp = new long[count];\n\tforeach(i; array)\n\t{\n\t\ttemp[i-first] = 1;\n\t}\n\tforeach(i; 0..count)\n\t{\n\t\tif(temp[i] == 0)\n\t\t{\n\t\t\treturn i+first;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5xloivy5.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x4281f5]\n??:? void tmp5xloivy5.__unittest_L27_C1() [0x427ea8]\n??:? void tmp5xloivy5.__modtest() [0x427f74]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c2af]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b142]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4303cd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43087c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430359]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b119]\n??:? runModuleUnitTests [0x42c085]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286b8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid;\n\twhile (low <= high)\n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (array[mid] == mid + 1)\n\t\t\tlow = mid + 1;\n\t\telse\n\t\t\thigh = mid - 1;\n\t}\n\treturn low + 1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpl1oj4xao.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x42813d]\n??:? void tmpl1oj4xao.__unittest_L24_C1() [0x427df4]\n??:? void tmpl1oj4xao.__modtest() [0x427ec0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c19b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b02e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4301c1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430670]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43014d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b005]\n??:? runModuleUnitTests [0x42bf71]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428600]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\t\n\twhile(low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif(array[mid] != mid + 1 && array[mid - 1] == mid) \n\t\t{\n\t\t\treturn mid + 1;\n\t\t}\n\t\telse if(array[mid] != mid + 1) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn mid + 1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpuqau0ivj.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x428266]\n??:? long tmpuqau0ivj.find_First_Missing(long[]) [0x427d8e]\n??:? void tmpuqau0ivj.__unittest_L33_C1() [0x427e51]\n??:? void tmpuqau0ivj.__modtest() [0x427f34]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c213]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0a6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430239]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306e8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301c5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b07d]\n??:? runModuleUnitTests [0x42bfe9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int func",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong first = array[0];\n\tlong last = array[$-1];\n\tlong mid;\n\twhile(first <= last) \n\t{\n\t\tmid = (first + last) / 2;\n\t\tif(array[mid] == mid) \n\t\t{\n\t\t\tfirst = mid + 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tlast = mid - 1;\n\t\t}\n\t}\n\treturn first;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpvklh8s3m.d(16): Range violation\n----------------\n??:? _d_arrayboundsp [0x42822e]\n??:? long tmpvklh8s3m.find_First_Missing(long[]) [0x427d98]\n??:? void tmpvklh8s3m.__unittest_L27_C1() [0x427ed0]\n??:? void tmpvklh8s3m.__modtest() [0x427efc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1db]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b06e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430201]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306b0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43018d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b045]\n??:? runModuleUnitTests [0x42bfb1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int func",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong l = 0, r = n - 1;\n\twhile (l <= r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (array[m] == m + 1) \n\t\t{\n\t\t\tl = m + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tr = m - 1;\n\t\t}\n\t}\n\treturn l + 1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmplrg9s6_n.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x42813d]\n??:? void tmplrg9s6_n.__unittest_L26_C1() [0x427df0]\n??:? void tmplrg9s6_n.__modtest() [0x427ebc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c19b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b02e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4301c1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430670]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43014d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b005]\n??:? runModuleUnitTests [0x42bf71]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428600]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (array[mid] == mid + 1) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t}\n\treturn low + 1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppd3k_yyx.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x42813d]\n??:? void tmppd3k_yyx.__unittest_L28_C1() [0x427df4]\n??:? void tmppd3k_yyx.__modtest() [0x427ec0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c19b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b02e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4301c1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430670]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43014d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b005]\n??:? runModuleUnitTests [0x42bf71]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428600]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong i = 0;\n\twhile (i < n) \n\t{\n\t\tif (array[i] != i)\n\t\t\treturn i;\n\t\ti++;\n\t}\n\treturn n;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong first = 0;\n\tlong last = array.length;\n\tlong mid = 0;\n\twhile (first < last) \n\t{\n\t\tmid = (first + last) / 2;\n\t\tif (array[mid] > mid) \n\t\t{\n\t\t\tlast = mid;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tfirst = mid + 1;\n\t\t}\n\t}\n\treturn first;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong l = 0;\n\tlong h = n - 1;\n\tlong mid;\n\twhile (l <= h) \n\t{\n\t\tmid = (l + h) / 2;\n\t\tif (array[mid] != mid + 1 && array[mid - 1] == mid)\n\t\t\treturn mid + 1;\n\t\telse if (array[mid] != mid + 1)\n\t\t\th = mid - 1;\n\t\telse\n\t\t\tl = mid + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmptob5ec4w.d(17): Range violation\n----------------\n??:? _d_arrayboundsp [0x428266]\n??:? long tmptob5ec4w.find_First_Missing(long[]) [0x427d8e]\n??:? void tmptob5ec4w.__unittest_L26_C1() [0x427e51]\n??:? void tmptob5ec4w.__modtest() [0x427f34]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c213]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0a6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430239]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306e8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301c5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b07d]\n??:? runModuleUnitTests [0x42bfe9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int func",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{ \n    long n = array.length; \n    long l = 0, r = n - 1; \n    while (l <= r) { \n        long m = (l + r) / 2; \n        if (array[m] != m + 1 && array[m - 1] == m) \n            return m + 1; \n        if (array[m] != m + 1) \n            r = m - 1; \n        else\n            l = m + 1; \n    } \n    return -1; \n} \nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpvpel1e5t.d(14): Range violation\n----------------\n??:? _d_arrayboundsp [0x42825e]\n??:? long tmpvpel1e5t.find_First_Missing(long[]) [0x427d8c]\n??:? void tmpvpel1e5t.__unittest_L23_C1() [0x427e4d]\n??:? void tmpvpel1e5t.__modtest() [0x427f30]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c20b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b09e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430231]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306e0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301bd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b075]\n??:? runModuleUnitTests [0x42bfe1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int func",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong l = 0;\n\tlong r = n - 1;\n\tlong m = 0;\n\t\n\twhile (l <= r) \n\t{\n\t\tm = (l + r) / 2;\n\t\tif (array[m] == m + 1) \n\t\t{\n\t\t\tl = m + 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tr = m - 1;\n\t\t}\n\t}\n\treturn l + 1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpq6uhx4wf.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x42813d]\n??:? void tmpq6uhx4wf.__unittest_L29_C1() [0x427df4]\n??:? void tmpq6uhx4wf.__modtest() [0x427ec0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c19b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b02e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4301c1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430670]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43014d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b005]\n??:? runModuleUnitTests [0x42bf71]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428600]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong first = array[0];\n\tlong last = array[$-1];\n\tlong mid = 0;\n\tlong index = 0;\n\t\n\twhile(first <= last)\n\t{\n\t\tmid = (first + last) / 2;\n\t\tif(array[mid] == mid)\n\t\t{\n\t\t\tfirst = mid + 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlast = mid - 1;\n\t\t}\n\t}\n\treturn first;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpvn33yds1.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x428226]\n??:? long tmpvn33yds1.find_First_Missing(long[]) [0x427d96]\n??:? void tmpvn33yds1.__unittest_L29_C1() [0x427ecc]\n??:? void tmpvn33yds1.__modtest() [0x427ef8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1d3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b066]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4301f9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306a8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430185]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b03d]\n??:? runModuleUnitTests [0x42bfa9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int func",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong i = 0;\n\twhile (i < n) \n\t{\n\t\tif (array[i] != i + 1) \n\t\t{\n\t\t\treturn i + 1;\n\t\t}\n\t\ti++;\n\t}\n\treturn n + 1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp7jqhkeu0.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x42811d]\n??:? void tmp7jqhkeu0.__unittest_L22_C1() [0x427dd0]\n??:? void tmp7jqhkeu0.__modtest() [0x427e9c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c17b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b00e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4301a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430650]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43012d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afe5]\n??:? runModuleUnitTests [0x42bf51]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285e0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong first = array[0];\n\tlong last = array[$-1];\n\tlong mid;\n\twhile(first <= last)\n\t{\n\t\tmid = (first + last) / 2;\n\t\tif(array[mid] == mid)\n\t\t{\n\t\t\tfirst = mid + 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlast = mid - 1;\n\t\t}\n\t}\n\treturn first;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpo93sep43.d(16): Range violation\n----------------\n??:? _d_arrayboundsp [0x42822e]\n??:? long tmpo93sep43.find_First_Missing(long[]) [0x427d98]\n??:? void tmpo93sep43.__unittest_L27_C1() [0x427ed0]\n??:? void tmpo93sep43.__modtest() [0x427efc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1db]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b06e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430201]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306b0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43018d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b045]\n??:? runModuleUnitTests [0x42bfb1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int func",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong i = 0;\n\twhile(i < n)\n\t{\n\t\tif(array[i] != i)\n\t\t{\n\t\t\treturn i;\n\t\t}\n\t\ti++;\n\t}\n\treturn i;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123192,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong first = 0;\n\tlong last = array.length;\n\tlong mid = 0;\n\twhile(first < last)\n\t{\n\t\tmid = (first + last) / 2;\n\t\tif(array[mid] == mid)\n\t\t{\n\t\t\tfirst = mid + 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlast = mid;\n\t\t}\n\t}\n\treturn first;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123192,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong first = array[0];\n\tlong last = array[$-1];\n\tlong mid;\n\twhile (first <= last) \n\t{\n\t\tmid = (first + last) / 2;\n\t\tif (mid == array[mid - array[0]]) \n\t\t{\n\t\t\tfirst = mid + 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tlast = mid - 1;\n\t\t}\n\t}\n\treturn first;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123192,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp52ias4rv.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4281a5]\n??:? void tmp52ias4rv.__unittest_L27_C1() [0x427f12]\n??:? void tmp52ias4rv.__modtest() [0x427f28]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c203]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b096]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430229]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306d8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301b5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b06d]\n??:? runModuleUnitTests [0x42bfd9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428668]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong i = 0;\n\twhile (i < n) \n\t{\n\t\tif (array[i] != i) \n\t\t{\n\t\t\treturn i;\n\t\t}\n\t\ti++;\n\t}\n\treturn n;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\t\n\twhile(low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\t\n\t\tif(array[mid] != mid + 1 && array[mid - 1] == mid)\n\t\t{\n\t\t\treturn mid + 1;\n\t\t}\n\t\telse if(array[mid] != mid + 1)\n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\t\n\tif(low > high)\n\t{\n\t\treturn mid + 1;\n\t}\n\t\n\treturn -1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123192,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpum9k0_p4.d(19): Range violation\n----------------\n??:? _d_arrayboundsp [0x428276]\n??:? long tmpum9k0_p4.find_First_Missing(long[]) [0x427d8e]\n??:? void tmpum9k0_p4.__unittest_L40_C1() [0x427e65]\n??:? void tmpum9k0_p4.__modtest() [0x427f48]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c223]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0b6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430249]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306f8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301d5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b08d]\n??:? runModuleUnitTests [0x42bff9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int func",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong first = array[0];\n\tlong last = array[$-1];\n\tlong mid;\n\twhile(first <= last)\n\t{\n\t\tmid = (first + last) / 2;\n\t\tif(array[mid] == mid)\n\t\t{\n\t\t\tfirst = mid + 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlast = mid - 1;\n\t\t}\n\t}\n\treturn first;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpo93sep43.d(16): Range violation\n----------------\n??:? _d_arrayboundsp [0x42822e]\n??:? long tmpo93sep43.find_First_Missing(long[]) [0x427d98]\n??:? void tmpo93sep43.__unittest_L27_C1() [0x427ed0]\n??:? void tmpo93sep43.__modtest() [0x427efc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1db]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b06e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430201]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306b0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43018d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b045]\n??:? runModuleUnitTests [0x42bfb1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int func",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong l = 0;\n\tlong r = n - 1;\n\tlong m = 0;\n\twhile (l <= r) \n\t{\n\t\tm = (l + r) / 2;\n\t\tif (array[m] == m + 1) \n\t\t{\n\t\t\tl = m + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tr = m - 1;\n\t\t}\n\t}\n\treturn l + 1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123192,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjqi95h_q.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x42813d]\n??:? void tmpjqi95h_q.__unittest_L28_C1() [0x427df4]\n??:? void tmpjqi95h_q.__modtest() [0x427ec0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c19b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b02e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4301c1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430670]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43014d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b005]\n??:? runModuleUnitTests [0x42bf71]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428600]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong i = 0;\n\tlong j = array.length;\n\twhile (i < j) \n\t{\n\t\tlong m = (i + j) / 2;\n\t\tif (array[m] == m) \n\t\t{\n\t\t\ti = m + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tj = m;\n\t\t}\n\t}\n\treturn i;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123192,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (array[mid] != mid + 1 && array[mid - 1] == mid) \n\t\t{\n\t\t\treturn mid + 1;\n\t\t}\n\t\tif (array[mid] != mid + 1) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123192,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpu15gasra.d(17): Range violation\n----------------\n??:? _d_arrayboundsp [0x428266]\n??:? long tmpu15gasra.find_First_Missing(long[]) [0x427d8e]\n??:? void tmpu15gasra.__unittest_L32_C1() [0x427e51]\n??:? void tmpu15gasra.__modtest() [0x427f34]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c213]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0a6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430239]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306e8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301c5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b07d]\n??:? runModuleUnitTests [0x42bfe9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int func",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong first = 0;\n\tlong last = array.length;\n\tlong mid = 0;\n\twhile(first < last)\n\t{\n\t\tmid = (first + last) / 2;\n\t\tif(array[mid] > mid)\n\t\t{\n\t\t\tlast = mid;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tfirst = mid + 1;\n\t\t}\n\t}\n\treturn first;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123192,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (array[mid] != mid + 1 && array[mid - 1] == mid) \n\t\t{\n\t\t\treturn mid + 1;\n\t\t}\n\t\telse if (array[mid] != mid + 1) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn mid + 1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp96kx5wjv.d(17): Range violation\n----------------\n??:? _d_arrayboundsp [0x428266]\n??:? long tmp96kx5wjv.find_First_Missing(long[]) [0x427d8e]\n??:? void tmp96kx5wjv.__unittest_L32_C1() [0x427e51]\n??:? void tmp96kx5wjv.__modtest() [0x427f34]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c213]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0a6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430239]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306e8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301c5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b07d]\n??:? runModuleUnitTests [0x42bfe9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int func",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong first = 0;\n\tlong last = array.length;\n\tlong mid = 0;\n\twhile(first < last)\n\t{\n\t\tmid = (first + last) / 2;\n\t\tif(array[mid] == mid)\n\t\t{\n\t\t\tfirst = mid + 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlast = mid;\n\t\t}\n\t}\n\treturn first;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123192,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong first = array[0];\n\tlong last = array[$-1];\n\tlong mid = 0;\n\tlong result = 0;\n\t\n\twhile(first <= last) \n\t{\n\t\tmid = (first + last) / 2;\n\t\t\n\t\tif(array[mid] == mid) \n\t\t{\n\t\t\tfirst = mid + 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tlast = mid - 1;\n\t\t}\n\t}\n\t\n\tresult = first;\n\treturn result;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123192,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpls3b8fdy.d(19): Range violation\n----------------\n??:? _d_arrayboundsp [0x42822e]\n??:? long tmpls3b8fdy.find_First_Missing(long[]) [0x427d96]\n??:? void tmpls3b8fdy.__unittest_L32_C1() [0x427ed0]\n??:? void tmpls3b8fdy.__modtest() [0x427efc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1db]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b06e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430201]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306b0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43018d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b045]\n??:? runModuleUnitTests [0x42bfb1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int func",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n-1;\n\tlong mid = 0;\n\twhile(low <= high)\n\t{\n\t\tmid = (low + high)/2;\n\t\tif(array[mid] != mid+1)\n\t\t{\n\t\t\tif(mid == 0 || array[mid-1] == mid)\n\t\t\t\treturn mid+1;\n\t\t\telse\n\t\t\t\thigh = mid-1;\n\t\t}\n\t\telse\n\t\t\tlow = mid+1;\n\t}\n\treturn mid+1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123192,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppju70fkr.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x42818d]\n??:? void tmppju70fkr.__unittest_L29_C1() [0x427e44]\n??:? void tmppju70fkr.__modtest() [0x427f10]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b07e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430211]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306c0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43019d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b055]\n??:? runModuleUnitTests [0x42bfc1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428650]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid;\n\tlong mid_element;\n\tlong mid_element_next;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tmid_element = array[mid];\n\t\tmid_element_next = array[mid + 1];\n\t\tif (mid_element + 1 != mid_element_next) \n\t\t{\n\t\t\treturn mid_element + 1;\n\t\t}\n\t\tif (mid_element % 2 == 0) \n\t\t{\n\t\t\tif (mid_element == array[mid - 1]) \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (mid_element == array[mid - 1]) \n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tlow = mid + 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123192,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp4pjqrzth.d(54): unittest failure\n----------------\n??:? _d_unittestp [0x428215]\n??:? void tmp4pjqrzth.__unittest_L50_C1() [0x427ecc]\n??:? void tmp4pjqrzth.__modtest() [0x427f98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c273]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b106]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430299]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430748]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430225]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0dd]\n??:? runModuleUnitTests [0x42c049]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286d8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (array[mid] == mid + 1) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t}\n\treturn low + 1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517549,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmplls7rbau.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x42813d]\n??:? void tmplls7rbau.__unittest_L28_C1() [0x427df4]\n??:? void tmplls7rbau.__modtest() [0x427ec0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c19b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b02e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4301c1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430670]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43014d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b005]\n??:? runModuleUnitTests [0x42bf71]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428600]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong first = 0;\n\tlong last = array.length;\n\tlong mid = 0;\n\t\n\twhile(first < last)\n\t{\n\t\tmid = (first + last) / 2;\n\t\t\n\t\tif(array[mid] == mid)\n\t\t{\n\t\t\tfirst = mid + 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlast = mid;\n\t\t}\n\t}\n\t\n\treturn first;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123192,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong i = 0;\n\twhile (i < array.length)\n\t{\n\t\tif (array[i] != i)\n\t\t\treturn i;\n\t\ti++;\n\t}\n\treturn i;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123192,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong len = array.length;\n\tlong low = 0;\n\tlong high = len - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (array[mid] != mid + 1 && array[mid - 1] == mid)\n\t\t\treturn mid + 1;\n\t\tif (array[mid] != mid + 1)\n\t\t\thigh = mid - 1;\n\t\telse\n\t\t\tlow = mid + 1;\n\t}\n\treturn mid + 1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123192,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpft86zmyj.d(17): Range violation\n----------------\n??:? _d_arrayboundsp [0x428266]\n??:? long tmpft86zmyj.find_First_Missing(long[]) [0x427d8e]\n??:? void tmpft86zmyj.__unittest_L26_C1() [0x427e51]\n??:? void tmpft86zmyj.__modtest() [0x427f34]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c213]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0a6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430239]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306e8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301c5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b07d]\n??:? runModuleUnitTests [0x42bfe9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int func",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (array[mid] != mid + 1 && array[mid - 1] == mid) \n\t\t{\n\t\t\treturn mid + 1;\n\t\t}\n\t\telse if (array[mid] != mid + 1) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\tif (low > 0) \n\t{\n\t\treturn low + 1;\n\t}\n\treturn 1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517549,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmplwczm730.d(17): Range violation\n----------------\n??:? _d_arrayboundsp [0x428276]\n??:? long tmplwczm730.find_First_Missing(long[]) [0x427d8e]\n??:? void tmplwczm730.__unittest_L36_C1() [0x427e61]\n??:? void tmplwczm730.__modtest() [0x427f44]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c223]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0b6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430249]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306f8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301d5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b08d]\n??:? runModuleUnitTests [0x42bff9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int func",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong i = 0;\n\twhile (i < n) \n\t{\n\t\tif (array[i] != i + 1) \n\t\t{\n\t\t\treturn i + 1;\n\t\t}\n\t\ti++;\n\t}\n\treturn n + 1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp7jqhkeu0.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x42811d]\n??:? void tmp7jqhkeu0.__unittest_L22_C1() [0x427dd0]\n??:? void tmp7jqhkeu0.__modtest() [0x427e9c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c17b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b00e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4301a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430650]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43012d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afe5]\n??:? runModuleUnitTests [0x42bf51]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285e0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong first = array[0];\n\tlong last = array[$ - 1];\n\tlong mid;\n\t\n\twhile(first <= last)\n\t{\n\t\tmid = (first + last) / 2;\n\t\tif(array[mid] == mid)\n\t\t{\n\t\t\tfirst = mid + 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlast = mid - 1;\n\t\t}\n\t}\n\treturn first;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123192,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpa8mlj_bp.d(17): Range violation\n----------------\n??:? _d_arrayboundsp [0x42822e]\n??:? long tmpa8mlj_bp.find_First_Missing(long[]) [0x427d98]\n??:? void tmpa8mlj_bp.__unittest_L28_C1() [0x427ed0]\n??:? void tmpa8mlj_bp.__modtest() [0x427efc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1db]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b06e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430201]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306b0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43018d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b045]\n??:? runModuleUnitTests [0x42bfb1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int func",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong i = 0;\n\twhile (i < n) \n\t{\n\t\tif (array[i] != i) \n\t\t{\n\t\t\treturn i;\n\t\t}\n\t\ti = i + 1;\n\t}\n\treturn n;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123192,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong first = 0;\n\tlong last = array.length;\n\tlong mid = 0;\n\twhile (first < last) \n\t{\n\t\tmid = (first + last) / 2;\n\t\tif (array[mid] > mid) \n\t\t{\n\t\t\tlast = mid;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tfirst = mid + 1;\n\t\t}\n\t}\n\treturn first;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong first = 0;\n\tlong last = array.length - 1;\n\tlong mid = 0;\n\t\n\twhile (first <= last) \n\t{\n\t\tmid = (first + last) / 2;\n\t\tif (array[mid] != mid + 1) \n\t\t{\n\t\t\tif (mid == 0 || array[mid - 1] == mid)\n\t\t\t\treturn mid + 1;\n\t\t\telse\n\t\t\t\tlast = mid - 1;\n\t\t} \n\t\telse\n\t\t\tfirst = mid + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123192,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpns_z2afy.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x42818d]\n??:? void tmpns_z2afy.__unittest_L29_C1() [0x427e40]\n??:? void tmpns_z2afy.__modtest() [0x427f0c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b07e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430211]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306c0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43019d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b055]\n??:? runModuleUnitTests [0x42bfc1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428650]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong first = array[0];\n\tlong last = array[$-1];\n\tlong size = last - first;\n\t\n\tif (size == 0)\n\t\treturn first + 1;\n\t\t\n\tlong[] temp = new long[size];\n\t\n\tforeach(i; 0 .. size)\n\t\ttemp[i] = first + i;\n\t\t\n\treturn temp.difference(array).front;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123192,
      "stdout": "",
      "stderr": "/tmp/tmpesmcxnrt.d(22): Error: no property `difference` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpesmcxnrt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong first = 0;\n\tlong last = array.length;\n\tlong mid = 0;\n\t\n\twhile(first < last)\n\t{\n\t\tmid = (first + last) / 2;\n\t\tif(array[mid] != mid + 1)\n\t\t{\n\t\t\tif(mid == 0 || array[mid - 1] == mid)\n\t\t\t\treturn mid + 1;\n\t\t\telse\n\t\t\t\tlast = mid;\n\t\t}\n\t\telse\n\t\t\tfirst = mid + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123192,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp6pv2xric.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x428185]\n??:? void tmp6pv2xric.__unittest_L29_C1() [0x427e38]\n??:? void tmp6pv2xric.__modtest() [0x427f04]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1e3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b076]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430209]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306b8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430195]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b04d]\n??:? runModuleUnitTests [0x42bfb9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428648]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\t\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (array[mid] == mid + 1) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t}\n\t\n\treturn low + 1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123192,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpoo4ow7t3.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x42813d]\n??:? void tmpoo4ow7t3.__unittest_L30_C1() [0x427df4]\n??:? void tmpoo4ow7t3.__modtest() [0x427ec0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c19b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b02e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4301c1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430670]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43014d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b005]\n??:? runModuleUnitTests [0x42bf71]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428600]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong first = 0;\n\tlong last = array.length;\n\tlong mid = 0;\n\twhile(first < last)\n\t{\n\t\tmid = (first + last) / 2;\n\t\tif(array[mid] > mid)\n\t\t{\n\t\t\tlast = mid;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tfirst = mid + 1;\n\t\t}\n\t}\n\treturn first;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123192,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong[] result = array.filter!(a => a > 0);\n\tif(result.length == 0)\n\t\treturn 1;\n\telse\n\t{\n\t\tlong max = result.max;\n\t\tlong min = result.min;\n\t\tif(min != 1)\n\t\t\treturn 1;\n\t\telse\n\t\t{\n\t\t\tlong[] temp = new long[max];\n\t\t\tforeach(long i; result)\n\t\t\t{\n\t\t\t\ttemp[i - 1] = i;\n\t\t\t}\n\t\t\tlong[] temp2 = temp.filter!(a => a == 0);\n\t\t\tif(temp2.length == 0)\n\t\t\t\treturn max + 1;\n\t\t\telse\n\t\t\t{\n\t\t\t\tlong[] temp3 = temp2.map!(a => a + 1);\n\t\t\t\treturn temp3[0];\n\t\t\t}\n\t\t}\n\t}\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123192,
      "stdout": "",
      "stderr": "/tmp/tmpgmd2e7ng.d(10): Error: no property `filter` for type `long[]`\n/tmp/tmpgmd2e7ng.d(15): Error: no property `max` for type `long[]`\n/tmp/tmpgmd2e7ng.d(16): Error: no property `min` for type `long[]`\n/tmp/tmpgmd2e7ng.d(26): Error: no property `filter` for type `long[]`\n/tmp/tmpgmd2e7ng.d(31): Error: no property `map` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgmd2e7ng.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong i = 0;\n\tforeach(long x; array)\n\t{\n\t\tif(x != i)\n\t\t{\n\t\t\treturn i;\n\t\t}\n\t\ti++;\n\t}\n\treturn i;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123192,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (array[mid] != mid + 1 && array[mid - 1] == mid) \n\t\t{\n\t\t\treturn mid + 1;\n\t\t}\n\t\tif (array[mid] != mid + 1) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123192,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpu15gasra.d(17): Range violation\n----------------\n??:? _d_arrayboundsp [0x428266]\n??:? long tmpu15gasra.find_First_Missing(long[]) [0x427d8e]\n??:? void tmpu15gasra.__unittest_L32_C1() [0x427e51]\n??:? void tmpu15gasra.__modtest() [0x427f34]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c213]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0a6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430239]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306e8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301c5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b07d]\n??:? runModuleUnitTests [0x42bfe9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int func",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong first = 0;\n\tlong last = array.length;\n\tlong mid = 0;\n\t\n\twhile(first < last) \n\t{\n\t\tmid = (first + last) / 2;\n\t\tif(array[mid] != mid) \n\t\t{\n\t\t\tif(mid == 0 || array[mid - 1] == mid - 1)\n\t\t\t\treturn mid;\n\t\t\telse\n\t\t\t\tlast = mid;\n\t\t}\n\t\telse\n\t\t\tfirst = mid + 1;\n\t}\n\t\n\tif(first == array.length)\n\t\treturn array.length;\n\t\n\treturn -1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123192,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (array[mid] != mid + 1 && array[mid - 1] == mid) \n\t\t{\n\t\t\treturn mid + 1;\n\t\t}\n\t\tif (array[mid] != mid + 1) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\tif (low > 0) \n\t{\n\t\treturn low + 1;\n\t}\n\treturn 1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123192,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp98so3yv2.d(17): Range violation\n----------------\n??:? _d_arrayboundsp [0x428276]\n??:? long tmp98so3yv2.find_First_Missing(long[]) [0x427d8e]\n??:? void tmp98so3yv2.__unittest_L36_C1() [0x427e61]\n??:? void tmp98so3yv2.__modtest() [0x427f44]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c223]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0b6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430249]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306f8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301d5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b08d]\n??:? runModuleUnitTests [0x42bff9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int func",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong i = 0;\n\tlong j = array.length;\n\tlong mid = 0;\n\twhile (i < j) \n\t{\n\t\tmid = (i + j) / 2;\n\t\tif (array[mid] == mid) \n\t\t{\n\t\t\ti = mid + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tj = mid;\n\t\t}\n\t}\n\treturn i;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123192,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong first = 0;\n\tlong last = array.length;\n\tlong mid = 0;\n\t\n\twhile(first < last)\n\t{\n\t\tmid = (first + last) / 2;\n\t\t\n\t\tif(array[mid] == mid)\n\t\t{\n\t\t\tfirst = mid + 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlast = mid;\n\t\t}\n\t}\n\t\n\treturn first;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123192,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong i = 0;\n\tlong j = array.length;\n\tlong mid = 0;\n\twhile (i < j) \n\t{\n\t\tmid = (i + j) / 2;\n\t\tif (array[mid] == mid) \n\t\t{\n\t\t\ti = mid + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tj = mid;\n\t\t}\n\t}\n\treturn i;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123192,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (array[mid] != mid + 1 && array[mid - 1] == mid) \n\t\t{\n\t\t\treturn mid + 1;\n\t\t}\n\t\telse if (array[mid] != mid + 1) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn mid + 1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp96kx5wjv.d(17): Range violation\n----------------\n??:? _d_arrayboundsp [0x428266]\n??:? long tmp96kx5wjv.find_First_Missing(long[]) [0x427d8e]\n??:? void tmp96kx5wjv.__unittest_L32_C1() [0x427e51]\n??:? void tmp96kx5wjv.__modtest() [0x427f34]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c213]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0a6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430239]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306e8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301c5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b07d]\n??:? runModuleUnitTests [0x42bfe9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int func",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong first = array[0];\n\tlong last = array[$-1];\n\tlong count = last - first + 1;\n\tlong[] temp = new long[count];\n\tforeach(i; array)\n\t{\n\t\ttemp[i-first] = 1;\n\t}\n\tforeach(i; temp)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\treturn first + i;\n\t\t}\n\t}\n\treturn last + 1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123192,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp25ugq5a7.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4281f5]\n??:? void tmp25ugq5a7.__unittest_L27_C1() [0x427f04]\n??:? void tmp25ugq5a7.__modtest() [0x427f74]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c2af]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b142]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4303cd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43087c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430359]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b119]\n??:? runModuleUnitTests [0x42c085]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286b8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (array[mid] != mid + 1 && array[mid - 1] == mid) \n\t\t{\n\t\t\treturn mid + 1;\n\t\t}\n\t\telse if (array[mid] != mid + 1) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\tif (low > 0) \n\t{\n\t\treturn low + 1;\n\t}\n\treturn 1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517549,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmplwczm730.d(17): Range violation\n----------------\n??:? _d_arrayboundsp [0x428276]\n??:? long tmplwczm730.find_First_Missing(long[]) [0x427d8e]\n??:? void tmplwczm730.__unittest_L36_C1() [0x427e61]\n??:? void tmplwczm730.__modtest() [0x427f44]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c223]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0b6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430249]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306f8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301d5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b08d]\n??:? runModuleUnitTests [0x42bff9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int func",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (array[mid] != mid + 1 && array[mid - 1] == mid)\n\t\t\treturn mid + 1;\n\t\telse if (array[mid] != mid + 1)\n\t\t\thigh = mid - 1;\n\t\telse\n\t\t\tlow = mid + 1;\n\t}\n\treturn mid + 1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123192,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpwds3zmg1.d(17): Range violation\n----------------\n??:? _d_arrayboundsp [0x428266]\n??:? long tmpwds3zmg1.find_First_Missing(long[]) [0x427d8e]\n??:? void tmpwds3zmg1.__unittest_L26_C1() [0x427e51]\n??:? void tmpwds3zmg1.__modtest() [0x427f34]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c213]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0a6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430239]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306e8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301c5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b07d]\n??:? runModuleUnitTests [0x42bfe9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int func",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong i = 0;\n\tlong j = array.length;\n\tlong mid = 0;\n\twhile (i < j) \n\t{\n\t\tmid = (i + j) / 2;\n\t\tif (array[mid] == mid + 1) \n\t\t{\n\t\t\ti = mid + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tj = mid;\n\t\t}\n\t}\n\treturn i + 1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123192,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpcy7eimzb.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x428135]\n??:? void tmpcy7eimzb.__unittest_L27_C1() [0x427de8]\n??:? void tmpcy7eimzb.__modtest() [0x427eb4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c193]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b026]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4301b9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430668]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430145]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42affd]\n??:? runModuleUnitTests [0x42bf69]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285f8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong low = 0;\n\tlong high = array.length;\n\tlong mid = 0;\n\twhile (low < high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (array[mid] == mid) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\thigh = mid;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123192,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (array[mid] != mid + 1 && array[mid - 1] == mid) \n\t\t{\n\t\t\treturn mid + 1;\n\t\t}\n\t\telse if (array[mid] != mid + 1) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn mid + 1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp96kx5wjv.d(17): Range violation\n----------------\n??:? _d_arrayboundsp [0x428266]\n??:? long tmp96kx5wjv.find_First_Missing(long[]) [0x427d8e]\n??:? void tmp96kx5wjv.__unittest_L32_C1() [0x427e51]\n??:? void tmp96kx5wjv.__modtest() [0x427f34]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c213]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0a6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430239]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306e8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301c5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b07d]\n??:? runModuleUnitTests [0x42bfe9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int func",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\t\n\twhile(low <= high)\n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif(array[mid] != mid + 1 && array[mid - 1] == mid)\n\t\t{\n\t\t\treturn mid + 1;\n\t\t}\n\t\telse if(array[mid] != mid + 1)\n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\t\n\tif(low > 0)\n\t{\n\t\treturn low + 1;\n\t}\n\t\n\treturn 1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123192,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp7erxuihj.d(17): Range violation\n----------------\n??:? _d_arrayboundsp [0x428276]\n??:? long tmp7erxuihj.find_First_Missing(long[]) [0x427d8c]\n??:? void tmp7erxuihj.__unittest_L38_C1() [0x427e61]\n??:? void tmp7erxuihj.__modtest() [0x427f44]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c223]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0b6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430249]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306f8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301d5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b08d]\n??:? runModuleUnitTests [0x42bff9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int func",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile(low <= high)\n\t{\n\t\tmid = (low + high) / 2;\n\t\tif(array[mid] == mid)\n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t\telse if(array[mid] > mid)\n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123192,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong first = 0;\n\tlong last = array.length;\n\tlong mid = 0;\n\twhile(first < last)\n\t{\n\t\tmid = (first + last) / 2;\n\t\tif(array[mid] != mid)\n\t\t{\n\t\t\tif(mid == 0 || array[mid - 1] == mid - 1)\n\t\t\t{\n\t\t\t\treturn mid;\n\t\t\t}\n\t\t\tlast = mid;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tfirst = mid + 1;\n\t\t}\n\t}\n\treturn first;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123192,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (array[mid] != mid + 1 && array[mid - 1] == mid) \n\t\t{\n\t\t\treturn mid + 1;\n\t\t}\n\t\telse if (array[mid] != mid + 1) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123192,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpc1ejdnlb.d(17): Range violation\n----------------\n??:? _d_arrayboundsp [0x428266]\n??:? long tmpc1ejdnlb.find_First_Missing(long[]) [0x427d8e]\n??:? void tmpc1ejdnlb.__unittest_L32_C1() [0x427e51]\n??:? void tmpc1ejdnlb.__modtest() [0x427f34]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c213]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0a6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430239]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306e8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301c5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b07d]\n??:? runModuleUnitTests [0x42bfe9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int func",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid;\n\twhile(low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif(array[mid] == mid) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123192,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (array[mid] != mid + 1) \n\t\t{\n\t\t\tif (mid == 0 || array[mid - 1] == mid)\n\t\t\t\treturn mid + 1;\n\t\t\telse\n\t\t\t\thigh = mid - 1;\n\t\t} \n\t\telse\n\t\t\tlow = mid + 1;\n\t}\n\treturn mid + 1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123192,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpnke9w9jq.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x42818d]\n??:? void tmpnke9w9jq.__unittest_L29_C1() [0x427e44]\n??:? void tmpnke9w9jq.__modtest() [0x427f10]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b07e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430211]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306c0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43019d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b055]\n??:? runModuleUnitTests [0x42bfc1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428650]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong i = 0;\n\tlong j = array.length;\n\tlong mid = 0;\n\twhile (i < j) \n\t{\n\t\tmid = (i + j) / 2;\n\t\tif (array[mid] == mid + 1) \n\t\t{\n\t\t\ti = mid + 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tj = mid;\n\t\t}\n\t}\n\treturn i + 1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123192,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqz_v21t3.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x428135]\n??:? void tmpqz_v21t3.__unittest_L27_C1() [0x427de8]\n??:? void tmpqz_v21t3.__modtest() [0x427eb4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c193]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b026]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4301b9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430668]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430145]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42affd]\n??:? runModuleUnitTests [0x42bf69]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285f8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong first = 0;\n\tlong last = array.length;\n\tlong mid = 0;\n\t\n\twhile(first < last)\n\t{\n\t\tmid = (first + last) / 2;\n\t\t\n\t\tif(array[mid] == mid)\n\t\t{\n\t\t\tfirst = mid + 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlast = mid;\n\t\t}\n\t}\n\t\n\treturn first;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123192,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong i = 0;\n\tlong n = array.length;\n\twhile (i < n) \n\t{\n\t\tif (array[i] != i) \n\t\t{\n\t\t\treturn i;\n\t\t}\n\t\ti++;\n\t}\n\treturn n;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123192,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong low = 0;\n\tlong high = array.length - 1;\n\tlong mid = 0;\n\t\n\twhile(low <= high)\n\t{\n\t\tmid = (low + high) / 2;\n\t\tif(array[mid] != mid + 1)\n\t\t{\n\t\t\tif(mid == 0 || array[mid - 1] == mid)\n\t\t\t{\n\t\t\t\treturn mid + 1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123192,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp60oyk_oh.d(39): unittest failure\n----------------\n??:? _d_unittestp [0x42818d]\n??:? void tmp60oyk_oh.__unittest_L35_C1() [0x427e40]\n??:? void tmp60oyk_oh.__modtest() [0x427f0c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b07e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430211]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306c0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43019d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b055]\n??:? runModuleUnitTests [0x42bfc1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428650]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong first = 0;\n\tlong last = array.length;\n\tlong mid = 0;\n\twhile(first < last)\n\t{\n\t\tmid = (first + last) / 2;\n\t\tif(array[mid] == mid)\n\t\t{\n\t\t\tfirst = mid + 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlast = mid;\n\t\t}\n\t}\n\treturn first;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123192,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong i = 0;\n\tlong j = array.length - 1;\n\t\n\twhile(i < j) \n\t{\n\t\tlong mid = (i + j) / 2;\n\t\t\n\t\tif(array[mid] == mid) \n\t\t{\n\t\t\ti = mid + 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tj = mid;\n\t\t}\n\t}\n\t\n\treturn i;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123192,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpavcs5a2o.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x42812d]\n??:? void tmpavcs5a2o.__unittest_L29_C1() [0x427de4]\n??:? void tmpavcs5a2o.__modtest() [0x427eb0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c18b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b01e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4301b1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430660]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43013d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aff5]\n??:? runModuleUnitTests [0x42bf61]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285f0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong left = 0;\n\tlong right = n - 1;\n\tlong mid = 0;\n\twhile (left <= right) \n\t{\n\t\tmid = (left + right) / 2;\n\t\tif (array[mid] != mid + 1 && array[mid - 1] == mid) \n\t\t{\n\t\t\treturn mid + 1;\n\t\t}\n\t\tif (array[mid] != mid + 1) \n\t\t{\n\t\t\tright = mid - 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tleft = mid + 1;\n\t\t}\n\t}\n\tif (left == n) \n\t{\n\t\treturn n + 1;\n\t}\n\treturn mid + 1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123192,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpdk5mq6mf.d(17): Range violation\n----------------\n??:? _d_arrayboundsp [0x42827e]\n??:? long tmpdk5mq6mf.find_First_Missing(long[]) [0x427d92]\n??:? void tmpdk5mq6mf.__unittest_L36_C1() [0x427e69]\n??:? void tmpdk5mq6mf.__modtest() [0x427f4c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c22b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0be]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430251]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430700]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301dd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b095]\n??:? runModuleUnitTests [0x42c001]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int func",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (array[mid] == mid) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123192,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong first = 0;\n\tlong last = array.length;\n\tlong mid = 0;\n\twhile(first < last)\n\t{\n\t\tmid = first + (last - first) / 2;\n\t\tif(array[mid] != mid)\n\t\t{\n\t\t\tif(mid == 0 || array[mid - 1] == mid - 1)\n\t\t\t{\n\t\t\t\treturn mid;\n\t\t\t}\n\t\t\tlast = mid;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tfirst = mid + 1;\n\t\t}\n\t}\n\tif(first == array.length)\n\t{\n\t\treturn array.length;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123192,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong first = 0;\n\tlong last = array.length;\n\tlong mid = 0;\n\t\n\twhile (first < last) \n\t{\n\t\tmid = first + (last - first) / 2;\n\t\t\n\t\tif (array[mid] == mid) \n\t\t{\n\t\t\tfirst = mid + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tlast = mid;\n\t\t}\n\t}\n\t\n\treturn first;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123192,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong start = 0;\n\tlong end = array.length - 1;\n\tlong mid = 0;\n\twhile (start <= end) \n\t{\n\t\tmid = (start + end) / 2;\n\t\tif (array[mid] == mid) \n\t\t{\n\t\t\tstart = mid + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tend = mid - 1;\n\t\t}\n\t}\n\treturn start;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123192,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong first = 0;\n\tlong last = array.length;\n\tlong mid = 0;\n\twhile(first < last)\n\t{\n\t\tmid = first + (last - first) / 2;\n\t\tif(array[mid] == mid)\n\t\t{\n\t\t\tfirst = mid + 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlast = mid;\n\t\t}\n\t}\n\treturn first;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123192,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (array[mid] == mid + 1) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t}\n\treturn (low + 1);\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123192,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp6yuymldn.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x42813d]\n??:? void tmp6yuymldn.__unittest_L28_C1() [0x427df4]\n??:? void tmp6yuymldn.__modtest() [0x427ec0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c19b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b02e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4301c1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430670]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43014d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b005]\n??:? runModuleUnitTests [0x42bf71]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428600]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong i = 0;\n\twhile (i < n) \n\t{\n\t\tif (array[i] != i) \n\t\t{\n\t\t\treturn i;\n\t\t}\n\t\ti++;\n\t}\n\treturn i;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123192,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong i = 0;\n\tlong n = array.length;\n\twhile (i < n) \n\t{\n\t\tif (array[i] != i) \n\t\t{\n\t\t\treturn i;\n\t\t}\n\t\ti++;\n\t}\n\treturn i;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123193,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n-1;\n\tlong mid = 0;\n\twhile(low <= high)\n\t{\n\t\tmid = (low + high) / 2;\n\t\tif(array[mid] != mid)\n\t\t{\n\t\t\tif(mid == 0 || array[mid-1] == mid-1)\n\t\t\t\treturn mid;\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse\n\t\t\tlow = mid + 1;\n\t}\n\treturn mid;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123193,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpwg81j3jq.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x42818d]\n??:? void tmpwg81j3jq.__unittest_L28_C1() [0x427e40]\n??:? void tmpwg81j3jq.__modtest() [0x427f0c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b07e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430211]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306c0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43019d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b055]\n??:? runModuleUnitTests [0x42bfc1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428650]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (array[mid] == mid + 1) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t}\n\treturn low + 1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517549,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmplls7rbau.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x42813d]\n??:? void tmplls7rbau.__unittest_L28_C1() [0x427df4]\n??:? void tmplls7rbau.__modtest() [0x427ec0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c19b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b02e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4301c1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430670]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43014d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b005]\n??:? runModuleUnitTests [0x42bf71]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428600]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong first = 0;\n\tlong last = array.length - 1;\n\tlong mid = 0;\n\t\n\twhile (first <= last) \n\t{\n\t\tmid = (first + last) / 2;\n\t\t\n\t\tif (array[mid] == mid) \n\t\t{\n\t\t\tfirst = mid + 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tlast = mid - 1;\n\t\t}\n\t}\n\t\n\treturn first;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123193,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong[] temp = array.dup;\n\ttemp.sort;\n\tlong i = 0;\n\twhile(i < temp.length)\n\t{\n\t\tif(temp[i] != i)\n\t\t\treturn i;\n\t\ti++;\n\t}\n\treturn temp.length;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123193,
      "stdout": "",
      "stderr": "/tmp/tmpdrrs6i5l.d(11): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdrrs6i5l.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong first = array[0];\n\tlong last = array[$-1];\n\t\n\tif(first != 1)\n\t\treturn 1;\n\t\n\tif(last == $)\n\t\treturn $+1;\n\t\n\tlong mid = (first + last) / 2;\n\t\n\twhile(first < last)\n\t{\n\t\tif(array[mid] == mid)\n\t\t\tfirst = mid + 1;\n\t\telse\n\t\t\tlast = mid;\n\t\t\n\t\tmid = (first + last) / 2;\n\t}\n\t\n\treturn mid;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123192,
      "stdout": "",
      "stderr": "/tmp/tmp8q54xice.d(16): Error: `$` is valid only inside [] of index or slice\n/tmp/tmp8q54xice.d(17): Error: `$` is valid only inside [] of index or slice\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8q54xice.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (array[mid] != mid + 1 && array[mid - 1] == mid)\n\t\t\treturn mid + 1;\n\t\telse if (array[mid] != mid + 1)\n\t\t\thigh = mid - 1;\n\t\telse\n\t\t\tlow = mid + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123193,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpjunici_e.d(17): Range violation\n----------------\n??:? _d_arrayboundsp [0x428266]\n??:? long tmpjunici_e.find_First_Missing(long[]) [0x427d8e]\n??:? void tmpjunici_e.__unittest_L26_C1() [0x427e51]\n??:? void tmpjunici_e.__modtest() [0x427f34]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c213]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0a6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430239]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306e8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301c5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b07d]\n??:? runModuleUnitTests [0x42bfe9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int func",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong first = 0;\n\tlong last = array.length;\n\tlong mid = 0;\n\twhile(first < last)\n\t{\n\t\tmid = (first + last) / 2;\n\t\tif(array[mid] > mid)\n\t\t{\n\t\t\tlast = mid;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tfirst = mid + 1;\n\t\t}\n\t}\n\treturn first;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123192,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong first = array[0];\n\tlong last = array[$-1];\n\tlong mid;\n\tlong index;\n\twhile(first <= last)\n\t{\n\t\tmid = (first + last) / 2;\n\t\tif(array[mid] == mid)\n\t\t{\n\t\t\tfirst = mid + 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlast = mid - 1;\n\t\t}\n\t}\n\treturn first;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123193,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp_sdqdkcu.d(17): Range violation\n----------------\n??:? _d_arrayboundsp [0x428226]\n??:? long tmp_sdqdkcu.find_First_Missing(long[]) [0x427d96]\n??:? void tmp_sdqdkcu.__unittest_L28_C1() [0x427ecc]\n??:? void tmp_sdqdkcu.__modtest() [0x427ef8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1d3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b066]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4301f9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306a8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430185]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b03d]\n??:? runModuleUnitTests [0x42bfa9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int func",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid;\n\twhile (low <= high)\n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (array[mid] == mid + 1)\n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t}\n\treturn low + 1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123193,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpar5f51o_.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x42813d]\n??:? void tmpar5f51o_.__unittest_L28_C1() [0x427df4]\n??:? void tmpar5f51o_.__modtest() [0x427ec0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c19b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b02e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4301c1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430670]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43014d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b005]\n??:? runModuleUnitTests [0x42bf71]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428600]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong l = 0;\n\tlong h = n - 1;\n\tlong mid = 0;\n\twhile(l <= h) \n\t{\n\t\tmid = (l + h) / 2;\n\t\tif(array[mid] != mid + 1) \n\t\t{\n\t\t\tif(mid == 0 || array[mid - 1] == mid)\n\t\t\t\treturn mid + 1;\n\t\t\th = mid - 1;\n\t\t}\n\t\telse\n\t\t\tl = mid + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123193,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpcwqnxsy8.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x42818d]\n??:? void tmpcwqnxsy8.__unittest_L28_C1() [0x427e44]\n??:? void tmpcwqnxsy8.__modtest() [0x427f10]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b07e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430211]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306c0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43019d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b055]\n??:? runModuleUnitTests [0x42bfc1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428650]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong first = array[0];\n\tlong last = array[$-1];\n\tlong mid = 0;\n\tlong index = 0;\n\twhile(first <= last)\n\t{\n\t\tmid = (first + last) / 2;\n\t\tif(array[mid] == mid)\n\t\t{\n\t\t\tfirst = mid + 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlast = mid - 1;\n\t\t}\n\t}\n\treturn first;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123193,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp2b8k5xoa.d(17): Range violation\n----------------\n??:? _d_arrayboundsp [0x428226]\n??:? long tmp2b8k5xoa.find_First_Missing(long[]) [0x427d96]\n??:? void tmp2b8k5xoa.__unittest_L28_C1() [0x427ecc]\n??:? void tmp2b8k5xoa.__modtest() [0x427ef8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1d3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b066]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4301f9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306a8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430185]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b03d]\n??:? runModuleUnitTests [0x42bfa9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int func",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong i = 0;\n\twhile (i < array.length) \n\t{\n\t\tif (array[i] != i) \n\t\t{\n\t\t\treturn i;\n\t\t}\n\t\ti++;\n\t}\n\treturn i;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123193,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong min = array[0];\n\tlong max = array[$-1];\n\tlong range = max - min + 1;\n\tlong[] counter = new long[range];\n\tforeach(i; array)\n\t{\n\t\tcounter[i - min]++;\n\t}\n\tforeach(i; counter)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\treturn min + counter.indexOf(i);\n\t\t}\n\t}\n\treturn max + 1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123193,
      "stdout": "",
      "stderr": "/tmp/tmp6a3jx9sl.d(22): Error: no property `indexOf` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6a3jx9sl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid;\n\twhile (low <= high)\n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (array[mid] == mid + 1)\n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t}\n\treturn low + 1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123193,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpar5f51o_.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x42813d]\n??:? void tmpar5f51o_.__unittest_L28_C1() [0x427df4]\n??:? void tmpar5f51o_.__modtest() [0x427ec0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c19b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b02e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4301c1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430670]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43014d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b005]\n??:? runModuleUnitTests [0x42bf71]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428600]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong first = array[0];\n\tlong last = array[$ - 1];\n\tlong mid = 0;\n\tlong index = 0;\n\t\n\twhile(first <= last)\n\t{\n\t\tmid = (first + last) / 2;\n\t\t\n\t\tif(array[mid] == mid)\n\t\t{\n\t\t\tfirst = mid + 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlast = mid - 1;\n\t\t}\n\t}\n\t\n\treturn first;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123193,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpngc_mkyu.d(19): Range violation\n----------------\n??:? _d_arrayboundsp [0x428226]\n??:? long tmpngc_mkyu.find_First_Missing(long[]) [0x427d96]\n??:? void tmpngc_mkyu.__unittest_L31_C1() [0x427ecc]\n??:? void tmpngc_mkyu.__modtest() [0x427ef8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1d3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b066]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4301f9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306a8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430185]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b03d]\n??:? runModuleUnitTests [0x42bfa9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int func",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong start = 0;\n\tlong end = array.length;\n\tlong mid = 0;\n\twhile (start < end) \n\t{\n\t\tmid = (start + end) / 2;\n\t\tif (array[mid] == mid) \n\t\t{\n\t\t\tstart = mid + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tend = mid;\n\t\t}\n\t}\n\treturn start;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123193,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong low = 0;\n\tlong high = array.length;\n\twhile (low < high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (array[mid] == mid + 1) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\thigh = mid;\n\t\t}\n\t}\n\treturn low + 1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123193,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpa1ut74xi.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x428135]\n??:? void tmpa1ut74xi.__unittest_L26_C1() [0x427dec]\n??:? void tmpa1ut74xi.__modtest() [0x427eb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c193]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b026]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4301b9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430668]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430145]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42affd]\n??:? runModuleUnitTests [0x42bf69]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285f8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong first = array[0];\n\tlong last = array[$-1];\n\t\n\tif (first != 1)\n\t\treturn 1;\n\t\n\tif (last == $)\n\t\treturn last+1;\n\t\n\tlong mid = (first + last) / 2;\n\t\n\twhile (first < last) \n\t{\n\t\tif (array[mid] == mid) \n\t\t{\n\t\t\tfirst = mid + 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tlast = mid;\n\t\t}\n\t\tmid = (first + last) / 2;\n\t}\n\treturn first;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123193,
      "stdout": "",
      "stderr": "/tmp/tmpvyba0en9.d(16): Error: `$` is valid only inside [] of index or slice\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvyba0en9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong low = 0;\n\tlong high = array.length - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (array[mid] != mid + 1 && array[mid - 1] == mid) \n\t\t{\n\t\t\treturn mid + 1;\n\t\t}\n\t\telse if (array[mid] != mid + 1) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn mid + 1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123193,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpot1moevl.d(16): Range violation\n----------------\n??:? _d_arrayboundsp [0x42825e]\n??:? long tmpot1moevl.find_First_Missing(long[]) [0x427d8a]\n??:? void tmpot1moevl.__unittest_L31_C1() [0x427e4d]\n??:? void tmpot1moevl.__modtest() [0x427f30]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c20b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b09e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430231]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306e0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301bd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b075]\n??:? runModuleUnitTests [0x42bfe1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int func",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong low = 0;\n\tlong high = array.length;\n\tlong mid = 0;\n\twhile(low < high)\n\t{\n\t\tmid = (low + high) / 2;\n\t\tif(array[mid] == mid)\n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\thigh = mid;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123193,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong left = 0;\n\tlong right = n - 1;\n\tlong mid = 0;\n\twhile (left <= right) \n\t{\n\t\tmid = (left + right) / 2;\n\t\tif (array[mid] != mid + 1 && array[mid - 1] == mid) \n\t\t{\n\t\t\treturn mid + 1;\n\t\t} \n\t\telse if (array[mid] != mid + 1) \n\t\t{\n\t\t\tright = mid - 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tleft = mid + 1;\n\t\t}\n\t}\n\tif (left == n) \n\t{\n\t\treturn n + 1;\n\t}\n\treturn 1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123193,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpz3veueuh.d(17): Range violation\n----------------\n??:? _d_arrayboundsp [0x42827e]\n??:? long tmpz3veueuh.find_First_Missing(long[]) [0x427d92]\n??:? void tmpz3veueuh.__unittest_L36_C1() [0x427e69]\n??:? void tmpz3veueuh.__modtest() [0x427f4c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c22b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0be]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430251]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430700]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301dd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b095]\n??:? runModuleUnitTests [0x42c001]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int func",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong i = 0;\n\twhile (i < n) \n\t{\n\t\tif (array[i] != i + 1) \n\t\t{\n\t\t\treturn i + 1;\n\t\t}\n\t\ti++;\n\t}\n\treturn n + 1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp7jqhkeu0.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x42811d]\n??:? void tmp7jqhkeu0.__unittest_L22_C1() [0x427dd0]\n??:? void tmp7jqhkeu0.__modtest() [0x427e9c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c17b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b00e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4301a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430650]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43012d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afe5]\n??:? runModuleUnitTests [0x42bf51]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285e0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\t\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\t\n\t\tif (array[mid] != mid + 1 && array[mid - 1] == mid) \n\t\t{\n\t\t\treturn mid + 1;\n\t\t}\n\t\t\n\t\tif (array[mid] != mid + 1) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\t\n\tif (low > 0) \n\t{\n\t\treturn low + 1;\n\t}\n\t\n\treturn 1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123193,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpldxxe57v.d(19): Range violation\n----------------\n??:? _d_arrayboundsp [0x428276]\n??:? long tmpldxxe57v.find_First_Missing(long[]) [0x427d8e]\n??:? void tmpldxxe57v.__unittest_L41_C1() [0x427e61]\n??:? void tmpldxxe57v.__modtest() [0x427f44]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c223]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0b6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430249]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306f8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301d5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b08d]\n??:? runModuleUnitTests [0x42bff9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int func",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong i = 0;\n\twhile(i < n) \n\t{\n\t\tif(array[i] != i) \n\t\t{\n\t\t\treturn i;\n\t\t}\n\t\ti++;\n\t}\n\treturn i;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123193,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (array[mid] != mid + 1 && array[mid - 1] == mid) \n\t\t{\n\t\t\treturn mid + 1;\n\t\t}\n\t\tif (array[mid] != mid + 1) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn n + 1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123193,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpkzgdoxxs.d(17): Range violation\n----------------\n??:? _d_arrayboundsp [0x428266]\n??:? long tmpkzgdoxxs.find_First_Missing(long[]) [0x427d92]\n??:? void tmpkzgdoxxs.__unittest_L32_C1() [0x427e55]\n??:? void tmpkzgdoxxs.__modtest() [0x427f38]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c213]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0a6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430239]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306e8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301c5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b07d]\n??:? runModuleUnitTests [0x42bfe9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int func",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong i = 0;\n\twhile (i < n) \n\t{\n\t\tif (array[i] != i + 1) \n\t\t{\n\t\t\treturn i + 1;\n\t\t}\n\t\ti++;\n\t}\n\treturn n + 1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp7jqhkeu0.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x42811d]\n??:? void tmp7jqhkeu0.__unittest_L22_C1() [0x427dd0]\n??:? void tmp7jqhkeu0.__modtest() [0x427e9c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c17b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b00e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4301a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430650]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43012d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afe5]\n??:? runModuleUnitTests [0x42bf51]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285e0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong first = 0;\n\tlong last = array.length;\n\tlong mid = 0;\n\t\n\twhile(first < last)\n\t{\n\t\tmid = (first + last) / 2;\n\t\tif(array[mid] == mid)\n\t\t{\n\t\t\tfirst = mid + 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlast = mid;\n\t\t}\n\t}\n\treturn first;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong first = 0;\n\tlong last = array.length;\n\tlong mid = 0;\n\tlong result = 0;\n\twhile(first < last) \n\t{\n\t\tmid = (first + last) / 2;\n\t\tif(array[mid] == mid) \n\t\t{\n\t\t\tfirst = mid + 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tlast = mid;\n\t\t}\n\t}\n\treturn first;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123193,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong first = 0;\n\tlong last = array.length;\n\twhile (first < last) \n\t{\n\t\tlong mid = (first + last) / 2;\n\t\tif (array[mid] == mid) \n\t\t{\n\t\t\tfirst = mid + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tlast = mid;\n\t\t}\n\t}\n\treturn first;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123193,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (array[mid] == mid) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123193,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong l = 0, r = n - 1;\n\twhile (l <= r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (array[m] != m + 1) \n\t\t{\n\t\t\tif (m == 0 || array[m - 1] == m)\n\t\t\t\treturn m + 1;\n\t\t\tr = m - 1;\n\t\t} \n\t\telse\n\t\t\tl = m + 1;\n\t}\n\treturn n + 1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123193,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp720d4z2h.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x42818d]\n??:? void tmp720d4z2h.__unittest_L26_C1() [0x427e44]\n??:? void tmp720d4z2h.__modtest() [0x427f10]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b07e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430211]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306c0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43019d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b055]\n??:? runModuleUnitTests [0x42bfc1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428650]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong first = array[0];\n\tlong last = array[$-1];\n\tlong mid;\n\t\n\twhile (first <= last)\n\t{\n\t\tmid = (first + last) / 2;\n\t\tif (array[mid] == mid)\n\t\t{\n\t\t\tfirst = mid + 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlast = mid - 1;\n\t\t}\n\t}\n\treturn first;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123193,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpb2s2hwly.d(17): Range violation\n----------------\n??:? _d_arrayboundsp [0x42822e]\n??:? long tmpb2s2hwly.find_First_Missing(long[]) [0x427d98]\n??:? void tmpb2s2hwly.__unittest_L28_C1() [0x427ed0]\n??:? void tmpb2s2hwly.__modtest() [0x427efc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1db]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b06e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430201]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306b0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43018d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b045]\n??:? runModuleUnitTests [0x42bfb1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int func",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong first = 0;\n\tlong last = array.length - 1;\n\tlong mid = 0;\n\twhile(first <= last) \n\t{\n\t\tmid = (first + last) / 2;\n\t\tif(array[mid] == mid) \n\t\t{\n\t\t\tfirst = mid + 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tlast = mid - 1;\n\t\t}\n\t}\n\treturn first;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123193,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong length = array.length;\n\tlong i = 0;\n\twhile (i < length) \n\t{\n\t\tif (array[i] != i) \n\t\t{\n\t\t\treturn i;\n\t\t}\n\t\ti++;\n\t}\n\treturn i;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong first = 0;\n\tlong last = array.length;\n\tlong mid = 0;\n\t\n\twhile(first < last)\n\t{\n\t\tmid = (first + last) / 2;\n\t\tif(array[mid] != mid)\n\t\t{\n\t\t\tif(mid == 0 || array[mid - 1] == mid - 1)\n\t\t\t\treturn mid;\n\t\t\telse\n\t\t\t\tlast = mid;\n\t\t}\n\t\telse\n\t\t\tfirst = mid + 1;\n\t}\n\t\n\treturn first;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123193,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong i = 0;\n\twhile (i < n) \n\t{\n\t\tif (array[i] != i + 1) \n\t\t{\n\t\t\treturn i + 1;\n\t\t}\n\t\ti++;\n\t}\n\treturn n + 1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp7jqhkeu0.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x42811d]\n??:? void tmp7jqhkeu0.__unittest_L22_C1() [0x427dd0]\n??:? void tmp7jqhkeu0.__modtest() [0x427e9c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c17b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b00e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4301a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430650]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43012d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afe5]\n??:? runModuleUnitTests [0x42bf51]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285e0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\t\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (array[mid] != mid + 1 && array[mid - 1] == mid) \n\t\t{\n\t\t\treturn mid + 1;\n\t\t}\n\t\telse if (array[mid] != mid + 1) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\tif (low > 0) \n\t{\n\t\treturn low + 1;\n\t}\n\treturn 1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123193,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpkx6temhx.d(18): Range violation\n----------------\n??:? _d_arrayboundsp [0x428276]\n??:? long tmpkx6temhx.find_First_Missing(long[]) [0x427d8e]\n??:? void tmpkx6temhx.__unittest_L37_C1() [0x427e61]\n??:? void tmpkx6temhx.__modtest() [0x427f44]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c223]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0b6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430249]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306f8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301d5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b08d]\n??:? runModuleUnitTests [0x42bff9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int func",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong first = 0;\n\tlong last = array.length;\n\tlong mid = 0;\n\t\n\twhile(first < last)\n\t{\n\t\tmid = (first + last) / 2;\n\t\tif(array[mid] != mid)\n\t\t{\n\t\t\tif(mid == 0 || array[mid - 1] == mid - 1)\n\t\t\t\treturn mid;\n\t\t\telse\n\t\t\t\tlast = mid;\n\t\t}\n\t\telse\n\t\t\tfirst = mid + 1;\n\t}\n\t\n\tif(first == array.length)\n\t\treturn array.length;\n\t\n\treturn -1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123193,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (array[mid] != mid + 1 && array[mid - 1] == mid) \n\t\t{\n\t\t\treturn mid + 1;\n\t\t}\n\t\tif (array[mid] != mid + 1) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn mid + 1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123193,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpmgq86j1f.d(17): Range violation\n----------------\n??:? _d_arrayboundsp [0x428266]\n??:? long tmpmgq86j1f.find_First_Missing(long[]) [0x427d8e]\n??:? void tmpmgq86j1f.__unittest_L32_C1() [0x427e51]\n??:? void tmpmgq86j1f.__modtest() [0x427f34]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c213]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0a6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430239]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306e8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301c5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b07d]\n??:? runModuleUnitTests [0x42bfe9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int func",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong i = 0;\n\twhile(i < n) \n\t{\n\t\tif(array[i] != i) \n\t\t{\n\t\t\treturn i;\n\t\t}\n\t\ti++;\n\t}\n\treturn n;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123193,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong first = 0;\n\tlong last = array.length;\n\tlong mid = 0;\n\t\n\twhile(first < last)\n\t{\n\t\tmid = (first + last) / 2;\n\t\t\n\t\tif(array[mid] == mid)\n\t\t{\n\t\t\tfirst = mid + 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlast = mid;\n\t\t}\n\t}\n\t\n\treturn first;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123192,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (array[mid] != mid + 1 && array[mid - 1] == mid) \n\t\t{\n\t\t\treturn mid + 1;\n\t\t}\n\t\tif (array[mid] != mid + 1) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\tif (low > high) \n\t{\n\t\treturn mid + 2;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123193,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpobykxdrt.d(17): Range violation\n----------------\n??:? _d_arrayboundsp [0x42827e]\n??:? long tmpobykxdrt.find_First_Missing(long[]) [0x427d8e]\n??:? void tmpobykxdrt.__unittest_L36_C1() [0x427e69]\n??:? void tmpobykxdrt.__modtest() [0x427f4c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c22b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0be]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430251]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430700]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301dd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b095]\n??:? runModuleUnitTests [0x42c001]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int func",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (array[mid] != mid + 1 && array[mid - 1] == mid) \n\t\t{\n\t\t\treturn mid + 1;\n\t\t}\n\t\telse if (array[mid] != mid + 1) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn mid + 1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp96kx5wjv.d(17): Range violation\n----------------\n??:? _d_arrayboundsp [0x428266]\n??:? long tmp96kx5wjv.find_First_Missing(long[]) [0x427d8e]\n??:? void tmp96kx5wjv.__unittest_L32_C1() [0x427e51]\n??:? void tmp96kx5wjv.__modtest() [0x427f34]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c213]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0a6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430239]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306e8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301c5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b07d]\n??:? runModuleUnitTests [0x42bfe9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int func",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong left = 0;\n\tlong right = n - 1;\n\tlong mid = 0;\n\twhile(left <= right) \n\t{\n\t\tmid = (left + right) / 2;\n\t\tif(array[mid] != mid + 1 && array[mid - 1] == mid) \n\t\t{\n\t\t\treturn mid + 1;\n\t\t}\n\t\telse if(array[mid] != mid + 1) \n\t\t{\n\t\t\tright = mid - 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tleft = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123193,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpmn8fbusf.d(17): Range violation\n----------------\n??:? _d_arrayboundsp [0x428266]\n??:? long tmpmn8fbusf.find_First_Missing(long[]) [0x427d8e]\n??:? void tmpmn8fbusf.__unittest_L32_C1() [0x427e51]\n??:? void tmpmn8fbusf.__modtest() [0x427f34]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c213]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0a6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430239]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306e8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301c5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b07d]\n??:? runModuleUnitTests [0x42bfe9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int func",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong l = 0;\n\tlong h = n - 1;\n\tlong mid = 0;\n\twhile (l <= h) \n\t{\n\t\tmid = (l + h) / 2;\n\t\tif (array[mid] != mid + 1 && array[mid - 1] == mid) \n\t\t{\n\t\t\treturn mid + 1;\n\t\t}\n\t\telse if (array[mid] != mid + 1) \n\t\t{\n\t\t\th = mid - 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tl = mid + 1;\n\t\t}\n\t}\n\treturn mid + 1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123193,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp3u10jfgc.d(17): Range violation\n----------------\n??:? _d_arrayboundsp [0x428266]\n??:? long tmp3u10jfgc.find_First_Missing(long[]) [0x427d8e]\n??:? void tmp3u10jfgc.__unittest_L32_C1() [0x427e51]\n??:? void tmp3u10jfgc.__modtest() [0x427f34]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c213]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0a6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430239]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306e8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301c5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b07d]\n??:? runModuleUnitTests [0x42bfe9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int func",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n;\n\tlong mid = 0;\n\twhile(low < high)\n\t{\n\t\tmid = (low + high) / 2;\n\t\tif(array[mid] == mid)\n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\thigh = mid;\n\t\t}\n\t}\n\treturn low;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123193,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong first_missing = n + 1;\n\tlong i = 0;\n\twhile (i < n) \n\t{\n\t\tif (array[i] != i + 1) \n\t\t{\n\t\t\tfirst_missing = i + 1;\n\t\t\tbreak;\n\t\t}\n\t\ti = i + 1;\n\t}\n\treturn first_missing;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123193,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp8qb9lbw7.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428125]\n??:? void tmp8qb9lbw7.__unittest_L24_C1() [0x427ddc]\n??:? void tmp8qb9lbw7.__modtest() [0x427ea8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c183]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b016]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4301a9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430658]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430135]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afed]\n??:? runModuleUnitTests [0x42bf59]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285e8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong low = 0;\n\tlong high = array.length - 1;\n\tlong mid = 0;\n\tlong result = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (array[mid] == mid) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tresult = mid;\n\t\t\thigh = mid - 1;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123193,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpj8b6o8c3.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x42813d]\n??:? void tmpj8b6o8c3.__unittest_L29_C1() [0x427df4]\n??:? void tmpj8b6o8c3.__modtest() [0x427ec0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c19b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b02e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4301c1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430670]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43014d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b005]\n??:? runModuleUnitTests [0x42bf71]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428600]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong l = 0;\n\tlong h = n - 1;\n\tlong mid;\n\twhile (l <= h) \n\t{\n\t\tmid = (l + h) / 2;\n\t\tif (array[mid] == mid) \n\t\t{\n\t\t\tl = mid + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\th = mid - 1;\n\t\t}\n\t}\n\treturn l;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong i = 0;\n\twhile (i < n) \n\t{\n\t\tif (array[i] != i + 1) \n\t\t{\n\t\t\treturn i + 1;\n\t\t}\n\t\ti++;\n\t}\n\treturn n + 1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp7jqhkeu0.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x42811d]\n??:? void tmp7jqhkeu0.__unittest_L22_C1() [0x427dd0]\n??:? void tmp7jqhkeu0.__modtest() [0x427e9c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c17b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b00e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4301a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430650]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43012d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afe5]\n??:? runModuleUnitTests [0x42bf51]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285e0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong min = array[0];\n\tlong max = array[$-1];\n\tlong range = max - min + 1;\n\tlong[] count = new long[range];\n\tforeach(i; array)\n\t{\n\t\tcount[i-min] = 1;\n\t}\n\tlong i = 0;\n\twhile(i < range && count[i] == 1)\n\t{\n\t\ti++;\n\t}\n\treturn i+min;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123193,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpe2o_tn92.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x4281d5]\n??:? void tmpe2o_tn92.__unittest_L25_C1() [0x427f42]\n??:? void tmpe2o_tn92.__modtest() [0x427f58]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c28f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b122]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4303ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43085c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430339]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f9]\n??:? runModuleUnitTests [0x42c065]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428698]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong left = 0;\n\tlong right = array.length - 1;\n\tlong mid;\n\twhile (left <= right) \n\t{\n\t\tmid = (left + right) / 2;\n\t\tif (array[mid] != mid + 1 && array[mid - 1] == mid) \n\t\t{\n\t\t\treturn mid + 1;\n\t\t} \n\t\telse if (array[mid] != mid + 1) \n\t\t{\n\t\t\tright = mid - 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tleft = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123193,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpaet8doox.d(16): Range violation\n----------------\n??:? _d_arrayboundsp [0x42825e]\n??:? long tmpaet8doox.find_First_Missing(long[]) [0x427d8a]\n??:? void tmpaet8doox.__unittest_L31_C1() [0x427e4d]\n??:? void tmpaet8doox.__modtest() [0x427f30]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c20b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b09e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430231]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306e0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301bd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b075]\n??:? runModuleUnitTests [0x42bfe1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int func",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong first = 0;\n\tlong last = array.length;\n\tlong mid = 0;\n\twhile (first < last) \n\t{\n\t\tmid = (first + last) / 2;\n\t\tif (array[mid] > mid) \n\t\t{\n\t\t\tlast = mid;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tfirst = mid + 1;\n\t\t}\n\t}\n\treturn first;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong first = 0;\n\tlong last = array.length;\n\tlong mid = 0;\n\t\n\twhile(first < last)\n\t{\n\t\tmid = (first + last) / 2;\n\t\tif(array[mid] == mid)\n\t\t\tfirst = mid + 1;\n\t\telse\n\t\t\tlast = mid;\n\t}\n\treturn first;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123193,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong start = 0;\n\tlong end = array.length - 1;\n\tlong mid = 0;\n\t\n\twhile(start <= end)\n\t{\n\t\tmid = start + (end - start) / 2;\n\t\t\n\t\tif(array[mid] != mid + 1)\n\t\t{\n\t\t\tif(mid == 0 || array[mid - 1] == mid)\n\t\t\t{\n\t\t\t\treturn mid + 1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tend = mid - 1;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstart = mid + 1;\n\t\t}\n\t}\n\t\n\treturn mid + 1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123193,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpac9vnx78.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x42818d]\n??:? void tmpac9vnx78.__unittest_L37_C1() [0x427e44]\n??:? void tmpac9vnx78.__modtest() [0x427f10]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b07e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430211]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306c0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43019d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b055]\n??:? runModuleUnitTests [0x42bfc1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428650]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong low = 0;\n\tlong high = array.length - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (array[mid] != mid + 1) \n\t\t{\n\t\t\tif (mid == 0 || array[mid - 1] == mid) \n\t\t\t{\n\t\t\t\treturn mid + 1;\n\t\t\t}\n\t\t\thigh = mid - 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\tif (low > array.length) \n\t{\n\t\treturn array.length + 1;\n\t}\n\treturn 1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123193,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpt_ld37wz.d(39): unittest failure\n----------------\n??:? _d_unittestp [0x42819d]\n??:? void tmpt_ld37wz.__unittest_L35_C1() [0x427e54]\n??:? void tmpt_ld37wz.__modtest() [0x427f20]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1fb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b08e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430221]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306d0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301ad]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b065]\n??:? runModuleUnitTests [0x42bfd1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428660]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong n = array.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid;\n\twhile (low <= high) \n\t{\n\t\tmid = (low + high) / 2;\n\t\tif (array[mid] != mid + 1 && array[mid - 1] == mid) \n\t\t{\n\t\t\treturn mid + 1;\n\t\t}\n\t\tif (array[mid] != mid + 1) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123192,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpu15gasra.d(17): Range violation\n----------------\n??:? _d_arrayboundsp [0x428266]\n??:? long tmpu15gasra.find_First_Missing(long[]) [0x427d8e]\n??:? void tmpu15gasra.__unittest_L32_C1() [0x427e51]\n??:? void tmpu15gasra.__modtest() [0x427f34]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c213]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0a6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430239]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306e8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301c5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b07d]\n??:? runModuleUnitTests [0x42bfe9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int func",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong first = 0;\n\tlong last = array.length;\n\tlong mid = 0;\n\t\n\twhile(first < last)\n\t{\n\t\tmid = (first + last) / 2;\n\t\tif(array[mid] == mid)\n\t\t{\n\t\t\tfirst = mid + 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlast = mid;\n\t\t}\n\t}\n\treturn first;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1665517549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong min = array[0];\n\tlong max = array[$-1];\n\tlong range = max - min;\n\tlong[] hash = new long[range + 1];\n\tforeach(i; array)\n\t{\n\t\thash[i - min] = 1;\n\t}\n\tforeach(i; 0 .. hash.length)\n\t{\n\t\tif(hash[i] == 0)\n\t\t{\n\t\t\treturn i + min;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123193,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp4a98ogb3.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmp4a98ogb3.__unittest_L27_C1() [0x427e9c]\n??:? void tmp4a98ogb3.__modtest() [0x427f68]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c29f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b132]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4303bd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43086c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430349]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b109]\n??:? runModuleUnitTests [0x42c075]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n\t\n*/\nlong find_First_Missing(long[] array) \n{\n\tlong first_missing = -1;\n\tlong[] diff = new long[array.length];\n\t\n\tfor(long i = 0; i < array.length; i++)\n\t{\n\t\tif(i == 0)\n\t\t{\n\t\t\tdiff[i] = array[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdiff[i] = array[i] - array[i-1];\n\t\t}\n\t}\n\t\n\tfor(long i = 0; i < diff.length; i++)\n\t{\n\t\tif(diff[i] != 1)\n\t\t{\n\t\t\tfirst_missing = array[i] + 1;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn first_missing;\n}\nunittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}",
      "timestamp": 1666123193,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpy_pvnm1o.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x42824d]\n??:? void tmpy_pvnm1o.__unittest_L36_C1() [0x427f00]\n??:? void tmpy_pvnm1o.__modtest() [0x427fcc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c307]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b19a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430425]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4308d4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4303b1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b171]\n??:? runModuleUnitTests [0x42c0dd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428710]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}