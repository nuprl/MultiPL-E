{
  "name": "mbpp_247_lps",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_247_lps.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{\n\tlong n = str.length;\n\tlong[][] L = new long[n][n];\n\tlong i, j, cl;\n\tfor (i = 0; i < n; i++)\n\t\tL[i][i] = 1;\n\tfor (cl = 2; cl <= n; cl++) {\n\t\tfor (i = 0; i < n - cl + 1; i++) {\n\t\t\tj = i + cl - 1;\n\t\t\tif (str[i] == str[j] && cl == 2)\n\t\t\t\tL[i][j] = 2;\n\t\t\telse if (str[i] == str[j])\n\t\t\t\tL[i][j] = L[i + 1][j - 1] + 2;\n\t\t\telse\n\t\t\t\tL[i][j] = max(L[i][j - 1], L[i + 1][j]);\n\t\t}\n\t}\n\treturn L[0][n - 1];\n}\nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "/tmp/tmps_771xjs.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmps_771xjs.d(23): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps_771xjs.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{\n\tlong n = str.length;\n\tlong[long][long] dp = new long[n][n];\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tdp[i][i] = 1;\n\t}\n\tfor (long l = 2; l <= n; l++) \n\t{\n\t\tfor (long i = 0; i < n - l + 1; i++) \n\t\t{\n\t\t\tlong j = i + l - 1;\n\t\t\tif (str[i] == str[j] && l == 2) \n\t\t\t{\n\t\t\t\tdp[i][j] = 2;\n\t\t\t} \n\t\t\telse if (str[i] == str[j]) \n\t\t\t{\n\t\t\t\tdp[i][j] = dp[i + 1][j - 1] + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tdp[i][j] = max(dp[i][j - 1], dp[i + 1][j]);\n\t\t\t}\n\t\t}\n\t}\n\treturn dp[0][n - 1];\n}\nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "/tmp/tmpycwhlk9z.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmpycwhlk9z.d(31): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpycwhlk9z.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{\n\tlong n = str.length;\n\tlong[][] L = new long[n][n];\n\t\n\tfor (long i = 0; i < n; i++) \n\t\tL[i][i] = 1;\n\t\t\n\tfor (long cl = 2; cl <= n; cl++) \n\t{\n\t\tfor (long i = 0; i < n - cl + 1; i++) \n\t\t{\n\t\t\tlong j = i + cl - 1;\n\t\t\tif (str[i] == str[j] && cl == 2) \n\t\t\t\tL[i][j] = 2;\n\t\t\telse if (str[i] == str[j]) \n\t\t\t\tL[i][j] = L[i + 1][j - 1] + 2;\n\t\t\telse \n\t\t\t\tL[i][j] = max(L[i][j - 1], L[i + 1][j]);\n\t\t}\n\t}\n\t\n\treturn L[0][n - 1];\n}\nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "/tmp/tmpuvyg109a.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmpuvyg109a.d(26): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuvyg109a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    long n = str.length; \n    long i, j, cl; \n    long L[][] = new long[n][n];\n  \n    // Strings of length 1 are palindrome of lentgh 1 \n    for (i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    // Build the table. Note that the lower  \n    // diagonal values of table are \n    // useless and not filled in the process.  \n    // The values are filled in a manner similar \n    //  to Matrix Chain Multiplication DP solution (See \n    // https://www.geeksforgeeks.org/dynamic-programming-set-8-matrix-chain-multiplication/ \n    // cl is length of substring \n    for (cl=2; cl<=n; cl++) \n    { \n        for (i=0; i<n-cl+1; i++) \n        { \n            j = i+cl-1; \n            if (str[i] == str[j] && cl == 2) \n               L[i][j] = 2; \n            else if (str[i] == str[j]) \n               L[i][j] = L[i+1][j-1] + 2; \n            else\n               L[i][j] = max(L[i][j-1], L[i+1][j]); \n        } \n    } \n  \n    return L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "/tmp/tmpn3fqgb0e.d(12): Deprecation: instead of C-style syntax, use D-style syntax `long[][] L`\n/tmp/tmpn3fqgb0e.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmpn3fqgb0e.d(35): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn3fqgb0e.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    long n = str.length; \n    long[][] L = new long[n][n]; \n  \n    for (long i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    for (long cl = 2; cl <= n; cl++) \n    { \n        for (long i = 0; i < n - cl + 1; i++) \n        { \n            long j = i + cl - 1; \n            if (str[i] == str[j] && cl == 2) \n                L[i][j] = 2; \n            else if (str[i] == str[j]) \n                L[i][j] = L[i + 1][j - 1] + 2; \n            else\n                L[i][j] = max(L[i][j - 1], L[i + 1][j]); \n        } \n    } \n  \n    return L[0][n - 1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "/tmp/tmpiole5xo5.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmpiole5xo5.d(26): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiole5xo5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n\tlong n = str.length; \n\tlong i, j, cl; \n\tlong L[n][n]; \n\t\n\tfor (i = 0; i < n; i++) \n\t\tL[i][i] = 1; \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "/tmp/tmpvi4mpu77.d(12): Deprecation: instead of C-style syntax, use D-style syntax `long[n][n] L`\n/tmp/tmpvi4mpu77.d(16): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvi4mpu77.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n\tlong n = str.length; \n\tlong i, j, cl; \n\tlong L[][] = new long[n][n]; \n\t\n\tfor (i = 0; i < n; i++) \n\t\tL[i][i] = 1; \n\t\n\tfor (cl=2; cl<=n; cl++) \n\t{ \n\t\tfor (i=0; i<n-cl+1; i++) \n\t\t{ \n\t\t\tj = i+cl-1; \n\t\t\tif (str[i] == str[j] && cl == 2) \n\t\t\t\tL[i][j] = 2; \n\t\t\telse if (str[i] == str[j]) \n\t\t\t\tL[i][j] = L[i+1][j-1] + 2; \n\t\t\telse\n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \n\t\t} \n\t} \n\t\n\treturn L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "/tmp/tmpxju_urg9.d(12): Deprecation: instead of C-style syntax, use D-style syntax `long[][] L`\n/tmp/tmpxju_urg9.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmpxju_urg9.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxju_urg9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    long n = str.length; \n    long i, j, cl; \n    long L[][] = new long[n][n]; \n  \n    for (i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    for (cl = 2; cl <= n; cl++) \n    { \n        for (i = 0; i < n - cl + 1; i++) \n        { \n            j = i + cl - 1; \n            if (str[i] == str[j] && cl == 2) \n                L[i][j] = 2; \n            else if (str[i] == str[j]) \n                L[i][j] = L[i + 1][j - 1] + 2; \n            else\n                L[i][j] = max(L[i][j - 1], L[i + 1][j]); \n        } \n    } \n  \n    return L[0][n - 1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "/tmp/tmpbn3xo7a6.d(12): Deprecation: instead of C-style syntax, use D-style syntax `long[][] L`\n/tmp/tmpbn3xo7a6.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmpbn3xo7a6.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbn3xo7a6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n\tint n = str.length; \n\tint i, j, cl; \n\tint L[][] = new int[n][n]; \n\t\n\tfor (i = 0; i < n; i++) \n\t\tL[i][i] = 1; \n\t\n\tfor (cl=2; cl<=n; cl++) \n\t{ \n\t\tfor (i=0; i<n-cl+1; i++) \n\t\t{ \n\t\t\tj = i+cl-1; \n\t\t\tif (str[i] == str[j] && cl == 2) \n\t\t\t\tL[i][j] = 2; \n\t\t\telse if (str[i] == str[j]) \n\t\t\t\tL[i][j] = L[i+1][j-1] + 2; \n\t\t\telse\n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \n\t\t} \n\t} \n\t\n\treturn L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "/tmp/tmp1bxtxzuc.d(12): Deprecation: instead of C-style syntax, use D-style syntax `int[][] L`\n/tmp/tmp1bxtxzuc.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmp1bxtxzuc.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmp1bxtxzuc.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1bxtxzuc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n\tlong n = str.length; \n\tlong i, j, cl; \n\tlong L[][] = new long[n][n];\n\t\n\tfor (i = 0; i < n; i++) \n\t\tL[i][i] = 1; \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "/tmp/tmp8e739m_5.d(12): Deprecation: instead of C-style syntax, use D-style syntax `long[][] L`\n/tmp/tmp8e739m_5.d(16): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8e739m_5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n\tlong n = str.length; \n\tlong i, j, cl; \n\t\n\t// Create a table to store results of subproblems \n\tlong L[n][n]; \n\t\n\t// Strings of length 1 are palindrome of lentgh 1 \n\tforeach (i; 0 .. n) \n\t\tL[i][i] = 1; \n\t\n\t// Build the table. Note that the lower diagonal values of table are \n\t// useless and not filled in the process. The values are filled in a \n\t// manner similar to Matrix Chain Multiplication DP solution (See \n\t// https://www.geeksforgeeks.org/dynamic-programming-set-8-matrix-chain-multiplication/ \n\t// cl is length of substring \n\tforeach (cl; 2 .. n + 1) \n\t{ \n\t\tforeach (i; 0 .. n - cl + 1) \n\t\t{ \n\t\t\tj = i + cl - 1; \n\t\t\tif (str[i] == str[j] && cl == 2) \n\t\t\t\tL[i][j] = 2; \n\t\t\telse if (str[i] == str[j]) \n\t\t\t\tL[i][j] = L[i + 1][j - 1] + 2; \n\t\t\telse\n\t\t\t\tL[i][j] = max(L[i][j - 1], L[i + 1][j]); \n\t\t} \n\t} \n\t\n\treturn L[0][n - 1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "/tmp/tmpeowpfd7a.d(14): Deprecation: instead of C-style syntax, use D-style syntax `long[n][n] L`\n/tmp/tmpeowpfd7a.d(14): Error: variable `n` cannot be read at compile time\n/tmp/tmpeowpfd7a.d(14): Error: variable `n` cannot be read at compile time\n/tmp/tmpeowpfd7a.d(17): Error: variable `i` is shadowing variable `tmpeowpfd7a.lps.i`\n/tmp/tmpeowpfd7a.d(25): Error: variable `cl` is shadowing variable `tmpeowpfd7a.lps.cl`\n/tmp/tmpeowpfd7a.d(27): Error: variable `i` is shadowing variable `tmpeowpfd7a.lps.i`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpeowpfd7a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    long n = str.length; \n    long[][] L = new long[n][n]; \n  \n    // Strings of length 1 are palindrome of lentgh 1 \n    for (long i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    // Build the table. Note that the lower  \n    // diagonal values of table are \n    // useless and not filled in the process.  \n    // The values are filled in a manner similar \n    // to Matrix Chain Multiplication DP solution (See \n    // https://www.geeksforgeeks.org/dynamic-programming-set-8-matrix-chain-multiplication/).  \n    // cl is length of substring \n    for (long cl = 2; cl <= n; cl++) \n    { \n        for (long i = 0; i < n - cl + 1; i++) \n        { \n            long j = i + cl - 1; \n            if (str[i] == str[j] && cl == 2) \n                L[i][j] = 2; \n            else if (str[i] == str[j]) \n                L[i][j] = L[i + 1][j - 1] + 2; \n            else\n                L[i][j] = max(L[i][j - 1], L[i + 1][j]); \n        } \n    } \n  \n    return L[0][n - 1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "/tmp/tmp_luc1rwn.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmp_luc1rwn.d(34): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_luc1rwn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{\n\tlong n = str.length;\n\tlong[][] dp = new long[n][n];\n\t\n\tforeach(i; 0 .. n)\n\t{\n\t\tdp[i][i] = 1;\n\t}\n\t\n\tforeach(i; 0 .. n)\n\t{\n\t\tforeach(j; 0 .. n)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t\tcontinue;\n\t\t\t\n\t\t\tif(str[i] == str[j])\n\t\t\t{\n\t\t\t\tdp[i][j] = 2 + dp[i+1][j-1];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdp[i][j] = max(dp[i+1][j], dp[i][j-1]);\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn dp[0][n-1];\n}\nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "/tmp/tmpk31fagii.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmpk31fagii.d(31): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk31fagii.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n\tlong n = str.length; \n\tlong i, j, cl; \n\tlong L[][] = new long[n][n]; // Create a table to store results of subproblems \n\t\n\t// Strings of length 1 are palindrome of lentgh 1 \n\tfor (i = 0; i < n; i++) \n\t\tL[i][i] = 1; \n\t\n\t// Build the table. Note that the lower diagonal values of table are \n\t// useless and not filled in the process. The values are filled in a \n\t// manner similar to Matrix Chain Multiplication DP solution (See \n\t// https://www.geeksforgeeks.org/dynamic-programming-set-8-matrix-chain-multiplication/ \n\t// cl is length of substring \n\tfor (cl=2; cl<=n; cl++) \n\t{ \n\t\tfor (i=0; i<n-cl+1; i++) \n\t\t{ \n\t\t\tj = i+cl-1; \n\t\t\tif (str[i] == str[j] && cl == 2) \n\t\t\t\tL[i][j] = 2; \n\t\t\telse if (str[i] == str[j]) \n\t\t\t\tL[i][j] = L[i+1][j-1] + 2; \n\t\t\telse\n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \n\t\t} \n\t} \n\t\n\treturn L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "/tmp/tmph206um01.d(12): Deprecation: instead of C-style syntax, use D-style syntax `long[][] L`\n/tmp/tmph206um01.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmph206um01.d(33): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph206um01.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n\tlong n = str.length; \n\tlong i, j, cl; \n\tlong L[][] = new long[n][n]; // Create a table to store results of subproblems \n  \n  \n\t// Strings of length 1 are palindrome of lentgh 1 \n\tfor (i = 0; i < n; i++) \n\t\tL[i][i] = 1; \n  \n    // Build the table. Note that the lower diagonal values of table are \n    // useless and not filled in the process. The values are filled in a \n    // manner similar to Matrix Chain Multiplication DP solution (See \n    // https://www.geeksforgeeks.org/dynamic-programming-set-8-matrix-chain-multiplication/ \n    // cl is length of substring \n\tfor (cl=2; cl<=n; cl++) \n\t{ \n\t\tfor (i=0; i<n-cl+1; i++) \n\t\t{ \n\t\t\tj = i+cl-1; \n\t\t\tif (str[i] == str[j] && cl == 2) \n\t\t\t\tL[i][j] = 2; \n\t\t\telse if (str[i] == str[j]) \n\t\t\t\tL[i][j] = L[i+1][j-1] + 2; \n\t\t\telse\n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \n\t\t} \n\t} \n  \n\treturn L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "/tmp/tmpaqhj2ujt.d(12): Deprecation: instead of C-style syntax, use D-style syntax `long[][] L`\n/tmp/tmpaqhj2ujt.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmpaqhj2ujt.d(34): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpaqhj2ujt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    long n = str.length; \n    long[][] L = new long[n][n]; \n  \n    for (long i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    for (long cl = 2; cl <= n; cl++) \n    { \n        for (long i = 0; i < n - cl + 1; i++) \n        { \n            long j = i + cl - 1; \n            if (str[i] == str[j] && cl == 2) \n                L[i][j] = 2; \n            else if (str[i] == str[j]) \n                L[i][j] = L[i + 1][j - 1] + 2; \n            else\n                L[i][j] = max(L[i][j - 1], L[i + 1][j]); \n        } \n    } \n  \n    return L[0][n - 1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "/tmp/tmpiole5xo5.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmpiole5xo5.d(26): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiole5xo5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    long n = str.length; \n    long[][] L = new long[n][n]; \n  \n    for (long i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    for (long cl = 2; cl <= n; cl++) \n    { \n        for (long i = 0; i < n - cl + 1; i++) \n        { \n            long j = i + cl - 1; \n            if (str[i] == str[j] && cl == 2) \n                L[i][j] = 2; \n            else if (str[i] == str[j]) \n                L[i][j] = L[i + 1][j - 1] + 2; \n            else\n                L[i][j] = max(L[i][j - 1], L[i + 1][j]); \n        } \n    } \n  \n    return L[0][n - 1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "/tmp/tmpiole5xo5.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmpiole5xo5.d(26): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiole5xo5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{\n\tlong n = str.length;\n\tlong[][] L = new long[n][n];\n\tlong i, j, cl;\n\tfor (i = 0; i < n; i++)\n\t\tL[i][i] = 1;\n\tfor (cl = 2; cl <= n; cl++) \n\t{\n\t\tfor (i = 0; i < n - cl + 1; i++) \n\t\t{\n\t\t\tj = i + cl - 1;\n\t\t\tif (str[i] == str[j] && cl == 2)\n\t\t\t\tL[i][j] = 2;\n\t\t\telse if (str[i] == str[j])\n\t\t\t\tL[i][j] = L[i + 1][j - 1] + 2;\n\t\t\telse\n\t\t\t\tL[i][j] = max(L[i][j - 1], L[i + 1][j]);\n\t\t}\n\t}\n\treturn L[0][n - 1];\n}\nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "/tmp/tmp46jyru_9.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmp46jyru_9.d(25): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp46jyru_9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{\n\tlong n = str.length;\n\tlong[][] L = new long[n][n];\n\t\n\tfor (long i = 0; i < n; i++)\n\t\tL[i][i] = 1;\n\t\n\tfor (long cl = 2; cl <= n; cl++) \n\t{\n\t\tfor (long i = 0; i < n - cl + 1; i++) \n\t\t{\n\t\t\tlong j = i + cl - 1;\n\t\t\tif (str[i] == str[j] && cl == 2)\n\t\t\t\tL[i][j] = 2;\n\t\t\telse if (str[i] == str[j])\n\t\t\t\tL[i][j] = L[i + 1][j - 1] + 2;\n\t\t\telse\n\t\t\t\tL[i][j] = max(L[i][j - 1], L[i + 1][j]);\n\t\t}\n\t}\n\treturn L[0][n - 1];\n}\nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "/tmp/tmpnc1g0vd_.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmpnc1g0vd_.d(26): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnc1g0vd_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n   int n = str.length; \n   int i, j, cl; \n   int L[n][n];  \n  \n   for (i = 0; i < n; i++) \n      L[i][i] = 1; \n  \n    for (cl=2; cl<=n; cl++) \n    { \n        for (i=0; i<n-cl+1; i++) \n        { \n            j = i+cl-1; \n            if (str[i] == str[j] && cl == 2) \n               L[i][j] = 2; \n            else if (str[i] == str[j]) \n               L[i][j] = L[i+1][j-1] + 2; \n            else\n               L[i][j] = max(L[i][j-1], L[i+1][j]); \n        } \n    } \n  \n    return L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "/tmp/tmppt3da5lu.d(12): Deprecation: instead of C-style syntax, use D-style syntax `int[n][n] L`\n/tmp/tmppt3da5lu.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmppt3da5lu.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmppt3da5lu.d(12): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppt3da5lu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n\tint n = str.length; \n\tint i, j, cl; \n\tint L[][] = new int[n][n]; \n\tfor (i = 0; i < n; i++) \n\t\tL[i][i] = 1; \n\tfor (cl=2; cl<=n; cl++) \n\t{ \n\t\tfor (i=0; i<n-cl+1; i++) \n\t\t{ \n\t\t\tj = i+cl-1; \n\t\t\tif (str[i] == str[j] && cl == 2) \n\t\t\t\tL[i][j] = 2; \n\t\t\telse if (str[i] == str[j]) \n\t\t\t\tL[i][j] = L[i+1][j-1] + 2; \n\t\t\telse\n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \n\t\t} \n\t} \n\treturn L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124147,
      "stdout": "",
      "stderr": "/tmp/tmpr4wtyydk.d(12): Deprecation: instead of C-style syntax, use D-style syntax `int[][] L`\n/tmp/tmpr4wtyydk.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmpr4wtyydk.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmpr4wtyydk.d(25): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr4wtyydk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n\tlong n = str.length; \n\tlong[][] L = new long[n][n]; \n\t\n\tfor (long i = 0; i < n; i++) \n\t\tL[i][i] = 1; \n\t\n\tfor (long cl = 2; cl <= n; cl++) \n\t{ \n\t\tfor (long i = 0; i < n - cl + 1; i++) \n\t\t{ \n\t\t\tlong j = i + cl - 1; \n\t\t\tif (str[i] == str[j] && cl == 2) \n\t\t\t\tL[i][j] = 2; \n\t\t\telse if (str[i] == str[j]) \n\t\t\t\tL[i][j] = L[i + 1][j - 1] + 2; \n\t\t\telse\n\t\t\t\tL[i][j] = max(L[i][j - 1], L[i + 1][j]); \n\t\t} \n\t} \n\t\n\treturn L[0][n - 1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124147,
      "stdout": "",
      "stderr": "/tmp/tmp3_skbv_6.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmp3_skbv_6.d(26): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3_skbv_6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{\n\tlong n = str.length;\n\tlong[][] dp = new long[n][n];\n\t\n\tfor (long i = 0; i < n; i++)\n\t\tdp[i][i] = 1;\n\t\n\tfor (long i = n - 1; i >= 0; i--)\n\t{\n\t\tfor (long j = i + 1; j < n; j++)\n\t\t{\n\t\t\tif (str[i] == str[j])\n\t\t\t\tdp[i][j] = 2 + dp[i + 1][j - 1];\n\t\t\telse\n\t\t\t\tdp[i][j] = max(dp[i + 1][j], dp[i][j - 1]);\n\t\t}\n\t}\n\t\n\treturn dp[0][n - 1];\n}\nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124147,
      "stdout": "",
      "stderr": "/tmp/tmpxs55uql2.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmpxs55uql2.d(23): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxs55uql2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n\tint n = str.length; \n\tint i, j, cl; \n\tint L[n][n]; \n\tfor (i = 0; i < n; i++) \n\t\tL[i][i] = 1; \n\tfor (cl=2; cl<=n; cl++) \n\t{ \n\t\tfor (i=0; i<n-cl+1; i++) \n\t\t{ \n\t\t\tj = i+cl-1; \n\t\t\tif (str[i] == str[j] && cl == 2) \n\t\t\t\tL[i][j] = 2; \n\t\t\telse if (str[i] == str[j]) \n\t\t\t\tL[i][j] = L[i+1][j-1] + 2; \n\t\t\telse\n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \n\t\t} \n\t} \n\treturn L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124147,
      "stdout": "",
      "stderr": "/tmp/tmpxo7l7yqv.d(12): Deprecation: instead of C-style syntax, use D-style syntax `int[n][n] L`\n/tmp/tmpxo7l7yqv.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmpxo7l7yqv.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmpxo7l7yqv.d(12): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxo7l7yqv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n\tint n = str.length; \n\tint i, j, cl; \n\tauto L = new int[n][n]; // Create a table to store results of subproblems \n\t\n\t// Strings of length 1 are palindrome of lentgh 1 \n\tfor (i = 0; i < n; i++) \n\t\tL[i][i] = 1; \n\t\t\n\t// Build the table. Note that the lower diagonal values of table are \n\t// useless and not filled in the process. The values are filled in a \n\t// manner similar to Matrix Chain Multiplication DP solution (See \n\t// http://www.geeksforgeeks.org/archives/15553). cl is length of \n\t// substring \n\tfor (cl=2; cl<=n; cl++) \n\t{ \n\t\tfor (i=0; i<n-cl+1; i++) \n\t\t{ \n\t\t\tj = i+cl-1; \n\t\t\tif (str[i] == str[j] && cl == 2) \n\t\t\t\tL[i][j] = 2; \n\t\t\telse if (str[i] == str[j]) \n\t\t\t\tL[i][j] = L[i+1][j-1] + 2; \n\t\t\telse\n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \n\t\t} \n\t} \n\t\n\treturn L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124147,
      "stdout": "",
      "stderr": "/tmp/tmpc3q_i2pc.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmpc3q_i2pc.d(12): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc3q_i2pc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{\n\tint n = str.length;\n\tint[][] dp = new int[n][n];\n\t\n\tfor (int i = 0; i < n; i++)\n\t\tdp[i][i] = 1;\n\t\n\tfor (int len = 2; len <= n; len++) \n\t{\n\t\tfor (int i = 0; i < n - len + 1; i++) \n\t\t{\n\t\t\tint j = i + len - 1;\n\t\t\tif (str[i] == str[j] && len == 2)\n\t\t\t\tdp[i][j] = 2;\n\t\t\telse if (str[i] == str[j])\n\t\t\t\tdp[i][j] = dp[i + 1][j - 1] + 2;\n\t\t\telse\n\t\t\t\tdp[i][j] = max(dp[i][j - 1], dp[i + 1][j]);\n\t\t}\n\t}\n\treturn dp[0][n - 1];\n}\nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124147,
      "stdout": "",
      "stderr": "/tmp/tmpg4c44mh6.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmpg4c44mh6.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmpg4c44mh6.d(26): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg4c44mh6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    size_t n = str.length(); \n    size_t i, j, cl; \n    auto L = new int[n][n]; \n  \n    // Strings of length 1 are palindrome of lentgh 1 \n    for (i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    // Build the table. Note that the lower diagonal values of table are \n    // useless and not filled in the process. The values are filled in a \n    // manner similar to Matrix Chain Multiplication DP solution (See \n    // https://www.geeksforgeeks.org/dynamic-programming-set-8-matrix-chain-multiplication/). \n    // cl is length of substring \n    for (cl=2; cl<=n; cl++) \n    { \n        for (i=0; i<n-cl+1; i++) \n        { \n            j = i+cl-1; \n            if (str[i] == str[j] && cl == 2) \n               L[i][j] = 2; \n            else if (str[i] == str[j]) \n               L[i][j] = L[i+1][j-1] + 2; \n            else\n               L[i][j] = max(L[i][j-1], L[i+1][j]); \n        } \n    } \n  \n    return L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124147,
      "stdout": "",
      "stderr": "/tmp/tmpuuf4cq6u.d(10): Error: no property `length` for type `string`\n/tmp/tmpuuf4cq6u.d(12): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuuf4cq6u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n\tint n = str.length; \n\tint i, j, cl; \n\tint L[][] = new int[n][n]; // Create a table to store results of subproblems \n\t\n\t// Strings of length 1 are palindrome of lentgh 1 \n\tfor (i = 0; i < n; i++) \n\t\tL[i][i] = 1; \n\t\t\n\t// Build the table. Note that the lower diagonal values of table are \n\t// useless and not filled in the process. The values are filled in a \n\t// manner similar to Matrix Chain Multiplication DP solution (See \n\t// http://www.geeksforgeeks.org/archives/15553). cl is length of \n\t// substring \n\tfor (cl=2; cl<=n; cl++) \n\t{ \n\t\tfor (i=0; i<n-cl+1; i++) \n\t\t{ \n\t\t\tj = i+cl-1; \n\t\t\tif (str[i] == str[j] && cl == 2) \n\t\t\t\tL[i][j] = 2; \n\t\t\telse if (str[i] == str[j]) \n\t\t\t\tL[i][j] = L[i+1][j-1] + 2; \n\t\t\telse\n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \n\t\t} \n\t} \n\t\n\treturn L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124147,
      "stdout": "",
      "stderr": "/tmp/tmp29wljlxr.d(12): Deprecation: instead of C-style syntax, use D-style syntax `int[][] L`\n/tmp/tmp29wljlxr.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmp29wljlxr.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmp29wljlxr.d(33): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp29wljlxr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n\tint n = str.length; \n\tint i, j, cl; \n\tauto L = new int[n][n]; \n\t\n\tfor (i = 0; i < n; i++) \n\t\tL[i][i] = 1; \n\t\n\tfor (cl=2; cl<=n; cl++) \n\t{ \n\t\tfor (i=0; i<n-cl+1; i++) \n\t\t{ \n\t\t\tj = i+cl-1; \n\t\t\tif (str[i] == str[j] && cl == 2) \n\t\t\t\tL[i][j] = 2; \n\t\t\telse if (str[i] == str[j]) \n\t\t\t\tL[i][j] = L[i+1][j-1] + 2; \n\t\t\telse\n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \n\t\t} \n\t} \n\t\n\treturn L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124147,
      "stdout": "",
      "stderr": "/tmp/tmpw9ja8ic4.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmpw9ja8ic4.d(12): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw9ja8ic4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    long n = str.length; \n    long i, j, cl; \n    long L[][] = new long[n][n];  \n    for (i = 0; i < n; i++) \n        L[i][i] = 1; \n    for (cl=2; cl<=n; cl++) \n    { \n        for (i=0; i<n-cl+1; i++) \n        { \n            j = i+cl-1; \n            if (str[i] == str[j] && cl == 2) \n               L[i][j] = 2; \n            else if (str[i] == str[j]) \n               L[i][j] = L[i+1][j-1] + 2; \n            else\n               L[i][j] = max(L[i][j-1], L[i+1][j]); \n        } \n    } \n    return L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124147,
      "stdout": "",
      "stderr": "/tmp/tmpgsiimsr6.d(12): Deprecation: instead of C-style syntax, use D-style syntax `long[][] L`\n/tmp/tmpgsiimsr6.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmpgsiimsr6.d(25): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgsiimsr6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n\tlong n = str.length; \n\tlong[][] L = new long[n][n]; \n\t\n\t// Strings of length 1 are palindrome of lentgh 1 \n\tforeach(i; 0 .. n) \n\t\tL[i][i] = 1; \n\t\n\tforeach(sublen; 2 .. n + 1) \n\t{ \n\t\tforeach(i; 0 .. n - sublen + 1) \n\t\t{ \n\t\t\tlong j = i + sublen - 1; \n\t\t\tif (str[i] == str[j] && sublen == 2) \n\t\t\t\tL[i][j] = 2; \n\t\t\telse if (str[i] == str[j]) \n\t\t\t\tL[i][j] = L[i + 1][j - 1] + 2; \n\t\t\telse\n\t\t\t\tL[i][j] = max(L[i][j - 1], L[i + 1][j]); \n\t\t} \n\t} \n\t\n\treturn L[0][n - 1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124147,
      "stdout": "",
      "stderr": "/tmp/tmp5v899c8c.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmp5v899c8c.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5v899c8c.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{\n\tlong n = str.length;\n\tlong[][] L = new long[n][n];\n\t\n\tfor (long i = 0; i < n; i++)\n\t\tL[i][i] = 1;\n\t\n\tfor (long cl = 2; cl <= n; cl++) \n\t{\n\t\tfor (long i = 0; i < n - cl + 1; i++) \n\t\t{\n\t\t\tlong j = i + cl - 1;\n\t\t\tif (str[i] == str[j] && cl == 2)\n\t\t\t\tL[i][j] = 2;\n\t\t\telse if (str[i] == str[j])\n\t\t\t\tL[i][j] = L[i + 1][j - 1] + 2;\n\t\t\telse\n\t\t\t\tL[i][j] = max(L[i][j - 1], L[i + 1][j]);\n\t\t}\n\t}\n\treturn L[0][n - 1];\n}\nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "/tmp/tmpnc1g0vd_.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmpnc1g0vd_.d(26): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnc1g0vd_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    long n = str.length; \n    long[][] L = new long[n][n]; \n  \n    for (long i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    for (long cl = 2; cl <= n; cl++) \n    { \n        for (long i = 0; i < n - cl + 1; i++) \n        { \n            long j = i + cl - 1; \n            if (str[i] == str[j] && cl == 2) \n                L[i][j] = 2; \n            else if (str[i] == str[j]) \n                L[i][j] = L[i + 1][j - 1] + 2; \n            else\n                L[i][j] = max(L[i][j - 1], L[i + 1][j]); \n        } \n    } \n  \n    return L[0][n - 1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "/tmp/tmpiole5xo5.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmpiole5xo5.d(26): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiole5xo5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    long n = str.length; \n    long[][] L = new long[n][n]; \n  \n    for (long i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    for (long cl = 2; cl <= n; cl++) \n    { \n        for (long i = 0; i < n - cl + 1; i++) \n        { \n            long j = i + cl - 1; \n            if (str[i] == str[j] && cl == 2) \n                L[i][j] = 2; \n            else if (str[i] == str[j]) \n                L[i][j] = L[i + 1][j - 1] + 2; \n            else\n                L[i][j] = max(L[i][j - 1], L[i + 1][j]); \n        } \n    } \n  \n    return L[0][n - 1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "/tmp/tmpiole5xo5.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmpiole5xo5.d(26): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiole5xo5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    long n = str.length; \n    long[][] L = new long[n][n]; \n    for (long i = 0; i < n; i++) \n        L[i][i] = 1; \n    for (long cl = 2; cl <= n; cl++) { \n        for (long i = 0; i < n - cl + 1; i++) { \n            long j = i + cl - 1; \n            if (str[i] == str[j] && cl == 2) \n                L[i][j] = 2; \n            else if (str[i] == str[j]) \n                L[i][j] = L[i + 1][j - 1] + 2; \n            else\n                L[i][j] = max(L[i][j - 1], L[i + 1][j]); \n        } \n    } \n    return L[0][n - 1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124147,
      "stdout": "",
      "stderr": "/tmp/tmpbd8s7iof.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmpbd8s7iof.d(22): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbd8s7iof.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    long n = str.length; \n    long i, j, cl; \n    auto L = new long[n][n]; \n  \n    // Strings of length 1 are palindrome of lentgh 1 \n    for (i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    // Build the table. Note that the lower  \n    // diagonal values of table are \n    // useless and not filled in the process.  \n    // The values are filled in a manner similar \n    // to Matrix Chain Multiplication DP solution (See \n    // https://www.geeksforgeeks.org/dynamic-programming-set-8-matrix-chain-multiplication/ \n    // cl is length of substring \n    for (cl=2; cl<=n; cl++) \n    { \n        for (i=0; i<n-cl+1; i++) \n        { \n            j = i+cl-1; \n            if (str[i] == str[j] && cl == 2) \n               L[i][j] = 2; \n            else if (str[i] == str[j]) \n               L[i][j] = L[i+1][j-1] + 2; \n            else\n               L[i][j] = max(L[i][j-1], L[i+1][j]); \n        } \n    } \n  \n    return L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124147,
      "stdout": "",
      "stderr": "/tmp/tmpwooruny8.d(12): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwooruny8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n\tlong n = str.length; \n\tlong i, j, cl; \n\tauto L = new long[n][n]; \n\t\n\tfor (i = 0; i < n; i++) \n\t\tL[i][i] = 1; \n\t\n\tfor (cl=2; cl<=n; cl++) \n\t{ \n\t\tfor (i=0; i<n-cl+1; i++) \n\t\t{ \n\t\t\tj = i+cl-1; \n\t\t\tif (str[i] == str[j] && cl == 2) \n\t\t\t\tL[i][j] = 2; \n\t\t\telse if (str[i] == str[j]) \n\t\t\t\tL[i][j] = L[i+1][j-1] + 2; \n\t\t\telse\n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \n\t\t} \n\t} \n\t\n\treturn L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124147,
      "stdout": "",
      "stderr": "/tmp/tmpgrbp3fmv.d(12): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgrbp3fmv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{\n\tlong n = str.length;\n\tlong[][] L = new long[n][n];\n\t\n\tforeach(i; 0 .. n)\n\t\tL[i][i] = 1;\n\t\n\tforeach(sublen; 2 .. n + 1)\n\t{\n\t\tforeach(i; 0 .. n - sublen + 1)\n\t\t{\n\t\t\tlong j = i + sublen - 1;\n\t\t\tif(str[i] == str[j] && sublen == 2)\n\t\t\t\tL[i][j] = 2;\n\t\t\telse if(str[i] == str[j])\n\t\t\t\tL[i][j] = L[i + 1][j - 1] + 2;\n\t\t\telse\n\t\t\t\tL[i][j] = max(L[i][j - 1], L[i + 1][j]);\n\t\t}\n\t}\n\t\n\treturn L[0][n - 1];\n}\nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124147,
      "stdout": "",
      "stderr": "/tmp/tmp2fj7vxph.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmp2fj7vxph.d(26): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2fj7vxph.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n\tlong n = str.length; \n\tlong[][] L = new long[n][n]; \n\t\n\tfor (long i = 0; i < n; i++) \n\t\tL[i][i] = 1; \n\t\n\tfor (long cl = 2; cl <= n; cl++) \n\t{ \n\t\tfor (long i = 0; i < n - cl + 1; i++) \n\t\t{ \n\t\t\tlong j = i + cl - 1; \n\t\t\tif (str[i] == str[j] && cl == 2) \n\t\t\t\tL[i][j] = 2; \n\t\t\telse if (str[i] == str[j]) \n\t\t\t\tL[i][j] = L[i + 1][j - 1] + 2; \n\t\t\telse\n\t\t\t\tL[i][j] = max(L[i][j - 1], L[i + 1][j]); \n\t\t} \n\t} \n\t\n\treturn L[0][n - 1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124147,
      "stdout": "",
      "stderr": "/tmp/tmp3_skbv_6.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmp3_skbv_6.d(26): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3_skbv_6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n\tlong n = str.length; \n\tlong i, j, cl; \n\tauto L = new long[n][n]; \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124147,
      "stdout": "",
      "stderr": "/tmp/tmp1ob2h9gd.d(13): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1ob2h9gd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    long n = str.length; \n    long i, j, cl; \n    long L[][] = new long[n][n];  \n  \n    for (i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    for (cl=2; cl<=n; cl++) \n    { \n        for (i=0; i<n-cl+1; i++) \n        { \n            j = i+cl-1; \n            if (str[i] == str[j] && cl == 2) \n                L[i][j] = 2; \n            else if (str[i] == str[j]) \n                L[i][j] = L[i+1][j-1] + 2; \n            else\n                L[i][j] = max(L[i][j-1], L[i+1][j]); \n        } \n    } \n  \n    return L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124147,
      "stdout": "",
      "stderr": "/tmp/tmpdfledery.d(12): Deprecation: instead of C-style syntax, use D-style syntax `long[][] L`\n/tmp/tmpdfledery.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmpdfledery.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdfledery.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n\tlong n = str.length; \n\tlong i, j, cl; \n\tauto L = new long[n][n]; \n\t\n\tfor (i = 0; i < n; i++) \n\t\tL[i][i] = 1; \n\t\n\tfor (cl=2; cl<=n; cl++) \n\t{ \n\t\tfor (i=0; i<n-cl+1; i++) \n\t\t{ \n\t\t\tj = i+cl-1; \n\t\t\tif (str[i] == str[j] && cl == 2) \n\t\t\t\tL[i][j] = 2; \n\t\t\telse if (str[i] == str[j]) \n\t\t\t\tL[i][j] = L[i+1][j-1] + 2; \n\t\t\telse\n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \n\t\t} \n\t} \n\t\n\treturn L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124147,
      "stdout": "",
      "stderr": "/tmp/tmpgrbp3fmv.d(12): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgrbp3fmv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    long n = str.length; \n    long i, j, cl; \n    long L[][] = new long[n][n]; \n  \n    // Strings of length 1 are palindrome of lentgh 1 \n    for (i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    // Build the table. Note that the lower  \n    // diagonal values of table are \n    // useless and not filled in the process.  \n    // The values are filled in a manner similar \n    // to Matrix Chain Multiplication DP solution (See \n    // https://www.geeksforgeeks.org/dynamic-programming-set-8-matrix-chain-multiplication/ \n    // cl is length of substring \n    for (cl=2; cl<=n; cl++) \n    { \n        for (i=0; i<n-cl+1; i++) \n        { \n            j = i+cl-1; \n            if (str[i] == str[j] && cl == 2) \n               L[i][j] = 2; \n            else if (str[i] == str[j]) \n               L[i][j] = L[i+1][j-1] + 2; \n            else\n               L[i][j] = max(L[i][j-1], L[i+1][j]); \n        } \n    } \n  \n    return L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124147,
      "stdout": "",
      "stderr": "/tmp/tmpunvt_095.d(12): Deprecation: instead of C-style syntax, use D-style syntax `long[][] L`\n/tmp/tmpunvt_095.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmpunvt_095.d(35): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpunvt_095.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    long n = str.length; \n    long[][] L = new long[n][n]; \n  \n    for (long i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    for (long cl = 2; cl <= n; cl++) \n    { \n        for (long i = 0; i < n - cl + 1; i++) \n        { \n            long j = i + cl - 1; \n            if (str[i] == str[j] && cl == 2) \n                L[i][j] = 2; \n            else if (str[i] == str[j]) \n                L[i][j] = L[i + 1][j - 1] + 2; \n            else\n                L[i][j] = max(L[i][j - 1], L[i + 1][j]); \n        } \n    } \n  \n    return L[0][n - 1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "/tmp/tmpiole5xo5.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmpiole5xo5.d(26): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiole5xo5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n\tlong n = str.length; \n\tlong[][] L = new long[n][n]; \n\t\n\tfor (long i = 0; i < n; i++) \n\t\tL[i][i] = 1; \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124147,
      "stdout": "",
      "stderr": "/tmp/tmpg5fpt4zm.d(15): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg5fpt4zm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n\tint n = str.length; \n\tint i, j, cl; \n\tint L[][] = new int[n][n];  \n\tfor (i = 0; i < n; i++) \n\t\tL[i][i] = 1; \n\tfor (cl=2; cl<=n; cl++) \n\t{ \n\t\tfor (i=0; i<n-cl+1; i++) \n\t\t{ \n\t\t\tj = i+cl-1; \n\t\t\tif (str[i] == str[j] && cl == 2) \n\t\t\t\tL[i][j] = 2; \n\t\t\telse if (str[i] == str[j]) \n\t\t\t\tL[i][j] = L[i+1][j-1] + 2; \n\t\t\telse\n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \n\t\t} \n\t} \n\treturn L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124147,
      "stdout": "",
      "stderr": "/tmp/tmpkzxug3wm.d(12): Deprecation: instead of C-style syntax, use D-style syntax `int[][] L`\n/tmp/tmpkzxug3wm.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmpkzxug3wm.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmpkzxug3wm.d(25): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkzxug3wm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n   int n = str.length; \n   int i, j, cl; \n   int L[][] = new int[n][n];  \n  \n   for (i = 0; i < n; i++) \n      L[i][i] = 1; \n  \n    for (cl=2; cl<=n; cl++) \n    { \n        for (i=0; i<n-cl+1; i++) \n        { \n            j = i+cl-1; \n            if (str[i] == str[j] && cl == 2) \n               L[i][j] = 2; \n            else if (str[i] == str[j]) \n               L[i][j] = L[i+1][j-1] + 2; \n            else\n               L[i][j] = max(L[i][j-1], L[i+1][j]); \n        } \n    } \n  \n    return L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124147,
      "stdout": "",
      "stderr": "/tmp/tmppm13l2pi.d(12): Deprecation: instead of C-style syntax, use D-style syntax `int[][] L`\n/tmp/tmppm13l2pi.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmppm13l2pi.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmppm13l2pi.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppm13l2pi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    int n = str.length; \n    int i, j, cl; \n    auto L = new int[n][n]; \n  \n    for (i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    for (cl=2; cl<=n; cl++) \n    { \n        for (i=0; i<n-cl+1; i++) \n        { \n            j = i+cl-1; \n            if (str[i] == str[j] && cl == 2) \n                L[i][j] = 2; \n            else if (str[i] == str[j]) \n                L[i][j] = L[i+1][j-1] + 2; \n            else\n                L[i][j] = max(L[i][j-1], L[i+1][j]); \n        } \n    } \n  \n    return L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124147,
      "stdout": "",
      "stderr": "/tmp/tmps9yt1j8y.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmps9yt1j8y.d(12): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps9yt1j8y.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n\tlong n = str.length; \n\tlong i, j, cl; \n\tauto L = new long[n, n]; \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124147,
      "stdout": "",
      "stderr": "/tmp/tmpp0iml4uw.d(12): Error: found `,` when expecting `]`\n/tmp/tmpp0iml4uw.d(12): Error: semicolon expected following auto declaration, not `n`\n/tmp/tmpp0iml4uw.d(12): Error: found `]` when expecting `;` following statement\n/tmp/tmpp0iml4uw.d(12): Deprecation: use `{ }` for an empty statement, not `;`\n/tmp/tmpp0iml4uw.d(13): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp0iml4uw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    long n = str.length; \n    long i, j, cl; \n    long L[n][n];\n    for (i = 0; i < n; i++) \n        L[i][i] = 1; \n    for (cl=2; cl<=n; cl++) \n    { \n        for (i=0; i<n-cl+1; i++) \n        { \n            j = i+cl-1; \n            if (str[i] == str[j] && cl == 2) \n               L[i][j] = 2; \n            else if (str[i] == str[j]) \n               L[i][j] = L[i+1][j-1] + 2; \n            else\n               L[i][j] = max(L[i][j-1], L[i+1][j]); \n        } \n    } \n    return L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124147,
      "stdout": "",
      "stderr": "/tmp/tmp8zhis19x.d(12): Deprecation: instead of C-style syntax, use D-style syntax `long[n][n] L`\n/tmp/tmp8zhis19x.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmp8zhis19x.d(12): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8zhis19x.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n\tlong n = str.length; \n\tlong i, j, cl; \n\tlong L[n][n]; // Create a table to store results of subproblems \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124147,
      "stdout": "",
      "stderr": "/tmp/tmp220wly36.d(12): Deprecation: instead of C-style syntax, use D-style syntax `long[n][n] L`\n/tmp/tmp220wly36.d(13): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp220wly36.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    long n = str.length; \n    long i, j, cl; \n    long L[][] = new long[n][n]; \n  \n    for (i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    for (cl = 2; cl <= n; cl++) { \n        for (i = 0; i < n - cl + 1; i++) { \n            j = i + cl - 1; \n            if (str[i] == str[j] && cl == 2) \n                L[i][j] = 2; \n            else if (str[i] == str[j]) \n                L[i][j] = L[i + 1][j - 1] + 2; \n            else\n                L[i][j] = max(L[i][j - 1], L[i + 1][j]); \n        } \n    } \n  \n    return L[0][n - 1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124147,
      "stdout": "",
      "stderr": "/tmp/tmp6sret4_j.d(12): Deprecation: instead of C-style syntax, use D-style syntax `long[][] L`\n/tmp/tmp6sret4_j.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmp6sret4_j.d(25): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6sret4_j.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n\tint n = str.length; \n\tint i, j, cl; \n\tint L[n][n]; // Create a table to store results of subproblems \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124147,
      "stdout": "",
      "stderr": "/tmp/tmp55wgno33.d(12): Deprecation: instead of C-style syntax, use D-style syntax `int[n][n] L`\n/tmp/tmp55wgno33.d(13): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp55wgno33.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n\t// Create a table to store results of subproblems \n\tlong n = str.length; \n\tlong[][] L = new long[n][n]; \n\t\n\t// Strings of length 1 are palindrome of lentgh 1 \n\tforeach(i; 0 .. n) \n\t\tL[i][i] = 1; \n\t\n\t// Build the table. Note that the lower diagonal values of table are \n\t// useless and not filled in the process. The values are filled in a \n\t// manner similar to Matrix Chain Multiplication DP solution (See \n\t// http://www.geeksforgeeks.org/archives/15553). clang-format off \n\tforeach(cl; 2 .. n + 1) \n\t\tforeach(i; 0 .. n - cl + 1) \n\t\t{ \n\t\t\tlong j = i + cl - 1; \n\t\t\tif (str[i] == str[j] && cl == 2) \n\t\t\t\tL[i][j] = 2; \n\t\t\telse if (str[i] == str[j]) \n\t\t\t\tL[i][j] = L[i + 1][j - 1] + 2; \n\t\t\telse\n\t\t\t\tL[i][j] = max(L[i][j - 1], L[i + 1][j]); \n\t\t} \n\t\n\treturn L[0][n - 1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124147,
      "stdout": "",
      "stderr": "/tmp/tmpmdzo6m50.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmpmdzo6m50.d(31): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmdzo6m50.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    long n = str.length; \n    long i, j, cl; \n    long L[][] = new long[n][n]; // Create a table to store results of subproblems \n  \n    // Strings of length 1 are palindrome of lentgh 1 \n    for (i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    // Build the table. Note that the lower diagonal values of table are \n    // useless and not filled in the process. The values are filled in a \n    // manner similar to Matrix Chain Multiplication DP solution (See \n    // https://www.geeksforgeeks.org/dynamic-programming-set-8-matrix-chain-multiplication/ \n    // cl is length of substring \n    for (cl=2; cl<=n; cl++) \n    { \n        for (i=0; i<n-cl+1; i++) \n        { \n            j = i+cl-1; \n            if (str[i] == str[j] && cl == 2) \n               L[i][j] = 2; \n            else if (str[i] == str[j]) \n               L[i][j] = L[i+1][j-1] + 2; \n            else\n               L[i][j] = max(L[i][j-1], L[i+1][j]); \n        } \n    } \n  \n    return L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124147,
      "stdout": "",
      "stderr": "/tmp/tmpoe6x9pof.d(12): Deprecation: instead of C-style syntax, use D-style syntax `long[][] L`\n/tmp/tmpoe6x9pof.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmpoe6x9pof.d(33): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoe6x9pof.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{\n\tlong n = str.length;\n\tlong[][] dp = new long[n][n];\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tdp[i][i] = 1;\n\t}\n\tfor (long l = 2; l <= n; l++) \n\t{\n\t\tfor (long i = 0; i < n - l + 1; i++) \n\t\t{\n\t\t\tlong j = i + l - 1;\n\t\t\tif (str[i] == str[j] && l == 2)\n\t\t\t{\n\t\t\t\tdp[i][j] = 2;\n\t\t\t}\n\t\t\telse if (str[i] == str[j])\n\t\t\t{\n\t\t\t\tdp[i][j] = dp[i + 1][j - 1] + 2;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdp[i][j] = max(dp[i][j - 1], dp[i + 1][j]);\n\t\t\t}\n\t\t}\n\t}\n\treturn dp[0][n - 1];\n}\nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124147,
      "stdout": "",
      "stderr": "/tmp/tmphgocuggw.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmphgocuggw.d(31): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphgocuggw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n\tint n = str.length; \n\tint i, j, cl; \n\tint L[][] = new int[n][n]; \n\t\n\tfor (i = 0; i < n; i++) \n\t\tL[i][i] = 1; \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124147,
      "stdout": "",
      "stderr": "/tmp/tmpbn_b9cl5.d(12): Deprecation: instead of C-style syntax, use D-style syntax `int[][] L`\n/tmp/tmpbn_b9cl5.d(16): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbn_b9cl5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n\tint n = str.length; \n\tint i, j, cl; \n\tauto L = new int[n][n]; \n\t\n\tfor (i = 0; i < n; i++) \n\t\tL[i][i] = 1; \n\t\t\n\tfor (cl=2; cl<=n; cl++) \n\t{ \n\t\tfor (i=0; i<n-cl+1; i++) \n\t\t{ \n\t\t\tj = i+cl-1; \n\t\t\tif (str[i] == str[j] && cl == 2) \n\t\t\t\tL[i][j] = 2; \n\t\t\telse if (str[i] == str[j]) \n\t\t\t\tL[i][j] = L[i+1][j-1] + 2; \n\t\t\telse\n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \n\t\t} \n\t} \n\t\n\treturn L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124147,
      "stdout": "",
      "stderr": "/tmp/tmp0y8c71dh.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmp0y8c71dh.d(12): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0y8c71dh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{\n\tlong n = str.length;\n\tlong[][] L = new long[n][n];\n\t\n\tforeach(i; 0 .. n)\n\t\tL[i][i] = 1;\n\t\n\tforeach(cl; 2 .. n + 1)\n\t{\n\t\tforeach(i; 0 .. n - cl + 1)\n\t\t{\n\t\t\tlong j = i + cl - 1;\n\t\t\tif(str[i] == str[j] && cl == 2)\n\t\t\t\tL[i][j] = 2;\n\t\t\telse if(str[i] == str[j])\n\t\t\t\tL[i][j] = L[i + 1][j - 1] + 2;\n\t\t\telse\n\t\t\t\tL[i][j] = max(L[i][j - 1], L[i + 1][j]);\n\t\t}\n\t}\n\t\n\treturn L[0][n - 1];\n}\nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124147,
      "stdout": "",
      "stderr": "/tmp/tmpieswiyd3.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmpieswiyd3.d(26): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpieswiyd3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n\tlong n = str.length; \n\tlong[][] L = new long[n][n]; \n\t\n\t// Strings of length 1 are palindrome of lentgh 1 \n\tforeach (i; 0 .. n) \n\t\tL[i][i] = 1; \n\t\n\tforeach (sublen; 2 .. n + 1) \n\t{ \n\t\tforeach (i; 0 .. n - sublen + 1) \n\t\t{ \n\t\t\tlong j = i + sublen - 1; \n\t\t\tif (str[i] == str[j] && sublen == 2) \n\t\t\t\tL[i][j] = 2; \n\t\t\telse if (str[i] == str[j]) \n\t\t\t\tL[i][j] = L[i + 1][j - 1] + 2; \n\t\t\telse\n\t\t\t\tL[i][j] = max(L[i][j - 1], L[i + 1][j]); \n\t\t} \n\t} \n\t\n\treturn L[0][n - 1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124147,
      "stdout": "",
      "stderr": "/tmp/tmplhmg0q5y.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmplhmg0q5y.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplhmg0q5y.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n\tint n = str.length; \n\tint i, j, cl; \n\tint L[n][n]; // Create a table to store results of subproblems \n\t\n\t// Strings of length 1 are palindrome of lentgh 1 \n\tfor (i = 0; i < n; i++) \n\t\tL[i][i] = 1; \n\t\t\n\t// Build the table. Note that the lower diagonal values of table are \n\t// useless and not filled in the process. The values are filled in a \n\t// manner similar to Matrix Chain Multiplication DP solution (See \n\t// http://www.geeksforgeeks.org/archives/15553). cl is length of \n\t// substring \n\tfor (cl=2; cl<=n; cl++) \n\t{ \n\t\tfor (i=0; i<n-cl+1; i++) \n\t\t{ \n\t\t\tj = i+cl-1; \n\t\t\tif (str[i] == str[j] && cl == 2) \n\t\t\t\tL[i][j] = 2; \n\t\t\telse if (str[i] == str[j]) \n\t\t\t\tL[i][j] = L[i+1][j-1] + 2; \n\t\t\telse\n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \n\t\t} \n\t} \n\t\n\treturn L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124147,
      "stdout": "",
      "stderr": "/tmp/tmp0f1jij81.d(12): Deprecation: instead of C-style syntax, use D-style syntax `int[n][n] L`\n/tmp/tmp0f1jij81.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmp0f1jij81.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmp0f1jij81.d(12): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0f1jij81.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{\n\tlong n = str.length;\n\tlong[][] L = new long[n][n];\n\t\n\tforeach(i; 0 .. n)\n\t\tL[i][i] = 1;\n\t\n\tforeach(sublen; 2 .. n + 1)\n\t{\n\t\tforeach(i; 0 .. n - sublen + 1)\n\t\t{\n\t\t\tlong j = i + sublen - 1;\n\t\t\tif(str[i] == str[j] && sublen == 2)\n\t\t\t\tL[i][j] = 2;\n\t\t\telse if(str[i] == str[j])\n\t\t\t\tL[i][j] = L[i + 1][j - 1] + 2;\n\t\t\telse\n\t\t\t\tL[i][j] = max(L[i][j - 1], L[i + 1][j]);\n\t\t}\n\t}\n\t\n\treturn L[0][n - 1];\n}\nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124147,
      "stdout": "",
      "stderr": "/tmp/tmp2fj7vxph.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmp2fj7vxph.d(26): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2fj7vxph.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    long n = str.length; \n    long i, j, cl; \n    long L[n][n];\n    for (i = 0; i < n; i++) \n        L[i][i] = 1; \n    for (cl=2; cl<=n; cl++) \n    { \n        for (i=0; i<n-cl+1; i++) \n        { \n            j = i+cl-1; \n            if (str[i] == str[j] && cl == 2) \n               L[i][j] = 2; \n            else if (str[i] == str[j]) \n               L[i][j] = L[i+1][j-1] + 2; \n            else\n               L[i][j] = max(L[i][j-1], L[i+1][j]); \n        } \n    } \n    return L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124147,
      "stdout": "",
      "stderr": "/tmp/tmp8zhis19x.d(12): Deprecation: instead of C-style syntax, use D-style syntax `long[n][n] L`\n/tmp/tmp8zhis19x.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmp8zhis19x.d(12): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8zhis19x.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n\tint n = str.length; \n\tint i, j, cl; \n\tint L[][] = new int[n][n]; \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124147,
      "stdout": "",
      "stderr": "/tmp/tmpm567hiwt.d(12): Deprecation: instead of C-style syntax, use D-style syntax `int[][] L`\n/tmp/tmpm567hiwt.d(13): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm567hiwt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    long n = str.length; \n    long i, j, cl; \n    auto L = new long[n,n]; \n  \n    // Strings of length 1 are palindrome of lentgh 1 \n    for (i = 0; i < n; i++) \n        L[i,i] = 1; \n  \n    // Build the table. Note that the lower diagonal values of table are \n    // useless and not filled in the process. The values are filled in a \n    // manner similar to Matrix Chain Multiplication DP solution (See \n    // https://www.geeksforgeeks.org/dynamic-programming-set-8-matrix-chain-multiplication/). \n    // cl is length of substring \n    for (cl=2; cl<=n; cl++) \n    { \n        for (i=0; i<n-cl+1; i++) \n        { \n            j = i+cl-1; \n            if (str[i] == str[j] && cl == 2) \n               L[i,j] = 2; \n            else if (str[i] == str[j]) \n               L[i,j] = L[i+1,j-1] + 2; \n            else\n               L[i,j] = max(L[i,j-1], L[i+1,j]); \n        } \n    } \n  \n    return L[0,n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124147,
      "stdout": "",
      "stderr": "/tmp/tmpz1w4sbi3.d(12): Error: found `,` when expecting `]`\n/tmp/tmpz1w4sbi3.d(12): Error: semicolon expected following auto declaration, not `n`\n/tmp/tmpz1w4sbi3.d(12): Error: found `]` when expecting `;` following statement\n/tmp/tmpz1w4sbi3.d(12): Deprecation: use `{ }` for an empty statement, not `;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz1w4sbi3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    int n = str.length; \n    int i, j, cl; \n    int L[][] = new int[n][n]; \n  \n    for (i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    for (cl = 2; cl <= n; cl++) { \n        for (i = 0; i < n - cl + 1; i++) { \n            j = i + cl - 1; \n            if (str[i] == str[j] && cl == 2) \n                L[i][j] = 2; \n            else if (str[i] == str[j]) \n                L[i][j] = L[i + 1][j - 1] + 2; \n            else\n                L[i][j] = max(L[i][j - 1], L[i + 1][j]); \n        } \n    } \n  \n    return L[0][n - 1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124147,
      "stdout": "",
      "stderr": "/tmp/tmprumhd83n.d(12): Deprecation: instead of C-style syntax, use D-style syntax `int[][] L`\n/tmp/tmprumhd83n.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmprumhd83n.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmprumhd83n.d(25): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprumhd83n.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n\tlong n = str.length; \n\tlong i, j, cl; \n\tauto L = new long[n][n]; \n\t\n\t// Strings of length 1 are palindrome of lentgh 1 \n\tfor (i = 0; i < n; i++) \n\t\tL[i][i] = 1; \n\t\t\n\t// Build the table. Note that the lower diagonal values of table are \n\t// useless and not filled in the process. The values are filled in a \n\t// manner similar to Matrix Chain Multiplication DP solution (See \n\t// http://www.geeksforgeeks.org/archives/15553). cl is length of \n\t// substring \n\tfor (cl=2; cl<=n; cl++) \n\t{ \n\t\tfor (i=0; i<n-cl+1; i++) \n\t\t{ \n\t\t\tj = i+cl-1; \n\t\t\tif (str[i] == str[j] && cl == 2) \n\t\t\t\tL[i][j] = 2; \n\t\t\telse if (str[i] == str[j]) \n\t\t\t\tL[i][j] = L[i+1][j-1] + 2; \n\t\t\telse\n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \n\t\t} \n\t} \n\t\n\treturn L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124147,
      "stdout": "",
      "stderr": "/tmp/tmpbn0pbpmd.d(12): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbn0pbpmd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{\n\tlong n = str.length;\n\tlong[][] L = new long[n][n];\n\t\n\tfor (long i = 0; i < n; i++)\n\t\tL[i][i] = 1;\n\t\n\tfor (long cl = 2; cl <= n; cl++)\n\t{\n\t\tfor (long i = 0; i < n - cl + 1; i++)\n\t\t{\n\t\t\tlong j = i + cl - 1;\n\t\t\tif (str[i] == str[j] && cl == 2)\n\t\t\t\tL[i][j] = 2;\n\t\t\telse if (str[i] == str[j])\n\t\t\t\tL[i][j] = L[i + 1][j - 1] + 2;\n\t\t\telse\n\t\t\t\tL[i][j] = max(L[i][j - 1], L[i + 1][j]);\n\t\t}\n\t}\n\t\n\treturn L[0][n - 1];\n}\nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124147,
      "stdout": "",
      "stderr": "/tmp/tmpgncsns6l.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmpgncsns6l.d(26): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgncsns6l.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n\tlong n = str.length; \n\tlong[][] L = new long[n][n]; \n\t\n\t// Strings of length 1 are palindrome of lentgh 1 \n\tforeach(i; 0 .. n) \n\t\tL[i][i] = 1; \n\t\n\t// Build the table. Note that the lower diagonal values of table are \n\t// useless and not filled in the process. The values are filled in a \n\t// manner similar to Matrix Chain Multiplication DP solution (See \n\t// https://www.geeksforgeeks.org/dynamic-programming-set-8-matrix-chain-multiplication/ \n\t// cl is length of substring \n\tforeach(cl; 2 .. n + 1) \n\t{ \n\t\tforeach(i; 0 .. n - cl + 1) \n\t\t{ \n\t\t\tlong j = i + cl - 1; \n\t\t\tif (str[i] == str[j] && cl == 2) \n\t\t\t\tL[i][j] = 2; \n\t\t\telse if (str[i] == str[j]) \n\t\t\t\tL[i][j] = L[i + 1][j - 1] + 2; \n\t\t\telse\n\t\t\t\tL[i][j] = max(L[i][j - 1], L[i + 1][j]); \n\t\t} \n\t} \n\t\n\treturn L[0][n - 1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124147,
      "stdout": "",
      "stderr": "/tmp/tmptxlpe4a7.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmptxlpe4a7.d(32): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptxlpe4a7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n\tint n = str.length; \n\tint i, j, cl; \n\tint L[][] = new int[n][n]; \n\t\n\tfor (i = 0; i < n; i++) \n\t\tL[i][i] = 1; \n\t\t\n\tfor (cl=2; cl<=n; cl++) \n\t{ \n\t\tfor (i=0; i<n-cl+1; i++) \n\t\t{ \n\t\t\tj = i+cl-1; \n\t\t\tif (str[i] == str[j] && cl == 2) \n\t\t\t\tL[i][j] = 2; \n\t\t\telse if (str[i] == str[j]) \n\t\t\t\tL[i][j] = L[i+1][j-1] + 2; \n\t\t\telse\n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \n\t\t} \n\t} \n\t\n\treturn L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124147,
      "stdout": "",
      "stderr": "/tmp/tmpd0koxhao.d(12): Deprecation: instead of C-style syntax, use D-style syntax `int[][] L`\n/tmp/tmpd0koxhao.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmpd0koxhao.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmpd0koxhao.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd0koxhao.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{\n\tlong n = str.length;\n\tlong[][] dp = new long[n][n];\n\t\n\tfor (long i = 0; i < n; i++) \n\t\tdp[i][i] = 1;\n\t\n\tfor (long l = 2; l <= n; l++) \n\t{\n\t\tfor (long i = 0; i < n - l + 1; i++) \n\t\t{\n\t\t\tlong j = i + l - 1;\n\t\t\tif (str[i] == str[j] && l == 2) \n\t\t\t\tdp[i][j] = 2;\n\t\t\telse if (str[i] == str[j]) \n\t\t\t\tdp[i][j] = dp[i + 1][j - 1] + 2;\n\t\t\telse \n\t\t\t\tdp[i][j] = max(dp[i][j - 1], dp[i + 1][j]);\n\t\t}\n\t}\n\treturn dp[0][n - 1];\n}\nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124147,
      "stdout": "",
      "stderr": "/tmp/tmpet58a7fy.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmpet58a7fy.d(26): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpet58a7fy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    size_t n = str.length(); \n    size_t i, j, cl; \n    auto L = new int[n][n]; \n  \n    // Strings of length 1 are palindrome of lentgh 1 \n    for (i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    // Build the table. Note that the lower  \n    // diagonal values of table are \n    // useless and not filled in the process.  \n    // The values are filled in a manner similar \n    // to Matrix Chain Multiplication DP solution (See \n    // https://www.geeksforgeeks.org/dynamic-programming-set-8-matrix-chain-multiplication/ \n    // cl is length of substring \n    for (cl=2; cl<=n; cl++) \n    { \n        for (i=0; i<n-cl+1; i++) \n        { \n            j = i+cl-1; \n            if (str[i] == str[j] && cl == 2) \n               L[i][j] = 2; \n            else if (str[i] == str[j]) \n               L[i][j] = L[i+1][j-1] + 2; \n            else\n               L[i][j] = max(L[i][j-1], L[i+1][j]); \n        } \n    } \n  \n    return L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124147,
      "stdout": "",
      "stderr": "/tmp/tmplz9ii18w.d(10): Error: no property `length` for type `string`\n/tmp/tmplz9ii18w.d(12): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplz9ii18w.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n\tlong n = str.length; \n\tlong i, j, cl; \n\tauto L = new long[n][n]; \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124147,
      "stdout": "",
      "stderr": "/tmp/tmp1ob2h9gd.d(13): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1ob2h9gd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n\tlong n = str.length; \n\tlong[][] L = new long[n][n]; \n\tlong i, j, cl; \n\t\n\t// Strings of length 1 are palindrome of lentgh 1 \n\tfor (i = 0; i < n; i++) \n\t\tL[i][i] = 1; \n\t\n\t// Build the table. Note that the lower diagonal values of table are \n\t// useless and not filled in the process. The values are filled in a \n\t// manner similar to Matrix Chain Multiplication DP solution (See \n\t// http://www.geeksforgeeks.org/archives/15553). cl is length of \n\t// substring \n\tfor (cl=2; cl<=n; cl++) \n\t{ \n\t\tfor (i=0; i<n-cl+1; i++) \n\t\t{ \n\t\t\tj = i+cl-1; \n\t\t\tif (str[i] == str[j] && cl == 2) \n\t\t\t\tL[i][j] = 2; \n\t\t\telse if (str[i] == str[j]) \n\t\t\t\tL[i][j] = L[i+1][j-1] + 2; \n\t\t\telse\n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \n\t\t} \n\t} \n\t\n\treturn L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124147,
      "stdout": "",
      "stderr": "/tmp/tmpoozsqrmi.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmpoozsqrmi.d(33): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoozsqrmi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    long n = str.length; \n    long i, j, cl; \n    long L[][] = new long[n][n]; // Create a table to store results of subproblems \n  \n  \n    // Strings of length 1 are palindrome of lentgh 1 \n    for (i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    // Build the table. Note that the lower diagonal values of table are \n    // useless and not filled in the process. The values are filled in a \n    // manner similar to Matrix Chain Multiplication DP solution (See \n    // http://www.geeksforgeeks.org/archives/15553). cl is length of \n    // substring \n    for (cl=2; cl<=n; cl++) \n    { \n        for (i=0; i<n-cl+1; i++) \n        { \n            j = i+cl-1; \n            if (str[i] == str[j] && cl == 2) \n               L[i][j] = 2; \n            else if (str[i] == str[j]) \n               L[i][j] = L[i+1][j-1] + 2; \n            else\n               L[i][j] = max(L[i][j-1], L[i+1][j]); \n        } \n    } \n  \n    return L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124147,
      "stdout": "",
      "stderr": "/tmp/tmpnycw7zg_.d(12): Deprecation: instead of C-style syntax, use D-style syntax `long[][] L`\n/tmp/tmpnycw7zg_.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmpnycw7zg_.d(34): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnycw7zg_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n   long n = str.length; \n   long i, j, cl; \n   long L[][] = new long[n][n];  \n  \n   for (i = 0; i < n; i++) \n      L[i][i] = 1; \n   \n   for (cl=2; cl<=n; cl++) \n   { \n        for (i=0; i<n-cl+1; i++) \n        { \n            j = i+cl-1; \n            if (str[i] == str[j] && cl == 2) \n               L[i][j] = 2; \n            else if (str[i] == str[j]) \n               L[i][j] = L[i+1][j-1] + 2; \n            else\n               L[i][j] = max(L[i][j-1], L[i+1][j]); \n        } \n   } \n  \n   return L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124147,
      "stdout": "",
      "stderr": "/tmp/tmpzw1f_3x1.d(12): Deprecation: instead of C-style syntax, use D-style syntax `long[][] L`\n/tmp/tmpzw1f_3x1.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmpzw1f_3x1.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzw1f_3x1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    long n = str.length; \n    long i, j, cl; \n    long L[][] = new long[n][n]; \n  \n    for (i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    for (cl = 2; cl <= n; cl++) { \n        for (i = 0; i < n - cl + 1; i++) { \n            j = i + cl - 1; \n            if (str[i] == str[j] && cl == 2) \n                L[i][j] = 2; \n            else if (str[i] == str[j]) \n                L[i][j] = L[i + 1][j - 1] + 2; \n            else\n                L[i][j] = max(L[i][j - 1], L[i + 1][j]); \n        } \n    } \n  \n    return L[0][n - 1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124147,
      "stdout": "",
      "stderr": "/tmp/tmp6sret4_j.d(12): Deprecation: instead of C-style syntax, use D-style syntax `long[][] L`\n/tmp/tmp6sret4_j.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmp6sret4_j.d(25): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6sret4_j.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n\tlong n = str.length; \n\tlong[][] L = new long[n][n]; \n\t\n\t// Strings of length 1 are palindrome of lentgh 1 \n\tforeach(i; 0 .. n) \n\t\tL[i][i] = 1; \n\t\n\t// Build the table. Note that the lower diagonal values of table are \n\t// useless and not filled in the process. The values are filled in a \n\t// manner similar to Matrix Chain Multiplication DP solution (See \n\t// https://www.geeksforgeeks.org/dynamic-programming-set-8-matrix-chain-multiplication/ \n\t// cl is length of substring \n\tforeach(cl; 2 .. n + 1) \n\t{ \n\t\tforeach(i; 0 .. n - cl + 1) \n\t\t{ \n\t\t\tlong j = i + cl - 1; \n\t\t\tif (str[i] == str[j] && cl == 2) \n\t\t\t\tL[i][j] = 2; \n\t\t\telse if (str[i] == str[j]) \n\t\t\t\tL[i][j] = L[i + 1][j - 1] + 2; \n\t\t\telse\n\t\t\t\tL[i][j] = max(L[i][j - 1], L[i + 1][j]); \n\t\t} \n\t} \n\t\n\treturn L[0][n - 1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124147,
      "stdout": "",
      "stderr": "/tmp/tmptxlpe4a7.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmptxlpe4a7.d(32): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptxlpe4a7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n\tint n = str.length; \n\tint i, j, cl; \n\tint L[][] = new int[n][n];\n\t\n\tfor (i = 0; i < n; i++) \n\t\tL[i][i] = 1; \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124147,
      "stdout": "",
      "stderr": "/tmp/tmpabb4siu2.d(12): Deprecation: instead of C-style syntax, use D-style syntax `int[][] L`\n/tmp/tmpabb4siu2.d(16): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpabb4siu2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n   long n = str.length; \n   long i, j, cl; \n   auto L = new long[n,n]; \n  \n   // Strings of length 1 are palindrome of lentgh 1 \n   for (i = 0; i < n; i++) \n      L[i,i] = 1; \n  \n    // Build the table. Note that the lower diagonal values of table are \n    // useless and not filled in the process. The values are filled in a \n    // manner similar to Matrix Chain Multiplication DP solution (See \n    // https://www.geeksforgeeks.org/dynamic-programming-set-8-matrix-chain-multiplication/). \n    // cl is length of substring \n    for (cl=2; cl<=n; cl++) \n    { \n        for (i=0; i<n-cl+1; i++) \n        { \n            j = i+cl-1; \n            if (str[i] == str[j] && cl == 2) \n               L[i,j] = 2; \n            else if (str[i] == str[j]) \n               L[i,j] = L[i+1,j-1] + 2; \n            else\n               L[i,j] = max(L[i,j-1], L[i+1,j]); \n        } \n    } \n  \n    return L[0,n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124147,
      "stdout": "",
      "stderr": "/tmp/tmpdmppgu51.d(12): Error: found `,` when expecting `]`\n/tmp/tmpdmppgu51.d(12): Error: semicolon expected following auto declaration, not `n`\n/tmp/tmpdmppgu51.d(12): Error: found `]` when expecting `;` following statement\n/tmp/tmpdmppgu51.d(12): Deprecation: use `{ }` for an empty statement, not `;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdmppgu51.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    long n = str.length; \n    long i, j, cl; \n    auto L = new long[n, n]; \n  \n    // Strings of length 1 are palindrome of lentgh 1 \n    for (i = 0; i < n; i++) \n        L[i, i] = 1; \n  \n    // Build the table. Note that the lower diagonal values of table are \n    // useless and not filled in the process. The values are filled in a \n    // manner similar to Matrix Chain Multiplication DP solution (See \n    // https://www.geeksforgeeks.org/dynamic-programming-set-8-matrix-chain-multiplication/ \n    // cl is length of substring \n    for (cl = 2; cl <= n; cl++) \n    { \n        for (i = 0; i < n - cl + 1; i++) \n        { \n            j = i + cl - 1; \n            if (str[i] == str[j] && cl == 2) \n                L[i, j] = 2; \n            else if (str[i] == str[j]) \n                L[i, j] = L[i + 1, j - 1] + 2; \n            else\n                L[i, j] = max(L[i, j - 1], L[i + 1, j]); \n        } \n    } \n  \n    return L[0, n - 1]; \n} \n  \n// Driver program to test above functions \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124147,
      "stdout": "",
      "stderr": "/tmp/tmp1e7916i0.d(12): Error: found `,` when expecting `]`\n/tmp/tmp1e7916i0.d(12): Error: semicolon expected following auto declaration, not `n`\n/tmp/tmp1e7916i0.d(12): Error: found `]` when expecting `;` following statement\n/tmp/tmp1e7916i0.d(12): Deprecation: use `{ }` for an empty statement, not `;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1e7916i0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{\n\tint n = str.length;\n\tint[][] dp = new int[n][n];\n\t\n\tforeach(i, j; dp)\n\t\tdp[i][j] = 0;\n\t\n\tforeach(i; 0 .. n)\n\t\tdp[i][i] = 1;\n\t\n\tforeach(i; 0 .. n - 1)\n\t{\n\t\tif(str[i] == str[i + 1])\n\t\t\tdp[i][i + 1] = 2;\n\t\telse\n\t\t\tdp[i][i + 1] = 1;\n\t}\n\t\n\tforeach(k; 3 .. n + 1)\n\t{\n\t\tforeach(i; 0 .. n - k + 1)\n\t\t{\n\t\t\tint j = i + k - 1;\n\t\t\tif(str[i] == str[j])\n\t\t\t\tdp[i][j] = dp[i + 1][j - 1] + 2;\n\t\t\telse\n\t\t\t\tdp[i][j] = max(dp[i + 1][j], dp[i][j - 1]);\n\t\t}\n\t}\n\t\n\treturn dp[0][n - 1];\n}\nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124147,
      "stdout": "",
      "stderr": "/tmp/tmpsrzvkqbn.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmpsrzvkqbn.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmpsrzvkqbn.d(14): Error: cannot implicitly convert expression `j` of type `int[]` to `ulong`\n/tmp/tmpsrzvkqbn.d(35): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsrzvkqbn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{\n\tint n = str.length;\n\tint[][] dp = new int[n][n];\n\t\n\tforeach(i; 0 .. n)\n\t\tdp[i][i] = 1;\n\t\n\tforeach(i; 0 .. n)\n\t{\n\t\tforeach(j; i + 1 .. n)\n\t\t{\n\t\t\tif(str[i] == str[j])\n\t\t\t\tdp[i][j] = dp[i + 1][j - 1] + 2;\n\t\t\telse\n\t\t\t\tdp[i][j] = max(dp[i + 1][j], dp[i][j - 1]);\n\t\t}\n\t}\n\t\n\treturn dp[0][n - 1];\n}\nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124147,
      "stdout": "",
      "stderr": "/tmp/tmphvz5ucug.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmphvz5ucug.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmphvz5ucug.d(23): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphvz5ucug.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n\tlong n = str.length; \n\tlong[][] L = new long[n][n]; \n\t\n\t// Strings of length 1 are palindrome of lentgh 1 \n\tforeach(i; 0 .. n) \n\t\tL[i][i] = 1; \n\t\n\tforeach(sublen; 2 .. n + 1) \n\t{ \n\t\tforeach(i; 0 .. n - sublen + 1) \n\t\t{ \n\t\t\tlong j = i + sublen - 1; \n\t\t\tif (str[i] == str[j] && sublen == 2) \n\t\t\t\tL[i][j] = 2; \n\t\t\telse if (str[i] == str[j]) \n\t\t\t\tL[i][j] = L[i + 1][j - 1] + 2; \n\t\t\telse\n\t\t\t\tL[i][j] = max(L[i][j - 1], L[i + 1][j]); \n\t\t} \n\t} \n\t\n\treturn L[0][n - 1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124147,
      "stdout": "",
      "stderr": "/tmp/tmp5v899c8c.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmp5v899c8c.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5v899c8c.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{\n\tint n = str.length;\n\tint[][] dp = new int[n][n];\n\t\n\tforeach(i; 0 .. n)\n\t\tdp[i][i] = 1;\n\t\n\tforeach(sublen; 2 .. n + 1)\n\t{\n\t\tforeach(i; 0 .. n - sublen + 1)\n\t\t{\n\t\t\tint j = i + sublen - 1;\n\t\t\tif(str[i] == str[j] && sublen == 2)\n\t\t\t\tdp[i][j] = 2;\n\t\t\telse if(str[i] == str[j])\n\t\t\t\tdp[i][j] = dp[i + 1][j - 1] + 2;\n\t\t\telse\n\t\t\t\tdp[i][j] = max(dp[i + 1][j], dp[i][j - 1]);\n\t\t}\n\t}\n\treturn dp[0][n - 1];\n}\nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124147,
      "stdout": "",
      "stderr": "/tmp/tmp77edn2cy.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmp77edn2cy.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmp77edn2cy.d(26): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp77edn2cy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n\tint n = str.length; \n\tint i, j, cl; \n\tint L[n][n]; \n\t\n\tfor (i = 0; i < n; i++) \n\t\tL[i][i] = 1; \n\t\t\n\tfor (cl=2; cl<=n; cl++) \n\t{ \n\t\tfor (i=0; i<n-cl+1; i++) \n\t\t{ \n\t\t\tj = i+cl-1; \n\t\t\tif (str[i] == str[j] && cl == 2) \n\t\t\t\tL[i][j] = 2; \n\t\t\telse if (str[i] == str[j]) \n\t\t\t\tL[i][j] = L[i+1][j-1] + 2; \n\t\t\telse\n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \n\t\t} \n\t} \n\t\n\treturn L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124147,
      "stdout": "",
      "stderr": "/tmp/tmph4fcjec1.d(12): Deprecation: instead of C-style syntax, use D-style syntax `int[n][n] L`\n/tmp/tmph4fcjec1.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmph4fcjec1.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmph4fcjec1.d(12): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph4fcjec1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n\tint n = str.length; \n\tint i, j, cl; \n\tint L[][] = new int[n][n]; \n\t\n\tfor (i = 0; i < n; i++) \n\t\tL[i][i] = 1; \n\t\n\tfor (cl=2; cl<=n; cl++) \n\t{ \n\t\tfor (i=0; i<n-cl+1; i++) \n\t\t{ \n\t\t\tj = i+cl-1; \n\t\t\tif (str[i] == str[j] && cl == 2) \n\t\t\t\tL[i][j] = 2; \n\t\t\telse if (str[i] == str[j]) \n\t\t\t\tL[i][j] = L[i+1][j-1] + 2; \n\t\t\telse\n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \n\t\t} \n\t} \n\t\n\treturn L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "/tmp/tmp1bxtxzuc.d(12): Deprecation: instead of C-style syntax, use D-style syntax `int[][] L`\n/tmp/tmp1bxtxzuc.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmp1bxtxzuc.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmp1bxtxzuc.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1bxtxzuc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    long n = str.length; \n    long[][] L = new long[n][n]; \n  \n    for (long i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    for (long cl = 2; cl <= n; cl++) \n    { \n        for (long i = 0; i < n - cl + 1; i++) \n        { \n            long j = i + cl - 1; \n            if (str[i] == str[j] && cl == 2) \n                L[i][j] = 2; \n            else if (str[i] == str[j]) \n                L[i][j] = L[i + 1][j - 1] + 2; \n            else\n                L[i][j] = max(L[i][j - 1], L[i + 1][j]); \n        } \n    } \n  \n    return L[0][n - 1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "/tmp/tmpiole5xo5.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmpiole5xo5.d(26): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiole5xo5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{\n\tint n = str.length;\n\tint[][] L = new int[n][n];\n\t\n\tfor (int i = 0; i < n; i++)\n\t\tL[i][i] = 1;\n\t\n\tfor (int cl = 2; cl <= n; cl++) \n\t{\n\t\tfor (int i = 0; i < n - cl + 1; i++) \n\t\t{\n\t\t\tint j = i + cl - 1;\n\t\t\tif (str[i] == str[j] && cl == 2)\n\t\t\t\tL[i][j] = 2;\n\t\t\telse if (str[i] == str[j])\n\t\t\t\tL[i][j] = L[i + 1][j - 1] + 2;\n\t\t\telse\n\t\t\t\tL[i][j] = max(L[i][j - 1], L[i + 1][j]);\n\t\t}\n\t}\n\t\n\treturn L[0][n - 1];\n}\nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124147,
      "stdout": "",
      "stderr": "/tmp/tmpyc_dhhsk.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmpyc_dhhsk.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmpyc_dhhsk.d(26): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyc_dhhsk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{\n\tlong n = str.length;\n\tlong[][] L = new long[n][n];\n\t\n\tfor (long i = 0; i < n; i++)\n\t\tL[i][i] = 1;\n\t\n\tfor (long cl = 2; cl <= n; cl++) \n\t{\n\t\tfor (long i = 0; i < n - cl + 1; i++) \n\t\t{\n\t\t\tlong j = i + cl - 1;\n\t\t\tif (str[i] == str[j] && cl == 2)\n\t\t\t\tL[i][j] = 2;\n\t\t\telse if (str[i] == str[j])\n\t\t\t\tL[i][j] = L[i + 1][j - 1] + 2;\n\t\t\telse\n\t\t\t\tL[i][j] = max(L[i][j - 1], L[i + 1][j]);\n\t\t}\n\t}\n\treturn L[0][n - 1];\n}\nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "/tmp/tmpnc1g0vd_.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmpnc1g0vd_.d(26): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnc1g0vd_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    long n = str.length; \n    long i, j, cl; \n    long L[][] = new long[n][n];  \n  \n    for (i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    for (cl=2; cl<=n; cl++) \n    { \n        for (i=0; i<n-cl+1; i++) \n        { \n            j = i+cl-1; \n            if (str[i] == str[j] && cl == 2) \n               L[i][j] = 2; \n            else if (str[i] == str[j]) \n               L[i][j] = L[i+1][j-1] + 2; \n            else\n               L[i][j] = max(L[i][j-1], L[i+1][j]); \n        } \n    } \n  \n    return L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124147,
      "stdout": "",
      "stderr": "/tmp/tmpi_r06nu7.d(12): Deprecation: instead of C-style syntax, use D-style syntax `long[][] L`\n/tmp/tmpi_r06nu7.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmpi_r06nu7.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi_r06nu7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n\tint n = str.length; \n\t\n\t// Create a table to store results of subproblems \n\tint[][] L = new int[n][n]; \n\t\n\t// Strings of length 1 are palindrome of length 1 \n\tfor (int i = 0; i < n; i++) \n\t\tL[i][i] = 1; \n\t\n\t// Build the table. Note that the lower diagonal values of table are \n\t// useless and not filled in the process. The values are filled in a \n\t// manner similar to Matrix Chain Multiplication DP solution (See \n\t// http://www.geeksforgeeks.org/archives/15553). cl is length of \n\t// substring \n\tfor (int cl = 2; cl <= n; cl++) \n\t{ \n\t\tfor (int i = 0; i < n - cl + 1; i++) \n\t\t{ \n\t\t\tint j = i + cl - 1; \n\t\t\tif (str[i] == str[j] && cl == 2) \n\t\t\t\tL[i][j] = 2; \n\t\t\telse if (str[i] == str[j]) \n\t\t\t\tL[i][j] = L[i + 1][j - 1] + 2; \n\t\t\telse\n\t\t\t\tL[i][j] = max(L[i][j - 1], L[i + 1][j]); \n\t\t} \n\t} \n\t\n\treturn L[0][n - 1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124147,
      "stdout": "",
      "stderr": "/tmp/tmpwbmth9_9.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmpwbmth9_9.d(13): Error: variable `n` cannot be read at compile time\n/tmp/tmpwbmth9_9.d(34): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwbmth9_9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    long n = str.length; \n    long i, j, cl; \n    long L[][] = new long[n][n];  \n    for (i = 0; i < n; i++) \n        L[i][i] = 1; \n    for (cl=2; cl<=n; cl++) \n    { \n        for (i=0; i<n-cl+1; i++) \n        { \n            j = i+cl-1; \n            if (str[i] == str[j] && cl == 2) \n                L[i][j] = 2; \n            else if (str[i] == str[j]) \n                L[i][j] = L[i+1][j-1] + 2; \n            else\n                L[i][j] = max(L[i][j-1], L[i+1][j]); \n        } \n    } \n    return L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124147,
      "stdout": "",
      "stderr": "/tmp/tmpe4n1_bme.d(12): Deprecation: instead of C-style syntax, use D-style syntax `long[][] L`\n/tmp/tmpe4n1_bme.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmpe4n1_bme.d(25): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe4n1_bme.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    long n = str.length; \n    long[][] L = new long[n][n]; \n  \n    for (long i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    for (long cl = 2; cl <= n; cl++) \n    { \n        for (long i = 0; i < n - cl + 1; i++) \n        { \n            long j = i + cl - 1; \n            if (str[i] == str[j] && cl == 2) \n                L[i][j] = 2; \n            else if (str[i] == str[j]) \n                L[i][j] = L[i + 1][j - 1] + 2; \n            else\n                L[i][j] = max(L[i][j - 1], L[i + 1][j]); \n        } \n    } \n  \n    return L[0][n - 1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "/tmp/tmpiole5xo5.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmpiole5xo5.d(26): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiole5xo5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n\tlong n = str.length; \n\tlong i, j, cl; \n\tauto L = new long[n][n]; \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124147,
      "stdout": "",
      "stderr": "/tmp/tmp1ob2h9gd.d(13): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1ob2h9gd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{\n\tint n = str.length;\n\tint[][] dp = new int[n][n];\n\tfor (int i = 0; i < n; i++)\n\t\tdp[i][i] = 1;\n\tfor (int len = 2; len <= n; len++) \n\t{\n\t\tfor (int i = 0; i < n - len + 1; i++) \n\t\t{\n\t\t\tint j = i + len - 1;\n\t\t\tif (str[i] == str[j] && len == 2)\n\t\t\t\tdp[i][j] = 2;\n\t\t\telse if (str[i] == str[j])\n\t\t\t\tdp[i][j] = dp[i + 1][j - 1] + 2;\n\t\t\telse\n\t\t\t\tdp[i][j] = max(dp[i][j - 1], dp[i + 1][j]);\n\t\t}\n\t}\n\treturn dp[0][n - 1];\n}\nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124147,
      "stdout": "",
      "stderr": "/tmp/tmpgzgzb4jv.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmpgzgzb4jv.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmpgzgzb4jv.d(24): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgzgzb4jv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n\tlong n = str.length; \n\tlong[][] L = new long[n][n]; \n\tfor (long i = 0; i < n; i++) \n\t\tL[i][i] = 1; \n\tfor (long cl = 2; cl <= n; cl++) \n\t{ \n\t\tfor (long i = 0; i < n - cl + 1; i++) \n\t\t{ \n\t\t\tlong j = i + cl - 1; \n\t\t\tif (str[i] == str[j] && cl == 2) \n\t\t\t\tL[i][j] = 2; \n\t\t\telse if (str[i] == str[j]) \n\t\t\t\tL[i][j] = L[i + 1][j - 1] + 2; \n\t\t\telse\n\t\t\t\tL[i][j] = max(L[i][j - 1], L[i + 1][j]); \n\t\t} \n\t} \n\treturn L[0][n - 1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124147,
      "stdout": "",
      "stderr": "/tmp/tmpuxcn32ub.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmpuxcn32ub.d(24): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuxcn32ub.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    long n = str.length; \n    long[][] L = new long[n][n]; \n  \n    // Strings of length 1 are palindrome of lentgh 1 \n    for (long i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    // Build the table. Note that the lower diagonal values of table are \n    // useless and not filled in the process. The values are filled in a \n    // manner similar to Matrix Chain Multiplication DP solution (See \n    // https://www.geeksforgeeks.org/dynamic-programming-set-8-matrix-chain-multiplication/ \n    // cl is length of substring \n    for (long cl = 2; cl <= n; cl++) \n    { \n        for (long i = 0; i < n - cl + 1; i++) \n        { \n            long j = i + cl - 1; \n            if (str[i] == str[j] && cl == 2) \n                L[i][j] = 2; \n            else if (str[i] == str[j]) \n                L[i][j] = L[i + 1][j - 1] + 2; \n            else\n                L[i][j] = max(L[i][j - 1], L[i + 1][j]); \n        } \n    } \n  \n    return L[0][n - 1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124147,
      "stdout": "",
      "stderr": "/tmp/tmphy5oih88.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmphy5oih88.d(32): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphy5oih88.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n\tint n = str.length; \n\tint i, j, cl; \n\tint L[][] = new int[n][n];  \n\tfor (i = 0; i < n; i++) \n\t\tL[i][i] = 1; \n\tfor (cl=2; cl<=n; cl++) \n\t{ \n\t\tfor (i=0; i<n-cl+1; i++) \n\t\t{ \n\t\t\tj = i+cl-1; \n\t\t\tif (str[i] == str[j] && cl == 2) \n\t\t\t\tL[i][j] = 2; \n\t\t\telse if (str[i] == str[j]) \n\t\t\t\tL[i][j] = L[i+1][j-1] + 2; \n\t\t\telse\n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \n\t\t} \n\t} \n\treturn L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124147,
      "stdout": "",
      "stderr": "/tmp/tmpkzxug3wm.d(12): Deprecation: instead of C-style syntax, use D-style syntax `int[][] L`\n/tmp/tmpkzxug3wm.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmpkzxug3wm.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmpkzxug3wm.d(25): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkzxug3wm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{\n\tint n = str.length;\n\tint[][] dp = new int[n][n];\n\t\n\tfor (int i = 0; i < n; i++) \n\t\tdp[i][i] = 1;\n\t\n\tfor (int len = 2; len <= n; len++) \n\t{\n\t\tfor (int i = 0; i < n - len + 1; i++) \n\t\t{\n\t\t\tint j = i + len - 1;\n\t\t\tif (str[i] == str[j] && len == 2) \n\t\t\t\tdp[i][j] = 2;\n\t\t\telse if (str[i] == str[j]) \n\t\t\t\tdp[i][j] = dp[i + 1][j - 1] + 2;\n\t\t\telse \n\t\t\t\tdp[i][j] = max(dp[i + 1][j], dp[i][j - 1]);\n\t\t}\n\t}\n\t\n\treturn dp[0][n - 1];\n}\nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124147,
      "stdout": "",
      "stderr": "/tmp/tmpijnh49f3.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmpijnh49f3.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmpijnh49f3.d(26): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpijnh49f3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n\tlong n = str.length; \n\tlong i, j, cl; \n\tlong L[][] = new long[n][n]; // Create a table to store results of subproblems \n\t\n\t// Strings of length 1 are palindrome of lentgh 1 \n\tfor (i = 0; i < n; i++) \n\t\tL[i][i] = 1; \n\t\t\n\t// Build the table. Note that the lower diagonal values of table are \n\t// useless and not filled in the process. The values are filled in a \n\t// manner similar to Matrix Chain Multiplication DP solution (See \n\t// http://www.geeksforgeeks.org/archives/15553). cl is length of \n\t// substring \n\tfor (cl=2; cl<=n; cl++) \n\t{ \n\t\tfor (i=0; i<n-cl+1; i++) \n\t\t{ \n\t\t\tj = i+cl-1; \n\t\t\tif (str[i] == str[j] && cl == 2) \n\t\t\t\tL[i][j] = 2; \n\t\t\telse if (str[i] == str[j]) \n\t\t\t\tL[i][j] = L[i+1][j-1] + 2; \n\t\t\telse\n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \n\t\t} \n\t} \n\t\n\treturn L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124147,
      "stdout": "",
      "stderr": "/tmp/tmp0jf9_l22.d(12): Deprecation: instead of C-style syntax, use D-style syntax `long[][] L`\n/tmp/tmp0jf9_l22.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmp0jf9_l22.d(33): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0jf9_l22.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n\tlong n = str.length; \n\tlong i, j, cl; \n\tauto L = new long[n][n]; \n\t\n\tfor (i = 0; i < n; i++) \n\t\tL[i][i] = 1; \n\t\n\tfor (cl=2; cl<=n; cl++) \n\t{ \n\t\tfor (i=0; i<n-cl+1; i++) \n\t\t{ \n\t\t\tj = i+cl-1; \n\t\t\tif (str[i] == str[j] && cl == 2) \n\t\t\t\tL[i][j] = 2; \n\t\t\telse if (str[i] == str[j]) \n\t\t\t\tL[i][j] = L[i+1][j-1] + 2; \n\t\t\telse\n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \n\t\t} \n\t} \n\t\n\treturn L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124147,
      "stdout": "",
      "stderr": "/tmp/tmpgrbp3fmv.d(12): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgrbp3fmv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n\tint n = str.length; \n\tint i, j, cl; \n\tint L[][] = new int[n][n];  \n\tfor (i = 0; i < n; i++) \n\t\tL[i][i] = 1; \n\tfor (cl=2; cl<=n; cl++) \n\t{ \n\t\tfor (i=0; i<n-cl+1; i++) \n\t\t{ \n\t\t\tj = i+cl-1; \n\t\t\tif (str[i] == str[j] && cl == 2) \n\t\t\t\tL[i][j] = 2; \n\t\t\telse if (str[i] == str[j]) \n\t\t\t\tL[i][j] = L[i+1][j-1] + 2; \n\t\t\telse\n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \n\t\t} \n\t} \n\treturn L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124147,
      "stdout": "",
      "stderr": "/tmp/tmpkzxug3wm.d(12): Deprecation: instead of C-style syntax, use D-style syntax `int[][] L`\n/tmp/tmpkzxug3wm.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmpkzxug3wm.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmpkzxug3wm.d(25): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkzxug3wm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    long n = str.length; \n    long i, j, cl; \n    long L[][] = new long[n][n];\n  \n    for (i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    for (cl=2; cl<=n; cl++) \n    { \n        for (i=0; i<n-cl+1; i++) \n        { \n            j = i+cl-1; \n            if (str[i] == str[j] && cl == 2) \n               L[i][j] = 2; \n            else if (str[i] == str[j]) \n               L[i][j] = L[i+1][j-1] + 2; \n            else\n               L[i][j] = max(L[i][j-1], L[i+1][j]); \n        } \n    } \n  \n    return L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124147,
      "stdout": "",
      "stderr": "/tmp/tmp0yrjgfn1.d(12): Deprecation: instead of C-style syntax, use D-style syntax `long[][] L`\n/tmp/tmp0yrjgfn1.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmp0yrjgfn1.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0yrjgfn1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    long n = str.length; \n    long i, j, cl; \n    auto L = new long[n, n]; \n  \n    // Strings of length 1 are palindrome of lentgh 1 \n    for (i = 0; i < n; i++) \n        L[i, i] = 1; \n  \n    // Build the table. Note that the lower diagonal values of table are \n    // useless and not filled in the process. The values are filled in a \n    // manner similar to Matrix Chain Multiplication DP solution (See \n    // https://www.geeksforgeeks.org/dynamic-programming-set-8-matrix-chain-multiplication/ \n    // cl is length of substring \n    for (cl = 2; cl <= n; cl++) { \n        for (i = 0; i < n - cl + 1; i++) { \n            j = i + cl - 1; \n            if (str[i] == str[j] && cl == 2) \n                L[i, j] = 2; \n            else if (str[i] == str[j]) \n                L[i, j] = L[i + 1, j - 1] + 2; \n            else\n                L[i, j] = max(L[i, j - 1], L[i + 1, j]); \n        } \n    } \n  \n    return L[0, n - 1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124147,
      "stdout": "",
      "stderr": "/tmp/tmpi87rdm6a.d(12): Error: found `,` when expecting `]`\n/tmp/tmpi87rdm6a.d(12): Error: semicolon expected following auto declaration, not `n`\n/tmp/tmpi87rdm6a.d(12): Error: found `]` when expecting `;` following statement\n/tmp/tmpi87rdm6a.d(12): Deprecation: use `{ }` for an empty statement, not `;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi87rdm6a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n\tlong n = str.length; \n\tlong[][] L = new long[n][n]; \n\t\n\tfor (long i = 0; i < n; i++) \n\t\tL[i][i] = 1; \n\t\n\tfor (long cl = 2; cl <= n; cl++) \n\t{ \n\t\tfor (long i = 0; i < n - cl + 1; i++) \n\t\t{ \n\t\t\tlong j = i + cl - 1; \n\t\t\tif (str[i] == str[j] && cl == 2) \n\t\t\t\tL[i][j] = 2; \n\t\t\telse if (str[i] == str[j]) \n\t\t\t\tL[i][j] = L[i + 1][j - 1] + 2; \n\t\t\telse\n\t\t\t\tL[i][j] = max(L[i][j - 1], L[i + 1][j]); \n\t\t} \n\t} \n\t\n\treturn L[0][n - 1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124147,
      "stdout": "",
      "stderr": "/tmp/tmp3_skbv_6.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmp3_skbv_6.d(26): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3_skbv_6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{\n\tlong n = str.length;\n\tlong[][] dp = new long[n][n];\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tdp[i][i] = 1;\n\t}\n\tfor (long i = 2; i <= n; i++) \n\t{\n\t\tfor (long j = 0; j < n - i + 1; j++) \n\t\t{\n\t\t\tlong k = i + j - 1;\n\t\t\tif (str[j] == str[k] && i == 2) \n\t\t\t{\n\t\t\t\tdp[j][k] = 2;\n\t\t\t} \n\t\t\telse if (str[j] == str[k]) \n\t\t\t{\n\t\t\t\tdp[j][k] = dp[j + 1][k - 1] + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tdp[j][k] = max(dp[j][k - 1], dp[j + 1][k]);\n\t\t\t}\n\t\t}\n\t}\n\treturn dp[0][n - 1];\n}\nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124147,
      "stdout": "",
      "stderr": "/tmp/tmp3urz5ef5.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmp3urz5ef5.d(31): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3urz5ef5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{\n\tlong n = str.length;\n\tlong[][] L = new long[n][n];\n\t\n\t// Strings of length 1 are palindrome of length 1\n\tforeach(i; 0 .. n)\n\t\tL[i][i] = 1;\n\t\t\n\tforeach(sublen; 2 .. n + 1)\n\t{\n\t\tforeach(i; 0 .. n - sublen + 1)\n\t\t{\n\t\t\tlong j = i + sublen - 1;\n\t\t\tif(str[i] == str[j] && sublen == 2)\n\t\t\t\tL[i][j] = 2;\n\t\t\telse if(str[i] == str[j])\n\t\t\t\tL[i][j] = L[i + 1][j - 1] + 2;\n\t\t\telse\n\t\t\t\tL[i][j] = max(L[i][j - 1], L[i + 1][j]);\n\t\t}\n\t}\n\treturn L[0][n - 1];\n}\nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124147,
      "stdout": "",
      "stderr": "/tmp/tmp9uil4qeq.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmp9uil4qeq.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9uil4qeq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n\tlong n = str.length; \n\tlong i, j, cl; \n\tlong L[][] = new long[n][n]; // Create a table to store results of subproblems \n\t\n\t// Strings of length 1 are palindrome of lentgh 1 \n\tfor (i = 0; i < n; i++) \n\t\tL[i][i] = 1; \n\t\t\n\t// Build the table. Note that the lower diagonal values of table are \n\t// useless and not filled in the process. The values are filled in a \n\t// manner similar to Matrix Chain Multiplication DP solution (See \n\t// https://www.geeksforgeeks.org/dynamic-programming-set-8-matrix-chain-multiplication/ \n\t// cl is length of substring \n\tfor (cl=2; cl<=n; cl++) \n\t{ \n\t\tfor (i=0; i<n-cl+1; i++) \n\t\t{ \n\t\t\tj = i+cl-1; \n\t\t\tif (str[i] == str[j] && cl == 2) \n\t\t\t\tL[i][j] = 2; \n\t\t\telse if (str[i] == str[j]) \n\t\t\t\tL[i][j] = L[i+1][j-1] + 2; \n\t\t\telse\n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \n\t\t} \n\t} \n\t\n\treturn L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124147,
      "stdout": "",
      "stderr": "/tmp/tmplk7dmtjm.d(12): Deprecation: instead of C-style syntax, use D-style syntax `long[][] L`\n/tmp/tmplk7dmtjm.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmplk7dmtjm.d(33): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplk7dmtjm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n\tlong n = str.length; \n\tlong[][] L = new long[n][n]; \n\t\n\tfor (long i = 0; i < n; i++) \n\t\tL[i][i] = 1; \n\t\n\tfor (long cl = 2; cl <= n; cl++) \n\t{ \n\t\tfor (long i = 0; i < n - cl + 1; i++) \n\t\t{ \n\t\t\tlong j = i + cl - 1; \n\t\t\tif (str[i] == str[j] && cl == 2) \n\t\t\t\tL[i][j] = 2; \n\t\t\telse if (str[i] == str[j]) \n\t\t\t\tL[i][j] = L[i + 1][j - 1] + 2; \n\t\t\telse\n\t\t\t\tL[i][j] = max(L[i][j - 1], L[i + 1][j]); \n\t\t} \n\t} \n\t\n\treturn L[0][n - 1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124147,
      "stdout": "",
      "stderr": "/tmp/tmp3_skbv_6.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmp3_skbv_6.d(26): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3_skbv_6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    long n = str.length; \n    long i, j, cl; \n    long L[][] = new long[n][n]; \n  \n    for (i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    for (cl=2; cl<=n; cl++) \n    { \n        for (i=0; i<n-cl+1; i++) \n        { \n            j = i+cl-1; \n            if (str[i] == str[j] && cl == 2) \n                L[i][j] = 2; \n            else if (str[i] == str[j]) \n                L[i][j] = L[i+1][j-1] + 2; \n            else\n                L[i][j] = max(L[i][j-1], L[i+1][j]); \n        } \n    } \n  \n    return L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124147,
      "stdout": "",
      "stderr": "/tmp/tmpwmft_4uw.d(12): Deprecation: instead of C-style syntax, use D-style syntax `long[][] L`\n/tmp/tmpwmft_4uw.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmpwmft_4uw.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwmft_4uw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    int n = str.length; \n    int i, j, cl; \n    auto L = new int[n, n]; \n  \n    // Strings of length 1 are palindrome of lentgh 1 \n    for (i = 0; i < n; i++) \n        L[i, i] = 1; \n  \n    // Build the table. Note that the lower diagonal values of table are \n    // useless and not filled in the process. The values are filled in a \n    // manner similar to Matrix Chain Multiplication DP solution (See \n    // http://www.geeksforgeeks.org/archives/15553). cl is length of \n    // substring \n    for (cl = 2; cl <= n; cl++) \n    { \n        for (i = 0; i < n - cl + 1; i++) \n        { \n            j = i + cl - 1; \n            if (str[i] == str[j] && cl == 2) \n                L[i, j] = 2; \n            else if (str[i] == str[j]) \n                L[i, j] = L[i + 1, j - 1] + 2; \n            else\n                L[i, j] = max(L[i, j - 1], L[i + 1, j]); \n        } \n    } \n  \n    return L[0, n - 1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124147,
      "stdout": "",
      "stderr": "/tmp/tmp0fbj8y4a.d(12): Error: found `,` when expecting `]`\n/tmp/tmp0fbj8y4a.d(12): Error: semicolon expected following auto declaration, not `n`\n/tmp/tmp0fbj8y4a.d(12): Error: found `]` when expecting `;` following statement\n/tmp/tmp0fbj8y4a.d(12): Deprecation: use `{ }` for an empty statement, not `;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0fbj8y4a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{\n\tint n = str.length;\n\tint[][] L = new int[n][n];\n\t\n\tfor (int i = 0; i < n; i++)\n\t\tL[i][i] = 1;\n\t\n\tfor (int cl = 2; cl <= n; cl++) \n\t{\n\t\tfor (int i = 0; i < n - cl + 1; i++) \n\t\t{\n\t\t\tint j = i + cl - 1;\n\t\t\tif (str[i] == str[j] && cl == 2)\n\t\t\t\tL[i][j] = 2;\n\t\t\telse if (str[i] == str[j])\n\t\t\t\tL[i][j] = L[i + 1][j - 1] + 2;\n\t\t\telse\n\t\t\t\tL[i][j] = max(L[i][j - 1], L[i + 1][j]);\n\t\t}\n\t}\n\t\n\treturn L[0][n - 1];\n}\nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124147,
      "stdout": "",
      "stderr": "/tmp/tmpyc_dhhsk.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmpyc_dhhsk.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmpyc_dhhsk.d(26): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyc_dhhsk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{\n\tlong n = str.length;\n\tlong[][] L = new long[n][n];\n\t\n\tforeach(i; 0 .. n)\n\t\tL[i][i] = 1;\n\t\n\tforeach(sublen; 2 .. n + 1)\n\t{\n\t\tforeach(i; 0 .. n - sublen + 1)\n\t\t{\n\t\t\tlong j = i + sublen - 1;\n\t\t\tif(str[i] == str[j] && sublen == 2)\n\t\t\t\tL[i][j] = 2;\n\t\t\telse if(str[i] == str[j])\n\t\t\t\tL[i][j] = L[i + 1][j - 1] + 2;\n\t\t\telse\n\t\t\t\tL[i][j] = max(L[i][j - 1], L[i + 1][j]);\n\t\t}\n\t}\n\t\n\treturn L[0][n - 1];\n}\nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124147,
      "stdout": "",
      "stderr": "/tmp/tmp2fj7vxph.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmp2fj7vxph.d(26): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2fj7vxph.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    long n = str.length; \n    long i, j, cl; \n    long L[][] = new long[n][n];\n    for (i = 0; i < n; i++) \n        L[i][i] = 1; \n    for (cl=2; cl<=n; cl++) \n    { \n        for (i=0; i<n-cl+1; i++) \n        { \n            j = i+cl-1; \n            if (str[i] == str[j] && cl == 2) \n                L[i][j] = 2; \n            else if (str[i] == str[j]) \n                L[i][j] = L[i+1][j-1] + 2; \n            else\n                L[i][j] = max(L[i][j-1], L[i+1][j]); \n        } \n    } \n    return L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124147,
      "stdout": "",
      "stderr": "/tmp/tmpluefvx3l.d(12): Deprecation: instead of C-style syntax, use D-style syntax `long[][] L`\n/tmp/tmpluefvx3l.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmpluefvx3l.d(25): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpluefvx3l.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{\n\tlong n = str.length;\n\tlong[][] dp = new long[n][n];\n\t\n\tforeach(i; 0 .. n)\n\t{\n\t\tdp[i][i] = 1;\n\t}\n\t\n\tforeach(i; 0 .. n)\n\t{\n\t\tforeach(j; i + 1 .. n)\n\t\t{\n\t\t\tif(str[i] == str[j])\n\t\t\t{\n\t\t\t\tdp[i][j] = dp[i + 1][j - 1] + 2;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdp[i][j] = max(dp[i + 1][j], dp[i][j - 1]);\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn dp[0][n - 1];\n}\nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124147,
      "stdout": "",
      "stderr": "/tmp/tmpsbg01ffg.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmpsbg01ffg.d(28): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsbg01ffg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    long n = str.length; \n    long i, j, cl; \n    long L[n][n];  \n  \n    for (i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    for (cl=2; cl<=n; cl++) \n    { \n        for (i=0; i<n-cl+1; i++) \n        { \n            j = i+cl-1; \n            if (str[i] == str[j] && cl == 2) \n               L[i][j] = 2; \n            else if (str[i] == str[j]) \n               L[i][j] = L[i+1][j-1] + 2; \n            else\n               L[i][j] = max(L[i][j-1], L[i+1][j]); \n        } \n    } \n  \n    return L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124147,
      "stdout": "",
      "stderr": "/tmp/tmpuplxav9v.d(12): Deprecation: instead of C-style syntax, use D-style syntax `long[n][n] L`\n/tmp/tmpuplxav9v.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmpuplxav9v.d(12): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuplxav9v.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    long n = str.length; \n    long i, j, cl; \n    auto L = new long[n][n]; \n  \n    // Strings of length 1 are palindrome of lentgh 1 \n    for (i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    // Build the table. Note that the lower diagonal values of table are \n    // useless and not filled in the process. The values are filled in a \n    // manner similar to Matrix Chain Multiplication DP solution (See \n    // https://www.geeksforgeeks.org/dynamic-programming-set-8-matrix-chain-multiplication/ \n    // cl is length of substring \n    for (cl=2; cl<=n; cl++) \n    { \n        for (i=0; i<n-cl+1; i++) \n        { \n            j = i+cl-1; \n            if (str[i] == str[j] && cl == 2) \n               L[i][j] = 2; \n            else if (str[i] == str[j]) \n               L[i][j] = L[i+1][j-1] + 2; \n            else\n               L[i][j] = max(L[i][j-1], L[i+1][j]); \n        } \n    } \n  \n    return L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124148,
      "stdout": "",
      "stderr": "/tmp/tmp5_barz7g.d(12): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5_barz7g.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n   int n = str.length; \n   int i, j, cl; \n   int L[][] = new int[n][n];  \n  \n   for (i = 0; i < n; i++) \n      L[i][i] = 1; \n  \n    for (cl=2; cl<=n; cl++) \n    { \n        for (i=0; i<n-cl+1; i++) \n        { \n            j = i+cl-1; \n            if (str[i] == str[j] && cl == 2) \n               L[i][j] = 2; \n            else if (str[i] == str[j]) \n               L[i][j] = L[i+1][j-1] + 2; \n            else\n               L[i][j] = max(L[i][j-1], L[i+1][j]); \n        } \n    } \n  \n    return L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124147,
      "stdout": "",
      "stderr": "/tmp/tmppm13l2pi.d(12): Deprecation: instead of C-style syntax, use D-style syntax `int[][] L`\n/tmp/tmppm13l2pi.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmppm13l2pi.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmppm13l2pi.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppm13l2pi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{\n\tint n = str.length;\n\tint[][] dp = new int[n][n];\n\tfor (int i = 0; i < n; i++)\n\t\tdp[i][i] = 1;\n\tfor (int len = 2; len <= n; len++) \n\t{\n\t\tfor (int i = 0; i < n - len + 1; i++) \n\t\t{\n\t\t\tint j = i + len - 1;\n\t\t\tif (str[i] == str[j] && len == 2)\n\t\t\t\tdp[i][j] = 2;\n\t\t\telse if (str[i] == str[j])\n\t\t\t\tdp[i][j] = dp[i + 1][j - 1] + 2;\n\t\t\telse\n\t\t\t\tdp[i][j] = max(dp[i][j - 1], dp[i + 1][j]);\n\t\t}\n\t}\n\treturn dp[0][n - 1];\n}\nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124147,
      "stdout": "",
      "stderr": "/tmp/tmpgzgzb4jv.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmpgzgzb4jv.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmpgzgzb4jv.d(24): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgzgzb4jv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    long n = str.length; \n    long[][] L = new long[n][n]; \n  \n    for (long i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    for (long cl = 2; cl <= n; cl++) { \n        for (long i = 0; i < n - cl + 1; i++) { \n            long j = i + cl - 1; \n            if (str[i] == str[j] && cl == 2) \n                L[i][j] = 2; \n            else if (str[i] == str[j]) \n                L[i][j] = L[i + 1][j - 1] + 2; \n            else\n                L[i][j] = max(L[i][j - 1], L[i + 1][j]); \n        } \n    } \n  \n    return L[0][n - 1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124148,
      "stdout": "",
      "stderr": "/tmp/tmpxdgfmz70.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmpxdgfmz70.d(24): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxdgfmz70.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n\tint n = str.length; \n\tint i, j, cl; \n\tint L[n][n]; // Create a table to store results of subproblems \n\t\n\t// Strings of length 1 are palindrome of lentgh 1 \n\tfor (i = 0; i < n; i++) \n\t\tL[i][i] = 1; \n\t\t\n\t// Build the table. Note that the lower diagonal values of table are \n\t// useless and not filled in the process. The values are filled in a \n\t// manner similar to Matrix Chain Multiplication DP solution (See \n\t// http://www.geeksforgeeks.org/archives/15553). cl is length of \n\t// substring \n\tfor (cl=2; cl<=n; cl++) \n\t{ \n\t\tfor (i=0; i<n-cl+1; i++) \n\t\t{ \n\t\t\tj = i+cl-1; \n\t\t\tif (str[i] == str[j] && cl == 2) \n\t\t\t\tL[i][j] = 2; \n\t\t\telse if (str[i] == str[j]) \n\t\t\t\tL[i][j] = L[i+1][j-1] + 2; \n\t\t\telse\n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \n\t\t} \n\t} \n\t\n\treturn L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124147,
      "stdout": "",
      "stderr": "/tmp/tmp0f1jij81.d(12): Deprecation: instead of C-style syntax, use D-style syntax `int[n][n] L`\n/tmp/tmp0f1jij81.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmp0f1jij81.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmp0f1jij81.d(12): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0f1jij81.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{\n\tlong n = str.length;\n\tlong[][] L = new long[n][n];\n\t\n\tfor (long i = 0; i < n; i++)\n\t\tL[i][i] = 1;\n\t\n\tfor (long cl = 2; cl <= n; cl++) \n\t{\n\t\tfor (long i = 0; i < n - cl + 1; i++) \n\t\t{\n\t\t\tlong j = i + cl - 1;\n\t\t\tif (str[i] == str[j] && cl == 2)\n\t\t\t\tL[i][j] = 2;\n\t\t\telse if (str[i] == str[j])\n\t\t\t\tL[i][j] = L[i + 1][j - 1] + 2;\n\t\t\telse\n\t\t\t\tL[i][j] = max(L[i][j - 1], L[i + 1][j]);\n\t\t}\n\t}\n\t\n\treturn L[0][n - 1];\n}\nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124148,
      "stdout": "",
      "stderr": "/tmp/tmpiok4yh77.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmpiok4yh77.d(26): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiok4yh77.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{\n\tlong n = str.length;\n\tlong[][] L = new long[n][n];\n\t\n\tforeach(i; 0 .. n)\n\t\tL[i][i] = 1;\n\t\n\tforeach(cl; 2 .. n + 1)\n\t{\n\t\tforeach(i; 0 .. n - cl + 1)\n\t\t{\n\t\t\tlong j = i + cl - 1;\n\t\t\tif(str[i] == str[j] && cl == 2)\n\t\t\t\tL[i][j] = 2;\n\t\t\telse if(str[i] == str[j])\n\t\t\t\tL[i][j] = L[i + 1][j - 1] + 2;\n\t\t\telse\n\t\t\t\tL[i][j] = max(L[i][j - 1], L[i + 1][j]);\n\t\t}\n\t}\n\t\n\treturn L[0][n - 1];\n}\nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124147,
      "stdout": "",
      "stderr": "/tmp/tmpieswiyd3.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmpieswiyd3.d(26): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpieswiyd3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n\tlong n = str.length; \n\tlong i, j, cl; \n\tauto L = new int[n][n]; \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124147,
      "stdout": "",
      "stderr": "/tmp/tmp407pim7a.d(13): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp407pim7a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{\n\tint n = str.length;\n\tint[][] dp = new int[n][n];\n\t\n\tforeach(i; 0 .. n)\n\t\tdp[i][i] = 1;\n\t\n\tforeach(sublen; 1 .. n)\n\t{\n\t\tforeach(i; 0 .. n - sublen)\n\t\t{\n\t\t\tint j = i + sublen;\n\t\t\tif(str[i] == str[j])\n\t\t\t\tdp[i][j] = dp[i + 1][j - 1] + 2;\n\t\t\telse\n\t\t\t\tdp[i][j] = max(dp[i + 1][j], dp[i][j - 1]);\n\t\t}\n\t}\n\treturn dp[0][n - 1];\n}\nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124148,
      "stdout": "",
      "stderr": "/tmp/tmpu6ls4mzt.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmpu6ls4mzt.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmpu6ls4mzt.d(24): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu6ls4mzt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n\tlong n = str.length; \n\tlong i, j, cl; \n\tlong L[][] = new long[n][n]; \n\t\n\tfor (i = 0; i < n; i++) \n\t\tL[i][i] = 1; \n\t\n\tfor (cl=2; cl<=n; cl++) \n\t{ \n\t\tfor (i=0; i<n-cl+1; i++) \n\t\t{ \n\t\t\tj = i+cl-1; \n\t\t\tif (str[i] == str[j] && cl == 2) \n\t\t\t\tL[i][j] = 2; \n\t\t\telse if (str[i] == str[j]) \n\t\t\t\tL[i][j] = L[i+1][j-1] + 2; \n\t\t\telse\n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \n\t\t} \n\t} \n\t\n\treturn L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "/tmp/tmpxju_urg9.d(12): Deprecation: instead of C-style syntax, use D-style syntax `long[][] L`\n/tmp/tmpxju_urg9.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmpxju_urg9.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxju_urg9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n\tlong n = str.length; \n\tlong i, j, cl; \n\tlong L[][] = new long[n][n]; // Create a table to store results of subproblems \n\t\n\t// Strings of length 1 are palindrome of lentgh 1 \n\tfor (i = 0; i < n; i++) \n\t\tL[i][i] = 1; \n\t\t\n\t// Build the table. Note that the lower diagonal values of table are \n\t// useless and not filled in the process. The values are filled in a \n\t// manner similar to Matrix Chain Multiplication DP solution (See \n\t// http://www.geeksforgeeks.org/archives/15553). cl is length of \n\t// substring \n\tfor (cl=2; cl<=n; cl++) \n\t{ \n\t\tfor (i=0; i<n-cl+1; i++) \n\t\t{ \n\t\t\tj = i+cl-1; \n\t\t\tif (str[i] == str[j] && cl == 2) \n\t\t\t\tL[i][j] = 2; \n\t\t\telse if (str[i] == str[j]) \n\t\t\t\tL[i][j] = L[i+1][j-1] + 2; \n\t\t\telse\n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \n\t\t} \n\t} \n\t\n\treturn L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124147,
      "stdout": "",
      "stderr": "/tmp/tmp0jf9_l22.d(12): Deprecation: instead of C-style syntax, use D-style syntax `long[][] L`\n/tmp/tmp0jf9_l22.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmp0jf9_l22.d(33): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0jf9_l22.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    long n = str.length; \n    long i, j, cl; \n    long L[n][n];  \n  \n    for (i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    for (cl=2; cl<=n; cl++) \n    { \n        for (i=0; i<n-cl+1; i++) \n        { \n            j = i+cl-1; \n            if (str[i] == str[j] && cl == 2) \n                L[i][j] = 2; \n            else if (str[i] == str[j]) \n                L[i][j] = L[i+1][j-1] + 2; \n            else\n                L[i][j] = max(L[i][j-1], L[i+1][j]); \n        } \n    } \n  \n    return L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124148,
      "stdout": "",
      "stderr": "/tmp/tmpqnri5eoh.d(12): Deprecation: instead of C-style syntax, use D-style syntax `long[n][n] L`\n/tmp/tmpqnri5eoh.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmpqnri5eoh.d(12): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqnri5eoh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n\tint n = str.length; \n\tint i, j, cl; \n\tint L[][] = new int[n][n];  \n\tfor (i = 0; i < n; i++) \n\t\tL[i][i] = 1; \n\tfor (cl=2; cl<=n; cl++) \n\t{ \n\t\tfor (i=0; i<n-cl+1; i++) \n\t\t{ \n\t\t\tj = i+cl-1; \n\t\t\tif (str[i] == str[j] && cl == 2) \n\t\t\t\tL[i][j] = 2; \n\t\t\telse if (str[i] == str[j]) \n\t\t\t\tL[i][j] = L[i+1][j-1] + 2; \n\t\t\telse\n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \n\t\t} \n\t} \n\treturn L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124147,
      "stdout": "",
      "stderr": "/tmp/tmpkzxug3wm.d(12): Deprecation: instead of C-style syntax, use D-style syntax `int[][] L`\n/tmp/tmpkzxug3wm.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmpkzxug3wm.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmpkzxug3wm.d(25): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkzxug3wm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n\tlong n = str.length; \n\tlong i, j, cl; \n\tlong L[n][n]; \n\t\n\tfor (i = 0; i < n; i++) \n\t\tL[i][i] = 1; \n\t\t\n\tfor (cl=2; cl<=n; cl++) \n\t{ \n\t\tfor (i=0; i<n-cl+1; i++) \n\t\t{ \n\t\t\tj = i+cl-1; \n\t\t\tif (str[i] == str[j] && cl == 2) \n\t\t\t\tL[i][j] = 2; \n\t\t\telse if (str[i] == str[j]) \n\t\t\t\tL[i][j] = L[i+1][j-1] + 2; \n\t\t\telse\n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \n\t\t} \n\t} \n\t\n\treturn L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124148,
      "stdout": "",
      "stderr": "/tmp/tmpm1ij9b77.d(12): Deprecation: instead of C-style syntax, use D-style syntax `long[n][n] L`\n/tmp/tmpm1ij9b77.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmpm1ij9b77.d(12): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm1ij9b77.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n\tlong n = str.length; \n\tlong i, j, cl; \n\tlong L[n][n];\n\t\n\tfor (i = 0; i < n; i++) \n\t\tL[i][i] = 1; \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124148,
      "stdout": "",
      "stderr": "/tmp/tmpvpa7c9f1.d(12): Deprecation: instead of C-style syntax, use D-style syntax `long[n][n] L`\n/tmp/tmpvpa7c9f1.d(16): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvpa7c9f1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{\n\tint n = str.length;\n\tint[][] dp = new int[n][n];\n\t\n\tfor (int i = 0; i < n; i++) {\n\t\tdp[i][i] = 1;\n\t}\n\t\n\tfor (int len = 2; len <= n; len++) {\n\t\tfor (int i = 0; i < n - len + 1; i++) {\n\t\t\tint j = i + len - 1;\n\t\t\tif (str[i] == str[j] && len == 2) {\n\t\t\t\tdp[i][j] = 2;\n\t\t\t} else if (str[i] == str[j]) {\n\t\t\t\tdp[i][j] = dp[i + 1][j - 1] + 2;\n\t\t\t} else {\n\t\t\t\tdp[i][j] = max(dp[i + 1][j], dp[i][j - 1]);\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn dp[0][n - 1];\n}\nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124148,
      "stdout": "",
      "stderr": "/tmp/tmpvvhs7tem.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmpvvhs7tem.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmpvvhs7tem.d(25): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvvhs7tem.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n\tlong n = str.length; \n\tlong[][] L = new long[n][n]; \n\t\n\tforeach (i; 0 .. n) \n\t\tL[i][i] = 1; \n\t\n\tforeach (cl; 2 .. n + 1) \n\t{ \n\t\tforeach (i; 0 .. n - cl + 1) \n\t\t{ \n\t\t\tlong j = i + cl - 1; \n\t\t\tif (str[i] == str[j] && cl == 2) \n\t\t\t\tL[i][j] = 2; \n\t\t\telse if (str[i] == str[j]) \n\t\t\t\tL[i][j] = L[i + 1][j - 1] + 2; \n\t\t\telse\n\t\t\t\tL[i][j] = max(L[i][j - 1], L[i + 1][j]); \n\t\t} \n\t} \n\t\n\treturn L[0][n - 1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124148,
      "stdout": "",
      "stderr": "/tmp/tmppwl4wo5z.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmppwl4wo5z.d(26): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppwl4wo5z.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n\t// Create a table to store results of subproblems \n\tlong[][] dp = new long[str.length][str.length]; \n\t\n\t// Strings of length 1 are palindrome of length 1 \n\tfor (long i = 0; i < str.length; i++) \n\t\tdp[i][i] = 1; \n\t\n\t// Build the table. Note that the lower diagonal values of table are \n\t// useless and not filled in the process. The values are filled in a \n\t// manner similar to Matrix Chain Multiplication DP solution (See \n\t// https://www.geeksforgeeks.org/dynamic-programming-set-8-matrix-chain-multiplication/ \n\t// cl is length of substring \n\tfor (long cl = 2; cl <= str.length; cl++) \n\t{ \n\t\tfor (long i = 0; i < str.length - cl + 1; i++) \n\t\t{ \n\t\t\tlong j = i + cl - 1; \n\t\t\tif (str[i] == str[j] && cl == 2) \n\t\t\t\tdp[i][j] = 2; \n\t\t\telse if (str[i] == str[j]) \n\t\t\t\tdp[i][j] = dp[i + 1][j - 1] + 2; \n\t\t\telse\n\t\t\t\tdp[i][j] = max(dp[i][j - 1], dp[i + 1][j]); \n\t\t} \n\t} \n\t\n\treturn dp[0][str.length - 1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124148,
      "stdout": "",
      "stderr": "/tmp/tmp3w07j2qk.d(11): Error: variable `str` cannot be read at compile time\n/tmp/tmp3w07j2qk.d(32): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3w07j2qk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n\tlong n = str.length; \n\tlong[][] L = new long[n][n]; \n\t\n\tfor (long i = 0; i < n; i++) \n\t\tL[i][i] = 1; \n\t\n\tfor (long cl = 2; cl <= n; cl++) \n\t{ \n\t\tfor (long i = 0; i < n - cl + 1; i++) \n\t\t{ \n\t\t\tlong j = i + cl - 1; \n\t\t\tif (str[i] == str[j] && cl == 2) \n\t\t\t\tL[i][j] = 2; \n\t\t\telse if (str[i] == str[j]) \n\t\t\t\tL[i][j] = L[i + 1][j - 1] + 2; \n\t\t\telse\n\t\t\t\tL[i][j] = max(L[i][j - 1], L[i + 1][j]); \n\t\t} \n\t} \n\t\n\treturn L[0][n - 1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124147,
      "stdout": "",
      "stderr": "/tmp/tmp3_skbv_6.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmp3_skbv_6.d(26): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3_skbv_6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{\n\tlong n = str.length;\n\tlong[][] L = new long[n][n];\n\t\n\tforeach(i; 0 .. n)\n\t\tL[i][i] = 1;\n\t\n\tforeach(sublen; 2 .. n + 1)\n\t{\n\t\tforeach(i; 0 .. n - sublen + 1)\n\t\t{\n\t\t\tlong j = i + sublen - 1;\n\t\t\tif(str[i] == str[j] && sublen == 2)\n\t\t\t\tL[i][j] = 2;\n\t\t\telse if(str[i] == str[j])\n\t\t\t\tL[i][j] = L[i + 1][j - 1] + 2;\n\t\t\telse\n\t\t\t\tL[i][j] = max(L[i][j - 1], L[i + 1][j]);\n\t\t}\n\t}\n\t\n\treturn L[0][n - 1];\n}\nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124147,
      "stdout": "",
      "stderr": "/tmp/tmp2fj7vxph.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmp2fj7vxph.d(26): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2fj7vxph.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{\n\tint n = str.length;\n\tint[][] dp = new int[n][n];\n\t\n\tfor (int i = 0; i < n; i++)\n\t\tdp[i][i] = 1;\n\t\n\tfor (int len = 2; len <= n; len++) {\n\t\tfor (int i = 0; i < n - len + 1; i++) {\n\t\t\tint j = i + len - 1;\n\t\t\tif (str[i] == str[j] && len == 2)\n\t\t\t\tdp[i][j] = 2;\n\t\t\telse if (str[i] == str[j])\n\t\t\t\tdp[i][j] = dp[i + 1][j - 1] + 2;\n\t\t\telse\n\t\t\t\tdp[i][j] = max(dp[i][j - 1], dp[i + 1][j]);\n\t\t}\n\t}\n\t\n\treturn dp[0][n - 1];\n}\nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124148,
      "stdout": "",
      "stderr": "/tmp/tmpgooqp6tg.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmpgooqp6tg.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmpgooqp6tg.d(24): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgooqp6tg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n\tint n = str.length; \n\tint i, j, cl; \n\tint L[][] = new int[n][n]; \n\t\n\tfor (i = 0; i < n; i++) \n\t\tL[i][i] = 1; \n\t\n\tfor (cl=2; cl<=n; cl++) \n\t{ \n\t\tfor (i=0; i<n-cl+1; i++) \n\t\t{ \n\t\t\tj = i+cl-1; \n\t\t\tif (str[i] == str[j] && cl == 2) \n\t\t\t\tL[i][j] = 2; \n\t\t\telse if (str[i] == str[j]) \n\t\t\t\tL[i][j] = L[i+1][j-1] + 2; \n\t\t\telse\n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \n\t\t} \n\t} \n\t\n\treturn L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "/tmp/tmp1bxtxzuc.d(12): Deprecation: instead of C-style syntax, use D-style syntax `int[][] L`\n/tmp/tmp1bxtxzuc.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmp1bxtxzuc.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmp1bxtxzuc.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1bxtxzuc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n\tlong n = str.length; \n\tlong[][] L = new long[n][n]; \n\t\n\t// Strings of length 1 are palindrome of length 1 \n\tforeach (i; 0 .. n) \n\t\tL[i][i] = 1; \n\t\n\t// Build the table. Note that the lower diagonal values of table are \n\t// useless and not filled in the process. The values are filled in a \n\t// manner similar to Matrix Chain Multiplication DP solution (See \n\t// http://www.geeksforgeeks.org/archives/15553). cl is length of \n\t// substring \n\tforeach (cl; 2 .. n + 1) \n\t{ \n\t\tforeach (i; 0 .. n - cl + 1) \n\t\t{ \n\t\t\tlong j = i + cl - 1; \n\t\t\tif (str[i] == str[j] && cl == 2) \n\t\t\t\tL[i][j] = 2; \n\t\t\telse if (str[i] == str[j]) \n\t\t\t\tL[i][j] = L[i + 1][j - 1] + 2; \n\t\t\telse\n\t\t\t\tL[i][j] = max(L[i][j - 1], L[i + 1][j]); \n\t\t} \n\t} \n\t\n\treturn L[0][n - 1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124148,
      "stdout": "",
      "stderr": "/tmp/tmpg_x7txz4.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmpg_x7txz4.d(32): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg_x7txz4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    long n = str.length; \n    long[][] L = new long[n][n]; \n  \n    // Strings of length 1 are palindrome of lentgh 1 \n    for (long i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    // Build the table. Note that the lower diagonal values of table are \n    // useless and not filled in the process. The values are filled in a \n    // manner similar to Matrix Chain Multiplication DP solution (See \n    // http://www.geeksforgeeks.org/archives/15553). clang-format off\n    for (long cl = 2; cl <= n; cl++) \n    { \n        for (long i = 0; i < n - cl + 1; i++) \n        { \n            long j = i + cl - 1; \n            if (str[i] == str[j] && cl == 2) \n                L[i][j] = 2; \n            else if (str[i] == str[j]) \n                L[i][j] = L[i + 1][j - 1] + 2; \n            else\n                L[i][j] = max(L[i][j - 1], L[i + 1][j]); \n        } \n    } \n  \n    return L[0][n - 1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124148,
      "stdout": "",
      "stderr": "/tmp/tmp1xkb6yxb.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmp1xkb6yxb.d(31): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1xkb6yxb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n\tint n = str.length; \n\tint i, j, cl; \n\tint L[][] = new int[n][n]; \n\t\n\tfor (i = 0; i < n; i++) \n\t\tL[i][i] = 1; \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124147,
      "stdout": "",
      "stderr": "/tmp/tmpbn_b9cl5.d(12): Deprecation: instead of C-style syntax, use D-style syntax `int[][] L`\n/tmp/tmpbn_b9cl5.d(16): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbn_b9cl5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n\tlong n = str.length; \n\tlong i, j, cl; \n\tauto L = new long[n][n]; \n\t\n\tfor (i = 0; i < n; i++) \n\t\tL[i][i] = 1; \n\t\n\tfor (cl=2; cl<=n; cl++) \n\t{ \n\t\tfor (i=0; i<n-cl+1; i++) \n\t\t{ \n\t\t\tj = i+cl-1; \n\t\t\tif (str[i] == str[j] && cl == 2) \n\t\t\t\tL[i][j] = 2; \n\t\t\telse if (str[i] == str[j]) \n\t\t\t\tL[i][j] = L[i+1][j-1] + 2; \n\t\t\telse\n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \n\t\t} \n\t} \n\t\n\treturn L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124147,
      "stdout": "",
      "stderr": "/tmp/tmpgrbp3fmv.d(12): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgrbp3fmv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n\tlong n = str.length; \n\tlong i, j, cl; \n\tauto L = new long[n][n]; \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124147,
      "stdout": "",
      "stderr": "/tmp/tmp1ob2h9gd.d(13): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1ob2h9gd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n\tint n = str.length; \n\tint i, j, cl; \n\tint L[][] = new int[n][n]; // Create a table to store results of subproblems \n\t\n\t// Strings of length 1 are palindrome of lentgh 1 \n\tfor (i = 0; i < n; i++) \n\t\tL[i][i] = 1; \n\t\t\n\t// Build the table. Note that the lower diagonal values of table are \n\t// useless and not filled in the process. The values are filled in a \n\t// manner similar to Matrix Chain Multiplication DP solution (See \n\t// https://www.geeksforgeeks.org/dynamic-programming-set-8-matrix-chain-multiplication/ \n\t// cl is length of substring \n\tfor (cl=2; cl<=n; cl++) \n\t{ \n\t\tfor (i=0; i<n-cl+1; i++) \n\t\t{ \n\t\t\tj = i+cl-1; \n\t\t\tif (str[i] == str[j] && cl == 2) \n\t\t\t\tL[i][j] = 2; \n\t\t\telse if (str[i] == str[j]) \n\t\t\t\tL[i][j] = L[i+1][j-1] + 2; \n\t\t\telse\n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \n\t\t} \n\t} \n\t\n\treturn L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124148,
      "stdout": "",
      "stderr": "/tmp/tmpzglxz820.d(12): Deprecation: instead of C-style syntax, use D-style syntax `int[][] L`\n/tmp/tmpzglxz820.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmpzglxz820.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmpzglxz820.d(33): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzglxz820.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n\tlong n = str.length; \n\tlong i, j, cl; \n\tauto L = new long[n][n]; \n\t\n\tfor (i = 0; i < n; i++) \n\t\tL[i][i] = 1; \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124148,
      "stdout": "",
      "stderr": "/tmp/tmpwb52qo97.d(16): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwb52qo97.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    long n = str.length; \n    long i, j, cl; \n    long L[][] = new long[n][n]; \n  \n    for (i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    for (cl=2; cl<=n; cl++) \n    { \n        for (i=0; i<n-cl+1; i++) \n        { \n            j = i+cl-1; \n            if (str[i] == str[j] && cl == 2) \n                L[i][j] = 2; \n            else if (str[i] == str[j]) \n                L[i][j] = L[i+1][j-1] + 2; \n            else\n                L[i][j] = max(L[i][j-1], L[i+1][j]); \n        } \n    } \n  \n    return L[0][n-1]; \n} \n  \n// Driver program \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124148,
      "stdout": "",
      "stderr": "/tmp/tmp43rcnv9f.d(12): Deprecation: instead of C-style syntax, use D-style syntax `long[][] L`\n/tmp/tmp43rcnv9f.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmp43rcnv9f.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp43rcnv9f.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    long n = str.length; \n    long i, j, cl; \n    long L[n][n]; \n  \n    for (i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    for (cl=2; cl<=n; cl++) \n    { \n        for (i=0; i<n-cl+1; i++) \n        { \n            j = i+cl-1; \n            if (str[i] == str[j] && cl == 2) \n                L[i][j] = 2; \n            else if (str[i] == str[j]) \n                L[i][j] = L[i+1][j-1] + 2; \n            else\n                L[i][j] = max(L[i][j-1], L[i+1][j]); \n        } \n    } \n  \n    return L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124148,
      "stdout": "",
      "stderr": "/tmp/tmp3cva65_z.d(12): Deprecation: instead of C-style syntax, use D-style syntax `long[n][n] L`\n/tmp/tmp3cva65_z.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmp3cva65_z.d(12): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3cva65_z.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n\tlong n = str.length; \n\tlong[][] L = new long[n][n]; \n\t\n\tfor (long i = 0; i < n; i++) \n\t\tL[i][i] = 1; \n\t\n\tfor (long cl = 2; cl <= n; cl++) \n\t{ \n\t\tfor (long i = 0; i < n - cl + 1; i++) \n\t\t{ \n\t\t\tlong j = i + cl - 1; \n\t\t\tif (str[i] == str[j] && cl == 2) \n\t\t\t\tL[i][j] = 2; \n\t\t\telse if (str[i] == str[j]) \n\t\t\t\tL[i][j] = L[i + 1][j - 1] + 2; \n\t\t\telse\n\t\t\t\tL[i][j] = max(L[i][j - 1], L[i + 1][j]); \n\t\t} \n\t} \n\t\n\treturn L[0][n - 1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124147,
      "stdout": "",
      "stderr": "/tmp/tmp3_skbv_6.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmp3_skbv_6.d(26): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3_skbv_6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{\n\tint n = str.length;\n\tint[][] L = new int[n][n];\n\t\n\tfor (int i = 0; i < n; i++) \n\t\tL[i][i] = 1;\n\t\n\tfor (int cl = 2; cl <= n; cl++) \n\t{\n\t\tfor (int i = 0; i < n - cl + 1; i++) \n\t\t{\n\t\t\tint j = i + cl - 1;\n\t\t\tif (str[i] == str[j] && cl == 2) \n\t\t\t\tL[i][j] = 2;\n\t\t\telse if (str[i] == str[j]) \n\t\t\t\tL[i][j] = L[i + 1][j - 1] + 2;\n\t\t\telse \n\t\t\t\tL[i][j] = max(L[i][j - 1], L[i + 1][j]);\n\t\t}\n\t}\n\treturn L[0][n - 1];\n}\nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124148,
      "stdout": "",
      "stderr": "/tmp/tmp81t_mr5e.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmp81t_mr5e.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmp81t_mr5e.d(26): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp81t_mr5e.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n\tlong n = str.length; \n\tlong i, j, cl; \n\tauto L = new long[n][n]; \n\t\n\tfor (i = 0; i < n; i++) \n\t\tL[i][i] = 1; \n\t\n\tfor (cl=2; cl<=n; cl++) \n\t{ \n\t\tfor (i=0; i<n-cl+1; i++) \n\t\t{ \n\t\t\tj = i+cl-1; \n\t\t\tif (str[i] == str[j] && cl == 2) \n\t\t\t\tL[i][j] = 2; \n\t\t\telse if (str[i] == str[j]) \n\t\t\t\tL[i][j] = L[i+1][j-1] + 2; \n\t\t\telse\n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \n\t\t} \n\t} \n\t\n\treturn L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124147,
      "stdout": "",
      "stderr": "/tmp/tmpgrbp3fmv.d(12): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgrbp3fmv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n\tlong n = str.length; \n\tlong[][] L = new long[n][n]; \n\t\n\tfor (long i = 0; i < n; i++) \n\t\tL[i][i] = 1; \n\t\n\tfor (long cl = 2; cl <= n; cl++) \n\t{ \n\t\tfor (long i = 0; i < n - cl + 1; i++) \n\t\t{ \n\t\t\tlong j = i + cl - 1; \n\t\t\tif (str[i] == str[j] && cl == 2) \n\t\t\t\tL[i][j] = 2; \n\t\t\telse if (str[i] == str[j]) \n\t\t\t\tL[i][j] = L[i + 1][j - 1] + 2; \n\t\t\telse\n\t\t\t\tL[i][j] = max(L[i][j - 1], L[i + 1][j]); \n\t\t} \n\t} \n\t\n\treturn L[0][n - 1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124147,
      "stdout": "",
      "stderr": "/tmp/tmp3_skbv_6.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmp3_skbv_6.d(26): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3_skbv_6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n\tint n = str.length; \n\tint i, j, cl; \n\tint L[][] = new int[n][n];  \n\tfor (i = 0; i < n; i++) \n\t\tL[i][i] = 1; \n\tfor (cl=2; cl<=n; cl++) \n\t{ \n\t\tfor (i=0; i<n-cl+1; i++) \n\t\t{ \n\t\t\tj = i+cl-1; \n\t\t\tif (str[i] == str[j] && cl == 2) \n\t\t\t\tL[i][j] = 2; \n\t\t\telse if (str[i] == str[j]) \n\t\t\t\tL[i][j] = L[i+1][j-1] + 2; \n\t\t\telse\n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \n\t\t} \n\t} \n\treturn L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124147,
      "stdout": "",
      "stderr": "/tmp/tmpkzxug3wm.d(12): Deprecation: instead of C-style syntax, use D-style syntax `int[][] L`\n/tmp/tmpkzxug3wm.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmpkzxug3wm.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmpkzxug3wm.d(25): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkzxug3wm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    long n = str.length; \n    long[][] L = new long[n][n]; \n  \n    for (long i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    for (long cl = 2; cl <= n; cl++) \n    { \n        for (long i = 0; i < n - cl + 1; i++) \n        { \n            long j = i + cl - 1; \n            if (str[i] == str[j] && cl == 2) \n                L[i][j] = 2; \n            else if (str[i] == str[j]) \n                L[i][j] = L[i + 1][j - 1] + 2; \n            else\n                L[i][j] = max(L[i][j - 1], L[i + 1][j]); \n        } \n    } \n  \n    return L[0][n - 1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "/tmp/tmpiole5xo5.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmpiole5xo5.d(26): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiole5xo5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n\tlong n = str.length; \n\tlong[][] L = new long[n][n]; \n\t\n\tfor (long i = 0; i < n; i++) \n\t\tL[i][i] = 1; \n\t\n\tfor (long cl = 2; cl <= n; cl++) \n\t{ \n\t\tfor (long i = 0; i < n - cl + 1; i++) \n\t\t{ \n\t\t\tlong j = i + cl - 1; \n\t\t\tif (str[i] == str[j] && cl == 2) \n\t\t\t\tL[i][j] = 2; \n\t\t\telse if (str[i] == str[j]) \n\t\t\t\tL[i][j] = L[i + 1][j - 1] + 2; \n\t\t\telse\n\t\t\t\tL[i][j] = max(L[i][j - 1], L[i + 1][j]); \n\t\t} \n\t} \n\t\n\treturn L[0][n - 1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124147,
      "stdout": "",
      "stderr": "/tmp/tmp3_skbv_6.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmp3_skbv_6.d(26): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3_skbv_6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    long n = str.length; \n    long[][] L = new long[n][n]; \n  \n    for (long i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    for (long cl = 2; cl <= n; cl++) \n    { \n        for (long i = 0; i < n - cl + 1; i++) \n        { \n            long j = i + cl - 1; \n            if (str[i] == str[j] && cl == 2) \n                L[i][j] = 2; \n            else if (str[i] == str[j]) \n                L[i][j] = L[i + 1][j - 1] + 2; \n            else\n                L[i][j] = max(L[i][j - 1], L[i + 1][j]); \n        } \n    } \n  \n    return L[0][n - 1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "/tmp/tmpiole5xo5.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmpiole5xo5.d(26): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiole5xo5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    long n = str.length; \n    long[][] L = new long[n][n]; \n  \n    for (long i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    for (long cl = 2; cl <= n; cl++) \n    { \n        for (long i = 0; i < n - cl + 1; i++) \n        { \n            long j = i + cl - 1; \n            if (str[i] == str[j] && cl == 2) \n                L[i][j] = 2; \n            else if (str[i] == str[j]) \n                L[i][j] = L[i + 1][j - 1] + 2; \n            else\n                L[i][j] = max(L[i][j - 1], L[i + 1][j]); \n        } \n    } \n  \n    return L[0][n - 1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "/tmp/tmpiole5xo5.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmpiole5xo5.d(26): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiole5xo5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n\tint n = str.length; \n\tint i, j, cl; \n\tint L[n][n];\n\t\n\tfor (i = 0; i < n; i++) \n\t\tL[i][i] = 1; \n\t\n\tfor (cl=2; cl<=n; cl++) \n\t{ \n\t\tfor (i=0; i<n-cl+1; i++) \n\t\t{ \n\t\t\tj = i+cl-1; \n\t\t\tif (str[i] == str[j] && cl == 2) \n\t\t\t\tL[i][j] = 2; \n\t\t\telse if (str[i] == str[j]) \n\t\t\t\tL[i][j] = L[i+1][j-1] + 2; \n\t\t\telse\n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \n\t\t} \n\t} \n\t\n\treturn L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124148,
      "stdout": "",
      "stderr": "/tmp/tmp302i9jhe.d(12): Deprecation: instead of C-style syntax, use D-style syntax `int[n][n] L`\n/tmp/tmp302i9jhe.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmp302i9jhe.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmp302i9jhe.d(12): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp302i9jhe.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    long n = str.length; \n    long i, j, cl; \n    long L[n][n]; \n  \n    for (i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    for (cl=2; cl<=n; cl++) \n    { \n        for (i=0; i<n-cl+1; i++) \n        { \n            j = i+cl-1; \n            if (str[i] == str[j] && cl == 2) \n               L[i][j] = 2; \n            else if (str[i] == str[j]) \n               L[i][j] = L[i+1][j-1] + 2; \n            else\n               L[i][j] = max(L[i][j-1], L[i+1][j]); \n        } \n    } \n  \n    return L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124148,
      "stdout": "",
      "stderr": "/tmp/tmpthl63ho7.d(12): Deprecation: instead of C-style syntax, use D-style syntax `long[n][n] L`\n/tmp/tmpthl63ho7.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmpthl63ho7.d(12): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpthl63ho7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n\tint n = str.length; \n\tint i, j, cl; \n\tint L[][] = new int[n][n]; // Create a table to store results of subproblems \n\t\n\t// Strings of length 1 are palindrome of lentgh 1 \n\tfor (i = 0; i < n; i++) \n\t\tL[i][i] = 1; \n\t\t\n\t// Build the table. Note that the lower diagonal values of table are \n\t// useless and not filled in the process. The values are filled in a \n\t// manner similar to Matrix Chain Multiplication DP solution (See \n\t// http://www.geeksforgeeks.org/archives/15553). cl is length of \n\t// substring \n\tfor (cl=2; cl<=n; cl++) \n\t{ \n\t\tfor (i=0; i<n-cl+1; i++) \n\t\t{ \n\t\t\tj = i+cl-1; \n\t\t\tif (str[i] == str[j] && cl == 2) \n\t\t\t\tL[i][j] = 2; \n\t\t\telse if (str[i] == str[j]) \n\t\t\t\tL[i][j] = L[i+1][j-1] + 2; \n\t\t\telse\n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \n\t\t} \n\t} \n\t\n\treturn L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124147,
      "stdout": "",
      "stderr": "/tmp/tmp29wljlxr.d(12): Deprecation: instead of C-style syntax, use D-style syntax `int[][] L`\n/tmp/tmp29wljlxr.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmp29wljlxr.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmp29wljlxr.d(33): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp29wljlxr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{\n\tlong n = str.length;\n\tlong[long][long] L = new long[n][n];\n\t\n\tforeach(i; 0 .. n)\n\t{\n\t\tL[i][i] = 1;\n\t}\n\t\n\tforeach(i; 0 .. n - 1)\n\t{\n\t\tif(str[i] == str[i + 1])\n\t\t{\n\t\t\tL[i][i + 1] = 2;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tL[i][i + 1] = 1;\n\t\t}\n\t}\n\t\n\tforeach(k; 3 .. n + 1)\n\t{\n\t\tforeach(i; 0 .. n - k + 1)\n\t\t{\n\t\t\tlong j = i + k - 1;\n\t\t\tif(str[i] == str[j])\n\t\t\t{\n\t\t\t\tL[i][j] = L[i + 1][j - 1] + 2;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tL[i][j] = max(L[i][j - 1], L[i + 1][j]);\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn L[0][n - 1];\n}\nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124148,
      "stdout": "",
      "stderr": "/tmp/tmp5z3ydl1p.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmp5z3ydl1p.d(41): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5z3ydl1p.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{\n\tlong n = str.length;\n\tlong[][] L = new long[n][n];\n\t\n\t// Strings of length 1 are palindrome of length 1\n\tforeach(i; 0 .. n)\n\t\tL[i][i] = 1;\n\t\n\tforeach(sublen; 2 .. n + 1)\n\t{\n\t\tforeach(i; 0 .. n - sublen + 1)\n\t\t{\n\t\t\tlong j = i + sublen - 1;\n\t\t\tif(str[i] == str[j] && sublen == 2)\n\t\t\t\tL[i][j] = 2;\n\t\t\telse if(str[i] == str[j])\n\t\t\t\tL[i][j] = L[i + 1][j - 1] + 2;\n\t\t\telse\n\t\t\t\tL[i][j] = max(L[i][j - 1], L[i + 1][j]);\n\t\t}\n\t}\n\treturn L[0][n - 1];\n}\nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124148,
      "stdout": "",
      "stderr": "/tmp/tmpm8mw1f0b.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmpm8mw1f0b.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm8mw1f0b.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n\tint n = str.length; \n\tint i, j, cl; \n\tint L[][] = new int[n][n]; // Create a table to store results of subproblems \n\t\n\t// Strings of length 1 are palindrome of lentgh 1 \n\tfor (i = 0; i < n; i++) \n\t\tL[i][i] = 1; \n\t\t\n\t// Build the table. Note that the lower diagonal values of table are \n\t// useless and not filled in the process. The values are filled in a \n\t// manner similar to Matrix Chain Multiplication DP solution (See \n\t// http://www.geeksforgeeks.org/archives/15553). cl is length of \n\t// substring \n\tfor (cl=2; cl<=n; cl++) \n\t{ \n\t\tfor (i=0; i<n-cl+1; i++) \n\t\t{ \n\t\t\tj = i+cl-1; \n\t\t\tif (str[i] == str[j] && cl == 2) \n\t\t\t\tL[i][j] = 2; \n\t\t\telse if (str[i] == str[j]) \n\t\t\t\tL[i][j] = L[i+1][j-1] + 2; \n\t\t\telse\n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \n\t\t} \n\t} \n\t\n\treturn L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124147,
      "stdout": "",
      "stderr": "/tmp/tmp29wljlxr.d(12): Deprecation: instead of C-style syntax, use D-style syntax `int[][] L`\n/tmp/tmp29wljlxr.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmp29wljlxr.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmp29wljlxr.d(33): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp29wljlxr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n\tint n = str.length; \n\tint i, j, cl; \n\tint L[][] = new int[n][n]; \n\t\n\tfor (i = 0; i < n; i++) \n\t\tL[i][i] = 1; \n\t\n\tfor (cl=2; cl<=n; cl++) \n\t{ \n\t\tfor (i=0; i<n-cl+1; i++) \n\t\t{ \n\t\t\tj = i+cl-1; \n\t\t\tif (str[i] == str[j] && cl == 2) \n\t\t\t\tL[i][j] = 2; \n\t\t\telse if (str[i] == str[j]) \n\t\t\t\tL[i][j] = L[i+1][j-1] + 2; \n\t\t\telse\n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \n\t\t} \n\t} \n\t\n\treturn L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "/tmp/tmp1bxtxzuc.d(12): Deprecation: instead of C-style syntax, use D-style syntax `int[][] L`\n/tmp/tmp1bxtxzuc.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmp1bxtxzuc.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmp1bxtxzuc.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1bxtxzuc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{\n\tint n = str.length;\n\tint i, j, cl;\n\tint[][] L = new int[n][n];\n\t\n\tfor (i = 0; i < n; i++)\n\t\tL[i][i] = 1;\n\t\n\tfor (cl = 2; cl <= n; cl++)\n\t{\n\t\tfor (i = 0; i < n - cl + 1; i++)\n\t\t{\n\t\t\tj = i + cl - 1;\n\t\t\tif (str[i] == str[j] && cl == 2)\n\t\t\t\tL[i][j] = 2;\n\t\t\telse if (str[i] == str[j])\n\t\t\t\tL[i][j] = L[i + 1][j - 1] + 2;\n\t\t\telse\n\t\t\t\tL[i][j] = max(L[i][j - 1], L[i + 1][j]);\n\t\t}\n\t}\n\t\n\treturn L[0][n - 1];\n}\nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124148,
      "stdout": "",
      "stderr": "/tmp/tmpoo4jaeqs.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmpoo4jaeqs.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmpoo4jaeqs.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoo4jaeqs.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    long n = str.length; \n    long[][] L = new long[n][n]; \n  \n    // Strings of length 1 are palindrome of lentgh 1 \n    for (long i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    // Build the table. Note that the lower diagonal values of table are \n    // useless and not filled in the process. The values are filled in a \n    // manner similar to Matrix Chain Multiplication DP solution (See \n    // https://www.geeksforgeeks.org/dynamic-programming-set-8-matrix-chain-multiplication/ \n    // cl is length of substring \n    for (long cl = 2; cl <= n; cl++) \n    { \n        for (long i = 0; i < n - cl + 1; i++) \n        { \n            long j = i + cl - 1; \n            if (str[i] == str[j] && cl == 2) \n                L[i][j] = 2; \n            else if (str[i] == str[j]) \n                L[i][j] = L[i + 1][j - 1] + 2; \n            else\n                L[i][j] = max(L[i][j - 1], L[i + 1][j]); \n        } \n    } \n  \n    return L[0][n - 1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124147,
      "stdout": "",
      "stderr": "/tmp/tmphy5oih88.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmphy5oih88.d(32): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphy5oih88.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n   int n = str.length; \n   int i, j, cl; \n   int L[n][n];  // Create a table to store results of subproblems \n  \n  \n   // Strings of length 1 are palindrome of lentgh 1 \n   for (i = 0; i < n; i++) \n      L[i][i] = 1; \n  \n    // Build the table. Note that the lower diagonal values of table are \n    // useless and not filled in the process. The values are filled in a \n    // manner similar to Matrix Chain Multiplication DP solution (See \n    // https://www.geeksforgeeks.org/dynamic-programming-set-8-matrix-chain-multiplication/). \n    // cl is length of substring \n    for (cl=2; cl<=n; cl++) \n    { \n        for (i=0; i<n-cl+1; i++) \n        { \n            j = i+cl-1; \n            if (str[i] == str[j] && cl == 2) \n               L[i][j] = 2; \n            else if (str[i] == str[j]) \n               L[i][j] = L[i+1][j-1] + 2; \n            else\n               L[i][j] = max(L[i][j-1], L[i+1][j]); \n        } \n    } \n  \n    return L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124148,
      "stdout": "",
      "stderr": "/tmp/tmpif8fzyql.d(12): Deprecation: instead of C-style syntax, use D-style syntax `int[n][n] L`\n/tmp/tmpif8fzyql.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmpif8fzyql.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmpif8fzyql.d(12): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpif8fzyql.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{\n\tint n = str.length;\n\tint[][] dp = new int[n][n];\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tdp[i][i] = 1;\n\t}\n\tfor (int len = 2; len <= n; len++) \n\t{\n\t\tfor (int i = 0; i < n - len + 1; i++) \n\t\t{\n\t\t\tint j = i + len - 1;\n\t\t\tif (str[i] == str[j] && len == 2) \n\t\t\t{\n\t\t\t\tdp[i][j] = 2;\n\t\t\t} \n\t\t\telse if (str[i] == str[j]) \n\t\t\t{\n\t\t\t\tdp[i][j] = dp[i + 1][j - 1] + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tdp[i][j] = max(dp[i + 1][j], dp[i][j - 1]);\n\t\t\t}\n\t\t}\n\t}\n\treturn dp[0][n - 1];\n}\nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124148,
      "stdout": "",
      "stderr": "/tmp/tmpp0pnm8yw.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmpp0pnm8yw.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmpp0pnm8yw.d(31): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp0pnm8yw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{\n\tlong n = str.length;\n\tlong[][] L = new long[n][n];\n\t\n\tforeach(i; 0 .. n)\n\t\tL[i][i] = 1;\n\t\n\tforeach(sublen; 2 .. n + 1)\n\t{\n\t\tforeach(i; 0 .. n - sublen + 1)\n\t\t{\n\t\t\tlong j = i + sublen - 1;\n\t\t\tif(str[i] == str[j] && sublen == 2)\n\t\t\t\tL[i][j] = 2;\n\t\t\telse if(str[i] == str[j])\n\t\t\t\tL[i][j] = L[i + 1][j - 1] + 2;\n\t\t\telse\n\t\t\t\tL[i][j] = max(L[i][j - 1], L[i + 1][j]);\n\t\t}\n\t}\n\t\n\treturn L[0][n - 1];\n}\nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124147,
      "stdout": "",
      "stderr": "/tmp/tmp2fj7vxph.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmp2fj7vxph.d(26): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2fj7vxph.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n\tint n = str.length; \n\tint i, j, cl; \n\tint L[n][n]; \n\t\n\tfor (i = 0; i < n; i++) \n\t\tL[i][i] = 1; \n\t\t\n\tfor (cl=2; cl<=n; cl++) \n\t{ \n\t\tfor (i=0; i<n-cl+1; i++) \n\t\t{ \n\t\t\tj = i+cl-1; \n\t\t\tif (str[i] == str[j] && cl == 2) \n\t\t\t\tL[i][j] = 2; \n\t\t\telse if (str[i] == str[j]) \n\t\t\t\tL[i][j] = L[i+1][j-1] + 2; \n\t\t\telse\n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \n\t\t} \n\t} \n\t\n\treturn L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124147,
      "stdout": "",
      "stderr": "/tmp/tmph4fcjec1.d(12): Deprecation: instead of C-style syntax, use D-style syntax `int[n][n] L`\n/tmp/tmph4fcjec1.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmph4fcjec1.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmph4fcjec1.d(12): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph4fcjec1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{\n\tlong n = str.length;\n\tlong[][] dp = new long[n][n];\n\t\n\tfor (long i = 0; i < n; i++)\n\t\tdp[i][i] = 1;\n\t\n\tfor (long i = n - 2; i >= 0; i--)\n\t{\n\t\tfor (long j = i + 1; j < n; j++)\n\t\t{\n\t\t\tif (str[i] == str[j])\n\t\t\t\tdp[i][j] = 2 + dp[i + 1][j - 1];\n\t\t\telse\n\t\t\t\tdp[i][j] = max(dp[i + 1][j], dp[i][j - 1]);\n\t\t}\n\t}\n\t\n\treturn dp[0][n - 1];\n}\nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124148,
      "stdout": "",
      "stderr": "/tmp/tmpzwmj02r_.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmpzwmj02r_.d(23): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzwmj02r_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n\tlong n = str.length;\n\tlong i, j, cl; \n\tlong L[][] = new long[n][n];\n\t\n\tfor (i = 0; i < n; i++) \n\t\tL[i][i] = 1; \n\t\n\tfor (cl=2; cl<=n; cl++) \n\t{ \n\t\tfor (i=0; i<n-cl+1; i++) \n\t\t{ \n\t\t\tj = i+cl-1; \n\t\t\tif (str[i] == str[j] && cl == 2) \n\t\t\t\tL[i][j] = 2; \n\t\t\telse if (str[i] == str[j]) \n\t\t\t\tL[i][j] = L[i+1][j-1] + 2; \n\t\t\telse\n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \n\t\t} \n\t} \n\t\n\treturn L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124148,
      "stdout": "",
      "stderr": "/tmp/tmpb5a1p811.d(12): Deprecation: instead of C-style syntax, use D-style syntax `long[][] L`\n/tmp/tmpb5a1p811.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmpb5a1p811.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb5a1p811.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n\tint n = str.length; \n\tint i, j, cl; \n\tint L[][] = new int[n][n]; \n\t\n\tfor (i = 0; i < n; i++) \n\t\tL[i][i] = 1; \n\t\n\tfor (cl=2; cl<=n; cl++) \n\t{ \n\t\tfor (i=0; i<n-cl+1; i++) \n\t\t{ \n\t\t\tj = i+cl-1; \n\t\t\tif (str[i] == str[j] && cl == 2) \n\t\t\t\tL[i][j] = 2; \n\t\t\telse if (str[i] == str[j]) \n\t\t\t\tL[i][j] = L[i+1][j-1] + 2; \n\t\t\telse\n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \n\t\t} \n\t} \n\t\n\treturn L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "/tmp/tmp1bxtxzuc.d(12): Deprecation: instead of C-style syntax, use D-style syntax `int[][] L`\n/tmp/tmp1bxtxzuc.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmp1bxtxzuc.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmp1bxtxzuc.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1bxtxzuc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    long n = str.length; \n    long[][] L = new long[n][n]; \n  \n    for (long i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    for (long cl = 2; cl <= n; cl++) \n    { \n        for (long i = 0; i < n - cl + 1; i++) \n        { \n            long j = i + cl - 1; \n            if (str[i] == str[j] && cl == 2) \n                L[i][j] = 2; \n            else if (str[i] == str[j]) \n                L[i][j] = L[i + 1][j - 1] + 2; \n            else\n                L[i][j] = max(L[i][j - 1], L[i + 1][j]); \n        } \n    } \n  \n    return L[0][n - 1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "/tmp/tmpiole5xo5.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmpiole5xo5.d(26): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiole5xo5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    long n = str.length; \n    long i, j, cl; \n    long L[][] = new long[n][n];  \n  \n    for (i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    for (cl=2; cl<=n; cl++) \n    { \n        for (i=0; i<n-cl+1; i++) \n        { \n            j = i+cl-1; \n            if (str[i] == str[j] && cl == 2) \n                L[i][j] = 2; \n            else if (str[i] == str[j]) \n                L[i][j] = L[i+1][j-1] + 2; \n            else\n                L[i][j] = max(L[i][j-1], L[i+1][j]); \n        } \n    } \n  \n    return L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124147,
      "stdout": "",
      "stderr": "/tmp/tmpdfledery.d(12): Deprecation: instead of C-style syntax, use D-style syntax `long[][] L`\n/tmp/tmpdfledery.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmpdfledery.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdfledery.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{\n\tint n = str.length;\n\tint[][] dp = new int[n][n];\n\t\n\t// length 1\n\tfor (int i = 0; i < n; i++)\n\t\tdp[i][i] = 1;\n\t\n\t// length 2\n\tfor (int i = 0; i < n - 1; i++)\n\t\tif (str[i] == str[i + 1])\n\t\t\tdp[i][i + 1] = 2;\n\t\telse\n\t\t\tdp[i][i + 1] = 1;\n\t\n\t// length 3 and above\n\tfor (int k = 3; k <= n; k++) {\n\t\tfor (int i = 0; i < n - k + 1; i++) {\n\t\t\tint j = i + k - 1;\n\t\t\tif (str[i] == str[j])\n\t\t\t\tdp[i][j] = dp[i + 1][j - 1] + 2;\n\t\t\telse\n\t\t\t\tdp[i][j] = max(dp[i + 1][j], dp[i][j - 1]);\n\t\t}\n\t}\n\t\n\treturn dp[0][n - 1];\n}\nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124148,
      "stdout": "",
      "stderr": "/tmp/tmp6ja65syj.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmp6ja65syj.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmp6ja65syj.d(31): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6ja65syj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{\n\tint n = str.length;\n\tint[][] dp = new int[n][n];\n\t\n\tforeach(i; 0 .. n)\n\t\tdp[i][i] = 1;\n\t\n\tforeach(i; 0 .. n)\n\t{\n\t\tforeach(j; i + 1 .. n)\n\t\t{\n\t\t\tif(str[i] == str[j])\n\t\t\t\tdp[i][j] = dp[i + 1][j - 1] + 2;\n\t\t\telse\n\t\t\t\tdp[i][j] = max(dp[i + 1][j], dp[i][j - 1]);\n\t\t}\n\t}\n\t\n\treturn dp[0][n - 1];\n}\nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124147,
      "stdout": "",
      "stderr": "/tmp/tmphvz5ucug.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmphvz5ucug.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmphvz5ucug.d(23): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphvz5ucug.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n\tlong n = str.length; \n\tlong[][] L = new long[n][n]; \n\t\n\t// Strings of length 1 are palindrome of lentgh 1 \n\tforeach (i; 0 .. n) \n\t\tL[i][i] = 1; \n\t\n\tforeach (sublen; 2 .. n + 1) \n\t{ \n\t\tforeach (i; 0 .. n - sublen + 1) \n\t\t{ \n\t\t\tlong j = i + sublen - 1; \n\t\t\tif (str[i] == str[j] && sublen == 2) \n\t\t\t\tL[i][j] = 2; \n\t\t\telse if (str[i] == str[j]) \n\t\t\t\tL[i][j] = L[i + 1][j - 1] + 2; \n\t\t\telse\n\t\t\t\tL[i][j] = max(L[i][j - 1], L[i + 1][j]); \n\t\t} \n\t} \n\t\n\treturn L[0][n - 1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124147,
      "stdout": "",
      "stderr": "/tmp/tmplhmg0q5y.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmplhmg0q5y.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplhmg0q5y.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n\tint n = str.length; \n\tlong[][] L = new long[n][n]; \n\t\n\t// Strings of length 1 are palindrome of lentgh 1 \n\tforeach(i; 0 .. n) \n\t\tL[i][i] = 1; \n\t\n\t// Build the table. Note that the lower diagonal values of table are \n\t// useless and not filled in the process. The values are filled in a \n\t// manner similar to Matrix Chain Multiplication DP solution (See \n\t// http://www.geeksforgeeks.org/archives/15553). clang-format off\n\tforeach(cl; 2 .. n) \n\t{ \n\t\tforeach(i; 0 .. n - cl + 1) \n\t\t{ \n\t\t\tint j = i + cl - 1; \n\t\t\tif (str[i] == str[j] && cl == 2) \n\t\t\t\tL[i][j] = 2; \n\t\t\telse if (str[i] == str[j]) \n\t\t\t\tL[i][j] = L[i + 1][j - 1] + 2; \n\t\t\telse\n\t\t\t\tL[i][j] = max(L[i][j - 1], L[i + 1][j]); \n\t\t} \n\t} \n\t// clang-format on\n\t\n\treturn L[0][n - 1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124148,
      "stdout": "",
      "stderr": "/tmp/tmpr5i577z0.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmpr5i577z0.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmpr5i577z0.d(31): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr5i577z0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n\tint n = str.length; \n\tint i, j, cl; \n\tint L[][] = new int[n][n];  \n\tfor (i = 0; i < n; i++) \n\t\tL[i][i] = 1; \n\tfor (cl=2; cl<=n; cl++) \n\t{ \n\t\tfor (i=0; i<n-cl+1; i++) \n\t\t{ \n\t\t\tj = i+cl-1; \n\t\t\tif (str[i] == str[j] && cl == 2) \n\t\t\t\tL[i][j] = 2; \n\t\t\telse if (str[i] == str[j]) \n\t\t\t\tL[i][j] = L[i+1][j-1] + 2; \n\t\t\telse\n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \n\t\t} \n\t} \n\treturn L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124147,
      "stdout": "",
      "stderr": "/tmp/tmpkzxug3wm.d(12): Deprecation: instead of C-style syntax, use D-style syntax `int[][] L`\n/tmp/tmpkzxug3wm.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmpkzxug3wm.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmpkzxug3wm.d(25): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkzxug3wm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n\tint n = str.length; \n\tint i, j, cl; \n\tint L[][] = new int[n][n]; \n\t\n\tfor (i = 0; i < n; i++) \n\t\tL[i][i] = 1; \n\t\t\n\tfor (cl=2; cl<=n; cl++) \n\t{ \n\t\tfor (i=0; i<n-cl+1; i++) \n\t\t{ \n\t\t\tj = i+cl-1; \n\t\t\tif (str[i] == str[j] && cl == 2) \n\t\t\t\tL[i][j] = 2; \n\t\t\telse if (str[i] == str[j]) \n\t\t\t\tL[i][j] = L[i+1][j-1] + 2; \n\t\t\telse\n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \n\t\t} \n\t} \n\t\n\treturn L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124147,
      "stdout": "",
      "stderr": "/tmp/tmpd0koxhao.d(12): Deprecation: instead of C-style syntax, use D-style syntax `int[][] L`\n/tmp/tmpd0koxhao.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmpd0koxhao.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmpd0koxhao.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd0koxhao.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n\tlong n = str.length; \n\tlong i, j, cl; \n\tlong L[][] = new long[n][n]; // Create a table to store results of subproblems \n\t\n\t// Strings of length 1 are palindrome of lentgh 1 \n\tfor (i = 0; i < n; i++) \n\t\tL[i][i] = 1; \n\t\t\n\t// Build the table. Note that the lower diagonal values of table are \n\t// useless and not filled in the process. The values are filled in a \n\t// manner similar to Matrix Chain Multiplication DP solution (See \n\t// http://www.geeksforgeeks.org/archives/15553). cl is length of \n\t// substring \n\tfor (cl=2; cl<=n; cl++) \n\t{ \n\t\tfor (i=0; i<n-cl+1; i++) \n\t\t{ \n\t\t\tj = i+cl-1; \n\t\t\tif (str[i] == str[j] && cl == 2) \n\t\t\t\tL[i][j] = 2; \n\t\t\telse if (str[i] == str[j]) \n\t\t\t\tL[i][j] = L[i+1][j-1] + 2; \n\t\t\telse\n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \n\t\t} \n\t} \n\t\n\treturn L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124147,
      "stdout": "",
      "stderr": "/tmp/tmp0jf9_l22.d(12): Deprecation: instead of C-style syntax, use D-style syntax `long[][] L`\n/tmp/tmp0jf9_l22.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmp0jf9_l22.d(33): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0jf9_l22.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n\tlong n = str.length; \n\tlong i, j, cl; \n\tauto L = new long[n][n]; \n\t\n\tfor (i = 0; i < n; i++) \n\t\tL[i][i] = 1; \n\t\n\tfor (cl=2; cl<=n; cl++) \n\t{ \n\t\tfor (i=0; i<n-cl+1; i++) \n\t\t{ \n\t\t\tj = i+cl-1; \n\t\t\tif (str[i] == str[j] && cl == 2) \n\t\t\t\tL[i][j] = 2; \n\t\t\telse if (str[i] == str[j]) \n\t\t\t\tL[i][j] = L[i+1][j-1] + 2; \n\t\t\telse\n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \n\t\t} \n\t} \n\t\n\treturn L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124147,
      "stdout": "",
      "stderr": "/tmp/tmpgrbp3fmv.d(12): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgrbp3fmv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n\tint n = str.length; \n\tint i, j, cl; \n\tint L[][] = new int[n][n]; \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124147,
      "stdout": "",
      "stderr": "/tmp/tmpm567hiwt.d(12): Deprecation: instead of C-style syntax, use D-style syntax `int[][] L`\n/tmp/tmpm567hiwt.d(13): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm567hiwt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n\tlong n = str.length; \n\tlong[][] L = new long[n][n]; \n\t\n\tfor (long i = 0; i < n; i++) \n\t\tL[i][i] = 1; \n\t\n\tfor (long cl = 2; cl <= n; cl++) \n\t{ \n\t\tfor (long i = 0; i < n - cl + 1; i++) \n\t\t{ \n\t\t\tlong j = i + cl - 1; \n\t\t\tif (str[i] == str[j] && cl == 2) \n\t\t\t\tL[i][j] = 2; \n\t\t\telse if (str[i] == str[j]) \n\t\t\t\tL[i][j] = L[i + 1][j - 1] + 2; \n\t\t\telse\n\t\t\t\tL[i][j] = max(L[i][j - 1], L[i + 1][j]); \n\t\t} \n\t} \n\t\n\treturn L[0][n - 1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124147,
      "stdout": "",
      "stderr": "/tmp/tmp3_skbv_6.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmp3_skbv_6.d(26): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3_skbv_6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{\n\tlong n = str.length;\n\tlong[][] L = new long[n][n];\n\t\n\tforeach(i; 0 .. n)\n\t\tL[i][i] = 1;\n\t\n\tforeach(cl; 2 .. n + 1)\n\t{\n\t\tforeach(i; 0 .. n - cl + 1)\n\t\t{\n\t\t\tlong j = i + cl - 1;\n\t\t\tif(str[i] == str[j] && cl == 2)\n\t\t\t\tL[i][j] = 2;\n\t\t\telse if(str[i] == str[j])\n\t\t\t\tL[i][j] = L[i + 1][j - 1] + 2;\n\t\t\telse\n\t\t\t\tL[i][j] = max(L[i][j - 1], L[i + 1][j]);\n\t\t}\n\t}\n\t\n\treturn L[0][n - 1];\n}\nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124147,
      "stdout": "",
      "stderr": "/tmp/tmpieswiyd3.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmpieswiyd3.d(26): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpieswiyd3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n\tint n = str.length; \n\tint i, j, cl; \n\tint L[][] = new int[n][n]; \n\t\n\tfor (i = 0; i < n; i++) \n\t\tL[i][i] = 1; \n\t\n\tfor (cl=2; cl<=n; cl++) \n\t{ \n\t\tfor (i=0; i<n-cl+1; i++) \n\t\t{ \n\t\t\tj = i+cl-1; \n\t\t\tif (str[i] == str[j] && cl == 2) \n\t\t\t\tL[i][j] = 2; \n\t\t\telse if (str[i] == str[j]) \n\t\t\t\tL[i][j] = L[i+1][j-1] + 2; \n\t\t\telse\n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \n\t\t} \n\t} \n\t\n\treturn L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "/tmp/tmp1bxtxzuc.d(12): Deprecation: instead of C-style syntax, use D-style syntax `int[][] L`\n/tmp/tmp1bxtxzuc.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmp1bxtxzuc.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmp1bxtxzuc.d(27): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1bxtxzuc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    long n = str.length; \n    long[][] L = new long[n][n]; \n  \n    for (long i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    for (long cl = 2; cl <= n; cl++) \n    { \n        for (long i = 0; i < n - cl + 1; i++) \n        { \n            long j = i + cl - 1; \n            if (str[i] == str[j] && cl == 2) \n                L[i][j] = 2; \n            else if (str[i] == str[j]) \n                L[i][j] = L[i + 1][j - 1] + 2; \n            else\n                L[i][j] = max(L[i][j - 1], L[i + 1][j]); \n        } \n    } \n  \n    return L[0][n - 1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "/tmp/tmpiole5xo5.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmpiole5xo5.d(26): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiole5xo5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    long n = str.length; \n    long[][] L = new long[n][n]; \n  \n    for (long i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    for (long cl = 2; cl <= n; cl++) \n    { \n        for (long i = 0; i < n - cl + 1; i++) \n        { \n            long j = i + cl - 1; \n            if (str[i] == str[j] && cl == 2) \n                L[i][j] = 2; \n            else if (str[i] == str[j]) \n                L[i][j] = L[i + 1][j - 1] + 2; \n            else\n                L[i][j] = max(L[i][j - 1], L[i + 1][j]); \n        } \n    } \n  \n    return L[0][n - 1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1665517102,
      "stdout": "",
      "stderr": "/tmp/tmpiole5xo5.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmpiole5xo5.d(26): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiole5xo5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    long n = str.length; \n    long i, j, cl; \n    auto L = new long[n][n]; \n  \n    for (i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    for (cl = 2; cl <= n; cl++) \n    { \n        for (i = 0; i < n - cl + 1; i++) \n        { \n            j = i + cl - 1; \n            if (str[i] == str[j] && cl == 2) \n                L[i][j] = 2; \n            else if (str[i] == str[j]) \n                L[i][j] = L[i + 1][j - 1] + 2; \n            else\n                L[i][j] = max(L[i][j - 1], L[i + 1][j]); \n        } \n    } \n  \n    return L[0][n - 1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124148,
      "stdout": "",
      "stderr": "/tmp/tmp0iob4tgn.d(12): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0iob4tgn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    int n = str.length; \n    int i, j, cl; \n    auto L = new int[n][n]; \n  \n    // Strings of length 1 are palindrome of lentgh 1 \n    for (i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    // Build the table. Note that the lower  \n    // diagonal values of table are \n    // useless and not filled in the process.  \n    // The values are filled in a \n    // manner similar to Matrix Chain \n    // Multiplication DP solution (See \n    // https://www.geeksforgeeks.org/dynamic-programming-set-8-matrix-chain-multiplication/ \n    // cl is length of substring \n    for (cl=2; cl<=n; cl++) \n    { \n        for (i=0; i<n-cl+1; i++) \n        { \n            j = i+cl-1; \n            if (str[i] == str[j] && cl == 2) \n                L[i][j] = 2; \n            else if (str[i] == str[j]) \n                L[i][j] = L[i+1][j-1] + 2; \n            else\n                L[i][j] = max(L[i][j-1], L[i+1][j]); \n        } \n    } \n  \n    return L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124148,
      "stdout": "",
      "stderr": "/tmp/tmp_lo8glp7.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmp_lo8glp7.d(12): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_lo8glp7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{\n\tlong n = str.length;\n\tlong[][] dp = new long[n][n];\n\t\n\tforeach(i; 0 .. n)\n\t\tdp[i][i] = 1;\n\t\n\tforeach(i; 0 .. n - 1)\n\t\tif(str[i] == str[i + 1])\n\t\t\tdp[i][i + 1] = 2;\n\t\telse\n\t\t\tdp[i][i + 1] = 1;\n\t\n\tforeach(i; 0 .. n - 2)\n\t{\n\t\tforeach(j; i + 2 .. n)\n\t\t{\n\t\t\tif(str[i] == str[j])\n\t\t\t\tdp[i][j] = dp[i + 1][j - 1] + 2;\n\t\t\telse\n\t\t\t\tdp[i][j] = max(dp[i + 1][j], dp[i][j - 1]);\n\t\t}\n\t}\n\t\n\treturn dp[0][n - 1];\n}\nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124148,
      "stdout": "",
      "stderr": "/tmp/tmplxl7yx0o.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmplxl7yx0o.d(29): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplxl7yx0o.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{\n\tlong n = str.length;\n\tlong[][] L = new long[n][n];\n\t\n\tforeach(i; 0 .. n)\n\t\tL[i][i] = 1;\n\t\n\tforeach(sublen; 2 .. n + 1)\n\t{\n\t\tforeach(i; 0 .. n - sublen + 1)\n\t\t{\n\t\t\tlong j = i + sublen - 1;\n\t\t\tif(str[i] == str[j] && sublen == 2)\n\t\t\t\tL[i][j] = 2;\n\t\t\telse if(str[i] == str[j])\n\t\t\t\tL[i][j] = L[i + 1][j - 1] + 2;\n\t\t\telse\n\t\t\t\tL[i][j] = max(L[i][j - 1], L[i + 1][j]);\n\t\t}\n\t}\n\t\n\treturn L[0][n - 1];\n}\nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124147,
      "stdout": "",
      "stderr": "/tmp/tmp2fj7vxph.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmp2fj7vxph.d(26): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2fj7vxph.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n\tauto n = str.length;\n\tauto L = new int[n, n];\n\t\n\tforeach(i; 0 .. n)\n\t\tL[i, i] = 1;\n\t\n\tforeach(i; 0 .. n - 1)\n\t{\n\t\tif(str[i] == str[i + 1])\n\t\t\tL[i, i + 1] = 2;\n\t\telse\n\t\t\tL[i, i + 1] = 1;\n\t}\n\t\n\tforeach(k; 3 .. n + 1)\n\t{\n\t\tforeach(i; 0 .. n - k + 1)\n\t\t{\n\t\t\tauto j = i + k - 1;\n\t\t\tif(str[i] == str[j])\n\t\t\t\tL[i, j] = L[i + 1, j - 1] + 2;\n\t\t\telse\n\t\t\t\tL[i, j] = max(L[i, j - 1], L[i + 1, j]);\n\t\t}\n\t}\n\t\n\treturn L[0, n - 1];\n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124148,
      "stdout": "",
      "stderr": "/tmp/tmp4epzyp9c.d(11): Error: found `,` when expecting `]`\n/tmp/tmp4epzyp9c.d(11): Error: semicolon expected following auto declaration, not `n`\n/tmp/tmp4epzyp9c.d(11): Error: found `]` when expecting `;` following statement\n/tmp/tmp4epzyp9c.d(11): Deprecation: use `{ }` for an empty statement, not `;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4epzyp9c.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    long n = str.length; \n    long i, j, cl; \n    long L[n][n]; \n  \n    for (i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    for (cl=2; cl<=n; cl++) \n    { \n        for (i=0; i<n-cl+1; i++) \n        { \n            j = i+cl-1; \n            if (str[i] == str[j] && cl == 2) \n                L[i][j] = 2; \n            else if (str[i] == str[j]) \n                L[i][j] = L[i+1][j-1] + 2; \n            else\n                L[i][j] = max(L[i][j-1], L[i+1][j]); \n        } \n    } \n  \n    return L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124148,
      "stdout": "",
      "stderr": "/tmp/tmp3cva65_z.d(12): Deprecation: instead of C-style syntax, use D-style syntax `long[n][n] L`\n/tmp/tmp3cva65_z.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmp3cva65_z.d(12): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3cva65_z.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{\n\tint n = str.length;\n\tint[][] L = new int[n][n];\n\t\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tL[i][i] = 1;\n\t}\n\t\n\tfor (int cl = 2; cl <= n; cl++) \n\t{\n\t\tfor (int i = 0; i < n - cl + 1; i++) \n\t\t{\n\t\t\tint j = i + cl - 1;\n\t\t\tif (str[i] == str[j] && cl == 2) \n\t\t\t{\n\t\t\t\tL[i][j] = 2;\n\t\t\t} \n\t\t\telse if (str[i] == str[j]) \n\t\t\t{\n\t\t\t\tL[i][j] = L[i + 1][j - 1] + 2;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tL[i][j] = max(L[i][j - 1], L[i + 1][j]);\n\t\t\t}\n\t\t}\n\t}\n\treturn L[0][n - 1];\n}\nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124148,
      "stdout": "",
      "stderr": "/tmp/tmpzjkn5fsf.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmpzjkn5fsf.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmpzjkn5fsf.d(33): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzjkn5fsf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    long n = str.length; \n    long i, j, cl; \n    long L[][] = new long[n][n]; // Create a table to store results of subproblems \n  \n  \n    // Strings of length 1 are palindrome of lentgh 1 \n    for (i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    // Build the table. Note that the lower diagonal values of table are \n    // useless and not filled in the process. The values are filled in a \n    // manner similar to Matrix Chain Multiplication DP solution (See \n    // http://www.geeksforgeeks.org/archives/15553). cl is length of \n    // substring \n    for (cl=2; cl<=n; cl++) \n    { \n        for (i=0; i<n-cl+1; i++) \n        { \n            j = i+cl-1; \n            if (str[i] == str[j] && cl == 2) \n               L[i][j] = 2; \n            else if (str[i] == str[j]) \n               L[i][j] = L[i+1][j-1] + 2; \n            else\n               L[i][j] = max(L[i][j-1], L[i+1][j]); \n        } \n    } \n  \n    return L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124147,
      "stdout": "",
      "stderr": "/tmp/tmpnycw7zg_.d(12): Deprecation: instead of C-style syntax, use D-style syntax `long[][] L`\n/tmp/tmpnycw7zg_.d(12): Error: variable `n` cannot be read at compile time\n/tmp/tmpnycw7zg_.d(34): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnycw7zg_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    int n = str.length; \n    int i, j, cl; \n    auto L = new int[n][n]; \n  \n    // Strings of length 1 are palindrome of lentgh 1 \n    for (i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    // Build the table. Note that the lower  \n    // diagonal values of table are \n    // useless and not filled in the process.  \n    // The values are filled in a manner similar \n    // to Matrix Chain Multiplication DP solution (See \n    // https://www.geeksforgeeks.org/dynamic-programming-set-8-matrix-chain-multiplication/ \n    // cl is length of substring \n    for (cl=2; cl<=n; cl++) \n    { \n        for (i=0; i<n-cl+1; i++) \n        { \n            j = i+cl-1; \n            if (str[i] == str[j] && cl == 2) \n                L[i][j] = 2; \n            else if (str[i] == str[j]) \n                L[i][j] = L[i+1][j-1] + 2; \n            else\n                L[i][j] = max(L[i][j-1], L[i+1][j]); \n        } \n    } \n  \n    return L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124148,
      "stdout": "",
      "stderr": "/tmp/tmp52kmy_6d.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmp52kmy_6d.d(12): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp52kmy_6d.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n\tint n = str.length; \n\tint i, j, cl; \n\tint L[n][n];\n\t\n\tfor (i = 0; i < n; i++) \n\t\tL[i][i] = 1; \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124148,
      "stdout": "",
      "stderr": "/tmp/tmp994447wk.d(12): Deprecation: instead of C-style syntax, use D-style syntax `int[n][n] L`\n/tmp/tmp994447wk.d(16): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp994447wk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\n*/\nlong lps(string str) \n{ \n    int n = str.length; \n    int i, j, cl; \n    auto L = new int[n][n]; \n  \n    for (i = 0; i < n; i++) \n        L[i][i] = 1; \n  \n    for (cl=2; cl<=n; cl++) \n    { \n        for (i=0; i<n-cl+1; i++) \n        { \n            j = i+cl-1; \n            if (str[i] == str[j] && cl == 2) \n                L[i][j] = 2; \n            else if (str[i] == str[j]) \n                L[i][j] = L[i+1][j-1] + 2; \n            else\n                L[i][j] = max(L[i][j-1], L[i+1][j]); \n        } \n    } \n  \n    return L[0][n-1]; \n} \nunittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}",
      "timestamp": 1666124147,
      "stdout": "",
      "stderr": "/tmp/tmps9yt1j8y.d(10): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmps9yt1j8y.d(12): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps9yt1j8y.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}