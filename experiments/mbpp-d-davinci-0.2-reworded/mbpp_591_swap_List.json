{
  "name": "mbpp_591_swap_List",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to interchange the first and last elements in an array.\n\t\n*/\nlong[] swap_List(long[] newList) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_591_swap_List.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tlong[] newList2 = new long[newList.length];\n\tint i = 0;\n\tint j = newList.length - 1;\n\twhile (i < newList.length)\n\t{\n\t\tnewList2[i] = newList[j];\n\t\tnewList2[j] = newList[i];\n\t\ti++;\n\t\tj--;\n\t}\n\treturn newList2;\n}",
    "{\n\tlong[] temp = new long[newList.length];\n\ttemp[0] = newList[newList.length-1];\n\ttemp[newList.length-1] = newList[0];\n\tfor (int i = 1; i < newList.length-1; i++)\n\t{\n\t\ttemp[i] = newList[i];\n\t}\n\treturn temp;\n}",
    "{\n\tlong[] tempList = new long[newList.length];\n\ttempList[0] = newList[newList.length-1];\n\ttempList[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\ttempList[i] = newList[i];\n\t}\n\treturn tempList;\n}",
    "{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}",
    "{\n\tlong[] tempList = new long[newList.length];\n\ttempList[0] = newList[newList.length-1];\n\ttempList[newList.length-1] = newList[0];\n\tfor (int i = 1; i < newList.length-1; i++)\n\t{\n\t\ttempList[i] = newList[i];\n\t}\n\treturn tempList;\n}",
    "{\n\tlong[] tempList = newList;\n\tlong temp = tempList[0];\n\ttempList[0] = tempList[$-1];\n\ttempList[$-1] = temp;\n\treturn tempList;\n}",
    "{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}",
    "{\n\tlong[] temp = new long[newList.length];\n\ttemp[0] = newList[newList.length-1];\n\ttemp[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\ttemp[i] = newList[i];\n\t}\n\treturn temp;\n}",
    "{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor (int i = 1; i < newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}",
    "{\n\tlong[] result;\n\tresult = newList;\n\tlong temp;\n\ttemp = result[0];\n\tresult[0] = result[$-1];\n\tresult[$-1] = temp;\n\treturn result;\n}",
    "{\n\tlong[] temp = newList[0..$-1];\n\tlong[] temp2 = newList[$-1..$];\n\treturn temp2 ~ temp;\n}",
    "{\n\tlong[] temp = new long[newList.length];\n\ttemp[0] = newList[newList.length-1];\n\ttemp[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\ttemp[i] = newList[i];\n\t}\n\treturn temp;\n}",
    "{\n\tlong temp = newList[0];\n\tnewList[0] = newList[$-1];\n\tnewList[$-1] = temp;\n\treturn newList;\n}",
    "{\n\tlong[] temp = new long[newList.length];\n\ttemp[0] = newList[newList.length - 1];\n\ttemp[newList.length - 1] = newList[0];\n\tfor (int i = 1; i < newList.length - 1; i++)\n\t{\n\t\ttemp[i] = newList[i];\n\t}\n\treturn temp;\n}",
    "{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}",
    "{\n\tlong[] tempList = newList;\n\tlong temp = tempList[0];\n\ttempList[0] = tempList[tempList.length - 1];\n\ttempList[tempList.length - 1] = temp;\n\treturn tempList;\n}",
    "{\n\tlong[] tempList = newList;\n\tlong temp = tempList[0];\n\ttempList[0] = tempList[$-1];\n\ttempList[$-1] = temp;\n\treturn tempList;\n}",
    "{\n\tlong[] tempList = new long[newList.length];\n\ttempList[0] = newList[newList.length - 1];\n\ttempList[newList.length - 1] = newList[0];\n\tfor (int i = 1; i < newList.length - 1; i++) {\n\t\ttempList[i] = newList[i];\n\t}\n\treturn tempList;\n}",
    "{\n\tlong[] tempList = new long[newList.length];\n\ttempList[0] = newList[newList.length - 1];\n\ttempList[newList.length - 1] = newList[0];\n\tfor (int i = 1; i < newList.length - 1; i++) \n\t{\n\t\ttempList[i] = newList[i];\n\t}\n\treturn tempList;\n}",
    "{\n\tlong[] temp = new long[newList.length];\n\ttemp[0] = newList[newList.length-1];\n\ttemp[newList.length-1] = newList[0];\n\tfor(int i=1; i<newList.length-1; i++)\n\t{\n\t\ttemp[i] = newList[i];\n\t}\n\treturn temp;\n}",
    "{\n\tlong temp = newList[0];\n\tnewList[0] = newList[newList.length-1];\n\tnewList[newList.length-1] = temp;\n\treturn newList;\n}",
    "{\n\tlong[] temp = new long[newList.length];\n\ttemp[0] = newList[newList.length-1];\n\ttemp[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\ttemp[i] = newList[i];\n\t}\n\treturn temp;\n}",
    "{\n\tlong[] temp = new long[newList.length];\n\ttemp[0] = newList[newList.length - 1];\n\ttemp[newList.length - 1] = newList[0];\n\tfor (int i = 1; i < newList.length - 1; i++)\n\t{\n\t\ttemp[i] = newList[i];\n\t}\n\treturn temp;\n}",
    "{\n\tlong[] temp = new long[newList.length];\n\ttemp[0] = newList[newList.length - 1];\n\ttemp[newList.length - 1] = newList[0];\n\tfor (int i = 1; i < newList.length - 1; i++)\n\t{\n\t\ttemp[i] = newList[i];\n\t}\n\treturn temp;\n}",
    "{\n\tlong[] tempList = new long[newList.length];\n\ttempList[0] = newList[newList.length-1];\n\ttempList[newList.length-1] = newList[0];\n\tfor(int i=1;i<newList.length-1;i++)\n\t{\n\t\ttempList[i] = newList[i];\n\t}\n\treturn tempList;\n}",
    "{\n\tlong[] temp = new long[newList.length];\n\ttemp[0] = newList[newList.length-1];\n\ttemp[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\ttemp[i] = newList[i];\n\t}\n\treturn temp;\n}",
    "{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length - 1];\n\tnewList2[newList.length - 1] = newList[0];\n\tfor (int i = 1; i < newList.length - 1; i++) \n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}",
    "{\n\tlong[] temp = new long[newList.length];\n\ttemp[0] = newList[newList.length-1];\n\ttemp[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\ttemp[i] = newList[i];\n\t}\n\treturn temp;\n}",
    "{\n\tlong[] temp = new long[newList.length];\n\ttemp[0] = newList[newList.length-1];\n\ttemp[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\ttemp[i] = newList[i];\n\t}\n\treturn temp;\n}",
    "{\n\tlong[] temp = new long[newList.length];\n\ttemp[0] = newList[newList.length - 1];\n\ttemp[newList.length - 1] = newList[0];\n\tfor (int i = 1; i < newList.length - 1; i++)\n\t{\n\t\ttemp[i] = newList[i];\n\t}\n\treturn temp;\n}",
    "{\n\tlong[] temp = newList;\n\ttemp[0] = newList[$-1];\n\ttemp[$-1] = newList[0];\n\treturn temp;\n}",
    "{\n\tlong[] tempList = newList;\n\tlong temp = tempList[0];\n\ttempList[0] = tempList[$-1];\n\ttempList[$-1] = temp;\n\treturn tempList;\n}",
    "{\n\tlong[] result = new long[newList.length];\n\tresult[0] = newList[newList.length-1];\n\tresult[newList.length-1] = newList[0];\n\treturn result;\n}",
    "{\n\tlong[] temp = new long[newList.length];\n\ttemp[0] = newList[newList.length-1];\n\ttemp[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\ttemp[i] = newList[i];\n\t}\n\treturn temp;\n}",
    "{\n\tlong temp = newList[0];\n\tnewList[0] = newList[$-1];\n\tnewList[$-1] = temp;\n\treturn newList;\n}",
    "{\n\tlong[] temp = newList[0];\n\tnewList[0] = newList[$-1];\n\tnewList[$-1] = temp;\n\treturn newList;\n}",
    "{\n\tlong[] tempList = newList;\n\tlong temp;\n\ttemp = tempList[0];\n\ttempList[0] = tempList[$-1];\n\ttempList[$-1] = temp;\n\treturn tempList;\n}",
    "{\n\tlong[] tempList = new long[newList.length];\n\ttempList[0] = newList[newList.length-1];\n\ttempList[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\ttempList[i] = newList[i];\n\t}\n\treturn tempList;\n}",
    "{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}",
    "{\n\tlong[] temp = newList;\n\tlong temp1 = temp[0];\n\ttemp[0] = temp[$-1];\n\ttemp[$-1] = temp1;\n\treturn temp;\n}",
    "{\n\tlong[] temp = newList;\n\ttemp[0] = newList[$-1];\n\ttemp[$-1] = newList[0];\n\treturn temp;\n}",
    "{\n\tlong[] tempList = new long[newList.length];\n\ttempList[0] = newList[newList.length - 1];\n\ttempList[newList.length - 1] = newList[0];\n\tfor (int i = 1; i < newList.length - 1; i++)\n\t{\n\t\ttempList[i] = newList[i];\n\t}\n\treturn tempList;\n}",
    "{\n\tlong[] tempList;\n\ttempList = newList;\n\ttempList[0] = newList[$-1];\n\ttempList[$-1] = newList[0];\n\treturn tempList;\n}",
    "{\n\tlong[] temp = newList;\n\tlong temp_val = temp[0];\n\ttemp[0] = temp[$-1];\n\ttemp[$-1] = temp_val;\n\treturn temp;\n}",
    "{\n\tlong[] temp = new long[newList.length];\n\ttemp[0] = newList[newList.length-1];\n\ttemp[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\ttemp[i] = newList[i];\n\t}\n\treturn temp;\n}",
    "{\n\tlong[] tempList = new long[newList.length];\n\ttempList[0] = newList[newList.length-1];\n\ttempList[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\ttempList[i] = newList[i];\n\t}\n\treturn tempList;\n}",
    "{\n\tlong[] temp = new long[newList.length];\n\ttemp[0] = newList[newList.length-1];\n\ttemp[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\ttemp[i] = newList[i];\n\t}\n\treturn temp;\n}",
    "{\n\tlong[] temp = newList;\n\ttemp[0] = newList[$ - 1];\n\ttemp[$ - 1] = newList[0];\n\treturn temp;\n}",
    "{\n\tlong[] temp = new long[newList.length];\n\ttemp[0] = newList[newList.length - 1];\n\ttemp[newList.length - 1] = newList[0];\n\t\n\tfor (int i = 1; i < newList.length - 1; i++)\n\t{\n\t\ttemp[i] = newList[i];\n\t}\n\treturn temp;\n}",
    "{\n\tlong[] temp = newList;\n\tlong temp_first = temp[0];\n\tlong temp_last = temp[$-1];\n\ttemp[0] = temp_last;\n\ttemp[$-1] = temp_first;\n\treturn temp;\n}",
    "{\n\tlong[] list = newList;\n\tlong temp = list[0];\n\tlist[0] = list[list.length - 1];\n\tlist[list.length - 1] = temp;\n\treturn list;\n}",
    "{\n\tlong[] newList2 = newList.dup;\n\tlong temp = newList2[0];\n\tnewList2[0] = newList2[$-1];\n\tnewList2[$-1] = temp;\n\treturn newList2;\n}",
    "{\n\tlong[] temp = new long[newList.length];\n\ttemp[0] = newList[newList.length-1];\n\ttemp[newList.length-1] = newList[0];\n\tfor (int i = 1; i < newList.length-1; i++) \n\t{\n\t\ttemp[i] = newList[i];\n\t}\n\treturn temp;\n}",
    "{\n\tlong[] temp = new long[newList.length];\n\ttemp[0] = newList[newList.length - 1];\n\ttemp[newList.length - 1] = newList[0];\n\tfor (int i = 1; i < newList.length - 1; i++)\n\t{\n\t\ttemp[i] = newList[i];\n\t}\n\treturn temp;\n}",
    "{\n\tlong[] temp = new long[newList.length];\n\ttemp[0] = newList[newList.length-1];\n\ttemp[newList.length-1] = newList[0];\n\treturn temp;\n}",
    "{\n\tlong[] newList2 = new long[newList.length];\n\tint i = 0;\n\tforeach(long x; newList)\n\t{\n\t\tnewList2[i] = x;\n\t\ti++;\n\t}\n\tlong temp = newList2[0];\n\tnewList2[0] = newList2[newList2.length-1];\n\tnewList2[newList2.length-1] = temp;\n\treturn newList2;\n}",
    "{\n\tlong[] temp = new long[newList.length];\n\ttemp[0] = newList[newList.length - 1];\n\ttemp[newList.length - 1] = newList[0];\n\tfor (int i = 1; i < newList.length - 1; i++) \n\t{\n\t\ttemp[i] = newList[i];\n\t}\n\treturn temp;\n}",
    "{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}",
    "{\n\tlong[] tempList = newList;\n\tlong temp = tempList[0];\n\ttempList[0] = tempList[$-1];\n\ttempList[$-1] = temp;\n\treturn tempList;\n}",
    "{\n\tlong[] temp = new long[newList.length];\n\ttemp[0] = newList[newList.length-1];\n\ttemp[newList.length-1] = newList[0];\n\t\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\ttemp[i] = newList[i];\n\t}\n\treturn temp;\n}",
    "{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor (int i = 1; i < newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}",
    "{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tforeach(i, v; newList)\n\t{\n\t\tif(i != 0 && i != newList.length-1)\n\t\t{\n\t\t\tnewList2[i] = v;\n\t\t}\n\t}\n\treturn newList2;\n}",
    "{\n\tlong[] temp = newList;\n\tlong temp1 = temp[0];\n\ttemp[0] = temp[$-1];\n\ttemp[$-1] = temp1;\n\treturn temp;\n}",
    "{\n\tlong[] temp = new long[newList.length];\n\ttemp[0] = newList[newList.length-1];\n\ttemp[newList.length-1] = newList[0];\n\tfor (int i = 1; i < newList.length-1; i++)\n\t{\n\t\ttemp[i] = newList[i];\n\t}\n\treturn temp;\n}",
    "{\n\tlong[] temp = newList[0];\n\tnewList[0] = newList[$-1];\n\tnewList[$-1] = temp;\n\treturn newList;\n}",
    "{\n\tlong[] temp = newList[0];\n\tnewList[0] = newList[$-1];\n\tnewList[$-1] = temp;\n\treturn newList;\n}",
    "{\n\tlong[] temp = new long[newList.length];\n\ttemp[0] = newList[newList.length - 1];\n\ttemp[newList.length - 1] = newList[0];\n\t\n\tfor(int i = 1; i < newList.length - 1; i++)\n\t{\n\t\ttemp[i] = newList[i];\n\t}\n\treturn temp;\n}",
    "{\n\tlong temp = newList[0];\n\tnewList[0] = newList[$-1];\n\tnewList[$-1] = temp;\n\treturn newList;\n}",
    "{\n\tlong[] temp = newList[0];\n\tnewList[0] = newList[$-1];\n\tnewList[$-1] = temp;\n\treturn newList;\n}",
    "{\n\tlong[] tempList = new long[newList.length];\n\ttempList[0] = newList[newList.length - 1];\n\ttempList[newList.length - 1] = newList[0];\n\tfor (int i = 1; i < newList.length - 1; i++) \n\t{\n\t\ttempList[i] = newList[i];\n\t}\n\treturn tempList;\n}",
    "{\n\tlong[] temp = new long[newList.length];\n\ttemp[0] = newList[newList.length-1];\n\ttemp[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\ttemp[i] = newList[i];\n\t}\n\treturn temp;\n}",
    "{\n\tlong[] temp = newList[0];\n\tnewList[0] = newList[$-1];\n\tnewList[$-1] = temp;\n\treturn newList;\n}",
    "{\n\tlong[] temp = newList[0..$-1];\n\tnewList[0] = newList[$-1];\n\tnewList[$-1] = temp[0];\n\treturn newList;\n}",
    "{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor(int i=1;i<newList.length-1;i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}",
    "{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length - 1];\n\tnewList2[newList.length - 1] = newList[0];\n\tfor (int i = 1; i < newList.length - 1; i++) \n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}",
    "{\n\tlong[] temp = new long[newList.length];\n\ttemp[0] = newList[newList.length - 1];\n\ttemp[newList.length - 1] = newList[0];\n\tfor (int i = 1; i < newList.length - 1; i++) \n\t{\n\t\ttemp[i] = newList[i];\n\t}\n\treturn temp;\n}",
    "{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor (int i = 1; i < newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}",
    "{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}",
    "{\n\tlong[] temp = new long[newList.length];\n\ttemp[0] = newList[newList.length-1];\n\ttemp[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\ttemp[i] = newList[i];\n\t}\n\treturn temp;\n}",
    "{\n\tlong[] temp = new long[newList.length];\n\ttemp[0] = newList[newList.length-1];\n\ttemp[newList.length-1] = newList[0];\n\tfor (int i = 1; i < newList.length-1; i++)\n\t{\n\t\ttemp[i] = newList[i];\n\t}\n\treturn temp;\n}",
    "{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}",
    "{\n\tlong[] temp = newList[0..$-1];\n\tnewList[0] = newList[$-1];\n\tnewList[$-1] = temp[0];\n\treturn newList;\n}",
    "{\n\tlong[] temp = new long[newList.length];\n\ttemp[0] = newList[newList.length-1];\n\ttemp[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\ttemp[i] = newList[i];\n\t}\n\treturn temp;\n}",
    "{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\t\n\tfor(int i=1; i<newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}",
    "{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length - 1];\n\tnewList2[newList.length - 1] = newList[0];\n\tfor (int i = 1; i < newList.length - 1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}",
    "{\n\tlong[] temp = new long[newList.length];\n\ttemp[0] = newList[newList.length-1];\n\ttemp[newList.length-1] = newList[0];\n\tfor (int i = 1; i < newList.length-1; i++)\n\t{\n\t\ttemp[i] = newList[i];\n\t}\n\treturn temp;\n}",
    "{\n\tlong[] temp = new long[newList.length];\n\ttemp[0] = newList[newList.length-1];\n\ttemp[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\ttemp[i] = newList[i];\n\t}\n\treturn temp;\n}",
    "{\n\tlong[] temp = newList[0];\n\tnewList[0] = newList[$-1];\n\tnewList[$-1] = temp;\n\treturn newList;\n}",
    "{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}",
    "{\n\tlong[] temp = newList;\n\tlong temp1 = temp[0];\n\ttemp[0] = temp[$-1];\n\ttemp[$-1] = temp1;\n\treturn temp;\n}",
    "{\n\tlong[] temp = new long[newList.length];\n\ttemp[0] = newList[newList.length-1];\n\ttemp[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\ttemp[i] = newList[i];\n\t}\n\treturn temp;\n}",
    "{\n\tlong[] temp = newList;\n\tlong temp_var = temp[0];\n\ttemp[0] = temp[$-1];\n\ttemp[$-1] = temp_var;\n\treturn temp;\n}",
    "{\n\tlong[] tempList = newList;\n\tlong temp = tempList[0];\n\ttempList[0] = tempList[$-1];\n\ttempList[$-1] = temp;\n\treturn tempList;\n}",
    "{\n\tlong[] temp = new long[newList.length];\n\ttemp[0] = newList[newList.length-1];\n\ttemp[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\ttemp[i] = newList[i];\n\t}\n\treturn temp;\n}",
    "{\n\tlong[] temp = newList[0];\n\tnewList[0] = newList[$-1];\n\tnewList[$-1] = temp;\n\treturn newList;\n}",
    "{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length - 1];\n\tnewList2[newList.length - 1] = newList[0];\n\tfor(int i = 1; i < newList.length - 1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}",
    "{\n\tlong[] temp = newList[0];\n\tnewList[0] = newList[$-1];\n\tnewList[$-1] = temp;\n\treturn newList;\n}",
    "{\n\tlong[] temp = new long[newList.length];\n\ttemp[0] = newList[newList.length-1];\n\ttemp[newList.length-1] = newList[0];\n\tfor (int i = 1; i < newList.length-1; i++)\n\t{\n\t\ttemp[i] = newList[i];\n\t}\n\treturn temp;\n}",
    "{\n\tlong[] temp = new long[newList.length];\n\ttemp[0] = newList[newList.length-1];\n\ttemp[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\ttemp[i] = newList[i];\n\t}\n\treturn temp;\n}",
    "{\n\tlong[] temp = new long[newList.length];\n\ttemp[0] = newList[newList.length-1];\n\ttemp[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length - 1; i++)\n\t{\n\t\ttemp[i] = newList[i];\n\t}\n\treturn temp;\n}",
    "{\n\tlong[] temp = newList;\n\tlong[] temp2 = newList;\n\tlong[] temp3 = newList;\n\ttemp = temp[0];\n\ttemp2 = temp2[$-1];\n\ttemp3[0] = temp2;\n\ttemp3[$-1] = temp;\n\treturn temp3;\n}",
    "{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}",
    "{\n\tlong[] temp = newList[0];\n\tnewList[0] = newList[$-1];\n\tnewList[$-1] = temp;\n\treturn newList;\n}",
    "{\n\tlong[] temp = new long[newList.length];\n\ttemp[0] = newList[newList.length - 1];\n\ttemp[newList.length - 1] = newList[0];\n\tfor (int i = 1; i < newList.length - 1; i++) \n\t{\n\t\ttemp[i] = newList[i];\n\t}\n\treturn temp;\n}",
    "{\n\tlong[] temp = new long[newList.length];\n\ttemp[0] = newList[newList.length - 1];\n\ttemp[newList.length - 1] = newList[0];\n\tfor (int i = 1; i < newList.length - 1; i++)\n\t\ttemp[i] = newList[i];\n\treturn temp;\n}",
    "{\n\tlong temp = newList[0];\n\tnewList[0] = newList[$-1];\n\tnewList[$-1] = temp;\n\treturn newList;\n}",
    "{\n\tlong[] temp = newList[0];\n\tnewList[0] = newList[$-1];\n\tnewList[$-1] = temp;\n\treturn newList;\n}",
    "{\n\tlong[] temp = new long[newList.length];\n\ttemp[0] = newList[newList.length-1];\n\ttemp[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\ttemp[i] = newList[i];\n\t}\n\treturn temp;\n}",
    "{\n\tlong[] temp = newList[0];\n\tnewList[0] = newList[$-1];\n\tnewList[$-1] = temp;\n\treturn newList;\n}",
    "{\n\tlong[] tempList = new long[newList.length];\n\ttempList[0] = newList[newList.length-1];\n\ttempList[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\ttempList[i] = newList[i];\n\t}\n\treturn tempList;\n}",
    "{\n\tlong[] temp = newList[0];\n\tnewList[0] = newList[$-1];\n\tnewList[$-1] = temp;\n\treturn newList;\n}",
    "{\n\tlong[] temp = newList[0];\n\tnewList[0] = newList[$-1];\n\tnewList[$-1] = temp;\n\treturn newList;\n}",
    "{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length - 1];\n\tnewList2[newList.length - 1] = newList[0];\n\t\n\tfor(int i = 1; i < newList.length - 1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\t\n\treturn newList2;\n}",
    "{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor (int i = 1; i < newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}",
    "{\n\tlong[] temp = newList;\n\tlong temp1 = temp[0];\n\ttemp[0] = temp[$-1];\n\ttemp[$-1] = temp1;\n\treturn temp;\n}",
    "{\n\tlong[] temp = new long[newList.length];\n\ttemp[0] = newList[newList.length-1];\n\ttemp[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\ttemp[i] = newList[i];\n\t}\n\treturn temp;\n}",
    "{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}",
    "{\n\tlong[] swapList = newList;\n\tlong temp = swapList[0];\n\tswapList[0] = swapList[swapList.length-1];\n\tswapList[swapList.length-1] = temp;\n\treturn swapList;\n}",
    "{\n\tlong[] list = newList;\n\tlong temp = list[0];\n\tlist[0] = list[$-1];\n\tlist[$-1] = temp;\n\treturn list;\n}",
    "{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}",
    "{\n\tlong[] temp = newList[0..$-1];\n\ttemp[0] = newList[$-1];\n\ttemp[$-1] = newList[0];\n\treturn temp;\n}",
    "{\n\tlong[] temp = newList[0];\n\tnewList[0] = newList[$-1];\n\tnewList[$-1] = temp;\n\treturn newList;\n}",
    "{\n\tlong[] temp = new long[newList.length];\n\ttemp[0] = newList[newList.length-1];\n\ttemp[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\ttemp[i] = newList[i];\n\t}\n\treturn temp;\n}",
    "{\n\tlong[] temp = new long[newList.length];\n\ttemp[0] = newList[newList.length-1];\n\ttemp[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\ttemp[i] = newList[i];\n\t}\n\treturn temp;\n}",
    "{\n\tlong[] newList = [1,2,3,4,5,6,7,8,9,10];\n\tlong[] newList2 = newList[0..$-1];\n\tnewList2[0] = newList[$-1];\n\tnewList2[$-1] = newList[0];\n\treturn newList2;\n}",
    "{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}",
    "{\n\tlong[] tempList = newList;\n\tint first = 0;\n\tint last = newList.length - 1;\n\tlong temp = tempList[first];\n\ttempList[first] = tempList[last];\n\ttempList[last] = temp;\n\treturn tempList;\n}",
    "{\n\tlong[] temp = newList;\n\tlong temp_var = temp[0];\n\ttemp[0] = temp[$-1];\n\ttemp[$-1] = temp_var;\n\treturn temp;\n}",
    "{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor (int i = 1; i < newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}",
    "{\n\tlong[] temp = newList;\n\tlong temp_val = temp[0];\n\ttemp[0] = temp[$-1];\n\ttemp[$-1] = temp_val;\n\treturn temp;\n}",
    "{\n\tlong[] temp = newList[0];\n\tnewList[0] = newList[$-1];\n\tnewList[$-1] = temp;\n\treturn newList;\n}",
    "{\n\tlong[] tempList = newList.dup;\n\ttempList[0] = newList[$-1];\n\ttempList[$-1] = newList[0];\n\treturn tempList;\n}",
    "{\n\tlong[] tempList = new long[newList.length];\n\ttempList[0] = newList[newList.length - 1];\n\ttempList[newList.length - 1] = newList[0];\n\tfor (int i = 1; i < newList.length - 1; i++)\n\t{\n\t\ttempList[i] = newList[i];\n\t}\n\treturn tempList;\n}",
    "{\n\tlong[] tempList = new long[newList.length];\n\ttempList[0] = newList[newList.length - 1];\n\ttempList[newList.length - 1] = newList[0];\n\t\n\tfor(int i = 1; i < newList.length - 1; i++)\n\t{\n\t\ttempList[i] = newList[i];\n\t}\n\t\n\treturn tempList;\n}",
    "{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor (int i = 1; i < newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}",
    "{\n\tlong[] temp = new long[newList.length];\n\ttemp[0] = newList[newList.length - 1];\n\ttemp[newList.length - 1] = newList[0];\n\tfor (int i = 1; i < newList.length - 1; i++) \n\t{\n\t\ttemp[i] = newList[i];\n\t}\n\treturn temp;\n}",
    "{\n\tlong[] result = new long[newList.length];\n\tresult[0] = newList[newList.length - 1];\n\tresult[newList.length - 1] = newList[0];\n\tfor (int i = 1; i < newList.length - 1; i++)\n\t{\n\t\tresult[i] = newList[i];\n\t}\n\treturn result;\n}",
    "{\n\tlong[] tempList = newList;\n\tlong temp = tempList[0];\n\ttempList[0] = tempList[$-1];\n\ttempList[$-1] = temp;\n\treturn tempList;\n}",
    "{\n\tlong[] temp = new long[newList.length];\n\ttemp[0] = newList[newList.length-1];\n\ttemp[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\ttemp[i] = newList[i];\n\t}\n\treturn temp;\n}",
    "{\n\tlong[] temp = newList[0];\n\tnewList[0] = newList[$-1];\n\tnewList[$-1] = temp;\n\treturn newList;\n}",
    "{\n\tlong[] temp = new long[newList.length];\n\ttemp[0] = newList[newList.length-1];\n\ttemp[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\ttemp[i] = newList[i];\n\t}\n\treturn temp;\n}",
    "{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}",
    "{\n\tlong[] tempList = newList;\n\tlong temp = tempList[0];\n\ttempList[0] = tempList[$-1];\n\ttempList[$-1] = temp;\n\treturn tempList;\n}",
    "{\n\tlong[] tempList = new long[newList.length];\n\ttempList[0] = newList[newList.length-1];\n\ttempList[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\ttempList[i] = newList[i];\n\t}\n\treturn tempList;\n}",
    "{\n\tlong[] temp = new long[newList.length];\n\ttemp[0] = newList[newList.length-1];\n\ttemp[newList.length-1] = newList[0];\n\tfor(int i=1; i<newList.length-1; i++)\n\t{\n\t\ttemp[i] = newList[i];\n\t}\n\treturn temp;\n}",
    "{\n\tlong[] temp = new long[newList.length];\n\ttemp[0] = newList[newList.length-1];\n\ttemp[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\ttemp[i] = newList[i];\n\t}\n\treturn temp;\n}",
    "{\n\tlong[] temp = newList[0];\n\tnewList[0] = newList[$-1];\n\tnewList[$-1] = temp;\n\treturn newList;\n}",
    "{\n\tlong[] temp = newList.dup;\n\ttemp[0] = newList[$-1];\n\ttemp[$-1] = newList[0];\n\treturn temp;\n}",
    "{\n\tlong[] tempList = newList;\n\tlong temp = tempList[0];\n\ttempList[0] = tempList[$-1];\n\ttempList[$-1] = temp;\n\treturn tempList;\n}",
    "{\n\tlong[] temp = new long[newList.length];\n\ttemp[0] = newList[newList.length - 1];\n\ttemp[newList.length - 1] = newList[0];\n\tfor(int i = 1; i < newList.length - 1; i++)\n\t{\n\t\ttemp[i] = newList[i];\n\t}\n\treturn temp;\n}",
    "{\n\tlong[] result = new long[newList.length];\n\tresult[0] = newList[newList.length-1];\n\tresult[newList.length-1] = newList[0];\n\treturn result;\n}",
    "{\n\tlong[] temp = new long[newList.length];\n\ttemp[0] = newList[newList.length-1];\n\ttemp[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\ttemp[i] = newList[i];\n\t}\n\treturn temp;\n}",
    "{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}",
    "{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}",
    "{\n\tlong[] temp = new long[newList.length];\n\ttemp[0] = newList[newList.length-1];\n\ttemp[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\ttemp[i] = newList[i];\n\t}\n\treturn temp;\n}",
    "{\n\tlong[] tempList = new long[newList.length];\n\ttempList[0] = newList[newList.length - 1];\n\ttempList[newList.length - 1] = newList[0];\n\treturn tempList;\n}",
    "{\n\tlong[] temp = new long[newList.length];\n\ttemp[0] = newList[newList.length-1];\n\ttemp[newList.length-1] = newList[0];\n\tfor(int i=1; i<newList.length-1; i++)\n\t{\n\t\ttemp[i] = newList[i];\n\t}\n\treturn temp;\n}",
    "{\n\tlong[] tempList = new long[newList.length];\n\ttempList[0] = newList[newList.length-1];\n\ttempList[newList.length-1] = newList[0];\n\treturn tempList;\n}",
    "{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length - 1];\n\tnewList2[newList.length - 1] = newList[0];\n\tfor (int i = 1; i < newList.length - 1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}",
    "{\n\tlong[] result = new long[newList.length];\n\tresult[0] = newList[newList.length-1];\n\tresult[newList.length-1] = newList[0];\n\treturn result;\n}",
    "{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\treturn newList2;\n}",
    "{\n\tlong[] temp = new long[newList.length];\n\ttemp[0] = newList[newList.length-1];\n\ttemp[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\ttemp[i] = newList[i];\n\t}\n\treturn temp;\n}",
    "{\n\tlong[] tempList = newList;\n\tlong temp = tempList[0];\n\ttempList[0] = tempList[$-1];\n\ttempList[$-1] = temp;\n\treturn tempList;\n}",
    "{\n\tlong[] temp = new long[newList.length];\n\ttemp[0] = newList[newList.length-1];\n\ttemp[newList.length-1] = newList[0];\n\t\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\ttemp[i] = newList[i];\n\t}\n\t\n\treturn temp;\n}",
    "{\n\tlong[] temp = new long[newList.length];\n\ttemp[0] = newList[newList.length - 1];\n\ttemp[newList.length - 1] = newList[0];\n\tfor (int i = 1; i < newList.length - 1; i++)\n\t{\n\t\ttemp[i] = newList[i];\n\t}\n\treturn temp;\n}",
    "{\n\tlong temp = newList[0];\n\tnewList[0] = newList[$-1];\n\tnewList[$-1] = temp;\n\treturn newList;\n}",
    "{\n\tlong[] temp = new long[newList.length];\n\ttemp[0] = newList[newList.length-1];\n\ttemp[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\ttemp[i] = newList[i];\n\t}\n\treturn temp;\n}",
    "{\n\tlong[] temp = newList;\n\ttemp[0] = newList[newList.length-1];\n\ttemp[newList.length-1] = newList[0];\n\treturn temp;\n}",
    "{\n\tlong[] temp = newList;\n\tlong temp_var = temp[0];\n\ttemp[0] = temp[$-1];\n\ttemp[$-1] = temp_var;\n\treturn temp;\n}",
    "{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}",
    "{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}",
    "{\n\tlong[] temp = new long[newList.length];\n\ttemp[0] = newList[newList.length - 1];\n\ttemp[newList.length - 1] = newList[0];\n\t\n\tfor(int i = 1; i < newList.length - 1; i++)\n\t{\n\t\ttemp[i] = newList[i];\n\t}\n\t\n\treturn temp;\n}",
    "{\n\tlong[] temp = new long[newList.length];\n\ttemp[0] = newList[newList.length-1];\n\ttemp[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\ttemp[i] = newList[i];\n\t}\n\treturn temp;\n}",
    "{\n\tlong[] result = new long[newList.length];\n\tresult[0] = newList[newList.length-1];\n\tresult[newList.length-1] = newList[0];\n\treturn result;\n}",
    "{\n\tlong[] result = newList;\n\tlong temp = result[0];\n\tresult[0] = result[result.length - 1];\n\tresult[result.length - 1] = temp;\n\treturn result;\n}",
    "{\n\tlong[] tempList = newList;\n\tlong temp = tempList[0];\n\ttempList[0] = tempList[tempList.length-1];\n\ttempList[tempList.length-1] = temp;\n\treturn tempList;\n}",
    "{\n\tlong[] temp = new long[newList.length];\n\ttemp[0] = newList[newList.length - 1];\n\ttemp[newList.length - 1] = newList[0];\n\tfor(int i = 1; i < newList.length - 1; i++)\n\t{\n\t\ttemp[i] = newList[i];\n\t}\n\treturn temp;\n}",
    "{\n\tlong[] temp = newList[0];\n\tnewList[0] = newList[$-1];\n\tnewList[$-1] = temp;\n\treturn newList;\n}",
    "{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}",
    "{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length - 1];\n\tnewList2[newList.length - 1] = newList[0];\n\tfor (int i = 1; i < newList.length - 1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}",
    "{\n\tlong[] temp = new long[newList.length];\n\ttemp[0] = newList[newList.length - 1];\n\ttemp[newList.length - 1] = newList[0];\n\tfor (int i = 1; i < newList.length - 1; i++)\n\t{\n\t\ttemp[i] = newList[i];\n\t}\n\treturn temp;\n}",
    "{\n\tlong[] temp = new long[newList.length];\n\ttemp[0] = newList[newList.length-1];\n\ttemp[newList.length-1] = newList[0];\n\tfor(int i = 1; i < newList.length-1; i++)\n\t{\n\t\ttemp[i] = newList[i];\n\t}\n\treturn temp;\n}",
    "{\n\tlong[] temp = new long[newList.length];\n\ttemp[0] = newList[newList.length - 1];\n\ttemp[newList.length - 1] = newList[0];\n\tfor (int i = 1; i < newList.length - 1; i++) \n\t{\n\t\ttemp[i] = newList[i];\n\t}\n\treturn temp;\n}",
    "{\n\tlong[] temp = new long[newList.length];\n\ttemp[0] = newList[newList.length - 1];\n\ttemp[newList.length - 1] = newList[0];\n\tfor (int i = 1; i < newList.length - 1; i++)\n\t{\n\t\ttemp[i] = newList[i];\n\t}\n\treturn temp;\n}",
    "{\n\tlong[] tempList = new long[newList.length];\n\ttempList[0] = newList[newList.length - 1];\n\ttempList[newList.length - 1] = newList[0];\n\tfor (int i = 1; i < newList.length - 1; i++) \n\t{\n\t\ttempList[i] = newList[i];\n\t}\n\treturn tempList;\n}",
    "{\n\tlong[] temp = new long[newList.length];\n\ttemp[0] = newList[newList.length - 1];\n\ttemp[newList.length - 1] = newList[0];\n\tfor (int i = 1; i < newList.length - 1; i++)\n\t{\n\t\ttemp[i] = newList[i];\n\t}\n\treturn temp;\n}",
    "{\n\tlong[] tempList = newList;\n\tlong temp = tempList[0];\n\ttempList[0] = tempList[$-1];\n\ttempList[$-1] = temp;\n\treturn tempList;\n}",
    "{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length - 1];\n\tnewList2[newList.length - 1] = newList[0];\n\tfor(int i = 1; i < newList.length - 1; i++)\n\t{\n\t\tnewList2[i] = newList[i];\n\t}\n\treturn newList2;\n}",
    "{\n\tlong[] temp = newList[0..$-1];\n\tlong[] temp2 = newList[1..$];\n\ttemp2[$-1] = newList[0];\n\ttemp[0] = newList[$-1];\n\treturn temp ~ temp2;\n}",
    "{\n\tlong[] list = newList.dup;\n\tlong temp = list[0];\n\tlist[0] = list[$-1];\n\tlist[$-1] = temp;\n\treturn list;\n}",
    "{\n\tlong[] tempList = newList;\n\tlong temp = tempList[0];\n\ttempList[0] = tempList[$-1];\n\ttempList[$-1] = temp;\n\treturn tempList;\n}",
    "{\n\tlong[] tempList = new long[newList.length];\n\ttempList[0] = newList[newList.length - 1];\n\ttempList[newList.length - 1] = newList[0];\n\t\n\tfor(int i = 1; i < newList.length - 1; i++)\n\t{\n\t\ttempList[i] = newList[i];\n\t}\n\t\n\treturn tempList;\n}",
    "{\n\tlong[] newList2 = new long[newList.length];\n\tnewList2[0] = newList[newList.length-1];\n\tnewList2[newList.length-1] = newList[0];\n\treturn newList2;\n}",
    "{\n\tlong[] temp = newList[0];\n\tnewList[0] = newList[$-1];\n\tnewList[$-1] = temp;\n\treturn newList;\n}",
    "{\n\tlong[] temp = new long[newList.length];\n\ttemp[0] = newList[newList.length - 1];\n\ttemp[newList.length - 1] = newList[0];\n\tfor (int i = 1; i < newList.length - 1; i++)\n\t{\n\t\ttemp[i] = newList[i];\n\t}\n\treturn temp;\n}",
    "{\n\tlong[] result = new long[newList.length];\n\tresult[0] = newList[newList.length-1];\n\tresult[newList.length-1] = newList[0];\n\treturn result;\n}",
    "{\n\tlong[] a = newList;\n\tlong temp;\n\ttemp = a[0];\n\ta[0] = a[a.length-1];\n\ta[a.length-1] = temp;\n\treturn a;\n}",
    "{\n\tlong temp = newList[0];\n\tnewList[0] = newList[$-1];\n\tnewList[$-1] = temp;\n\treturn newList;\n}",
    "{\n\tlong[] temp = newList[0..$-1];\n\tlong[] temp2 = newList[$-1..$];\n\treturn temp2 ~ temp;\n}",
    "{\n\tlong[] list = newList;\n\tlong temp = list[0];\n\tlist[0] = list[$-1];\n\tlist[$-1] = temp;\n\treturn list;\n}"
  ]
}