{
  "name": "mbpp_74_is_samepatterns",
  "language": "d",
  "prompt": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_74_is_samepatterns.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tint i = 0;\n\tforeach(string color; colors)\n\t{\n\t\tif(color != patterns[i])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\ti = (i + 1) % patterns.length;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517191,
      "stdout": "",
      "stderr": "/tmp/tmpmjibf3xc.d(16): Error: cannot implicitly convert expression `cast(ulong)(i + 1) % patterns.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmjibf3xc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tif (colors.length != patterns.length)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < colors.length; i++)\n\t{\n\t\tif (colors[i] != patterns[i])\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517192,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpfl51wbgg.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x428c45]\n??:? void tmpfl51wbgg.__unittest_L19_C1() [0x427c83]\n??:? void tmpfl51wbgg.__modtest() [0x427eb0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d593]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42899e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a441]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a4d0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a3cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428975]\n??:? runModuleUnitTests [0x42d369]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429108]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint l = 0;\n\tint m = 0;\n\tint n = 0;\n\tint o = 0;\n\tint p = 0;\n\tint q = 0;\n\tint r = 0;\n\tint s = 0;\n\tint t = 0;\n\tint u = 0;\n\tint v = 0;\n\tint w = 0;\n\tint x = 0;\n\tint y = 0;\n\tint z = 0;\n\t\n\tint a = 0;\n\tint b = 0;\n\tint c = 0;\n\tint d = 0;\n\tint e = 0;\n\tint f = 0;\n\tint g = 0;\n\tint h = 0;\n\tint ii = 0;\n\tint jj = 0;\n\tint kk = 0;\n\tint ll = 0;\n\tint mm = 0;\n\tint nn = 0;\n\tint oo = 0;\n\tint pp = 0;\n\tint qq = 0;\n\tint rr = 0;\n\tint ss = 0;\n\tint tt = 0;\n\tint uu = 0;\n\tint vv = 0;\n\tint ww = 0;\n\tint xx = 0;\n\tint yy = 0;\n\tint zz = 0;\n\t\n\tint aa = 0;\n\tint bb = 0;\n\tint cc = 0;\n\tint dd = 0;\n\tint ee = 0;\n\tint ff = 0;\n\tint gg = 0;\n\tint hh = 0;\n\tint iii = 0;\n\tint jjj = 0;\n\tint kkk = 0;\n\tint lll = 0;\n\tint mmm = 0;\n\tint nnn = 0;\n\tint ooo = 0;\n\tint ppp = 0;\n\tint qqq = 0;\n\tint rrr = 0;\n\tint sss = 0;\n\tint ttt = 0;\n\tint uuu = 0;\n\tint vvv = 0;\n\tint www = 0;\n\tint xxx = 0\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517191,
      "stdout": "",
      "stderr": "/tmp/tmpcw73uijm.d(79): Error: semicolon expected, not `unittest`\n/tmp/tmpcw73uijm.d(79): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcw73uijm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint l = 0;\n\tint m = 0;\n\tint n = 0;\n\tint o = 0;\n\tint p = 0;\n\tint q = 0;\n\tint r = 0;\n\tint s = 0;\n\tint t = 0;\n\tint u = 0;\n\tint v = 0;\n\tint w = 0;\n\tint x = 0;\n\tint y = 0;\n\tint z = 0;\n\tint aa = 0;\n\tint bb = 0;\n\tint cc = 0;\n\tint dd = 0;\n\tint ee = 0;\n\tint ff = 0;\n\tint gg = 0;\n\tint hh = 0;\n\tint ii = 0;\n\tint jj = 0;\n\tint kk = 0;\n\tint ll = 0;\n\tint mm = 0;\n\tint nn = 0;\n\tint oo = 0;\n\tint pp = 0;\n\tint qq = 0;\n\tint rr = 0;\n\tint ss = 0;\n\tint tt = 0;\n\tint uu = 0;\n\tint vv = 0;\n\tint ww = 0;\n\tint xx = 0;\n\tint yy = 0;\n\tint zz = 0;\n\tint aaa = 0;\n\tint bbb = 0;\n\tint ccc = 0;\n\tint ddd = 0;\n\tint eee = 0;\n\tint fff = 0;\n\tint ggg = 0;\n\tint hhh = 0;\n\tint iii = 0;\n\tint jjj = 0;\n\tint kkk = 0;\n\tint lll = 0;\n\tint mmm = 0;\n\tint nnn = 0;\n\tint ooo = 0;\n\tint ppp = 0;\n\tint qqq = 0;\n\tint rrr = 0;\n\tint sss = 0;\n\tint ttt = 0;\n\tint uuu = 0;\n\tint vvv = 0;\n\tint www = 0;\n\tint\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517191,
      "stdout": "",
      "stderr": "/tmp/tmpgwtpcwae.d(77): Error: no identifier for declarator `int`\n/tmp/tmpgwtpcwae.d(77): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgwtpcwae.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tif (colors.length != patterns.length)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < colors.length; i++)\n\t{\n\t\tif (colors[i] != patterns[i])\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517192,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3ksxl9ug.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x428c45]\n??:? void tmp3ksxl9ug.__unittest_L20_C1() [0x427c83]\n??:? void tmp3ksxl9ug.__modtest() [0x427eb0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d593]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42899e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a441]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a4d0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a3cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428975]\n??:? runModuleUnitTests [0x42d369]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429108]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tint i = 0;\n\tforeach(string color; colors)\n\t{\n\t\tif(color != patterns[i])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\ti++;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517192,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpvc6frgop.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x428c35]\n??:? void tmpvc6frgop.__unittest_L20_C1() [0x427c6f]\n??:? void tmpvc6frgop.__modtest() [0x427e9c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d583]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42898e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a431]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a4c0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a3bd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428965]\n??:? runModuleUnitTests [0x42d359]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4290f8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tif (colors.length != patterns.length)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < colors.length; i++)\n\t{\n\t\tif (colors[i] != patterns[i])\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517192,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3ksxl9ug.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x428c45]\n??:? void tmp3ksxl9ug.__unittest_L20_C1() [0x427c83]\n??:? void tmp3ksxl9ug.__modtest() [0x427eb0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d593]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42899e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a441]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a4d0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a3cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428975]\n??:? runModuleUnitTests [0x42d369]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429108]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tif(colors.length != patterns.length)\n\t\treturn false;\n\t\n\tfor(int i = 0; i < colors.length; i++)\n\t{\n\t\tif(colors[i] == \"red\")\n\t\t{\n\t\t\tif(patterns[i] != \"circle\")\n\t\t\t\treturn false;\n\t\t}\n\t\telse if(colors[i] == \"blue\")\n\t\t{\n\t\t\tif(patterns[i] != \"square\")\n\t\t\t\treturn false;\n\t\t}\n\t\telse if(colors[i] == \"green\")\n\t\t{\n\t\t\tif(patterns[i] != \"triangle\")\n\t\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517192,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpoccv7tsr.d(39): unittest failure\n----------------\n??:? _d_unittestp [0x428dd5]\n??:? void tmpoccv7tsr.__unittest_L35_C1() [0x427e13]\n??:? void tmpoccv7tsr.__modtest() [0x428040]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d723]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428b2e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a5d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a660]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a55d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428b05]\n??:? runModuleUnitTests [0x42d4f9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429298]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tif (colors.length != patterns.length) return false;\n\t\n\tfor (int i = 0; i < colors.length; i++)\n\t{\n\t\tif (colors[i] == patterns[i]) continue;\n\t\telse if (colors[i] == \"R\" && patterns[i] == \"G\") return false;\n\t\telse if (colors[i] == \"G\" && patterns[i] == \"B\") return false;\n\t\telse if (colors[i] == \"B\" && patterns[i] == \"R\") return false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517192,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpi4tertao.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x428e7d]\n??:? void tmpi4tertao.__unittest_L21_C1() [0x427f7f]\n??:? void tmpi4tertao.__modtest() [0x4280e4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d7cb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428bd6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a679]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a708]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a605]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428bad]\n??:? runModuleUnitTests [0x42d5a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429340]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tint i = 0;\n\tforeach(string pattern; patterns)\n\t{\n\t\tif(pattern == \"even\")\n\t\t{\n\t\t\tif(colors[i] != colors[i+1])\n\t\t\t\treturn false;\n\t\t\ti += 2;\n\t\t}\n\t\telse if(pattern == \"odd\")\n\t\t{\n\t\t\tif(colors[i] == colors[i+1])\n\t\t\t\treturn false;\n\t\t\ti += 2;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517192,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp1oled3ai.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x428d85]\n??:? void tmp1oled3ai.__unittest_L27_C1() [0x427e8b]\n??:? void tmp1oled3ai.__modtest() [0x427ff0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d6d3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428ade]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a581]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a610]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a50d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428ab5]\n??:? runModuleUnitTests [0x42d4a9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429248]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tint i = 0;\n\tforeach(string color; colors)\n\t{\n\t\tif(color != patterns[i])\n\t\t\treturn false;\n\t\ti++;\n\t\tif(i == patterns.length)\n\t\t\ti = 0;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517192,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmps194herz.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x428c4d]\n??:? void tmps194herz.__unittest_L20_C1() [0x427c87]\n??:? void tmps194herz.__modtest() [0x427eb4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d59b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4289a6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a449]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a4d8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a3d5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42897d]\n??:? runModuleUnitTests [0x42d371]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429110]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tif(colors.length != patterns.length)\n\t\treturn false;\n\t\n\tfor(int i = 0; i < colors.length; i++)\n\t{\n\t\tif(colors[i] == patterns[i])\n\t\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517192,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpxl32a4vj.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x428c45]\n??:? void tmpxl32a4vj.__unittest_L19_C1() [0x427c83]\n??:? void tmpxl32a4vj.__modtest() [0x427eb0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d593]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42899e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a441]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a4d0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a3cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428975]\n??:? runModuleUnitTests [0x42d369]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429108]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tif (colors.length != patterns.length) return false;\n\t\n\tfor (int i = 0; i < patterns.length; i++)\n\t{\n\t\tif (patterns[i] == \"even\" && colors[i] % 2 == 0) continue;\n\t\tif (patterns[i] == \"odd\" && colors[i] % 2 == 1) continue;\n\t\tif (patterns[i] == \"up\" && colors[i] > colors[i - 1]) continue;\n\t\tif (patterns[i] == \"down\" && colors[i] < colors[i - 1]) continue;\n\t\t\n\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517191,
      "stdout": "",
      "stderr": "/tmp/tmpi5j7i4_m.d(13): Error: incompatible types for `(colors[cast(ulong)i]) % (2)`: `string` and `int`\n/tmp/tmpi5j7i4_m.d(14): Error: incompatible types for `(colors[cast(ulong)i]) % (2)`: `string` and `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi5j7i4_m.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tif (colors.length != patterns.length)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < colors.length; i++)\n\t{\n\t\tif (colors[i] != patterns[i])\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517192,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3ksxl9ug.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x428c45]\n??:? void tmp3ksxl9ug.__unittest_L20_C1() [0x427c83]\n??:? void tmp3ksxl9ug.__modtest() [0x427eb0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d593]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42899e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a441]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a4d0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a3cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428975]\n??:? runModuleUnitTests [0x42d369]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429108]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tif (colors.length != patterns.length)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < colors.length; i++)\n\t{\n\t\tif (colors[i] != patterns[i])\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517192,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpfl51wbgg.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x428c45]\n??:? void tmpfl51wbgg.__unittest_L19_C1() [0x427c83]\n??:? void tmpfl51wbgg.__modtest() [0x427eb0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d593]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42899e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a441]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a4d0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a3cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428975]\n??:? runModuleUnitTests [0x42d369]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429108]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tif(colors.length != patterns.length)\n\t\treturn false;\n\t\n\tfor(int i = 0; i < colors.length; i++)\n\t{\n\t\tif(colors[i] != patterns[i])\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517192,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpd8rjiz7m.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x428c45]\n??:? void tmpd8rjiz7m.__unittest_L19_C1() [0x427c83]\n??:? void tmpd8rjiz7m.__modtest() [0x427eb0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d593]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42899e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a441]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a4d0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a3cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428975]\n??:? runModuleUnitTests [0x42d369]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429108]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tint i = 0;\n\tint j = 0;\n\twhile(i < colors.length && j < patterns.length)\n\t{\n\t\tif(colors[i] == patterns[j])\n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\ti++;\n\t\t}\n\t}\n\tif(j == patterns.length)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517192,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpigtavt72.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x428c55]\n??:? void tmpigtavt72.__unittest_L32_C1() [0x427c8f]\n??:? void tmpigtavt72.__modtest() [0x427ebc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d5a3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4289ae]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a451]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a4e0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a3dd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428985]\n??:? runModuleUnitTests [0x42d379]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429118]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tif (colors.length != patterns.length)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < colors.length; i++)\n\t{\n\t\tif (colors[i] == \"red\" && patterns[i] != \"circle\")\n\t\t\treturn false;\n\t\tif (colors[i] == \"blue\" && patterns[i] != \"triangle\")\n\t\t\treturn false;\n\t\tif (colors[i] == \"green\" && patterns[i] != \"square\")\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517192,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpy4mvwble.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x428de5]\n??:? void tmpy4mvwble.__unittest_L23_C1() [0x427e23]\n??:? void tmpy4mvwble.__modtest() [0x428050]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d733]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428b3e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a5e1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a670]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a56d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428b15]\n??:? runModuleUnitTests [0x42d509]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4292a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tint i = 0;\n\tforeach(string color; colors)\n\t{\n\t\tif(color != patterns[i])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\ti++;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517192,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpvc6frgop.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x428c35]\n??:? void tmpvc6frgop.__unittest_L20_C1() [0x427c6f]\n??:? void tmpvc6frgop.__modtest() [0x427e9c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d583]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42898e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a431]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a4c0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a3bd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428965]\n??:? runModuleUnitTests [0x42d359]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4290f8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tint i = 0;\n\tforeach(string pattern; patterns)\n\t{\n\t\tif(pattern == \"*\")\n\t\t\tcontinue;\n\t\tif(pattern != colors[i])\n\t\t\treturn false;\n\t\ti++;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517192,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpldss0j68.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x428c6d]\n??:? void tmpldss0j68.__unittest_L20_C1() [0x427cab]\n??:? void tmpldss0j68.__modtest() [0x427ed8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d5bb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4289c6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a469]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a4f8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a3f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42899d]\n??:? runModuleUnitTests [0x42d391]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429130]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tif (colors.length != patterns.length)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < colors.length; i++)\n\t{\n\t\tif (patterns[i] == \"even\" && colors[i] % 2 == 0)\n\t\t\tcontinue;\n\t\telse if (patterns[i] == \"odd\" && colors[i] % 2 == 1)\n\t\t\tcontinue;\n\t\telse if (patterns[i] == \"up\" && colors[i] < colors[i+1])\n\t\t\tcontinue;\n\t\telse if (patterns[i] == \"down\" && colors[i] > colors[i+1])\n\t\t\tcontinue;\n\t\telse\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124041,
      "stdout": "",
      "stderr": "/tmp/tmpn2lfoa5_.d(14): Error: incompatible types for `(colors[cast(ulong)i]) % (2)`: `string` and `int`\n/tmp/tmpn2lfoa5_.d(16): Error: incompatible types for `(colors[cast(ulong)i]) % (2)`: `string` and `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn2lfoa5_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tif (colors.length != patterns.length)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < colors.length; i++)\n\t{\n\t\tif (colors[i] == patterns[i])\n\t\t\tcontinue;\n\t\telse if (patterns[i] == \"*\")\n\t\t\tcontinue;\n\t\telse\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124041,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpays8je5a.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x428c95]\n??:? void tmpays8je5a.__unittest_L23_C1() [0x427cd3]\n??:? void tmpays8je5a.__modtest() [0x427f00]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d5e3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4289ee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a491]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a520]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a41d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x4289c5]\n??:? runModuleUnitTests [0x42d3b9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429158]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tint i = 0;\n\tforeach(string pattern; patterns)\n\t{\n\t\tif(pattern == \"*\")\n\t\t{\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(pattern != colors[i])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\ti++;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124042,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpgzxhm6ws.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x428c75]\n??:? void tmpgzxhm6ws.__unittest_L25_C1() [0x427caf]\n??:? void tmpgzxhm6ws.__modtest() [0x427edc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d5c3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4289ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a471]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a500]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a3fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x4289a5]\n??:? runModuleUnitTests [0x42d399]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429138]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tif (colors.length != patterns.length)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < colors.length; i++)\n\t{\n\t\tif (colors[i] != patterns[i])\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517192,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3ksxl9ug.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x428c45]\n??:? void tmp3ksxl9ug.__unittest_L20_C1() [0x427c83]\n??:? void tmp3ksxl9ug.__modtest() [0x427eb0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d593]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42899e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a441]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a4d0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a3cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428975]\n??:? runModuleUnitTests [0x42d369]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429108]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tif (colors.length != patterns.length) return false;\n\t\n\tfor (int i = 0; i < colors.length; i++)\n\t{\n\t\tif (colors[i] != patterns[i]) return false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124042,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpk3zam_q1.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x428c45]\n??:? void tmpk3zam_q1.__unittest_L18_C1() [0x427c83]\n??:? void tmpk3zam_q1.__modtest() [0x427eb0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d593]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42899e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a441]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a4d0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a3cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428975]\n??:? runModuleUnitTests [0x42d369]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429108]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tif(colors.length != patterns.length)\n\t\treturn false;\n\t\n\tfor(int i = 0; i < patterns.length; i++)\n\t{\n\t\tif(patterns[i] == \"even\")\n\t\t{\n\t\t\tif(colors[i].length % 2 != 0)\n\t\t\t\treturn false;\n\t\t}\n\t\telse if(patterns[i] == \"odd\")\n\t\t{\n\t\t\tif(colors[i].length % 2 == 0)\n\t\t\t\treturn false;\n\t\t}\n\t\telse if(patterns[i] == \"up\")\n\t\t{\n\t\t\tfor(int j = 0; j < colors[i].length - 1; j++)\n\t\t\t{\n\t\t\t\tif(colors[i][j] > colors[i][j + 1])\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\telse if(patterns[i] == \"down\")\n\t\t{\n\t\t\tfor(int j = 0; j < colors[i].length - 1; j++)\n\t\t\t{\n\t\t\t\tif(colors[i][j] < colors[i][j + 1])\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124041,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp9ruvlszk.d(49): unittest failure\n----------------\n??:? _d_unittestp [0x428f7d]\n??:? void tmp9ruvlszk.__unittest_L44_C1() [0x42807f]\n??:? void tmp9ruvlszk.__modtest() [0x4281e4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d8cb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428cd6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a779]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a808]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a705]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428cad]\n??:? runModuleUnitTests [0x42d6a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429440]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint l = 0;\n\tint m = 0;\n\tint n = 0;\n\tint o = 0;\n\tint p = 0;\n\tint q = 0;\n\tint r = 0;\n\tint s = 0;\n\tint t = 0;\n\tint u = 0;\n\tint v = 0;\n\tint w = 0;\n\tint x = 0;\n\tint y = 0;\n\tint z = 0;\n\tint aa = 0;\n\tint ab = 0;\n\tint ac = 0;\n\tint ad = 0;\n\tint ae = 0;\n\tint af = 0;\n\tint ag = 0;\n\tint ah = 0;\n\tint ai = 0;\n\tint aj = 0;\n\tint ak = 0;\n\tint al = 0;\n\tint am = 0;\n\tint an = 0;\n\tint ao = 0;\n\tint ap = 0;\n\tint aq = 0;\n\tint ar = 0;\n\tint as = 0;\n\tint at = 0;\n\tint au = 0;\n\tint av = 0;\n\tint aw = 0;\n\tint ax = 0;\n\tint ay = 0;\n\tint az = 0;\n\tint ba = 0;\n\tint bb = 0;\n\tint bc = 0;\n\tint bd = 0;\n\tint be = 0;\n\tint bf = 0;\n\tint bg = 0;\n\tint bh = 0;\n\tint bi = 0;\n\tint bj = 0;\n\tint bk = 0;\n\tint bl = 0;\n\tint bm = 0;\n\tint bn = 0;\n\tint bo = 0;\n\tint bp = 0;\n\tint bq = 0;\n\tint br = 0;\n\tint bs = 0;\n\tint bt = 0;\n\tint bu = 0;\n\tint bv = 0;\n\tint bw = 0;\n\tint bx = 0;\n\tint by = 0;\n\tint bz\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124041,
      "stdout": "",
      "stderr": "/tmp/tmpxadutf21.d(79): Error: semicolon expected, not `unittest`\n/tmp/tmpxadutf21.d(79): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxadutf21.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tint i = 0;\n\tforeach(string color; colors)\n\t{\n\t\tif(color != patterns[i])\n\t\t\treturn false;\n\t\ti = (i + 1) % patterns.length;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124041,
      "stdout": "",
      "stderr": "/tmp/tmplr1awgo9.d(14): Error: cannot implicitly convert expression `cast(ulong)(i + 1) % patterns.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplr1awgo9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tif(colors.length != patterns.length)\n\t\treturn false;\n\t\n\tfor(int i = 0; i < patterns.length; i++)\n\t{\n\t\tif(patterns[i] == \"even\")\n\t\t{\n\t\t\tif(colors[i].length % 2 != 0)\n\t\t\t\treturn false;\n\t\t}\n\t\telse if(patterns[i] == \"odd\")\n\t\t{\n\t\t\tif(colors[i].length % 2 == 0)\n\t\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(colors[i].length != to!int(patterns[i]))\n\t\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124041,
      "stdout": "",
      "stderr": "/tmp/tmpl44xdciw.d(26): Error: template instance `to!int` template `to` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl44xdciw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tint i = 0;\n\tforeach(string pattern; patterns)\n\t{\n\t\tif(pattern == \"even\")\n\t\t{\n\t\t\tif(colors[i] != colors[i+1])\n\t\t\t\treturn false;\n\t\t\ti += 2;\n\t\t}\n\t\telse if(pattern == \"odd\")\n\t\t{\n\t\t\tif(colors[i] == colors[i+1])\n\t\t\t\treturn false;\n\t\t\ti += 2;\n\t\t}\n\t\telse if(pattern == \"up\")\n\t\t{\n\t\t\tif(colors[i] == colors[i+1])\n\t\t\t\treturn false;\n\t\t\ti += 2;\n\t\t}\n\t\telse if(pattern == \"down\")\n\t\t{\n\t\t\tif(colors[i] != colors[i+1])\n\t\t\t\treturn false;\n\t\t\ti += 2;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124041,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpp1u745lm.d(44): unittest failure\n----------------\n??:? _d_unittestp [0x428f3d]\n??:? void tmpp1u745lm.__unittest_L39_C1() [0x428043]\n??:? void tmpp1u745lm.__modtest() [0x4281a8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d88b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428c96]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a739]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a7c8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a6c5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428c6d]\n??:? runModuleUnitTests [0x42d661]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429400]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tif (colors.length != patterns.length) return false;\n\t\n\tfor (int i = 0; i < patterns.length; i++)\n\t{\n\t\tif (colors[i] != patterns[i]) return false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124042,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp7myo91ky.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x428c45]\n??:? void tmp7myo91ky.__unittest_L18_C1() [0x427c83]\n??:? void tmp7myo91ky.__modtest() [0x427eb0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d593]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42899e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a441]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a4d0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a3cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428975]\n??:? runModuleUnitTests [0x42d369]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429108]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tint i = 0;\n\tforeach(string pattern; patterns)\n\t{\n\t\tif(pattern == \"*\")\n\t\t{\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(pattern != colors[i])\n\t\t\treturn false;\n\t\ti++;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124042,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpeeukofp1.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x428c75]\n??:? void tmpeeukofp1.__unittest_L23_C1() [0x427caf]\n??:? void tmpeeukofp1.__modtest() [0x427edc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d5c3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4289ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a471]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a500]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a3fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x4289a5]\n??:? runModuleUnitTests [0x42d399]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429138]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tif (colors.length != patterns.length)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < colors.length; i++)\n\t{\n\t\tif (colors[i] != patterns[i])\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517192,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3ksxl9ug.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x428c45]\n??:? void tmp3ksxl9ug.__unittest_L20_C1() [0x427c83]\n??:? void tmp3ksxl9ug.__modtest() [0x427eb0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d593]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42899e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a441]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a4d0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a3cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428975]\n??:? runModuleUnitTests [0x42d369]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429108]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tif (colors.length != patterns.length)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < colors.length; i++)\n\t{\n\t\tif (colors[i] != patterns[i])\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517192,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpfl51wbgg.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x428c45]\n??:? void tmpfl51wbgg.__unittest_L19_C1() [0x427c83]\n??:? void tmpfl51wbgg.__modtest() [0x427eb0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d593]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42899e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a441]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a4d0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a3cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428975]\n??:? runModuleUnitTests [0x42d369]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429108]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tint i = 0;\n\tforeach(string pattern; patterns)\n\t{\n\t\tif(pattern == \"even\")\n\t\t{\n\t\t\tif(i % 2 == 0)\n\t\t\t{\n\t\t\t\ti++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\telse if(pattern == \"odd\")\n\t\t{\n\t\t\tif(i % 2 == 1)\n\t\t\t{\n\t\t\t\ti++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(colors[i] == pattern)\n\t\t\t{\n\t\t\t\ti++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124042,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpn3jd2oon.d(55): unittest failure\n----------------\n??:? _d_unittestp [0x428cdd]\n??:? void tmpn3jd2oon.__unittest_L51_C1() [0x427d17]\n??:? void tmpn3jd2oon.__modtest() [0x427f44]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d62b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428a36]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a4d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a568]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a465]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428a0d]\n??:? runModuleUnitTests [0x42d401]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4291a0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint l = 0;\n\tint m = 0;\n\tint n = 0;\n\tint o = 0;\n\tint p = 0;\n\tint q = 0;\n\tint r = 0;\n\tint s = 0;\n\tint t = 0;\n\tint u = 0;\n\tint v = 0;\n\tint w = 0;\n\tint x = 0;\n\tint y = 0;\n\tint z = 0;\n\tint aa = 0;\n\tint bb = 0;\n\tint cc = 0;\n\tint dd = 0;\n\tint ee = 0;\n\tint ff = 0;\n\tint gg = 0;\n\tint hh = 0;\n\tint ii = 0;\n\tint jj = 0;\n\tint kk = 0;\n\tint ll = 0;\n\tint mm = 0;\n\tint nn = 0;\n\tint oo = 0;\n\tint pp = 0;\n\tint qq = 0;\n\tint rr = 0;\n\tint ss = 0;\n\tint tt = 0;\n\tint uu = 0;\n\tint vv = 0;\n\tint ww = 0;\n\tint xx = 0;\n\tint yy = 0;\n\tint zz = 0;\n\tint aaa = 0;\n\tint bbb = 0;\n\tint ccc = 0;\n\tint ddd = 0;\n\tint eee = 0;\n\tint fff = 0;\n\tint ggg = 0;\n\tint hhh = 0;\n\tint iii = 0;\n\tint jjj = 0;\n\tint kkk = 0;\n\tint lll = 0;\n\tint mmm = 0;\n\tint nnn = 0;\n\tint ooo = 0;\n\tint ppp = 0;\n\tint qqq = 0;\n\tint rrr = 0;\n\tint sss = 0;\n\tint ttt = 0;\n\tint uuu = 0;\n\tint vvv = 0;\n\tint www = 0;\n\tint\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517191,
      "stdout": "",
      "stderr": "/tmp/tmpgwtpcwae.d(77): Error: no identifier for declarator `int`\n/tmp/tmpgwtpcwae.d(77): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgwtpcwae.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tint i = 0;\n\tforeach(string pattern; patterns) \n\t{\n\t\tif(pattern == \"*\") \n\t\t{\n\t\t\tcontinue;\n\t\t}\n\t\tif(pattern != colors[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\ti++;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124042,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpuippz64m.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428c6d]\n??:? void tmpuippz64m.__unittest_L24_C1() [0x427cab]\n??:? void tmpuippz64m.__modtest() [0x427ed8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d5bb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4289c6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a469]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a4f8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a3f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42899d]\n??:? runModuleUnitTests [0x42d391]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429130]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tint i = 0;\n\tforeach(string color; colors)\n\t{\n\t\tif(color != patterns[i])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\ti++;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517192,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpvc6frgop.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x428c35]\n??:? void tmpvc6frgop.__unittest_L20_C1() [0x427c6f]\n??:? void tmpvc6frgop.__modtest() [0x427e9c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d583]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42898e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a431]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a4c0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a3bd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428965]\n??:? runModuleUnitTests [0x42d359]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4290f8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tif (colors.length != patterns.length) return false;\n\t\n\tfor (int i = 0; i < colors.length; i++)\n\t{\n\t\tif (colors[i] != patterns[i]) return false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124042,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpk3zam_q1.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x428c45]\n??:? void tmpk3zam_q1.__unittest_L18_C1() [0x427c83]\n??:? void tmpk3zam_q1.__modtest() [0x427eb0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d593]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42899e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a441]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a4d0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a3cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428975]\n??:? runModuleUnitTests [0x42d369]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429108]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tif(colors.length != patterns.length)\n\t\treturn false;\n\t\n\tfor(int i = 0; i < colors.length; i++)\n\t{\n\t\tif(colors[i] == patterns[i])\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124042,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpj075iug8.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x428c45]\n??:? void tmpj075iug8.__unittest_L19_C1() [0x427d4b]\n??:? void tmpj075iug8.__modtest() [0x427eb0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d593]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42899e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a441]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a4d0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a3cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428975]\n??:? runModuleUnitTests [0x42d369]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429108]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint l = 0;\n\tint m = 0;\n\tint n = 0;\n\tint o = 0;\n\tint p = 0;\n\tint q = 0;\n\tint r = 0;\n\tint s = 0;\n\tint t = 0;\n\tint u = 0;\n\tint v = 0;\n\tint w = 0;\n\tint x = 0;\n\tint y = 0;\n\tint z = 0;\n\tint aa = 0;\n\tint bb = 0;\n\tint cc = 0;\n\tint dd = 0;\n\tint ee = 0;\n\tint ff = 0;\n\tint gg = 0;\n\tint hh = 0;\n\tint ii = 0;\n\tint jj = 0;\n\tint kk = 0;\n\tint ll = 0;\n\tint mm = 0;\n\tint nn = 0;\n\tint oo = 0;\n\tint pp = 0;\n\tint qq = 0;\n\tint rr = 0;\n\tint ss = 0;\n\tint tt = 0;\n\tint uu = 0;\n\tint vv = 0;\n\tint ww = 0;\n\tint xx = 0;\n\tint yy = 0;\n\tint zz = 0;\n\tint aaa = 0;\n\tint bbb = 0;\n\tint ccc = 0;\n\tint ddd = 0;\n\tint eee = 0;\n\tint fff = 0;\n\tint ggg = 0;\n\tint hhh = 0;\n\tint iii = 0;\n\tint jjj = 0;\n\tint kkk = 0;\n\tint lll = 0;\n\tint mmm = 0;\n\tint nnn = 0;\n\tint ooo = 0;\n\tint ppp = 0;\n\tint qqq = 0;\n\tint rrr = 0;\n\tint sss = 0;\n\tint ttt = 0;\n\tint uuu = 0;\n\tint vvv = 0;\n\tint www = 0;\n\tint\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517191,
      "stdout": "",
      "stderr": "/tmp/tmpgwtpcwae.d(77): Error: no identifier for declarator `int`\n/tmp/tmpgwtpcwae.d(77): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgwtpcwae.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tif (colors.length != patterns.length)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < colors.length; i++)\n\t{\n\t\tif (colors[i] != patterns[i])\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517192,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3ksxl9ug.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x428c45]\n??:? void tmp3ksxl9ug.__unittest_L20_C1() [0x427c83]\n??:? void tmp3ksxl9ug.__modtest() [0x427eb0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d593]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42899e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a441]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a4d0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a3cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428975]\n??:? runModuleUnitTests [0x42d369]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429108]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tif (colors.length != patterns.length)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < colors.length; i++)\n\t{\n\t\tif (colors[i] != patterns[i])\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517192,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3ksxl9ug.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x428c45]\n??:? void tmp3ksxl9ug.__unittest_L20_C1() [0x427c83]\n??:? void tmp3ksxl9ug.__modtest() [0x427eb0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d593]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42899e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a441]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a4d0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a3cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428975]\n??:? runModuleUnitTests [0x42d369]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429108]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tforeach(string pattern; patterns)\n\t{\n\t\tif(pattern.length > colors.length)\n\t\t\treturn false;\n\t\t\n\t\tint[] pattern_count = new int[256];\n\t\tforeach(char c; pattern)\n\t\t\tpattern_count[c]++;\n\t\t\n\t\tint[] colors_count = new int[256];\n\t\tforeach(char c; colors[0..pattern.length])\n\t\t\tcolors_count[c]++;\n\t\t\n\t\tif(colors_count != pattern_count)\n\t\t\treturn false;\n\t\t\n\t\tcolors = colors[pattern.length..$];\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124041,
      "stdout": "",
      "stderr": "/tmp/tmp5e7i0bn1.d(19): Error: cannot implicitly convert expression `__r20[__key21]` of type `string` to `char`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5e7i0bn1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tif (colors.length != patterns.length) return false;\n\t\n\tfor (int i = 0; i < colors.length; i++) \n\t{\n\t\tif (colors[i] == \"red\") \n\t\t{\n\t\t\tif (patterns[i] != \"circle\") return false;\n\t\t}\n\t\telse if (colors[i] == \"blue\") \n\t\t{\n\t\t\tif (patterns[i] != \"triangle\") return false;\n\t\t}\n\t\telse if (colors[i] == \"green\") \n\t\t{\n\t\t\tif (patterns[i] != \"square\") return false;\n\t\t}\n\t\telse return false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124042,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3i1hbq77.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x428dd5]\n??:? void tmp3i1hbq77.__unittest_L29_C1() [0x427e13]\n??:? void tmp3i1hbq77.__modtest() [0x428040]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d723]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428b2e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a5d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a660]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a55d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428b05]\n??:? runModuleUnitTests [0x42d4f9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429298]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint l = 0;\n\tint m = 0;\n\tint n = 0;\n\tint o = 0;\n\tint p = 0;\n\tint q = 0;\n\tint r = 0;\n\tint s = 0;\n\tint t = 0;\n\tint u = 0;\n\tint v = 0;\n\tint w = 0;\n\tint x = 0;\n\tint y = 0;\n\tint z = 0;\n\t\n\tforeach(string color; colors)\n\t{\n\t\tif(color == \"red\")\n\t\t{\n\t\t\ti++;\n\t\t}\n\t\telse if(color == \"green\")\n\t\t{\n\t\t\tj++;\n\t\t}\n\t\telse if(color == \"blue\")\n\t\t{\n\t\t\tk++;\n\t\t}\n\t\telse if(color == \"yellow\")\n\t\t{\n\t\t\tl++;\n\t\t}\n\t\telse if(color == \"orange\")\n\t\t{\n\t\t\tm++;\n\t\t}\n\t\telse if(color == \"purple\")\n\t\t{\n\t\t\tn++;\n\t\t}\n\t\telse if(color == \"pink\")\n\t\t{\n\t\t\to++;\n\t\t}\n\t\telse if(color == \"black\")\n\t\t{\n\t\t\tp++;\n\t\t}\n\t\telse if(color == \"white\")\n\t\t{\n\t\t\tq++;\n\t\t}\n\t\telse if(color == \"brown\")\n\t\t{\n\t\t\tr++;\n\t\t}\n\t\telse if(color == \"grey\")\n\t\t{\n\t\t\ts++;\n\t\t}\n\t\telse if(color == \"cyan\")\n\t\t{\n\t\t\tt++;\n\t\t}\n\t\telse if(color == \"magenta\")\n\t\t{\n\t\t\tu++;\n\t\t}\n\t\telse if(color == \"lime\")\n\t\t{\n\t\t\tv++;\n\t\t}\n\t\telse if(color == \"maroon\")\n\t\t{\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124041,
      "stdout": "",
      "stderr": "/tmp/tmpmxlbrw7t.d(88): Error: found `unittest` instead of statement\n/tmp/tmpmxlbrw7t.d(96): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpmxlbrw7t.d(96): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmxlbrw7t.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tbool is_same = true;\n\tint i = 0;\n\tint j = 0;\n\t\n\twhile(is_same && j < patterns.length)\n\t{\n\t\tif(colors[i] == patterns[j])\n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tis_same = false;\n\t\t}\n\t}\n\t\n\treturn is_same;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124042,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpxwpzge46.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x428c4d]\n??:? void tmpxwpzge46.__unittest_L28_C1() [0x427c8b]\n??:? void tmpxwpzge46.__modtest() [0x427eb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d59b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4289a6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a449]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a4d8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a3d5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42897d]\n??:? runModuleUnitTests [0x42d371]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429110]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tif(colors.length != patterns.length)\n\t\treturn false;\n\t\n\tfor(int i = 0; i < colors.length; i++)\n\t{\n\t\tif(colors[i] != patterns[i])\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124042,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpfo1_3t16.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x428c45]\n??:? void tmpfo1_3t16.__unittest_L20_C1() [0x427c83]\n??:? void tmpfo1_3t16.__modtest() [0x427eb0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d593]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42899e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a441]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a4d0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a3cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428975]\n??:? runModuleUnitTests [0x42d369]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429108]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tif(colors.length != patterns.length)\n\t\treturn false;\n\t\n\tfor(int i = 0; i < colors.length; i++)\n\t{\n\t\tif(colors[i] == patterns[i])\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124041,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpehibm2hl.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x428c45]\n??:? void tmpehibm2hl.__unittest_L20_C1() [0x427d4b]\n??:? void tmpehibm2hl.__modtest() [0x427eb0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d593]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42899e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a441]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a4d0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a3cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428975]\n??:? runModuleUnitTests [0x42d369]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429108]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tif (colors.length != patterns.length) return false;\n\t\n\tfor (int i = 0; i < colors.length; i++)\n\t{\n\t\tif (colors[i] == \"red\")\n\t\t{\n\t\t\tif (patterns[i] != \"diamond\") return false;\n\t\t}\n\t\telse if (colors[i] == \"blue\")\n\t\t{\n\t\t\tif (patterns[i] != \"square\") return false;\n\t\t}\n\t\telse if (colors[i] == \"green\")\n\t\t{\n\t\t\tif (patterns[i] != \"circle\") return false;\n\t\t}\n\t\telse return false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124041,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpxkuot0kb.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x428dd5]\n??:? void tmpxkuot0kb.__unittest_L29_C1() [0x427e13]\n??:? void tmpxkuot0kb.__modtest() [0x428040]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d723]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428b2e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a5d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a660]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a55d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428b05]\n??:? runModuleUnitTests [0x42d4f9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429298]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tint i = 0;\n\tforeach(string color; colors)\n\t{\n\t\tif(color != patterns[i])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\ti++;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517192,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpvc6frgop.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x428c35]\n??:? void tmpvc6frgop.__unittest_L20_C1() [0x427c6f]\n??:? void tmpvc6frgop.__modtest() [0x427e9c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d583]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42898e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a431]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a4c0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a3bd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428965]\n??:? runModuleUnitTests [0x42d359]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4290f8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tif(colors.length != patterns.length) return false;\n\t\n\tfor(int i = 0; i < colors.length; i++)\n\t{\n\t\tif(patterns[i] == \"even\" && colors[i] % 2 != 0) return false;\n\t\tif(patterns[i] == \"odd\" && colors[i] % 2 == 0) return false;\n\t\tif(patterns[i] == \"up\" && colors[i] < colors[i-1]) return false;\n\t\tif(patterns[i] == \"down\" && colors[i] > colors[i-1]) return false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124041,
      "stdout": "",
      "stderr": "/tmp/tmp127_0_30.d(13): Error: incompatible types for `(colors[cast(ulong)i]) % (2)`: `string` and `int`\n/tmp/tmp127_0_30.d(14): Error: incompatible types for `(colors[cast(ulong)i]) % (2)`: `string` and `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp127_0_30.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tint i = 0;\n\tforeach(string pattern; patterns)\n\t{\n\t\tif(colors[i] != pattern)\n\t\t\treturn false;\n\t\ti++;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124042,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmphloe_mfm.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x428c45]\n??:? void tmphloe_mfm.__unittest_L18_C1() [0x427c83]\n??:? void tmphloe_mfm.__modtest() [0x427eb0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d593]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42899e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a441]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a4d0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a3cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428975]\n??:? runModuleUnitTests [0x42d369]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429108]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tif(colors.length != patterns.length)\n\t\treturn false;\n\t\n\tfor(int i = 0; i < colors.length; i++)\n\t{\n\t\tif(colors[i] == patterns[i])\n\t\t\tcontinue;\n\t\telse\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124042,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpx_wscema.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x428c45]\n??:? void tmpx_wscema.__unittest_L21_C1() [0x427c83]\n??:? void tmpx_wscema.__modtest() [0x427eb0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d593]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42899e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a441]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a4d0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a3cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428975]\n??:? runModuleUnitTests [0x42d369]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429108]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tif(colors.length != patterns.length)\n\t\treturn false;\n\t\n\tfor(int i = 0; i < patterns.length; i++)\n\t{\n\t\tif(patterns[i] == \"*\")\n\t\t\tcontinue;\n\t\tif(patterns[i] != colors[i])\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124042,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpuf6z6a2k.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x428c95]\n??:? void tmpuf6z6a2k.__unittest_L21_C1() [0x427cd3]\n??:? void tmpuf6z6a2k.__modtest() [0x427f00]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d5e3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4289ee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a491]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a520]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a41d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x4289c5]\n??:? runModuleUnitTests [0x42d3b9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429158]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tint i = 0;\n\tint j = 0;\n\t\n\twhile (i < colors.length && j < patterns.length)\n\t{\n\t\tif (colors[i] == patterns[j])\n\t\t{\n\t\t\t++i;\n\t\t\t++j;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t++i;\n\t\t}\n\t}\n\t\n\treturn j == patterns.length;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124042,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmposmnkvj3.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x428c5d]\n??:? void tmposmnkvj3.__unittest_L27_C1() [0x427c9b]\n??:? void tmposmnkvj3.__modtest() [0x427ec8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d5ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4289b6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a459]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a4e8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a3e5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42898d]\n??:? runModuleUnitTests [0x42d381]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429120]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tif(colors.length != patterns.length)\n\t\treturn false;\n\t\n\tfor(int i = 0; i < patterns.length; i++)\n\t{\n\t\tif(patterns[i] == \"even\")\n\t\t{\n\t\t\tif(colors[i] != \"red\" && colors[i] != \"blue\")\n\t\t\t\treturn false;\n\t\t}\n\t\telse if(patterns[i] == \"odd\")\n\t\t{\n\t\t\tif(colors[i] != \"green\" && colors[i] != \"purple\")\n\t\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124042,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpn8p72uzt.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x428de5]\n??:? void tmpn8p72uzt.__unittest_L29_C1() [0x427e1f]\n??:? void tmpn8p72uzt.__modtest() [0x42804c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d733]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428b3e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a5e1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a670]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a56d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428b15]\n??:? runModuleUnitTests [0x42d509]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4292a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tint i = 0;\n\tforeach(string color; colors)\n\t{\n\t\tif(color != patterns[i])\n\t\t\treturn false;\n\t\ti++;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124042,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp7xt8h90y.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x428c35]\n??:? void tmp7xt8h90y.__unittest_L18_C1() [0x427c6f]\n??:? void tmp7xt8h90y.__modtest() [0x427e9c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d583]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42898e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a431]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a4c0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a3bd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428965]\n??:? runModuleUnitTests [0x42d359]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4290f8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint l = 0;\n\tint m = 0;\n\tint n = 0;\n\tint o = 0;\n\tint p = 0;\n\tint q = 0;\n\tint r = 0;\n\tint s = 0;\n\tint t = 0;\n\tint u = 0;\n\tint v = 0;\n\tint w = 0;\n\tint x = 0;\n\tint y = 0;\n\tint z = 0;\n\tint aa = 0;\n\tint ab = 0;\n\tint ac = 0;\n\tint ad = 0;\n\tint ae = 0;\n\tint af = 0;\n\tint ag = 0;\n\tint ah = 0;\n\tint ai = 0;\n\tint aj = 0;\n\tint ak = 0;\n\tint al = 0;\n\tint am = 0;\n\tint an = 0;\n\tint ao = 0;\n\tint ap = 0;\n\tint aq = 0;\n\tint ar = 0;\n\tint as = 0;\n\tint at = 0;\n\tint au = 0;\n\tint av = 0;\n\tint aw = 0;\n\tint ax = 0;\n\tint ay = 0;\n\tint az = 0;\n\tint ba = 0;\n\tint bb = 0;\n\tint bc = 0;\n\tint bd = 0;\n\tint be = 0;\n\tint bf = 0;\n\tint bg = 0;\n\tint bh = 0;\n\tint bi = 0;\n\tint bj = 0;\n\tint bk = 0;\n\tint bl = 0;\n\tint bm = 0;\n\tint bn = 0;\n\tint bo = 0;\n\tint bp = 0;\n\tint bq = 0;\n\tint br = 0;\n\tint bs = 0;\n\tint bt = 0;\n\tint bu = 0;\n\tint bv = 0;\n\tint bw = 0;\n\tint bx = 0;\n\tint by = 0;\n\tint bz\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124041,
      "stdout": "",
      "stderr": "/tmp/tmpxadutf21.d(79): Error: semicolon expected, not `unittest`\n/tmp/tmpxadutf21.d(79): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxadutf21.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tif(colors.length != patterns.length)\n\t\treturn false;\n\t\n\tfor(int i = 0; i < colors.length; i++)\n\t{\n\t\tif(colors[i] != patterns[i])\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124042,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpfo1_3t16.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x428c45]\n??:? void tmpfo1_3t16.__unittest_L20_C1() [0x427c83]\n??:? void tmpfo1_3t16.__modtest() [0x427eb0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d593]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42899e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a441]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a4d0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a3cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428975]\n??:? runModuleUnitTests [0x42d369]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429108]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tif (colors.length != patterns.length)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < colors.length; i++)\n\t{\n\t\tif (colors[i] != patterns[i])\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517192,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3ksxl9ug.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x428c45]\n??:? void tmp3ksxl9ug.__unittest_L20_C1() [0x427c83]\n??:? void tmp3ksxl9ug.__modtest() [0x427eb0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d593]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42899e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a441]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a4d0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a3cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428975]\n??:? runModuleUnitTests [0x42d369]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429108]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint l = 0;\n\tint m = 0;\n\tint n = 0;\n\tint o = 0;\n\tint p = 0;\n\tint q = 0;\n\tint r = 0;\n\tint s = 0;\n\tint t = 0;\n\tint u = 0;\n\tint v = 0;\n\tint w = 0;\n\tint x = 0;\n\tint y = 0;\n\tint z = 0;\n\tint aa = 0;\n\tint bb = 0;\n\tint cc = 0;\n\tint dd = 0;\n\tint ee = 0;\n\tint ff = 0;\n\tint gg = 0;\n\tint hh = 0;\n\tint ii = 0;\n\tint jj = 0;\n\tint kk = 0;\n\tint ll = 0;\n\tint mm = 0;\n\tint nn = 0;\n\tint oo = 0;\n\tint pp = 0;\n\tint qq = 0;\n\tint rr = 0;\n\tint ss = 0;\n\tint tt = 0;\n\tint uu = 0;\n\tint vv = 0;\n\tint ww = 0;\n\tint xx = 0;\n\tint yy = 0;\n\tint zz = 0;\n\tint aaa = 0;\n\tint bbb = 0;\n\tint ccc = 0;\n\tint ddd = 0;\n\tint eee = 0;\n\tint fff = 0;\n\tint ggg = 0;\n\tint hhh = 0;\n\tint iii = 0;\n\tint jjj = 0;\n\tint kkk = 0;\n\tint lll = 0;\n\tint mmm = 0;\n\tint nnn = 0;\n\tint ooo = 0;\n\tint ppp = 0;\n\tint qqq = 0;\n\tint rrr = 0;\n\tint sss = 0;\n\tint ttt = 0;\n\tint uuu = 0;\n\tint vvv = 0;\n\tint www = 0;\n\tint\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517191,
      "stdout": "",
      "stderr": "/tmp/tmpgwtpcwae.d(77): Error: no identifier for declarator `int`\n/tmp/tmpgwtpcwae.d(77): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgwtpcwae.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tint i = 0;\n\tint j = 0;\n\t\n\twhile(i < colors.length && j < patterns.length)\n\t{\n\t\tif(colors[i] == patterns[j])\n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\ti++;\n\t\t}\n\t}\n\t\n\tif(j == patterns.length)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124042,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpfj1n8xg5.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x428c55]\n??:? void tmpfj1n8xg5.__unittest_L34_C1() [0x427c8f]\n??:? void tmpfj1n8xg5.__modtest() [0x427ebc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d5a3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4289ae]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a451]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a4e0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a3dd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428985]\n??:? runModuleUnitTests [0x42d379]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429118]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tif (colors.length != patterns.length)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < colors.length; i++)\n\t{\n\t\tif (patterns[i] == \"even\" && colors[i] % 2 == 0)\n\t\t\tcontinue;\n\t\telse if (patterns[i] == \"odd\" && colors[i] % 2 == 1)\n\t\t\tcontinue;\n\t\telse if (patterns[i] == \"up\" && colors[i] < colors[i - 1])\n\t\t\tcontinue;\n\t\telse if (patterns[i] == \"down\" && colors[i] > colors[i - 1])\n\t\t\tcontinue;\n\t\telse\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124041,
      "stdout": "",
      "stderr": "/tmp/tmp593iw6_m.d(14): Error: incompatible types for `(colors[cast(ulong)i]) % (2)`: `string` and `int`\n/tmp/tmp593iw6_m.d(16): Error: incompatible types for `(colors[cast(ulong)i]) % (2)`: `string` and `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp593iw6_m.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tint i = 0;\n\tforeach(string pattern; patterns)\n\t{\n\t\tif(pattern == \"even\")\n\t\t{\n\t\t\tif(colors[i] == colors[i+1])\n\t\t\t{\n\t\t\t\ti += 2;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\telse if(pattern == \"odd\")\n\t\t{\n\t\t\tif(colors[i] != colors[i+1])\n\t\t\t{\n\t\t\t\ti += 2;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124042,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpcy8bon_k.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x428d95]\n??:? void tmpcy8bon_k.__unittest_L41_C1() [0x427dd3]\n??:? void tmpcy8bon_k.__modtest() [0x428000]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d6e3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428aee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a591]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a620]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a51d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428ac5]\n??:? runModuleUnitTests [0x42d4b9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429258]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tif (colors.length != patterns.length) return false;\n\t\n\tfor (int i = 0; i < colors.length; i++) \n\t{\n\t\tif (colors[i] == patterns[i]) continue;\n\t\telse if (patterns[i] == \"*\") continue;\n\t\telse return false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124042,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpxpquycs1.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x428c95]\n??:? void tmpxpquycs1.__unittest_L19_C1() [0x427cd3]\n??:? void tmpxpquycs1.__modtest() [0x427f00]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d5e3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4289ee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a491]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a520]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a41d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x4289c5]\n??:? runModuleUnitTests [0x42d3b9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429158]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tif (colors.length != patterns.length)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < colors.length; i++)\n\t{\n\t\tif (colors[i] == patterns[i])\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124042,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpu55nzzx4.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x428c45]\n??:? void tmpu55nzzx4.__unittest_L20_C1() [0x427d4b]\n??:? void tmpu55nzzx4.__modtest() [0x427eb0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d593]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42899e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a441]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a4d0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a3cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428975]\n??:? runModuleUnitTests [0x42d369]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429108]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint l = 0;\n\tint m = 0;\n\tint n = 0;\n\tint o = 0;\n\tint p = 0;\n\tint q = 0;\n\tint r = 0;\n\tint s = 0;\n\tint t = 0;\n\tint u = 0;\n\tint v = 0;\n\tint w = 0;\n\tint x = 0;\n\tint y = 0;\n\tint z = 0;\n\tint aa = 0;\n\tint bb = 0;\n\tint cc = 0;\n\tint dd = 0;\n\tint ee = 0;\n\tint ff = 0;\n\tint gg = 0;\n\tint hh = 0;\n\tint ii = 0;\n\tint jj = 0;\n\tint kk = 0;\n\tint ll = 0;\n\tint mm = 0;\n\tint nn = 0;\n\tint oo = 0;\n\tint pp = 0;\n\tint qq = 0;\n\tint rr = 0;\n\tint ss = 0;\n\tint tt = 0;\n\tint uu = 0;\n\tint vv = 0;\n\tint ww = 0;\n\tint xx = 0;\n\tint yy = 0;\n\tint zz = 0;\n\tint aaa = 0;\n\tint bbb = 0;\n\tint ccc = 0;\n\tint ddd = 0;\n\tint eee = 0;\n\tint fff = 0;\n\tint ggg = 0;\n\tint hhh = 0;\n\tint iii = 0;\n\tint jjj = 0;\n\tint kkk = 0;\n\tint lll = 0;\n\tint mmm = 0;\n\tint nnn = 0;\n\tint ooo = 0;\n\tint ppp = 0;\n\tint qqq = 0;\n\tint rrr = 0;\n\tint sss = 0;\n\tint ttt = 0;\n\tint uuu = 0;\n\tint vvv = 0;\n\tint www = 0;\n\tint\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517191,
      "stdout": "",
      "stderr": "/tmp/tmpgwtpcwae.d(77): Error: no identifier for declarator `int`\n/tmp/tmpgwtpcwae.d(77): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgwtpcwae.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tforeach(string pattern; patterns)\n\t{\n\t\tif(colors.length < pattern.length)\n\t\t\treturn false;\n\t\t\n\t\tfor(int i = 0; i < pattern.length; i++)\n\t\t{\n\t\t\tif(pattern[i] != colors[i])\n\t\t\t\treturn false;\n\t\t}\n\t\t\n\t\tcolors = colors[pattern.length..$];\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124042,
      "stdout": "",
      "stderr": "/tmp/tmpo4gr003a.d(16): Error: incompatible types for `(pattern[cast(ulong)i]) != (colors[cast(ulong)i])`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo4gr003a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tif(colors.length != patterns.length)\n\t\treturn false;\n\t\n\tfor(int i = 0; i < colors.length; i++)\n\t{\n\t\tif(colors[i] == patterns[i])\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124042,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpj075iug8.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x428c45]\n??:? void tmpj075iug8.__unittest_L19_C1() [0x427d4b]\n??:? void tmpj075iug8.__modtest() [0x427eb0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d593]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42899e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a441]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a4d0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a3cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428975]\n??:? runModuleUnitTests [0x42d369]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429108]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tif (colors.length != patterns.length) return false;\n\tfor (int i = 0; i < colors.length; i++) \n\t{\n\t\tif (colors[i] != patterns[i]) return false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124042,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpxl7iuov3.d(20): unittest failure\n----------------\n??:? _d_unittestp [0x428c45]\n??:? void tmpxl7iuov3.__unittest_L16_C1() [0x427c83]\n??:? void tmpxl7iuov3.__modtest() [0x427eb0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d593]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42899e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a441]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a4d0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a3cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428975]\n??:? runModuleUnitTests [0x42d369]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429108]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tif(colors.length != patterns.length)\n\t\treturn false;\n\t\n\tfor(int i = 0; i < colors.length; i++)\n\t{\n\t\tif(colors[i] != patterns[i])\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124042,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpfo1_3t16.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x428c45]\n??:? void tmpfo1_3t16.__unittest_L20_C1() [0x427c83]\n??:? void tmpfo1_3t16.__modtest() [0x427eb0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d593]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42899e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a441]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a4d0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a3cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428975]\n??:? runModuleUnitTests [0x42d369]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429108]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tif (colors.length != patterns.length) return false;\n\t\n\tforeach(int i, string color; colors)\n\t{\n\t\tif (color != patterns[i]) return false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124042,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpzlhnsr96.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x428c35]\n??:? void tmpzlhnsr96.__unittest_L18_C1() [0x427c73]\n??:? void tmpzlhnsr96.__modtest() [0x427ea0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d583]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42898e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a431]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a4c0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a3bd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428965]\n??:? runModuleUnitTests [0x42d359]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4290f8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint l = 0;\n\tint m = 0;\n\tint n = 0;\n\tint o = 0;\n\tint p = 0;\n\tint q = 0;\n\tint r = 0;\n\tint s = 0;\n\tint t = 0;\n\tint u = 0;\n\tint v = 0;\n\tint w = 0;\n\tint x = 0;\n\tint y = 0;\n\tint z = 0;\n\tint aa = 0;\n\tint bb = 0;\n\tint cc = 0;\n\tint dd = 0;\n\tint ee = 0;\n\tint ff = 0;\n\tint gg = 0;\n\tint hh = 0;\n\tint ii = 0;\n\tint jj = 0;\n\tint kk = 0;\n\tint ll = 0;\n\tint mm = 0;\n\tint nn = 0;\n\tint oo = 0;\n\tint pp = 0;\n\tint qq = 0;\n\tint rr = 0;\n\tint ss = 0;\n\tint tt = 0;\n\tint uu = 0;\n\tint vv = 0;\n\tint ww = 0;\n\tint xx = 0;\n\tint yy = 0;\n\tint zz = 0;\n\tint aaa = 0;\n\tint bbb = 0;\n\tint ccc = 0;\n\tint ddd = 0;\n\tint eee = 0;\n\tint fff = 0;\n\tint ggg = 0;\n\tint hhh = 0;\n\tint iii = 0;\n\tint jjj = 0;\n\tint kkk = 0;\n\tint lll = 0;\n\tint mmm = 0;\n\tint nnn = 0;\n\tint ooo = 0;\n\tint ppp = 0;\n\tint qqq = 0;\n\tint rrr = 0;\n\tint sss = 0;\n\tint ttt = 0;\n\tint uuu = 0;\n\tint vvv = 0;\n\tint www = 0;\n\tint\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517191,
      "stdout": "",
      "stderr": "/tmp/tmpgwtpcwae.d(77): Error: no identifier for declarator `int`\n/tmp/tmpgwtpcwae.d(77): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgwtpcwae.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tif (colors.length != patterns.length) return false;\n\t\n\tfor (int i = 0; i < colors.length; i++)\n\t{\n\t\tif (colors[i] == \"red\")\n\t\t{\n\t\t\tif (patterns[i] != \"circle\") return false;\n\t\t}\n\t\telse if (colors[i] == \"blue\")\n\t\t{\n\t\t\tif (patterns[i] != \"triangle\") return false;\n\t\t}\n\t\telse if (colors[i] == \"green\")\n\t\t{\n\t\t\tif (patterns[i] != \"square\") return false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124042,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3gnrs7ut.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x428dd5]\n??:? void tmp3gnrs7ut.__unittest_L33_C1() [0x427e13]\n??:? void tmp3gnrs7ut.__modtest() [0x428040]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d723]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428b2e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a5d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a660]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a55d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428b05]\n??:? runModuleUnitTests [0x42d4f9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429298]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tint i = 0;\n\tforeach(string color; colors)\n\t{\n\t\tif(color != patterns[i])\n\t\t\treturn false;\n\t\ti++;\n\t\tif(i == patterns.length)\n\t\t\ti = 0;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517192,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmps194herz.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x428c4d]\n??:? void tmps194herz.__unittest_L20_C1() [0x427c87]\n??:? void tmps194herz.__modtest() [0x427eb4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d59b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4289a6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a449]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a4d8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a3d5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42897d]\n??:? runModuleUnitTests [0x42d371]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429110]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tif (colors.length != patterns.length)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < colors.length; i++)\n\t{\n\t\tif (colors[i] != patterns[i])\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517192,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpfl51wbgg.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x428c45]\n??:? void tmpfl51wbgg.__unittest_L19_C1() [0x427c83]\n??:? void tmpfl51wbgg.__modtest() [0x427eb0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d593]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42899e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a441]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a4d0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a3cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428975]\n??:? runModuleUnitTests [0x42d369]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429108]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tif(colors.length != patterns.length)\n\t\treturn false;\n\t\n\tfor(int i = 0; i < colors.length; i++)\n\t{\n\t\tif(colors[i] == patterns[i])\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124042,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpj075iug8.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x428c45]\n??:? void tmpj075iug8.__unittest_L19_C1() [0x427d4b]\n??:? void tmpj075iug8.__modtest() [0x427eb0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d593]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42899e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a441]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a4d0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a3cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428975]\n??:? runModuleUnitTests [0x42d369]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429108]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tint len = colors.length;\n\tif (len != patterns.length) return false;\n\tfor (int i = 0; i < len; i++)\n\t{\n\t\tif (colors[i] != patterns[i]) return false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124042,
      "stdout": "",
      "stderr": "/tmp/tmpph85wssz.d(9): Error: cannot implicitly convert expression `colors.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpph85wssz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tif (colors.length != patterns.length)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < colors.length; i++) \n\t{\n\t\tif (colors[i] != patterns[i])\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124042,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp2rohretz.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x428c45]\n??:? void tmp2rohretz.__unittest_L19_C1() [0x427c83]\n??:? void tmp2rohretz.__modtest() [0x427eb0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d593]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42899e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a441]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a4d0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a3cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428975]\n??:? runModuleUnitTests [0x42d369]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429108]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tint i = 0;\n\tfor (; i < patterns.length; i++) \n\t{\n\t\tif (colors[i] != patterns[i])\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124042,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpxvcxo1hc.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428c45]\n??:? void tmpxvcxo1hc.__unittest_L17_C1() [0x427c7f]\n??:? void tmpxvcxo1hc.__modtest() [0x427eac]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d593]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42899e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a441]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a4d0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a3cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428975]\n??:? runModuleUnitTests [0x42d369]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429108]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint l = 0;\n\tint m = 0;\n\tint n = 0;\n\tint o = 0;\n\tint p = 0;\n\tint q = 0;\n\tint r = 0;\n\tint s = 0;\n\tint t = 0;\n\tint u = 0;\n\tint v = 0;\n\tint w = 0;\n\tint x = 0;\n\tint y = 0;\n\tint z = 0;\n\t\n\tfor (i = 0; i < colors.length; i++)\n\t{\n\t\tif (colors[i] == \"red\")\n\t\t{\n\t\t\tj++;\n\t\t}\n\t\telse if (colors[i] == \"blue\")\n\t\t{\n\t\t\tk++;\n\t\t}\n\t\telse if (colors[i] == \"green\")\n\t\t{\n\t\t\tl++;\n\t\t}\n\t\telse if (colors[i] == \"yellow\")\n\t\t{\n\t\t\tm++;\n\t\t}\n\t\telse if (colors[i] == \"orange\")\n\t\t{\n\t\t\tn++;\n\t\t}\n\t\telse if (colors[i] == \"purple\")\n\t\t{\n\t\t\to++;\n\t\t}\n\t\telse if (colors[i] == \"pink\")\n\t\t{\n\t\t\tp++;\n\t\t}\n\t\telse if (colors[i] == \"black\")\n\t\t{\n\t\t\tq++;\n\t\t}\n\t\telse if (colors[i] == \"white\")\n\t\t{\n\t\t\tr++;\n\t\t}\n\t\telse if (colors[i] == \"brown\")\n\t\t{\n\t\t\ts++;\n\t\t}\n\t\telse if (colors[i] == \"grey\")\n\t\t{\n\t\t\tt++;\n\t\t}\n\t\telse if (colors[i] == \"cyan\")\n\t\t{\n\t\t\tu++;\n\t\t}\n\t\telse if (colors[i] == \"\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124042,
      "stdout": "",
      "stderr": "/tmp/tmpqb1avl9j.d(83): Error: found `red` when expecting `)`\n/tmp/tmpqb1avl9j.d(83): Error: found `green` when expecting `;` following statement\n/tmp/tmpqb1avl9j.d(83): Error: found `green` when expecting `;` following statement\n/tmp/tmpqb1avl9j.d(83): Error: found `a` when expecting `;` following statement\n/tmp/tmpqb1avl9j.d(83): Error: found `b` when expecting `;` following statement\n/tmp/tmpqb1avl9j.d(83): Error: found `b` when expecting `;` following statement\n/tmp/tmpqb1avl9j.d(84): Error: found `red` when expecting `;` following statement\n/tmp/tmpqb1avl9j.d(84): Error: found `green` when expecting `;` following statement\n/tmp/tmpqb1avl9j.d(84): Error: found `greenn` when expecting `;` following statement\n/tmp/tmpqb1avl9j.d(84): Error: found `a` when expecting `;` following statement\n/tmp/tmpqb1avl9j.d(84): Error: found `b` when expecting `;` following statement\n/tmp/tmpqb1avl9j.d(84): Error: found `b` when expecting `;` following statement\n/tmp/tmpqb1avl9j.d(85): Error: found `red` when expecting `;` f",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tint i = 0;\n\tforeach(string pattern; patterns)\n\t{\n\t\tif(pattern == \"*\")\n\t\t\tcontinue;\n\t\tif(pattern != colors[i])\n\t\t\treturn false;\n\t\ti++;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517192,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpldss0j68.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x428c6d]\n??:? void tmpldss0j68.__unittest_L20_C1() [0x427cab]\n??:? void tmpldss0j68.__modtest() [0x427ed8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d5bb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4289c6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a469]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a4f8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a3f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42899d]\n??:? runModuleUnitTests [0x42d391]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429130]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tint i = 0;\n\tforeach(string pattern; patterns)\n\t{\n\t\tif(pattern == \"*\")\n\t\t{\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(pattern != colors[i])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\ti++;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124042,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpgzxhm6ws.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x428c75]\n??:? void tmpgzxhm6ws.__unittest_L25_C1() [0x427caf]\n??:? void tmpgzxhm6ws.__modtest() [0x427edc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d5c3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4289ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a471]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a500]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a3fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x4289a5]\n??:? runModuleUnitTests [0x42d399]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429138]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tif(colors.length != patterns.length)\n\t\treturn false;\n\t\n\tfor(int i = 0; i < colors.length; i++)\n\t{\n\t\tif(colors[i] != patterns[i])\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517192,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpd8rjiz7m.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x428c45]\n??:? void tmpd8rjiz7m.__unittest_L19_C1() [0x427c83]\n??:? void tmpd8rjiz7m.__modtest() [0x427eb0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d593]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42899e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a441]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a4d0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a3cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428975]\n??:? runModuleUnitTests [0x42d369]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429108]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tif(colors.length != patterns.length) return false;\n\t\n\tfor(int i = 0; i < patterns.length; i++)\n\t{\n\t\tif(patterns[i] == \"even\")\n\t\t{\n\t\t\tif(colors[i] != \"red\" && colors[i] != \"blue\") return false;\n\t\t}\n\t\telse if(patterns[i] == \"odd\")\n\t\t{\n\t\t\tif(colors[i] != \"green\" && colors[i] != \"purple\") return false;\n\t\t}\n\t\telse if(patterns[i] == \"up\")\n\t\t{\n\t\t\tif(colors[i] != \"red\" && colors[i] != \"green\") return false;\n\t\t}\n\t\telse if(patterns[i] == \"down\")\n\t\t{\n\t\t\tif(colors[i] != \"blue\" && colors[i] != \"purple\") return false;\n\t\t}\n\t\telse return false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124042,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp8snv6fgi.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x429015]\n??:? void tmp8snv6fgi.__unittest_L33_C1() [0x428053]\n??:? void tmp8snv6fgi.__modtest() [0x428280]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d963]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428d6e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a811]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a8a0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a79d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428d45]\n??:? runModuleUnitTests [0x42d739]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4294d8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tif(colors.length != patterns.length)\n\t\treturn false;\n\t\n\tfor(int i = 0; i < colors.length; i++)\n\t{\n\t\tif(colors[i] != patterns[i])\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517192,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpd8rjiz7m.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x428c45]\n??:? void tmpd8rjiz7m.__unittest_L19_C1() [0x427c83]\n??:? void tmpd8rjiz7m.__modtest() [0x427eb0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d593]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42899e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a441]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a4d0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a3cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428975]\n??:? runModuleUnitTests [0x42d369]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429108]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tif(colors.length != patterns.length)\n\t\treturn false;\n\t\n\tfor(int i = 0; i < colors.length; i++)\n\t{\n\t\tif(colors[i] != patterns[i])\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124042,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpfo1_3t16.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x428c45]\n??:? void tmpfo1_3t16.__unittest_L20_C1() [0x427c83]\n??:? void tmpfo1_3t16.__modtest() [0x427eb0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d593]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42899e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a441]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a4d0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a3cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428975]\n??:? runModuleUnitTests [0x42d369]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429108]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tint i = 0;\n\tforeach(string pattern; patterns)\n\t{\n\t\tif(colors[i] != pattern)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\ti++;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124042,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp_vn0g2x7.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x428c45]\n??:? void tmp_vn0g2x7.__unittest_L20_C1() [0x427c83]\n??:? void tmp_vn0g2x7.__modtest() [0x427eb0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d593]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42899e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a441]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a4d0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a3cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428975]\n??:? runModuleUnitTests [0x42d369]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429108]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tif (colors.length != patterns.length) return false;\n\t\n\tfor (int i = 0; i < colors.length; i++)\n\t{\n\t\tif (colors[i] == patterns[i]) continue;\n\t\telse if (patterns[i] == \"*\") continue;\n\t\telse return false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124042,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpbcg5gwpd.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x428c95]\n??:? void tmpbcg5gwpd.__unittest_L19_C1() [0x427cd3]\n??:? void tmpbcg5gwpd.__modtest() [0x427f00]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d5e3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4289ee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a491]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a520]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a41d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x4289c5]\n??:? runModuleUnitTests [0x42d3b9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429158]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tif (colors.length != patterns.length)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < colors.length; i++)\n\t{\n\t\tif (!colors[i].startsWith(patterns[i]))\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124042,
      "stdout": "",
      "stderr": "/tmp/tmppuoae9js.d(14): Error: no property `startsWith` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppuoae9js.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tif (colors.length != patterns.length) return false;\n\t\n\tfor (int i = 0; i < colors.length; i++)\n\t{\n\t\tif (colors[i] != patterns[i]) return false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124042,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpk3zam_q1.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x428c45]\n??:? void tmpk3zam_q1.__unittest_L18_C1() [0x427c83]\n??:? void tmpk3zam_q1.__modtest() [0x427eb0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d593]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42899e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a441]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a4d0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a3cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428975]\n??:? runModuleUnitTests [0x42d369]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429108]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tif (colors.length != patterns.length)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < colors.length; i++)\n\t{\n\t\tif (patterns[i] == \"even\" && colors[i] % 2 != 0)\n\t\t\treturn false;\n\t\tif (patterns[i] == \"odd\" && colors[i] % 2 == 0)\n\t\t\treturn false;\n\t\tif (patterns[i] == \"up\" && colors[i] < colors[i - 1])\n\t\t\treturn false;\n\t\tif (patterns[i] == \"down\" && colors[i] > colors[i - 1])\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124042,
      "stdout": "",
      "stderr": "/tmp/tmptnu_8uf4.d(14): Error: incompatible types for `(colors[cast(ulong)i]) % (2)`: `string` and `int`\n/tmp/tmptnu_8uf4.d(16): Error: incompatible types for `(colors[cast(ulong)i]) % (2)`: `string` and `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptnu_8uf4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tif(colors.length != patterns.length) return false;\n\t\n\tfor(int i = 0; i < colors.length; i++)\n\t{\n\t\tif(colors[i] != patterns[i]) return false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124042,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp56qaqoku.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x428c45]\n??:? void tmp56qaqoku.__unittest_L18_C1() [0x427c83]\n??:? void tmp56qaqoku.__modtest() [0x427eb0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d593]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42899e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a441]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a4d0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a3cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428975]\n??:? runModuleUnitTests [0x42d369]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429108]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tif (colors.length != patterns.length) return false;\n\t\n\tfor (int i = 0; i < colors.length; i++)\n\t{\n\t\tif (colors[i] == patterns[i]) continue;\n\t\telse if (colors[i] == \"R\" && patterns[i] == \"G\") return false;\n\t\telse if (colors[i] == \"G\" && patterns[i] == \"B\") return false;\n\t\telse if (colors[i] == \"B\" && patterns[i] == \"R\") return false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517192,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpi4tertao.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x428e7d]\n??:? void tmpi4tertao.__unittest_L21_C1() [0x427f7f]\n??:? void tmpi4tertao.__modtest() [0x4280e4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d7cb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428bd6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a679]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a708]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a605]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428bad]\n??:? runModuleUnitTests [0x42d5a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429340]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint l = 0;\n\tint m = 0;\n\tint n = 0;\n\tint o = 0;\n\tint p = 0;\n\tint q = 0;\n\tint r = 0;\n\tint s = 0;\n\tint t = 0;\n\tint u = 0;\n\tint v = 0;\n\tint w = 0;\n\tint x = 0;\n\tint y = 0;\n\tint z = 0;\n\tint aa = 0;\n\tint ab = 0;\n\tint ac = 0;\n\tint ad = 0;\n\tint ae = 0;\n\tint af = 0;\n\tint ag = 0;\n\tint ah = 0;\n\tint ai = 0;\n\tint aj = 0;\n\tint ak = 0;\n\tint al = 0;\n\tint am = 0;\n\tint an = 0;\n\tint ao = 0;\n\tint ap = 0;\n\tint aq = 0;\n\tint ar = 0;\n\tint as = 0;\n\tint at = 0;\n\tint au = 0;\n\tint av = 0;\n\tint aw = 0;\n\tint ax = 0;\n\tint ay = 0;\n\tint az = 0;\n\tint ba = 0;\n\tint bb = 0;\n\tint bc = 0;\n\tint bd = 0;\n\tint be = 0;\n\tint bf = 0;\n\tint bg = 0;\n\tint bh = 0;\n\tint bi = 0;\n\tint bj = 0;\n\tint bk = 0;\n\tint bl = 0;\n\tint bm = 0;\n\tint bn = 0;\n\tint bo = 0;\n\tint bp = 0;\n\tint bq = 0;\n\tint br = 0;\n\tint bs = 0;\n\tint bt = 0;\n\tint bu = 0;\n\tint bv = 0;\n\tint bw = 0;\n\tint bx = 0;\n\tint by = 0;\n\tint bz\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124041,
      "stdout": "",
      "stderr": "/tmp/tmpxadutf21.d(79): Error: semicolon expected, not `unittest`\n/tmp/tmpxadutf21.d(79): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxadutf21.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tint i = 0;\n\tforeach(string color; colors)\n\t{\n\t\tif(color != patterns[i])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\ti++;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517192,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpvc6frgop.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x428c35]\n??:? void tmpvc6frgop.__unittest_L20_C1() [0x427c6f]\n??:? void tmpvc6frgop.__modtest() [0x427e9c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d583]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42898e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a431]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a4c0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a3bd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428965]\n??:? runModuleUnitTests [0x42d359]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4290f8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tif(colors.length != patterns.length) return false;\n\t\n\tfor(int i = 0; i < colors.length; i++)\n\t{\n\t\tif(colors[i] != patterns[i]) return false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124042,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp56qaqoku.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x428c45]\n??:? void tmp56qaqoku.__unittest_L18_C1() [0x427c83]\n??:? void tmp56qaqoku.__modtest() [0x427eb0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d593]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42899e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a441]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a4d0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a3cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428975]\n??:? runModuleUnitTests [0x42d369]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429108]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint l = 0;\n\tint m = 0;\n\tint n = 0;\n\tint o = 0;\n\tint p = 0;\n\tint q = 0;\n\tint r = 0;\n\tint s = 0;\n\tint t = 0;\n\tint u = 0;\n\tint v = 0;\n\tint w = 0;\n\tint x = 0;\n\tint y = 0;\n\tint z = 0;\n\t\n\tint a = 0;\n\tint b = 0;\n\tint c = 0;\n\tint d = 0;\n\tint e = 0;\n\tint f = 0;\n\tint g = 0;\n\tint h = 0;\n\tint ii = 0;\n\tint jj = 0;\n\tint kk = 0;\n\tint ll = 0;\n\tint mm = 0;\n\tint nn = 0;\n\tint oo = 0;\n\tint pp = 0;\n\tint qq = 0;\n\tint rr = 0;\n\tint ss = 0;\n\tint tt = 0;\n\tint uu = 0;\n\tint vv = 0;\n\tint ww = 0;\n\tint xx = 0;\n\tint yy = 0;\n\tint zz = 0;\n\t\n\tint aa = 0;\n\tint bb = 0;\n\tint cc = 0;\n\tint dd = 0;\n\tint ee = 0;\n\tint ff = 0;\n\tint gg = 0;\n\tint hh = 0;\n\tint iii = 0;\n\tint jjj = 0;\n\tint kkk = 0;\n\tint lll = 0;\n\tint mmm = 0;\n\tint nnn = 0;\n\tint ooo = 0;\n\tint ppp = 0;\n\tint qqq = 0;\n\tint rrr = 0;\n\tint sss = 0;\n\tint ttt = 0;\n\tint uuu = 0;\n\tint vvv = 0;\n\tint www = 0;\n\tint xxx = 0\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517191,
      "stdout": "",
      "stderr": "/tmp/tmpcw73uijm.d(79): Error: semicolon expected, not `unittest`\n/tmp/tmpcw73uijm.d(79): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcw73uijm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint l = 0;\n\tint m = 0;\n\tint n = 0;\n\tint o = 0;\n\tint p = 0;\n\tint q = 0;\n\tint r = 0;\n\tint s = 0;\n\tint t = 0;\n\tint u = 0;\n\tint v = 0;\n\tint w = 0;\n\tint x = 0;\n\tint y = 0;\n\tint z = 0;\n\tint aa = 0;\n\tint ab = 0;\n\tint ac = 0;\n\tint ad = 0;\n\tint ae = 0;\n\tint af = 0;\n\tint ag = 0;\n\tint ah = 0;\n\tint ai = 0;\n\tint aj = 0;\n\tint ak = 0;\n\tint al = 0;\n\tint am = 0;\n\tint an = 0;\n\tint ao = 0;\n\tint ap = 0;\n\tint aq = 0;\n\tint ar = 0;\n\tint as = 0;\n\tint at = 0;\n\tint au = 0;\n\tint av = 0;\n\tint aw = 0;\n\tint ax = 0;\n\tint ay = 0;\n\tint az = 0;\n\tint ba = 0;\n\tint bb = 0;\n\tint bc = 0;\n\tint bd = 0;\n\tint be = 0;\n\tint bf = 0;\n\tint bg = 0;\n\tint bh = 0;\n\tint bi = 0;\n\tint bj = 0;\n\tint bk = 0;\n\tint bl = 0;\n\tint bm = 0;\n\tint bn = 0;\n\tint bo = 0;\n\tint bp = 0;\n\tint bq = 0;\n\tint br = 0;\n\tint bs = 0;\n\tint bt = 0;\n\tint bu = 0;\n\tint bv = 0;\n\tint bw = 0;\n\tint bx = 0;\n\tint by = 0;\n\tint bz\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124041,
      "stdout": "",
      "stderr": "/tmp/tmpxadutf21.d(79): Error: semicolon expected, not `unittest`\n/tmp/tmpxadutf21.d(79): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxadutf21.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tif(colors.length != patterns.length)\n\t\treturn false;\n\t\n\tfor(int i = 0; i < colors.length; i++)\n\t{\n\t\tif(colors[i] != patterns[i])\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517192,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpd8rjiz7m.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x428c45]\n??:? void tmpd8rjiz7m.__unittest_L19_C1() [0x427c83]\n??:? void tmpd8rjiz7m.__modtest() [0x427eb0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d593]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42899e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a441]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a4d0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a3cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428975]\n??:? runModuleUnitTests [0x42d369]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429108]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tif (colors.length != patterns.length)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < colors.length; i++)\n\t{\n\t\tif (colors[i] == patterns[i])\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124042,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpu_ag_xg9.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x428c45]\n??:? void tmpu_ag_xg9.__unittest_L19_C1() [0x427d4b]\n??:? void tmpu_ag_xg9.__modtest() [0x427eb0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d593]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42899e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a441]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a4d0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a3cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428975]\n??:? runModuleUnitTests [0x42d369]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429108]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tif(colors.length != patterns.length)\n\t\treturn false;\n\t\n\tfor(int i = 0; i < colors.length; i++)\n\t{\n\t\tif(colors[i] == \"red\")\n\t\t{\n\t\t\tif(patterns[i] != \"circle\")\n\t\t\t\treturn false;\n\t\t}\n\t\telse if(colors[i] == \"blue\")\n\t\t{\n\t\t\tif(patterns[i] != \"square\")\n\t\t\t\treturn false;\n\t\t}\n\t\telse if(colors[i] == \"green\")\n\t\t{\n\t\t\tif(patterns[i] != \"triangle\")\n\t\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124042,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpg2b1xc23.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x428dd5]\n??:? void tmpg2b1xc23.__unittest_L34_C1() [0x427e13]\n??:? void tmpg2b1xc23.__modtest() [0x428040]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d723]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428b2e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a5d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a660]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a55d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428b05]\n??:? runModuleUnitTests [0x42d4f9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429298]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tint i = 0;\n\tforeach(string pattern; patterns)\n\t{\n\t\tif(pattern == \"even\")\n\t\t{\n\t\t\tif(colors[i] != colors[i+1])\n\t\t\t\treturn false;\n\t\t\ti += 2;\n\t\t}\n\t\telse if(pattern == \"odd\")\n\t\t{\n\t\t\tif(colors[i] == colors[i+1])\n\t\t\t\treturn false;\n\t\t\ti += 2;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(colors[i] != pattern)\n\t\t\t\treturn false;\n\t\t\ti += 1;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124042,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpdwfsxvfs.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x428df5]\n??:? void tmpdwfsxvfs.__unittest_L33_C1() [0x427e2f]\n??:? void tmpdwfsxvfs.__modtest() [0x42805c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d743]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428b4e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a5f1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a680]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a57d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428b25]\n??:? runModuleUnitTests [0x42d519]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4292b8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tif (colors.length != patterns.length) return false;\n\t\n\tfor (int i = 0; i < colors.length; i++)\n\t{\n\t\tif (colors[i] != patterns[i]) return false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124042,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpk3zam_q1.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x428c45]\n??:? void tmpk3zam_q1.__unittest_L18_C1() [0x427c83]\n??:? void tmpk3zam_q1.__modtest() [0x427eb0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d593]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42899e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a441]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a4d0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a3cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428975]\n??:? runModuleUnitTests [0x42d369]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429108]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tif(colors.length != patterns.length)\n\t\treturn false;\n\t\n\tfor(int i = 0; i < colors.length; i++)\n\t{\n\t\tif(colors[i] == patterns[i])\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124041,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpehibm2hl.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x428c45]\n??:? void tmpehibm2hl.__unittest_L20_C1() [0x427d4b]\n??:? void tmpehibm2hl.__modtest() [0x427eb0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d593]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42899e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a441]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a4d0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a3cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428975]\n??:? runModuleUnitTests [0x42d369]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429108]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tint i = 0;\n\tforeach(string pattern; patterns)\n\t{\n\t\tif(pattern == \"even\")\n\t\t{\n\t\t\tif(i % 2 == 0)\n\t\t\t{\n\t\t\t\ti++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\telse if(pattern == \"odd\")\n\t\t{\n\t\t\tif(i % 2 != 0)\n\t\t\t{\n\t\t\t\ti++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(colors[i] == pattern)\n\t\t\t{\n\t\t\t\ti++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124042,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp4ua7qgyv.d(55): unittest failure\n----------------\n??:? _d_unittestp [0x428cdd]\n??:? void tmp4ua7qgyv.__unittest_L51_C1() [0x427d17]\n??:? void tmp4ua7qgyv.__modtest() [0x427f44]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d62b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428a36]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a4d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a568]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a465]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428a0d]\n??:? runModuleUnitTests [0x42d401]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4291a0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tint i = 0;\n\tforeach(string color; colors)\n\t{\n\t\tif(color != patterns[i])\n\t\t\treturn false;\n\t\ti = (i + 1) % patterns.length;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124041,
      "stdout": "",
      "stderr": "/tmp/tmplr1awgo9.d(14): Error: cannot implicitly convert expression `cast(ulong)(i + 1) % patterns.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplr1awgo9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tif (colors.length != patterns.length)\n\t\treturn false;\n\tfor (int i = 0; i < colors.length; i++)\n\t{\n\t\tif (colors[i] != patterns[i])\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124042,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmphwuuq67d.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x428c45]\n??:? void tmphwuuq67d.__unittest_L18_C1() [0x427c83]\n??:? void tmphwuuq67d.__modtest() [0x427eb0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d593]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42899e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a441]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a4d0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a3cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428975]\n??:? runModuleUnitTests [0x42d369]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429108]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint l = 0;\n\tint m = 0;\n\tint n = 0;\n\tint o = 0;\n\tint p = 0;\n\tint q = 0;\n\tint r = 0;\n\tint s = 0;\n\tint t = 0;\n\tint u = 0;\n\tint v = 0;\n\tint w = 0;\n\tint x = 0;\n\tint y = 0;\n\tint z = 0;\n\tint aa = 0;\n\tint bb = 0;\n\tint cc = 0;\n\tint dd = 0;\n\tint ee = 0;\n\tint ff = 0;\n\tint gg = 0;\n\tint hh = 0;\n\tint ii = 0;\n\tint jj = 0;\n\tint kk = 0;\n\tint ll = 0;\n\tint mm = 0;\n\tint nn = 0;\n\tint oo = 0;\n\tint pp = 0;\n\tint qq = 0;\n\tint rr = 0;\n\tint ss = 0;\n\tint tt = 0;\n\tint uu = 0;\n\tint vv = 0;\n\tint ww = 0;\n\tint xx = 0;\n\tint yy = 0;\n\tint zz = 0;\n\tint aaa = 0;\n\tint bbb = 0;\n\tint ccc = 0;\n\tint ddd = 0;\n\tint eee = 0;\n\tint fff = 0;\n\tint ggg = 0;\n\tint hhh = 0;\n\tint iii = 0;\n\tint jjj = 0;\n\tint kkk = 0;\n\tint lll = 0;\n\tint mmm = 0;\n\tint nnn = 0;\n\tint ooo = 0;\n\tint ppp = 0;\n\tint qqq = 0;\n\tint rrr = 0;\n\tint sss = 0;\n\tint ttt = 0;\n\tint uuu = 0;\n\tint vvv = 0;\n\tint www = 0;\n\tint\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517191,
      "stdout": "",
      "stderr": "/tmp/tmpgwtpcwae.d(77): Error: no identifier for declarator `int`\n/tmp/tmpgwtpcwae.d(77): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgwtpcwae.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tif(colors.length != patterns.length)\n\t{\n\t\treturn false;\n\t}\n\t\n\tfor(int i = 0; i < colors.length; i++)\n\t{\n\t\tif(colors[i] != patterns[i])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124042,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpoc2y1a11.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428c45]\n??:? void tmpoc2y1a11.__unittest_L24_C1() [0x427c83]\n??:? void tmpoc2y1a11.__modtest() [0x427eb0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d593]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42899e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a441]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a4d0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a3cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428975]\n??:? runModuleUnitTests [0x42d369]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429108]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\t\n\twhile (i < colors.length && j < patterns.length)\n\t{\n\t\tif (colors[i] == patterns[j])\n\t\t{\n\t\t\tk++;\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\ti++;\n\t\t}\n\t}\n\t\n\tif (k == patterns.length)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124042,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpdhe0z6yz.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x428c5d]\n??:? void tmpdhe0z6yz.__unittest_L36_C1() [0x427c97]\n??:? void tmpdhe0z6yz.__modtest() [0x427ec4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d5ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4289b6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a459]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a4e8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a3e5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42898d]\n??:? runModuleUnitTests [0x42d381]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429120]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tif(colors.length != patterns.length)\n\t\treturn false;\n\t\n\tfor(int i = 0; i < colors.length; i++)\n\t{\n\t\tif(colors[i] != patterns[i])\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124042,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpfo1_3t16.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x428c45]\n??:? void tmpfo1_3t16.__unittest_L20_C1() [0x427c83]\n??:? void tmpfo1_3t16.__modtest() [0x427eb0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d593]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42899e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a441]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a4d0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a3cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428975]\n??:? runModuleUnitTests [0x42d369]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429108]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tif(colors.length != patterns.length)\n\t\treturn false;\n\t\n\tfor(int i = 0; i < colors.length; i++)\n\t{\n\t\tif(colors[i] != patterns[i])\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124042,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpfo1_3t16.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x428c45]\n??:? void tmpfo1_3t16.__unittest_L20_C1() [0x427c83]\n??:? void tmpfo1_3t16.__modtest() [0x427eb0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d593]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42899e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a441]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a4d0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a3cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428975]\n??:? runModuleUnitTests [0x42d369]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429108]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tint i = 0;\n\tforeach(string pattern; patterns)\n\t{\n\t\tif(pattern == \"*\")\n\t\t{\n\t\t\tcontinue;\n\t\t}\n\t\telse if(pattern != colors[i])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\ti++;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124042,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmphqunwg_g.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428c6d]\n??:? void tmphqunwg_g.__unittest_L24_C1() [0x427cab]\n??:? void tmphqunwg_g.__modtest() [0x427ed8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d5bb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4289c6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a469]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a4f8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a3f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42899d]\n??:? runModuleUnitTests [0x42d391]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429130]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint l = 0;\n\tint m = 0;\n\tint n = 0;\n\tint o = 0;\n\tint p = 0;\n\tint q = 0;\n\tint r = 0;\n\tint s = 0;\n\tint t = 0;\n\tint u = 0;\n\tint v = 0;\n\tint w = 0;\n\tint x = 0;\n\tint y = 0;\n\tint z = 0;\n\tint aa = 0;\n\tint ab = 0;\n\tint ac = 0;\n\tint ad = 0;\n\tint ae = 0;\n\tint af = 0;\n\tint ag = 0;\n\tint ah = 0;\n\tint ai = 0;\n\tint aj = 0;\n\tint ak = 0;\n\tint al = 0;\n\tint am = 0;\n\tint an = 0;\n\tint ao = 0;\n\tint ap = 0;\n\tint aq = 0;\n\tint ar = 0;\n\tint as = 0;\n\tint at = 0;\n\tint au = 0;\n\tint av = 0;\n\tint aw = 0;\n\tint ax = 0;\n\tint ay = 0;\n\tint az = 0;\n\tint ba = 0;\n\tint bb = 0;\n\tint bc = 0;\n\tint bd = 0;\n\tint be = 0;\n\tint bf = 0;\n\tint bg = 0;\n\tint bh = 0;\n\tint bi = 0;\n\tint bj = 0;\n\tint bk = 0;\n\tint bl = 0;\n\tint bm = 0;\n\tint bn = 0;\n\tint bo = 0;\n\tint bp = 0;\n\tint bq = 0;\n\tint br = 0;\n\tint bs = 0;\n\tint bt = 0;\n\tint bu = 0;\n\tint bv = 0;\n\tint bw = 0;\n\tint bx = 0;\n\tint by = 0;\n\tint bz\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124041,
      "stdout": "",
      "stderr": "/tmp/tmpxadutf21.d(79): Error: semicolon expected, not `unittest`\n/tmp/tmpxadutf21.d(79): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxadutf21.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint l = 0;\n\tint m = 0;\n\tint n = 0;\n\tint o = 0;\n\tint p = 0;\n\tint q = 0;\n\tint r = 0;\n\tint s = 0;\n\tint t = 0;\n\tint u = 0;\n\tint v = 0;\n\tint w = 0;\n\tint x = 0;\n\tint y = 0;\n\tint z = 0;\n\tint aa = 0;\n\tint bb = 0;\n\tint cc = 0;\n\tint dd = 0;\n\tint ee = 0;\n\tint ff = 0;\n\tint gg = 0;\n\tint hh = 0;\n\tint ii = 0;\n\tint jj = 0;\n\tint kk = 0;\n\tint ll = 0;\n\tint mm = 0;\n\tint nn = 0;\n\tint oo = 0;\n\tint pp = 0;\n\tint qq = 0;\n\tint rr = 0;\n\tint ss = 0;\n\tint tt = 0;\n\tint uu = 0;\n\tint vv = 0;\n\tint ww = 0;\n\tint xx = 0;\n\tint yy = 0;\n\tint zz = 0;\n\tint aaa = 0;\n\tint bbb = 0;\n\tint ccc = 0;\n\tint ddd = 0;\n\tint eee = 0;\n\tint fff = 0;\n\tint ggg = 0;\n\tint hhh = 0;\n\tint iii = 0;\n\tint jjj = 0;\n\tint kkk = 0;\n\tint lll = 0;\n\tint mmm = 0;\n\tint nnn = 0;\n\tint ooo = 0;\n\tint ppp = 0;\n\tint qqq = 0;\n\tint rrr = 0;\n\tint sss = 0;\n\tint ttt = 0;\n\tint uuu = 0;\n\tint vvv = 0;\n\tint www = 0;\n\tint\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517191,
      "stdout": "",
      "stderr": "/tmp/tmpgwtpcwae.d(77): Error: no identifier for declarator `int`\n/tmp/tmpgwtpcwae.d(77): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgwtpcwae.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tint i = 0;\n\tforeach(string color; colors)\n\t{\n\t\tif(color != patterns[i])\n\t\t\treturn false;\n\t\ti = (i + 1) % patterns.length;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124041,
      "stdout": "",
      "stderr": "/tmp/tmplr1awgo9.d(14): Error: cannot implicitly convert expression `cast(ulong)(i + 1) % patterns.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplr1awgo9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tif(colors.length != patterns.length) return false;\n\t\n\tfor(int i = 0; i < colors.length; i++)\n\t{\n\t\tif(colors[i] == patterns[i]) return false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124042,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppm4rzfms.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x428c45]\n??:? void tmppm4rzfms.__unittest_L18_C1() [0x427d4b]\n??:? void tmppm4rzfms.__modtest() [0x427eb0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d593]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42899e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a441]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a4d0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a3cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428975]\n??:? runModuleUnitTests [0x42d369]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429108]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tif (colors.length != patterns.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (int i = 0; i < colors.length; i++) \n\t{\n\t\tif (colors[i] != patterns[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124042,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpfi4l_db4.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x428c45]\n??:? void tmpfi4l_db4.__unittest_L23_C1() [0x427c83]\n??:? void tmpfi4l_db4.__modtest() [0x427eb0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d593]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42899e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a441]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a4d0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a3cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428975]\n??:? runModuleUnitTests [0x42d369]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429108]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tif (colors.length != patterns.length)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < colors.length; i++)\n\t{\n\t\tif (colors[i] != patterns[i])\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517192,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3ksxl9ug.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x428c45]\n??:? void tmp3ksxl9ug.__unittest_L20_C1() [0x427c83]\n??:? void tmp3ksxl9ug.__modtest() [0x427eb0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d593]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42899e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a441]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a4d0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a3cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428975]\n??:? runModuleUnitTests [0x42d369]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429108]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tif (colors.length != patterns.length)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < colors.length; i++)\n\t{\n\t\tif (colors[i] == \"red\")\n\t\t{\n\t\t\tif (patterns[i] != \"circle\")\n\t\t\t\treturn false;\n\t\t}\n\t\telse if (colors[i] == \"green\")\n\t\t{\n\t\t\tif (patterns[i] != \"triangle\")\n\t\t\t\treturn false;\n\t\t}\n\t\telse if (colors[i] == \"blue\")\n\t\t{\n\t\t\tif (patterns[i] != \"square\")\n\t\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124042,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmprdsb3p16.d(39): unittest failure\n----------------\n??:? _d_unittestp [0x428dd5]\n??:? void tmprdsb3p16.__unittest_L35_C1() [0x427e13]\n??:? void tmprdsb3p16.__modtest() [0x428040]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d723]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428b2e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a5d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a660]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a55d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428b05]\n??:? runModuleUnitTests [0x42d4f9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429298]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tif(colors.length != patterns.length) return false;\n\t\n\tfor(int i = 0; i < colors.length; i++)\n\t{\n\t\tif(colors[i] != patterns[i]) return false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124042,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp56qaqoku.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x428c45]\n??:? void tmp56qaqoku.__unittest_L18_C1() [0x427c83]\n??:? void tmp56qaqoku.__modtest() [0x427eb0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d593]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42899e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a441]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a4d0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a3cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428975]\n??:? runModuleUnitTests [0x42d369]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429108]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint l = 0;\n\tint m = 0;\n\tint n = 0;\n\tint o = 0;\n\tint p = 0;\n\tint q = 0;\n\tint r = 0;\n\tint s = 0;\n\tint t = 0;\n\tint u = 0;\n\tint v = 0;\n\tint w = 0;\n\tint x = 0;\n\tint y = 0;\n\tint z = 0;\n\tint aa = 0;\n\tint bb = 0;\n\tint cc = 0;\n\tint dd = 0;\n\tint ee = 0;\n\tint ff = 0;\n\tint gg = 0;\n\tint hh = 0;\n\tint ii = 0;\n\tint jj = 0;\n\tint kk = 0;\n\tint ll = 0;\n\tint mm = 0;\n\tint nn = 0;\n\tint oo = 0;\n\tint pp = 0;\n\tint qq = 0;\n\tint rr = 0;\n\tint ss = 0;\n\tint tt = 0;\n\tint uu = 0;\n\tint vv = 0;\n\tint ww = 0;\n\tint xx = 0;\n\tint yy = 0;\n\tint zz = 0;\n\tint aaa = 0;\n\tint bbb = 0;\n\tint ccc = 0;\n\tint ddd = 0;\n\tint eee = 0;\n\tint fff = 0;\n\tint ggg = 0;\n\tint hhh = 0;\n\tint iii = 0;\n\tint jjj = 0;\n\tint kkk = 0;\n\tint lll = 0;\n\tint mmm = 0;\n\tint nnn = 0;\n\tint ooo = 0;\n\tint ppp = 0;\n\tint qqq = 0;\n\tint rrr = 0;\n\tint sss = 0;\n\tint ttt = 0;\n\tint uuu = 0;\n\tint vvv = 0;\n\tint www = 0;\n\tint\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517191,
      "stdout": "",
      "stderr": "/tmp/tmpgwtpcwae.d(77): Error: no identifier for declarator `int`\n/tmp/tmpgwtpcwae.d(77): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgwtpcwae.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tif(colors.length != patterns.length)\n\t\treturn false;\n\t\n\tfor(int i = 0; i < colors.length; i++)\n\t{\n\t\tif(colors[i] != patterns[i])\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517192,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpd8rjiz7m.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x428c45]\n??:? void tmpd8rjiz7m.__unittest_L19_C1() [0x427c83]\n??:? void tmpd8rjiz7m.__modtest() [0x427eb0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d593]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42899e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a441]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a4d0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a3cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428975]\n??:? runModuleUnitTests [0x42d369]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429108]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tint i = 0;\n\tforeach(string color; colors)\n\t{\n\t\tif(color != patterns[i])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\ti++;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517192,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpvc6frgop.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x428c35]\n??:? void tmpvc6frgop.__unittest_L20_C1() [0x427c6f]\n??:? void tmpvc6frgop.__modtest() [0x427e9c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d583]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42898e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a431]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a4c0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a3bd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428965]\n??:? runModuleUnitTests [0x42d359]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4290f8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tint i = 0;\n\tint j = 0;\n\tint n = colors.length;\n\tint m = patterns.length;\n\t\n\twhile (i < n && j < m) \n\t{\n\t\tif (colors[i] == patterns[j]) \n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t} \n\t\telse \n\t\t{\n\t\t\ti++;\n\t\t}\n\t}\n\t\n\treturn (j == m);\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124042,
      "stdout": "",
      "stderr": "/tmp/tmpmgzi72fo.d(11): Error: cannot implicitly convert expression `colors.length` of type `ulong` to `int`\n/tmp/tmpmgzi72fo.d(12): Error: cannot implicitly convert expression `patterns.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmgzi72fo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tif (colors.length != patterns.length)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < patterns.length; i++)\n\t{\n\t\tif (patterns[i] == \"even\" && colors[i] % 2 == 0)\n\t\t\tcontinue;\n\t\telse if (patterns[i] == \"odd\" && colors[i] % 2 == 1)\n\t\t\tcontinue;\n\t\telse if (patterns[i] == \"up\" && colors[i] > colors[i - 1])\n\t\t\tcontinue;\n\t\telse if (patterns[i] == \"down\" && colors[i] < colors[i - 1])\n\t\t\tcontinue;\n\t\telse\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124042,
      "stdout": "",
      "stderr": "/tmp/tmp4xn0cnnf.d(14): Error: incompatible types for `(colors[cast(ulong)i]) % (2)`: `string` and `int`\n/tmp/tmp4xn0cnnf.d(16): Error: incompatible types for `(colors[cast(ulong)i]) % (2)`: `string` and `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4xn0cnnf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tif (colors.length != patterns.length)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < colors.length; i++)\n\t{\n\t\tif (colors[i] != patterns[i])\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517192,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3ksxl9ug.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x428c45]\n??:? void tmp3ksxl9ug.__unittest_L20_C1() [0x427c83]\n??:? void tmp3ksxl9ug.__modtest() [0x427eb0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d593]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42899e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a441]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a4d0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a3cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428975]\n??:? runModuleUnitTests [0x42d369]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429108]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tif(colors.length != patterns.length)\n\t\treturn false;\n\t\n\tfor(int i = 0; i < colors.length; i++)\n\t{\n\t\tif(colors[i] == \"red\" && patterns[i] != \"circle\")\n\t\t\treturn false;\n\t\tif(colors[i] == \"blue\" && patterns[i] != \"triangle\")\n\t\t\treturn false;\n\t\tif(colors[i] == \"green\" && patterns[i] != \"square\")\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124042,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpmmefkn45.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x428de5]\n??:? void tmpmmefkn45.__unittest_L23_C1() [0x427e23]\n??:? void tmpmmefkn45.__modtest() [0x428050]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d733]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428b3e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a5e1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a670]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a56d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428b15]\n??:? runModuleUnitTests [0x42d509]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4292a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tif(colors.length != patterns.length)\n\t\treturn false;\n\t\n\tfor(int i = 0; i < colors.length; i++)\n\t{\n\t\tif(colors[i] != patterns[i])\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517192,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpd8rjiz7m.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x428c45]\n??:? void tmpd8rjiz7m.__unittest_L19_C1() [0x427c83]\n??:? void tmpd8rjiz7m.__modtest() [0x427eb0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d593]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42899e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a441]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a4d0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a3cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428975]\n??:? runModuleUnitTests [0x42d369]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429108]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tif(colors.length != patterns.length)\n\t\treturn false;\n\t\n\tfor(int i = 0; i < patterns.length; i++)\n\t{\n\t\tif(patterns[i] == \"even\")\n\t\t{\n\t\t\tif(colors[i] != \"red\" && colors[i] != \"black\")\n\t\t\t\treturn false;\n\t\t}\n\t\telse if(patterns[i] == \"odd\")\n\t\t{\n\t\t\tif(colors[i] != \"red\" && colors[i] != \"black\")\n\t\t\t\treturn false;\n\t\t}\n\t\telse if(patterns[i] == \"high\")\n\t\t{\n\t\t\tif(colors[i] != \"red\" && colors[i] != \"black\")\n\t\t\t\treturn false;\n\t\t}\n\t\telse if(patterns[i] == \"low\")\n\t\t{\n\t\t\tif(colors[i] != \"red\" && colors[i] != \"black\")\n\t\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124042,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmprgzlnech.d(43): unittest failure\n----------------\n??:? _d_unittestp [0x429015]\n??:? void tmprgzlnech.__unittest_L39_C1() [0x428053]\n??:? void tmprgzlnech.__modtest() [0x428280]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d963]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428d6e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a811]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a8a0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a79d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428d45]\n??:? runModuleUnitTests [0x42d739]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4294d8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tif (colors.length != patterns.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (int i = 0; i < patterns.length; i++) \n\t{\n\t\tif (colors[i] != patterns[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124042,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpri3zy0dp.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428c45]\n??:? void tmpri3zy0dp.__unittest_L24_C1() [0x427c83]\n??:? void tmpri3zy0dp.__modtest() [0x427eb0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d593]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42899e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a441]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a4d0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a3cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428975]\n??:? runModuleUnitTests [0x42d369]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429108]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tint i = 0;\n\tforeach(string pattern; patterns)\n\t{\n\t\tif(pattern == \"*\")\n\t\t{\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(colors[i] != pattern)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\ti++;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124042,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpki_7o4o1.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x428c75]\n??:? void tmpki_7o4o1.__unittest_L25_C1() [0x427caf]\n??:? void tmpki_7o4o1.__modtest() [0x427edc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d5c3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4289ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a471]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a500]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a3fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x4289a5]\n??:? runModuleUnitTests [0x42d399]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429138]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tint i = 0;\n\tforeach(string color; colors)\n\t{\n\t\tif(color != patterns[i])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\ti = (i+1) % patterns.length;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124042,
      "stdout": "",
      "stderr": "/tmp/tmp8gdkke8e.d(16): Error: cannot implicitly convert expression `cast(ulong)(i + 1) % patterns.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8gdkke8e.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tif(colors.length != patterns.length) return false;\n\tfor(int i = 0; i < colors.length; i++)\n\t{\n\t\tif(colors[i] == patterns[i]) continue;\n\t\telse return false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124042,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp7jhsyq0t.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428c45]\n??:? void tmp7jhsyq0t.__unittest_L17_C1() [0x427c83]\n??:? void tmp7jhsyq0t.__modtest() [0x427eb0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d593]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42899e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a441]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a4d0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a3cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428975]\n??:? runModuleUnitTests [0x42d369]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429108]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tif (colors.length != patterns.length) \n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (int i = 0; i < colors.length; i++) \n\t{\n\t\tif (colors[i] != patterns[i]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124042,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp1190180f.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428c45]\n??:? void tmp1190180f.__unittest_L24_C1() [0x427c83]\n??:? void tmp1190180f.__modtest() [0x427eb0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d593]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42899e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a441]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a4d0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a3cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428975]\n??:? runModuleUnitTests [0x42d369]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429108]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tint i = 0;\n\tforeach(string color; colors)\n\t{\n\t\tif(color != patterns[i])\n\t\t\treturn false;\n\t\ti++;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124042,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp7xt8h90y.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x428c35]\n??:? void tmp7xt8h90y.__unittest_L18_C1() [0x427c6f]\n??:? void tmp7xt8h90y.__modtest() [0x427e9c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d583]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42898e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a431]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a4c0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a3bd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428965]\n??:? runModuleUnitTests [0x42d359]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4290f8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tif (colors.length != patterns.length)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < colors.length; i++)\n\t{\n\t\tif (colors[i] != patterns[i])\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517192,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpfl51wbgg.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x428c45]\n??:? void tmpfl51wbgg.__unittest_L19_C1() [0x427c83]\n??:? void tmpfl51wbgg.__modtest() [0x427eb0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d593]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42899e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a441]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a4d0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a3cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428975]\n??:? runModuleUnitTests [0x42d369]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429108]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tif (colors.length != patterns.length) return false;\n\tfor (int i = 0; i < colors.length; i++)\n\t{\n\t\tif (colors[i] != patterns[i]) return false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124042,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp2lrdht1x.d(20): unittest failure\n----------------\n??:? _d_unittestp [0x428c45]\n??:? void tmp2lrdht1x.__unittest_L16_C1() [0x427c83]\n??:? void tmp2lrdht1x.__modtest() [0x427eb0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d593]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42899e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a441]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a4d0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a3cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428975]\n??:? runModuleUnitTests [0x42d369]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429108]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tif(colors.length != patterns.length)\n\t\treturn false;\n\t\n\tfor(int i = 0; i < colors.length; i++)\n\t{\n\t\tif(colors[i] == patterns[i])\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124041,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpehibm2hl.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x428c45]\n??:? void tmpehibm2hl.__unittest_L20_C1() [0x427d4b]\n??:? void tmpehibm2hl.__modtest() [0x427eb0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d593]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42899e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a441]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a4d0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a3cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428975]\n??:? runModuleUnitTests [0x42d369]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429108]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tint i = 0;\n\tint j = 0;\n\tbool is_same = true;\n\t\n\twhile(i < colors.length && j < patterns.length)\n\t{\n\t\tif(colors[i] == patterns[j])\n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\ti++;\n\t\t}\n\t}\n\t\n\tif(j == patterns.length)\n\t{\n\t\tis_same = true;\n\t}\n\telse\n\t{\n\t\tis_same = false;\n\t}\n\t\n\treturn is_same;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124042,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpghbd1ohw.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x428c5d]\n??:? void tmpghbd1ohw.__unittest_L37_C1() [0x427c97]\n??:? void tmpghbd1ohw.__modtest() [0x427ec4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d5ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4289b6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a459]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a4e8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a3e5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42898d]\n??:? runModuleUnitTests [0x42d381]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429120]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tif (colors.length != patterns.length)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < colors.length; i++)\n\t{\n\t\tif (colors[i] == patterns[i])\n\t\t\tcontinue;\n\t\telse\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124042,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpmqwt64b2.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x428c45]\n??:? void tmpmqwt64b2.__unittest_L21_C1() [0x427c83]\n??:? void tmpmqwt64b2.__modtest() [0x427eb0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d593]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42899e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a441]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a4d0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a3cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428975]\n??:? runModuleUnitTests [0x42d369]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429108]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tif (colors.length != patterns.length) return false;\n\tfor (int i = 0; i < colors.length; i++) \n\t{\n\t\tif (colors[i] != patterns[i]) return false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124042,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpxl7iuov3.d(20): unittest failure\n----------------\n??:? _d_unittestp [0x428c45]\n??:? void tmpxl7iuov3.__unittest_L16_C1() [0x427c83]\n??:? void tmpxl7iuov3.__modtest() [0x427eb0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d593]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42899e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a441]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a4d0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a3cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428975]\n??:? runModuleUnitTests [0x42d369]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429108]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tif(colors.length != patterns.length)\n\t\treturn false;\n\t\n\tfor(int i = 0; i < patterns.length; i++)\n\t{\n\t\tif(patterns[i] == \"even\")\n\t\t{\n\t\t\tif(colors[i].length % 2 != 0)\n\t\t\t\treturn false;\n\t\t}\n\t\telse if(patterns[i] == \"odd\")\n\t\t{\n\t\t\tif(colors[i].length % 2 == 0)\n\t\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124042,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp2xfidtwc.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x428ce5]\n??:? void tmp2xfidtwc.__unittest_L27_C1() [0x427deb]\n??:? void tmp2xfidtwc.__modtest() [0x427f50]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d633]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428a3e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a4e1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a570]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a46d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428a15]\n??:? runModuleUnitTests [0x42d409]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4291a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tif (colors.length != patterns.length) return false;\n\t\n\tfor (int i = 0; i < colors.length; i++)\n\t{\n\t\tif (colors[i] == patterns[i]) continue;\n\t\telse if (colors[i] == \"R\" && patterns[i] == \"G\") return false;\n\t\telse if (colors[i] == \"G\" && patterns[i] == \"R\") return false;\n\t\telse if (colors[i] == \"B\" && patterns[i] == \"G\") return false;\n\t\telse if (colors[i] == \"G\" && patterns[i] == \"B\") return false;\n\t\telse if (colors[i] == \"R\" && patterns[i] == \"B\") return false;\n\t\telse if (colors[i] == \"B\" && patterns[i] == \"R\") return false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124042,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpy_7a5fuq.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x4290bd]\n??:? void tmpy_7a5fuq.__unittest_L23_C1() [0x4281bf]\n??:? void tmpy_7a5fuq.__modtest() [0x428324]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42da0b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428e16]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a8b9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a948]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a845]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428ded]\n??:? runModuleUnitTests [0x42d7e1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429580]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint l = 0;\n\tint m = 0;\n\tint n = 0;\n\tint o = 0;\n\tint p = 0;\n\tint q = 0;\n\tint r = 0;\n\tint s = 0;\n\tint t = 0;\n\tint u = 0;\n\tint v = 0;\n\tint w = 0;\n\tint x = 0;\n\tint y = 0;\n\tint z = 0;\n\tint aa = 0;\n\tint ab = 0;\n\tint ac = 0;\n\tint ad = 0;\n\tint ae = 0;\n\tint af = 0;\n\tint ag = 0;\n\tint ah = 0;\n\tint ai = 0;\n\tint aj = 0;\n\tint ak = 0;\n\tint al = 0;\n\tint am = 0;\n\tint an = 0;\n\tint ao = 0;\n\tint ap = 0;\n\tint aq = 0;\n\tint ar = 0;\n\tint as = 0;\n\tint at = 0;\n\tint au = 0;\n\tint av = 0;\n\tint aw = 0;\n\tint ax = 0;\n\tint ay = 0;\n\tint az = 0;\n\tint ba = 0;\n\tint bb = 0;\n\tint bc = 0;\n\tint bd = 0;\n\tint be = 0;\n\tint bf = 0;\n\tint bg = 0;\n\tint bh = 0;\n\tint bi = 0;\n\tint bj = 0;\n\tint bk = 0;\n\tint bl = 0;\n\tint bm = 0;\n\tint bn = 0;\n\tint bo = 0;\n\tint bp = 0;\n\tint bq = 0;\n\tint br = 0;\n\tint bs = 0;\n\tint bt = 0;\n\tint bu = 0;\n\tint bv = 0;\n\tint bw = 0;\n\tint bx = 0;\n\tint by = 0;\n\tint bz\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124041,
      "stdout": "",
      "stderr": "/tmp/tmpxadutf21.d(79): Error: semicolon expected, not `unittest`\n/tmp/tmpxadutf21.d(79): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxadutf21.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tif (colors.length != patterns.length) return false;\n\t\n\tfor (int i = 0; i < colors.length; i++) \n\t{\n\t\tif (colors[i] != patterns[i]) return false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124042,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjp8ijox_.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x428c45]\n??:? void tmpjp8ijox_.__unittest_L18_C1() [0x427c83]\n??:? void tmpjp8ijox_.__modtest() [0x427eb0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d593]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42899e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a441]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a4d0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a3cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428975]\n??:? runModuleUnitTests [0x42d369]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429108]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tif (colors.length != patterns.length) return false;\n\t\n\tfor (int i = 0; i < colors.length; i++)\n\t{\n\t\tif (colors[i] == \"red\")\n\t\t{\n\t\t\tif (patterns[i] != \"circle\") return false;\n\t\t}\n\t\telse if (colors[i] == \"blue\")\n\t\t{\n\t\t\tif (patterns[i] != \"triangle\") return false;\n\t\t}\n\t\telse if (colors[i] == \"green\")\n\t\t{\n\t\t\tif (patterns[i] != \"square\") return false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124042,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp1fs16ok5.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x428dd5]\n??:? void tmp1fs16ok5.__unittest_L32_C1() [0x427e13]\n??:? void tmp1fs16ok5.__modtest() [0x428040]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d723]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428b2e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a5d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a660]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a55d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428b05]\n??:? runModuleUnitTests [0x42d4f9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429298]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tif(colors.length != patterns.length)\n\t\treturn false;\n\t\n\tfor(int i = 0; i < colors.length; i++)\n\t{\n\t\tif(colors[i] != patterns[i])\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124042,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpfo1_3t16.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x428c45]\n??:? void tmpfo1_3t16.__unittest_L20_C1() [0x427c83]\n??:? void tmpfo1_3t16.__modtest() [0x427eb0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d593]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42899e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a441]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a4d0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a3cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428975]\n??:? runModuleUnitTests [0x42d369]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429108]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tif (colors.length != patterns.length) return false;\n\t\n\tfor (int i = 0; i < colors.length; i++)\n\t{\n\t\tif (colors[i] == \"red\")\n\t\t{\n\t\t\tif (patterns[i] != \"circle\") return false;\n\t\t}\n\t\telse if (colors[i] == \"blue\")\n\t\t{\n\t\t\tif (patterns[i] != \"triangle\") return false;\n\t\t}\n\t\telse if (colors[i] == \"green\")\n\t\t{\n\t\t\tif (patterns[i] != \"square\") return false;\n\t\t}\n\t\telse return false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124042,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpwhc08k2g.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x428dd5]\n??:? void tmpwhc08k2g.__unittest_L29_C1() [0x427e13]\n??:? void tmpwhc08k2g.__modtest() [0x428040]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d723]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428b2e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a5d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a660]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a55d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428b05]\n??:? runModuleUnitTests [0x42d4f9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429298]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\t\n\twhile(i < colors.length && j < patterns.length)\n\t{\n\t\tif(colors[i] == patterns[j])\n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tj = 0;\n\t\t\ti++;\n\t\t}\n\t}\n\t\n\tif(j == patterns.length)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124042,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpvojvlwjq.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x428c5d]\n??:? void tmpvojvlwjq.__unittest_L36_C1() [0x427c97]\n??:? void tmpvojvlwjq.__modtest() [0x427ec4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d5ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4289b6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a459]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a4e8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a3e5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42898d]\n??:? runModuleUnitTests [0x42d381]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429120]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tif (colors.length != patterns.length)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < colors.length; i++)\n\t{\n\t\tif (colors[i] != patterns[i])\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517192,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3ksxl9ug.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x428c45]\n??:? void tmp3ksxl9ug.__unittest_L20_C1() [0x427c83]\n??:? void tmp3ksxl9ug.__modtest() [0x427eb0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d593]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42899e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a441]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a4d0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a3cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428975]\n??:? runModuleUnitTests [0x42d369]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429108]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tif(colors.length != patterns.length) return false;\n\t\n\tfor(int i = 0; i < patterns.length; i++)\n\t{\n\t\tif(patterns[i] == \"even\")\n\t\t{\n\t\t\tif(colors[i].length % 2 != 0) return false;\n\t\t}\n\t\telse if(patterns[i] == \"odd\")\n\t\t{\n\t\t\tif(colors[i].length % 2 == 0) return false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124042,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpfdlmoiqq.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x428ce5]\n??:? void tmpfdlmoiqq.__unittest_L24_C1() [0x427deb]\n??:? void tmpfdlmoiqq.__modtest() [0x427f50]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d633]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428a3e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a4e1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a570]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a46d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428a15]\n??:? runModuleUnitTests [0x42d409]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4291a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tint i = 0;\n\tforeach(string pattern; patterns)\n\t{\n\t\tif(pattern == \"even\")\n\t\t{\n\t\t\tif(colors[i] != colors[i+1])\n\t\t\t\treturn false;\n\t\t\ti += 2;\n\t\t}\n\t\telse if(pattern == \"odd\")\n\t\t{\n\t\t\tif(colors[i] == colors[i+1])\n\t\t\t\treturn false;\n\t\t\ti += 2;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517192,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp1oled3ai.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x428d85]\n??:? void tmp1oled3ai.__unittest_L27_C1() [0x427e8b]\n??:? void tmp1oled3ai.__modtest() [0x427ff0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d6d3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428ade]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a581]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a610]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a50d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428ab5]\n??:? runModuleUnitTests [0x42d4a9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429248]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tint i = 0;\n\tforeach(string color; colors)\n\t{\n\t\tif(color != patterns[i])\n\t\t\treturn false;\n\t\ti = (i + 1) % patterns.length;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124041,
      "stdout": "",
      "stderr": "/tmp/tmplr1awgo9.d(14): Error: cannot implicitly convert expression `cast(ulong)(i + 1) % patterns.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplr1awgo9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tif(colors.length != patterns.length) return false;\n\t\n\tfor(int i = 0; i < colors.length; i++)\n\t{\n\t\tif(colors[i] == patterns[i]) continue;\n\t\telse return false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124042,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpvldb38sh.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x428c45]\n??:? void tmpvldb38sh.__unittest_L19_C1() [0x427c83]\n??:? void tmpvldb38sh.__modtest() [0x427eb0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d593]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42899e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a441]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a4d0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a3cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428975]\n??:? runModuleUnitTests [0x42d369]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429108]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tif(colors.length != patterns.length)\n\t\treturn false;\n\t\n\tfor(int i = 0; i < colors.length; i++)\n\t{\n\t\tif(colors[i] == \"red\")\n\t\t{\n\t\t\tif(patterns[i] != \"circle\")\n\t\t\t\treturn false;\n\t\t}\n\t\telse if(colors[i] == \"blue\")\n\t\t{\n\t\t\tif(patterns[i] != \"square\")\n\t\t\t\treturn false;\n\t\t}\n\t\telse if(colors[i] == \"green\")\n\t\t{\n\t\t\tif(patterns[i] != \"triangle\")\n\t\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124042,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpg2b1xc23.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x428dd5]\n??:? void tmpg2b1xc23.__unittest_L34_C1() [0x427e13]\n??:? void tmpg2b1xc23.__modtest() [0x428040]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d723]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428b2e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a5d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a660]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a55d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428b05]\n??:? runModuleUnitTests [0x42d4f9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429298]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tif (colors.length != patterns.length)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < colors.length; i++)\n\t{\n\t\tif (colors[i] != patterns[i])\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517192,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpfl51wbgg.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x428c45]\n??:? void tmpfl51wbgg.__unittest_L19_C1() [0x427c83]\n??:? void tmpfl51wbgg.__modtest() [0x427eb0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d593]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42899e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a441]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a4d0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a3cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428975]\n??:? runModuleUnitTests [0x42d369]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429108]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tif (colors.length != patterns.length)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < colors.length; i++)\n\t{\n\t\tif (colors[i] != patterns[i])\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517192,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3ksxl9ug.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x428c45]\n??:? void tmp3ksxl9ug.__unittest_L20_C1() [0x427c83]\n??:? void tmp3ksxl9ug.__modtest() [0x427eb0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d593]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42899e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a441]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a4d0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a3cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428975]\n??:? runModuleUnitTests [0x42d369]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429108]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tint i = 0;\n\tforeach(string pattern; patterns)\n\t{\n\t\tif(pattern == \"even\")\n\t\t{\n\t\t\tif(colors[i] != colors[i+1])\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\ti += 2;\n\t\t}\n\t\telse if(pattern == \"odd\")\n\t\t{\n\t\t\tif(colors[i] == colors[i+1])\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\ti += 2;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124042,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpz6o4kp9_.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x428d85]\n??:? void tmpz6o4kp9_.__unittest_L31_C1() [0x427e8b]\n??:? void tmpz6o4kp9_.__modtest() [0x427ff0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d6d3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428ade]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a581]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a610]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a50d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428ab5]\n??:? runModuleUnitTests [0x42d4a9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429248]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tif (colors.length != patterns.length)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < colors.length; i++)\n\t{\n\t\tif (colors[i] != patterns[i])\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517192,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3ksxl9ug.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x428c45]\n??:? void tmp3ksxl9ug.__unittest_L20_C1() [0x427c83]\n??:? void tmp3ksxl9ug.__modtest() [0x427eb0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d593]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42899e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a441]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a4d0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a3cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428975]\n??:? runModuleUnitTests [0x42d369]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429108]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint l = 0;\n\tint m = 0;\n\tint n = 0;\n\tint o = 0;\n\tint p = 0;\n\tint q = 0;\n\tint r = 0;\n\tint s = 0;\n\tint t = 0;\n\tint u = 0;\n\tint v = 0;\n\tint w = 0;\n\tint x = 0;\n\tint y = 0;\n\tint z = 0;\n\tint a = 0;\n\tint b = 0;\n\tint c = 0;\n\tint d = 0;\n\tint e = 0;\n\tint f = 0;\n\tint g = 0;\n\tint h = 0;\n\tint ii = 0;\n\tint jj = 0;\n\tint kk = 0;\n\tint ll = 0;\n\tint mm = 0;\n\tint nn = 0;\n\tint oo = 0;\n\tint pp = 0;\n\tint qq = 0;\n\tint rr = 0;\n\tint ss = 0;\n\tint tt = 0;\n\tint uu = 0;\n\tint vv = 0;\n\tint ww = 0;\n\tint xx = 0;\n\tint yy = 0;\n\tint zz = 0;\n\tint aa = 0;\n\tint bb = 0;\n\tint cc = 0;\n\tint dd = 0;\n\tint ee = 0;\n\tint ff = 0;\n\tint gg = 0;\n\tint hh = 0;\n\tint iii = 0;\n\tint jjj = 0;\n\tint kkk = 0;\n\tint lll = 0;\n\tint mmm = 0;\n\tint nnn = 0;\n\tint ooo = 0;\n\tint ppp = 0;\n\tint qqq = 0;\n\tint rrr = 0;\n\tint sss = 0;\n\tint ttt = 0;\n\tint uuu = 0;\n\tint vvv = 0;\n\tint www = 0;\n\tint xxx = 0;\n\tint\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124042,
      "stdout": "",
      "stderr": "/tmp/tmp2fb7ooan.d(78): Error: no identifier for declarator `int`\n/tmp/tmp2fb7ooan.d(78): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2fb7ooan.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tif (colors.length != patterns.length)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < colors.length; i++)\n\t{\n\t\tif (colors[i] == patterns[i])\n\t\t\tcontinue;\n\t\telse\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124042,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpmqwt64b2.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x428c45]\n??:? void tmpmqwt64b2.__unittest_L21_C1() [0x427c83]\n??:? void tmpmqwt64b2.__modtest() [0x427eb0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d593]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42899e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a441]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a4d0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a3cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428975]\n??:? runModuleUnitTests [0x42d369]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429108]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tif (colors.length != patterns.length) return false;\n\t\n\tfor (int i = 0; i < colors.length; i++)\n\t{\n\t\tif (colors[i] != patterns[i]) return false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124042,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpk3zam_q1.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x428c45]\n??:? void tmpk3zam_q1.__unittest_L18_C1() [0x427c83]\n??:? void tmpk3zam_q1.__modtest() [0x427eb0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d593]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42899e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a441]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a4d0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a3cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428975]\n??:? runModuleUnitTests [0x42d369]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429108]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tif(colors.length != patterns.length)\n\t\treturn false;\n\t\n\tfor(int i = 0; i < colors.length; i++)\n\t{\n\t\tif(colors[i] != patterns[i])\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517192,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpd8rjiz7m.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x428c45]\n??:? void tmpd8rjiz7m.__unittest_L19_C1() [0x427c83]\n??:? void tmpd8rjiz7m.__modtest() [0x427eb0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d593]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42899e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a441]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a4d0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a3cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428975]\n??:? runModuleUnitTests [0x42d369]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429108]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tif (colors.length != patterns.length)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < colors.length; i++)\n\t{\n\t\tif (colors[i] == \"red\")\n\t\t{\n\t\t\tif (patterns[i] != \"circle\")\n\t\t\t\treturn false;\n\t\t}\n\t\telse if (colors[i] == \"blue\")\n\t\t{\n\t\t\tif (patterns[i] != \"triangle\")\n\t\t\t\treturn false;\n\t\t}\n\t\telse if (colors[i] == \"green\")\n\t\t{\n\t\t\tif (patterns[i] != \"square\")\n\t\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124042,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpl3nxkgq2.d(39): unittest failure\n----------------\n??:? _d_unittestp [0x428dd5]\n??:? void tmpl3nxkgq2.__unittest_L35_C1() [0x427e13]\n??:? void tmpl3nxkgq2.__modtest() [0x428040]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d723]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428b2e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a5d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a660]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a55d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428b05]\n??:? runModuleUnitTests [0x42d4f9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429298]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tint i = 0;\n\tint j = 0;\n\twhile(i < colors.length && j < patterns.length)\n\t{\n\t\tif(colors[i] == patterns[j])\n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\ti++;\n\t\t}\n\t}\n\tif(j == patterns.length)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517192,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpigtavt72.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x428c55]\n??:? void tmpigtavt72.__unittest_L32_C1() [0x427c8f]\n??:? void tmpigtavt72.__modtest() [0x427ebc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d5a3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4289ae]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a451]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a4e0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a3dd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428985]\n??:? runModuleUnitTests [0x42d379]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429118]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint l = 0;\n\tint m = 0;\n\tint n = 0;\n\tint o = 0;\n\tint p = 0;\n\tint q = 0;\n\tint r = 0;\n\tint s = 0;\n\tint t = 0;\n\tint u = 0;\n\tint v = 0;\n\tint w = 0;\n\tint x = 0;\n\tint y = 0;\n\tint z = 0;\n\tint aa = 0;\n\tint ab = 0;\n\tint ac = 0;\n\tint ad = 0;\n\tint ae = 0;\n\tint af = 0;\n\tint ag = 0;\n\tint ah = 0;\n\tint ai = 0;\n\tint aj = 0;\n\tint ak = 0;\n\tint al = 0;\n\tint am = 0;\n\tint an = 0;\n\tint ao = 0;\n\tint ap = 0;\n\tint aq = 0;\n\tint ar = 0;\n\tint as = 0;\n\tint at = 0;\n\tint au = 0;\n\tint av = 0;\n\tint aw = 0;\n\tint ax = 0;\n\tint ay = 0;\n\tint az = 0;\n\tint ba = 0;\n\tint bb = 0;\n\tint bc = 0;\n\tint bd = 0;\n\tint be = 0;\n\tint bf = 0;\n\tint bg = 0;\n\tint bh = 0;\n\tint bi = 0;\n\tint bj = 0;\n\tint bk = 0;\n\tint bl = 0;\n\tint bm = 0;\n\tint bn = 0;\n\tint bo = 0;\n\tint bp = 0;\n\tint bq = 0;\n\tint br = 0;\n\tint bs = 0;\n\tint bt = 0;\n\tint bu = 0;\n\tint bv = 0;\n\tint bw = 0;\n\tint bx = 0;\n\tint by = 0;\n\tint bz\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124041,
      "stdout": "",
      "stderr": "/tmp/tmpxadutf21.d(79): Error: semicolon expected, not `unittest`\n/tmp/tmpxadutf21.d(79): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxadutf21.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tif(colors.length != patterns.length)\n\t\treturn false;\n\t\n\tfor(int i = 0; i < colors.length; i++)\n\t{\n\t\tif(colors[i] != patterns[i])\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124042,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpfo1_3t16.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x428c45]\n??:? void tmpfo1_3t16.__unittest_L20_C1() [0x427c83]\n??:? void tmpfo1_3t16.__modtest() [0x427eb0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d593]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42899e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a441]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a4d0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a3cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428975]\n??:? runModuleUnitTests [0x42d369]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429108]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tif(colors.length != patterns.length)\n\t\treturn false;\n\t\n\tfor(int i = 0; i < colors.length; i++)\n\t{\n\t\tif(colors[i] != patterns[i])\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517192,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpd8rjiz7m.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x428c45]\n??:? void tmpd8rjiz7m.__unittest_L19_C1() [0x427c83]\n??:? void tmpd8rjiz7m.__modtest() [0x427eb0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d593]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42899e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a441]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a4d0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a3cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428975]\n??:? runModuleUnitTests [0x42d369]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429108]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tif (colors.length != patterns.length)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < colors.length; i++)\n\t{\n\t\tif (colors[i] == patterns[i])\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124042,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpu_ag_xg9.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x428c45]\n??:? void tmpu_ag_xg9.__unittest_L19_C1() [0x427d4b]\n??:? void tmpu_ag_xg9.__modtest() [0x427eb0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d593]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42899e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a441]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a4d0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a3cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428975]\n??:? runModuleUnitTests [0x42d369]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429108]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tif (colors.length != patterns.length)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < colors.length; i++)\n\t{\n\t\tif (colors[i] != patterns[i])\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517192,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3ksxl9ug.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x428c45]\n??:? void tmp3ksxl9ug.__unittest_L20_C1() [0x427c83]\n??:? void tmp3ksxl9ug.__modtest() [0x427eb0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d593]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42899e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a441]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a4d0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a3cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428975]\n??:? runModuleUnitTests [0x42d369]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429108]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tint i = 0;\n\tforeach(string pattern; patterns)\n\t{\n\t\tif(pattern == \"even\")\n\t\t{\n\t\t\tif(colors[i] == colors[i+1])\n\t\t\t{\n\t\t\t\ti += 2;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\telse if(pattern == \"odd\")\n\t\t{\n\t\t\tif(colors[i] != colors[i+1])\n\t\t\t{\n\t\t\t\ti += 2;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124042,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp2dq755sz.d(42): unittest failure\n----------------\n??:? _d_unittestp [0x428d8d]\n??:? void tmp2dq755sz.__unittest_L37_C1() [0x427e8f]\n??:? void tmp2dq755sz.__modtest() [0x427ff4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d6db]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428ae6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a589]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a618]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a515]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428abd]\n??:? runModuleUnitTests [0x42d4b1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429250]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tif(colors.length != patterns.length) return false;\n\t\n\tfor(int i = 0; i < colors.length; i++)\n\t{\n\t\tif(colors[i] != patterns[i]) return false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124042,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp56qaqoku.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x428c45]\n??:? void tmp56qaqoku.__unittest_L18_C1() [0x427c83]\n??:? void tmp56qaqoku.__modtest() [0x427eb0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d593]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42899e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a441]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a4d0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a3cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428975]\n??:? runModuleUnitTests [0x42d369]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429108]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tbool is_same = false;\n\t\n\twhile(i < colors.length)\n\t{\n\t\tif(colors[i] == patterns[j])\n\t\t{\n\t\t\tis_same = true;\n\t\t\tj++;\n\t\t\tk++;\n\t\t\tif(j == patterns.length)\n\t\t\t{\n\t\t\t\tj = 0;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tis_same = false;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\t\n\tif(k == colors.length)\n\t{\n\t\treturn is_same;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124042,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpz0drgcb1.d(47): unittest failure\n----------------\n??:? _d_unittestp [0x428c6d]\n??:? void tmpz0drgcb1.__unittest_L43_C1() [0x427cab]\n??:? void tmpz0drgcb1.__modtest() [0x427ed8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d5bb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4289c6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a469]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a4f8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a3f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42899d]\n??:? runModuleUnitTests [0x42d391]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429130]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tif (colors.length != patterns.length)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < colors.length; i++)\n\t{\n\t\tif (colors[i] != patterns[i])\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517192,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3ksxl9ug.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x428c45]\n??:? void tmp3ksxl9ug.__unittest_L20_C1() [0x427c83]\n??:? void tmp3ksxl9ug.__modtest() [0x427eb0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d593]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42899e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a441]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a4d0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a3cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428975]\n??:? runModuleUnitTests [0x42d369]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429108]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint l = 0;\n\tint m = 0;\n\tint n = 0;\n\tint o = 0;\n\tint p = 0;\n\tint q = 0;\n\tint r = 0;\n\tint s = 0;\n\tint t = 0;\n\tint u = 0;\n\tint v = 0;\n\tint w = 0;\n\tint x = 0;\n\tint y = 0;\n\tint z = 0;\n\tint aa = 0;\n\tint bb = 0;\n\tint cc = 0;\n\tint dd = 0;\n\tint ee = 0;\n\tint ff = 0;\n\tint gg = 0;\n\tint hh = 0;\n\tint ii = 0;\n\tint jj = 0;\n\tint kk = 0;\n\tint ll = 0;\n\tint mm = 0;\n\tint nn = 0;\n\tint oo = 0;\n\tint pp = 0;\n\tint qq = 0;\n\tint rr = 0;\n\tint ss = 0;\n\tint tt = 0;\n\tint uu = 0;\n\tint vv = 0;\n\tint ww = 0;\n\tint xx = 0;\n\tint yy = 0;\n\tint zz = 0;\n\tint aaa = 0;\n\tint bbb = 0;\n\tint ccc = 0;\n\tint ddd = 0;\n\tint eee = 0;\n\tint fff = 0;\n\tint ggg = 0;\n\tint hhh = 0;\n\tint iii = 0;\n\tint jjj = 0;\n\tint kkk = 0;\n\tint lll = 0;\n\tint mmm = 0;\n\tint nnn = 0;\n\tint ooo = 0;\n\tint ppp = 0;\n\tint qqq = 0;\n\tint rrr = 0;\n\tint sss = 0;\n\tint ttt = 0;\n\tint uuu = 0;\n\tint vvv = 0;\n\tint www = 0;\n\tint\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517191,
      "stdout": "",
      "stderr": "/tmp/tmpgwtpcwae.d(77): Error: no identifier for declarator `int`\n/tmp/tmpgwtpcwae.d(77): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgwtpcwae.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint l = 0;\n\tint m = 0;\n\tint n = 0;\n\tint o = 0;\n\tint p = 0;\n\tint q = 0;\n\tint r = 0;\n\tint s = 0;\n\tint t = 0;\n\tint u = 0;\n\tint v = 0;\n\tint w = 0;\n\tint x = 0;\n\tint y = 0;\n\tint z = 0;\n\tint aa = 0;\n\tint ab = 0;\n\tint ac = 0;\n\tint ad = 0;\n\tint ae = 0;\n\tint af = 0;\n\tint ag = 0;\n\tint ah = 0;\n\tint ai = 0;\n\tint aj = 0;\n\tint ak = 0;\n\tint al = 0;\n\tint am = 0;\n\tint an = 0;\n\tint ao = 0;\n\tint ap = 0;\n\tint aq = 0;\n\tint ar = 0;\n\tint as = 0;\n\tint at = 0;\n\tint au = 0;\n\tint av = 0;\n\tint aw = 0;\n\tint ax = 0;\n\tint ay = 0;\n\tint az = 0;\n\tint ba = 0;\n\tint bb = 0;\n\tint bc = 0;\n\tint bd = 0;\n\tint be = 0;\n\tint bf = 0;\n\tint bg = 0;\n\tint bh = 0;\n\tint bi = 0;\n\tint bj = 0;\n\tint bk = 0;\n\tint bl = 0;\n\tint bm = 0;\n\tint bn = 0;\n\tint bo = 0;\n\tint bp = 0;\n\tint bq = 0;\n\tint br = 0;\n\tint bs = 0;\n\tint bt = 0;\n\tint bu = 0;\n\tint bv = 0;\n\tint bw = 0;\n\tint bx = 0;\n\tint by = 0;\n\tint bz\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124041,
      "stdout": "",
      "stderr": "/tmp/tmpxadutf21.d(79): Error: semicolon expected, not `unittest`\n/tmp/tmpxadutf21.d(79): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxadutf21.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tif (colors.length != patterns.length)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < colors.length; i++)\n\t{\n\t\tif (colors[i] != patterns[i])\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517192,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3ksxl9ug.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x428c45]\n??:? void tmp3ksxl9ug.__unittest_L20_C1() [0x427c83]\n??:? void tmp3ksxl9ug.__modtest() [0x427eb0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d593]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42899e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a441]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a4d0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a3cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428975]\n??:? runModuleUnitTests [0x42d369]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429108]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tif(colors.length != patterns.length)\n\t\treturn false;\n\t\n\tfor(int i = 0; i < colors.length; i++)\n\t{\n\t\tif(colors[i] != patterns[i])\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517192,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpd8rjiz7m.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x428c45]\n??:? void tmpd8rjiz7m.__unittest_L19_C1() [0x427c83]\n??:? void tmpd8rjiz7m.__modtest() [0x427eb0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d593]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42899e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a441]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a4d0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a3cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428975]\n??:? runModuleUnitTests [0x42d369]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429108]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tif(colors.length != patterns.length)\n\t\treturn false;\n\t\n\tfor(int i = 0; i < colors.length; i++)\n\t{\n\t\tif(colors[i] != patterns[i])\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124042,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpfo1_3t16.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x428c45]\n??:? void tmpfo1_3t16.__unittest_L20_C1() [0x427c83]\n??:? void tmpfo1_3t16.__modtest() [0x427eb0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d593]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42899e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a441]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a4d0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a3cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428975]\n??:? runModuleUnitTests [0x42d369]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429108]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tint i = 0;\n\tforeach(string color; colors)\n\t{\n\t\tif(color != patterns[i])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\ti++;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517192,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpvc6frgop.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x428c35]\n??:? void tmpvc6frgop.__unittest_L20_C1() [0x427c6f]\n??:? void tmpvc6frgop.__modtest() [0x427e9c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d583]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42898e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a431]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a4c0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a3bd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428965]\n??:? runModuleUnitTests [0x42d359]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4290f8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tint i = 0;\n\tforeach(string pattern; patterns)\n\t{\n\t\tif(pattern == \"*\")\n\t\t{\n\t\t\tcontinue;\n\t\t}\n\t\tif(pattern != colors[i])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\ti++;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp6s61b2q1.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428c6d]\n??:? void tmp6s61b2q1.__unittest_L24_C1() [0x427cab]\n??:? void tmp6s61b2q1.__modtest() [0x427ed8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d5bb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4289c6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a469]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a4f8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a3f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42899d]\n??:? runModuleUnitTests [0x42d391]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429130]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint l = 0;\n\tint m = 0;\n\tint n = 0;\n\tint o = 0;\n\tint p = 0;\n\tint q = 0;\n\tint r = 0;\n\tint s = 0;\n\tint t = 0;\n\tint u = 0;\n\tint v = 0;\n\tint w = 0;\n\tint x = 0;\n\tint y = 0;\n\tint z = 0;\n\tint aa = 0;\n\tint bb = 0;\n\tint cc = 0;\n\tint dd = 0;\n\tint ee = 0;\n\tint ff = 0;\n\tint gg = 0;\n\tint hh = 0;\n\tint ii = 0;\n\tint jj = 0;\n\tint kk = 0;\n\tint ll = 0;\n\tint mm = 0;\n\tint nn = 0;\n\tint oo = 0;\n\tint pp = 0;\n\tint qq = 0;\n\tint rr = 0;\n\tint ss = 0;\n\tint tt = 0;\n\tint uu = 0;\n\tint vv = 0;\n\tint ww = 0;\n\tint xx = 0;\n\tint yy = 0;\n\tint zz = 0;\n\tint aaa = 0;\n\tint bbb = 0;\n\tint ccc = 0;\n\tint ddd = 0;\n\tint eee = 0;\n\tint fff = 0;\n\tint ggg = 0;\n\tint hhh = 0;\n\tint iii = 0;\n\tint jjj = 0;\n\tint kkk = 0;\n\tint lll = 0;\n\tint mmm = 0;\n\tint nnn = 0;\n\tint ooo = 0;\n\tint ppp = 0;\n\tint qqq = 0;\n\tint rrr = 0;\n\tint sss = 0;\n\tint ttt = 0;\n\tint uuu = 0;\n\tint vvv = 0;\n\tint www = 0;\n\tint\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517191,
      "stdout": "",
      "stderr": "/tmp/tmpgwtpcwae.d(77): Error: no identifier for declarator `int`\n/tmp/tmpgwtpcwae.d(77): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgwtpcwae.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tif(colors.length != patterns.length)\n\t\treturn false;\n\t\n\tfor(int i = 0; i < colors.length; i++)\n\t{\n\t\tif(colors[i] != patterns[i])\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517192,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpd8rjiz7m.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x428c45]\n??:? void tmpd8rjiz7m.__unittest_L19_C1() [0x427c83]\n??:? void tmpd8rjiz7m.__modtest() [0x427eb0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d593]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42899e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a441]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a4d0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a3cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428975]\n??:? runModuleUnitTests [0x42d369]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429108]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tint i = 0;\n\tforeach(string color; colors)\n\t{\n\t\tif(color != patterns[i])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\ti = (i + 1) % patterns.length;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517191,
      "stdout": "",
      "stderr": "/tmp/tmpmjibf3xc.d(16): Error: cannot implicitly convert expression `cast(ulong)(i + 1) % patterns.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmjibf3xc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint l = 0;\n\tint m = 0;\n\tint n = 0;\n\tint o = 0;\n\tint p = 0;\n\tint q = 0;\n\tint r = 0;\n\tint s = 0;\n\tint t = 0;\n\tint u = 0;\n\tint v = 0;\n\tint w = 0;\n\tint x = 0;\n\tint y = 0;\n\tint z = 0;\n\t\n\tint a = 0;\n\tint b = 0;\n\tint c = 0;\n\tint d = 0;\n\tint e = 0;\n\tint f = 0;\n\tint g = 0;\n\tint h = 0;\n\tint ii = 0;\n\tint jj = 0;\n\tint kk = 0;\n\tint ll = 0;\n\tint mm = 0;\n\tint nn = 0;\n\tint oo = 0;\n\tint pp = 0;\n\tint qq = 0;\n\tint rr = 0;\n\tint ss = 0;\n\tint tt = 0;\n\tint uu = 0;\n\tint vv = 0;\n\tint ww = 0;\n\tint xx = 0;\n\tint yy = 0;\n\tint zz = 0;\n\t\n\tint aa = 0;\n\tint bb = 0;\n\tint cc = 0;\n\tint dd = 0;\n\tint ee = 0;\n\tint ff = 0;\n\tint gg = 0;\n\tint hh = 0;\n\tint iii = 0;\n\tint jjj = 0;\n\tint kkk = 0;\n\tint lll = 0;\n\tint mmm = 0;\n\tint nnn = 0;\n\tint ooo = 0;\n\tint ppp = 0;\n\tint qqq = 0;\n\tint rrr = 0;\n\tint sss = 0;\n\tint ttt = 0;\n\tint uuu = 0;\n\tint vvv = 0;\n\tint www = 0;\n\tint xxx = 0\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517191,
      "stdout": "",
      "stderr": "/tmp/tmpcw73uijm.d(79): Error: semicolon expected, not `unittest`\n/tmp/tmpcw73uijm.d(79): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcw73uijm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tif(colors.length != patterns.length)\n\t\treturn false;\n\t\n\tfor(int i = 0; i < colors.length; i++)\n\t{\n\t\tif(colors[i] == \"red\" && patterns[i] != \"circle\")\n\t\t\treturn false;\n\t\tif(colors[i] == \"green\" && patterns[i] != \"square\")\n\t\t\treturn false;\n\t\tif(colors[i] == \"blue\" && patterns[i] != \"triangle\")\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpnvggz0pq.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428de5]\n??:? void tmpnvggz0pq.__unittest_L24_C1() [0x427e23]\n??:? void tmpnvggz0pq.__modtest() [0x428050]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d733]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428b3e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a5e1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a670]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a56d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428b15]\n??:? runModuleUnitTests [0x42d509]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4292a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tif (colors.length != patterns.length)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < colors.length; i++)\n\t{\n\t\tif (colors[i] == patterns[i])\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124042,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpu55nzzx4.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x428c45]\n??:? void tmpu55nzzx4.__unittest_L20_C1() [0x427d4b]\n??:? void tmpu55nzzx4.__modtest() [0x427eb0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d593]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42899e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a441]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a4d0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a3cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428975]\n??:? runModuleUnitTests [0x42d369]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429108]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tint i = 0;\n\tforeach(string pattern; patterns)\n\t{\n\t\tif(pattern == \"even\")\n\t\t{\n\t\t\tif(colors[i] == colors[i+1])\n\t\t\t{\n\t\t\t\ti += 2;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\telse if(pattern == \"odd\")\n\t\t{\n\t\t\tif(colors[i] != colors[i+1])\n\t\t\t{\n\t\t\t\ti += 2;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124042,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp2dq755sz.d(42): unittest failure\n----------------\n??:? _d_unittestp [0x428d8d]\n??:? void tmp2dq755sz.__unittest_L37_C1() [0x427e8f]\n??:? void tmp2dq755sz.__modtest() [0x427ff4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d6db]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428ae6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a589]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a618]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a515]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428abd]\n??:? runModuleUnitTests [0x42d4b1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429250]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tif (colors.length != patterns.length)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < colors.length; i++)\n\t{\n\t\tif (colors[i] != patterns[i])\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517192,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3ksxl9ug.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x428c45]\n??:? void tmp3ksxl9ug.__unittest_L20_C1() [0x427c83]\n??:? void tmp3ksxl9ug.__modtest() [0x427eb0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d593]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42899e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a441]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a4d0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a3cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428975]\n??:? runModuleUnitTests [0x42d369]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429108]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tif(colors.length != patterns.length)\n\t\treturn false;\n\t\n\tfor(int i = 0; i < colors.length; i++)\n\t{\n\t\tif(patterns[i] == \"even\")\n\t\t{\n\t\t\tif(colors[i].length % 2 != 0)\n\t\t\t\treturn false;\n\t\t}\n\t\telse if(patterns[i] == \"odd\")\n\t\t{\n\t\t\tif(colors[i].length % 2 == 0)\n\t\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpzf0nwqgh.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x428ce5]\n??:? void tmpzf0nwqgh.__unittest_L27_C1() [0x427deb]\n??:? void tmpzf0nwqgh.__modtest() [0x427f50]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d633]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428a3e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a4e1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a570]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a46d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428a15]\n??:? runModuleUnitTests [0x42d409]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4291a8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope void delegate",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tbool result = true;\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint l = 0;\n\tint m = 0;\n\tint n = 0;\n\tint o = 0;\n\tint p = 0;\n\tint q = 0;\n\tint r = 0;\n\tint s = 0;\n\tint t = 0;\n\tint u = 0;\n\tint v = 0;\n\tint w = 0;\n\tint x = 0;\n\tint y = 0;\n\tint z = 0;\n\tint aa = 0;\n\tint bb = 0;\n\tint cc = 0;\n\tint dd = 0;\n\tint ee = 0;\n\tint ff = 0;\n\tint gg = 0;\n\tint hh = 0;\n\tint ii = 0;\n\tint jj = 0;\n\tint kk = 0;\n\tint ll = 0;\n\tint mm = 0;\n\tint nn = 0;\n\tint oo = 0;\n\tint pp = 0;\n\tint qq = 0;\n\tint rr = 0;\n\tint ss = 0;\n\tint tt = 0;\n\tint uu = 0;\n\tint vv = 0;\n\tint ww = 0;\n\tint xx = 0;\n\tint yy = 0;\n\tint zz = 0;\n\tint aaa = 0;\n\tint bbb = 0;\n\tint ccc = 0;\n\tint ddd = 0;\n\tint eee = 0;\n\tint fff = 0;\n\tint ggg = 0;\n\tint hhh = 0;\n\tint iii = 0;\n\tint jjj = 0;\n\tint kkk = 0;\n\tint lll = 0;\n\tint mmm = 0;\n\tint nnn = 0;\n\tint ooo = 0;\n\tint ppp = 0;\n\tint qqq = 0;\n\tint rrr = 0;\n\tint sss = 0;\n\tint ttt = 0;\n\tint uuu = 0;\n\tint vvv = 0;\n\tint\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124042,
      "stdout": "",
      "stderr": "/tmp/tmp49ud8zl9.d(77): Error: no identifier for declarator `int`\n/tmp/tmp49ud8zl9.d(77): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp49ud8zl9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tif (colors.length != patterns.length) return false;\n\t\n\tfor (int i = 0; i < colors.length; i++)\n\t{\n\t\tif (colors[i] == patterns[i]) continue;\n\t\telse if (patterns[i] == \"any\") continue;\n\t\telse return false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpam26jamw.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x428c95]\n??:? void tmpam26jamw.__unittest_L20_C1() [0x427cd3]\n??:? void tmpam26jamw.__modtest() [0x427f00]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d5e3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4289ee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a491]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a520]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a41d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x4289c5]\n??:? runModuleUnitTests [0x42d3b9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429158]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tif(colors.length != patterns.length)\n\t\treturn false;\n\t\n\tfor(int i = 0; i < patterns.length; i++)\n\t{\n\t\tif(colors[i] != patterns[i])\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp1gtco7rw.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x428c45]\n??:? void tmp1gtco7rw.__unittest_L20_C1() [0x427c83]\n??:? void tmp1gtco7rw.__modtest() [0x427eb0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d593]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42899e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a441]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a4d0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a3cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428975]\n??:? runModuleUnitTests [0x42d369]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429108]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tif (colors.length != patterns.length)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < colors.length; i++)\n\t{\n\t\tif (colors[i] != patterns[i])\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517192,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3ksxl9ug.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x428c45]\n??:? void tmp3ksxl9ug.__unittest_L20_C1() [0x427c83]\n??:? void tmp3ksxl9ug.__modtest() [0x427eb0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d593]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42899e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a441]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a4d0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a3cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428975]\n??:? runModuleUnitTests [0x42d369]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429108]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tif(colors.length != patterns.length)\n\t\treturn false;\n\t\n\tfor(int i = 0; i < colors.length; i++)\n\t{\n\t\tif(colors[i] != patterns[i])\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124042,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpfo1_3t16.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x428c45]\n??:? void tmpfo1_3t16.__unittest_L20_C1() [0x427c83]\n??:? void tmpfo1_3t16.__modtest() [0x427eb0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d593]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42899e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a441]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a4d0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a3cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428975]\n??:? runModuleUnitTests [0x42d369]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429108]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tif(colors.length != patterns.length)\n\t\treturn false;\n\t\n\tfor(int i = 0; i < colors.length; i++)\n\t{\n\t\tif(colors[i] != patterns[i])\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517192,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpd8rjiz7m.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x428c45]\n??:? void tmpd8rjiz7m.__unittest_L19_C1() [0x427c83]\n??:? void tmpd8rjiz7m.__modtest() [0x427eb0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d593]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42899e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a441]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a4d0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a3cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428975]\n??:? runModuleUnitTests [0x42d369]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429108]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n{\n\tif(colors.length != patterns.length)\n\t\treturn false;\n\t\n\tfor(int i = 0; i < colors.length; i++)\n\t{\n\t\tif(colors[i] != patterns[i])\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}",
      "timestamp": 1666124042,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpfo1_3t16.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x428c45]\n??:? void tmpfo1_3t16.__unittest_L20_C1() [0x427c83]\n??:? void tmpfo1_3t16.__modtest() [0x427eb0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d593]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42899e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42a441]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42a4d0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42a3cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428975]\n??:? runModuleUnitTests [0x42d369]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429108]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}