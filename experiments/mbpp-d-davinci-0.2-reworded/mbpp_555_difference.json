{
  "name": "mbpp_555_difference",
  "language": "d",
  "prompt": "import std.math;\n/*\n\n\tWrite a dthon function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n\t\n*/\nlong difference(long n) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_555_difference.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = difference;\n\n    assert(candidate(3L) == 30L);\n    assert(candidate(5L) == 210L);\n    assert(candidate(2L) == 6L);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tlong sum = 0;\n\tlong sum_of_cubes = 0;\n\tfor (long i = 1; i <= n; i++)\n\t{\n\t\tsum += i;\n\t\tsum_of_cubes += pow(i, 3);\n\t}\n\treturn sum_of_cubes - sum;\n}",
    "{ \n    long sum = 0; \n    for (long i = 1; i <= n; i++) \n        sum += i; \n    return (sum * sum - n * (n + 1) * (2 * n + 1) / 6); \n} ",
    "{\n    long sum = 0;\n    for (int i = 1; i <= n; i++) \n    {\n        sum += i;\n    }\n    return (sum * sum) - (sum * sum * sum) / n;\n}",
    "{\n\tlong sum = 0;\n\tfor (long i = 1; i <= n; i++)\n\t{\n\t\tsum += pow(i, 3);\n\t}\n\treturn sum - (n * (n + 1) / 2);\n}",
    "{ \n    long sum = 0; \n    for (long i = 1; i <= n; i++) \n        sum += i; \n    long sum_of_squares = sum * sum; \n    long sum_of_cubes = 0; \n    for (long i = 1; i <= n; i++) \n        sum_of_cubes += i * i * i; \n    return sum_of_squares - sum_of_cubes; \n} ",
    "{ \n    return (n * (n + 1) / 2) * (n * (n + 1) / 2) - n * (n + 1) * (2 * n + 1) / 6; \n} ",
    "{\n\treturn (pow(n, 2) * (n + 1) * (3 * n + 2)) / 12;\n}",
    "{ \n    return (n * (n + 1) / 2) * (n * (n + 1) / 2) - (n * (n + 1) * (2 * n + 1) / 6); \n} ",
    "{\n\tlong sum = 0;\n\tfor (long i = 1; i <= n; i++)\n\t{\n\t\tsum += pow(i, 3);\n\t}\n\treturn sum - (n * (n + 1) / 2);\n}",
    "{\n\tlong sum1 = 0;\n\tlong sum2 = 0;\n\tfor (long i = 1; i <= n; i++)\n\t{\n\t\tsum1 += pow(i, 3);\n\t\tsum2 += i;\n\t}\n\treturn pow(sum2, 2) - sum1;\n}",
    "{ \n    return (n * (n + 1) / 2) * (n * (n + 1) / 2) - (n * (n + 1) * (2 * n + 1) / 6); \n} ",
    "{\n\tlong sum_of_cubes = 0;\n\tlong sum_of_numbers = 0;\n\t\n\tfor (long i = 1; i <= n; i++)\n\t{\n\t\tsum_of_cubes += pow(i, 3);\n\t\tsum_of_numbers += i;\n\t}\n\t\n\treturn pow(sum_of_numbers, 2) - sum_of_cubes;\n}",
    "{\n\tlong sum = 0;\n\tlong sum_of_cubes = 0;\n\tfor (long i = 1; i <= n; i++)\n\t{\n\t\tsum += i;\n\t\tsum_of_cubes += pow(i, 3);\n\t}\n\treturn pow(sum, 2) - sum_of_cubes;\n}",
    "{ \n    long sum = 0; \n    long sum_of_squares = 0; \n    for (long i = 1; i <= n; i++) \n    { \n        sum = sum + i; \n        sum_of_squares = sum_of_squares + i * i; \n    } \n    return (sum * sum - sum_of_squares); \n} ",
    "{ \n    long sum = 0; \n    long sum_of_squares = 0; \n    for (long i = 1; i <= n; i++) { \n        sum = sum + i; \n        sum_of_squares = sum_of_squares + i * i; \n    } \n    return (sum * sum - sum_of_squares); \n} ",
    "{\n\tlong sum1 = 0;\n\tlong sum2 = 0;\n\tfor(int i = 1; i <= n; i++)\n\t{\n\t\tsum1 += pow(i,3);\n\t\tsum2 += i;\n\t}\n\treturn pow(sum2,2) - sum1;\n}",
    "{\n\tlong sum = 0;\n\tlong sum_of_cubes = 0;\n\tfor (long i = 1; i <= n; i++) \n\t{\n\t\tsum += i;\n\t\tsum_of_cubes += pow(i, 3);\n\t}\n\treturn abs(sum - sum_of_cubes);\n}",
    "{ \n    long sum = 0; \n    long sum_of_squares = 0; \n    for (long i = 1; i <= n; i++) \n    { \n        sum = sum + i; \n        sum_of_squares = sum_of_squares + (i * i * i); \n    } \n    return (sum * sum - sum_of_squares); \n} ",
    "{ \n    long sum = 0; \n    for (long i = 1; i <= n; i++) \n        sum += i; \n    long sum_of_squares = sum * sum; \n    long sum_of_cubes = 0; \n    for (long i = 1; i <= n; i++) \n        sum_of_cubes += i * i * i; \n    return abs(sum_of_squares - sum_of_cubes); \n} \n  \n// Driver code ",
    "{ \n    long sum_of_n = (n * (n + 1)) / 2; \n    long sum_of_n_cubes = (n * (n + 1) / 2) * (2 * n + 1) / 3; \n    return sum_of_n_cubes - sum_of_n; \n} "
  ]
}