{
  "name": "mbpp_619_move_num",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to move all the numbers to the end of the given string.\n\t\n*/\nstring move_num(string test_str) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_619_move_num.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tstring result = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(c; test_str) \n\t{\n\t\tif(c.isDigit) \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str) \n\t{\n\t\tif(!c.isDigit) \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tstring nums = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tnums ~= c;\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result ~ nums;\n}",
    "{\n\tstring[] str_arr = test_str.split(\"\");\n\tstring[] num_arr = [];\n\tstring[] result_arr = [];\n\tforeach(string str; str_arr)\n\t{\n\t\tif(str.length == 1 && str[0] >= '0' && str[0] <= '9')\n\t\t{\n\t\t\tnum_arr ~= str;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult_arr ~= str;\n\t\t}\n\t}\n\treturn result_arr.join(\"\") ~ num_arr.join(\"\");\n}",
    "{\n\tstring num_str;\n\tstring alpha_str;\n\tforeach(c; test_str)\n\t{\n\t\tif(isDigit(c))\n\t\t{\n\t\t\tnum_str ~= c;\n\t\t}\n\t\telse\n\t\t{\n\t\t\talpha_str ~= c;\n\t\t}\n\t}\n\treturn alpha_str ~ num_str;\n}",
    "{\n\tstring result = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\t\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tstring num = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c >= '0' && c <= '9')\n\t\t\tnum ~= c;\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result ~ num;\n}",
    "{\n\tstring result = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(c; test_str) \n\t{\n\t\tif(c.isDigit) \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str) \n\t{\n\t\tif(!c.isDigit) \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(char c; test_str)\n\t{\n\t\tif(isdigit(c))\n\t\t\tresult ~= c;\n\t}\n\tforeach(char c; test_str)\n\t{\n\t\tif(!isdigit(c))\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\n/*\n\tWrite a function to check if the given string is a palindrome.\n*/",
    "{\n\tstring result = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(isDigit(c))\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!isDigit(c))\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tstring nums = \"\";\n\tforeach(c; test_str) \n\t{\n\t\tif(c.isDigit) \n\t\t{\n\t\t\tnums ~= c;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result ~ nums;\n}",
    "{\n\tstring result = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(isdigit(c))\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!isdigit(c))\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(c; test_str) \n\t{\n\t\tif(c.isDigit) \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\tforeach(c; test_str) \n\t{\n\t\tif(!c.isDigit) \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tstring num = \"\";\n\tforeach(c; test_str)\n\t{\n\t\tif(c >= '0' && c <= '9')\n\t\t\tnum ~= c;\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result ~ num;\n}",
    "{\n\tstring result;\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\tforeach(c; test_str)\n\t{\n\t\tif(!c.isDigit)\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}"
  ]
}