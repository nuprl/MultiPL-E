{
  "name": "mbpp_12_sort_matrix",
  "language": "d",
  "prompt": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_12_sort_matrix.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][];\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tresult[i] = new long[M[i].length];\n\t\tfor (int j = 0; j < M[i].length; j++)\n\t\t{\n\t\t\tresult[i][j] = M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M.length - 1; j++)\n\t\t{\n\t\t\tif (sum(M[j]) > sum(M[j + 1]))\n\t\t\t{\n\t\t\t\tlong[] temp = M[j];\n\t\t\t\tM[j] = M[j + 1];\n\t\t\t\tM[j + 1] = temp;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1665517550,
      "stdout": "",
      "stderr": "/tmp/tmpj2sc0g4y.d(9): Error: variable `M` cannot be read at compile time\n/tmp/tmpj2sc0g4y.d(24): Error: undefined identifier `sum`\n/tmp/tmpj2sc0g4y.d(24): Error: undefined identifier `sum`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj2sc0g4y.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] sorted_M = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M.length; j++)\n\t\t{\n\t\t\tif (sums[i] < sums[j])\n\t\t\t{\n\t\t\t\tlong temp = sums[i];\n\t\t\t\tsums[i] = sums[j];\n\t\t\t\tsums[j] = temp;\n\t\t\t\t\n\t\t\t\tfor (int k = 0; k < M[0].length; k++)\n\t\t\t\t{\n\t\t\t\t\ttemp = M[i][k];\n\t\t\t\t\tM[i][k] = M[j][k];\n\t\t\t\t\tM[j][k] = temp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1665517550,
      "stdout": "",
      "stderr": "/tmp/tmpbr4na5ht.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbr4na5ht.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][];\n\tlong[] sums = new long[M.length];\n\tfor(int i = 0; i < M.length; i++)\n\t{\n\t\tresult[i] = new long[M[i].length];\n\t\tsums[i] = 0;\n\t\tfor(int j = 0; j < M[i].length; j++)\n\t\t{\n\t\t\tresult[i][j] = M[i][j];\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor(int i = 0; i < sums.length; i++)\n\t{\n\t\tfor(int j = i+1; j < sums.length; j++)\n\t\t{\n\t\t\tif(sums[i] > sums[j])\n\t\t\t{\n\t\t\t\tlong temp = sums[i];\n\t\t\t\tsums[i] = sums[j];\n\t\t\t\tsums[j] = temp;\n\t\t\t\t\n\t\t\t\tlong[] temp2 = result[i];\n\t\t\t\tresult[i] = result[j];\n\t\t\t\tresult[j] = temp2;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1665517550,
      "stdout": "",
      "stderr": "/tmp/tmpxcnq0jrp.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxcnq0jrp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tint min = i;\n\t\tfor (int j = i + 1; j < M.length; j++)\n\t\t{\n\t\t\tif (sums[j] < sums[min])\n\t\t\t{\n\t\t\t\tmin = j;\n\t\t\t}\n\t\t}\n\t\tif (min != i)\n\t\t{\n\t\t\tlong temp = sums[i];\n\t\t\tsums[i] = sums[min];\n\t\t\tsums[min] = temp;\n\t\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t\t{\n\t\t\t\ttemp = M[i][j];\n\t\t\t\tM[i][j] = M[min][j];\n\t\t\t\tM[min][j] = temp;\n\t\t\t}\n\t\t}\n\t}\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1665517550,
      "stdout": "",
      "stderr": "/tmp/tmpk5z8ulms.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk5z8ulms.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][];\n\tlong[] sums = new long[M.length];\n\t\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[i].length; j++) \n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tint[] order = new int[M.length];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\torder[i] = i;\n\t}\n\t\n\tstd.sort.quickSort(order, (a, b) => sums[a] < sums[b]);\n\t\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tresult[i] = M[order[i]];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1665517550,
      "stdout": "",
      "stderr": "/tmp/tmplw0c2ys4.d(9): Error: variable `M` cannot be read at compile time\n/tmp/tmplw0c2ys4.d(27): Error: undefined identifier `sort` in package `std`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplw0c2ys4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tlong[] sorted_sums = sums.dup;\n\tsort(sorted_sums);\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tresult[i][j] = M[sums.indexOf(sorted_sums[i])][j];\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1665517550,
      "stdout": "",
      "stderr": "/tmp/tmpd00oq1u8.d(9): Error: variable `M` cannot be read at compile time\n/tmp/tmpd00oq1u8.d(20): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmpd00oq1u8.d(26): Error: no property `indexOf` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd00oq1u8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tint n = M.length;\n\tint m = M[0].length;\n\tint[] sums = new int[n];\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tfor (int j = 0; j < m; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tint[] sorted_indices = sort(sums);\n\tlong[][] sorted_M = new long[n][m];\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tfor (int j = 0; j < m; j++)\n\t\t{\n\t\t\tsorted_M[i][j] = M[sorted_indices[i]][j];\n\t\t}\n\t}\n\treturn sorted_M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1665517550,
      "stdout": "",
      "stderr": "/tmp/tmpiadrbh7u.d(9): Error: cannot implicitly convert expression `M.length` of type `ulong` to `int`\n/tmp/tmpiadrbh7u.d(10): Error: cannot implicitly convert expression `M[0].length` of type `ulong` to `int`\n/tmp/tmpiadrbh7u.d(19): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmpiadrbh7u.d(20): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiadrbh7u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] sorted = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M.length; j++)\n\t\t{\n\t\t\tif (sums[i] < sums[j])\n\t\t\t{\n\t\t\t\tlong temp = sums[i];\n\t\t\t\tsums[i] = sums[j];\n\t\t\t\tsums[j] = temp;\n\t\t\t\tlong[] temp2 = M[i];\n\t\t\t\tM[i] = M[j];\n\t\t\t\tM[j] = temp2;\n\t\t\t}\n\t\t}\n\t}\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1665517550,
      "stdout": "",
      "stderr": "/tmp/tmp6hxnc70y.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6hxnc70y.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] sorted_matrix = new long[M.length][M[0].length];\n\tlong[] row_sum = new long[M.length];\n\tlong[] row_sum_sorted = new long[M.length];\n\t\n\tfor(int i = 0; i < M.length; i++)\n\t{\n\t\tfor(int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\trow_sum[i] += M[i][j];\n\t\t}\n\t\trow_sum_sorted[i] = row_sum[i];\n\t}\n\t\n\trow_sum_sorted = row_sum_sorted.sort();\n\t\n\tfor(int i = 0; i < M.length; i++)\n\t{\n\t\tfor(int j = 0; j < M.length; j++)\n\t\t{\n\t\t\tif(row_sum[i] == row_sum_sorted[j])\n\t\t\t{\n\t\t\t\tfor(int k = 0; k < M[0].length; k++)\n\t\t\t\t{\n\t\t\t\t\tsorted_matrix[j][k] = M[i][k];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn sorted_matrix;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1665517550,
      "stdout": "",
      "stderr": "/tmp/tmpapdmr8e7.d(9): Error: variable `M` cannot be read at compile time\n/tmp/tmpapdmr8e7.d(22): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpapdmr8e7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tint n = M.length;\n\tint m = M[0].length;\n\tint[] sums = new int[n];\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tfor (int j = 0; j < m; j++) \n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tfor (int j = i + 1; j < n; j++) \n\t\t{\n\t\t\tif (sums[i] > sums[j]) \n\t\t\t{\n\t\t\t\tint tmp = sums[i];\n\t\t\t\tsums[i] = sums[j];\n\t\t\t\tsums[j] = tmp;\n\t\t\t\tlong[] tmpr = M[i];\n\t\t\t\tM[i] = M[j];\n\t\t\t\tM[j] = tmpr;\n\t\t\t}\n\t\t}\n\t}\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1665517550,
      "stdout": "",
      "stderr": "/tmp/tmpql90eep4.d(9): Error: cannot implicitly convert expression `M.length` of type `ulong` to `int`\n/tmp/tmpql90eep4.d(10): Error: cannot implicitly convert expression `M[0].length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpql90eep4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result;\n\tlong[] sums;\n\tlong[] sorted_sums;\n\tlong[] sorted_indices;\n\tlong[] temp;\n\tlong i;\n\tlong j;\n\tlong k;\n\tlong n;\n\t\n\tn = M.length;\n\t\n\tresult = new long[n][];\n\tsums = new long[n];\n\tsorted_sums = new long[n];\n\tsorted_indices = new long[n];\n\t\n\tfor (i = 0; i < n; i++)\n\t{\n\t\tsums[i] = 0;\n\t\tfor (j = 0; j < M[i].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t\tsorted_sums[i] = sums[i];\n\t}\n\t\n\tsorted_sums = sorted_sums.sort();\n\t\n\tfor (i = 0; i < n; i++)\n\t{\n\t\tfor (j = 0; j < n; j++)\n\t\t{\n\t\t\tif (sorted_sums[i] == sums[j])\n\t\t\t{\n\t\t\t\tsorted_indices[i] = j;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor (i = 0; i < n; i++)\n\t{\n\t\tresult[i] = M[sorted_indices[i]];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1665517550,
      "stdout": "",
      "stderr": "/tmp/tmp_p6oum43.d(21): Error: variable `n` cannot be read at compile time\n/tmp/tmp_p6oum43.d(36): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_p6oum43.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] sorted = new long[M.length][];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tsorted[i] = new long[M[i].length];\n\t\tfor (int j = 0; j < M[i].length; j++) \n\t\t{\n\t\t\tsorted[i][j] = M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < sorted.length; i++) \n\t{\n\t\tfor (int j = 0; j < sorted.length - 1; j++) \n\t\t{\n\t\t\tif (sum(sorted[j]) > sum(sorted[j + 1])) \n\t\t\t{\n\t\t\t\tlong[] temp = sorted[j];\n\t\t\t\tsorted[j] = sorted[j + 1];\n\t\t\t\tsorted[j + 1] = temp;\n\t\t\t}\n\t\t}\n\t}\n\treturn sorted;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1665517550,
      "stdout": "",
      "stderr": "/tmp/tmps4zpir6u.d(9): Error: variable `M` cannot be read at compile time\n/tmp/tmps4zpir6u.d(23): Error: undefined identifier `sum`\n/tmp/tmps4zpir6u.d(23): Error: undefined identifier `sum`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps4zpir6u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] sorted_matrix = new long[M.length][M[0].length];\n\tlong[] row_sums = new long[M.length];\n\t\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tfor (int j = 0; j < M[0].length; j++) \n\t\t{\n\t\t\trow_sums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tfor (int j = 0; j < M.length; j++) \n\t\t{\n\t\t\tif (row_sums[i] < row_sums[j]) \n\t\t\t{\n\t\t\t\tlong temp = row_sums[i];\n\t\t\t\trow_sums[i] = row_sums[j];\n\t\t\t\trow_sums[j] = temp;\n\t\t\t\t\n\t\t\t\tlong[] temp_row = M[i];\n\t\t\t\tM[i] = M[j];\n\t\t\t\tM[j] = temp_row;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1665517550,
      "stdout": "",
      "stderr": "/tmp/tmp3eo4_stf.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3eo4_stf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tfor (int j = 0; j < M[0].length; j++) \n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tfor (int j = 0; j < M.length; j++) \n\t\t{\n\t\t\tif (sums[i] < sums[j]) \n\t\t\t{\n\t\t\t\tlong temp = sums[i];\n\t\t\t\tsums[i] = sums[j];\n\t\t\t\tsums[j] = temp;\n\t\t\t\tfor (int k = 0; k < M[0].length; k++) \n\t\t\t\t{\n\t\t\t\t\ttemp = M[i][k];\n\t\t\t\t\tM[i][k] = M[j][k];\n\t\t\t\t\tM[j][k] = temp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1665517550,
      "stdout": "",
      "stderr": "/tmp/tmp8nhtj162.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8nhtj162.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] sorted_M = new long[M.length][];\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tsorted_M[i] = new long[M[i].length];\n\t\tfor (int j = 0; j < M[i].length; j++)\n\t\t{\n\t\t\tsorted_M[i][j] = M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < sorted_M.length; i++)\n\t{\n\t\tfor (int j = 0; j < sorted_M.length - 1; j++)\n\t\t{\n\t\t\tif (sum(sorted_M[j]) > sum(sorted_M[j + 1]))\n\t\t\t{\n\t\t\t\tlong[] temp = sorted_M[j];\n\t\t\t\tsorted_M[j] = sorted_M[j + 1];\n\t\t\t\tsorted_M[j + 1] = temp;\n\t\t\t}\n\t\t}\n\t}\n\treturn sorted_M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1665517550,
      "stdout": "",
      "stderr": "/tmp/tmpqexkyed4.d(9): Error: variable `M` cannot be read at compile time\n/tmp/tmpqexkyed4.d(23): Error: undefined identifier `sum`\n/tmp/tmpqexkyed4.d(23): Error: undefined identifier `sum`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqexkyed4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][M[0].length];\n\t\n\tlong[] sums = new long[M.length];\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tint min_index = i;\n\t\tfor (int j = i + 1; j < M.length; j++)\n\t\t{\n\t\t\tif (sums[j] < sums[min_index])\n\t\t\t{\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tlong temp = sums[i];\n\t\tsums[i] = sums[min_index];\n\t\tsums[min_index] = temp;\n\t\t\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\ttemp = M[i][j];\n\t\t\tM[i][j] = M[min_index][j];\n\t\t\tM[min_index][j] = temp;\n\t\t}\n\t}\n\t\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1665517550,
      "stdout": "",
      "stderr": "/tmp/tmpx__y6coc.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx__y6coc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[i].length; j++) \n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tint min = i;\n\t\tfor (int j = i + 1; j < M.length; j++) \n\t\t{\n\t\t\tif (sums[j] < sums[min]) \n\t\t\t{\n\t\t\t\tmin = j;\n\t\t\t}\n\t\t}\n\t\tif (min != i) \n\t\t{\n\t\t\tlong[] temp = M[i];\n\t\t\tM[i] = M[min];\n\t\t\tM[min] = temp;\n\t\t\tlong temp2 = sums[i];\n\t\t\tsums[i] = sums[min];\n\t\t\tsums[min] = temp2;\n\t\t}\n\t}\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1665517550,
      "stdout": "",
      "stderr": "/tmp/tmp2rpywnlf.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2rpywnlf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor (int j = i; j < M.length; j++)\n\t\t{\n\t\t\tif (sums[j] < min)\n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tlong temp = sums[i];\n\t\tsums[i] = sums[min_index];\n\t\tsums[min_index] = temp;\n\t\t\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tresult[i][j] = M[min_index][j];\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1665517550,
      "stdout": "",
      "stderr": "/tmp/tmp8rsaewgy.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8rsaewgy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] sorted = new long[M.length][];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tsorted[i] = M[i];\n\t}\n\t\n\tfor (int i = 0; i < sorted.length; i++) \n\t{\n\t\tfor (int j = 0; j < sorted.length - 1; j++) \n\t\t{\n\t\t\tif (sum(sorted[j]) > sum(sorted[j + 1])) \n\t\t\t{\n\t\t\t\tlong[] temp = sorted[j];\n\t\t\t\tsorted[j] = sorted[j + 1];\n\t\t\t\tsorted[j + 1] = temp;\n\t\t\t}\n\t\t}\n\t}\n\treturn sorted;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1665517550,
      "stdout": "",
      "stderr": "/tmp/tmprvn6wven.d(9): Error: variable `M` cannot be read at compile time\n/tmp/tmprvn6wven.d(19): Error: undefined identifier `sum`\n/tmp/tmprvn6wven.d(19): Error: undefined identifier `sum`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprvn6wven.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sum = new long[M.length];\n\tforeach(i; 0 .. M.length)\n\t{\n\t\tforeach(j; 0 .. M[0].length)\n\t\t{\n\t\t\tsum[i] += M[i][j];\n\t\t}\n\t}\n\tforeach(i; 0 .. M.length)\n\t{\n\t\tforeach(j; 0 .. M.length)\n\t\t{\n\t\t\tif(sum[i] < sum[j])\n\t\t\t{\n\t\t\t\tlong temp = sum[i];\n\t\t\t\tsum[i] = sum[j];\n\t\t\t\tsum[j] = temp;\n\t\t\t\tforeach(k; 0 .. M[0].length)\n\t\t\t\t{\n\t\t\t\t\ttemp = M[i][k];\n\t\t\t\t\tM[i][k] = M[j][k];\n\t\t\t\t\tM[j][k] = temp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1665517550,
      "stdout": "",
      "stderr": "/tmp/tmp32_ddbz1.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp32_ddbz1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tlong[] indices = new long[M.length];\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t\tindices[i] = i;\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = i + 1; j < M.length; j++)\n\t\t{\n\t\t\tif (sums[i] > sums[j])\n\t\t\t{\n\t\t\t\tlong temp = sums[i];\n\t\t\t\tsums[i] = sums[j];\n\t\t\t\tsums[j] = temp;\n\t\t\t\t\n\t\t\t\ttemp = indices[i];\n\t\t\t\tindices[i] = indices[j];\n\t\t\t\tindices[j] = temp;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tresult[i][j] = M[indices[i]][j];\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123497,
      "stdout": "",
      "stderr": "/tmp/tmptxep6kmq.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptxep6kmq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tint N = M.length;\n\tint[] sum = new int[N];\n\tfor (int i = 0; i < N; i++)\n\t{\n\t\tfor (int j = 0; j < N; j++)\n\t\t{\n\t\t\tsum[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < N; i++)\n\t{\n\t\tfor (int j = i + 1; j < N; j++)\n\t\t{\n\t\t\tif (sum[i] > sum[j])\n\t\t\t{\n\t\t\t\tint temp = sum[i];\n\t\t\t\tsum[i] = sum[j];\n\t\t\t\tsum[j] = temp;\n\t\t\t\t\n\t\t\t\tfor (int k = 0; k < N; k++)\n\t\t\t\t{\n\t\t\t\t\ttemp = M[i][k];\n\t\t\t\t\tM[i][k] = M[j][k];\n\t\t\t\t\tM[j][k] = temp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123497,
      "stdout": "",
      "stderr": "/tmp/tmpjp8t0fet.d(9): Error: cannot implicitly convert expression `M.length` of type `ulong` to `int`\n/tmp/tmpjp8t0fet.d(31): Error: cannot implicitly convert expression `M[cast(ulong)i][cast(ulong)k]` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjp8t0fet.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tresult[i][j] = M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M.length - 1; j++)\n\t\t{\n\t\t\tif (sums[j] > sums[j + 1])\n\t\t\t{\n\t\t\t\tlong temp = sums[j];\n\t\t\t\tsums[j] = sums[j + 1];\n\t\t\t\tsums[j + 1] = temp;\n\t\t\t\t\n\t\t\t\tfor (int k = 0; k < M[0].length; k++)\n\t\t\t\t{\n\t\t\t\t\ttemp = result[j][k];\n\t\t\t\t\tresult[j][k] = result[j + 1][k];\n\t\t\t\t\tresult[j + 1][k] = temp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123497,
      "stdout": "",
      "stderr": "/tmp/tmpt2thp1cn.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt2thp1cn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++) {\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[i].length; j++) {\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tfor (int i = 0; i < M.length; i++) {\n\t\tint min = i;\n\t\tfor (int j = i + 1; j < M.length; j++) {\n\t\t\tif (sums[j] < sums[min]) {\n\t\t\t\tmin = j;\n\t\t\t}\n\t\t}\n\t\tif (min != i) {\n\t\t\tlong[] temp = M[i];\n\t\t\tM[i] = M[min];\n\t\t\tM[min] = temp;\n\t\t\tlong temp_sum = sums[i];\n\t\t\tsums[i] = sums[min];\n\t\t\tsums[min] = temp_sum;\n\t\t}\n\t}\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123497,
      "stdout": "",
      "stderr": "/tmp/tmp6r7loalg.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6r7loalg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result;\n\tresult.length = M.length;\n\tforeach(i, ref row; M)\n\t{\n\t\tresult[i].length = row.length;\n\t\tforeach(j, ref col; row)\n\t\t{\n\t\t\tresult[i][j] = col;\n\t\t}\n\t}\n\t\n\tforeach(i, ref row; result)\n\t{\n\t\tforeach(j, ref col; row)\n\t\t{\n\t\t\tif(j < row.length - 1)\n\t\t\t{\n\t\t\t\tif(row[j] > row[j + 1])\n\t\t\t\t{\n\t\t\t\t\tlong temp = row[j];\n\t\t\t\t\trow[j] = row[j + 1];\n\t\t\t\t\trow[j + 1] = temp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp6uoue1tz.d(42): unittest failure\n----------------\n??:? _d_unittestp [0x429781]\n??:? void tmp6uoue1tz.__unittest_L38_C1() [0x428422]\n??:? void tmp6uoue1tz.__modtest() [0x42896c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42f3cb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42945e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42c071]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42c100]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42bffd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x429435]\n??:? runModuleUnitTests [0x42f1a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429c44]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] sorted_M = new long[M.length][];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[i].length; j++) \n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tsorted_M[i] = M[i];\n\t}\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tfor (int j = i + 1; j < M.length; j++) \n\t\t{\n\t\t\tif (sums[i] > sums[j]) \n\t\t\t{\n\t\t\t\tlong[] temp = sorted_M[i];\n\t\t\t\tsorted_M[i] = sorted_M[j];\n\t\t\t\tsorted_M[j] = temp;\n\t\t\t\tlong temp_sum = sums[i];\n\t\t\t\tsums[i] = sums[j];\n\t\t\t\tsums[j] = temp_sum;\n\t\t\t}\n\t\t}\n\t}\n\treturn sorted_M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123497,
      "stdout": "",
      "stderr": "/tmp/tmpu9kgjphc.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu9kgjphc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] sorted_M = new long[M.length][];\n\tfor (int i = 0; i < M.length; i++)\n\t\tsorted_M[i] = M[i];\n\t\n\tfor (int i = 0; i < sorted_M.length; i++)\n\t\tfor (int j = 0; j < sorted_M.length - 1; j++)\n\t\t\tif (sum(sorted_M[j]) > sum(sorted_M[j+1]))\n\t\t\t{\n\t\t\t\tlong[] temp = sorted_M[j];\n\t\t\t\tsorted_M[j] = sorted_M[j+1];\n\t\t\t\tsorted_M[j+1] = temp;\n\t\t\t}\n\treturn sorted_M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123497,
      "stdout": "",
      "stderr": "/tmp/tmpglrsi5qd.d(9): Error: variable `M` cannot be read at compile time\n/tmp/tmpglrsi5qd.d(15): Error: undefined identifier `sum`\n/tmp/tmpglrsi5qd.d(15): Error: undefined identifier `sum`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpglrsi5qd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] N = new long[M.length][];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tN[i] = new long[M[i].length];\n\t\tfor (int j = 0; j < M[i].length; j++) \n\t\t{\n\t\t\tN[i][j] = M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < N.length; i++) \n\t{\n\t\tfor (int j = 0; j < N.length - 1; j++) \n\t\t{\n\t\t\tif (sum(N[j]) > sum(N[j + 1])) \n\t\t\t{\n\t\t\t\tlong[] temp = N[j];\n\t\t\t\tN[j] = N[j + 1];\n\t\t\t\tN[j + 1] = temp;\n\t\t\t}\n\t\t}\n\t}\n\treturn N;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123497,
      "stdout": "",
      "stderr": "/tmp/tmpa5rvngtt.d(9): Error: variable `M` cannot be read at compile time\n/tmp/tmpa5rvngtt.d(23): Error: undefined identifier `sum`\n/tmp/tmpa5rvngtt.d(23): Error: undefined identifier `sum`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa5rvngtt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[i].length; j++) \n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123497,
      "stdout": "",
      "stderr": "/tmp/tmpo2whb56i.d(18): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo2whb56i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tfor (int j = 0; j < M[0].length; j++) \n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tint min_index = i;\n\t\tfor (int j = i + 1; j < M.length; j++) \n\t\t{\n\t\t\tif (sums[j] < sums[min_index]) \n\t\t\t{\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\tif (min_index != i) \n\t\t{\n\t\t\tlong temp = sums[i];\n\t\t\tsums[i] = sums[min_index];\n\t\t\tsums[min_index] = temp;\n\t\t\tfor (int j = 0; j < M[0].length; j++) \n\t\t\t{\n\t\t\t\ttemp = M[i][j];\n\t\t\t\tM[i][j] = M[min_index][j];\n\t\t\t\tM[min_index][j] = temp;\n\t\t\t}\n\t\t}\n\t}\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123497,
      "stdout": "",
      "stderr": "/tmp/tmpcgg1bqwj.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcgg1bqwj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[] sum = new long[M.length];\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M[i].length; j++)\n\t\t{\n\t\t\tsum[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = i + 1; j < M.length; j++)\n\t\t{\n\t\t\tif (sum[i] > sum[j])\n\t\t\t{\n\t\t\t\tlong temp = sum[i];\n\t\t\t\tsum[i] = sum[j];\n\t\t\t\tsum[j] = temp;\n\t\t\t\t\n\t\t\t\tlong[] temp2 = M[i];\n\t\t\t\tM[i] = M[j];\n\t\t\t\tM[j] = temp2;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tint[] sums = new int[M.length];\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[i].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = i + 1; j < M.length; j++)\n\t\t{\n\t\t\tif (sums[i] > sums[j])\n\t\t\t{\n\t\t\t\tint tmp = sums[i];\n\t\t\t\tsums[i] = sums[j];\n\t\t\t\tsums[j] = tmp;\n\t\t\t\t\n\t\t\t\tlong[] tmp2 = M[i];\n\t\t\t\tM[i] = M[j];\n\t\t\t\tM[j] = tmp2;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tfor (int j = 0; j < M[0].length; j++) \n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor (int j = i; j < M.length; j++) \n\t\t{\n\t\t\tif (sums[j] < min) \n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\tlong temp = sums[i];\n\t\tsums[i] = sums[min_index];\n\t\tsums[min_index] = temp;\n\t\tfor (int j = 0; j < M[0].length; j++) \n\t\t{\n\t\t\tlong temp2 = M[i][j];\n\t\t\tM[i][j] = M[min_index][j];\n\t\t\tM[min_index][j] = temp2;\n\t\t}\n\t}\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123497,
      "stdout": "",
      "stderr": "/tmp/tmppgk7ej1u.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppgk7ej1u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor (int j = i; j < M.length; j++)\n\t\t{\n\t\t\tif (sums[j] < min)\n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tlong temp = sums[i];\n\t\tsums[i] = sums[min_index];\n\t\tsums[min_index] = temp;\n\t\t\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tlong temp2 = M[i][j];\n\t\t\tM[i][j] = M[min_index][j];\n\t\t\tM[min_index][j] = temp2;\n\t\t}\n\t}\n\t\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123497,
      "stdout": "",
      "stderr": "/tmp/tmp_t2ryshf.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_t2ryshf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] sorted = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor (int j = i; j < M.length; j++)\n\t\t{\n\t\t\tif (sums[j] < min)\n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tsums[min_index] = sums[i];\n\t\tsums[i] = min;\n\t\t\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsorted[i][j] = M[min_index][j];\n\t\t}\n\t}\n\t\n\treturn sorted;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123497,
      "stdout": "",
      "stderr": "/tmp/tmplrqa7fb9.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplrqa7fb9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tint[] sum = new int[M.length];\n\tfor(int i = 0; i < M.length; i++)\n\t{\n\t\tfor(int j = 0; j < M[i].length; j++)\n\t\t{\n\t\t\tsum[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor(int i = 0; i < M.length; i++)\n\t{\n\t\tfor(int j = i + 1; j < M.length; j++)\n\t\t{\n\t\t\tif(sum[i] > sum[j])\n\t\t\t{\n\t\t\t\tint temp = sum[i];\n\t\t\t\tsum[i] = sum[j];\n\t\t\t\tsum[j] = temp;\n\t\t\t\t\n\t\t\t\tlong[] temp2 = M[i];\n\t\t\t\tM[i] = M[j];\n\t\t\t\tM[j] = temp2;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\t\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tfor (int j = 0; j < M[0].length; j++) \n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor (int j = i; j < M.length; j++) \n\t\t{\n\t\t\tif (sums[j] < min) \n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tlong temp = sums[i];\n\t\tsums[i] = sums[min_index];\n\t\tsums[min_index] = temp;\n\t\t\n\t\tfor (int j = 0; j < M[0].length; j++) \n\t\t{\n\t\t\tlong temp2 = M[i][j];\n\t\t\tM[i][j] = M[min_index][j];\n\t\t\tM[min_index][j] = temp2;\n\t\t}\n\t}\n\t\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123497,
      "stdout": "",
      "stderr": "/tmp/tmpo3cxusg3.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo3cxusg3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[i].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = i + 1; j < M.length; j++)\n\t\t{\n\t\t\tif (sums[i] > sums[j])\n\t\t\t{\n\t\t\t\tlong temp = sums[i];\n\t\t\t\tsums[i] = sums[j];\n\t\t\t\tsums[j] = temp;\n\t\t\t\t\n\t\t\t\tlong[] temp2 = M[i];\n\t\t\t\tM[i] = M[j];\n\t\t\t\tM[j] = temp2;\n\t\t\t}\n\t\t}\n\t}\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[i].length; j++) \n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor (int j = i + 1; j < M.length; j++) \n\t\t{\n\t\t\tif (sums[j] < min) \n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\tif (min_index != i) \n\t\t{\n\t\t\tswap(sums[i], sums[min_index]);\n\t\t\tswap(M[i], M[min_index]);\n\t\t}\n\t\tresult[i] = M[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123497,
      "stdout": "",
      "stderr": "/tmp/tmp0h8dyj8u.d(9): Error: variable `M` cannot be read at compile time\n/tmp/tmp0h8dyj8u.d(33): Error: undefined identifier `swap`\n/tmp/tmp0h8dyj8u.d(34): Error: undefined identifier `swap`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0h8dyj8u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tlong[] indices = new long[M.length];\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t\tindices[i] = i;\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M.length - 1; j++)\n\t\t{\n\t\t\tif (sums[j] > sums[j+1])\n\t\t\t{\n\t\t\t\tlong temp = sums[j];\n\t\t\t\tsums[j] = sums[j+1];\n\t\t\t\tsums[j+1] = temp;\n\t\t\t\t\n\t\t\t\ttemp = indices[j];\n\t\t\t\tindices[j] = indices[j+1];\n\t\t\t\tindices[j+1] = temp;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tresult[i][j] = M[indices[i]][j];\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123497,
      "stdout": "",
      "stderr": "/tmp/tmp2hqlp0q3.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2hqlp0q3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tint[] sums = new int[M.length];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tfor (int j = 0; j < M[i].length; j++) \n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < sums.length; i++) \n\t{\n\t\tfor (int j = i + 1; j < sums.length; j++) \n\t\t{\n\t\t\tif (sums[i] > sums[j]) \n\t\t\t{\n\t\t\t\tlong[] temp = M[i];\n\t\t\t\tM[i] = M[j];\n\t\t\t\tM[j] = temp;\n\t\t\t\t\n\t\t\t\tint tempSum = sums[i];\n\t\t\t\tsums[i] = sums[j];\n\t\t\t\tsums[j] = tempSum;\n\t\t\t}\n\t\t}\n\t}\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tresult[i] = M[i];\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[i].length; j++) \n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tfor (int j = 0; j < M.length - 1; j++) \n\t\t{\n\t\t\tif (sums[j] > sums[j + 1]) \n\t\t\t{\n\t\t\t\tlong tmp = sums[j];\n\t\t\t\tsums[j] = sums[j + 1];\n\t\t\t\tsums[j + 1] = tmp;\n\t\t\t\tlong[] tmp2 = result[j];\n\t\t\t\tresult[j] = result[j + 1];\n\t\t\t\tresult[j + 1] = tmp2;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123497,
      "stdout": "",
      "stderr": "/tmp/tmpc0jyo3p4.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc0jyo3p4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] sorted_matrix = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor (int j = i; j < M.length; j++)\n\t\t{\n\t\t\tif (sums[j] < min)\n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tlong temp = sums[i];\n\t\tsums[i] = sums[min_index];\n\t\tsums[min_index] = temp;\n\t\t\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\ttemp = M[i][j];\n\t\t\tM[i][j] = M[min_index][j];\n\t\t\tM[min_index][j] = temp;\n\t\t}\n\t}\n\t\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123497,
      "stdout": "",
      "stderr": "/tmp/tmp_ami3msf.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_ami3msf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] N = new long[M.length][];\n\t\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tN[i] = new long[M[i].length];\n\t\tfor (int j = 0; j < M[i].length; j++) \n\t\t{\n\t\t\tN[i][j] = M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < N.length; i++) \n\t{\n\t\tfor (int j = 0; j < N.length - 1; j++) \n\t\t{\n\t\t\tif (sum(N[j]) > sum(N[j + 1])) \n\t\t\t{\n\t\t\t\tlong[] temp = N[j];\n\t\t\t\tN[j] = N[j + 1];\n\t\t\t\tN[j + 1] = temp;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn N;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123497,
      "stdout": "",
      "stderr": "/tmp/tmpiaf8i5ai.d(9): Error: variable `M` cannot be read at compile time\n/tmp/tmpiaf8i5ai.d(24): Error: undefined identifier `sum`\n/tmp/tmpiaf8i5ai.d(24): Error: undefined identifier `sum`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiaf8i5ai.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\t\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tfor (int j = 0; j < M[0].length; j++) \n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tint min = i;\n\t\tfor (int j = i + 1; j < M.length; j++) \n\t\t{\n\t\t\tif (sums[j] < sums[min]) \n\t\t\t{\n\t\t\t\tmin = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (min != i) \n\t\t{\n\t\t\tlong temp = sums[i];\n\t\t\tsums[i] = sums[min];\n\t\t\tsums[min] = temp;\n\t\t\t\n\t\t\tfor (int j = 0; j < M[0].length; j++) \n\t\t\t{\n\t\t\t\ttemp = M[i][j];\n\t\t\t\tM[i][j] = M[min][j];\n\t\t\t\tM[min][j] = temp;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123497,
      "stdout": "",
      "stderr": "/tmp/tmp3l_3p_e4.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3l_3p_e4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\t\n\tforeach(i; 0 .. M.length)\n\t{\n\t\tforeach(j; 0 .. M[i].length)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. M.length)\n\t{\n\t\tlong min = sums[i];\n\t\tlong min_index = i;\n\t\t\n\t\tforeach(j; i .. M.length)\n\t\t{\n\t\t\tif(sums[j] < min)\n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tlong temp = sums[i];\n\t\tsums[i] = sums[min_index];\n\t\tsums[min_index] = temp;\n\t\t\n\t\tforeach(j; 0 .. M[i].length)\n\t\t{\n\t\t\tresult[i][j] = M[min_index][j];\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123497,
      "stdout": "",
      "stderr": "/tmp/tmpj20rvuq5.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj20rvuq5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tint[] sums = new int[M.length];\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[i].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < sums.length; i++)\n\t{\n\t\tfor (int j = i + 1; j < sums.length; j++)\n\t\t{\n\t\t\tif (sums[i] > sums[j])\n\t\t\t{\n\t\t\t\tswap(sums[i], sums[j]);\n\t\t\t\tswap(M[i], M[j]);\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123497,
      "stdout": "",
      "stderr": "/tmp/tmpxxb6vrv8.d(25): Error: undefined identifier `swap`\n/tmp/tmpxxb6vrv8.d(26): Error: undefined identifier `swap`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxxb6vrv8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M[i].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M[i].length; j++)\n\t\t{\n\t\t\tresult[i][j] = M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M.length; j++)\n\t\t{\n\t\t\tif (sums[i] < sums[j])\n\t\t\t{\n\t\t\t\tlong temp = sums[i];\n\t\t\t\tsums[i] = sums[j];\n\t\t\t\tsums[j] = temp;\n\t\t\t\t\n\t\t\t\tfor (int k = 0; k < M[i].length; k++)\n\t\t\t\t{\n\t\t\t\t\ttemp = result[i][k];\n\t\t\t\t\tresult[i][k] = result[j][k];\n\t\t\t\t\tresult[j][k] = temp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123497,
      "stdout": "",
      "stderr": "/tmp/tmpg2uyj5h4.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg2uyj5h4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tfor (int j = 0; j < M[0].length; j++) \n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor (int j = i + 1; j < M.length; j++) \n\t\t{\n\t\t\tif (sums[j] < min) \n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\tif (min_index != i) \n\t\t{\n\t\t\tlong[] temp = M[i];\n\t\t\tM[i] = M[min_index];\n\t\t\tM[min_index] = temp;\n\t\t\tlong temp_sum = sums[i];\n\t\t\tsums[i] = sums[min_index];\n\t\t\tsums[min_index] = temp_sum;\n\t\t}\n\t}\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123497,
      "stdout": "",
      "stderr": "/tmp/tmp3a0pve76.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3a0pve76.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\t\n\tforeach(i; 0 .. M.length)\n\t{\n\t\tforeach(j; 0 .. M[0].length)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. M.length)\n\t{\n\t\tlong min = sums[i];\n\t\tlong min_index = i;\n\t\tforeach(j; i .. M.length)\n\t\t{\n\t\t\tif(sums[j] < min)\n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(min_index != i)\n\t\t{\n\t\t\tlong[] temp = M[i];\n\t\t\tM[i] = M[min_index];\n\t\t\tM[min_index] = temp;\n\t\t\t\n\t\t\tlong temp_sum = sums[i];\n\t\t\tsums[i] = sums[min_index];\n\t\t\tsums[min_index] = temp_sum;\n\t\t}\n\t}\n\t\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123497,
      "stdout": "",
      "stderr": "/tmp/tmpdwygzmgl.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdwygzmgl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tint n = M.length;\n\tint m = M[0].length;\n\t\n\tlong[][] res = new long[n][m];\n\t\n\tlong[] sums = new long[n];\n\t\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tfor (int j = 0; j < m; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tint[] order = new int[n];\n\t\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\torder[i] = i;\n\t}\n\t\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tfor (int j = i + 1; j < n; j++)\n\t\t{\n\t\t\tif (sums[i] > sums[j])\n\t\t\t{\n\t\t\t\tlong temp = sums[i];\n\t\t\t\tsums[i] = sums[j];\n\t\t\t\tsums[j] = temp;\n\t\t\t\t\n\t\t\t\tint temp2 = order[i];\n\t\t\t\torder[i] = order[j];\n\t\t\t\torder[j] = temp2;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tfor (int j = 0; j < m; j++)\n\t\t{\n\t\t\tres[i][j] = M[order[i]][j];\n\t\t}\n\t}\n\t\n\treturn res;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123497,
      "stdout": "",
      "stderr": "/tmp/tmp8io0yixs.d(9): Error: cannot implicitly convert expression `M.length` of type `ulong` to `int`\n/tmp/tmp8io0yixs.d(10): Error: cannot implicitly convert expression `M[0].length` of type `ulong` to `int`\n/tmp/tmp8io0yixs.d(12): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8io0yixs.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] sorted = new long[M.length][];\n\tlong[] sums = new long[M.length];\n\t\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[i].length; j++) \n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor (int j = i; j < M.length; j++) \n\t\t{\n\t\t\tif (sums[j] < min) \n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tsorted[i] = M[min_index];\n\t\tsums[min_index] = sums[i];\n\t\tsums[i] = min;\n\t}\n\t\n\treturn sorted;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123497,
      "stdout": "",
      "stderr": "/tmp/tmpiwbujbd7.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiwbujbd7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] N = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++) {\n\t\tfor (int j = 0; j < M[0].length; j++) {\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tlong[] sorted = sums.dup;\n\tsort(sorted);\n\t\n\tfor (int i = 0; i < M.length; i++) {\n\t\tfor (int j = 0; j < M[0].length; j++) {\n\t\t\tN[i][j] = M[sorted.indexOf(sums[i])][j];\n\t\t}\n\t}\n\t\n\treturn N;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123497,
      "stdout": "",
      "stderr": "/tmp/tmp6ewwvzxw.d(9): Error: variable `M` cannot be read at compile time\n/tmp/tmp6ewwvzxw.d(18): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmp6ewwvzxw.d(22): Error: no property `indexOf` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6ewwvzxw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tint n = M.length;\n\tint m = M[0].length;\n\tlong[][] result = new long[n][m];\n\tlong[] sums = new long[n];\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tfor (int j = 0; j < m; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tint[] sorted_indices = sort(sums);\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tfor (int j = 0; j < m; j++)\n\t\t{\n\t\t\tresult[i][j] = M[sorted_indices[i]][j];\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123497,
      "stdout": "",
      "stderr": "/tmp/tmp6wqp_l48.d(9): Error: cannot implicitly convert expression `M.length` of type `ulong` to `int`\n/tmp/tmp6wqp_l48.d(10): Error: cannot implicitly convert expression `M[0].length` of type `ulong` to `int`\n/tmp/tmp6wqp_l48.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmp6wqp_l48.d(20): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6wqp_l48.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[i].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tlong[] sorted_sums = sums.dup;\n\tsort(sorted_sums);\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M[i].length; j++)\n\t\t{\n\t\t\tresult[i][j] = M[sums.indexOf(sorted_sums[i])][j];\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123497,
      "stdout": "",
      "stderr": "/tmp/tmp_rxbwbua.d(9): Error: variable `M` cannot be read at compile time\n/tmp/tmp_rxbwbua.d(20): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmp_rxbwbua.d(25): Error: no property `indexOf` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_rxbwbua.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++) {\n\t\tfor (int j = 0; j < M[0].length; j++) {\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tfor (int i = 0; i < M.length; i++) {\n\t\tint min = i;\n\t\tfor (int j = i + 1; j < M.length; j++) {\n\t\t\tif (sums[j] < sums[min]) {\n\t\t\t\tmin = j;\n\t\t\t}\n\t\t}\n\t\tif (min != i) {\n\t\t\tlong tmp = sums[i];\n\t\t\tsums[i] = sums[min];\n\t\t\tsums[min] = tmp;\n\t\t\tfor (int j = 0; j < M[0].length; j++) {\n\t\t\t\ttmp = M[i][j];\n\t\t\t\tM[i][j] = M[min][j];\n\t\t\t\tM[min][j] = tmp;\n\t\t\t}\n\t\t}\n\t}\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123497,
      "stdout": "",
      "stderr": "/tmp/tmp7jd5062d.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7jd5062d.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] sorted = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[0].length; j++) \n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor (int j = i; j < M.length; j++) \n\t\t{\n\t\t\tif (sums[j] < min) \n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\tsums[min_index] = sums[i];\n\t\tsums[i] = min;\n\t\tfor (int j = 0; j < M[0].length; j++) \n\t\t{\n\t\t\tsorted[i][j] = M[min_index][j];\n\t\t}\n\t}\n\treturn sorted;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123497,
      "stdout": "",
      "stderr": "/tmp/tmp3q33rbeb.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3q33rbeb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[i].length; j++) \n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor (int j = i; j < M.length; j++) \n\t\t{\n\t\t\tif (sums[j] < min) \n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tlong[] temp = M[i];\n\t\tM[i] = M[min_index];\n\t\tM[min_index] = temp;\n\t\t\n\t\tlong temp_sum = sums[i];\n\t\tsums[i] = sums[min_index];\n\t\tsums[min_index] = temp_sum;\n\t}\n\t\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123497,
      "stdout": "",
      "stderr": "/tmp/tmpwd0e49z0.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwd0e49z0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tresult[i] = new long[M[i].length];\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[i].length; j++) \n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tint[] indices = sort(sums);\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tresult[i] = M[indices[i]];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123497,
      "stdout": "",
      "stderr": "/tmp/tmp8d0binfa.d(9): Error: variable `M` cannot be read at compile time\n/tmp/tmp8d0binfa.d(20): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8d0binfa.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tfor (int j = 0; j < M[0].length; j++) \n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor (int j = i; j < M.length; j++) \n\t\t{\n\t\t\tif (sums[j] < min) \n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\tsums[min_index] = sums[i];\n\t\tsums[i] = min;\n\t\tfor (int j = 0; j < M[0].length; j++) \n\t\t{\n\t\t\tresult[i][j] = M[min_index][j];\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123497,
      "stdout": "",
      "stderr": "/tmp/tmp1_q5j6wp.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1_q5j6wp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tint[] row_sum = new int[M.length];\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M[i].length; j++)\n\t\t{\n\t\t\trow_sum[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M.length - 1; j++)\n\t\t{\n\t\t\tif (row_sum[j] > row_sum[j + 1])\n\t\t\t{\n\t\t\t\tswap(row_sum[j], row_sum[j + 1]);\n\t\t\t\tswap(M[j], M[j + 1]);\n\t\t\t}\n\t\t}\n\t}\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "/tmp/tmpszsn4ed1.d(24): Error: undefined identifier `swap`\n/tmp/tmpszsn4ed1.d(25): Error: undefined identifier `swap`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpszsn4ed1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\t\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tfor (int j = 0; j < M[0].length; j++) \n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor (int j = i + 1; j < M.length; j++) \n\t\t{\n\t\t\tif (sums[j] < min) \n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (min_index != i) \n\t\t{\n\t\t\tlong temp = sums[i];\n\t\t\tsums[i] = sums[min_index];\n\t\t\tsums[min_index] = temp;\n\t\t\t\n\t\t\tfor (int j = 0; j < M[0].length; j++) \n\t\t\t{\n\t\t\t\ttemp = M[i][j];\n\t\t\t\tM[i][j] = M[min_index][j];\n\t\t\t\tM[min_index][j] = temp;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123497,
      "stdout": "",
      "stderr": "/tmp/tmpm2ocrtaw.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm2ocrtaw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] sorted = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor (int j = i; j < M.length; j++)\n\t\t{\n\t\t\tif (sums[j] < min)\n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tsums[min_index] = sums[i];\n\t\tsums[i] = min;\n\t\t\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsorted[i][j] = M[min_index][j];\n\t\t}\n\t}\n\t\n\treturn sorted;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123497,
      "stdout": "",
      "stderr": "/tmp/tmpi9wwxu9a.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi9wwxu9a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] sorted_matrix = new long[M.length][M[0].length];\n\tlong[] sum_row = new long[M.length];\n\tlong[] sum_row_copy = new long[M.length];\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsum_row[i] += M[i][j];\n\t\t\tsum_row_copy[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tsum_row_copy.sort();\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M.length; j++)\n\t\t{\n\t\t\tif (sum_row[i] == sum_row_copy[j])\n\t\t\t{\n\t\t\t\tsorted_matrix[j] = M[i];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn sorted_matrix;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123497,
      "stdout": "",
      "stderr": "/tmp/tmppcr2wpho.d(9): Error: variable `M` cannot be read at compile time\n/tmp/tmppcr2wpho.d(22): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppcr2wpho.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[i].length; j++) \n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tint[] sorted_indices = sort(sums);\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tresult[i] = M[sorted_indices[i]];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "/tmp/tmpzv0wzuyl.d(9): Error: variable `M` cannot be read at compile time\n/tmp/tmpzv0wzuyl.d(19): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzv0wzuyl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[0].length; j++) \n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor (int j = i; j < M.length; j++) \n\t\t{\n\t\t\tif (sums[j] < min) \n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tlong temp = sums[i];\n\t\tsums[i] = min;\n\t\tsums[min_index] = temp;\n\t\t\n\t\tfor (int j = 0; j < M[0].length; j++) \n\t\t{\n\t\t\ttemp = M[i][j];\n\t\t\tM[i][j] = M[min_index][j];\n\t\t\tM[min_index][j] = temp;\n\t\t}\n\t}\n\t\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123497,
      "stdout": "",
      "stderr": "/tmp/tmpbfppavqp.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbfppavqp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] N = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor (int j = i; j < M.length; j++)\n\t\t{\n\t\t\tif (sums[j] < min)\n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\tlong[] temp = M[i];\n\t\tM[i] = M[min_index];\n\t\tM[min_index] = temp;\n\t\tlong temp_sum = sums[i];\n\t\tsums[i] = sums[min_index];\n\t\tsums[min_index] = temp_sum;\n\t}\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "/tmp/tmptls_fjl5.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptls_fjl5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tresult[i] = new long[M[i].length];\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[i].length; j++) \n\t\t{\n\t\t\tresult[i][j] = M[i][j];\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tfor (int i = 0; i < result.length; i++) \n\t{\n\t\tfor (int j = i + 1; j < result.length; j++) \n\t\t{\n\t\t\tif (sums[i] > sums[j]) \n\t\t\t{\n\t\t\t\tlong[] tmp = result[i];\n\t\t\t\tresult[i] = result[j];\n\t\t\t\tresult[j] = tmp;\n\t\t\t\tlong tmp_sum = sums[i];\n\t\t\t\tsums[i] = sums[j];\n\t\t\t\tsums[j] = tmp_sum;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "/tmp/tmpjqeyiw0d.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjqeyiw0d.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] sorted = new long[M.length][];\n\tfor (int i = 0; i < M.length; i++) {\n\t\tsorted[i] = M[i];\n\t}\n\t\n\tfor (int i = 0; i < sorted.length; i++) {\n\t\tfor (int j = i + 1; j < sorted.length; j++) {\n\t\t\tif (sum(sorted[i]) > sum(sorted[j])) {\n\t\t\t\tlong[] tmp = sorted[i];\n\t\t\t\tsorted[i] = sorted[j];\n\t\t\t\tsorted[j] = tmp;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn sorted;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "/tmp/tmpjaf05zh7.d(9): Error: variable `M` cannot be read at compile time\n/tmp/tmpjaf05zh7.d(16): Error: undefined identifier `sum`\n/tmp/tmpjaf05zh7.d(16): Error: undefined identifier `sum`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjaf05zh7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[i].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tint[] sorted_indexes = sort(sums);\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M[i].length; j++)\n\t\t{\n\t\t\tresult[i][j] = M[sorted_indexes[i]][j];\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "/tmp/tmpxnr393l6.d(9): Error: variable `M` cannot be read at compile time\n/tmp/tmpxnr393l6.d(21): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxnr393l6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tint n = M.length;\n\tint m = M[0].length;\n\t\n\tlong[][] sum = new long[n][2];\n\t\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tsum[i][0] = 0;\n\t\tfor (int j = 0; j < m; j++)\n\t\t{\n\t\t\tsum[i][0] += M[i][j];\n\t\t}\n\t\tsum[i][1] = i;\n\t}\n\t\n\tsort(sum);\n\t\n\tlong[][] result = new long[n][m];\n\t\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tfor (int j = 0; j < m; j++)\n\t\t{\n\t\t\tresult[i][j] = M[(int)sum[i][1]][j];\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "/tmp/tmpho7pn3i2.d(32): Error: C style cast illegal, use `cast(int)sum[i][1]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpho7pn3i2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] sorted = new long[M.length][];\n\tforeach(i, row; M)\n\t{\n\t\tsorted[i] = row;\n\t}\n\t\n\tsort!((a, b) => a[0] < b[0])(sorted);\n\t\n\treturn sorted;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "/tmp/tmpop0oqc_s.d(9): Error: variable `M` cannot be read at compile time\n/tmp/tmpop0oqc_s.d(15): Error: template instance `sort!((a, b) => a[0] < b[0])` template `sort` is not defined, did you mean sqrt?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpop0oqc_s.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M[i].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M[i].length; j++)\n\t\t{\n\t\t\tresult[i][j] = M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M.length - 1; j++)\n\t\t{\n\t\t\tif (sums[j] > sums[j + 1])\n\t\t\t{\n\t\t\t\tlong temp = sums[j];\n\t\t\t\tsums[j] = sums[j + 1];\n\t\t\t\tsums[j + 1] = temp;\n\t\t\t\t\n\t\t\t\tfor (int k = 0; k < M[i].length; k++)\n\t\t\t\t{\n\t\t\t\t\ttemp = result[j][k];\n\t\t\t\t\tresult[j][k] = result[j + 1][k];\n\t\t\t\t\tresult[j + 1][k] = temp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "/tmp/tmpak7vrnlt.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpak7vrnlt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[i].length; j++) \n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tint[] order = sort(sums);\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tresult[i] = M[order[i]];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "/tmp/tmp3o2144wy.d(9): Error: variable `M` cannot be read at compile time\n/tmp/tmp3o2144wy.d(19): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3o2144wy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] sorted_matrix = new long[M.length][];\n\tlong[] row_sums = new long[M.length];\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\trow_sums[i] = 0;\n\t\tfor (int j = 0; j < M[i].length; j++)\n\t\t{\n\t\t\trow_sums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\t// sort row_sums\n\tfor (int i = 0; i < row_sums.length; i++)\n\t{\n\t\tfor (int j = i + 1; j < row_sums.length; j++)\n\t\t{\n\t\t\tif (row_sums[i] > row_sums[j])\n\t\t\t{\n\t\t\t\tlong temp = row_sums[i];\n\t\t\t\trow_sums[i] = row_sums[j];\n\t\t\t\trow_sums[j] = temp;\n\t\t\t}\n\t\t}\n\t}\n\t\n\t// sort M\n\tfor (int i = 0; i < row_sums.length; i++)\n\t{\n\t\tfor (int j = 0; j < M.length; j++)\n\t\t{\n\t\t\tlong sum = 0;\n\t\t\tfor (int k = 0; k < M[j].length; k++)\n\t\t\t{\n\t\t\t\tsum += M[j][k];\n\t\t\t}\n\t\t\tif (sum == row_sums[i])\n\t\t\t{\n\t\t\t\tsorted_matrix[i] = M[j];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn sorted_matrix;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "/tmp/tmpa0g2qobj.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa0g2qobj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][];\n\tlong[] sums = new long[M.length];\n\t\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tresult[i] = new long[M[i].length];\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[i].length; j++) \n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tfor (int j = 0; j < M.length; j++) \n\t\t{\n\t\t\tif (sums[i] < sums[j]) \n\t\t\t{\n\t\t\t\tlong temp = sums[i];\n\t\t\t\tsums[i] = sums[j];\n\t\t\t\tsums[j] = temp;\n\t\t\t\t\n\t\t\t\tlong[] temp2 = result[i];\n\t\t\t\tresult[i] = result[j];\n\t\t\t\tresult[j] = temp2;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "/tmp/tmpouzmzc8r.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpouzmzc8r.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M.length; j++)\n\t\t{\n\t\t\tif (sums[i] < sums[j])\n\t\t\t{\n\t\t\t\tlong temp = sums[i];\n\t\t\t\tsums[i] = sums[j];\n\t\t\t\tsums[j] = temp;\n\t\t\t\t\n\t\t\t\tfor (int k = 0; k < M[0].length; k++)\n\t\t\t\t{\n\t\t\t\t\ttemp = M[i][k];\n\t\t\t\t\tM[i][k] = M[j][k];\n\t\t\t\t\tM[j][k] = temp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "/tmp/tmpgh9fxaej.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgh9fxaej.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\t\n\tfor(int i = 0; i < M.length; i++)\n\t{\n\t\tfor(int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor(int i = 0; i < M.length; i++)\n\t{\n\t\tfor(int j = 0; j < M.length; j++)\n\t\t{\n\t\t\tif(sums[i] < sums[j])\n\t\t\t{\n\t\t\t\tlong temp = sums[i];\n\t\t\t\tsums[i] = sums[j];\n\t\t\t\tsums[j] = temp;\n\t\t\t\t\n\t\t\t\tfor(int k = 0; k < M[0].length; k++)\n\t\t\t\t{\n\t\t\t\t\ttemp = M[i][k];\n\t\t\t\t\tM[i][k] = M[j][k];\n\t\t\t\t\tM[j][k] = temp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "/tmp/tmpikpusnfj.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpikpusnfj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\t\n\tfor(int i = 0; i < M.length; i++)\n\t{\n\t\tfor(int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor(int i = 0; i < M.length; i++)\n\t{\n\t\tfor(int j = 0; j < M.length; j++)\n\t\t{\n\t\t\tif(sums[i] < sums[j])\n\t\t\t{\n\t\t\t\tlong temp = sums[i];\n\t\t\t\tsums[i] = sums[j];\n\t\t\t\tsums[j] = temp;\n\t\t\t\t\n\t\t\t\tfor(int k = 0; k < M[0].length; k++)\n\t\t\t\t{\n\t\t\t\t\ttemp = M[i][k];\n\t\t\t\t\tM[i][k] = M[j][k];\n\t\t\t\t\tM[j][k] = temp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "/tmp/tmpikpusnfj.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpikpusnfj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sum = new long[M.length];\n\t\n\tfor(int i = 0; i < M.length; i++)\n\t{\n\t\tfor(int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsum[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tlong[] sorted_sum = sum.dup;\n\tsort(sorted_sum);\n\t\n\tfor(int i = 0; i < M.length; i++)\n\t{\n\t\tfor(int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tresult[i][j] = M[sum.indexOf(sorted_sum[i])][j];\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "/tmp/tmpobi2qfym.d(9): Error: variable `M` cannot be read at compile time\n/tmp/tmpobi2qfym.d(21): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmpobi2qfym.d(27): Error: no property `indexOf` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpobi2qfym.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor (int j = i; j < M.length; j++)\n\t\t{\n\t\t\tif (sums[j] < min)\n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tlong[] temp = M[i];\n\t\tM[i] = M[min_index];\n\t\tM[min_index] = temp;\n\t\t\n\t\tlong temp_sum = sums[i];\n\t\tsums[i] = sums[min_index];\n\t\tsums[min_index] = temp_sum;\n\t}\n\t\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "/tmp/tmp21ozval1.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp21ozval1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result;\n\tresult = new long[M.length][M[0].length];\n\tint[] sum;\n\tsum = new int[M.length];\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsum[i] += M[i][j];\n\t\t}\n\t}\n\tint[] sorted_sum;\n\tsorted_sum = new int[M.length];\n\tsorted_sum = sum.dup;\n\tsorted_sum.sort;\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tresult[i][j] = M[sum.indexOf(sorted_sum[i])][j];\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "/tmp/tmpt7fefmi0.d(10): Error: variable `M` cannot be read at compile time\n/tmp/tmpt7fefmi0.d(23): Error: no property `sort` for type `int[]`\n/tmp/tmpt7fefmi0.d(28): Error: no property `indexOf` for type `int[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt7fefmi0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor (int j = i; j < M.length; j++)\n\t\t{\n\t\t\tif (sums[j] < min)\n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (min_index != i)\n\t\t{\n\t\t\tlong temp = sums[i];\n\t\t\tsums[i] = sums[min_index];\n\t\t\tsums[min_index] = temp;\n\t\t\t\n\t\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t\t{\n\t\t\t\ttemp = M[i][j];\n\t\t\t\tM[i][j] = M[min_index][j];\n\t\t\t\tM[min_index][j] = temp;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "/tmp/tmpm3amtmb4.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm3amtmb4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[i].length; j++)\n\t\t\tsums[i] += M[i][j];\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor (int j = i + 1; j < M.length; j++)\n\t\t{\n\t\t\tif (sums[j] < min)\n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (min_index != i)\n\t\t{\n\t\t\tlong[] temp = M[i];\n\t\t\tM[i] = M[min_index];\n\t\t\tM[min_index] = temp;\n\t\t\t\n\t\t\tlong temp_sum = sums[i];\n\t\t\tsums[i] = sums[min_index];\n\t\t\tsums[min_index] = temp_sum;\n\t\t}\n\t}\n\t\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "/tmp/tmpnc8fppkj.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnc8fppkj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] sorted_M = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tint[] indices = new int[M.length];\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[i].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t\tindices[i] = i;\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M.length - 1; j++)\n\t\t{\n\t\t\tif (sums[j] > sums[j + 1])\n\t\t\t{\n\t\t\t\tlong temp = sums[j];\n\t\t\t\tsums[j] = sums[j + 1];\n\t\t\t\tsums[j + 1] = temp;\n\t\t\t\t\n\t\t\t\tint temp_index = indices[j];\n\t\t\t\tindices[j] = indices[j + 1];\n\t\t\t\tindices[j + 1] = temp_index;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M[i].length; j++)\n\t\t{\n\t\t\tsorted_M[i][j] = M[indices[i]][j];\n\t\t}\n\t}\n\treturn sorted_M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "/tmp/tmp3fxkrj3_.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3fxkrj3_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] sorted = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\t\n\tfor (int i = 0; i < M.length; i++) {\n\t\tfor (int j = 0; j < M[0].length; j++) {\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++) {\n\t\tfor (int j = 0; j < M.length; j++) {\n\t\t\tif (sums[i] < sums[j]) {\n\t\t\t\tlong temp = sums[i];\n\t\t\t\tsums[i] = sums[j];\n\t\t\t\tsums[j] = temp;\n\t\t\t\t\n\t\t\t\tlong[] temp2 = M[i];\n\t\t\t\tM[i] = M[j];\n\t\t\t\tM[j] = temp2;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "/tmp/tmpewjtug0c.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpewjtug0c.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][];\n\tint[] sum = new int[M.length];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tresult[i] = M[i];\n\t\tfor (int j = 0; j < M[i].length; j++) \n\t\t{\n\t\t\tsum[i] += M[i][j];\n\t\t}\n\t}\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tfor (int j = i + 1; j < M.length; j++) \n\t\t{\n\t\t\tif (sum[i] > sum[j]) \n\t\t\t{\n\t\t\t\tlong[] temp = result[i];\n\t\t\t\tresult[i] = result[j];\n\t\t\t\tresult[j] = temp;\n\t\t\t\tint temp_sum = sum[i];\n\t\t\t\tsum[i] = sum[j];\n\t\t\t\tsum[j] = temp_sum;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "/tmp/tmpox73ei1t.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpox73ei1t.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M[i].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M.length; j++)\n\t\t{\n\t\t\tif (sums[i] < sums[j])\n\t\t\t{\n\t\t\t\tlong temp = sums[i];\n\t\t\t\tsums[i] = sums[j];\n\t\t\t\tsums[j] = temp;\n\t\t\t\t\n\t\t\t\tlong[] temp_row = M[i];\n\t\t\t\tM[i] = M[j];\n\t\t\t\tM[j] = temp_row;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "/tmp/tmpkt4rn0n0.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkt4rn0n0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] N = new long[M.length][];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tN[i] = new long[M[i].length];\n\t\tfor (int j = 0; j < M[i].length; j++) \n\t\t{\n\t\t\tN[i][j] = M[i][j];\n\t\t}\n\t}\n\t\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[i].length; j++) \n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tfor (int j = i + 1; j < M.length; j++) \n\t\t{\n\t\t\tif (sums[i] > sums[j]) \n\t\t\t{\n\t\t\t\tlong temp = sums[i];\n\t\t\t\tsums[i] = sums[j];\n\t\t\t\tsums[j] = temp;\n\t\t\t\t\n\t\t\t\tfor (int k = 0; k < M[i].length; k++) \n\t\t\t\t{\n\t\t\t\t\ttemp = N[i][k];\n\t\t\t\t\tN[i][k] = N[j][k];\n\t\t\t\t\tN[j][k] = temp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn N;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "/tmp/tmprhvcmtsj.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprhvcmtsj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] N = new long[M.length][];\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tN[i] = new long[M[i].length];\n\t\tfor (int j = 0; j < M[i].length; j++)\n\t\t{\n\t\t\tN[i][j] = M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < N.length; i++)\n\t{\n\t\tfor (int j = i + 1; j < N.length; j++)\n\t\t{\n\t\t\tif (sum(N[i]) > sum(N[j]))\n\t\t\t{\n\t\t\t\tlong[] temp = N[i];\n\t\t\t\tN[i] = N[j];\n\t\t\t\tN[j] = temp;\n\t\t\t}\n\t\t}\n\t}\n\treturn N;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "/tmp/tmpxm2hh7ex.d(9): Error: variable `M` cannot be read at compile time\n/tmp/tmpxm2hh7ex.d(23): Error: undefined identifier `sum`\n/tmp/tmpxm2hh7ex.d(23): Error: undefined identifier `sum`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxm2hh7ex.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M.length; j++)\n\t\t{\n\t\t\tif (sums[i] < sums[j])\n\t\t\t{\n\t\t\t\tswap(sums[i], sums[j]);\n\t\t\t\tswap(M[i], M[j]);\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "/tmp/tmp3g9hy651.d(9): Error: variable `M` cannot be read at compile time\n/tmp/tmp3g9hy651.d(26): Error: undefined identifier `swap`\n/tmp/tmp3g9hy651.d(27): Error: undefined identifier `swap`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3g9hy651.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] res = new long[M.length][];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[i].length; j++) \n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tlong min = sums[i];\n\t\tint min_i = i;\n\t\tfor (int j = i + 1; j < M.length; j++) \n\t\t{\n\t\t\tif (sums[j] < min) \n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_i = j;\n\t\t\t}\n\t\t}\n\t\tif (min_i != i) \n\t\t{\n\t\t\tlong[] tmp = M[i];\n\t\t\tM[i] = M[min_i];\n\t\t\tM[min_i] = tmp;\n\t\t\tlong tmp_sum = sums[i];\n\t\t\tsums[i] = sums[min_i];\n\t\t\tsums[min_i] = tmp_sum;\n\t\t}\n\t}\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "/tmp/tmp2mdhdjpf.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2mdhdjpf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tresult[i] = new long[M[i].length];\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[i].length; j++) \n\t\t{\n\t\t\tresult[i][j] = M[i][j];\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tfor (int j = i + 1; j < M.length; j++) \n\t\t{\n\t\t\tif (sums[i] > sums[j]) \n\t\t\t{\n\t\t\t\tlong[] temp = result[i];\n\t\t\t\tresult[i] = result[j];\n\t\t\t\tresult[j] = temp;\n\t\t\t\tlong temp_sum = sums[i];\n\t\t\t\tsums[i] = sums[j];\n\t\t\t\tsums[j] = temp_sum;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "/tmp/tmp4506bpn3.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4506bpn3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[] row_sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\trow_sums[i] = 0;\n\t\tfor (int j = 0; j < M[i].length; j++) \n\t\t{\n\t\t\trow_sums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tlong[][] sorted_matrix = new long[M.length][M[0].length];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tlong min = row_sums[i];\n\t\tint min_index = i;\n\t\tfor (int j = i; j < M.length; j++) \n\t\t{\n\t\t\tif (row_sums[j] < min) \n\t\t\t{\n\t\t\t\tmin = row_sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\trow_sums[min_index] = row_sums[i];\n\t\trow_sums[i] = min;\n\t\t\n\t\tfor (int j = 0; j < M[i].length; j++) \n\t\t{\n\t\t\tsorted_matrix[i][j] = M[min_index][j];\n\t\t}\n\t}\n\t\n\treturn sorted_matrix;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "/tmp/tmpkut96r5z.d(19): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkut96r5z.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] N = new long[M.length][M[0].length];\n\tlong[] sum = new long[M.length];\n\tlong[] index = new long[M.length];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tsum[i] = 0;\n\t\tindex[i] = i;\n\t\tfor (int j = 0; j < M[i].length; j++) \n\t\t{\n\t\t\tsum[i] += M[i][j];\n\t\t}\n\t}\n\tsort(sum, index);\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tfor (int j = 0; j < M[i].length; j++) \n\t\t{\n\t\t\tN[i][j] = M[index[i]][j];\n\t\t}\n\t}\n\treturn N;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "/tmp/tmp_w_u3tul.d(9): Error: variable `M` cannot be read at compile time\n/tmp/tmp_w_u3tul.d(21): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_w_u3tul.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor (int j = i + 1; j < M.length; j++)\n\t\t{\n\t\t\tif (sums[j] < min)\n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\tif (min_index != i)\n\t\t{\n\t\t\tlong temp = sums[i];\n\t\t\tsums[i] = sums[min_index];\n\t\t\tsums[min_index] = temp;\n\t\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t\t{\n\t\t\t\ttemp = M[i][j];\n\t\t\t\tM[i][j] = M[min_index][j];\n\t\t\t\tM[min_index][j] = temp;\n\t\t\t}\n\t\t}\n\t}\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "/tmp/tmpeltalh3a.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpeltalh3a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] N = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor (int j = i; j < M.length; j++)\n\t\t{\n\t\t\tif (sums[j] < min)\n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tN[i][j] = M[min_index][j];\n\t\t}\n\t\t\n\t\tsums[min_index] = sums[i];\n\t\tsums[i] = min;\n\t}\n\t\n\treturn N;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "/tmp/tmpre6ofjy2.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpre6ofjy2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[i].length; j++) \n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tlong[] sorted_sums = sums.dup;\n\tsort(sorted_sums);\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tfor (int j = 0; j < M[i].length; j++) \n\t\t{\n\t\t\tresult[i][j] = M[sums.indexOf(sorted_sums[i])][j];\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "/tmp/tmppx33f5cr.d(9): Error: variable `M` cannot be read at compile time\n/tmp/tmppx33f5cr.d(20): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmppx33f5cr.d(25): Error: no property `indexOf` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppx33f5cr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tint n = M.length;\n\tint m = M[0].length;\n\tint[] sums = new int[n];\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < m; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tfor (int j = i + 1; j < n; j++)\n\t\t{\n\t\t\tif (sums[i] > sums[j])\n\t\t\t{\n\t\t\t\tint temp = sums[i];\n\t\t\t\tsums[i] = sums[j];\n\t\t\t\tsums[j] = temp;\n\t\t\t\tlong[] temp_row = M[i];\n\t\t\t\tM[i] = M[j];\n\t\t\t\tM[j] = temp_row;\n\t\t\t}\n\t\t}\n\t}\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "/tmp/tmpl46x3t2i.d(9): Error: cannot implicitly convert expression `M.length` of type `ulong` to `int`\n/tmp/tmpl46x3t2i.d(10): Error: cannot implicitly convert expression `M[0].length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl46x3t2i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor (int j = i + 1; j < M.length; j++)\n\t\t{\n\t\t\tif (sums[j] < min)\n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\tif (min_index != i)\n\t\t{\n\t\t\tlong temp = sums[i];\n\t\t\tsums[i] = sums[min_index];\n\t\t\tsums[min_index] = temp;\n\t\t\t\n\t\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t\t{\n\t\t\t\ttemp = M[i][j];\n\t\t\t\tM[i][j] = M[min_index][j];\n\t\t\t\tM[min_index][j] = temp;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "/tmp/tmptktq7bad.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptktq7bad.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result;\n\tlong[] sums;\n\tlong[] indices;\n\tlong i, j;\n\t\n\tsums = new long[M.length];\n\tindices = new long[M.length];\n\t\n\tfor (i = 0; i < M.length; i++)\n\t{\n\t\tsums[i] = 0;\n\t\tfor (j = 0; j < M[i].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t\tindices[i] = i;\n\t}\n\t\n\tsort(sums, indices);\n\t\n\tresult = new long[M.length][];\n\tfor (i = 0; i < M.length; i++)\n\t{\n\t\tresult[i] = M[indices[i]];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "/tmp/tmpnt6t2uqu.d(27): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmpnt6t2uqu.d(29): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnt6t2uqu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\t\n\t// calculate sums\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\t// sort sums\n\tfor (int i = 0; i < sums.length; i++)\n\t{\n\t\tfor (int j = i + 1; j < sums.length; j++)\n\t\t{\n\t\t\tif (sums[i] > sums[j])\n\t\t\t{\n\t\t\t\tlong temp = sums[i];\n\t\t\t\tsums[i] = sums[j];\n\t\t\t\tsums[j] = temp;\n\t\t\t}\n\t\t}\n\t}\n\t\n\t// sort matrix\n\tfor (int i = 0; i < sums.length; i++)\n\t{\n\t\tfor (int j = 0; j < M.length; j++)\n\t\t{\n\t\t\tif (sums[i] == M[j][0] + M[j][1] + M[j][2])\n\t\t\t{\n\t\t\t\tresult[i] = M[j];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "/tmp/tmpisy89_hf.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpisy89_hf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][];\n\tlong[] sums = new long[M.length];\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tresult[i] = new long[M[i].length];\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[i].length; j++)\n\t\t{\n\t\t\tresult[i][j] = M[i][j];\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = i + 1; j < M.length; j++)\n\t\t{\n\t\t\tif (sums[i] > sums[j])\n\t\t\t{\n\t\t\t\tlong[] temp = result[i];\n\t\t\t\tresult[i] = result[j];\n\t\t\t\tresult[j] = temp;\n\t\t\t\t\n\t\t\t\tlong temp_sum = sums[i];\n\t\t\t\tsums[i] = sums[j];\n\t\t\t\tsums[j] = temp_sum;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "/tmp/tmpp1j911gm.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp1j911gm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\t\n\tfor(int i = 0; i < M.length; i++)\n\t{\n\t\tfor(int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor(int i = 0; i < M.length; i++)\n\t{\n\t\tfor(int j = 0; j < M.length; j++)\n\t\t{\n\t\t\tif(sums[i] < sums[j])\n\t\t\t{\n\t\t\t\tlong temp = sums[i];\n\t\t\t\tsums[i] = sums[j];\n\t\t\t\tsums[j] = temp;\n\t\t\t\t\n\t\t\t\tfor(int k = 0; k < M[0].length; k++)\n\t\t\t\t{\n\t\t\t\t\ttemp = M[i][k];\n\t\t\t\t\tM[i][k] = M[j][k];\n\t\t\t\t\tM[j][k] = temp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "/tmp/tmpikpusnfj.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpikpusnfj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tint n = M.length;\n\tint m = M[0].length;\n\tint[] sums = new int[n];\n\t\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tfor (int j = 0; j < m; j++) \n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tfor (int j = i + 1; j < n; j++) \n\t\t{\n\t\t\tif (sums[i] > sums[j]) \n\t\t\t{\n\t\t\t\tint temp = sums[i];\n\t\t\t\tsums[i] = sums[j];\n\t\t\t\tsums[j] = temp;\n\t\t\t\t\n\t\t\t\tlong[] temp_row = M[i];\n\t\t\t\tM[i] = M[j];\n\t\t\t\tM[j] = temp_row;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "/tmp/tmpel_fnagr.d(9): Error: cannot implicitly convert expression `M.length` of type `ulong` to `int`\n/tmp/tmpel_fnagr.d(10): Error: cannot implicitly convert expression `M[0].length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpel_fnagr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor (int j = i; j < M.length; j++)\n\t\t{\n\t\t\tif (sums[j] < min)\n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\tsums[min_index] = sums[i];\n\t\tsums[i] = min;\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tresult[i][j] = M[min_index][j];\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "/tmp/tmp1ldpjw88.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1ldpjw88.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[i].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor (int j = i; j < M.length; j++)\n\t\t{\n\t\t\tif (sums[j] < min)\n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tlong temp = sums[i];\n\t\tsums[i] = sums[min_index];\n\t\tsums[min_index] = temp;\n\t\t\n\t\tfor (int j = 0; j < M[i].length; j++)\n\t\t{\n\t\t\ttemp = M[i][j];\n\t\t\tM[i][j] = M[min_index][j];\n\t\t\tM[min_index][j] = temp;\n\t\t}\n\t}\n\t\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "/tmp/tmp23k9qibi.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp23k9qibi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[i].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tlong[][] sorted = new long[M.length][];\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tsorted[i] = new long[M[i].length];\n\t\tfor (int j = 0; j < M[i].length; j++)\n\t\t{\n\t\t\tsorted[i][j] = M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M.length - 1; j++)\n\t\t{\n\t\t\tif (sums[j] > sums[j+1])\n\t\t\t{\n\t\t\t\tlong temp = sums[j];\n\t\t\t\tsums[j] = sums[j+1];\n\t\t\t\tsums[j+1] = temp;\n\t\t\t\t\n\t\t\t\tfor (int k = 0; k < M[i].length; k++)\n\t\t\t\t{\n\t\t\t\t\ttemp = sorted[j][k];\n\t\t\t\t\tsorted[j][k] = sorted[j+1][k];\n\t\t\t\t\tsorted[j+1][k] = temp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn sorted;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "/tmp/tmp948nqamt.d(19): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp948nqamt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] sorted_matrix = new long[M.length][M[0].length];\n\tlong[] sum_rows = new long[M.length];\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsum_rows[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsorted_matrix[i][j] = M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M.length - 1; j++)\n\t\t{\n\t\t\tif (sum_rows[j] > sum_rows[j + 1])\n\t\t\t{\n\t\t\t\tlong[] temp = sorted_matrix[j];\n\t\t\t\tsorted_matrix[j] = sorted_matrix[j + 1];\n\t\t\t\tsorted_matrix[j + 1] = temp;\n\t\t\t\t\n\t\t\t\tlong temp_sum = sum_rows[j];\n\t\t\t\tsum_rows[j] = sum_rows[j + 1];\n\t\t\t\tsum_rows[j + 1] = temp_sum;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn sorted_matrix;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "/tmp/tmpein3fcmu.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpein3fcmu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] sorted_matrix = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor (int j = i; j < M.length; j++)\n\t\t{\n\t\t\tif (sums[j] < min)\n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tlong[] temp = M[i];\n\t\tM[i] = M[min_index];\n\t\tM[min_index] = temp;\n\t\t\n\t\tlong temp_sum = sums[i];\n\t\tsums[i] = sums[min_index];\n\t\tsums[min_index] = temp_sum;\n\t}\n\t\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "/tmp/tmp89ybslqz.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp89ybslqz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sum = new long[M.length];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tfor (int j = 0; j < M[0].length; j++) \n\t\t{\n\t\t\tsum[i] += M[i][j];\n\t\t}\n\t}\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tfor (int j = 0; j < M.length - 1; j++) \n\t\t{\n\t\t\tif (sum[j] > sum[j + 1]) \n\t\t\t{\n\t\t\t\tlong temp = sum[j];\n\t\t\t\tsum[j] = sum[j + 1];\n\t\t\t\tsum[j + 1] = temp;\n\t\t\t\tfor (int k = 0; k < M[0].length; k++) \n\t\t\t\t{\n\t\t\t\t\ttemp = M[j][k];\n\t\t\t\t\tM[j][k] = M[j + 1][k];\n\t\t\t\t\tM[j + 1][k] = temp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "/tmp/tmpg0mgx6k6.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg0mgx6k6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n    long[][] result = new long[M.length][M[0].length];\n    long[] sums = new long[M.length];\n    for (int i = 0; i < M.length; i++) \n    {\n        for (int j = 0; j < M[0].length; j++) \n        {\n            sums[i] += M[i][j];\n        }\n    }\n    int[] indices = new int[M.length];\n    for (int i = 0; i < M.length; i++) \n    {\n        indices[i] = i;\n    }\n    sort(sums, indices);\n    for (int i = 0; i < M.length; i++) \n    {\n        for (int j = 0; j < M[0].length; j++) \n        {\n            result[i][j] = M[indices[i]][j];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "/tmp/tmpaiwcdew_.d(9): Error: variable `M` cannot be read at compile time\n/tmp/tmpaiwcdew_.d(23): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpaiwcdew_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tresult[i] = new long[M[i].length];\n\t\tfor (int j = 0; j < M[i].length; j++) \n\t\t{\n\t\t\tresult[i][j] = M[i][j];\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tfor (int j = i + 1; j < M.length; j++) \n\t\t{\n\t\t\tif (sums[i] > sums[j]) \n\t\t\t{\n\t\t\t\tlong[] temp = result[i];\n\t\t\t\tresult[i] = result[j];\n\t\t\t\tresult[j] = temp;\n\t\t\t\tlong temp_sum = sums[i];\n\t\t\t\tsums[i] = sums[j];\n\t\t\t\tsums[j] = temp_sum;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "/tmp/tmpwdwx4ajl.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwdwx4ajl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tfor(int i = 0; i < M.length; i++)\n\t{\n\t\tfor(int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tfor(int i = 0; i < M.length; i++)\n\t{\n\t\tfor(int j = 0; j < M.length; j++)\n\t\t{\n\t\t\tif(sums[i] < sums[j])\n\t\t\t{\n\t\t\t\tlong temp = sums[i];\n\t\t\t\tsums[i] = sums[j];\n\t\t\t\tsums[j] = temp;\n\t\t\t\tlong[] temp_row = M[i];\n\t\t\t\tM[i] = M[j];\n\t\t\t\tM[j] = temp_row;\n\t\t\t}\n\t\t}\n\t}\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "/tmp/tmpp5kjemna.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp5kjemna.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tforeach(i; 0 .. M.length)\n\t{\n\t\tforeach(j; 0 .. M[0].length)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tforeach(i; 0 .. M.length)\n\t{\n\t\tlong min = sums[i];\n\t\tlong min_index = i;\n\t\tforeach(j; i .. M.length)\n\t\t{\n\t\t\tif(sums[j] < min)\n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\tlong temp = sums[i];\n\t\tsums[i] = sums[min_index];\n\t\tsums[min_index] = temp;\n\t\tforeach(j; 0 .. M[0].length)\n\t\t{\n\t\t\tresult[i][j] = M[min_index][j];\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "/tmp/tmpficwdz8p.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpficwdz8p.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] sorted = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M[i].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor (int j = i + 1; j < M.length; j++)\n\t\t{\n\t\t\tif (sums[j] < min)\n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (min_index != i)\n\t\t{\n\t\t\tsums[min_index] = sums[i];\n\t\t\tsums[i] = min;\n\t\t\t\n\t\t\tlong[] temp = M[i];\n\t\t\tM[i] = M[min_index];\n\t\t\tM[min_index] = temp;\n\t\t}\n\t}\n\t\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "/tmp/tmp590ooz4e.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp590ooz4e.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[i].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor (int j = i; j < M.length; j++)\n\t\t{\n\t\t\tif (sums[j] < min)\n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\tresult[i] = M[min_index];\n\t\tsums[min_index] = sums[i];\n\t\tsums[i] = min;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "/tmp/tmp8oa3bmzs.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8oa3bmzs.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] sorted = new long[M.length][];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tsorted[i] = M[i];\n\t}\n\t\n\tsort(sorted, (long[] a, long[] b) => sum(a) < sum(b));\n\t\n\treturn sorted;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "/tmp/tmp_ja29wik.d(9): Error: variable `M` cannot be read at compile time\n/tmp/tmp_ja29wik.d(15): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_ja29wik.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] sorted = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\t\n\tfor(int i = 0; i < M.length; i++)\n\t{\n\t\tfor(int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor(int i = 0; i < M.length; i++)\n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor(int j = i; j < M.length; j++)\n\t\t{\n\t\t\tif(sums[j] < min)\n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tlong temp = sums[i];\n\t\tsums[i] = sums[min_index];\n\t\tsums[min_index] = temp;\n\t\t\n\t\tfor(int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tlong temp2 = M[i][j];\n\t\t\tM[i][j] = M[min_index][j];\n\t\t\tM[min_index][j] = temp2;\n\t\t}\n\t}\n\t\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "/tmp/tmpm9re1dv8.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm9re1dv8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] sorted = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++) {\n\t\tfor (int j = 0; j < M[0].length; j++) {\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tint[] indices = new int[M.length];\n\tfor (int i = 0; i < M.length; i++) {\n\t\tindices[i] = i;\n\t}\n\tstd.sort.quickSort(sums, indices);\n\tfor (int i = 0; i < M.length; i++) {\n\t\tfor (int j = 0; j < M[0].length; j++) {\n\t\t\tsorted[i][j] = M[indices[i]][j];\n\t\t}\n\t}\n\treturn sorted;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "/tmp/tmp038wbz0h.d(9): Error: variable `M` cannot be read at compile time\n/tmp/tmp038wbz0h.d(20): Error: undefined identifier `sort` in package `std`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp038wbz0h.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] N = new long[M.length][];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tN[i] = new long[M[i].length];\n\t\tfor (int j = 0; j < M[i].length; j++) \n\t\t{\n\t\t\tN[i][j] = M[i][j];\n\t\t}\n\t}\n\t\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[i].length; j++) \n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tfor (int j = i + 1; j < M.length; j++) \n\t\t{\n\t\t\tif (sums[i] > sums[j]) \n\t\t\t{\n\t\t\t\tlong temp = sums[i];\n\t\t\t\tsums[i] = sums[j];\n\t\t\t\tsums[j] = temp;\n\t\t\t\t\n\t\t\t\tfor (int k = 0; k < M[i].length; k++) \n\t\t\t\t{\n\t\t\t\t\ttemp = N[i][k];\n\t\t\t\t\tN[i][k] = N[j][k];\n\t\t\t\t\tN[j][k] = temp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn N;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "/tmp/tmprhvcmtsj.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprhvcmtsj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] sorted = new long[M.length][];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tsorted[i] = M[i];\n\t}\n\tsort(sorted, (a, b) => sum(a) < sum(b));\n\treturn sorted;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "/tmp/tmp04dyy9ix.d(9): Error: variable `M` cannot be read at compile time\n/tmp/tmp04dyy9ix.d(14): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp04dyy9ix.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sum = new long[M.length];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tfor (int j = 0; j < M[0].length; j++) \n\t\t{\n\t\t\tsum[i] += M[i][j];\n\t\t}\n\t}\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tfor (int j = 0; j < M.length - 1; j++) \n\t\t{\n\t\t\tif (sum[j] > sum[j + 1]) \n\t\t\t{\n\t\t\t\tlong temp = sum[j];\n\t\t\t\tsum[j] = sum[j + 1];\n\t\t\t\tsum[j + 1] = temp;\n\t\t\t\tfor (int k = 0; k < M[0].length; k++) \n\t\t\t\t{\n\t\t\t\t\ttemp = M[j][k];\n\t\t\t\t\tM[j][k] = M[j + 1][k];\n\t\t\t\t\tM[j + 1][k] = temp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "/tmp/tmpg0mgx6k6.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg0mgx6k6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tint[] sorted_indices = sort(sums);\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tresult[i][j] = M[sorted_indices[i]][j];\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "/tmp/tmpq5i2t39t.d(9): Error: variable `M` cannot be read at compile time\n/tmp/tmpq5i2t39t.d(20): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq5i2t39t.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\t\n\tfor(int i = 0; i < M.length; i++)\n\t{\n\t\tfor(int j = 0; j < M[i].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor(int i = 0; i < M.length; i++)\n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor(int j = i; j < M.length; j++)\n\t\t{\n\t\t\tif(sums[j] < min)\n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tlong temp = sums[i];\n\t\tsums[i] = sums[min_index];\n\t\tsums[min_index] = temp;\n\t\t\n\t\tfor(int j = 0; j < M[i].length; j++)\n\t\t{\n\t\t\ttemp = M[i][j];\n\t\t\tM[i][j] = M[min_index][j];\n\t\t\tM[min_index][j] = temp;\n\t\t}\n\t}\n\t\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "/tmp/tmp3pd24387.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3pd24387.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sum = new long[M.length];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tfor (int j = 0; j < M[0].length; j++) \n\t\t{\n\t\t\tsum[i] += M[i][j];\n\t\t}\n\t}\n\tlong[] sorted_sum = sum.dup;\n\tsorted_sum.sort;\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tfor (int j = 0; j < M.length; j++) \n\t\t{\n\t\t\tif (sum[i] == sorted_sum[j]) \n\t\t\t{\n\t\t\t\tresult[j] = M[i];\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "/tmp/tmpmb2qpavj.d(9): Error: variable `M` cannot be read at compile time\n/tmp/tmpmb2qpavj.d(19): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmb2qpavj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++) {\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[i].length; j++) {\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tlong[][] sorted = new long[M.length][M[0].length];\n\tfor (int i = 0; i < M.length; i++) {\n\t\tlong min = sums[0];\n\t\tint min_index = 0;\n\t\tfor (int j = 0; j < sums.length; j++) {\n\t\t\tif (sums[j] < min) {\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\tsorted[i] = M[min_index];\n\t\tsums[min_index] = LONG_MAX;\n\t}\n\treturn sorted;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "/tmp/tmp1fviezdk.d(17): Error: variable `M` cannot be read at compile time\n/tmp/tmp1fviezdk.d(28): Error: undefined identifier `LONG_MAX`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1fviezdk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] sorted = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M[i].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor (int j = i; j < M.length; j++)\n\t\t{\n\t\t\tif (sums[j] < min)\n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tsums[min_index] = sums[i];\n\t\tsums[i] = min;\n\t\t\n\t\tfor (int j = 0; j < M[i].length; j++)\n\t\t{\n\t\t\tsorted[i][j] = M[min_index][j];\n\t\t}\n\t}\n\t\n\treturn sorted;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "/tmp/tmpqjqemafi.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqjqemafi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result;\n\tint[] sum;\n\tint i, j;\n\t\n\tresult = new long[M.length][M[0].length];\n\tsum = new int[M.length];\n\t\n\tfor (i = 0; i < M.length; i++) {\n\t\tfor (j = 0; j < M[0].length; j++) {\n\t\t\tsum[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (i = 0; i < M.length; i++) {\n\t\tfor (j = 0; j < M.length; j++) {\n\t\t\tif (sum[i] < sum[j]) {\n\t\t\t\tresult[i] = M[j];\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "/tmp/tmp10n29fb7.d(13): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp10n29fb7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tint[] sums = new int[M.length];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tfor (int j = 0; j < M[i].length; j++) \n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < sums.length; i++) \n\t{\n\t\tfor (int j = i + 1; j < sums.length; j++) \n\t\t{\n\t\t\tif (sums[i] > sums[j]) \n\t\t\t{\n\t\t\t\tint temp = sums[i];\n\t\t\t\tsums[i] = sums[j];\n\t\t\t\tsums[j] = temp;\n\t\t\t\t\n\t\t\t\tlong[] temp2 = M[i];\n\t\t\t\tM[i] = M[j];\n\t\t\t\tM[j] = temp2;\n\t\t\t}\n\t\t}\n\t}\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[i].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tlong[] sorted_sums = sums.dup;\n\tsorted_sums.sort;\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M.length; j++)\n\t\t{\n\t\t\tif (sums[i] == sorted_sums[j])\n\t\t\t{\n\t\t\t\tresult[j] = M[i];\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "/tmp/tmpmyt0na96.d(9): Error: variable `M` cannot be read at compile time\n/tmp/tmpmyt0na96.d(21): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmyt0na96.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] N = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[0].length; j++) \n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor (int j = i; j < M.length; j++) \n\t\t{\n\t\t\tif (sums[j] < min) \n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\tif (min_index != i) \n\t\t{\n\t\t\tlong temp = sums[i];\n\t\t\tsums[i] = sums[min_index];\n\t\t\tsums[min_index] = temp;\n\t\t\tfor (int j = 0; j < M[0].length; j++) \n\t\t\t{\n\t\t\t\ttemp = M[i][j];\n\t\t\t\tM[i][j] = M[min_index][j];\n\t\t\t\tM[min_index][j] = temp;\n\t\t\t}\n\t\t}\n\t}\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "/tmp/tmpfe_z_jma.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfe_z_jma.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][];\n\tlong[] sums = new long[M.length];\n\tforeach(i, row; M)\n\t{\n\t\tresult[i] = row.dup;\n\t\tsums[i] = row.sum;\n\t}\n\t\n\tsort!((a, b) => a > b)(sums, result);\n\treturn result;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "/tmp/tmponqslmsa.d(9): Error: variable `M` cannot be read at compile time\n/tmp/tmponqslmsa.d(14): Error: no property `sum` for type `long[]`\n/tmp/tmponqslmsa.d(17): Error: template instance `sort!((a, b) => a > b)` template `sort` is not defined, did you mean sqrt?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmponqslmsa.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] sorted_matrix = new long[M.length][];\n\tlong[] sums = new long[M.length];\n\tint[] indices = new int[M.length];\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[i].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t\tindices[i] = i;\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = i + 1; j < M.length; j++)\n\t\t{\n\t\t\tif (sums[i] > sums[j])\n\t\t\t{\n\t\t\t\tlong temp = sums[i];\n\t\t\t\tsums[i] = sums[j];\n\t\t\t\tsums[j] = temp;\n\t\t\t\t\n\t\t\t\tint temp2 = indices[i];\n\t\t\t\tindices[i] = indices[j];\n\t\t\t\tindices[j] = temp2;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tsorted_matrix[i] = M[indices[i]];\n\t}\n\t\n\treturn sorted_matrix;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "/tmp/tmp3k7ezcj0.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3k7ezcj0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] N = new long[M.length][M[0].length];\n\tlong[] sum = new long[M.length];\n\tlong[] index = new long[M.length];\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsum[i] += M[i][j];\n\t\t}\n\t\tindex[i] = i;\n\t}\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = i + 1; j < M.length; j++)\n\t\t{\n\t\t\tif (sum[i] > sum[j])\n\t\t\t{\n\t\t\t\tlong temp = sum[i];\n\t\t\t\tsum[i] = sum[j];\n\t\t\t\tsum[j] = temp;\n\t\t\t\ttemp = index[i];\n\t\t\t\tindex[i] = index[j];\n\t\t\t\tindex[j] = temp;\n\t\t\t}\n\t\t}\n\t}\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tN[i][j] = M[index[i]][j];\n\t\t}\n\t}\n\treturn N;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "/tmp/tmpx9qxew_y.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx9qxew_y.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor (int j = i; j < M.length; j++)\n\t\t{\n\t\t\tif (sums[j] < min)\n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tlong temp = sums[i];\n\t\tsums[i] = sums[min_index];\n\t\tsums[min_index] = temp;\n\t\t\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\ttemp = M[i][j];\n\t\t\tM[i][j] = M[min_index][j];\n\t\t\tM[min_index][j] = temp;\n\t\t}\n\t}\n\t\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "/tmp/tmpvaey4wzc.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvaey4wzc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] sorted_matrix = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[0].length; j++) \n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor (int j = i; j < M.length; j++) \n\t\t{\n\t\t\tif (sums[j] < min) \n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\tlong temp = sums[i];\n\t\tsums[i] = sums[min_index];\n\t\tsums[min_index] = temp;\n\t\tfor (int j = 0; j < M[0].length; j++) \n\t\t{\n\t\t\tlong temp2 = M[i][j];\n\t\t\tM[i][j] = M[min_index][j];\n\t\t\tM[min_index][j] = temp2;\n\t\t}\n\t}\n\t\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "/tmp/tmplcuwxtid.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplcuwxtid.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] N = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++) {\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[0].length; j++) {\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++) {\n\t\tint min = i;\n\t\tfor (int j = i + 1; j < M.length; j++) {\n\t\t\tif (sums[j] < sums[min]) {\n\t\t\t\tmin = j;\n\t\t\t}\n\t\t}\n\t\tif (min != i) {\n\t\t\tlong tmp = sums[i];\n\t\t\tsums[i] = sums[min];\n\t\t\tsums[min] = tmp;\n\t\t\tfor (int j = 0; j < M[0].length; j++) {\n\t\t\t\ttmp = M[i][j];\n\t\t\t\tM[i][j] = M[min][j];\n\t\t\t\tM[min][j] = tmp;\n\t\t\t}\n\t\t}\n\t}\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "/tmp/tmpw6d6l3m_.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw6d6l3m_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tint min_index = i;\n\t\tfor (int j = i + 1; j < M.length; j++)\n\t\t{\n\t\t\tif (sums[j] < sums[min_index])\n\t\t\t{\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (min_index != i)\n\t\t{\n\t\t\tlong temp = sums[i];\n\t\t\tsums[i] = sums[min_index];\n\t\t\tsums[min_index] = temp;\n\t\t\t\n\t\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t\t{\n\t\t\t\ttemp = M[i][j];\n\t\t\t\tM[i][j] = M[min_index][j];\n\t\t\t\tM[min_index][j] = temp;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "/tmp/tmpom_z9cx9.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpom_z9cx9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] sorted = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tlong[] sorted_sums = sums.dup;\n\tsort(sorted_sums);\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsorted[i][j] = M[sums.indexOf(sorted_sums[i])][j];\n\t\t}\n\t}\n\t\n\treturn sorted;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "/tmp/tmpm3w7y_7n.d(9): Error: variable `M` cannot be read at compile time\n/tmp/tmpm3w7y_7n.d(21): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmpm3w7y_7n.d(27): Error: no property `indexOf` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm3w7y_7n.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\t\n\tforeach(i; 0 .. M.length)\n\t{\n\t\tforeach(j; 0 .. M[0].length)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. M.length)\n\t{\n\t\tlong min = sums[i];\n\t\tlong min_index = i;\n\t\t\n\t\tforeach(j; i .. M.length)\n\t\t{\n\t\t\tif(sums[j] < min)\n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tforeach(j; 0 .. M[0].length)\n\t\t{\n\t\t\tresult[i][j] = M[min_index][j];\n\t\t}\n\t\t\n\t\tsums[min_index] = sums[i];\n\t\tsums[i] = min;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "/tmp/tmp68_5da0b.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp68_5da0b.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tresult[i] = new long[M[i].length];\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[i].length; j++) \n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tint[] sorted_indices = sort(sums);\n\tfor (int i = 0; i < sorted_indices.length; i++) \n\t{\n\t\tresult[i] = M[sorted_indices[i]];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "/tmp/tmp94f1z2in.d(9): Error: variable `M` cannot be read at compile time\n/tmp/tmp94f1z2in.d(21): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp94f1z2in.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][];\n\tlong[] sums = new long[M.length];\n\tforeach(i, row; M)\n\t{\n\t\tresult[i] = row.dup;\n\t\tsums[i] = reduce!\"a + b\"(row);\n\t}\n\tsort!(\"a < b\")(sums, result);\n\treturn result;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "/tmp/tmp6_qkuc8k.d(9): Error: variable `M` cannot be read at compile time\n/tmp/tmp6_qkuc8k.d(14): Error: template instance `reduce!\"a + b\"` template `reduce` is not defined\n/tmp/tmp6_qkuc8k.d(16): Error: template instance `sort!\"a < b\"` template `sort` is not defined, did you mean sqrt?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6_qkuc8k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor (int j = i; j < M.length; j++)\n\t\t{\n\t\t\tif (sums[j] < min)\n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tlong temp = sums[i];\n\t\tsums[i] = sums[min_index];\n\t\tsums[min_index] = temp;\n\t\t\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tresult[i][j] = M[min_index][j];\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "/tmp/tmpj293n8a3.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj293n8a3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] N = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor (int j = i; j < M.length; j++)\n\t\t{\n\t\t\tif (sums[j] < min)\n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tlong[] temp = M[i];\n\t\tM[i] = M[min_index];\n\t\tM[min_index] = temp;\n\t\t\n\t\tlong temp_sum = sums[i];\n\t\tsums[i] = sums[min_index];\n\t\tsums[min_index] = temp_sum;\n\t}\n\t\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "/tmp/tmpyz3894dg.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyz3894dg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\t\n\tfor(int i = 0; i < M.length; i++)\n\t{\n\t\tfor(int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor(int i = 0; i < M.length; i++)\n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor(int j = i; j < M.length; j++)\n\t\t{\n\t\t\tif(sums[j] < min)\n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tlong temp = sums[i];\n\t\tsums[i] = sums[min_index];\n\t\tsums[min_index] = temp;\n\t\t\n\t\tfor(int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\ttemp = M[i][j];\n\t\t\tM[i][j] = M[min_index][j];\n\t\t\tM[min_index][j] = temp;\n\t\t}\n\t}\n\t\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "/tmp/tmpp9bjyezi.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp9bjyezi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tfor (int j = 0; j < M[i].length; j++) \n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor (int j = i; j < M.length; j++) \n\t\t{\n\t\t\tif (sums[j] < min) \n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\tlong[] temp = M[i];\n\t\tM[i] = M[min_index];\n\t\tM[min_index] = temp;\n\t\tlong temp_sum = sums[i];\n\t\tsums[i] = sums[min_index];\n\t\tsums[min_index] = temp_sum;\n\t}\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "/tmp/tmpx0nvn551.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx0nvn551.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] sorted_matrix = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++) {\n\t\tfor (int j = 0; j < M[0].length; j++) {\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tint[] sorted_indices = sort(sums);\n\tfor (int i = 0; i < M.length; i++) {\n\t\tfor (int j = 0; j < M[0].length; j++) {\n\t\t\tsorted_matrix[i][j] = M[sorted_indices[i]][j];\n\t\t}\n\t}\n\treturn sorted_matrix;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "/tmp/tmp90vm5ygq.d(9): Error: variable `M` cannot be read at compile time\n/tmp/tmp90vm5ygq.d(16): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp90vm5ygq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tint n = M.length;\n\tint m = M[0].length;\n\tlong[][] res = new long[n][m];\n\tlong[] sums = new long[n];\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < m; j++)\n\t\t\tsums[i] += M[i][j];\n\t}\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tlong min = sums[i];\n\t\tint min_i = i;\n\t\tfor (int j = i + 1; j < n; j++)\n\t\t{\n\t\t\tif (sums[j] < min)\n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_i = j;\n\t\t\t}\n\t\t}\n\t\tif (min_i != i)\n\t\t{\n\t\t\tlong tmp = sums[i];\n\t\t\tsums[i] = sums[min_i];\n\t\t\tsums[min_i] = tmp;\n\t\t\tfor (int j = 0; j < m; j++)\n\t\t\t{\n\t\t\t\ttmp = M[i][j];\n\t\t\t\tM[i][j] = M[min_i][j];\n\t\t\t\tM[min_i][j] = tmp;\n\t\t\t}\n\t\t}\n\t}\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "/tmp/tmpz2u2yzfj.d(9): Error: cannot implicitly convert expression `M.length` of type `ulong` to `int`\n/tmp/tmpz2u2yzfj.d(10): Error: cannot implicitly convert expression `M[0].length` of type `ulong` to `int`\n/tmp/tmpz2u2yzfj.d(11): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz2u2yzfj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] N = new long[M.length][M[0].length];\n\tlong[] sum = new long[M.length];\n\tlong[] index = new long[M.length];\n\t\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tfor (int j = 0; j < M[0].length; j++) \n\t\t{\n\t\t\tsum[i] += M[i][j];\n\t\t}\n\t\tindex[i] = i;\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tfor (int j = i + 1; j < M.length; j++) \n\t\t{\n\t\t\tif (sum[i] > sum[j]) \n\t\t\t{\n\t\t\t\tlong temp = sum[i];\n\t\t\t\tsum[i] = sum[j];\n\t\t\t\tsum[j] = temp;\n\t\t\t\t\n\t\t\t\ttemp = index[i];\n\t\t\t\tindex[i] = index[j];\n\t\t\t\tindex[j] = temp;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tfor (int j = 0; j < M[0].length; j++) \n\t\t{\n\t\t\tN[i][j] = M[index[i]][j];\n\t\t}\n\t}\n\t\n\treturn N;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "/tmp/tmp4dyushph.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4dyushph.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++)\n\t\tsums[i] = sum(M[i]);\n\t\n\tlong[][] sorted = new long[M.length][M[0].length];\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tint min_index = 0;\n\t\tfor (int j = 0; j < M.length; j++)\n\t\t\tif (sums[j] < sums[min_index])\n\t\t\t\tmin_index = j;\n\t\tsorted[i] = M[min_index];\n\t\tsums[min_index] = long.max;\n\t}\n\treturn sorted;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "/tmp/tmp318ahl2m.d(11): Error: undefined identifier `sum`, did you mean variable `sums`?\n/tmp/tmp318ahl2m.d(13): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp318ahl2m.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n    long[][] result = new long[M.length][];\n    long[] sums = new long[M.length];\n    for (int i = 0; i < M.length; i++) \n    {\n        sums[i] = 0;\n        for (int j = 0; j < M[i].length; j++) \n        {\n            sums[i] += M[i][j];\n        }\n    }\n    long[] sorted_sums = sums.dup;\n    sorted_sums.sort;\n    for (int i = 0; i < M.length; i++) \n    {\n        int index = sorted_sums.find(sums[i]);\n        result[index] = M[i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "/tmp/tmpw0hws1wr.d(9): Error: variable `M` cannot be read at compile time\n/tmp/tmpw0hws1wr.d(20): Error: no property `sort` for type `long[]`\n/tmp/tmpw0hws1wr.d(23): Error: no property `find` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw0hws1wr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] sorted = new long[M.length][];\n\tint[] sums = new int[M.length];\n\tint[] indices = new int[M.length];\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[i].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t\tindices[i] = i;\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = i + 1; j < M.length; j++)\n\t\t{\n\t\t\tif (sums[i] > sums[j])\n\t\t\t{\n\t\t\t\tint temp = sums[i];\n\t\t\t\tsums[i] = sums[j];\n\t\t\t\tsums[j] = temp;\n\t\t\t\t\n\t\t\t\ttemp = indices[i];\n\t\t\t\tindices[i] = indices[j];\n\t\t\t\tindices[j] = temp;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tsorted[i] = M[indices[i]];\n\t}\n\t\n\treturn sorted;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "/tmp/tmpyyipimgm.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyyipimgm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][];\n\tlong[] sums = new long[M.length];\n\tforeach(i, row; M)\n\t{\n\t\tsums[i] = reduce!(\"a + b\")(row);\n\t}\n\tforeach(i, row; M)\n\t{\n\t\tresult[i] = M[minIndex(sums)];\n\t\tsums[minIndex(sums)] = long.max;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "/tmp/tmpc63046ih.d(9): Error: variable `M` cannot be read at compile time\n/tmp/tmpc63046ih.d(13): Error: template instance `reduce!\"a + b\"` template `reduce` is not defined\n/tmp/tmpc63046ih.d(17): Error: undefined identifier `minIndex`\n/tmp/tmpc63046ih.d(18): Error: undefined identifier `minIndex`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc63046ih.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[i].length; j++) \n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor (int j = i + 1; j < M.length; j++) \n\t\t{\n\t\t\tif (sums[j] < min) \n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\tresult[i] = M[min_index];\n\t\tsums[min_index] = sums[i];\n\t\tsums[i] = min;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "/tmp/tmpzlk9i_lj.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzlk9i_lj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] N = new long[M.length][];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++) {\n\t\tN[i] = M[i];\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[i].length; j++) {\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tfor (int i = 0; i < M.length; i++) {\n\t\tfor (int j = i + 1; j < M.length; j++) {\n\t\t\tif (sums[i] > sums[j]) {\n\t\t\t\tlong[] tmp = N[i];\n\t\t\t\tN[i] = N[j];\n\t\t\t\tN[j] = tmp;\n\t\t\t\tlong t = sums[i];\n\t\t\t\tsums[i] = sums[j];\n\t\t\t\tsums[j] = t;\n\t\t\t}\n\t\t}\n\t}\n\treturn N;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "/tmp/tmppvxmga0_.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppvxmga0_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sum = new long[M.length];\n\tfor(int i = 0; i < M.length; i++)\n\t{\n\t\tfor(int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsum[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor(int i = 0; i < M.length; i++)\n\t{\n\t\tfor(int j = 0; j < M.length; j++)\n\t\t{\n\t\t\tif(sum[i] < sum[j])\n\t\t\t{\n\t\t\t\tlong temp = sum[i];\n\t\t\t\tsum[i] = sum[j];\n\t\t\t\tsum[j] = temp;\n\t\t\t\t\n\t\t\t\tfor(int k = 0; k < M[0].length; k++)\n\t\t\t\t{\n\t\t\t\t\ttemp = M[i][k];\n\t\t\t\t\tM[i][k] = M[j][k];\n\t\t\t\t\tM[j][k] = temp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "/tmp/tmptjv_gc7c.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptjv_gc7c.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[i].length; j++) \n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tint[] sorted_indexes = new int[M.length];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tsorted_indexes[i] = i;\n\t}\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tfor (int j = i + 1; j < M.length; j++) \n\t\t{\n\t\t\tif (sums[sorted_indexes[i]] > sums[sorted_indexes[j]]) \n\t\t\t{\n\t\t\t\tint temp = sorted_indexes[i];\n\t\t\t\tsorted_indexes[i] = sorted_indexes[j];\n\t\t\t\tsorted_indexes[j] = temp;\n\t\t\t}\n\t\t}\n\t}\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tfor (int j = 0; j < M[i].length; j++) \n\t\t{\n\t\t\tresult[i][j] = M[sorted_indexes[i]][j];\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "/tmp/tmp6wwiz6_c.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6wwiz6_c.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[0].length; j++) \n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor (int j = i; j < M.length; j++) \n\t\t{\n\t\t\tif (sums[j] < min) \n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tlong[] temp = M[i];\n\t\tM[i] = M[min_index];\n\t\tM[min_index] = temp;\n\t\t\n\t\tlong temp_sum = sums[i];\n\t\tsums[i] = sums[min_index];\n\t\tsums[min_index] = temp_sum;\n\t}\n\t\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "/tmp/tmpveo4chub.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpveo4chub.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] sorted = new long[M.length][];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tsorted[i] = M[i];\n\t}\n\tfor (int i = 0; i < sorted.length; i++) \n\t{\n\t\tfor (int j = i + 1; j < sorted.length; j++) \n\t\t{\n\t\t\tif (sum(sorted[i]) > sum(sorted[j])) \n\t\t\t{\n\t\t\t\tlong[] temp = sorted[i];\n\t\t\t\tsorted[i] = sorted[j];\n\t\t\t\tsorted[j] = temp;\n\t\t\t}\n\t\t}\n\t}\n\treturn sorted;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "/tmp/tmprbgs54vr.d(9): Error: variable `M` cannot be read at compile time\n/tmp/tmprbgs54vr.d(18): Error: undefined identifier `sum`\n/tmp/tmprbgs54vr.d(18): Error: undefined identifier `sum`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprbgs54vr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tint n = M.length;\n\tint m = M[0].length;\n\tlong[] sums = new long[n];\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < m; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tfor (int j = i + 1; j < n; j++)\n\t\t{\n\t\t\tif (sums[i] > sums[j])\n\t\t\t{\n\t\t\t\tlong temp = sums[i];\n\t\t\t\tsums[i] = sums[j];\n\t\t\t\tsums[j] = temp;\n\t\t\t\t\n\t\t\t\tfor (int k = 0; k < m; k++)\n\t\t\t\t{\n\t\t\t\t\ttemp = M[i][k];\n\t\t\t\t\tM[i][k] = M[j][k];\n\t\t\t\t\tM[j][k] = temp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "/tmp/tmpzzzqfg2z.d(9): Error: cannot implicitly convert expression `M.length` of type `ulong` to `int`\n/tmp/tmpzzzqfg2z.d(10): Error: cannot implicitly convert expression `M[0].length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzzzqfg2z.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sum = new long[M.length];\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsum[i] += M[i][j];\n\t\t}\n\t}\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M.length - 1; j++)\n\t\t{\n\t\t\tif (sum[j] > sum[j + 1])\n\t\t\t{\n\t\t\t\tlong temp = sum[j];\n\t\t\t\tsum[j] = sum[j + 1];\n\t\t\t\tsum[j + 1] = temp;\n\t\t\t\tfor (int k = 0; k < M[0].length; k++)\n\t\t\t\t{\n\t\t\t\t\ttemp = M[j][k];\n\t\t\t\t\tM[j][k] = M[j + 1][k];\n\t\t\t\t\tM[j + 1][k] = temp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "/tmp/tmp0jphsufu.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0jphsufu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tint n = M.length;\n\tint m = M[0].length;\n\tlong[] sums = new long[n];\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < m; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tfor (int j = i + 1; j < n; j++)\n\t\t{\n\t\t\tif (sums[i] > sums[j])\n\t\t\t{\n\t\t\t\tlong temp = sums[i];\n\t\t\t\tsums[i] = sums[j];\n\t\t\t\tsums[j] = temp;\n\t\t\t\t\n\t\t\t\tlong[] temp_row = M[i];\n\t\t\t\tM[i] = M[j];\n\t\t\t\tM[j] = temp_row;\n\t\t\t}\n\t\t}\n\t}\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "/tmp/tmprlj_bt79.d(9): Error: cannot implicitly convert expression `M.length` of type `ulong` to `int`\n/tmp/tmprlj_bt79.d(10): Error: cannot implicitly convert expression `M[0].length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprlj_bt79.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tresult[i] = new long[M[i].length];\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[i].length; j++)\n\t\t{\n\t\t\tresult[i][j] = M[i][j];\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = i + 1; j < M.length; j++)\n\t\t{\n\t\t\tif (sums[i] > sums[j])\n\t\t\t{\n\t\t\t\tlong[] temp = result[i];\n\t\t\t\tresult[i] = result[j];\n\t\t\t\tresult[j] = temp;\n\t\t\t\tlong temp_sum = sums[i];\n\t\t\t\tsums[i] = sums[j];\n\t\t\t\tsums[j] = temp_sum;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "/tmp/tmpw5a51pts.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw5a51pts.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result;\n\tresult = new long[M.length][M[0].length];\n\tlong[] sums;\n\tsums = new long[M.length];\n\tlong[] indexes;\n\tindexes = new long[M.length];\n\t\n\tfor (long i = 0; i < M.length; i++)\n\t{\n\t\tsums[i] = 0;\n\t\tindexes[i] = i;\n\t\tfor (long j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < M.length; i++)\n\t{\n\t\tfor (long j = i + 1; j < M.length; j++)\n\t\t{\n\t\t\tif (sums[i] > sums[j])\n\t\t\t{\n\t\t\t\tlong temp = sums[i];\n\t\t\t\tsums[i] = sums[j];\n\t\t\t\tsums[j] = temp;\n\t\t\t\t\n\t\t\t\ttemp = indexes[i];\n\t\t\t\tindexes[i] = indexes[j];\n\t\t\t\tindexes[j] = temp;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < M.length; i++)\n\t{\n\t\tfor (long j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tresult[i][j] = M[indexes[i]][j];\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "/tmp/tmp1915avrm.d(10): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1915avrm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tint n = M.length;\n\tint m = M[0].length;\n\tint[] sum = new int[n];\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tfor (int j = 0; j < m; j++) \n\t\t{\n\t\t\tsum[i] += M[i][j];\n\t\t}\n\t}\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tfor (int j = i + 1; j < n; j++) \n\t\t{\n\t\t\tif (sum[i] > sum[j]) \n\t\t\t{\n\t\t\t\tint temp = sum[i];\n\t\t\t\tsum[i] = sum[j];\n\t\t\t\tsum[j] = temp;\n\t\t\t\tlong[] t = M[i];\n\t\t\t\tM[i] = M[j];\n\t\t\t\tM[j] = t;\n\t\t\t}\n\t\t}\n\t}\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "/tmp/tmp46j3zp94.d(9): Error: cannot implicitly convert expression `M.length` of type `ulong` to `int`\n/tmp/tmp46j3zp94.d(10): Error: cannot implicitly convert expression `M[0].length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp46j3zp94.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tint min = i;\n\t\tfor (int j = i + 1; j < M.length; j++)\n\t\t{\n\t\t\tif (sums[j] < sums[min])\n\t\t\t{\n\t\t\t\tmin = j;\n\t\t\t}\n\t\t}\n\t\tif (min != i)\n\t\t{\n\t\t\tlong temp = sums[i];\n\t\t\tsums[i] = sums[min];\n\t\t\tsums[min] = temp;\n\t\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t\t{\n\t\t\t\ttemp = M[i][j];\n\t\t\t\tM[i][j] = M[min][j];\n\t\t\t\tM[min][j] = temp;\n\t\t\t}\n\t\t}\n\t}\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1665517550,
      "stdout": "",
      "stderr": "/tmp/tmpk5z8ulms.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk5z8ulms.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] sorted_matrix = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tlong[] indices = new long[M.length];\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t\tindices[i] = i;\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = i + 1; j < M.length; j++)\n\t\t{\n\t\t\tif (sums[i] > sums[j])\n\t\t\t{\n\t\t\t\tlong temp = sums[i];\n\t\t\t\tsums[i] = sums[j];\n\t\t\t\tsums[j] = temp;\n\t\t\t\t\n\t\t\t\ttemp = indices[i];\n\t\t\t\tindices[i] = indices[j];\n\t\t\t\tindices[j] = temp;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsorted_matrix[i][j] = M[indices[i]][j];\n\t\t}\n\t}\n\t\n\treturn sorted_matrix;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "/tmp/tmp6pzgge5c.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6pzgge5c.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][];\n\tlong[] sums = new long[M.length];\n\t\n\tfor(int i = 0; i < M.length; i++)\n\t{\n\t\tresult[i] = new long[M[i].length];\n\t\tsums[i] = 0;\n\t\tfor(int j = 0; j < M[i].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor(int i = 0; i < M.length; i++)\n\t{\n\t\tfor(int j = 0; j < M.length; j++)\n\t\t{\n\t\t\tif(sums[i] < sums[j])\n\t\t\t{\n\t\t\t\tlong temp = sums[i];\n\t\t\t\tsums[i] = sums[j];\n\t\t\t\tsums[j] = temp;\n\t\t\t\t\n\t\t\t\tlong[] temp2 = result[i];\n\t\t\t\tresult[i] = result[j];\n\t\t\t\tresult[j] = temp2;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor(int i = 0; i < M.length; i++)\n\t{\n\t\tfor(int j = 0; j < M[i].length; j++)\n\t\t{\n\t\t\tresult[i][j] = M[i][j];\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "/tmp/tmp7pd_y555.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7pd_y555.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][];\n\tlong[] sums = new long[M.length];\n\t\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tresult[i] = new long[M[i].length];\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[i].length; j++) \n\t\t{\n\t\t\tresult[i][j] = M[i][j];\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tfor (int j = i + 1; j < M.length; j++) \n\t\t{\n\t\t\tif (sums[i] > sums[j]) \n\t\t\t{\n\t\t\t\tlong[] tmp = result[i];\n\t\t\t\tresult[i] = result[j];\n\t\t\t\tresult[j] = tmp;\n\t\t\t\t\n\t\t\t\tlong t = sums[i];\n\t\t\t\tsums[i] = sums[j];\n\t\t\t\tsums[j] = t;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "/tmp/tmp4jyog95c.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4jyog95c.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tint n = M.length;\n\tint m = M[0].length;\n\t\n\tlong[][] res = new long[n][m];\n\t\n\tlong[] sums = new long[n];\n\t\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tfor (int j = 0; j < m; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tfor (int j = i + 1; j < n; j++)\n\t\t{\n\t\t\tif (sums[i] > sums[j])\n\t\t\t{\n\t\t\t\tlong tmp = sums[i];\n\t\t\t\tsums[i] = sums[j];\n\t\t\t\tsums[j] = tmp;\n\t\t\t\t\n\t\t\t\tlong[] tmp_row = M[i];\n\t\t\t\tM[i] = M[j];\n\t\t\t\tM[j] = tmp_row;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "/tmp/tmpd00h63dh.d(9): Error: cannot implicitly convert expression `M.length` of type `ulong` to `int`\n/tmp/tmpd00h63dh.d(10): Error: cannot implicitly convert expression `M[0].length` of type `ulong` to `int`\n/tmp/tmpd00h63dh.d(12): Error: variable `n` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd00h63dh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] N = new long[M.length][];\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tN[i] = new long[M[i].length];\n\t\tfor (int j = 0; j < M[i].length; j++)\n\t\t{\n\t\t\tN[i][j] = M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < N.length; i++)\n\t{\n\t\tfor (int j = 0; j < N.length - 1; j++)\n\t\t{\n\t\t\tif (sum(N[j]) > sum(N[j + 1]))\n\t\t\t{\n\t\t\t\tlong[] temp = N[j];\n\t\t\t\tN[j] = N[j + 1];\n\t\t\t\tN[j + 1] = temp;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn N;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "/tmp/tmp4v4ozs03.d(9): Error: variable `M` cannot be read at compile time\n/tmp/tmp4v4ozs03.d(23): Error: undefined identifier `sum`\n/tmp/tmp4v4ozs03.d(23): Error: undefined identifier `sum`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4v4ozs03.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tint n = M.length;\n\tint m = M[0].length;\n\t\n\tlong[] sums = new long[n];\n\t\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < m; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tfor (int j = i + 1; j < n; j++)\n\t\t{\n\t\t\tif (sums[i] > sums[j])\n\t\t\t{\n\t\t\t\tlong temp = sums[i];\n\t\t\t\tsums[i] = sums[j];\n\t\t\t\tsums[j] = temp;\n\t\t\t\t\n\t\t\t\tlong[] temp_row = M[i];\n\t\t\t\tM[i] = M[j];\n\t\t\t\tM[j] = temp_row;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "/tmp/tmpiq63tm7_.d(9): Error: cannot implicitly convert expression `M.length` of type `ulong` to `int`\n/tmp/tmpiq63tm7_.d(10): Error: cannot implicitly convert expression `M[0].length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiq63tm7_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][];\n\tlong[] sums = new long[M.length];\n\t\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[i].length; j++) \n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor (int j = i; j < M.length; j++) \n\t\t{\n\t\t\tif (sums[j] < min) \n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tswap(sums[i], sums[min_index]);\n\t\tresult[i] = M[min_index];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "/tmp/tmpwaq9645e.d(9): Error: variable `M` cannot be read at compile time\n/tmp/tmpwaq9645e.d(34): Error: undefined identifier `swap`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwaq9645e.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] sorted_matrix = new long[M.length][];\n\t\n\tfor(int i = 0; i < M.length; i++)\n\t{\n\t\tsorted_matrix[i] = new long[M[i].length];\n\t\tfor(int j = 0; j < M[i].length; j++)\n\t\t{\n\t\t\tsorted_matrix[i][j] = M[i][j];\n\t\t}\n\t}\n\t\n\tfor(int i = 0; i < sorted_matrix.length; i++)\n\t{\n\t\tfor(int j = 0; j < sorted_matrix.length - 1; j++)\n\t\t{\n\t\t\tif(sum(sorted_matrix[j]) > sum(sorted_matrix[j + 1]))\n\t\t\t{\n\t\t\t\tlong[] temp = sorted_matrix[j];\n\t\t\t\tsorted_matrix[j] = sorted_matrix[j + 1];\n\t\t\t\tsorted_matrix[j + 1] = temp;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn sorted_matrix;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "/tmp/tmp1_zlg_tw.d(9): Error: variable `M` cannot be read at compile time\n/tmp/tmp1_zlg_tw.d(24): Error: undefined identifier `sum`\n/tmp/tmp1_zlg_tw.d(24): Error: undefined identifier `sum`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1_zlg_tw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] sorted = new long[M.length][];\n\tfor(int i = 0; i < M.length; i++)\n\t\tsorted[i] = M[i];\n\t\n\tfor(int i = 0; i < sorted.length; i++)\n\t{\n\t\tfor(int j = 0; j < sorted.length - 1; j++)\n\t\t{\n\t\t\tif(sum(sorted[j]) > sum(sorted[j+1]))\n\t\t\t{\n\t\t\t\tlong[] temp = sorted[j];\n\t\t\t\tsorted[j] = sorted[j+1];\n\t\t\t\tsorted[j+1] = temp;\n\t\t\t}\n\t\t}\n\t}\n\treturn sorted;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "/tmp/tmp3xtf9c65.d(9): Error: variable `M` cannot be read at compile time\n/tmp/tmp3xtf9c65.d(17): Error: undefined identifier `sum`\n/tmp/tmp3xtf9c65.d(17): Error: undefined identifier `sum`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3xtf9c65.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\t\n\tfor(int i = 0; i < M.length; i++)\n\t{\n\t\tfor(int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor(int i = 0; i < M.length; i++)\n\t{\n\t\tfor(int j = 0; j < M.length; j++)\n\t\t{\n\t\t\tif(sums[i] < sums[j])\n\t\t\t{\n\t\t\t\tlong temp = sums[i];\n\t\t\t\tsums[i] = sums[j];\n\t\t\t\tsums[j] = temp;\n\t\t\t\t\n\t\t\t\tlong[] temp_row = M[i];\n\t\t\t\tM[i] = M[j];\n\t\t\t\tM[j] = temp_row;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "/tmp/tmply9rihsj.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmply9rihsj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[] sums = new long[M.length];\n\tforeach(i, row; M)\n\t{\n\t\tsums[i] = reduce!\"a + b\"(row);\n\t}\n\t\n\tlong[][] sorted = new long[M.length][M[0].length];\n\tforeach(i, row; M)\n\t{\n\t\tsorted[i] = row;\n\t}\n\t\n\tforeach(i, j; 0 .. M.length)\n\t{\n\t\tforeach(k, l; 0 .. M.length)\n\t\t{\n\t\t\tif(sums[i] < sums[k])\n\t\t\t{\n\t\t\t\tlong temp = sums[i];\n\t\t\t\tsums[i] = sums[k];\n\t\t\t\tsums[k] = temp;\n\t\t\t\t\n\t\t\t\tlong[] temp2 = sorted[i];\n\t\t\t\tsorted[i] = sorted[k];\n\t\t\t\tsorted[k] = temp2;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn sorted;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "/tmp/tmpprsfcfkd.d(21): Error: found `..` when expecting `)`\n/tmp/tmpprsfcfkd.d(21): Error: found `)` when expecting `;` following statement\n/tmp/tmpprsfcfkd.d(23): Error: found `..` when expecting `)`\n/tmp/tmpprsfcfkd.d(23): Error: found `)` when expecting `;` following statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpprsfcfkd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] sorted = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tfor (int j = 0; j < M[i].length; j++) \n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tint[] indices = new int[M.length];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tindices[i] = i;\n\t}\n\tsort(sums, indices);\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tsorted[i] = M[indices[i]];\n\t}\n\treturn sorted;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "/tmp/tmp5va5kbas.d(9): Error: variable `M` cannot be read at compile time\n/tmp/tmp5va5kbas.d(23): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5va5kbas.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result;\n\tlong[] sums;\n\tlong[] sorted_sums;\n\tlong[] sorted_indices;\n\tlong[] sorted_M;\n\tlong i;\n\tlong j;\n\tlong k;\n\tlong l;\n\tlong m;\n\tlong n;\n\tlong temp;\n\t\n\tresult = new long[M.length][M[0].length];\n\tsums = new long[M.length];\n\tsorted_sums = new long[M.length];\n\tsorted_indices = new long[M.length];\n\tsorted_M = new long[M.length * M[0].length];\n\t\n\tfor (i = 0; i < M.length; i++)\n\t{\n\t\tsums[i] = 0;\n\t\tfor (j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (i = 0; i < M.length; i++)\n\t{\n\t\tsorted_sums[i] = sums[i];\n\t\tsorted_indices[i] = i;\n\t}\n\t\n\tfor (i = 0; i < M.length; i++)\n\t{\n\t\tfor (j = i; j < M.length; j++)\n\t\t{\n\t\t\tif (sorted_sums[i] > sorted_sums[j])\n\t\t\t{\n\t\t\t\ttemp = sorted_sums[i];\n\t\t\t\tsorted_sums[i] = sorted_sums[j];\n\t\t\t\tsorted_sums[j] = temp;\n\t\t\t\t\n\t\t\t\ttemp = sorted_indices[i];\n\t\t\t\tsorted_indices[i] = sorted_indices[j];\n\t\t\t\tsorted_indices[j] = temp;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor (i = 0; i < M.length; i++)\n\t{\n\t\tfor (j = 0; j < M[\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "/tmp/tmpcs1ay9mu.d(63): Error: expression expected, not `unittest`\n/tmp/tmpcs1ay9mu.d(64): Error: found `{` when expecting `,`\n/tmp/tmpcs1ay9mu.d(65): Error: expression expected, not `alias`\n/tmp/tmpcs1ay9mu.d(65): Error: found `candidate` when expecting `,`\n/tmp/tmpcs1ay9mu.d(65): Error: expression expected, not `=`\n/tmp/tmpcs1ay9mu.d(65): Error: found `sort_matrix` when expecting `,`\n/tmp/tmpcs1ay9mu.d(65): Error: expression expected, not `;`\n/tmp/tmpcs1ay9mu.d(67): Error: found `assert` when expecting `,`\n/tmp/tmpcs1ay9mu.d(67): Error: found `;` when expecting `,`\n/tmp/tmpcs1ay9mu.d(68): Error: found `;` when expecting `,`\n/tmp/tmpcs1ay9mu.d(69): Error: found `;` when expecting `,`\n/tmp/tmpcs1ay9mu.d(70): Error: expression expected, not `}`\n/tmp/tmpcs1ay9mu.d(71): Error: found `void` when expecting `,`\n/tmp/tmpcs1ay9mu.d(71): Error: found `{` when expecting `,`\n/tmp/tmpcs1ay9mu.d(71): Error: expression expected, not `}`\n/tmp/tmpcs1ay9mu.d(71): Error: found `End of File` when expecting `,`\n/tmp/tmpcs1ay9mu.",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[i].length; j++) \n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor (int j = i + 1; j < M.length; j++) \n\t\t{\n\t\t\tif (sums[j] < min) \n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\tif (min_index != i) \n\t\t{\n\t\t\tlong[] temp = M[i];\n\t\t\tM[i] = M[min_index];\n\t\t\tM[min_index] = temp;\n\t\t\tlong temp_sum = sums[i];\n\t\t\tsums[i] = sums[min_index];\n\t\t\tsums[min_index] = temp_sum;\n\t\t}\n\t}\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "/tmp/tmpnmn0meu3.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnmn0meu3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor (int j = i; j < M.length; j++)\n\t\t{\n\t\t\tif (sums[j] < min)\n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tlong temp = sums[i];\n\t\tsums[i] = sums[min_index];\n\t\tsums[min_index] = temp;\n\t\t\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tlong temp2 = M[i][j];\n\t\t\tM[i][j] = M[min_index][j];\n\t\t\tM[min_index][j] = temp2;\n\t\t}\n\t}\n\t\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "/tmp/tmpr_thp521.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr_thp521.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] sorted_matrix = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\t\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tfor (int j = 0; j < M[0].length; j++) \n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\t\n\t\tfor (int j = i; j < M.length; j++) \n\t\t{\n\t\t\tif (sums[j] < min) \n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tsums[min_index] = sums[i];\n\t\tsums[i] = min;\n\t\t\n\t\tfor (int j = 0; j < M[0].length; j++) \n\t\t{\n\t\t\tsorted_matrix[i][j] = M[min_index][j];\n\t\t}\n\t}\n\t\n\treturn sorted_matrix;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "/tmp/tmpdtgz462i.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdtgz462i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] N = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M[i].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor (int j = i; j < M.length; j++)\n\t\t{\n\t\t\tif (sums[j] < min)\n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tlong[] temp = M[i];\n\t\tM[i] = M[min_index];\n\t\tM[min_index] = temp;\n\t\t\n\t\tlong temp_sum = sums[i];\n\t\tsums[i] = sums[min_index];\n\t\tsums[min_index] = temp_sum;\n\t}\n\t\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "/tmp/tmp77h7nd4u.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp77h7nd4u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M.length; j++)\n\t\t{\n\t\t\tif (sums[i] < sums[j])\n\t\t\t{\n\t\t\t\tlong temp = sums[i];\n\t\t\t\tsums[i] = sums[j];\n\t\t\t\tsums[j] = temp;\n\t\t\t\tfor (int k = 0; k < M[0].length; k++)\n\t\t\t\t{\n\t\t\t\t\ttemp = M[i][k];\n\t\t\t\t\tM[i][k] = M[j][k];\n\t\t\t\t\tM[j][k] = temp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "/tmp/tmpxg6le2tu.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxg6le2tu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[i].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tint[] sorted_indices = new int[M.length];\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tsorted_indices[i] = i;\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = i + 1; j < M.length; j++)\n\t\t{\n\t\t\tif (sums[sorted_indices[i]] > sums[sorted_indices[j]])\n\t\t\t{\n\t\t\t\tint temp = sorted_indices[i];\n\t\t\t\tsorted_indices[i] = sorted_indices[j];\n\t\t\t\tsorted_indices[j] = temp;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tresult[i] = M[sorted_indices[i]];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "/tmp/tmps21oruzz.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps21oruzz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[i].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M.length; j++)\n\t\t{\n\t\t\tif (sums[i] < sums[j])\n\t\t\t{\n\t\t\t\tlong temp = sums[i];\n\t\t\t\tsums[i] = sums[j];\n\t\t\t\tsums[j] = temp;\n\t\t\t\t\n\t\t\t\tlong[] temp2 = M[i];\n\t\t\t\tM[i] = M[j];\n\t\t\t\tM[j] = temp2;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[i].length; j++) \n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor (int j = i + 1; j < M.length; j++) \n\t\t{\n\t\t\tif (sums[j] < min) \n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\tif (min_index != i) \n\t\t{\n\t\t\tlong[] temp = M[i];\n\t\t\tM[i] = M[min_index];\n\t\t\tM[min_index] = temp;\n\t\t\tlong temp_sum = sums[i];\n\t\t\tsums[i] = sums[min_index];\n\t\t\tsums[min_index] = temp_sum;\n\t\t}\n\t\tresult[i] = M[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "/tmp/tmpz6zl_b1o.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz6zl_b1o.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tint n = M.length;\n\tint m = M[0].length;\n\t\n\tint[] sums = new int[n];\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tfor (int j = 0; j < m; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tfor (int j = i + 1; j < n; j++)\n\t\t{\n\t\t\tif (sums[i] > sums[j])\n\t\t\t{\n\t\t\t\tint temp = sums[i];\n\t\t\t\tsums[i] = sums[j];\n\t\t\t\tsums[j] = temp;\n\t\t\t\t\n\t\t\t\tlong[] temp_row = M[i];\n\t\t\t\tM[i] = M[j];\n\t\t\t\tM[j] = temp_row;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "/tmp/tmplr05efr7.d(9): Error: cannot implicitly convert expression `M.length` of type `ulong` to `int`\n/tmp/tmplr05efr7.d(10): Error: cannot implicitly convert expression `M[0].length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplr05efr7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tint[] sorted_indices = sort(sums);\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tresult[i][j] = M[sorted_indices[i]][j];\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "/tmp/tmphc8ew_ff.d(9): Error: variable `M` cannot be read at compile time\n/tmp/tmphc8ew_ff.d(20): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphc8ew_ff.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\t\n\tfor(int i = 0; i < M.length; i++)\n\t{\n\t\tfor(int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor(int i = 0; i < M.length; i++)\n\t{\n\t\tfor(int j = 0; j < M.length; j++)\n\t\t{\n\t\t\tif(sums[i] < sums[j])\n\t\t\t{\n\t\t\t\tlong temp = sums[i];\n\t\t\t\tsums[i] = sums[j];\n\t\t\t\tsums[j] = temp;\n\t\t\t\t\n\t\t\t\tlong[] temp_array = M[i];\n\t\t\t\tM[i] = M[j];\n\t\t\t\tM[j] = temp_array;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "/tmp/tmp1w1n7u6z.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1w1n7u6z.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] N = new long[M.length][];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tN[i] = M[i].dup;\n\t}\n\t\n\tfor (int i = 0; i < N.length; i++) \n\t{\n\t\tfor (int j = 0; j < N.length - 1; j++) \n\t\t{\n\t\t\tif (sum(N[j]) > sum(N[j + 1])) \n\t\t\t{\n\t\t\t\tlong[] tmp = N[j];\n\t\t\t\tN[j] = N[j + 1];\n\t\t\t\tN[j + 1] = tmp;\n\t\t\t}\n\t\t}\n\t}\n\treturn N;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "/tmp/tmplkzd3nax.d(9): Error: variable `M` cannot be read at compile time\n/tmp/tmplkzd3nax.d(19): Error: undefined identifier `sum`\n/tmp/tmplkzd3nax.d(19): Error: undefined identifier `sum`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplkzd3nax.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] sorted = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor (int j = i; j < M.length; j++)\n\t\t{\n\t\t\tif (sums[j] < min)\n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tsums[min_index] = sums[i];\n\t\tsums[i] = min;\n\t\t\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsorted[i][j] = M[min_index][j];\n\t\t}\n\t}\n\t\n\treturn sorted;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123497,
      "stdout": "",
      "stderr": "/tmp/tmpi9wwxu9a.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi9wwxu9a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++) {\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[i].length; j++) {\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tlong[] sorted_sums = sums.dup;\n\tsort(sorted_sums);\n\t\n\tfor (int i = 0; i < M.length; i++) {\n\t\tfor (int j = 0; j < M.length; j++) {\n\t\t\tif (sums[i] == sorted_sums[j]) {\n\t\t\t\tresult[j] = M[i];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "/tmp/tmpkeerf_hk.d(9): Error: variable `M` cannot be read at compile time\n/tmp/tmpkeerf_hk.d(19): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkeerf_hk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tfor (int j = 0; j < M[0].length; j++) \n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\tint[] sorted_indices = sort(sums);\n\tfor (int i = 0; i < M.length; i++) \n\t{\n\t\tfor (int j = 0; j < M[0].length; j++) \n\t\t{\n\t\t\tresult[i][j] = M[sorted_indices[i]][j];\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "/tmp/tmppl4gmzxf.d(9): Error: variable `M` cannot be read at compile time\n/tmp/tmppl4gmzxf.d(18): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppl4gmzxf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\tfor(int i = 0; i < M.length; i++)\n\t{\n\t\tfor(int j = 0; j < M[i].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor(int i = 0; i < M.length; i++)\n\t{\n\t\tlong min = sums[i];\n\t\tint min_index = i;\n\t\tfor(int j = i; j < M.length; j++)\n\t\t{\n\t\t\tif(sums[j] < min)\n\t\t\t{\n\t\t\t\tmin = sums[j];\n\t\t\t\tmin_index = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tlong[] temp = M[i];\n\t\tM[i] = M[min_index];\n\t\tM[min_index] = temp;\n\t\t\n\t\tlong temp_sum = sums[i];\n\t\tsums[i] = sums[min_index];\n\t\tsums[min_index] = temp_sum;\n\t}\n\t\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "/tmp/tmpsbz39fjr.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsbz39fjr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tint[] sums = new int[M.length];\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < M[i].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = i + 1; j < M.length; j++)\n\t\t{\n\t\t\tif (sums[i] > sums[j])\n\t\t\t{\n\t\t\t\tint temp = sums[i];\n\t\t\t\tsums[i] = sums[j];\n\t\t\t\tsums[j] = temp;\n\t\t\t\tlong[] temp2 = M[i];\n\t\t\t\tM[i] = M[j];\n\t\t\t\tM[j] = temp2;\n\t\t\t}\n\t\t}\n\t}\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tint n = M.length;\n\tint m = M[0].length;\n\t\n\tint[] sums = new int[n];\n\t\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tsums[i] = 0;\n\t\tfor (int j = 0; j < m; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tfor (int j = i + 1; j < n; j++)\n\t\t{\n\t\t\tif (sums[i] > sums[j])\n\t\t\t{\n\t\t\t\tint temp = sums[i];\n\t\t\t\tsums[i] = sums[j];\n\t\t\t\tsums[j] = temp;\n\t\t\t\t\n\t\t\t\tlong[] temp_row = M[i];\n\t\t\t\tM[i] = M[j];\n\t\t\t\tM[j] = temp_row;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "/tmp/tmp87iukl8w.d(9): Error: cannot implicitly convert expression `M.length` of type `ulong` to `int`\n/tmp/tmp87iukl8w.d(10): Error: cannot implicitly convert expression `M[0].length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp87iukl8w.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result = new long[M.length][M[0].length];\n\tlong[] sums = new long[M.length];\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < M.length; i++)\n\t{\n\t\tfor (int j = 0; j < M.length; j++)\n\t\t{\n\t\t\tif (sums[i] < sums[j])\n\t\t\t{\n\t\t\t\tlong temp = sums[i];\n\t\t\t\tsums[i] = sums[j];\n\t\t\t\tsums[j] = temp;\n\t\t\t\t\n\t\t\t\tfor (int k = 0; k < M[0].length; k++)\n\t\t\t\t{\n\t\t\t\t\ttemp = M[i][k];\n\t\t\t\t\tM[i][k] = M[j][k];\n\t\t\t\t\tM[j][k] = temp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn M;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "/tmp/tmpxjuheneb.d(9): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxjuheneb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\n*/\nlong[][] sort_matrix(long[][] M) \n{\n\tlong[][] result;\n\tlong[] sums;\n\tint i, j, k;\n\t\n\tsums = new long[M.length];\n\tresult = new long[M.length][M[0].length];\n\t\n\tfor (i = 0; i < M.length; i++)\n\t{\n\t\tsums[i] = 0;\n\t\tfor (j = 0; j < M[0].length; j++)\n\t\t{\n\t\t\tsums[i] += M[i][j];\n\t\t}\n\t}\n\t\n\tfor (i = 0; i < M.length; i++)\n\t{\n\t\tfor (j = 0; j < M.length - 1; j++)\n\t\t{\n\t\t\tif (sums[j] > sums[j + 1])\n\t\t\t{\n\t\t\t\tfor (k = 0; k < M[0].length; k++)\n\t\t\t\t{\n\t\t\t\t\tresult[j][k] = M[j + 1][k];\n\t\t\t\t\tresult[j + 1][k] = M[j][k];\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tsums[j] = sums[j] + sums[j + 1];\n\t\t\t\tsums[j + 1] = sums[j] - sums[j + 1];\n\t\t\t\tsums[j] = sums[j] - sums[j + 1];\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "/tmp/tmp37vw056p.d(14): Error: variable `M` cannot be read at compile time\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp37vw056p.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}