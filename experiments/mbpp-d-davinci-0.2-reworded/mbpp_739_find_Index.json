{
  "name": "mbpp_739_find_Index",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n\t\n*/\nlong find_Index(long n) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_739_find_Index.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = find_Index;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 14L);\n    assert(candidate(4L) == 45L);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{ \n\t// Initialize low and high for binary search \n\tlong low = 1, high = n * (n + 1) / 2; \n\tlong ans = 0; \n\t\n\t// Do binary search to find index \n\twhile (low <= high) \n\t{ \n\t\tlong mid = (low + high) / 2; \n\t\t\n\t\t// If number of digits in mid is equal to n, \n\t\t// then return mid. \n\t\tif (floor(log10(mid * (mid + 1) / 2)) + 1 == n) \n\t\t{ \n\t\t\tans = mid; \n\t\t\thigh = mid - 1; \n\t\t} \n\t\t\n\t\t// If number of digits in mid is less than n, \n\t\t// then search in right half \n\t\telse if (floor(log10(mid * (mid + 1) / 2)) + 1 < n) \n\t\t\tlow = mid + 1; \n\t\t\n\t\t// If number of digits in mid is more than n, \n\t\t// then search in left half \n\t\telse\n\t\t\thigh = mid - 1; \n\t} \n\t\n\treturn ans; \n} ",
    "{ \n\tlong i = 1; \n\tlong j = 1; \n\tlong count = 0; \n\twhile (count < n) \n\t{ \n\t\tj = j + 1; \n\t\tcount = count + (int)log10(j) + 1; \n\t\ti = i + 1; \n\t} \n\treturn i; \n} ",
    "{ \n    long low = 1, high = n; \n    long mid = 0; \n    long ans = 0; \n  \n    while (low <= high) { \n        mid = (low + high) / 2; \n  \n        if (mid * (mid + 1) / 2 >= n) { \n            ans = mid; \n            high = mid - 1; \n        } \n        else { \n            low = mid + 1; \n        } \n    } \n  \n    return ans; \n} ",
    "{ \n    long low = 1, high = 1000000; \n    long mid, ans = 0; \n    while (low <= high) \n    { \n        mid = (low + high) / 2; \n        long tri = (mid * (mid + 1)) / 2; \n        if (tri < n) \n        { \n            ans = mid; \n            low = mid + 1; \n        } \n        else\n            high = mid - 1; \n    } \n    return ans; \n} ",
    "{ \n\t// Base case \n\tif (n <= 0) \n\t\treturn 0; \n\t\n\t// A triangular number must be of the form n(n+1)/2. \n\t// The value of n must be greater than or equal to \n\t// the number of digits in n(n+1)/2. \n\t// So, we can use binary search to find the value of n. \n\tlong low = 1, high = 2 * n; \n\twhile (low < high) \n\t{ \n\t\tlong mid = (low + high) / 2; \n\t\tlong temp = mid * (mid + 1) / 2; \n\t\tif (temp >= n) \n\t\t\thigh = mid; \n\t\telse\n\t\t\tlow = mid + 1; \n\t} \n\treturn low; \n} ",
    "{ \n\tlong low = 1, high = 1000000, mid; \n\tlong ans = 0; \n\twhile (low <= high) \n\t{ \n\t\tmid = (low + high) / 2; \n\t\tlong tri = (mid * (mid + 1)) / 2; \n\t\tif (tri >= n) \n\t\t{ \n\t\t\tans = mid; \n\t\t\thigh = mid - 1; \n\t\t} \n\t\telse\n\t\t\tlow = mid + 1; \n\t} \n\treturn ans; \n} ",
    "{ \n\tlong low = 1, high = n; \n\tlong mid = 0; \n\tlong ans = 0; \n\twhile (low <= high) { \n\t\tmid = (low + high) / 2; \n\t\tif ((mid * (mid + 1)) / 2 < (long)pow(10, n - 1)) { \n\t\t\tlow = mid + 1; \n\t\t\tans = mid; \n\t\t} \n\t\telse\n\t\t\thigh = mid - 1; \n\t} \n\treturn ans; \n} ",
    "{ \n\t// base case \n\tif (n <= 0) \n\t\treturn 0; ",
    "{ \n\t// Initialize low and high for binary search \n\tlong low = 1, high = n; \n\t\n\t// loop till low is less than high \n\twhile (low < high) \n\t{ \n\t\t// Find the mid value \n\t\tlong mid = (low + high) / 2; \n\t\t\n\t\t// if mid*(mid+1)/2 has n digits, \n\t\t// then search in left half \n\t\tif (floor(log10(mid * (mid + 1) / 2)) + 1 == n) \n\t\t\thigh = mid; \n\t\t\n\t\t// else search in right half \n\t\telse\n\t\t\tlow = mid + 1; \n\t} \n\t\n\t// return low as index \n\treturn low; \n} ",
    "{ \n\t// Initialize low and high for binary search \n\tlong low = 1, high = n; \n\t\n\t// loop untill low is less than or equal to high \n\twhile (low <= high) \n\t{ \n\t\t// Find the mid value \n\t\tlong mid = (low + high) / 2; \n\t\t\n\t\t// If mid is triangular number with n digits \n\t\tif (mid * (mid + 1) / 2 == n) \n\t\t\treturn mid; \n\t\t\n\t\t// If mid is more than n, then search in left half \n\t\telse if (mid * (mid + 1) / 2 > n) \n\t\t\thigh = mid - 1; \n\t\t\n\t\t// If mid is less than n, then search in right half \n\t\telse\n\t\t\tlow = mid + 1; \n\t} \n\t\n\t// If no triangular number is present \n\treturn -1; \n} ",
    "{ \n\t// Base cases \n\tif (n <= 0) \n\t\treturn 0; \n\tif (n == 1) \n\t\treturn 1; \n\t\n\t// A temporary array to store triangular numbers \n\tlong[] dp = new long[n + 1]; \n\t\n\t// Initialize first two values in table \n\tdp[0] = 0; \n\tdp[1] = 1; \n\t\n\t// Fill entries in dp[] using recursive formula \n\tfor (long i = 2; i <= n; i++) \n\t\tdp[i] = dp[i - 1] + i; \n\t\n\t// Now find the index of largest triangular number \n\t// with n digits. \n\tlong index = 0; \n\tfor (long i = 1; i <= n; i++) \n\t{ \n\t\tif (dp[i] >= pow(10, n - 1)) \n\t\t{ \n\t\t\tindex = i; \n\t\t\tbreak; \n\t\t} \n\t} \n\t\n\treturn index; \n} ",
    "{ \n\tlong low = 1, high = 1000000; \n\tlong ans = 0; \n\twhile (low <= high) \n\t{ \n\t\tlong mid = (low + high) / 2; \n\t\tlong triangle = (mid * (mid + 1)) / 2; \n\t\tif (triangle >= n) \n\t\t{ \n\t\t\tans = mid; \n\t\t\thigh = mid - 1; \n\t\t} \n\t\telse\n\t\t\tlow = mid + 1; \n\t} \n\treturn ans; \n} ",
    "{ \n\tlong low = 1, high = n; \n\tlong mid = 0; \n\tlong ans = 0; \n\twhile (low <= high) \n\t{ \n\t\tmid = (low + high) / 2; \n\t\tif (mid * (mid + 1) / 2 >= n) \n\t\t{ \n\t\t\tans = mid; \n\t\t\thigh = mid - 1; \n\t\t} \n\t\telse\n\t\t\tlow = mid + 1; \n\t} \n\treturn ans; \n} ",
    "{ \n    long count = 0; \n    long triangularNumber = 0; \n    while (count * (count + 1) / 2 < n) { \n        count++; \n    } \n    return count; \n} ",
    "{ \n\t// Base case \n\tif (n <= 0) \n\t\treturn 0; ",
    "{ \n\tlong i = 1; \n\tlong triangularNumber = 0; \n\twhile (true) \n\t{ \n\t\ttriangularNumber = (i * (i + 1)) / 2; \n\t\tif (triangularNumber % 10 == 0) \n\t\t{ \n\t\t\tif (triangularNumber.toString().length() == n) \n\t\t\t\treturn i; \n\t\t} \n\t\ti++; \n\t} \n} ",
    "{ \n\tlong count = 0; \n\tlong i = 1; \n\twhile (count < n) \n\t{ \n\t\tlong t = (i * (i + 1)) / 2; \n\t\tlong digits = (long)log10(t) + 1; \n\t\tif (digits == n) \n\t\t\treturn i; \n\t\ti++; \n\t} \n\treturn -1; \n} ",
    "{ \n\t// Base case \n\tif (n <= 0) \n\t\treturn 0; ",
    "{ \n\t// Base cases \n\tif (n <= 0) \n\t\treturn 0; \n\tif (n == 1) \n\t\treturn 1; ",
    "{ \n\t// Base cases \n\tif (n <= 0) \n\t\treturn 0; \n\tif (n == 1) \n\t\treturn 1; "
  ]
}