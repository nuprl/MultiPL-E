{
  "name": "mbpp_739_find_Index",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n\t\n*/\nlong find_Index(long n) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_739_find_Index.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = find_Index;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 14L);\n    assert(candidate(4L) == 45L);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{ \n\t// Initialize low and high for binary search \n\tlong low = 1, high = n * (n + 1) / 2; \n\tlong ans = 0; \n\t\n\t// Do binary search to find index \n\twhile (low <= high) \n\t{ \n\t\tlong mid = (low + high) / 2; \n\t\t\n\t\t// If number of digits in mid is equal to n, \n\t\t// then return mid. \n\t\tif (floor(log10(mid * (mid + 1) / 2)) + 1 == n) \n\t\t{ \n\t\t\tans = mid; \n\t\t\thigh = mid - 1; \n\t\t} \n\t\t\n\t\t// If number of digits in mid is less than n, \n\t\t// then search in right half \n\t\telse if (floor(log10(mid * (mid + 1) / 2)) + 1 < n) \n\t\t\tlow = mid + 1; \n\t\t\n\t\t// If number of digits in mid is more than n, \n\t\t// then search in left half \n\t\telse\n\t\t\thigh = mid - 1; \n\t} \n\t\n\treturn ans; \n} ",
    "{ \n\tlong i = 1; \n\tlong j = 1; \n\tlong count = 0; \n\twhile (count < n) \n\t{ \n\t\tj = j + 1; \n\t\tcount = count + (int)log10(j) + 1; \n\t\ti = i + 1; \n\t} \n\treturn i; \n} ",
    "{ \n    long low = 1, high = n; \n    long mid = 0; \n    long ans = 0; \n  \n    while (low <= high) { \n        mid = (low + high) / 2; \n  \n        if (mid * (mid + 1) / 2 >= n) { \n            ans = mid; \n            high = mid - 1; \n        } \n        else { \n            low = mid + 1; \n        } \n    } \n  \n    return ans; \n} ",
    "{ \n    long low = 1, high = 1000000; \n    long mid, ans = 0; \n    while (low <= high) \n    { \n        mid = (low + high) / 2; \n        long tri = (mid * (mid + 1)) / 2; \n        if (tri < n) \n        { \n            ans = mid; \n            low = mid + 1; \n        } \n        else\n            high = mid - 1; \n    } \n    return ans; \n} ",
    "{ \n\t// Base case \n\tif (n <= 0) \n\t\treturn 0; \n\t\n\t// A triangular number must be of the form n(n+1)/2. \n\t// The value of n must be greater than or equal to \n\t// the number of digits in n(n+1)/2. \n\t// So, we can use binary search to find the value of n. \n\tlong low = 1, high = 2 * n; \n\twhile (low < high) \n\t{ \n\t\tlong mid = (low + high) / 2; \n\t\tlong temp = mid * (mid + 1) / 2; \n\t\tif (temp >= n) \n\t\t\thigh = mid; \n\t\telse\n\t\t\tlow = mid + 1; \n\t} \n\treturn low; \n} ",
    "{ \n\tlong low = 1, high = 1000000, mid; \n\tlong ans = 0; \n\twhile (low <= high) \n\t{ \n\t\tmid = (low + high) / 2; \n\t\tlong tri = (mid * (mid + 1)) / 2; \n\t\tif (tri >= n) \n\t\t{ \n\t\t\tans = mid; \n\t\t\thigh = mid - 1; \n\t\t} \n\t\telse\n\t\t\tlow = mid + 1; \n\t} \n\treturn ans; \n} ",
    "{ \n\tlong low = 1, high = n; \n\tlong mid = 0; \n\tlong ans = 0; \n\twhile (low <= high) { \n\t\tmid = (low + high) / 2; \n\t\tif ((mid * (mid + 1)) / 2 < (long)pow(10, n - 1)) { \n\t\t\tlow = mid + 1; \n\t\t\tans = mid; \n\t\t} \n\t\telse\n\t\t\thigh = mid - 1; \n\t} \n\treturn ans; \n} ",
    "{ \n\t// base case \n\tif (n <= 0) \n\t\treturn 0; ",
    "{ \n\t// Initialize low and high for binary search \n\tlong low = 1, high = n; \n\t\n\t// loop till low is less than high \n\twhile (low < high) \n\t{ \n\t\t// Find the mid value \n\t\tlong mid = (low + high) / 2; \n\t\t\n\t\t// if mid*(mid+1)/2 has n digits, \n\t\t// then search in left half \n\t\tif (floor(log10(mid * (mid + 1) / 2)) + 1 == n) \n\t\t\thigh = mid; \n\t\t\n\t\t// else search in right half \n\t\telse\n\t\t\tlow = mid + 1; \n\t} \n\t\n\t// return low as index \n\treturn low; \n} ",
    "{ \n\t// Initialize low and high for binary search \n\tlong low = 1, high = n; \n\t\n\t// loop untill low is less than or equal to high \n\twhile (low <= high) \n\t{ \n\t\t// Find the mid value \n\t\tlong mid = (low + high) / 2; \n\t\t\n\t\t// If mid is triangular number with n digits \n\t\tif (mid * (mid + 1) / 2 == n) \n\t\t\treturn mid; \n\t\t\n\t\t// If mid is more than n, then search in left half \n\t\telse if (mid * (mid + 1) / 2 > n) \n\t\t\thigh = mid - 1; \n\t\t\n\t\t// If mid is less than n, then search in right half \n\t\telse\n\t\t\tlow = mid + 1; \n\t} \n\t\n\t// If no triangular number is present \n\treturn -1; \n} ",
    "{ \n\t// Base cases \n\tif (n <= 0) \n\t\treturn 0; \n\tif (n == 1) \n\t\treturn 1; \n\t\n\t// A temporary array to store triangular numbers \n\tlong[] dp = new long[n + 1]; \n\t\n\t// Initialize first two values in table \n\tdp[0] = 0; \n\tdp[1] = 1; \n\t\n\t// Fill entries in dp[] using recursive formula \n\tfor (long i = 2; i <= n; i++) \n\t\tdp[i] = dp[i - 1] + i; \n\t\n\t// Now find the index of largest triangular number \n\t// with n digits. \n\tlong index = 0; \n\tfor (long i = 1; i <= n; i++) \n\t{ \n\t\tif (dp[i] >= pow(10, n - 1)) \n\t\t{ \n\t\t\tindex = i; \n\t\t\tbreak; \n\t\t} \n\t} \n\t\n\treturn index; \n} ",
    "{ \n\tlong low = 1, high = 1000000; \n\tlong ans = 0; \n\twhile (low <= high) \n\t{ \n\t\tlong mid = (low + high) / 2; \n\t\tlong triangle = (mid * (mid + 1)) / 2; \n\t\tif (triangle >= n) \n\t\t{ \n\t\t\tans = mid; \n\t\t\thigh = mid - 1; \n\t\t} \n\t\telse\n\t\t\tlow = mid + 1; \n\t} \n\treturn ans; \n} ",
    "{ \n\tlong low = 1, high = n; \n\tlong mid = 0; \n\tlong ans = 0; \n\twhile (low <= high) \n\t{ \n\t\tmid = (low + high) / 2; \n\t\tif (mid * (mid + 1) / 2 >= n) \n\t\t{ \n\t\t\tans = mid; \n\t\t\thigh = mid - 1; \n\t\t} \n\t\telse\n\t\t\tlow = mid + 1; \n\t} \n\treturn ans; \n} ",
    "{ \n    long count = 0; \n    long triangularNumber = 0; \n    while (count * (count + 1) / 2 < n) { \n        count++; \n    } \n    return count; \n} ",
    "{ \n\t// Base case \n\tif (n <= 0) \n\t\treturn 0; ",
    "{ \n\tlong i = 1; \n\tlong triangularNumber = 0; \n\twhile (true) \n\t{ \n\t\ttriangularNumber = (i * (i + 1)) / 2; \n\t\tif (triangularNumber % 10 == 0) \n\t\t{ \n\t\t\tif (triangularNumber.toString().length() == n) \n\t\t\t\treturn i; \n\t\t} \n\t\ti++; \n\t} \n} ",
    "{ \n\tlong count = 0; \n\tlong i = 1; \n\twhile (count < n) \n\t{ \n\t\tlong t = (i * (i + 1)) / 2; \n\t\tlong digits = (long)log10(t) + 1; \n\t\tif (digits == n) \n\t\t\treturn i; \n\t\ti++; \n\t} \n\treturn -1; \n} ",
    "{ \n\t// Base case \n\tif (n <= 0) \n\t\treturn 0; ",
    "{ \n\t// Base cases \n\tif (n <= 0) \n\t\treturn 0; \n\tif (n == 1) \n\t\treturn 1; ",
    "{ \n\t// Base cases \n\tif (n <= 0) \n\t\treturn 0; \n\tif (n == 1) \n\t\treturn 1; ",
    "{ \n    long low = 1, high = 100000; \n    long mid = 0; \n    long ans = 0; \n    while (low <= high) { \n        mid = (low + high) / 2; \n        long temp = (mid * (mid + 1)) / 2; \n        if (temp >= n) { \n            ans = mid; \n            high = mid - 1; \n        } \n        else { \n            low = mid + 1; \n        } \n    } \n    return ans; \n} ",
    "{ \n    long low = 1, high = n; \n    long ans = 0; \n    while (low <= high) \n    { \n        long mid = (low + high) / 2; \n        long val = mid * (mid + 1) / 2; \n        if (val >= n) \n        { \n            ans = mid; \n            high = mid - 1; \n        } \n        else\n            low = mid + 1; \n    } \n    return ans; \n} ",
    "{ \n\t// Base case \n\tif (n <= 0) \n\t\treturn 0; ",
    "{ \n\tlong low = 0, high = n, mid; \n\tlong count; \n\twhile (low <= high) \n\t{ \n\t\tmid = (low + high) / 2; \n\t\tcount = (mid * (mid + 1)) / 2; \n\t\tif (count == n) \n\t\t\treturn mid; \n\t\telse if (count < n) \n\t\t\tlow = mid + 1; \n\t\telse\n\t\t\thigh = mid - 1; \n\t} \n\treturn -1; \n} ",
    "{ \n\tlong low = 1, high = n; \n\tlong mid = 0; \n\tlong ans = 0; \n\twhile (low <= high) \n\t{ \n\t\tmid = (low + high) / 2; \n\t\tif (mid * (mid + 1) / 2 >= n) \n\t\t{ \n\t\t\tans = mid; \n\t\t\thigh = mid - 1; \n\t\t} \n\t\telse\n\t\t\tlow = mid + 1; \n\t} \n\treturn ans; \n} ",
    "{ \n\t// Base cases \n\tif (n <= 0) \n\t\treturn 0; \n\tif (n == 1) \n\t\treturn 1; ",
    "{ \n\tlong low = 1, high = n; \n\tlong mid = 0; \n\twhile (low <= high) \n\t{ \n\t\tmid = (low + high) / 2; \n\t\tif (mid * (mid + 1) / 2 >= n * (long)log10(n) - (long)log10(2) + 1) \n\t\t\thigh = mid - 1; \n\t\telse\n\t\t\tlow = mid + 1; \n\t} \n\treturn low; \n} ",
    "{ \n\tlong count = 1; \n\tlong triangularNumber = 1; \n\twhile (count * (count + 1) / 2 < Math.pow(10, n - 1)) { \n\t\tcount++; \n\t} \n\treturn count; \n} ",
    "{ \n\tlong i = 1; \n\tlong triangularNumber = 0; \n\twhile (true) \n\t{ \n\t\ttriangularNumber = (i * (i + 1)) / 2; \n\t\tif (triangularNumber > pow(10, n)) \n\t\t\tbreak; \n\t\ti++; \n\t} \n\treturn i; \n} ",
    "{ \n    long x = 1; \n    long i = 1; \n    while (true) \n    { \n        long t = (i * (i + 1)) / 2; \n        if (t >= pow(10, n - 1)) \n        { \n            if (t < pow(10, n)) \n                return x; \n            else\n                break; \n        } \n        x++; \n        i++; \n    } \n    return -1; \n} ",
    "{ \n\t// Initialize low and high for binary search \n\tlong low = 1, high = n * (n + 1) / 2; \n\t\n\t// loop till low is less than or equal to high \n\twhile (low < high) \n\t{ \n\t\t// Find the mid value \n\t\tlong mid = (low + high) / 2; \n\t\n\t\t// If mid is triangular number \n\t\tif (mid * (mid + 1) / 2 >= n) \n\t\t\thigh = mid; \n\t\telse\n\t\t\tlow = mid + 1; \n\t} \n\t\n\t// return low as index \n\treturn low; \n} ",
    "{ \n\t// Base case \n\tif (n <= 0) \n\t\treturn 0; \n\t\n\t// A triangular number must be of the form n(n+1)/2. \n\t// The value of n must be greater than or equal to \n\t// the number of digits in n(n+1)/2. \n\tlong triangularNumber = 1; \n\tlong i = 1; \n\twhile (triangularNumber <= n) \n\t{ \n\t\ti++; \n\t\ttriangularNumber = i * (i + 1) / 2; \n\t} \n\t\n\treturn i - 1; \n} ",
    "{ \n\tlong count = 0; \n\tlong i = 1; \n\twhile (count < n) \n\t{ \n\t\tlong triangle = (i * (i + 1)) / 2; \n\t\tlong digits = (long)log10(triangle) + 1; \n\t\tif (digits == n) \n\t\t\treturn i; \n\t\ti++; \n\t} \n\treturn -1; \n} ",
    "{ \n\tlong count = 0; \n\tlong i = 1; \n\twhile (count < n) \n\t{ \n\t\tlong t = (i * (i + 1)) / 2; \n\t\tif (t >= pow(10, n - 1)) \n\t\t\tbreak; \n\t\ti++; \n\t} \n\treturn i; \n} ",
    "{ \n\tlong count = 0, i = 1; \n\twhile (count < n) \n\t{ \n\t\tlong triangle = (i * (i + 1)) / 2; \n\t\tlong digits = (long)log10(triangle) + 1; \n\t\tif (digits == n) \n\t\t\treturn i; \n\t\ti++; \n\t} \n\treturn -1; \n} ",
    "{ \n\tlong count = 0; \n\tlong i = 1; \n\twhile (count < n) \n\t{ \n\t\tlong t = (i * (i + 1)) / 2; \n\t\tlong digits = (long)log10(t) + 1; \n\t\tif (digits == n) \n\t\t\treturn i; \n\t\ti++; \n\t} \n\treturn -1; \n} ",
    "{ \n\t// Base cases \n\tif (n <= 0) \n\t\treturn 0; \n\tif (n == 1) \n\t\treturn 1; ",
    "{ \n    long low = 1, high = n, mid; \n    long ans = 0; \n  \n    while (low <= high) { \n        mid = (low + high) / 2; \n  \n        if (mid * (mid + 1) / 2 >= n) { \n            ans = mid; \n            high = mid - 1; \n        } \n        else\n            low = mid + 1; \n    } \n    return ans; \n} ",
    "{ \n\tlong nth = 1; \n\tlong triangularNumber = 0; \n\t\n\twhile (true) \n\t{ \n\t\ttriangularNumber = (nth * (nth + 1)) / 2; \n\t\tif (triangularNumber % 10 == 0) \n\t\t\treturn nth; \n\t\tnth++; \n\t} \n} ",
    "{ \n\t// Base case \n\tif (n <= 0) \n\t\treturn 0; ",
    "{ \n\t// Base cases \n\tif (n <= 0) \n\t\treturn 0; \n\tif (n == 1) \n\t\treturn 1; ",
    "{ \n\t// base case \n\tif (n <= 0) \n\t\treturn 0; ",
    "{ \n\t// Base cases \n\tif (n <= 0) \n\t\treturn 0; \n\tif (n == 1) \n\t\treturn 1; ",
    "{ \n    long low = 1, high = n; \n    long mid = 0; \n    long ans = 0; \n    while (low <= high) \n    { \n        mid = (low + high) / 2; \n        if (mid * (mid + 1) / 2 >= n) \n        { \n            ans = mid; \n            high = mid - 1; \n        } \n        else\n            low = mid + 1; \n    } \n    return ans; \n} ",
    "{ \n\t// Base cases \n\tif (n <= 0) \n\t\treturn 0; \n\tif (n == 1) \n\t\treturn 1; ",
    "{ \n\tlong low = 1, high = n; \n\tlong mid, digits; \n\twhile (low <= high) \n\t{ \n\t\tmid = (low + high) / 2; \n\t\tdigits = (long)log10(0.5 * mid * (mid + 1)) + 1; \n\t\tif (digits == n) \n\t\t\treturn mid; \n\t\tif (digits < n) \n\t\t\tlow = mid + 1; \n\t\telse\n\t\t\thigh = mid - 1; \n\t} \n\treturn -1; \n} ",
    "{ \n    long low = 1, high = 1000000; \n    long mid = 0; \n    long ans = 0; \n    while (low <= high) \n    { \n        mid = (low + high) / 2; \n        long tri = (mid * (mid + 1)) / 2; \n        if (tri < n) \n        { \n            ans = mid; \n            low = mid + 1; \n        } \n        else\n            high = mid - 1; \n    } \n    return ans; \n} ",
    "{ \n\tlong count = 1; \n\tlong triangle = 0; \n\twhile (true) \n\t{ \n\t\ttriangle = (count * (count + 1)) / 2; \n\t\tif (triangle % 10 == 0) \n\t\t{ \n\t\t\tif (triangle.to!string.length == n) \n\t\t\t\treturn count; \n\t\t} \n\t\tcount++; \n\t} \n} ",
    "{ \n    long low = 1, high = n; \n    long mid, ans = 0; \n    while (low <= high) \n    { \n        mid = (low + high) / 2; \n        if (mid * (mid + 1) / 2 >= n) \n        { \n            ans = mid; \n            high = mid - 1; \n        } \n        else\n            low = mid + 1; \n    } \n    return ans; \n} ",
    "{ \n\tlong count = 0; \n\tlong triangularNumber = 0; \n\twhile (count * (count + 1) / 2 < n) \n\t{ \n\t\tcount++; \n\t} \n\treturn count; \n} ",
    "{ \n    long low = 1, high = n; \n    long mid = 0; \n    long ans = 0; \n    while (low <= high) \n    { \n        mid = (low + high) / 2; \n        if (mid * (mid + 1) / 2 >= n) \n        { \n            ans = mid; \n            high = mid - 1; \n        } \n        else\n            low = mid + 1; \n    } \n    return ans; \n} ",
    "{ \n\tlong low = 1, high = 1000000; \n\tlong mid; \n\twhile (low <= high) \n\t{ \n\t\tmid = (low + high) / 2; \n\t\tif (triangular(mid) >= n) \n\t\t\thigh = mid - 1; \n\t\telse\n\t\t\tlow = mid + 1; \n\t} \n\treturn low; \n} ",
    "{ \n\tlong low = 0, high = n; \n\tlong mid = 0; \n\tlong ans = 0; \n\twhile (low <= high) \n\t{ \n\t\tmid = (low + high) / 2; \n\t\tif (mid * (mid + 1) / 2 >= n) \n\t\t{ \n\t\t\tans = mid; \n\t\t\thigh = mid - 1; \n\t\t} \n\t\telse\n\t\t\tlow = mid + 1; \n\t} \n\treturn ans; \n} ",
    "{ \n\t// Base case \n\tif (n <= 0) \n\t\treturn 0; \n\t\n\t// A triangular number must be of form n(n+1)/2. \n\t// The index of smallest triangular number with n digits is \n\t// given by floor(log10(n(n+1)/2)) + 1. \n\t// floor(log10(n(n+1)/2)) + 1 = floor(log10(n) + log10(n+1) - log10(2)) + 1 \n\t// floor(log10(n) + log10(n+1) - log10(2)) + 1 = floor(log10(n) + log10(n(1 + 1/n))) + 1 \n\t// floor(log10(n) + log10(n(1 + 1/n))) + 1 = floor(log10(n) + log10(n) + log10(1 + 1/n)) + 1 \n\t// floor(log10(n) + log10(n) + log10(1 + 1/n)) + 1 = floor(2log10(n) + log10(1 + 1/n)) + 1 \n\t// floor(2log10(n) + log10(1 + 1/n)) + 1 = 2log10(n) + log10(1 + 1/n) + 1 \n\t// 2log10(n) + log10(1 + 1/n) + 1 = 2log10(n) + log10(1 + 1/n) + 1 - log10(n) + log10(n) \n\t// 2log10(n) + log10(1 + 1/n) + 1 - log10(n) + log10(n) = (2 - 1)log10(n) + log10(1 + 1/n) + log10(n) \n\t// (2 - 1)log10(n) + log10(1 + 1/n) + log10(n) = log10(n) + log10(1 + 1/n) + log10(n) \n\t// log10(n) + log10(1 + 1/n) + log10(n) = log10(",
    "{ \n    long low = 1, high = 1000000; \n    long mid, ans = 0; \n    while (low <= high) \n    { \n        mid = (low + high) / 2; \n        if (mid * (mid + 1) / 2 >= n) \n        { \n            ans = mid; \n            high = mid - 1; \n        } \n        else\n            low = mid + 1; \n    } \n    return ans; \n} ",
    "{ \n\t// Base case \n\tif (n <= 0) \n\t\treturn 0; ",
    "{ \n\t// Base case \n\tif (n <= 0) \n\t\treturn 0; ",
    "{ \n\t// Base case \n\tif (n <= 0) \n\t\treturn 0; \n\t\n\t// A triangular number is n(n+1)/2. The \n\t// index of triangular number is n-1. \n\t// So index of n digit triangular number \n\t// is (n-1)*(n-1+1)/2 \n\tlong index = (n - 1) * (n - 1 + 1) / 2; \n\t\n\t// binary search for the index \n\tlong low = 0, high = index; \n\twhile (low < high) \n\t{ \n\t\tlong mid = (low + high) / 2; \n\t\t\n\t\t// if mid is n digit triangular number \n\t\tif (mid * (mid + 1) / 2 >= pow(10, n - 1)) \n\t\t\thigh = mid; \n\t\telse\n\t\t\tlow = mid + 1; \n\t} \n\t\n\treturn low; \n} ",
    "{ \n    long i = 1; \n    while (true) \n    { \n        long t = (i * (i + 1)) / 2; \n        if (t % 10 == 0) \n        { \n            long d = log10(t) + 1; \n            if (d == n) \n                return i; \n        } \n        i++; \n    } \n} ",
    "{ \n    long i = 1; \n    long j = 1; \n    long count = 0; \n    while (count < n) \n    { \n        j = j + 1; \n        count = count + (int)log10(j) + 1; \n        i = i + 1; \n    } \n    return i; \n} ",
    "{ \n\t// Base case \n\tif (n <= 0) \n\t\treturn 0; ",
    "{ \n    long low = 1, high = n; \n    long mid = 0; \n    long ans = 0; \n    while (low <= high) { \n        mid = (low + high) / 2; \n        long temp = (mid * (mid + 1)) / 2; \n        if (temp == n) \n            return mid; \n        else if (temp > n) \n            high = mid - 1; \n        else { \n            low = mid + 1; \n            ans = mid; \n        } \n    } \n    return ans; \n} ",
    "{ \n\t// Base case \n\tif (n <= 0) \n\t\treturn 0; ",
    "{ \n\t// Base cases \n\tif (n <= 0) \n\t\treturn 0; \n\tif (n == 1) \n\t\treturn 1; ",
    "{ \n\tlong low = 1, high = 100000; \n\tlong mid, ans = -1; \n\twhile (low <= high) \n\t{ \n\t\tmid = (low + high) / 2; \n\t\tlong tri = (mid * (mid + 1)) / 2; \n\t\tif (tri >= n) \n\t\t{ \n\t\t\tans = mid; \n\t\t\thigh = mid - 1; \n\t\t} \n\t\telse\n\t\t\tlow = mid + 1; \n\t} \n\treturn ans; \n} ",
    "{ \n\tlong count = 0; \n\tlong i = 1; \n\twhile (count < n) { \n\t\tlong triangle = (i * (i + 1)) / 2; \n\t\tlong digits = (long)log10(triangle) + 1; \n\t\tif (digits == n) \n\t\t\treturn i; \n\t\ti++; \n\t} \n\treturn -1; \n} ",
    "{ \n\tlong count = 0; \n\tlong i = 1; \n\twhile (count < n) \n\t{ \n\t\tlong triangle = (i * (i + 1)) / 2; \n\t\tlong digits = (long)log10(triangle) + 1; \n\t\tif (digits == n) \n\t\t\treturn i; \n\t\ti++; \n\t} \n\treturn -1; \n} ",
    "{ \n\tlong count = 0; \n\tlong i = 1; \n\twhile (count < n) \n\t{ \n\t\tlong triangle = (i * (i + 1)) / 2; \n\t\tlong digits = (long)log10(triangle) + 1; \n\t\tif (digits == n) \n\t\t\treturn i; \n\t\ti++; \n\t} \n\treturn -1; \n} ",
    "{ \n\t// Base case \n\tif (n <= 0) \n\t\treturn 0; ",
    "{ \n    // Initialize low and high for binary search \n    long low = 1, high = n; \n  \n    // loop till low is less than or equal to high \n    while (low <= high) \n    { \n        // Find the mid value \n        long mid = (low + high) / 2; \n  \n        // If mid is triangular number and \n        // mid+1 is not triangular \n        if (mid * (mid + 1) / 2 == n && \n            (mid + 1) * (mid + 2) / 2 > n) \n            return mid; \n  \n        // If mid is less than n \n        else if (mid * (mid + 1) / 2 < n) \n            low = mid + 1; \n  \n        // If mid is greater than n \n        else\n            high = mid - 1; \n    } \n  \n    // If no triangular number is found \n    return -1; \n} ",
    "{ \n\tlong count = 1; \n\tlong triangularNumber = 1; \n\twhile (count * (count + 1) / 2 < Math.pow(10, n - 1)) \n\t{ \n\t\tcount++; \n\t} \n\treturn count; \n} ",
    "{ \n\t// Base case \n\tif (n <= 0) \n\t\treturn 0; ",
    "{ \n\tlong count = 0; \n\tlong i = 1; \n\twhile (count < n) \n\t{ \n\t\tlong x = (i * (i + 1)) / 2; \n\t\tlong digits = (long)log10(x) + 1; \n\t\tif (digits == n) \n\t\t\treturn i; \n\t\ti++; \n\t} \n\treturn -1; \n} ",
    "{ \n\t// Base case \n\tif (n <= 0) \n\t\treturn 0; \n\t\n\t// A triangular number is n*(n+1)/2 \n\t// The index is 1 more than the number \n\t// of digits in n*(n+1)/2 \n\tlong count = 1; \n\tlong triangularNumber = 1; \n\t\n\t// Loop until n-digit triangular number \n\t// is found \n\twhile (count * (count + 1) / 2 < Math.pow(10, n)) \n\t{ \n\t\tcount++; \n\t\ttriangularNumber = count * (count + 1) / 2; \n\t} \n\t\n\t// Return the index \n\treturn count; \n} ",
    "{ \n\t// Base case \n\tif (n <= 0) \n\t\treturn 0; ",
    "{ \n    long count = 0; \n    long i = 1; \n    long triangularNumber = 0; \n    while (count < n) \n    { \n        triangularNumber = triangularNumber + i; \n        i++; \n        count = countDigit(triangularNumber); \n    } \n    return (i - 1); \n} \nlong countDigit(long n) \n{ \n    long count = 0; \n    while (n != 0) \n    { \n        n = n / 10; \n        ++count; \n    } \n    return count; \n} ",
    "{ \n\tlong low = 1, high = n; \n\tlong mid, index = -1; \n\twhile (low <= high) \n\t{ \n\t\tmid = (low + high) / 2; \n\t\tlong t = (mid * (mid + 1)) / 2; \n\t\tif (t >= n) \n\t\t{ \n\t\t\tindex = mid; \n\t\t\thigh = mid - 1; \n\t\t} \n\t\telse\n\t\t\tlow = mid + 1; \n\t} \n\treturn index; \n} ",
    "{ \n\tlong i = 1; \n\tlong triangle = 0; \n\twhile (true) \n\t{ \n\t\ttriangle = (i * (i + 1)) / 2; \n\t\tif (triangle % 10 == 0) \n\t\t{ \n\t\t\tif (triangle.to!string().length == n) \n\t\t\t\treturn i; \n\t\t} \n\t\ti++; \n\t} \n} ",
    "{ \n\tlong count = 1; \n\tlong triangularNumber = 1; \n\twhile (count * (count + 1) / 2 < n) \n\t{ \n\t\tcount++; \n\t} \n\treturn count; \n} ",
    "{ \n\tlong count = 0; \n\tlong i = 1; \n\twhile (count < n) \n\t{ \n\t\tlong triangle = (i * (i + 1)) / 2; \n\t\tlong digits = log10(triangle) + 1; \n\t\tif (digits == n) \n\t\t\treturn i; \n\t\ti++; \n\t} \n\treturn -1; \n} ",
    "{ \n\t// Base case \n\tif (n <= 0) \n\t\treturn 0; ",
    "{ \n    long low = 1, high = n, mid; \n    long ans = -1; \n    while (low <= high) \n    { \n        mid = (low + high) / 2; \n        long temp = mid * (mid + 1) / 2; \n        if (temp == n) \n            return mid; \n        else if (temp < n) \n        { \n            ans = mid; \n            low = mid + 1; \n        } \n        else\n            high = mid - 1; \n    } \n    return ans; \n} ",
    "{ \n\t// Base cases \n\tif (n <= 0) \n\t\treturn 0; \n\tif (n == 1) \n\t\treturn 1; ",
    "{ \n\tlong count = 1; \n\tlong triangularNumber = 1; \n\twhile (count * (count + 1) / 2 < Math.pow(10, n - 1)) \n\t{ \n\t\tcount++; \n\t} \n\treturn count; \n} ",
    "{ \n\tlong low = 1, high = 100000; \n\tlong mid, ans = 0; \n\twhile (low <= high) \n\t{ \n\t\tmid = (low + high) / 2; \n\t\tif (mid * (mid + 1) / 2 >= n) \n\t\t{ \n\t\t\tans = mid; \n\t\t\thigh = mid - 1; \n\t\t} \n\t\telse\n\t\t\tlow = mid + 1; \n\t} \n\treturn ans; \n} ",
    "{ \n\tlong count = 0; \n\tlong i = 1; \n\twhile (count < n) \n\t{ \n\t\tlong triangle = (i * (i + 1)) / 2; \n\t\tlong digits = (long)log10(triangle) + 1; \n\t\tif (digits == n) \n\t\t\treturn i; \n\t\ti++; \n\t} \n\treturn -1; \n} ",
    "{ \n\t// Base case \n\tif (n <= 0) \n\t\treturn 0; \n\t\n\t// A triangular number must be of the form n(n+1)/2. \n\t// The value of n must be greater than or equal to \n\t// the number of digits in n(n+1)/2. \n\t// So, we can find the value of n by taking the \n\t// ceil of the square root of 2*10^n. \n\tlong nth = ceil(sqrt(2 * pow(10, n))); \n\t\n\t// Now, we can find the number of digits in n(n+1)/2 \n\t// using the formula log10(n(n+1)/2) + 1. \n\tlong digits = nth * (nth + 1) / 2; \n\t\n\t// If the number of digits in n(n+1)/2 is greater \n\t// than n, then we need to find the index of the \n\t// triangular number with n digits which is just \n\t// nth - 1. \n\tif (log10(digits) + 1 > n) \n\t\treturn nth - 1; \n\t\n\t// If the number of digits in n(n+1)/2 is equal \n\t// to n, then we need to find the index of the \n\t// triangular number with n digits which is just \n\t// nth. \n\telse\n\t\treturn nth; \n} ",
    "{ \n\t// Initialize low and high for binary search \n\tlong low = 1, high = n; \n\tlong ans = -1; \n\t\n\t// Do binary search for finding the index \n\twhile (low <= high) \n\t{ \n\t\tlong mid = (low + high) / 2; \n\t\t\n\t\t// If number of digits in mid*(mid+1)/2 is equal to n, \n\t\t// then update the ans and break \n\t\tif (floor(log10(mid * (mid + 1) / 2)) + 1 == n) \n\t\t{ \n\t\t\tans = mid; \n\t\t\tbreak; \n\t\t} \n\t\t\n\t\t// If number of digits in mid*(mid+1)/2 is less than n, \n\t\t// then search in right half \n\t\telse if (floor(log10(mid * (mid + 1) / 2)) + 1 < n) \n\t\t\tlow = mid + 1; \n\t\t\n\t\t// If number of digits in mid*(mid+1)/2 is more than n, \n\t\t// then search in left half \n\t\telse\n\t\t\thigh = mid - 1; \n\t} \n\t\n\treturn ans; \n} ",
    "{ \n\tlong count = 0; \n\tlong i = 1; \n\tlong triangularNumber = 0; \n\twhile (count < n) \n\t{ \n\t\ttriangularNumber = triangularNumber + i; \n\t\ti++; \n\t\tcount = countDigits(triangularNumber); \n\t} \n\treturn i - 1; \n} ",
    "{ \n\t// Base cases \n\tif (n <= 0) \n\t\treturn 0; \n\tif (n == 1) \n\t\treturn 1; ",
    "{ \n\tlong count = 0; \n\tlong i = 1; \n\twhile (count < n) \n\t{ \n\t\tlong triangle = (i * (i + 1)) / 2; \n\t\tlong digits = (long)log10(triangle) + 1; \n\t\tif (digits == n) \n\t\t\treturn i; \n\t\ti++; \n\t} \n\treturn -1; \n} ",
    "{ \n    long low = 1, high = n; \n    long mid = 0; \n    long ans = 0; \n  \n    while (low <= high) { \n        mid = (low + high) / 2; \n  \n        // if mid*(mid+1)/2 has n digits \n        if (floor(log10(mid * (mid + 1) / 2)) + 1 == n) { \n            ans = mid; \n            high = mid - 1; \n        } \n  \n        // if mid*(mid+1)/2 has more than n digits \n        else if (floor(log10(mid * (mid + 1) / 2)) + 1 > n) \n            high = mid - 1; \n  \n        // if mid*(mid+1)/2 has less than n digits \n        else\n            low = mid + 1; \n    } \n  \n    return ans; \n} \n  \n// Driver code ",
    "{ \n\t// Base case \n\tif (n <= 0) \n\t\treturn 0; ",
    "{ \n    long count = 0; \n    long i = 1; \n    while (count < n) \n    { \n        long triangle = (i * (i + 1)) / 2; \n        long digits = (long)log10(triangle) + 1; \n        if (digits == n) \n            return i; \n        i++; \n    } \n    return -1; \n} ",
    "{ \n    // Base cases \n    if (n <= 0) \n        return 0; \n    if (n == 1) \n        return 1; \n  \n    // A triangular number is n(n+1)/2. The  \n    // index is the number of digits in n(n+1)/2. \n    // Find ceiling of n-1th root of 2 times  \n    // 10 raised to n-1 (10^(n-1)). \n    long lo = 1, hi = (long)pow(10, n - 1); \n    long mid = 0; \n    while (lo < hi) { \n        mid = (lo + hi) / 2; \n  \n        // If n-1th root of mid*10^(n-1) is  \n        // triangular number \n        if (mid * (mid + 1) / 2 < pow(10, n - 1)) \n            lo = mid + 1; \n        else\n            hi = mid; \n    } \n  \n    // n-1th root of (lo-1)*10^(n-1) is the  \n    // previous triangular number \n    return lo - 1; \n} ",
    "{ \n    long low = 1, high = n; \n    long mid = 0; \n    long ans = 0; \n    while (low <= high) \n    { \n        mid = (low + high) / 2; \n        if (mid * (mid + 1) / 2 >= n * (long)log10(n) - (long)log10(2) + 1) \n        { \n            ans = mid; \n            high = mid - 1; \n        } \n        else\n            low = mid + 1; \n    } \n    return ans; \n} ",
    "{ \n\tlong count = 0; \n\tlong i = 1; \n\twhile (count < n) \n\t{ \n\t\tlong t = (i * (i + 1)) / 2; \n\t\tif (t % 10 == 0) \n\t\t\tcount++; \n\t\ti++; \n\t} \n\treturn i - 1; \n} ",
    "{ \n\tlong count = 0; \n\tlong i = 1; \n\twhile (count < n) \n\t{ \n\t\tlong tri = (i * (i + 1)) / 2; \n\t\tlong digits = (long)log10(tri) + 1; \n\t\tif (digits == n) \n\t\t\treturn i; \n\t\ti++; \n\t} \n\treturn -1; \n} ",
    "{ \n\tlong count = 0; \n\tlong triangularNumber = 0; \n\twhile (count * (count + 1) / 2 < n) { \n\t\tcount++; \n\t} \n\treturn count; \n} ",
    "{ \n    long low = 1, high = n; \n    long mid; \n    long ans = 0; \n  \n    while (low <= high) { \n        mid = (low + high) / 2; \n  \n        if (mid * (mid + 1) / 2 >= n) { \n            ans = mid; \n            high = mid - 1; \n        } \n        else\n            low = mid + 1; \n    } \n  \n    return ans; \n} ",
    "{ \n    long l = 1, r = 1000000, mid; \n    while (l <= r) \n    { \n        mid = (l + r) / 2; \n        if (mid * (mid + 1) / 2 >= n) \n            r = mid - 1; \n        else\n            l = mid + 1; \n    } \n    return l; \n} ",
    "{ \n\t// Base case \n\tif (n <= 0) \n\t\treturn 0; ",
    "{ \n    long low = 1, high = n; \n    long mid = 0; \n    while (low <= high) \n    { \n        mid = (low + high) / 2; \n        long x = mid * (mid + 1) / 2; \n        long digits = (long)log10(x) + 1; \n        if (digits == n) \n            return mid; \n        else if (digits < n) \n            low = mid + 1; \n        else\n            high = mid - 1; \n    } \n    return mid; \n} ",
    "{ \n\t// Base cases \n\tif (n <= 0) \n\t\treturn 0; \n\tif (n == 1) \n\t\treturn 1; ",
    "{ \n\t// Base case \n\tif (n <= 0) \n\t\treturn 0; ",
    "{ \n\t// Base cases \n\tif (n <= 0) \n\t\treturn 0; \n\tif (n == 1) \n\t\treturn 1; ",
    "{ \n\tlong low = 1, high = 100000; \n\tlong mid = 0; \n\tlong ans = 0; \n\twhile (low <= high) \n\t{ \n\t\tmid = (low + high) / 2; \n\t\tlong tri = mid * (mid + 1) / 2; \n\t\tif (tri < n) \n\t\t{ \n\t\t\tans = mid; \n\t\t\tlow = mid + 1; \n\t\t} \n\t\telse\n\t\t\thigh = mid - 1; \n\t} \n\treturn ans; \n} ",
    "{ \n\tlong low = 0, high = n * (n + 1) / 2; \n\tlong mid, count; \n\twhile (low < high) \n\t{ \n\t\tmid = (low + high) / 2; \n\t\tcount = 0; \n\t\tfor (long i = 1; i <= n; i++) \n\t\t\tcount += min(n, mid / i); \n\t\tif (count < n) \n\t\t\tlow = mid + 1; \n\t\telse\n\t\t\thigh = mid; \n\t} \n\treturn low; \n} ",
    "{ \n\t// Base cases \n\tif (n <= 0) \n\t\treturn 0; \n\tif (n == 1) \n\t\treturn 1; \n\t\n\t// A temporary array of size n+1. temp[i] \n\t// stores index of triangular number with \n\t// i digits. \n\tlong[] temp = new long[n + 1]; \n\t\n\t// Initialize value of last entry \n\ttemp[0] = 0; \n\ttemp[1] = 1; \n\t\n\t// Fill entries of temp[] using recursive \n\t// formula. \n\tfor (long i = 2; i <= n; i++) \n\t{ \n\t\ttemp[i] = temp[i - 1] + i; \n\t} \n\t\n\t// Return index of last entry \n\treturn temp[n]; \n} ",
    "{ \n\tlong low = 1, high = n, mid; \n\twhile (low <= high) \n\t{ \n\t\tmid = (low + high) / 2; \n\t\tif (mid * (mid + 1) / 2 >= n) \n\t\t\thigh = mid - 1; \n\t\telse\n\t\t\tlow = mid + 1; \n\t} \n\treturn low; \n} ",
    "{ \n    long low = 1, high = n; \n    long mid, index = -1; \n    while (low <= high) \n    { \n        mid = (low + high) / 2; \n        long temp = (mid * (mid + 1)) / 2; \n        if (temp >= n) \n        { \n            index = mid; \n            high = mid - 1; \n        } \n        else\n            low = mid + 1; \n    } \n    return index; \n} ",
    "{ \n    long low = 1, high = 100000; \n    long mid, ans = -1; \n    while (low <= high) \n    { \n        mid = (low + high) / 2; \n        if (triangular(mid) >= n) \n        { \n            ans = mid; \n            high = mid - 1; \n        } \n        else\n            low = mid + 1; \n    } \n    return ans; \n} \nlong triangular(long n) \n{ \n    return (n * (n + 1)) / 2; \n} ",
    "{ \n\t// Base cases \n\tif (n <= 0) \n\t\treturn 0; \n\tif (n == 1) \n\t\treturn 1; ",
    "{ \n\tlong x = 1; \n\tlong y = 1; \n\tlong count = 2; \n\twhile (true) \n\t{ \n\t\tlong z = x + y; \n\t\tif (z.to!string.length == n) \n\t\t\treturn count; \n\t\tx = y; \n\t\ty = z; \n\t\tcount++; \n\t} \n} ",
    "{ \n\tlong i = 1; \n\tlong triangularNumber = 1; \n\twhile (true) \n\t{ \n\t\tif (triangularNumber % (long)pow(10, n - 1) == 0) \n\t\t\treturn i; \n\t\ti++; \n\t\ttriangularNumber = triangularNumber + i; \n\t} \n} ",
    "{ \n\tlong count = 0; \n\tlong i = 1; \n\tlong triangularNumber = 0; \n\twhile (count < n) \n\t{ \n\t\ttriangularNumber = triangularNumber + i; \n\t\ti++; \n\t\tcount = count_digits(triangularNumber); \n\t} \n\treturn (i - 1); \n} ",
    "{ \n\tlong low = 1, high = n; \n\tlong mid; \n\tlong ans = 0; \n\twhile (low <= high) \n\t{ \n\t\tmid = (low + high) / 2; \n\t\tif (mid * (mid + 1) / 2 >= n) \n\t\t{ \n\t\t\tans = mid; \n\t\t\thigh = mid - 1; \n\t\t} \n\t\telse\n\t\t\tlow = mid + 1; \n\t} \n\treturn ans; \n} ",
    "{ \n\tlong low = 1, high = n, mid; \n\twhile (low <= high) \n\t{ \n\t\tmid = (low + high) / 2; \n\t\tif ((mid * (mid + 1)) / 2 >= n) \n\t\t\thigh = mid - 1; \n\t\telse\n\t\t\tlow = mid + 1; \n\t} \n\treturn low; \n} ",
    "{ \n\tlong low = 1, high = 100000; \n\tlong mid, ans = 0; \n\twhile (low <= high) \n\t{ \n\t\tmid = (low + high) / 2; \n\t\tlong t = (mid * (mid + 1)) / 2; \n\t\tif (t >= n) \n\t\t{ \n\t\t\tans = mid; \n\t\t\thigh = mid - 1; \n\t\t} \n\t\telse\n\t\t\tlow = mid + 1; \n\t} \n\treturn ans; \n} ",
    "{ \n\tlong low = 1, high = 100000; \n\tlong mid, ans = 0; \n\twhile (low <= high) \n\t{ \n\t\tmid = (low + high) / 2; \n\t\tlong temp = (mid * (mid + 1)) / 2; \n\t\tif (temp >= n) \n\t\t{ \n\t\t\tans = mid; \n\t\t\thigh = mid - 1; \n\t\t} \n\t\telse\n\t\t\tlow = mid + 1; \n\t} \n\treturn ans; \n} ",
    "{ \n\t// base case \n\tif (n <= 0) \n\t\treturn 0; ",
    "{ \n\tlong count = 0; \n\tlong i = 1; \n\twhile (count < n) \n\t{ \n\t\tlong x = (i * (i + 1)) / 2; \n\t\tif (x % 10 == 0) \n\t\t\tcount++; \n\t\ti++; \n\t} \n\treturn i - 1; \n} ",
    "{ \n\t// Base case \n\tif (n <= 0) \n\t\treturn 0; ",
    "{ \n\tlong count = 1; \n\tlong triangularNumber = 1; \n\twhile (count * (count + 1) / 2 < Math.pow(10, n - 1)) \n\t{ \n\t\tcount++; \n\t\ttriangularNumber = count * (count + 1) / 2; \n\t} \n\treturn count; \n} ",
    "{ \n    long low = 1, high = n * (n + 1) / 2; \n    long mid, ans = 0; \n    while (low <= high) { \n        mid = (low + high) / 2; \n        long digits = (long)log10(mid * 2) + 1; \n        if (digits == n) { \n            ans = mid; \n            high = mid - 1; \n        } \n        else if (digits > n) \n            high = mid - 1; \n        else\n            low = mid + 1; \n    } \n    return ans; \n} ",
    "{ \n\tlong count = 0; \n\tlong i = 1; \n\tlong j = 1; \n\twhile (count < n) \n\t{ \n\t\tj = j + i; \n\t\ti++; \n\t\tif (j % 10 == 0) \n\t\t\tcount++; \n\t} \n\treturn i; \n} ",
    "{ \n\tlong i = 1; \n\tlong sum = 0; \n\twhile (true) \n\t{ \n\t\tsum = sum + i; \n\t\tif (sum >= pow(10, n - 1) && sum < pow(10, n)) \n\t\t\treturn i; \n\t\ti++; \n\t} \n} ",
    "{ \n    long low = 1, high = n; \n    long mid = 0; \n  \n    while (low <= high) { \n        mid = (low + high) / 2; \n  \n        if (mid * (mid + 1) / 2 >= n * (long)log10(n) - (long)log10(2) + 1) \n            high = mid - 1; \n        else\n            low = mid + 1; \n    } \n  \n    return low; \n} ",
    "{ \n    long i = 1; \n    long j = 1; \n    long count = 0; \n    while (count < n) \n    { \n        j = j + 1; \n        count = count + (int)log10(j) + 1; \n        i = i + 1; \n    } \n    return i; \n} ",
    "{ \n    long i = 1; \n    long j = 1; \n    long count = 0; \n    while (count < n) \n    { \n        j = j + 1; \n        long temp = (i * (i + 1)) / 2; \n        if (temp % 10 == 0) \n        { \n            count = count + 1; \n        } \n        i = i + 1; \n    } \n    return j; \n} ",
    "{ \n\tlong i = 1; \n\tlong triangularNumber = 0; \n\twhile (true) { \n\t\ttriangularNumber = (i * (i + 1)) / 2; \n\t\tif (triangularNumber % 10 == 0) { \n\t\t\tif (triangularNumber.toString().length() == n) \n\t\t\t\tbreak; \n\t\t} \n\t\ti++; \n\t} \n\treturn i; \n} ",
    "{ \n\t// Base cases \n\tif (n <= 0) \n\t\treturn 0; \n\tif (n == 1) \n\t\treturn 1; ",
    "{ \n\t// Base cases \n\tif (n <= 0) \n\t\treturn 0; \n\tif (n == 1) \n\t\treturn 1; ",
    "{ \n\tlong count = 0; \n\tlong i = 1; \n\twhile (count < n) \n\t{ \n\t\tlong t = (i * (i + 1)) / 2; \n\t\tlong digits = (long)log10(t) + 1; \n\t\tif (digits == n) \n\t\t\treturn i; \n\t\ti++; \n\t} \n\treturn -1; \n} ",
    "{ \n    long low = 1, high = 100000; \n    long mid = 0; \n    long ans = 0; \n  \n    while (low <= high) { \n        mid = (low + high) / 2; \n  \n        if (mid * (mid + 1) / 2 >= n) { \n            ans = mid; \n            high = mid - 1; \n        } \n        else\n            low = mid + 1; \n    } \n  \n    return ans; \n} ",
    "{ \n\t// Base cases \n\tif (n <= 0) \n\t\treturn 0; \n\tif (n == 1) \n\t\treturn 1; ",
    "{ \n\t// Base case \n\tif (n <= 0) \n\t\treturn 0; ",
    "{ \n\tlong i = 1; \n\tlong sum = 0; \n\twhile (true) \n\t{ \n\t\tsum = sum + i; \n\t\tif (sum % (long)pow(10, n - 1) == 0) \n\t\t\treturn i; \n\t\ti++; \n\t} \n} ",
    "{ \n\t// Base cases \n\tif (n <= 0) \n\t\treturn 0; \n\tif (n == 1) \n\t\treturn 1; ",
    "{ \n\t// Base cases \n\tif (n <= 0) \n\t\treturn 0; \n\tif (n == 1) \n\t\treturn 1; ",
    "{ \n    long i = 1; \n    long triangularNumber = 0; \n    while (true) \n    { \n        triangularNumber = (i * (i + 1)) / 2; \n        if (triangularNumber % 10 == 0) \n        { \n            long temp = triangularNumber; \n            long count = 0; \n            while (temp != 0) \n            { \n                count++; \n                temp /= 10; \n            } \n            if (count == n) \n                return i; \n        } \n        i++; \n    } \n} ",
    "{ \n\tlong i = 1; \n\tlong t = 1; \n\twhile (t < n) { \n\t\ti++; \n\t\tt = (i * (i + 1)) / 2; \n\t} \n\treturn i; \n} ",
    "{ \n    long low = 1, high = n * (n + 1) / 2; \n    long mid, num; \n    while (low < high) \n    { \n        mid = (low + high) / 2; \n        num = (long)log10(0.5 * mid * (mid + 1)); \n        if (num < n - 1) \n            low = mid + 1; \n        else\n            high = mid; \n    } \n    return low; \n} ",
    "{ \n\tlong low = 1, high = 100000; \n\tlong mid; \n\twhile (low <= high) \n\t{ \n\t\tmid = (low + high) / 2; \n\t\tif (triangular(mid) >= pow(10, n - 1) && triangular(mid - 1) < pow(10, n - 1)) \n\t\t\treturn mid; \n\t\telse if (triangular(mid) < pow(10, n - 1)) \n\t\t\tlow = mid + 1; \n\t\telse\n\t\t\thigh = mid - 1; \n\t} \n\treturn -1; \n} ",
    "{ \n\tlong low = 1, high = n, mid; \n\tlong count = 0; \n\twhile (low <= high) \n\t{ \n\t\tmid = (low + high) / 2; \n\t\tcount = (mid * (mid + 1)) / 2; \n\t\tif (count == n) \n\t\t\treturn mid; \n\t\telse if (count > n) \n\t\t\thigh = mid - 1; \n\t\telse\n\t\t\tlow = mid + 1; \n\t} \n\treturn -1; \n} ",
    "{ \n    long count = 0; \n    long i = 1; \n    while (count < n) \n    { \n        long triangle = (i * (i + 1)) / 2; \n        long digits = (long)log10(triangle) + 1; \n        if (digits == n) \n            return i; \n        i++; \n    } \n    return -1; \n} ",
    "{ \n\t// Base cases \n\tif (n <= 0) \n\t\treturn 0; \n\tif (n == 1) \n\t\treturn 1; ",
    "{ \n\tlong count = 0; \n\tlong i = 1; \n\twhile (count < n) \n\t{ \n\t\tlong triangle = (i * (i + 1)) / 2; \n\t\tlong digits = (long)log10(triangle) + 1; \n\t\tif (digits == n) \n\t\t\treturn i; \n\t\ti++; \n\t} \n\treturn -1; \n} ",
    "{ \n    long low = 1, high = n; \n    long mid = 0; \n    long ans = 0; \n    while (low <= high) { \n        mid = (low + high) / 2; \n        if (mid * (mid + 1) / 2 >= n * (long)log10(n) - (long)log10(2) + 1) { \n            ans = mid; \n            high = mid - 1; \n        } \n        else\n            low = mid + 1; \n    } \n    return ans; \n} ",
    "{ \n    long low = 1, high = n; \n    long mid = 0; \n    long ans = 0; \n    while (low <= high) \n    { \n        mid = (low + high) / 2; \n        if (mid * (mid + 1) / 2 >= n) \n        { \n            ans = mid; \n            high = mid - 1; \n        } \n        else\n            low = mid + 1; \n    } \n    return ans; \n} ",
    "{ \n\t// Base case \n\tif (n <= 0) \n\t\treturn 0; ",
    "{ \n\t// Initialize low and high for binary search \n\tlong low = 1, high = n; \n\t\n\t// loop till low is less than high \n\twhile (low < high) \n\t{ \n\t\t// Find the mid value \n\t\tlong mid = (low + high) / 2; \n\t\t\n\t\t// If mid triangular number has n digits \n\t\tif (mid * (mid + 1) / 2 >= pow(10, n - 1)) \n\t\t\thigh = mid; \n\t\telse\n\t\t\tlow = mid + 1; \n\t} \n\t\n\treturn low; \n} ",
    "{ \n\tlong count = 0; \n\tlong i = 1; \n\tlong triangularNumber = 0; \n\twhile (count < n) \n\t{ \n\t\ttriangularNumber = triangularNumber + i; \n\t\ti++; \n\t\tcount = countDigits(triangularNumber); \n\t} \n\treturn i - 1; \n} ",
    "{ \n\tlong count = 1; \n\tlong triangularNumber = 0; \n\twhile (count * (count + 1) / 2 < Math.pow(10, n - 1)) \n\t{ \n\t\tcount++; \n\t} \n\treturn count; \n} ",
    "{ \n\t// Base case \n\tif (n <= 0) \n\t\treturn 0; ",
    "{ \n\tlong i = 1; \n\tlong t = 1; \n\twhile (t <= n) \n\t{ \n\t\tt = t * 10; \n\t\ti++; \n\t} \n\treturn i; \n} ",
    "{ \n\tlong count = 0; \n\tlong i = 1; \n\twhile (count < n) \n\t{ \n\t\tlong t = (i * (i + 1)) / 2; \n\t\tlong digits = (long)log10(t) + 1; \n\t\tif (digits == n) \n\t\t\treturn i; \n\t\ti++; \n\t} \n\treturn -1; \n} ",
    "{ \n\tlong low = 1, high = 1000000; \n\tlong mid, ans = 0; \n\twhile (low <= high) \n\t{ \n\t\tmid = (low + high) / 2; \n\t\tlong t = (mid * (mid + 1)) / 2; \n\t\tif (t < 0) \n\t\t\thigh = mid - 1; \n\t\telse if (t >= pow(10, n - 1) && t < pow(10, n)) \n\t\t{ \n\t\t\tans = mid; \n\t\t\thigh = mid - 1; \n\t\t} \n\t\telse if (t < pow(10, n - 1)) \n\t\t\tlow = mid + 1; \n\t\telse\n\t\t\thigh = mid - 1; \n\t} \n\treturn ans; \n} ",
    "{ \n\t// Base cases \n\tif (n <= 0) \n\t\treturn 0; \n\tif (n == 1) \n\t\treturn 1; ",
    "{ \n\tlong count = 0; \n\tlong i = 1; \n\twhile (count < n) \n\t{ \n\t\tlong triangle = (i * (i + 1)) / 2; \n\t\tlong digits = (long)log10(triangle) + 1; \n\t\tif (digits == n) \n\t\t\treturn i; \n\t\ti++; \n\t} \n\treturn -1; \n} ",
    "{ \n\tlong count = 1; \n\tlong triangle = 0; \n\twhile (true) \n\t{ \n\t\ttriangle = (count * (count + 1)) / 2; \n\t\tif (triangle % 10 == 0) \n\t\t\treturn count; \n\t\tcount++; \n\t} \n} ",
    "{ \n\t// base case \n\tif (n <= 0) \n\t\treturn 0; \n\t\n\t// Initialize result \n\tlong sum = 0; \n\t\n\t// Keep incrementing until \n\t// sum of series becomes \n\t// n-digit number \n\tlong i = 1; \n\twhile (true) \n\t{ \n\t\tsum = sum + i; \n\t\t\n\t\t// sum becomes n-digit \n\t\tif (sum > pow(10, n - 1) && \n\t\t\tsum < pow(10, n)) \n\t\t\treturn i; \n\t\t\n\t\ti++; \n\t} \n} ",
    "{ \n    long low = 0, high = n, mid; \n    long ans = 0; \n    while (low <= high) \n    { \n        mid = (low + high) / 2; \n        if (mid * (mid + 1) / 2 >= n) \n        { \n            ans = mid; \n            high = mid - 1; \n        } \n        else\n            low = mid + 1; \n    } \n    return ans; \n} ",
    "{ \n\tlong low = 1, high = 100000; \n\tlong mid = 0; \n\tlong ans = 0; \n\twhile (low <= high) \n\t{ \n\t\tmid = (low + high) / 2; \n\t\tlong t = (mid * (mid + 1)) / 2; \n\t\tif (t >= n) \n\t\t{ \n\t\t\tans = mid; \n\t\t\thigh = mid - 1; \n\t\t} \n\t\telse\n\t\t\tlow = mid + 1; \n\t} \n\treturn ans; \n} ",
    "{ \n\t// base case \n\tif (n == 0) \n\t\treturn 0; ",
    "{ \n\tlong count = 0; \n\tlong i = 1; \n\tlong triangularNumber = 0; \n\twhile (count < n) \n\t{ \n\t\ttriangularNumber = triangularNumber + i; \n\t\ti++; \n\t\tcount = countDigit(triangularNumber); \n\t} \n\treturn i - 1; \n} ",
    "{ \n\tlong low = 1, high = 1000000; \n\tlong mid, ans = -1; \n\twhile (low <= high) \n\t{ \n\t\tmid = (low + high) / 2; \n\t\tlong tri = (mid * (mid + 1)) / 2; \n\t\tif (tri % 1000000 == 0) \n\t\t{ \n\t\t\tans = mid; \n\t\t\tbreak; \n\t\t} \n\t\telse if (tri % 1000000 < 1000000) \n\t\t\tlow = mid + 1; \n\t\telse\n\t\t\thigh = mid - 1; \n\t} \n\treturn ans; \n} ",
    "{ \n    long low = 1, high = 1000000; \n    long mid, ans = 0; \n    while (low <= high) \n    { \n        mid = (low + high) / 2; \n        long t = (mid * (mid + 1)) / 2; \n        if (t >= n) \n        { \n            ans = mid; \n            high = mid - 1; \n        } \n        else\n            low = mid + 1; \n    } \n    return ans; \n} ",
    "{ \n\t// Base case \n\tif (n <= 0) \n\t\treturn 0; ",
    "{ \n    long low = 1, high = n; \n    long mid; \n    while (low <= high) \n    { \n        mid = (low + high) / 2; \n        if (mid * (mid + 1) / 2 >= n * (long)log10(n) - (long)log10(2) + 1) \n            high = mid - 1; \n        else\n            low = mid + 1; \n    } \n    return low; \n} ",
    "{ \n\t// Base cases \n\tif (n <= 0) \n\t\treturn 0; \n\tif (n == 1) \n\t\treturn 1; ",
    "{ \n\t// Base case \n\tif (n <= 0) \n\t\treturn 0; ",
    "{ \n\t// Base cases \n\tif (n <= 0) \n\t\treturn 0; \n\tif (n == 1) \n\t\treturn 1; ",
    "{ \n\tlong count = 0; \n\tlong i = 1; \n\twhile (count < n) \n\t{ \n\t\tlong tri = (i * (i + 1)) / 2; \n\t\tlong digits = (long)log10(tri) + 1; \n\t\tif (digits == n) \n\t\t\treturn i; \n\t\ti++; \n\t} \n\treturn -1; \n} ",
    "{ \n    long low = 1, high = n; \n    long mid, ans = 0; \n  \n    while (low <= high) \n    { \n        mid = (low + high) / 2; \n  \n        if (mid * (mid + 1) / 2 >= n) \n        { \n            ans = mid; \n            high = mid - 1; \n        } \n        else\n            low = mid + 1; \n    } \n  \n    return ans; \n} ",
    "{ \n\t// Base cases \n\tif (n <= 0) \n\t\treturn 0; \n\tif (n == 1) \n\t\treturn 1; ",
    "{ \n\tlong low = 1, high = n, mid; \n\tlong ans = 0; \n\twhile (low <= high) \n\t{ \n\t\tmid = (low + high) / 2; \n\t\tif (mid * (mid + 1) / 2 >= n) \n\t\t{ \n\t\t\tans = mid; \n\t\t\thigh = mid - 1; \n\t\t} \n\t\telse\n\t\t\tlow = mid + 1; \n\t} \n\treturn ans; \n} ",
    "{ \n\tlong i = 1; \n\tlong j = 1; \n\tlong count = 1; \n\twhile (count < n) \n\t{ \n\t\tj = j + 1; \n\t\tcount = count + to!string(j).length; \n\t\tif (count >= n) \n\t\t\tbreak; \n\t\ti = i + 1; \n\t} \n\treturn i; \n} ",
    "{ \n\t// Initialize low and high for binary search \n\tlong low = 1, high = n; \n\tlong ans = 0; \n\twhile (low <= high) \n\t{ \n\t\tlong mid = (low + high) / 2; \n\t\tlong temp = (mid * (mid + 1)) / 2; \n\t\tif (temp >= n) \n\t\t{ \n\t\t\tans = mid; \n\t\t\thigh = mid - 1; \n\t\t} \n\t\telse\n\t\t\tlow = mid + 1; \n\t} \n\treturn ans; \n} ",
    "{ \n    // Initialize low and high for binary search \n    long low = 1, high = n; \n  \n    // loop till low is less than or equal to high \n    while (low <= high) \n    { \n        // Find the mid value \n        long mid = (low + high) / 2; \n  \n        // If mid is perfect square \n        if (mid * (mid + 1) / 2 == n) \n            return mid; \n  \n        // If mid is smaller than n \n        else if (mid * (mid + 1) / 2 < n) \n            low = mid + 1; \n  \n        // If mid is greater than n \n        else\n            high = mid - 1; \n    } \n  \n    return -1; \n} ",
    "{ \n\tlong count = 0; \n\tlong i = 1; \n\tlong triangularNumber = 0; \n\twhile (count < n) \n\t{ \n\t\ttriangularNumber = triangularNumber + i; \n\t\ti++; \n\t\tcount = countDigits(triangularNumber); \n\t} \n\treturn (i - 1); \n} ",
    "{ \n\t// Base case \n\tif (n <= 0) \n\t\treturn 0; ",
    "{ \n    // Initialize low and high for binary search \n    long low = 1, high = n; \n  \n    // loop till low is less than or equal to high \n    while (low <= high) \n    { \n        // Find the mid value \n        long mid = (low + high) / 2; \n  \n        // If mid is perfect square \n        if (mid * (mid + 1) / 2 == n) \n            return mid; \n  \n        // If mid is smaller than n \n        else if (mid * (mid + 1) / 2 < n) \n            low = mid + 1; \n  \n        // If mid is greater than n \n        else\n            high = mid - 1; \n    } \n  \n    return -1; \n} ",
    "{ \n\t// Base cases \n\tif (n <= 0) \n\t\treturn 0; \n\tif (n == 1) \n\t\treturn 1; ",
    "{ \n\tlong count = 0; \n\tlong i = 1; \n\tlong triangularNumber = 0; \n\twhile (count < n) \n\t{ \n\t\ttriangularNumber = triangularNumber + i; \n\t\ti++; \n\t\tcount = (long)log10(triangularNumber) + 1; \n\t} \n\treturn i - 1; \n} ",
    "{ \n    long i = 1; \n    long tri = 0; \n    while (true) \n    { \n        tri = (i * (i + 1)) / 2; \n        if (tri % (long)pow(10, n - 1) == 0) \n            break; \n        i++; \n    } \n    return i; \n} ",
    "{ \n    long count = 1; \n    long triangularNumber = 1; \n    while (count * (count + 1) / 2 < Math.pow(10, n - 1)) \n    { \n        count++; \n        triangularNumber = count * (count + 1) / 2; \n    } \n    return count; \n} ",
    "{ \n\tlong count = 0; \n\tlong i = 1; \n\twhile (count < n) \n\t{ \n\t\tlong t = (i * (i + 1)) / 2; \n\t\tif (t < 0) \n\t\t\treturn -1; \n\t\tif (t > 0 && t < 10) \n\t\t\tcount++; \n\t\telse if (t > 9 && t < 100) \n\t\t\tcount += 2; \n\t\telse if (t > 99 && t < 1000) \n\t\t\tcount += 3; \n\t\telse if (t > 999 && t < 10000) \n\t\t\tcount += 4; \n\t\telse if (t > 9999 && t < 100000) \n\t\t\tcount += 5; \n\t\telse if (t > 99999 && t < 1000000) \n\t\t\tcount += 6; \n\t\telse if (t > 999999 && t < 10000000) \n\t\t\tcount += 7; \n\t\telse if (t > 9999999 && t < 100000000) \n\t\t\tcount += 8; \n\t\telse if (t > 99999999 && t < 1000000000) \n\t\t\tcount += 9; \n\t\telse if (t > 999999999 && t < 10000000000) \n\t\t\tcount += 10; \n\t\ti++; \n\t} \n\treturn i - 1; \n} ",
    "{ \n\tlong low = 1, high = 1000000; \n\tlong mid, ans = 0; \n\twhile (low <= high) \n\t{ \n\t\tmid = (low + high) / 2; \n\t\tlong tri = (mid * (mid + 1)) / 2; \n\t\tif (tri < n) \n\t\t{ \n\t\t\tlow = mid + 1; \n\t\t\tans = mid; \n\t\t} \n\t\telse if (tri > n) \n\t\t\thigh = mid - 1; \n\t\telse\n\t\t\treturn mid; \n\t} \n\treturn ans; \n} ",
    "{ \n\t// Base cases \n\tif (n <= 0) \n\t\treturn 0; \n\tif (n == 1) \n\t\treturn 1; ",
    "{ \n\tlong low = 1, high = n; \n\tlong mid = 0; \n\tlong ans = 0; \n\twhile (low <= high) \n\t{ \n\t\tmid = (low + high) / 2; \n\t\tif (mid * (mid + 1) / 2 >= n) \n\t\t{ \n\t\t\tans = mid; \n\t\t\thigh = mid - 1; \n\t\t} \n\t\telse\n\t\t\tlow = mid + 1; \n\t} \n\treturn ans; \n} ",
    "{ \n\t// Initialize low and high for binary search \n\tlong low = 1, high = n; \n\tlong ans = 0; \n\t\n\t// Do binary search for floor(sqrt(n)) \n\twhile (low <= high) \n\t{ \n\t\tlong mid = (low + high) / 2; \n\t\t\n\t\t// If n is a triangular number \n\t\tif (mid * (mid + 1) / 2 == n) \n\t\t\treturn mid; \n\t\t\n\t\t// If n is less than the current mid \n\t\t// consider the left half \n\t\telse if (mid * (mid + 1) / 2 > n) \n\t\t\thigh = mid - 1; \n\t\t\n\t\t// If n is more than the current mid \n\t\t// consider the right half \n\t\telse\n\t\t{ \n\t\t\tlow = mid + 1; \n\t\t\tans = mid; \n\t\t} \n\t} \n\t\n\treturn ans; \n} ",
    "{ \n    long low = 1, high = n; \n    long mid = 0; \n    long ans = 0; \n    while (low <= high) \n    { \n        mid = (low + high) / 2; \n        if (mid * (mid + 1) / 2 >= n * (long)log10(n) - n * log10(2) + 1) \n        { \n            ans = mid; \n            high = mid - 1; \n        } \n        else\n            low = mid + 1; \n    } \n    return ans; \n} ",
    "{ \n\tlong count = 0; \n\tlong i = 1; \n\tlong triangularNumber = 0; \n\twhile (count < n) \n\t{ \n\t\ttriangularNumber = triangularNumber + i; \n\t\ti++; \n\t\tcount = count_digits(triangularNumber); \n\t} \n\treturn i - 1; \n} ",
    "{ \n\t// base case \n\tif (n <= 0) \n\t\treturn 0; ",
    "{ \n\t// Base case \n\tif (n <= 0) \n\t\treturn 0; \n\t\n\t// Initialize result \n\tlong sum = 0; \n\tlong i = 1; \n\t\n\t// Add natural numbers upto \n\t// n and check for triangular \n\t// number \n\twhile (true) \n\t{ \n\t\tsum = sum + i; \n\t\t\n\t\t// If n-digit triangular number \n\t\tif (sum == n * (n + 1) / 2) \n\t\t\treturn i; \n\t\t\n\t\t// If n-digit triangular number \n\t\t// is not found then increment \n\t\t// i by 1 \n\t\ti++; \n\t} \n} ",
    "{ \n\t// Base case \n\tif (n <= 0) \n\t\treturn 0; \n\t\n\t// A triangular number is n*(n+1)/2. The \n\t// index of minimum number with n digits is \n\t// pow(10, n-1) as minimum number will be \n\t// 10^(n-1) + 1. \n\tlong index = pow(10, n - 1); \n\t\n\t// find the count of digits in index'th \n\t// triangular number \n\tlong count = count_digits(index * (index + 1) / 2); \n\t\n\t// If count of digits in index'th triangular \n\t// number is not equal to n, then triangular \n\t// number is not n digit number. So, we need \n\t// to find the triangular number with n-1 \n\t// digits. \n\tif (count > n) \n\t\treturn find_Index(n - 1); \n\t\n\t// If count of digits in index'th triangular \n\t// number is equal to n, then we need to find \n\t// the triangular number with n+1 digits. \n\telse if (count < n) \n\t\treturn find_Index(n + 1); \n\t\n\t// If count of digits in index'th triangular \n\t// number is equal to n, then we have found \n\t// the index. \n\telse\n\t\treturn index; \n} ",
    "{ \n\t// Base case \n\tif (n <= 0) \n\t\treturn 0; ",
    "{ \n    long a = 45 * n * n + 26 * n + 7; \n    long b = 15 * n * n + 14 * n + 4; \n    long c = a / b; \n    return c; \n} ",
    "{ \n\t// base case \n\tif (n == 0) \n\t\treturn 0; "
  ]
}