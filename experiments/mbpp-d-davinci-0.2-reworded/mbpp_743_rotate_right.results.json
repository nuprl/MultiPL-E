{
  "name": "mbpp_743_rotate_right",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_743_rotate_right.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result = new long[list.length];\n\tlong[] temp = new long[m];\n\t\n\tfor (long i = 0; i < m; i++)\n\t{\n\t\ttemp[i] = list[list.length - m + i];\n\t}\n\t\n\tfor (long i = 0; i < list.length - m; i++)\n\t{\n\t\tresult[i] = list[i];\n\t}\n\t\n\tfor (long i = 0; i < m; i++)\n\t{\n\t\tresult[list.length - m + i] = temp[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5emgk652.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x4285cd]\n??:? void tmp5emgk652.__unittest_L30_C1() [0x4280af]\n??:? void tmp5emgk652.__modtest() [0x42834c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c687]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b51a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c54]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430731]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4f1]\n??:? runModuleUnitTests [0x42c45d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a90]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] new_list = new long[list.length];\n\tlong[] temp = new long[m];\n\tlong[] temp2 = new long[list.length - m];\n\t\n\tfor(long i = 0; i < m; i++)\n\t{\n\t\ttemp[i] = list[i];\n\t}\n\t\n\tfor(long i = m; i < list.length; i++)\n\t{\n\t\ttemp2[i - m] = list[i];\n\t}\n\t\n\tfor(long i = 0; i < list.length - m; i++)\n\t{\n\t\tnew_list[i] = temp2[i];\n\t}\n\t\n\tfor(long i = list.length - m; i < list.length; i++)\n\t{\n\t\tnew_list[i] = temp[i - (list.length - m)];\n\t}\n\t\n\treturn new_list;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpbx53fzz6.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x428655]\n??:? void tmpbx53fzz6.__unittest_L36_C1() [0x42813b]\n??:? void tmpbx53fzz6.__modtest() [0x4283d8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c70f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5a2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43082d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430cdc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4307b9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b579]\n??:? runModuleUnitTests [0x42c4e5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b18]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result = new long[list.length];\n\tlong[] temp = new long[m];\n\t\n\tfor (long i = 0; i < m; i++)\n\t\ttemp[i] = list[list.length - m + i];\n\t\n\tfor (long i = 0; i < list.length - m; i++)\n\t\tresult[i] = list[i];\n\t\n\tfor (long i = 0; i < m; i++)\n\t\tresult[list.length - m + i] = temp[i];\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp2pot2lqp.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x4285cd]\n??:? void tmp2pot2lqp.__unittest_L24_C1() [0x4280af]\n??:? void tmp2pot2lqp.__modtest() [0x42834c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c687]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b51a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c54]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430731]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4f1]\n??:? runModuleUnitTests [0x42c45d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a90]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result = new long[list.length];\n\tlong[] temp = new long[m];\n\tlong[] temp2 = new long[list.length - m];\n\t\n\tfor (long i = 0; i < m; i++)\n\t\ttemp[i] = list[i];\n\t\n\tfor (long i = 0; i < list.length - m; i++)\n\t\ttemp2[i] = list[i + m];\n\t\n\tfor (long i = 0; i < list.length - m; i++)\n\t\tresult[i] = temp2[i];\n\t\n\tfor (long i = 0; i < m; i++)\n\t\tresult[i + list.length - m] = temp[i];\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpb3uxsasr.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x42865d]\n??:? void tmpb3uxsasr.__unittest_L28_C1() [0x42813f]\n??:? void tmpb3uxsasr.__modtest() [0x4283dc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c717]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5aa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430835]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ce4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4307c1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b581]\n??:? runModuleUnitTests [0x42c4ed]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b20]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result = new long[list.length];\n\tlong[] temp = new long[m];\n\tlong[] temp2 = new long[list.length - m];\n\t\n\tforeach(i; 0..m)\n\t\ttemp[i] = list[i];\n\t\n\tforeach(i; m..list.length)\n\t\ttemp2[i - m] = list[i];\n\t\n\tforeach(i; 0..list.length - m)\n\t\tresult[i] = temp2[i];\n\t\n\tforeach(i; list.length - m..list.length)\n\t\tresult[i] = temp[i - (list.length - m)];\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3k4x5e5r.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4286dd]\n??:? void tmp3k4x5e5r.__unittest_L28_C1() [0x4281bf]\n??:? void tmp3k4x5e5r.__modtest() [0x42845c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c797]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b62a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4308b5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d64]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430841]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b601]\n??:? runModuleUnitTests [0x42c56d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ba0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] ret = new long[list.length];\n\tlong[] temp = new long[m];\n\t\n\tfor (long i = 0; i < m; i++)\n\t{\n\t\ttemp[i] = list[list.length - m + i];\n\t}\n\t\n\tfor (long i = 0; i < list.length - m; i++)\n\t{\n\t\tret[i] = list[i];\n\t}\n\t\n\tfor (long i = 0; i < m; i++)\n\t{\n\t\tret[list.length - m + i] = temp[i];\n\t}\n\t\n\treturn ret;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp6lwnsdjq.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x4285cd]\n??:? void tmp6lwnsdjq.__unittest_L30_C1() [0x4280af]\n??:? void tmp6lwnsdjq.__modtest() [0x42834c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c687]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b51a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c54]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430731]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4f1]\n??:? runModuleUnitTests [0x42c45d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a90]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result = new long[list.length];\n\tlong[] temp = new long[m];\n\tlong[] temp2 = new long[list.length - m];\n\t\n\tfor(long i = 0; i < m; i++)\n\t{\n\t\ttemp[i] = list[i];\n\t}\n\t\n\tfor(long i = 0; i < list.length - m; i++)\n\t{\n\t\ttemp2[i] = list[i + m];\n\t}\n\t\n\tfor(long i = 0; i < list.length - m; i++)\n\t{\n\t\tresult[i] = temp2[i];\n\t}\n\t\n\tfor(long i = 0; i < m; i++)\n\t{\n\t\tresult[i + list.length - m] = temp[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpaajve53q.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x42865d]\n??:? void tmpaajve53q.__unittest_L36_C1() [0x42813f]\n??:? void tmpaajve53q.__modtest() [0x4283dc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c717]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5aa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430835]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ce4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4307c1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b581]\n??:? runModuleUnitTests [0x42c4ed]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b20]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result = new long[list.length];\n\tlong[] temp = new long[m];\n\tlong[] temp2 = new long[list.length - m];\n\t\n\tfor(long i = 0; i < m; i++)\n\t{\n\t\ttemp[i] = list[i];\n\t}\n\t\n\tlong j = 0;\n\tfor(long i = m; i < list.length; i++)\n\t{\n\t\ttemp2[j] = list[i];\n\t\tj++;\n\t}\n\t\n\tfor(long i = 0; i < temp2.length; i++)\n\t{\n\t\tresult[i] = temp2[i];\n\t}\n\t\n\tfor(long i = 0; i < temp.length; i++)\n\t{\n\t\tresult[temp2.length + i] = temp[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpc1_8rjap.d(42): unittest failure\n----------------\n??:? _d_unittestp [0x42865d]\n??:? void tmpc1_8rjap.__unittest_L38_C1() [0x42813f]\n??:? void tmpc1_8rjap.__modtest() [0x4283dc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c717]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5aa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430835]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ce4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4307c1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b581]\n??:? runModuleUnitTests [0x42c4ed]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b20]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result = new long[list.length];\n\tlong[] temp = new long[m];\n\tlong[] temp2 = new long[list.length - m];\n\t\n\tfor(long i = 0; i < m; i++)\n\t{\n\t\ttemp[i] = list[i];\n\t}\n\t\n\tfor(long i = m; i < list.length; i++)\n\t{\n\t\ttemp2[i - m] = list[i];\n\t}\n\t\n\tfor(long i = 0; i < temp2.length; i++)\n\t{\n\t\tresult[i] = temp2[i];\n\t}\n\t\n\tfor(long i = 0; i < temp.length; i++)\n\t{\n\t\tresult[temp2.length + i] = temp[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp4x46xp_a.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x42864d]\n??:? void tmp4x46xp_a.__unittest_L36_C1() [0x428133]\n??:? void tmp4x46xp_a.__modtest() [0x4283d0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c707]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b59a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430825]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430cd4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4307b1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b571]\n??:? runModuleUnitTests [0x42c4dd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b10]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] ret = new long[list.length];\n\tfor (long i = 0; i < list.length; i++)\n\t{\n\t\tret[(i + m) % list.length] = list[i];\n\t}\n\treturn ret;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result = new long[list.length];\n\tlong[] tmp = new long[m];\n\t\n\tfor(long i = 0; i < m; i++)\n\t{\n\t\ttmp[i] = list[list.length - m + i];\n\t}\n\t\n\tfor(long i = 0; i < list.length - m; i++)\n\t{\n\t\tresult[i] = list[i];\n\t}\n\t\n\tfor(long i = 0; i < m; i++)\n\t{\n\t\tresult[list.length - m + i] = tmp[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjppc1tuq.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x4285cd]\n??:? void tmpjppc1tuq.__unittest_L30_C1() [0x4280af]\n??:? void tmpjppc1tuq.__modtest() [0x42834c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c687]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b51a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c54]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430731]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4f1]\n??:? runModuleUnitTests [0x42c45d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a90]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result = new long[list.length];\n\tfor(long i = 0; i < list.length; i++)\n\t{\n\t\tresult[(i + m) % list.length] = list[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{ \n\tlong[] res = new long[list.length]; \n\tfor (long i = 0; i < list.length; i++) \n\t\tres[(int)((i + m) % list.length)] = list[(int)i]; \n\treturn res; \n} \nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517282,
      "stdout": "",
      "stderr": "/tmp/tmp8kmjj41b.d(12): Error: C style cast illegal, use `cast(int)((i + m) % list.length)`\n/tmp/tmp8kmjj41b.d(12): Error: C style cast illegal, use `cast(int)i`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8kmjj41b.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result = new long[list.length];\n\tfor (long i = 0; i < list.length; i++) \n\t{\n\t\tresult[(i + m) % list.length] = list[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result = new long[list.length];\n\tlong[] temp = new long[list.length];\n\t\n\ttemp = list.dup;\n\t\n\tfor(long i = 0; i < list.length; i++)\n\t{\n\t\tresult[i] = temp[(i + m) % list.length];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpc_bls792.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x429679]\n??:? void tmpc_bls792.__unittest_L22_C1() [0x4281db]\n??:? void tmpc_bls792.__modtest() [0x4285ec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e293]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429302]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b01d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b0ac]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42afa9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x4292d9]\n??:? runModuleUnitTests [0x42e069]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429b90]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result = new long[list.length];\n\tlong[] temp = new long[m];\n\tlong[] temp2 = new long[list.length - m];\n\t\n\tfor (long i = 0; i < m; i++)\n\t{\n\t\ttemp[i] = list[i];\n\t}\n\t\n\tfor (long i = 0; i < list.length - m; i++)\n\t{\n\t\ttemp2[i] = list[i + m];\n\t}\n\t\n\tfor (long i = 0; i < list.length - m; i++)\n\t{\n\t\tresult[i] = temp2[i];\n\t}\n\t\n\tfor (long i = 0; i < m; i++)\n\t{\n\t\tresult[i + list.length - m] = temp[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpnchjlsu6.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x42865d]\n??:? void tmpnchjlsu6.__unittest_L36_C1() [0x42813f]\n??:? void tmpnchjlsu6.__modtest() [0x4283dc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c717]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5aa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430835]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ce4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4307c1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b581]\n??:? runModuleUnitTests [0x42c4ed]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b20]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result = new long[list.length];\n\tlong[] temp = new long[m];\n\t\n\tfor (long i = 0; i < m; i++) \n\t{\n\t\ttemp[i] = list[i];\n\t}\n\t\n\tfor (long i = 0; i < list.length - m; i++) \n\t{\n\t\tresult[i] = list[i + m];\n\t}\n\t\n\tfor (long i = 0; i < m; i++) \n\t{\n\t\tresult[list.length - m + i] = temp[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpnco7yvo8.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x4285cd]\n??:? void tmpnco7yvo8.__unittest_L30_C1() [0x4280af]\n??:? void tmpnco7yvo8.__modtest() [0x42834c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c687]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b51a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c54]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430731]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4f1]\n??:? runModuleUnitTests [0x42c45d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a90]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{ \n\tlong[] result = new long[list.length];\n\t\n\tforeach(i, e; list)\n\t{\n\t\tresult[(i + m) % list.length] = e;\n\t}\n\t\n\treturn result;\n} \nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] ret = new long[list.length];\n\tforeach(i, e; list)\n\t{\n\t\tret[(i + m) % list.length] = e;\n\t}\n\treturn ret;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] temp = new long[list.length];\n\tlong[] temp2 = new long[list.length];\n\t\n\tfor(long i = 0; i < list.length; i++)\n\t{\n\t\ttemp[i] = list[i];\n\t}\n\t\n\tfor(long i = 0; i < list.length; i++)\n\t{\n\t\ttemp2[i] = temp[(i + m) % list.length];\n\t}\n\t\n\treturn temp2;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpnoifekxo.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x428565]\n??:? void tmpnoifekxo.__unittest_L25_C1() [0x428047]\n??:? void tmpnoifekxo.__modtest() [0x4282e4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c61f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4b2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43073d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430bec]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4306c9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b489]\n??:? runModuleUnitTests [0x42c3f5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a28]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] new_list = new long[list.length];\n\tlong[] list_1 = new long[list.length];\n\tlong[] list_2 = new long[list.length];\n\t\n\tif (m > list.length)\n\t{\n\t\tm = m % list.length;\n\t}\n\t\n\tlist_1 = list[0..m];\n\tlist_2 = list[m..$];\n\t\n\tnew_list = list_2 ~ list_1;\n\t\n\treturn new_list;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666122588,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpj8xw13tu.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x42850d]\n??:? void tmpj8xw13tu.__unittest_L26_C1() [0x427fef]\n??:? void tmpj8xw13tu.__modtest() [0x42828c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c70f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5a2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4306e5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b94]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430671]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b579]\n??:? runModuleUnitTests [0x42c4e5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4289d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result = new long[list.length];\n\tlong[] temp = new long[m];\n\tlong[] temp2 = new long[list.length - m];\n\t\n\tfor(int i = 0; i < m; i++)\n\t{\n\t\ttemp[i] = list[i];\n\t}\n\t\n\tfor(int i = m; i < list.length; i++)\n\t{\n\t\ttemp2[i - m] = list[i];\n\t}\n\t\n\tfor(int i = 0; i < temp2.length; i++)\n\t{\n\t\tresult[i] = temp2[i];\n\t}\n\t\n\tfor(int i = 0; i < temp.length; i++)\n\t{\n\t\tresult[i + temp2.length] = temp[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666122587,
      "stdout": "",
      "stderr": "/tmp/tmp2y1w5lp4.d(19): Error: cannot implicitly convert expression `m` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2y1w5lp4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result = new long[list.length];\n\tlong[] temp = new long[m];\n\tlong[] temp2 = new long[list.length - m];\n\t\n\tfor (long i = 0; i < m; i++)\n\t{\n\t\ttemp[i] = list[i];\n\t}\n\t\n\tfor (long i = m; i < list.length; i++)\n\t{\n\t\ttemp2[i - m] = list[i];\n\t}\n\t\n\tfor (long i = 0; i < list.length - m; i++)\n\t{\n\t\tresult[i] = temp2[i];\n\t}\n\t\n\tfor (long i = list.length - m; i < list.length; i++)\n\t{\n\t\tresult[i] = temp[i - (list.length - m)];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666122588,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqc05btci.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x428655]\n??:? void tmpqc05btci.__unittest_L36_C1() [0x42813b]\n??:? void tmpqc05btci.__modtest() [0x4283d8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c70f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5a2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43082d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430cdc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4307b9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b579]\n??:? runModuleUnitTests [0x42c4e5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b18]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result = new long[list.length];\n\tlong[] temp = new long[m];\n\tlong[] temp2 = new long[list.length - m];\n\t\n\tfor(long i = 0; i < m; i++)\n\t{\n\t\ttemp[i] = list[i];\n\t}\n\t\n\tfor(long i = 0; i < list.length - m; i++)\n\t{\n\t\ttemp2[i] = list[i + m];\n\t}\n\t\n\tfor(long i = 0; i < list.length - m; i++)\n\t{\n\t\tresult[i] = temp2[i];\n\t}\n\t\n\tfor(long i = 0; i < m; i++)\n\t{\n\t\tresult[list.length - m + i] = temp[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666122588,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpsc237bkn.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x42865d]\n??:? void tmpsc237bkn.__unittest_L36_C1() [0x42813f]\n??:? void tmpsc237bkn.__modtest() [0x4283dc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c717]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5aa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430835]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ce4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4307c1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b581]\n??:? runModuleUnitTests [0x42c4ed]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b20]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result = new long[list.length];\n\tlong[] temp = new long[m];\n\t\n\tfor (long i = 0; i < m; i++)\n\t{\n\t\ttemp[i] = list[i];\n\t}\n\t\n\tfor (long i = 0; i < list.length - m; i++)\n\t{\n\t\tresult[i] = list[i + m];\n\t}\n\t\n\tfor (long i = 0; i < m; i++)\n\t{\n\t\tresult[list.length - m + i] = temp[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666122588,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp0cu55wjz.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x4285cd]\n??:? void tmp0cu55wjz.__unittest_L30_C1() [0x4280af]\n??:? void tmp0cu55wjz.__modtest() [0x42834c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c687]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b51a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c54]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430731]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4f1]\n??:? runModuleUnitTests [0x42c45d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a90]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result = new long[list.length];\n\tlong[] temp = new long[m];\n\tlong[] temp2 = new long[list.length - m];\n\t\n\tfor(long i = 0; i < m; i++)\n\t{\n\t\ttemp[i] = list[i];\n\t}\n\t\n\tfor(long i = m; i < list.length; i++)\n\t{\n\t\ttemp2[i - m] = list[i];\n\t}\n\t\n\tfor(long i = 0; i < list.length - m; i++)\n\t{\n\t\tresult[i] = temp2[i];\n\t}\n\t\n\tfor(long i = list.length - m; i < list.length; i++)\n\t{\n\t\tresult[i] = temp[i - (list.length - m)];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666122588,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpq8s_fij4.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x428655]\n??:? void tmpq8s_fij4.__unittest_L36_C1() [0x42813b]\n??:? void tmpq8s_fij4.__modtest() [0x4283d8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c70f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5a2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43082d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430cdc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4307b9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b579]\n??:? runModuleUnitTests [0x42c4e5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b18]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result = new long[list.length];\n\tlong[] temp = new long[m];\n\tlong[] temp2 = new long[list.length - m];\n\t\n\tfor(long i = 0; i < m; i++)\n\t{\n\t\ttemp[i] = list[i];\n\t}\n\t\n\tfor(long i = 0; i < list.length - m; i++)\n\t{\n\t\ttemp2[i] = list[i + m];\n\t}\n\t\n\tfor(long i = 0; i < list.length - m; i++)\n\t{\n\t\tresult[i] = temp2[i];\n\t}\n\t\n\tfor(long i = 0; i < m; i++)\n\t{\n\t\tresult[i + list.length - m] = temp[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpaajve53q.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x42865d]\n??:? void tmpaajve53q.__unittest_L36_C1() [0x42813f]\n??:? void tmpaajve53q.__modtest() [0x4283dc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c717]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5aa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430835]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ce4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4307c1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b581]\n??:? runModuleUnitTests [0x42c4ed]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b20]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result = new long[list.length];\n\tfor (long i = 0; i < list.length; i++) \n\t{\n\t\tresult[(i + m) % list.length] = list[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] ret = new long[list.length];\n\tfor (long i = 0; i < list.length; i++)\n\t{\n\t\tret[(i + m) % list.length] = list[i];\n\t}\n\treturn ret;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] temp = new long[m];\n\tlong[] result = new long[list.length];\n\t\n\tfor (long i = 0; i < m; i++) \n\t{\n\t\ttemp[i] = list[i];\n\t}\n\t\n\tfor (long i = 0; i < list.length - m; i++) \n\t{\n\t\tresult[i] = list[i + m];\n\t}\n\t\n\tfor (long i = 0; i < m; i++) \n\t{\n\t\tresult[i + list.length - m] = temp[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666122588,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpoh86kfcl.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x4285cd]\n??:? void tmpoh86kfcl.__unittest_L30_C1() [0x4280af]\n??:? void tmpoh86kfcl.__modtest() [0x42834c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c687]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b51a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c54]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430731]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4f1]\n??:? runModuleUnitTests [0x42c45d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a90]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result = new long[list.length];\n\tlong[] temp = new long[m];\n\tlong[] temp2 = new long[list.length - m];\n\t\n\tfor (long i = 0; i < m; i++)\n\t{\n\t\ttemp[i] = list[i];\n\t}\n\t\n\tfor (long i = 0; i < list.length - m; i++)\n\t{\n\t\ttemp2[i] = list[i + m];\n\t}\n\t\n\tfor (long i = 0; i < list.length - m; i++)\n\t{\n\t\tresult[i] = temp2[i];\n\t}\n\t\n\tfor (long i = 0; i < m; i++)\n\t{\n\t\tresult[i + list.length - m] = temp[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpnchjlsu6.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x42865d]\n??:? void tmpnchjlsu6.__unittest_L36_C1() [0x42813f]\n??:? void tmpnchjlsu6.__modtest() [0x4283dc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c717]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5aa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430835]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ce4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4307c1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b581]\n??:? runModuleUnitTests [0x42c4ed]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b20]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] new_list = new long[list.length];\n\tlong i = 0;\n\tforeach(long item; list)\n\t{\n\t\tnew_list[(i + m) % list.length] = item;\n\t\ti++;\n\t}\n\treturn new_list;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666122588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result = new long[list.length];\n\tlong[] temp = new long[list.length];\n\t\n\tfor (long i = 0; i < list.length; i++)\n\t{\n\t\ttemp[i] = list[i];\n\t}\n\t\n\tfor (long i = 0; i < list.length; i++)\n\t{\n\t\tresult[i] = temp[(i + m) % list.length];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666122588,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjo3z0qlp.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x428565]\n??:? void tmpjo3z0qlp.__unittest_L25_C1() [0x428047]\n??:? void tmpjo3z0qlp.__modtest() [0x4282e4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c61f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4b2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43073d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430bec]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4306c9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b489]\n??:? runModuleUnitTests [0x42c3f5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a28]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result = new long[list.length];\n\tforeach(i; 0..list.length)\n\t{\n\t\tresult[(i + m) % list.length] = list[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666122588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result = new long[list.length];\n\tlong[] temp = new long[m];\n\tlong[] temp2 = new long[list.length - m];\n\t\n\tfor(long i = 0; i < m; i++)\n\t{\n\t\ttemp[i] = list[i];\n\t}\n\t\n\tfor(long i = 0; i < list.length - m; i++)\n\t{\n\t\ttemp2[i] = list[m + i];\n\t}\n\t\n\tfor(long i = 0; i < list.length - m; i++)\n\t{\n\t\tresult[i] = temp2[i];\n\t}\n\t\n\tfor(long i = 0; i < m; i++)\n\t{\n\t\tresult[list.length - m + i] = temp[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666122588,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpx_kgeazf.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x42865d]\n??:? void tmpx_kgeazf.__unittest_L36_C1() [0x42813f]\n??:? void tmpx_kgeazf.__modtest() [0x4283dc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c717]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5aa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430835]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ce4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4307c1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b581]\n??:? runModuleUnitTests [0x42c4ed]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b20]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result = new long[list.length];\n\tlong[] temp = new long[m];\n\tlong[] temp2 = new long[list.length - m];\n\t\n\tfor(long i = 0; i < m; i++)\n\t{\n\t\ttemp[i] = list[i];\n\t}\n\t\n\tfor(long i = m; i < list.length; i++)\n\t{\n\t\ttemp2[i - m] = list[i];\n\t}\n\t\n\tfor(long i = 0; i < list.length - m; i++)\n\t{\n\t\tresult[i] = temp2[i];\n\t}\n\t\n\tfor(long i = list.length - m; i < list.length; i++)\n\t{\n\t\tresult[i] = temp[i - (list.length - m)];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666122588,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpq8s_fij4.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x428655]\n??:? void tmpq8s_fij4.__unittest_L36_C1() [0x42813b]\n??:? void tmpq8s_fij4.__modtest() [0x4283d8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c70f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5a2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43082d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430cdc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4307b9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b579]\n??:? runModuleUnitTests [0x42c4e5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b18]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] ret = new long[list.length];\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong n = list.length;\n\t\n\twhile(i < n)\n\t{\n\t\tj = (i + m) % n;\n\t\tret[j] = list[i];\n\t\ti++;\n\t}\n\t\n\treturn ret;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666122588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] new_list = new long[list.length];\n\tlong[] temp = new long[m];\n\tlong[] temp2 = new long[list.length - m];\n\t\n\tfor(long i = 0; i < m; i++)\n\t{\n\t\ttemp[i] = list[i];\n\t}\n\t\n\tfor(long i = 0; i < list.length - m; i++)\n\t{\n\t\ttemp2[i] = list[i + m];\n\t}\n\t\n\tfor(long i = 0; i < list.length - m; i++)\n\t{\n\t\tnew_list[i] = temp2[i];\n\t}\n\t\n\tfor(long i = 0; i < m; i++)\n\t{\n\t\tnew_list[i + list.length - m] = temp[i];\n\t}\n\t\n\treturn new_list;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666122588,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpob4hqkje.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x42865d]\n??:? void tmpob4hqkje.__unittest_L36_C1() [0x42813f]\n??:? void tmpob4hqkje.__modtest() [0x4283dc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c717]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5aa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430835]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ce4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4307c1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b581]\n??:? runModuleUnitTests [0x42c4ed]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b20]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] new_list = new long[list.length];\n\tlong[] temp = new long[m];\n\tlong[] temp2 = new long[list.length - m];\n\t\n\tfor (long i = 0; i < m; i++)\n\t{\n\t\ttemp[i] = list[i];\n\t}\n\t\n\tfor (long i = 0; i < list.length - m; i++)\n\t{\n\t\ttemp2[i] = list[i + m];\n\t}\n\t\n\tfor (long i = 0; i < list.length - m; i++)\n\t{\n\t\tnew_list[i] = temp2[i];\n\t}\n\t\n\tfor (long i = 0; i < m; i++)\n\t{\n\t\tnew_list[i + list.length - m] = temp[i];\n\t}\n\t\n\treturn new_list;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666122588,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp2wknswbf.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x42865d]\n??:? void tmp2wknswbf.__unittest_L36_C1() [0x42813f]\n??:? void tmp2wknswbf.__modtest() [0x4283dc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c717]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5aa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430835]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ce4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4307c1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b581]\n??:? runModuleUnitTests [0x42c4ed]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b20]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result = new long[list.length];\n\tlong[] temp = new long[m];\n\tfor (long i = 0; i < m; i++)\n\t{\n\t\ttemp[i] = list[i];\n\t}\n\tfor (long i = m; i < list.length; i++)\n\t{\n\t\tresult[i - m] = list[i];\n\t}\n\tfor (long i = 0; i < m; i++)\n\t{\n\t\tresult[list.length - m + i] = temp[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666122588,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp0l9qce9o.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x4285c5]\n??:? void tmp0l9qce9o.__unittest_L26_C1() [0x4280ab]\n??:? void tmp0l9qce9o.__modtest() [0x428348]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c67f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b512]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43079d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c4c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430729]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4e9]\n??:? runModuleUnitTests [0x42c455]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a88]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result = new long[list.length];\n\tlong[] temp = new long[m];\n\t\n\tfor(long i = 0; i < m; i++)\n\t{\n\t\ttemp[i] = list[list.length - m + i];\n\t}\n\t\n\tfor(long i = 0; i < list.length - m; i++)\n\t{\n\t\tresult[i] = list[i];\n\t}\n\t\n\tfor(long i = 0; i < m; i++)\n\t{\n\t\tresult[list.length - m + i] = temp[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666122588,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpf1lms3kn.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x4285cd]\n??:? void tmpf1lms3kn.__unittest_L30_C1() [0x4280af]\n??:? void tmpf1lms3kn.__modtest() [0x42834c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c687]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b51a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c54]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430731]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4f1]\n??:? runModuleUnitTests [0x42c45d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a90]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result = new long[list.length];\n\tlong[] temp = new long[m];\n\tlong[] temp2 = new long[list.length - m];\n\t\n\tfor (long i = 0; i < m; i++)\n\t{\n\t\ttemp[i] = list[i];\n\t}\n\t\n\tfor (long i = m; i < list.length; i++)\n\t{\n\t\ttemp2[i - m] = list[i];\n\t}\n\t\n\tfor (long i = 0; i < temp2.length; i++)\n\t{\n\t\tresult[i] = temp2[i];\n\t}\n\t\n\tfor (long i = 0; i < temp.length; i++)\n\t{\n\t\tresult[i + temp2.length] = temp[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666122588,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpc9l3h5o3.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x42864d]\n??:? void tmpc9l3h5o3.__unittest_L36_C1() [0x428133]\n??:? void tmpc9l3h5o3.__modtest() [0x4283d0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c707]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b59a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430825]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430cd4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4307b1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b571]\n??:? runModuleUnitTests [0x42c4dd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b10]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{ \n\tlong[] result = new long[list.length];\n\tlong[] temp = new long[m];\n\t\n\tfor(long i = 0; i < m; i++)\n\t{\n\t\ttemp[i] = list[list.length - m + i];\n\t}\n\t\n\tfor(long i = 0; i < list.length - m; i++)\n\t{\n\t\tresult[i] = list[i];\n\t}\n\t\n\tfor(long i = 0; i < m; i++)\n\t{\n\t\tresult[list.length - m + i] = temp[i];\n\t}\n\t\n\treturn result;\n} \nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666122588,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpwo999aq9.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x4285cd]\n??:? void tmpwo999aq9.__unittest_L30_C1() [0x4280af]\n??:? void tmpwo999aq9.__modtest() [0x42834c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c687]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b51a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c54]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430731]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4f1]\n??:? runModuleUnitTests [0x42c45d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a90]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result = new long[list.length];\n\tlong n = list.length;\n\t\n\tfor(long i = 0; i < n; i++) \n\t{\n\t\tresult[(i + m) % n] = list[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666122588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result = new long[list.length];\n\tfor (long i = 0; i < list.length; i++) \n\t{\n\t\tresult[(i + m) % list.length] = list[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] new_list = new long[list.length];\n\tlong[] temp = new long[m];\n\t\n\tfor(long i = 0; i < m; i++)\n\t{\n\t\ttemp[i] = list[i];\n\t}\n\t\n\tfor(long i = 0; i < list.length - m; i++)\n\t{\n\t\tnew_list[i] = list[i + m];\n\t}\n\t\n\tfor(long i = 0; i < m; i++)\n\t{\n\t\tnew_list[list.length - m + i] = temp[i];\n\t}\n\t\n\treturn new_list;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666122588,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpshl33fod.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x4285cd]\n??:? void tmpshl33fod.__unittest_L30_C1() [0x4280af]\n??:? void tmpshl33fod.__modtest() [0x42834c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c687]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b51a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c54]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430731]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4f1]\n??:? runModuleUnitTests [0x42c45d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a90]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] new_list = new long[list.length];\n\tlong[] temp = new long[m];\n\tlong[] temp2 = new long[list.length - m];\n\t\n\tfor(long i = 0; i < m; i++)\n\t{\n\t\ttemp[i] = list[i];\n\t}\n\t\n\tfor(long i = 0; i < list.length - m; i++)\n\t{\n\t\ttemp2[i] = list[i + m];\n\t}\n\t\n\tfor(long i = 0; i < list.length - m; i++)\n\t{\n\t\tnew_list[i] = temp2[i];\n\t}\n\t\n\tfor(long i = 0; i < m; i++)\n\t{\n\t\tnew_list[list.length - m + i] = temp[i];\n\t}\n\t\n\treturn new_list;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666122588,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp2nfsh8_r.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x42865d]\n??:? void tmp2nfsh8_r.__unittest_L36_C1() [0x42813f]\n??:? void tmp2nfsh8_r.__modtest() [0x4283dc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c717]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5aa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430835]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ce4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4307c1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b581]\n??:? runModuleUnitTests [0x42c4ed]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b20]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result = new long[list.length];\n\tlong[] temp = new long[m];\n\tlong j = 0;\n\tfor (long i = list.length - m; i < list.length; i++)\n\t{\n\t\ttemp[j] = list[i];\n\t\tj++;\n\t}\n\tfor (long i = 0; i < list.length - m; i++)\n\t{\n\t\tresult[i] = list[i];\n\t}\n\tfor (long i = 0; i < temp.length; i++)\n\t{\n\t\tresult[list.length - m + i] = temp[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666122588,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpbxmn1iay.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4285d5]\n??:? void tmpbxmn1iay.__unittest_L28_C1() [0x4280bb]\n??:? void tmpbxmn1iay.__modtest() [0x428358]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c68f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b522]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c5c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430739]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4f9]\n??:? runModuleUnitTests [0x42c465]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a98]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result;\n\tresult = new long[list.length];\n\tlong i;\n\tfor (i = 0; i < list.length; i++) \n\t{\n\t\tresult[i] = list[(i + m) % list.length];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666122588,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqwc9keeb.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x4284e5]\n??:? void tmpqwc9keeb.__unittest_L19_C1() [0x427fcb]\n??:? void tmpqwc9keeb.__modtest() [0x428268]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c59f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b432]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4306bd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b6c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430649]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b409]\n??:? runModuleUnitTests [0x42c375]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4289a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result = new long[list.length];\n\tlong[] temp = new long[m];\n\tlong[] temp2 = new long[list.length - m];\n\t\n\tfor(long i = 0; i < m; i++)\n\t{\n\t\ttemp[i] = list[i];\n\t}\n\t\n\tfor(long i = 0; i < list.length - m; i++)\n\t{\n\t\ttemp2[i] = list[i + m];\n\t}\n\t\n\tfor(long i = 0; i < list.length - m; i++)\n\t{\n\t\tresult[i] = temp2[i];\n\t}\n\t\n\tfor(long i = 0; i < m; i++)\n\t{\n\t\tresult[list.length - m + i] = temp[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666122588,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpsc237bkn.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x42865d]\n??:? void tmpsc237bkn.__unittest_L36_C1() [0x42813f]\n??:? void tmpsc237bkn.__modtest() [0x4283dc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c717]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5aa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430835]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ce4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4307c1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b581]\n??:? runModuleUnitTests [0x42c4ed]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b20]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result;\n\tlong[] temp;\n\tlong[] temp2;\n\tlong i;\n\tlong j;\n\tlong k;\n\tlong n;\n\t\n\tn = list.length;\n\t\n\tif (m > n)\n\t{\n\t\tm = m % n;\n\t}\n\t\n\tresult = new long[n];\n\ttemp = new long[m];\n\ttemp2 = new long[n - m];\n\t\n\tfor (i = 0; i < m; i++)\n\t{\n\t\ttemp[i] = list[i];\n\t}\n\t\n\tfor (i = m; i < n; i++)\n\t{\n\t\ttemp2[i - m] = list[i];\n\t}\n\t\n\tfor (i = 0; i < n - m; i++)\n\t{\n\t\tresult[i] = temp2[i];\n\t}\n\t\n\tfor (i = n - m; i < n; i++)\n\t{\n\t\tresult[i] = temp[i - (n - m)];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666122588,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpo9wvc23l.d(55): unittest failure\n----------------\n??:? _d_unittestp [0x4286ad]\n??:? void tmpo9wvc23l.__unittest_L51_C1() [0x428193]\n??:? void tmpo9wvc23l.__modtest() [0x428430]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c767]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5fa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430885]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d34]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430811]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5d1]\n??:? runModuleUnitTests [0x42c53d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b70]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] temp = new long[m];\n\tlong[] result = new long[list.length];\n\tlong[] temp2 = new long[list.length - m];\n\t\n\tfor(long i = 0; i < m; i++)\n\t{\n\t\ttemp[i] = list[i];\n\t}\n\t\n\tfor(long i = 0; i < list.length - m; i++)\n\t{\n\t\ttemp2[i] = list[i + m];\n\t}\n\t\n\tfor(long i = 0; i < list.length - m; i++)\n\t{\n\t\tresult[i] = temp2[i];\n\t}\n\t\n\tfor(long i = 0; i < m; i++)\n\t{\n\t\tresult[i + list.length - m] = temp[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666122588,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpoi3t_u5m.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x42865d]\n??:? void tmpoi3t_u5m.__unittest_L36_C1() [0x42813f]\n??:? void tmpoi3t_u5m.__modtest() [0x4283dc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c717]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5aa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430835]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ce4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4307c1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b581]\n??:? runModuleUnitTests [0x42c4ed]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b20]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result = new long[list.length];\n\tlong[] temp = new long[m];\n\tlong[] temp2 = new long[list.length - m];\n\t\n\tfor(long i = 0; i < m; i++)\n\t{\n\t\ttemp[i] = list[i];\n\t}\n\t\n\tfor(long i = 0; i < list.length - m; i++)\n\t{\n\t\ttemp2[i] = list[i + m];\n\t}\n\t\n\tfor(long i = 0; i < list.length - m; i++)\n\t{\n\t\tresult[i] = temp2[i];\n\t}\n\t\n\tfor(long i = 0; i < m; i++)\n\t{\n\t\tresult[i + list.length - m] = temp[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpaajve53q.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x42865d]\n??:? void tmpaajve53q.__unittest_L36_C1() [0x42813f]\n??:? void tmpaajve53q.__modtest() [0x4283dc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c717]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5aa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430835]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ce4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4307c1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b581]\n??:? runModuleUnitTests [0x42c4ed]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b20]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result = new long[list.length];\n\tlong[] temp = new long[m];\n\t\n\tfor (long i = 0; i < list.length; i++) \n\t{\n\t\tif (i < m) \n\t\t{\n\t\t\ttemp[i] = list[i];\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult[i - m] = list[i];\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < m; i++) \n\t{\n\t\tresult[list.length - m + i] = temp[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666122588,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpwz5w0o3k.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x4285bd]\n??:? void tmpwz5w0o3k.__unittest_L32_C1() [0x4280a3]\n??:? void tmpwz5w0o3k.__modtest() [0x428340]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c677]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b50a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430795]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c44]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430721]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4e1]\n??:? runModuleUnitTests [0x42c44d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a80]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result = new long[list.length];\n\tlong[] temp = new long[m];\n\tlong[] temp2 = new long[list.length - m];\n\t\n\tfor(long i = 0; i < m; i++)\n\t{\n\t\ttemp[i] = list[i];\n\t}\n\t\n\tfor(long i = 0; i < list.length - m; i++)\n\t{\n\t\ttemp2[i] = list[i + m];\n\t}\n\t\n\tfor(long i = 0; i < list.length - m; i++)\n\t{\n\t\tresult[i] = temp2[i];\n\t}\n\t\n\tfor(long i = 0; i < m; i++)\n\t{\n\t\tresult[list.length - m + i] = temp[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666122588,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpsc237bkn.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x42865d]\n??:? void tmpsc237bkn.__unittest_L36_C1() [0x42813f]\n??:? void tmpsc237bkn.__modtest() [0x4283dc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c717]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5aa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430835]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ce4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4307c1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b581]\n??:? runModuleUnitTests [0x42c4ed]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b20]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result = new long[list.length];\n\tlong[] temp = new long[m];\n\tlong[] temp2 = new long[list.length - m];\n\t\n\tfor (long i = 0; i < m; i++)\n\t{\n\t\ttemp[i] = list[i];\n\t}\n\t\n\tfor (long i = 0; i < list.length - m; i++)\n\t{\n\t\ttemp2[i] = list[i + m];\n\t}\n\t\n\tfor (long i = 0; i < list.length - m; i++)\n\t{\n\t\tresult[i] = temp2[i];\n\t}\n\t\n\tfor (long i = 0; i < m; i++)\n\t{\n\t\tresult[i + list.length - m] = temp[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpnchjlsu6.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x42865d]\n??:? void tmpnchjlsu6.__unittest_L36_C1() [0x42813f]\n??:? void tmpnchjlsu6.__modtest() [0x4283dc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c717]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5aa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430835]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ce4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4307c1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b581]\n??:? runModuleUnitTests [0x42c4ed]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b20]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result = new long[list.length];\n\tlong[] temp = new long[m];\n\tlong[] temp2 = new long[list.length - m];\n\t\n\tfor(long i = 0; i < m; i++)\n\t{\n\t\ttemp[i] = list[i];\n\t}\n\t\n\tfor(long i = 0; i < list.length - m; i++)\n\t{\n\t\ttemp2[i] = list[i + m];\n\t}\n\t\n\tfor(long i = 0; i < list.length - m; i++)\n\t{\n\t\tresult[i] = temp2[i];\n\t}\n\t\n\tfor(long i = 0; i < m; i++)\n\t{\n\t\tresult[i + list.length - m] = temp[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpaajve53q.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x42865d]\n??:? void tmpaajve53q.__unittest_L36_C1() [0x42813f]\n??:? void tmpaajve53q.__modtest() [0x4283dc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c717]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5aa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430835]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ce4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4307c1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b581]\n??:? runModuleUnitTests [0x42c4ed]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b20]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result = new long[list.length];\n\tforeach(i, e; list)\n\t{\n\t\tresult[(i + m) % list.length] = e;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666122588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result = new long[list.length];\n\tlong[] temp = new long[m];\n\tlong[] temp2 = new long[list.length - m];\n\t\n\ttemp = list[0..m];\n\ttemp2 = list[m..$];\n\t\n\tresult = temp2 ~ temp;\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666122588,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp04f7ivtw.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x4284f5]\n??:? void tmp04f7ivtw.__unittest_L21_C1() [0x427fd7]\n??:? void tmp04f7ivtw.__modtest() [0x428274]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b58a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4306cd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b7c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430659]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b561]\n??:? runModuleUnitTests [0x42c4cd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4289b8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] temp = new long[m];\n\tlong[] result = new long[list.length];\n\t\n\t// copy the last m elements of list to temp\n\tfor (long i = 0; i < m; i++)\n\t{\n\t\ttemp[i] = list[list.length - m + i];\n\t}\n\t\n\t// copy the first n-m elements of list to result\n\tfor (long i = 0; i < list.length - m; i++)\n\t{\n\t\tresult[i] = list[i];\n\t}\n\t\n\t// copy the temp to the last m elements of result\n\tfor (long i = 0; i < m; i++)\n\t{\n\t\tresult[list.length - m + i] = temp[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666122588,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppdo39j2_.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x4285cd]\n??:? void tmppdo39j2_.__unittest_L33_C1() [0x4280b3]\n??:? void tmppdo39j2_.__modtest() [0x428350]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c687]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b51a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c54]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430731]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4f1]\n??:? runModuleUnitTests [0x42c45d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a90]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result = new long[list.length];\n\tlong[] temp = new long[m];\n\tlong[] temp2 = new long[list.length - m];\n\t\n\tfor(long i = 0; i < m; i++)\n\t{\n\t\ttemp[i] = list[i];\n\t}\n\t\n\tfor(long i = 0; i < list.length - m; i++)\n\t{\n\t\ttemp2[i] = list[m + i];\n\t}\n\t\n\tfor(long i = 0; i < list.length - m; i++)\n\t{\n\t\tresult[i] = temp2[i];\n\t}\n\t\n\tfor(long i = 0; i < m; i++)\n\t{\n\t\tresult[list.length - m + i] = temp[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666122588,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpx_kgeazf.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x42865d]\n??:? void tmpx_kgeazf.__unittest_L36_C1() [0x42813f]\n??:? void tmpx_kgeazf.__modtest() [0x4283dc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c717]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5aa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430835]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ce4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4307c1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b581]\n??:? runModuleUnitTests [0x42c4ed]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b20]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result = new long[list.length];\n\tlong[] temp = new long[m];\n\tlong[] temp2 = new long[list.length - m];\n\t\n\tfor(long i = 0; i < m; i++)\n\t{\n\t\ttemp[i] = list[i];\n\t}\n\t\n\tfor(long i = m; i < list.length; i++)\n\t{\n\t\ttemp2[i - m] = list[i];\n\t}\n\t\n\tfor(long i = 0; i < list.length - m; i++)\n\t{\n\t\tresult[i] = temp2[i];\n\t}\n\t\n\tfor(long i = list.length - m; i < list.length; i++)\n\t{\n\t\tresult[i] = temp[i - (list.length - m)];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666122588,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpq8s_fij4.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x428655]\n??:? void tmpq8s_fij4.__unittest_L36_C1() [0x42813b]\n??:? void tmpq8s_fij4.__modtest() [0x4283d8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c70f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5a2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43082d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430cdc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4307b9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b579]\n??:? runModuleUnitTests [0x42c4e5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b18]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result = new long[list.length];\n\tlong[] temp = new long[m];\n\tlong[] temp2 = new long[list.length - m];\n\t\n\tfor (long i = 0; i < m; i++)\n\t{\n\t\ttemp[i] = list[i];\n\t}\n\t\n\tfor (long i = 0; i < list.length - m; i++)\n\t{\n\t\ttemp2[i] = list[i + m];\n\t}\n\t\n\tfor (long i = 0; i < list.length - m; i++)\n\t{\n\t\tresult[i] = temp2[i];\n\t}\n\t\n\tfor (long i = 0; i < m; i++)\n\t{\n\t\tresult[list.length - m + i] = temp[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666122588,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpkxxpc5ga.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x42865d]\n??:? void tmpkxxpc5ga.__unittest_L36_C1() [0x42813f]\n??:? void tmpkxxpc5ga.__modtest() [0x4283dc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c717]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5aa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430835]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ce4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4307c1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b581]\n??:? runModuleUnitTests [0x42c4ed]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b20]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result = new long[list.length];\n\tlong[] list_copy = list.dup;\n\tlong[] list_copy_2 = list.dup;\n\tlong[] list_copy_3 = list.dup;\n\tlong[] list_copy_4 = list.dup;\n\tlong[] list_copy_5 = list.dup;\n\tlong[] list_copy_6 = list.dup;\n\tlong[] list_copy_7 = list.dup;\n\tlong[] list_copy_8 = list.dup;\n\tlong[] list_copy_9 = list.dup;\n\tlong[] list_copy_10 = list.dup;\n\tlong[] list_copy_11 = list.dup;\n\tlong[] list_copy_12 = list.dup;\n\tlong[] list_copy_13 = list.dup;\n\tlong[] list_copy_14 = list.dup;\n\tlong[] list_copy_15 = list.dup;\n\tlong[] list_copy_16 = list.dup;\n\tlong[] list_copy_17 = list.dup;\n\tlong[] list_copy_18 = list.dup;\n\tlong[] list_copy_19 = list.dup;\n\tlong[] list_copy_20 = list.dup;\n\tlong[] list_copy_21 = list.dup;\n\tlong[] list_copy_22 = list.dup;\n\tlong[] list_copy_23 = list.dup;\n\tlong[] list_copy_24 = list.dup;\n\tlong[] list_copy_25 = list.dup;\n\tlong[] list_copy_26 = list.dup;\n\tlong[] list_copy_27 = list.dup;\n\tlong[] list_copy_28 = list.dup;\n\tlong[] list_copy_29 = list.dup;\n\tlong[] list_copy_30 = list.dup;\n\tlong[] list_copy_31 = list.dup;\n\tlong[] list_copy_32 = list.dup;\n\tlong[] list_copy_33 = list.dup;\n\tlong[]\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666122588,
      "stdout": "",
      "stderr": "/tmp/tmpv4vyhp49.d(45): Error: no identifier for declarator `long[]`\n/tmp/tmpv4vyhp49.d(45): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv4vyhp49.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result = new long[list.length];\n\tfor (long i = 0; i < list.length; i++) \n\t{\n\t\tresult[i] = list[(i + m) % list.length];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666122588,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp00l921vv.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x4284d5]\n??:? void tmp00l921vv.__unittest_L17_C1() [0x427fbb]\n??:? void tmp00l921vv.__modtest() [0x428258]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c58f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b422]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4306ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b5c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430639]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3f9]\n??:? runModuleUnitTests [0x42c365]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428998]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result = new long[list.length];\n\tlong[] temp = new long[list.length];\n\tlong[] temp2 = new long[list.length];\n\tlong[] temp3 = new long[list.length];\n\t\n\ttemp = list[0..m];\n\ttemp2 = list[m..$];\n\ttemp3 = temp2 ~ temp;\n\tresult = temp3;\n\treturn result;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666122588,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpl9ylyejo.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x4284fd]\n??:? void tmpl9ylyejo.__unittest_L21_C1() [0x427fe3]\n??:? void tmpl9ylyejo.__modtest() [0x428280]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6ff]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b592]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4306d5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b84]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430661]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b569]\n??:? runModuleUnitTests [0x42c4d5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4289c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result = new long[list.length];\n\tfor (long i = 0; i < list.length; i++) \n\t{\n\t\tresult[(i + m) % list.length] = list[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result = new long[list.length];\n\tfor (long i = 0; i < list.length; i++) \n\t{\n\t\tresult[(i + m) % list.length] = list[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result = new long[list.length];\n\tlong[] temp = new long[m];\n\tlong[] temp2 = new long[list.length - m];\n\t\n\tforeach(i, e; list)\n\t{\n\t\tif(i < m)\n\t\t{\n\t\t\ttemp[i] = e;\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttemp2[i - m] = e;\n\t\t}\n\t}\n\t\n\tforeach(i, e; temp2)\n\t{\n\t\tresult[i] = e;\n\t}\n\t\n\tforeach(i, e; temp)\n\t{\n\t\tresult[i + temp2.length] = e;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666122588,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjtz4mhdh.d(42): unittest failure\n----------------\n??:? _d_unittestp [0x42866d]\n??:? void tmpjtz4mhdh.__unittest_L38_C1() [0x42814f]\n??:? void tmpjtz4mhdh.__modtest() [0x4283ec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c727]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5ba]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430845]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430cf4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4307d1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b591]\n??:? runModuleUnitTests [0x42c4fd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b30]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result = new long[list.length];\n\tlong[] temp = new long[m];\n\tlong[] temp2 = new long[list.length - m];\n\t\n\tfor(long i = 0; i < m; i++)\n\t{\n\t\ttemp[i] = list[i];\n\t}\n\t\n\tfor(long i = 0; i < list.length - m; i++)\n\t{\n\t\ttemp2[i] = list[i + m];\n\t}\n\t\n\tfor(long i = 0; i < list.length - m; i++)\n\t{\n\t\tresult[i] = temp2[i];\n\t}\n\t\n\tfor(long i = 0; i < m; i++)\n\t{\n\t\tresult[i + list.length - m] = temp[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpaajve53q.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x42865d]\n??:? void tmpaajve53q.__unittest_L36_C1() [0x42813f]\n??:? void tmpaajve53q.__modtest() [0x4283dc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c717]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5aa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430835]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ce4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4307c1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b581]\n??:? runModuleUnitTests [0x42c4ed]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b20]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result = new long[list.length];\n\tlong j = 0;\n\tfor (long i = list.length - m; i < list.length; i++) \n\t{\n\t\tresult[j] = list[i];\n\t\tj++;\n\t}\n\tfor (long i = 0; i < list.length - m; i++) \n\t{\n\t\tresult[j] = list[i];\n\t\tj++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666122588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] ret = new long[list.length];\n\tlong[] temp = new long[m];\n\t\n\tfor (long i = 0; i < m; i++)\n\t{\n\t\ttemp[i] = list[list.length - m + i];\n\t}\n\t\n\tfor (long i = 0; i < list.length - m; i++)\n\t{\n\t\tret[i] = list[i];\n\t}\n\t\n\tfor (long i = 0; i < m; i++)\n\t{\n\t\tret[list.length - m + i] = temp[i];\n\t}\n\t\n\treturn ret;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp6lwnsdjq.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x4285cd]\n??:? void tmp6lwnsdjq.__unittest_L30_C1() [0x4280af]\n??:? void tmp6lwnsdjq.__modtest() [0x42834c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c687]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b51a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c54]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430731]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4f1]\n??:? runModuleUnitTests [0x42c45d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a90]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] new_list = new long[list.length];\n\tfor (long i = 0; i < list.length; i++) \n\t{\n\t\tnew_list[(i + m) % list.length] = list[i];\n\t}\n\treturn new_list;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666122588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result = new long[list.length];\n\tforeach(i, e; list)\n\t{\n\t\tresult[(i + m) % list.length] = e;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666122588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result = new long[list.length];\n\tlong i = 0;\n\tlong j = 0;\n\twhile (i < list.length)\n\t{\n\t\tj = (i + m) % list.length;\n\t\tresult[j] = list[i];\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666122588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result = new long[list.length];\n\tfor (long i = 0; i < list.length; i++) \n\t{\n\t\tresult[(i + m) % list.length] = list[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result = new long[list.length];\n\tforeach(i, e; list)\n\t{\n\t\tresult[(i + m) % list.length] = e;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666122588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result = new long[list.length];\n\tlong[] temp = new long[list.length];\n\t\n\t// copy the list to temp\n\tforeach(i,v; list)\n\t\ttemp[i] = v;\n\t\n\t// copy the list to result\n\tforeach(i,v; list)\n\t\tresult[i] = v;\n\t\n\t// rotate the list\n\tforeach(i,v; list)\n\t{\n\t\tlong index = (i + m) % list.length;\n\t\tresult[index] = temp[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666122588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result = new long[list.length];\n\tlong[] temp = new long[m];\n\tlong[] temp2 = new long[list.length - m];\n\t\n\tfor(long i = 0; i < m; i++)\n\t{\n\t\ttemp[i] = list[i];\n\t}\n\t\n\tfor(long i = 0; i < list.length - m; i++)\n\t{\n\t\ttemp2[i] = list[i + m];\n\t}\n\t\n\tfor(long i = 0; i < list.length - m; i++)\n\t{\n\t\tresult[i] = temp2[i];\n\t}\n\t\n\tfor(long i = 0; i < m; i++)\n\t{\n\t\tresult[i + list.length - m] = temp[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpaajve53q.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x42865d]\n??:? void tmpaajve53q.__unittest_L36_C1() [0x42813f]\n??:? void tmpaajve53q.__modtest() [0x4283dc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c717]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5aa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430835]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ce4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4307c1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b581]\n??:? runModuleUnitTests [0x42c4ed]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b20]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result = new long[list.length];\n\tlong[] temp = new long[m];\n\t\n\tfor (int i = 0; i < m; i++) \n\t{\n\t\ttemp[i] = list[i];\n\t}\n\t\n\tfor (int i = 0; i < list.length - m; i++) \n\t{\n\t\tresult[i] = list[i + m];\n\t}\n\t\n\tfor (int i = 0; i < m; i++) \n\t{\n\t\tresult[list.length - m + i] = temp[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666122588,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpku4r608m.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x4285cd]\n??:? void tmpku4r608m.__unittest_L30_C1() [0x4280af]\n??:? void tmpku4r608m.__modtest() [0x42834c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c687]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b51a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c54]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430731]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4f1]\n??:? runModuleUnitTests [0x42c45d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a90]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result = new long[list.length];\n\tlong[] temp = new long[m];\n\tlong[] temp2 = new long[list.length - m];\n\t\n\tfor(long i = 0; i < m; i++)\n\t{\n\t\ttemp[i] = list[i];\n\t}\n\t\n\tfor(long i = 0; i < list.length - m; i++)\n\t{\n\t\ttemp2[i] = list[i + m];\n\t}\n\t\n\tfor(long i = 0; i < list.length - m; i++)\n\t{\n\t\tresult[i] = temp2[i];\n\t}\n\t\n\tfor(long i = 0; i < m; i++)\n\t{\n\t\tresult[i + list.length - m] = temp[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpaajve53q.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x42865d]\n??:? void tmpaajve53q.__unittest_L36_C1() [0x42813f]\n??:? void tmpaajve53q.__modtest() [0x4283dc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c717]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5aa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430835]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ce4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4307c1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b581]\n??:? runModuleUnitTests [0x42c4ed]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b20]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] new_list = new long[list.length];\n\tforeach(i, item; list)\n\t{\n\t\tnew_list[(i + m) % list.length] = item;\n\t}\n\treturn new_list;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666122588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result = new long[list.length];\n\tlong[] temp = new long[m];\n\tlong[] temp2 = new long[list.length - m];\n\t\n\tfor (long i = 0; i < m; i++)\n\t{\n\t\ttemp[i] = list[i];\n\t}\n\t\n\tfor (long i = m; i < list.length; i++)\n\t{\n\t\ttemp2[i - m] = list[i];\n\t}\n\t\n\tfor (long i = 0; i < list.length - m; i++)\n\t{\n\t\tresult[i] = temp2[i];\n\t}\n\t\n\tfor (long i = list.length - m; i < list.length; i++)\n\t{\n\t\tresult[i] = temp[i - list.length + m];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666122588,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpuqvqpvjj.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x428655]\n??:? void tmpuqvqpvjj.__unittest_L36_C1() [0x42813b]\n??:? void tmpuqvqpvjj.__modtest() [0x4283d8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c70f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5a2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43082d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430cdc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4307b9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b579]\n??:? runModuleUnitTests [0x42c4e5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b18]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] new_list = new long[list.length];\n\tlong j = 0;\n\tfor (long i = list.length - m; i < list.length; i++)\n\t{\n\t\tnew_list[j] = list[i];\n\t\tj++;\n\t}\n\tfor (long i = 0; i < list.length - m; i++)\n\t{\n\t\tnew_list[j] = list[i];\n\t\tj++;\n\t}\n\treturn new_list;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666122588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result = new long[list.length];\n\tlong index = 0;\n\tfor (long i = list.length - m; i < list.length; i++) \n\t{\n\t\tresult[index] = list[i];\n\t\tindex++;\n\t}\n\tfor (long i = 0; i < list.length - m; i++) \n\t{\n\t\tresult[index] = list[i];\n\t\tindex++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666122588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result = new long[list.length];\n\tlong[] temp = new long[m];\n\t\n\tfor (long i = 0; i < m; i++)\n\t{\n\t\ttemp[i] = list[list.length - m + i];\n\t}\n\t\n\tfor (long i = 0; i < list.length - m; i++)\n\t{\n\t\tresult[i] = list[i];\n\t}\n\t\n\tfor (long i = 0; i < m; i++)\n\t{\n\t\tresult[list.length - m + i] = temp[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5emgk652.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x4285cd]\n??:? void tmp5emgk652.__unittest_L30_C1() [0x4280af]\n??:? void tmp5emgk652.__modtest() [0x42834c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c687]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b51a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c54]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430731]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4f1]\n??:? runModuleUnitTests [0x42c45d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a90]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result = new long[list.length];\n\tlong[] temp = new long[m];\n\tlong[] temp2 = new long[list.length - m];\n\t\n\tfor(long i = 0; i < m; i++)\n\t{\n\t\ttemp[i] = list[i];\n\t}\n\t\n\tfor(long i = m; i < list.length; i++)\n\t{\n\t\ttemp2[i - m] = list[i];\n\t}\n\t\n\tfor(long i = 0; i < list.length - m; i++)\n\t{\n\t\tresult[i] = temp2[i];\n\t}\n\t\n\tfor(long i = list.length - m; i < list.length; i++)\n\t{\n\t\tresult[i] = temp[i - list.length + m];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666122588,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpmsx28erw.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x428655]\n??:? void tmpmsx28erw.__unittest_L36_C1() [0x42813b]\n??:? void tmpmsx28erw.__modtest() [0x4283d8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c70f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5a2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43082d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430cdc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4307b9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b579]\n??:? runModuleUnitTests [0x42c4e5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b18]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result = new long[list.length];\n\tlong[] temp = new long[m];\n\t\n\tfor (long i = 0; i < m; i++)\n\t{\n\t\ttemp[i] = list[list.length - m + i];\n\t}\n\t\n\tfor (long i = 0; i < list.length - m; i++)\n\t{\n\t\tresult[i] = list[i];\n\t}\n\t\n\tfor (long i = 0; i < m; i++)\n\t{\n\t\tresult[list.length - m + i] = temp[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5emgk652.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x4285cd]\n??:? void tmp5emgk652.__unittest_L30_C1() [0x4280af]\n??:? void tmp5emgk652.__modtest() [0x42834c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c687]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b51a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c54]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430731]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4f1]\n??:? runModuleUnitTests [0x42c45d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a90]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result = new long[list.length];\n\tlong n = list.length;\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tresult[(i + m) % n] = list[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666122588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result = new long[list.length];\n\tlong[] temp = new long[m];\n\tlong[] temp2 = new long[list.length - m];\n\t\n\tfor (long i = 0; i < m; i++)\n\t{\n\t\ttemp[i] = list[i];\n\t}\n\t\n\tfor (long i = m; i < list.length; i++)\n\t{\n\t\ttemp2[i - m] = list[i];\n\t}\n\t\n\tfor (long i = 0; i < list.length - m; i++)\n\t{\n\t\tresult[i] = temp2[i];\n\t}\n\t\n\tfor (long i = list.length - m; i < list.length; i++)\n\t{\n\t\tresult[i] = temp[i - list.length + m];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666122588,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpuqvqpvjj.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x428655]\n??:? void tmpuqvqpvjj.__unittest_L36_C1() [0x42813b]\n??:? void tmpuqvqpvjj.__modtest() [0x4283d8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c70f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5a2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43082d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430cdc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4307b9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b579]\n??:? runModuleUnitTests [0x42c4e5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b18]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result = new long[list.length];\n\tlong[] temp = new long[m];\n\tlong[] temp2 = new long[list.length - m];\n\t\n\tfor(long i = 0; i < m; i++)\n\t{\n\t\ttemp[i] = list[i];\n\t}\n\t\n\tfor(long i = 0; i < list.length - m; i++)\n\t{\n\t\ttemp2[i] = list[i + m];\n\t}\n\t\n\tfor(long i = 0; i < list.length - m; i++)\n\t{\n\t\tresult[i] = temp2[i];\n\t}\n\t\n\tfor(long i = 0; i < m; i++)\n\t{\n\t\tresult[i + list.length - m] = temp[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpaajve53q.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x42865d]\n??:? void tmpaajve53q.__unittest_L36_C1() [0x42813f]\n??:? void tmpaajve53q.__modtest() [0x4283dc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c717]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5aa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430835]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ce4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4307c1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b581]\n??:? runModuleUnitTests [0x42c4ed]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b20]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result;\n\tlong[] temp;\n\tlong[] temp2;\n\tlong[] temp3;\n\tlong[] temp4;\n\tlong[] temp5;\n\tlong[] temp6;\n\tlong[] temp7;\n\tlong[] temp8;\n\tlong[] temp9;\n\tlong[] temp10;\n\tlong[] temp11;\n\tlong[] temp12;\n\tlong[] temp13;\n\tlong[] temp14;\n\tlong[] temp15;\n\tlong[] temp16;\n\tlong[] temp17;\n\tlong[] temp18;\n\tlong[] temp19;\n\tlong[] temp20;\n\tlong[] temp21;\n\tlong[] temp22;\n\tlong[] temp23;\n\tlong[] temp24;\n\tlong[] temp25;\n\tlong[] temp26;\n\tlong[] temp27;\n\tlong[] temp28;\n\tlong[] temp29;\n\tlong[] temp30;\n\tlong[] temp31;\n\tlong[] temp32;\n\tlong[] temp33;\n\tlong[] temp34;\n\tlong[] temp35;\n\tlong[] temp36;\n\tlong[] temp37;\n\tlong[] temp38;\n\tlong[] temp39;\n\tlong[] temp40;\n\tlong[] temp41;\n\tlong[] temp42;\n\tlong[] temp43;\n\tlong[] temp44;\n\tlong[] temp45;\n\tlong[] temp46;\n\tlong[] temp47;\n\tlong[] temp48;\n\tlong[] temp49;\n\tlong[] temp50;\n\tlong[] temp51;\n\tlong[] temp52;\n\tlong[] temp53;\n\tlong[] temp54;\n\tlong[] temp55;\n\tlong[] temp56;\n\tlong[] temp57;\n\tlong[] temp58;\n\tlong[] temp59;\n\tlong[] temp60;\n\tlong[] temp61;\n\tlong[] temp62;\n\tlong[] temp63;\n\tlong[] temp64;\n\tlong[] temp65;\n\tlong[] temp66;\n\tlong[] temp67;\n\tlong[] temp68;\n\tlong[] temp69;\n\tlong[] temp70;\n\tlong[] temp71;\n\tlong[] temp72;\n\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666122588,
      "stdout": "",
      "stderr": "/tmp/tmpzmrv5nh4.d(84): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzmrv5nh4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result = new long[list.length];\n\tlong[] temp = new long[m];\n\t\n\t//copy the last m elements to temp\n\tfor(long i = 0; i < m; i++)\n\t{\n\t\ttemp[i] = list[list.length - m + i];\n\t}\n\t\n\t//copy the first n - m elements to result\n\tfor(long i = 0; i < list.length - m; i++)\n\t{\n\t\tresult[i] = list[i];\n\t}\n\t\n\t//copy the temp to result\n\tfor(long i = 0; i < m; i++)\n\t{\n\t\tresult[list.length - m + i] = temp[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666122588,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp8plq37ey.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x4285cd]\n??:? void tmp8plq37ey.__unittest_L33_C1() [0x4280af]\n??:? void tmp8plq37ey.__modtest() [0x42834c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c687]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b51a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c54]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430731]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4f1]\n??:? runModuleUnitTests [0x42c45d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a90]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result = new long[list.length];\n\tlong[] temp = new long[list.length];\n\tlong[] temp2 = new long[list.length];\n\tlong[] temp3 = new long[list.length];\n\t\n\ttemp = list[0..m];\n\ttemp2 = list[m..$];\n\ttemp3 = temp2 ~ temp;\n\t\n\treturn temp3;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666122588,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp0v6nhqal.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x4284fd]\n??:? void tmp0v6nhqal.__unittest_L21_C1() [0x427fe3]\n??:? void tmp0v6nhqal.__modtest() [0x428280]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6ff]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b592]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4306d5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b84]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430661]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b569]\n??:? runModuleUnitTests [0x42c4d5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4289c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result = new long[list.length];\n\tlong[] temp = new long[m];\n\tlong[] temp2 = new long[list.length - m];\n\t\n\tfor (long i = 0; i < m; i++)\n\t{\n\t\ttemp[i] = list[i];\n\t}\n\t\n\tfor (long i = 0; i < list.length - m; i++)\n\t{\n\t\ttemp2[i] = list[i + m];\n\t}\n\t\n\tfor (long i = 0; i < list.length - m; i++)\n\t{\n\t\tresult[i] = temp2[i];\n\t}\n\t\n\tfor (long i = 0; i < m; i++)\n\t{\n\t\tresult[i + list.length - m] = temp[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpnchjlsu6.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x42865d]\n??:? void tmpnchjlsu6.__unittest_L36_C1() [0x42813f]\n??:? void tmpnchjlsu6.__modtest() [0x4283dc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c717]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5aa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430835]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ce4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4307c1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b581]\n??:? runModuleUnitTests [0x42c4ed]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b20]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result = new long[list.length];\n\tlong[] temp = new long[m];\n\tlong[] temp2 = new long[list.length - m];\n\t\n\tfor (long i = 0; i < m; i++) \n\t{\n\t\ttemp[i] = list[i];\n\t}\n\t\n\tfor (long i = 0; i < list.length - m; i++) \n\t{\n\t\ttemp2[i] = list[m + i];\n\t}\n\t\n\tfor (long i = 0; i < list.length - m; i++) \n\t{\n\t\tresult[i] = temp2[i];\n\t}\n\t\n\tfor (long i = 0; i < m; i++) \n\t{\n\t\tresult[list.length - m + i] = temp[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666122588,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpgtctq_i7.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x42865d]\n??:? void tmpgtctq_i7.__unittest_L36_C1() [0x42813f]\n??:? void tmpgtctq_i7.__modtest() [0x4283dc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c717]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5aa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430835]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ce4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4307c1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b581]\n??:? runModuleUnitTests [0x42c4ed]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b20]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result = new long[list.length];\n\tlong[] temp = new long[m];\n\t\n\tfor (long i = 0; i < m; i++)\n\t{\n\t\ttemp[i] = list[i];\n\t}\n\t\n\tfor (long i = 0; i < list.length - m; i++)\n\t{\n\t\tresult[i] = list[i + m];\n\t}\n\t\n\tfor (long i = 0; i < m; i++)\n\t{\n\t\tresult[list.length - m + i] = temp[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666122588,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp0cu55wjz.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x4285cd]\n??:? void tmp0cu55wjz.__unittest_L30_C1() [0x4280af]\n??:? void tmp0cu55wjz.__modtest() [0x42834c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c687]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b51a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c54]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430731]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4f1]\n??:? runModuleUnitTests [0x42c45d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a90]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] new_list = new long[list.length];\n\tlong[] temp = new long[m];\n\t\n\tfor (long i = 0; i < m; i++)\n\t{\n\t\ttemp[i] = list[list.length - m + i];\n\t}\n\t\n\tfor (long i = 0; i < list.length - m; i++)\n\t{\n\t\tnew_list[i] = list[i];\n\t}\n\t\n\tfor (long i = 0; i < m; i++)\n\t{\n\t\tnew_list[list.length - m + i] = temp[i];\n\t}\n\t\n\treturn new_list;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666122589,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpdoknxp40.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x4285cd]\n??:? void tmpdoknxp40.__unittest_L30_C1() [0x4280af]\n??:? void tmpdoknxp40.__modtest() [0x42834c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c687]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b51a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c54]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430731]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4f1]\n??:? runModuleUnitTests [0x42c45d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a90]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result = new long[list.length];\n\tlong[] temp = new long[m];\n\t\n\tfor (long i = 0; i < m; i++)\n\t{\n\t\ttemp[i] = list[i];\n\t}\n\t\n\tfor (long i = 0; i < list.length - m; i++)\n\t{\n\t\tresult[i] = list[i + m];\n\t}\n\t\n\tfor (long i = 0; i < m; i++)\n\t{\n\t\tresult[list.length - m + i] = temp[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666122588,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp0cu55wjz.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x4285cd]\n??:? void tmp0cu55wjz.__unittest_L30_C1() [0x4280af]\n??:? void tmp0cu55wjz.__modtest() [0x42834c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c687]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b51a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c54]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430731]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4f1]\n??:? runModuleUnitTests [0x42c45d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a90]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result = new long[list.length];\n\tlong[] temp = new long[list.length];\n\tlong[] temp2 = new long[list.length];\n\t\n\tlong[] temp3 = new long[list.length];\n\t\n\ttemp = list[0..m];\n\ttemp2 = list[m..$];\n\t\n\ttemp3 = temp2 ~ temp;\n\t\n\treturn temp3;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666122589,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpg7xemt2a.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4284fd]\n??:? void tmpg7xemt2a.__unittest_L23_C1() [0x427fe3]\n??:? void tmpg7xemt2a.__modtest() [0x428280]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6ff]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b592]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4306d5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b84]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430661]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b569]\n??:? runModuleUnitTests [0x42c4d5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4289c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] new_list = new long[list.length];\n\tlong[] temp_list = new long[m];\n\tlong[] temp_list2 = new long[list.length - m];\n\tlong[] temp_list3 = new long[list.length];\n\t\n\tforeach(i; 0 .. m)\n\t{\n\t\ttemp_list[i] = list[i];\n\t}\n\t\n\tforeach(i; 0 .. list.length - m)\n\t{\n\t\ttemp_list2[i] = list[i + m];\n\t}\n\t\n\tforeach(i; 0 .. list.length - m)\n\t{\n\t\tnew_list[i] = temp_list2[i];\n\t}\n\t\n\tforeach(i; 0 .. m)\n\t{\n\t\tnew_list[i + list.length - m] = temp_list[i];\n\t}\n\t\n\treturn new_list;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666122589,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpgpa1moge.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x4286f5]\n??:? void tmpgpa1moge.__unittest_L37_C1() [0x4281db]\n??:? void tmpgpa1moge.__modtest() [0x428478]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c7af]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b642]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4308cd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d7c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430859]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b619]\n??:? runModuleUnitTests [0x42c585]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428bb8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result = new long[list.length];\n\tlong n = list.length;\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tresult[(i + m) % n] = list[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666122588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] ret = new long[list.length];\n\tlong i = 0;\n\tlong j = 0;\n\twhile (i < list.length)\n\t{\n\t\tj = (i + m) % list.length;\n\t\tret[j] = list[i];\n\t\ti++;\n\t}\n\treturn ret;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666122589,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result = new long[list.length];\n\tlong[] temp = new long[m];\n\tlong[] temp2 = new long[list.length - m];\n\t\n\tfor (long i = 0; i < m; i++)\n\t{\n\t\ttemp[i] = list[i];\n\t}\n\t\n\tfor (long i = 0; i < list.length - m; i++)\n\t{\n\t\ttemp2[i] = list[i + m];\n\t}\n\t\n\tfor (long i = 0; i < list.length - m; i++)\n\t{\n\t\tresult[i] = temp2[i];\n\t}\n\t\n\tfor (long i = 0; i < m; i++)\n\t{\n\t\tresult[i + list.length - m] = temp[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpnchjlsu6.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x42865d]\n??:? void tmpnchjlsu6.__unittest_L36_C1() [0x42813f]\n??:? void tmpnchjlsu6.__modtest() [0x4283dc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c717]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5aa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430835]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ce4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4307c1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b581]\n??:? runModuleUnitTests [0x42c4ed]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b20]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result = new long[list.length];\n\tlong[] temp = new long[m];\n\tlong[] temp2 = new long[list.length - m];\n\t\n\tfor (long i = 0; i < m; i++)\n\t\ttemp[i] = list[i];\n\t\n\tfor (long i = 0; i < list.length - m; i++)\n\t\ttemp2[i] = list[i + m];\n\t\n\tfor (long i = 0; i < list.length - m; i++)\n\t\tresult[i] = temp2[i];\n\t\n\tfor (long i = 0; i < m; i++)\n\t\tresult[i + list.length - m] = temp[i];\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpb3uxsasr.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x42865d]\n??:? void tmpb3uxsasr.__unittest_L28_C1() [0x42813f]\n??:? void tmpb3uxsasr.__modtest() [0x4283dc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c717]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5aa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430835]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ce4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4307c1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b581]\n??:? runModuleUnitTests [0x42c4ed]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b20]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] ret = new long[list.length];\n\tlong[] temp = new long[m];\n\tlong[] temp2 = new long[list.length - m];\n\t\n\tfor (long i = 0; i < m; i++)\n\t{\n\t\ttemp[i] = list[i];\n\t}\n\t\n\tfor (long i = m; i < list.length; i++)\n\t{\n\t\ttemp2[i - m] = list[i];\n\t}\n\t\n\tfor (long i = 0; i < list.length; i++)\n\t{\n\t\tif (i < list.length - m)\n\t\t{\n\t\t\tret[i] = temp2[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tret[i] = temp[i - (list.length - m)];\n\t\t}\n\t}\n\t\n\treturn ret;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666122589,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpkepvbkl6.d(42): unittest failure\n----------------\n??:? _d_unittestp [0x42864d]\n??:? void tmpkepvbkl6.__unittest_L38_C1() [0x428133]\n??:? void tmpkepvbkl6.__modtest() [0x4283d0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c707]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b59a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430825]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430cd4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4307b1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b571]\n??:? runModuleUnitTests [0x42c4dd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b10]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result = new long[list.length];\n\tfor (long i = 0; i < list.length; i++) \n\t{\n\t\tresult[(i + m) % list.length] = list[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result = new long[list.length];\n\tlong[] tmp = new long[m];\n\t\n\tfor (long i = 0; i < m; i++)\n\t{\n\t\ttmp[i] = list[list.length - m + i];\n\t}\n\t\n\tfor (long i = 0; i < list.length - m; i++)\n\t{\n\t\tresult[i] = list[i];\n\t}\n\t\n\tfor (long i = 0; i < m; i++)\n\t{\n\t\tresult[list.length - m + i] = tmp[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666122589,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmplpuxqz8e.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x4285cd]\n??:? void tmplpuxqz8e.__unittest_L30_C1() [0x4280af]\n??:? void tmplpuxqz8e.__modtest() [0x42834c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c687]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b51a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c54]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430731]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4f1]\n??:? runModuleUnitTests [0x42c45d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a90]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result = new long[list.length];\n\tlong[] temp = new long[list.length];\n\tlong[] temp2 = new long[list.length];\n\t\n\tfor (long i = 0; i < list.length; i++)\n\t{\n\t\ttemp[i] = list[i];\n\t}\n\t\n\tfor (long i = 0; i < list.length; i++)\n\t{\n\t\tif (i + m < list.length)\n\t\t{\n\t\t\tresult[i + m] = temp[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttemp2[i + m - list.length] = temp[i];\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < temp2.length; i++)\n\t{\n\t\tresult[i] = temp2[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666122589,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpuy84k_1e.d(42): unittest failure\n----------------\n??:? _d_unittestp [0x42864d]\n??:? void tmpuy84k_1e.__unittest_L38_C1() [0x42812f]\n??:? void tmpuy84k_1e.__modtest() [0x4283cc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c707]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b59a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430825]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430cd4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4307b1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b571]\n??:? runModuleUnitTests [0x42c4dd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b10]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result = new long[list.length];\n\tlong[] temp = new long[m];\n\tlong[] temp2 = new long[list.length - m];\n\t\n\tfor (int i = 0; i < m; i++)\n\t{\n\t\ttemp[i] = list[i];\n\t}\n\t\n\tfor (int i = 0; i < list.length - m; i++)\n\t{\n\t\ttemp2[i] = list[i + m];\n\t}\n\t\n\tfor (int i = 0; i < list.length - m; i++)\n\t{\n\t\tresult[i] = temp2[i];\n\t}\n\t\n\tfor (int i = 0; i < m; i++)\n\t{\n\t\tresult[i + list.length - m] = temp[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666122589,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp7uaj2od6.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x42866d]\n??:? void tmp7uaj2od6.__unittest_L36_C1() [0x42814f]\n??:? void tmp7uaj2od6.__modtest() [0x4283ec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c727]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5ba]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430845]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430cf4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4307d1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b591]\n??:? runModuleUnitTests [0x42c4fd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b30]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result = new long[list.length];\n\tforeach(i, e; list)\n\t{\n\t\tresult[(i + m) % list.length] = e;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666122588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result = new long[list.length];\n\tlong[] temp = new long[m];\n\tlong[] temp2 = new long[list.length - m];\n\t\n\tfor(long i = 0; i < m; i++)\n\t{\n\t\ttemp[i] = list[i];\n\t}\n\t\n\tfor(long i = 0; i < list.length - m; i++)\n\t{\n\t\ttemp2[i] = list[i + m];\n\t}\n\t\n\tfor(long i = 0; i < list.length - m; i++)\n\t{\n\t\tresult[i] = temp2[i];\n\t}\n\t\n\tfor(long i = 0; i < m; i++)\n\t{\n\t\tresult[list.length - m + i] = temp[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666122588,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpsc237bkn.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x42865d]\n??:? void tmpsc237bkn.__unittest_L36_C1() [0x42813f]\n??:? void tmpsc237bkn.__modtest() [0x4283dc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c717]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5aa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430835]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ce4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4307c1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b581]\n??:? runModuleUnitTests [0x42c4ed]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b20]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result = new long[list.length];\n\tlong[] temp = new long[m];\n\t\n\tfor(long i = 0; i < m; i++)\n\t{\n\t\ttemp[i] = list[list.length - m + i];\n\t}\n\t\n\tfor(long i = 0; i < list.length - m; i++)\n\t{\n\t\tresult[i] = list[i];\n\t}\n\t\n\tfor(long i = 0; i < m; i++)\n\t{\n\t\tresult[list.length - m + i] = temp[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666122588,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpf1lms3kn.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x4285cd]\n??:? void tmpf1lms3kn.__unittest_L30_C1() [0x4280af]\n??:? void tmpf1lms3kn.__modtest() [0x42834c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c687]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b51a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c54]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430731]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4f1]\n??:? runModuleUnitTests [0x42c45d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a90]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result = new long[list.length];\n\tlong[] temp = new long[m];\n\tlong[] temp2 = new long[list.length - m];\n\t\n\ttemp = list[0..m];\n\ttemp2 = list[m..$];\n\t\n\tresult = temp2 ~ temp;\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666122588,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp04f7ivtw.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x4284f5]\n??:? void tmp04f7ivtw.__unittest_L21_C1() [0x427fd7]\n??:? void tmp04f7ivtw.__modtest() [0x428274]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b58a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4306cd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b7c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430659]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b561]\n??:? runModuleUnitTests [0x42c4cd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4289b8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result = new long[list.length];\n\tlong[] temp = new long[m];\n\tlong[] temp2 = new long[list.length - m];\n\t\n\tfor(long i = 0; i < m; i++)\n\t{\n\t\ttemp[i] = list[i];\n\t}\n\t\n\tfor(long i = 0; i < list.length - m; i++)\n\t{\n\t\ttemp2[i] = list[i + m];\n\t}\n\t\n\tfor(long i = 0; i < list.length - m; i++)\n\t{\n\t\tresult[i] = temp2[i];\n\t}\n\t\n\tfor(long i = 0; i < m; i++)\n\t{\n\t\tresult[list.length - m + i] = temp[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666122588,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpsc237bkn.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x42865d]\n??:? void tmpsc237bkn.__unittest_L36_C1() [0x42813f]\n??:? void tmpsc237bkn.__modtest() [0x4283dc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c717]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5aa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430835]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ce4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4307c1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b581]\n??:? runModuleUnitTests [0x42c4ed]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b20]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result = new long[list.length];\n\tlong[] temp = new long[m];\n\tlong[] temp2 = new long[list.length-m];\n\t\n\tfor(long i = 0; i < m; i++)\n\t{\n\t\ttemp[i] = list[i];\n\t}\n\t\n\tfor(long i = m; i < list.length; i++)\n\t{\n\t\ttemp2[i-m] = list[i];\n\t}\n\t\n\tfor(long i = 0; i < list.length; i++)\n\t{\n\t\tif(i < list.length-m)\n\t\t{\n\t\t\tresult[i] = temp2[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[i] = temp[i-list.length+m];\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666122589,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpayo278e8.d(42): unittest failure\n----------------\n??:? _d_unittestp [0x42864d]\n??:? void tmpayo278e8.__unittest_L38_C1() [0x42812f]\n??:? void tmpayo278e8.__modtest() [0x4283cc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c707]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b59a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430825]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430cd4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4307b1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b571]\n??:? runModuleUnitTests [0x42c4dd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b10]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] new_list = new long[list.length];\n\tlong[] temp = new long[m];\n\tlong[] temp2 = new long[list.length - m];\n\t\n\tfor(long i = 0; i < m; i++)\n\t{\n\t\ttemp[i] = list[i];\n\t}\n\t\n\tfor(long i = 0; i < list.length - m; i++)\n\t{\n\t\ttemp2[i] = list[i + m];\n\t}\n\t\n\tfor(long i = 0; i < list.length - m; i++)\n\t{\n\t\tnew_list[i] = temp2[i];\n\t}\n\t\n\tfor(long i = 0; i < m; i++)\n\t{\n\t\tnew_list[i + list.length - m] = temp[i];\n\t}\n\t\n\treturn new_list;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666122588,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpob4hqkje.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x42865d]\n??:? void tmpob4hqkje.__unittest_L36_C1() [0x42813f]\n??:? void tmpob4hqkje.__modtest() [0x4283dc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c717]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5aa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430835]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ce4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4307c1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b581]\n??:? runModuleUnitTests [0x42c4ed]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b20]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result = new long[list.length];\n\tlong[] temp = new long[list.length];\n\tlong[] temp2 = new long[list.length];\n\t\n\ttemp = list[0..m];\n\ttemp2 = list[m..$];\n\t\n\tresult = temp2 ~ temp;\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666122589,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp8a4hbftb.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x4284ed]\n??:? void tmp8a4hbftb.__unittest_L21_C1() [0x427fd3]\n??:? void tmp8a4hbftb.__modtest() [0x428270]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b582]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4306c5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b74]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430651]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b559]\n??:? runModuleUnitTests [0x42c4c5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4289b0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result = new long[list.length];\n\tlong[] temp = new long[m];\n\tlong[] temp2 = new long[list.length - m];\n\t\n\tfor(long i = 0; i < m; i++)\n\t{\n\t\ttemp[i] = list[i];\n\t}\n\t\n\tfor(long i = 0; i < list.length - m; i++)\n\t{\n\t\ttemp2[i] = list[i + m];\n\t}\n\t\n\tfor(long i = 0; i < list.length - m; i++)\n\t{\n\t\tresult[i] = temp2[i];\n\t}\n\t\n\tfor(long i = 0; i < m; i++)\n\t{\n\t\tresult[list.length - m + i] = temp[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666122588,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpsc237bkn.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x42865d]\n??:? void tmpsc237bkn.__unittest_L36_C1() [0x42813f]\n??:? void tmpsc237bkn.__modtest() [0x4283dc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c717]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5aa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430835]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ce4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4307c1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b581]\n??:? runModuleUnitTests [0x42c4ed]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b20]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result = new long[list.length];\n\tlong[] temp = new long[m];\n\t\n\tfor (long i = 0; i < m; i++)\n\t{\n\t\ttemp[i] = list[list.length - m + i];\n\t}\n\t\n\tfor (long i = 0; i < list.length - m; i++)\n\t{\n\t\tresult[i] = list[i];\n\t}\n\t\n\tfor (long i = 0; i < m; i++)\n\t{\n\t\tresult[list.length - m + i] = temp[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5emgk652.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x4285cd]\n??:? void tmp5emgk652.__unittest_L30_C1() [0x4280af]\n??:? void tmp5emgk652.__modtest() [0x42834c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c687]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b51a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c54]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430731]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4f1]\n??:? runModuleUnitTests [0x42c45d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a90]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] new_list = new long[list.length];\n\tlong[] temp_list = new long[m];\n\tlong[] temp_list2 = new long[list.length - m];\n\tlong[] temp_list3 = new long[m];\n\tlong[] temp_list4 = new long[list.length - m];\n\t\n\tfor(long i = 0; i < m; i++)\n\t{\n\t\ttemp_list[i] = list[i];\n\t}\n\t\n\tfor(long i = m; i < list.length; i++)\n\t{\n\t\ttemp_list2[i - m] = list[i];\n\t}\n\t\n\tfor(long i = 0; i < m; i++)\n\t{\n\t\ttemp_list3[i] = temp_list2[i];\n\t}\n\t\n\tfor(long i = m; i < list.length; i++)\n\t{\n\t\ttemp_list4[i - m] = temp_list[i - m];\n\t}\n\t\n\tfor(long i = 0; i < m; i++)\n\t{\n\t\tnew_list[i] = temp_list3[i];\n\t}\n\t\n\tfor(long i = m; i < list.length; i++)\n\t{\n\t\tnew_list[i] = temp_list4[i - m];\n\t}\n\t\n\treturn new_list;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666122589,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmps2hw_xfc.d(33): Range violation\n----------------\n??:? _d_arrayboundsp [0x42885e]\n??:? long[] tmps2hw_xfc.rotate_right(long[], long) [0x428054]\n??:? void tmps2hw_xfc.__unittest_L48_C1() [0x428204]\n??:? void tmps2hw_xfc.__modtest() [0x428530]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c867]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b6fa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430985]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e34]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430911]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6d1]\n??:? runModuleUnitTests [0x42c63d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int fu",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result = new long[list.length];\n\tlong[] temp = new long[m];\n\tlong[] temp2 = new long[list.length - m];\n\t\n\tfor(long i = 0; i < m; i++)\n\t{\n\t\ttemp[i] = list[i];\n\t}\n\t\n\tfor(long i = 0; i < list.length - m; i++)\n\t{\n\t\ttemp2[i] = list[i + m];\n\t}\n\t\n\tfor(long i = 0; i < list.length - m; i++)\n\t{\n\t\tresult[i] = temp2[i];\n\t}\n\t\n\tfor(long i = 0; i < m; i++)\n\t{\n\t\tresult[i + list.length - m] = temp[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpaajve53q.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x42865d]\n??:? void tmpaajve53q.__unittest_L36_C1() [0x42813f]\n??:? void tmpaajve53q.__modtest() [0x4283dc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c717]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5aa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430835]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ce4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4307c1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b581]\n??:? runModuleUnitTests [0x42c4ed]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b20]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] new_list = new long[list.length];\n\tfor (long i = 0; i < list.length; i++)\n\t{\n\t\tnew_list[(i + m) % list.length] = list[i];\n\t}\n\treturn new_list;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666122589,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{ \n\tlong[] result = new long[list.length];\n\tlong[] temp = new long[m];\n\tlong[] temp2 = new long[list.length - m];\n\t\n\tfor(long i = 0; i < m; i++)\n\t{\n\t\ttemp[i] = list[i];\n\t}\n\t\n\tfor(long i = 0; i < list.length - m; i++)\n\t{\n\t\ttemp2[i] = list[i + m];\n\t}\n\t\n\tfor(long i = 0; i < list.length - m; i++)\n\t{\n\t\tresult[i] = temp2[i];\n\t}\n\t\n\tfor(long i = 0; i < m; i++)\n\t{\n\t\tresult[i + list.length - m] = temp[i];\n\t}\n\t\n\treturn result;\n} \nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666122589,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpagboxmww.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x42865d]\n??:? void tmpagboxmww.__unittest_L36_C1() [0x42813f]\n??:? void tmpagboxmww.__modtest() [0x4283dc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c717]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5aa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430835]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ce4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4307c1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b581]\n??:? runModuleUnitTests [0x42c4ed]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b20]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result = new long[list.length];\n\tlong[] temp = new long[m];\n\tlong[] temp2 = new long[list.length - m];\n\t\n\tfor(long i = 0; i < m; i++)\n\t{\n\t\ttemp[i] = list[i];\n\t}\n\t\n\tfor(long i = 0; i < list.length - m; i++)\n\t{\n\t\ttemp2[i] = list[i + m];\n\t}\n\t\n\tfor(long i = 0; i < list.length - m; i++)\n\t{\n\t\tresult[i] = temp2[i];\n\t}\n\t\n\tfor(long i = 0; i < m; i++)\n\t{\n\t\tresult[i + list.length - m] = temp[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpaajve53q.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x42865d]\n??:? void tmpaajve53q.__unittest_L36_C1() [0x42813f]\n??:? void tmpaajve53q.__modtest() [0x4283dc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c717]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5aa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430835]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ce4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4307c1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b581]\n??:? runModuleUnitTests [0x42c4ed]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b20]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result = new long[list.length];\n\t\n\tfor(long i = 0; i < list.length; i++)\n\t{\n\t\tresult[(i + m) % list.length] = list[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666122589,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] new_list = new long[list.length];\n\tlong[] temp = new long[m];\n\t\n\tfor(long i = 0; i < m; i++)\n\t{\n\t\ttemp[i] = list[list.length - m + i];\n\t}\n\t\n\tfor(long i = 0; i < list.length - m; i++)\n\t{\n\t\tnew_list[i] = list[i];\n\t}\n\t\n\tfor(long i = 0; i < m; i++)\n\t{\n\t\tnew_list[list.length - m + i] = temp[i];\n\t}\n\t\n\treturn new_list;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666122589,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpmpqmzo30.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x4285cd]\n??:? void tmpmpqmzo30.__unittest_L30_C1() [0x4280af]\n??:? void tmpmpqmzo30.__modtest() [0x42834c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c687]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b51a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c54]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430731]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4f1]\n??:? runModuleUnitTests [0x42c45d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a90]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] new_list = new long[list.length];\n\tlong i = 0;\n\tlong j = 0;\n\twhile (i < list.length)\n\t{\n\t\tif (i + m < list.length)\n\t\t{\n\t\t\tnew_list[i] = list[i + m];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnew_list[i] = list[j];\n\t\t\tj++;\n\t\t}\n\t\ti++;\n\t}\n\treturn new_list;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666122589,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmplyx9h7tm.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x42853d]\n??:? void tmplyx9h7tm.__unittest_L28_C1() [0x428023]\n??:? void tmplyx9h7tm.__modtest() [0x4282c0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b48a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430715]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430bc4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4306a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b461]\n??:? runModuleUnitTests [0x42c3cd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a00]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] temp = new long[m];\n\tlong[] result = new long[list.length];\n\t\n\tfor(long i = 0; i < m; i++)\n\t{\n\t\ttemp[i] = list[list.length - m + i];\n\t}\n\t\n\tfor(long i = 0; i < list.length - m; i++)\n\t{\n\t\tresult[i] = list[i];\n\t}\n\t\n\tfor(long i = 0; i < m; i++)\n\t{\n\t\tresult[list.length - m + i] = temp[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666122589,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpdeklj8p4.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x4285cd]\n??:? void tmpdeklj8p4.__unittest_L30_C1() [0x4280b3]\n??:? void tmpdeklj8p4.__modtest() [0x428350]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c687]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b51a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c54]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430731]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4f1]\n??:? runModuleUnitTests [0x42c45d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a90]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result = new long[list.length];\n\tlong n = list.length;\n\t\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tresult[(i + m) % n] = list[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666122589,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tauto result = new long[list.length];\n\tauto i = 0;\n\twhile(i < list.length)\n\t{\n\t\tresult[(i + m) % list.length] = list[i];\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666122589,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result;\n\tlong[] temp;\n\tlong[] temp2;\n\tlong[] temp3;\n\tlong[] temp4;\n\tlong[] temp5;\n\tlong[] temp6;\n\tlong[] temp7;\n\tlong[] temp8;\n\tlong[] temp9;\n\tlong[] temp10;\n\tlong[] temp11;\n\tlong[] temp12;\n\tlong[] temp13;\n\tlong[] temp14;\n\tlong[] temp15;\n\tlong[] temp16;\n\tlong[] temp17;\n\tlong[] temp18;\n\tlong[] temp19;\n\tlong[] temp20;\n\tlong[] temp21;\n\tlong[] temp22;\n\tlong[] temp23;\n\tlong[] temp24;\n\tlong[] temp25;\n\tlong[] temp26;\n\tlong[] temp27;\n\tlong[] temp28;\n\tlong[] temp29;\n\tlong[] temp30;\n\tlong[] temp31;\n\tlong[] temp32;\n\tlong[] temp33;\n\tlong[] temp34;\n\tlong[] temp35;\n\tlong[] temp36;\n\tlong[] temp37;\n\tlong[] temp38;\n\tlong[] temp39;\n\tlong[] temp40;\n\tlong[] temp41;\n\tlong[] temp42;\n\tlong[] temp43;\n\tlong[] temp44;\n\tlong[] temp45;\n\tlong[] temp46;\n\tlong[] temp47;\n\tlong[] temp48;\n\tlong[] temp49;\n\tlong[] temp50;\n\tlong[] temp51;\n\tlong[] temp52;\n\tlong[] temp53;\n\tlong[] temp54;\n\tlong[] temp55;\n\tlong[] temp56;\n\tlong[] temp57;\n\tlong[] temp58;\n\tlong[] temp59;\n\tlong[] temp60;\n\tlong[] temp61;\n\tlong[] temp62;\n\tlong[] temp63;\n\tlong[] temp64;\n\tlong[] temp65;\n\tlong[] temp66;\n\tlong[] temp67;\n\tlong[] temp68;\n\tlong[] temp69;\n\tlong[] temp70;\n\tlong[] temp71;\n\tlong[] temp72;\n\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666122588,
      "stdout": "",
      "stderr": "/tmp/tmpzmrv5nh4.d(84): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzmrv5nh4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result = new long[list.length];\n\tlong[] temp = new long[m];\n\t\n\tfor(long i = 0; i < m; i++)\n\t\ttemp[i] = list[i];\n\t\n\tfor(long i = 0; i < list.length - m; i++)\n\t\tresult[i] = list[i + m];\n\t\n\tfor(long i = 0; i < m; i++)\n\t\tresult[list.length - m + i] = temp[i];\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666122589,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp46cbcujd.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x4285cd]\n??:? void tmp46cbcujd.__unittest_L24_C1() [0x4280af]\n??:? void tmp46cbcujd.__modtest() [0x42834c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c687]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b51a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c54]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430731]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4f1]\n??:? runModuleUnitTests [0x42c45d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a90]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result = new long[list.length];\n\tlong[] temp = new long[m];\n\tlong[] temp2 = new long[list.length - m];\n\t\n\tfor (long i = 0; i < m; i++)\n\t{\n\t\ttemp[i] = list[i];\n\t}\n\t\n\tfor (long i = m; i < list.length; i++)\n\t{\n\t\ttemp2[i - m] = list[i];\n\t}\n\t\n\tfor (long i = 0; i < list.length - m; i++)\n\t{\n\t\tresult[i] = temp2[i];\n\t}\n\t\n\tfor (long i = list.length - m; i < list.length; i++)\n\t{\n\t\tresult[i] = temp[i - (list.length - m)];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666122588,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqc05btci.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x428655]\n??:? void tmpqc05btci.__unittest_L36_C1() [0x42813b]\n??:? void tmpqc05btci.__modtest() [0x4283d8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c70f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5a2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43082d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430cdc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4307b9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b579]\n??:? runModuleUnitTests [0x42c4e5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b18]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result = new long[list.length];\n\tfor (long i = 0; i < list.length; i++)\n\t{\n\t\tresult[i] = list[(i + m) % list.length];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666122589,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp313s8avh.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x4284d5]\n??:? void tmp313s8avh.__unittest_L17_C1() [0x427fbb]\n??:? void tmp313s8avh.__modtest() [0x428258]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c58f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b422]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4306ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b5c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430639]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3f9]\n??:? runModuleUnitTests [0x42c365]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428998]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result;\n\tlong[] temp;\n\tlong[] temp2;\n\tlong i;\n\tlong j;\n\t\n\tresult = new long[list.length];\n\ttemp = new long[m];\n\ttemp2 = new long[list.length - m];\n\t\n\tfor (i = 0; i < m; i++)\n\t{\n\t\ttemp[i] = list[i];\n\t}\n\t\n\tfor (i = 0; i < list.length - m; i++)\n\t{\n\t\ttemp2[i] = list[i + m];\n\t}\n\t\n\tfor (i = 0; i < list.length - m; i++)\n\t{\n\t\tresult[i] = temp2[i];\n\t}\n\t\n\tfor (i = 0; i < m; i++)\n\t{\n\t\tresult[i + list.length - m] = temp[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666122589,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp1aqifrry.d(46): unittest failure\n----------------\n??:? _d_unittestp [0x42868d]\n??:? void tmp1aqifrry.__unittest_L42_C1() [0x42816f]\n??:? void tmp1aqifrry.__modtest() [0x42840c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c747]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5da]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430865]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d14]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4307f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5b1]\n??:? runModuleUnitTests [0x42c51d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b50]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result = new long[list.length];\n\tlong[] temp = new long[m];\n\tlong[] temp2 = new long[list.length - m];\n\t\n\tfor (long i = 0; i < m; i++)\n\t{\n\t\ttemp[i] = list[i];\n\t}\n\t\n\tfor (long i = 0; i < list.length - m; i++)\n\t{\n\t\ttemp2[i] = list[i + m];\n\t}\n\t\n\tfor (long i = 0; i < list.length - m; i++)\n\t{\n\t\tresult[i] = temp2[i];\n\t}\n\t\n\tfor (long i = 0; i < m; i++)\n\t{\n\t\tresult[list.length - m + i] = temp[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666122588,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpkxxpc5ga.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x42865d]\n??:? void tmpkxxpc5ga.__unittest_L36_C1() [0x42813f]\n??:? void tmpkxxpc5ga.__modtest() [0x4283dc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c717]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5aa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430835]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ce4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4307c1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b581]\n??:? runModuleUnitTests [0x42c4ed]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b20]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result = new long[list.length];\n\t\n\tforeach(i, e; list)\n\t{\n\t\tlong index = (i + m) % list.length;\n\t\tresult[index] = e;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666122589,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result = new long[list.length];\n\tlong[] temp = new long[m];\n\t\n\tfor (long i = 0; i < m; i++)\n\t{\n\t\ttemp[i] = list[i];\n\t}\n\t\n\tfor (long i = 0; i < list.length - m; i++)\n\t{\n\t\tresult[i] = list[i + m];\n\t}\n\t\n\tfor (long i = 0; i < m; i++)\n\t{\n\t\tresult[list.length - m + i] = temp[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666122588,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp0cu55wjz.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x4285cd]\n??:? void tmp0cu55wjz.__unittest_L30_C1() [0x4280af]\n??:? void tmp0cu55wjz.__modtest() [0x42834c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c687]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b51a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c54]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430731]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4f1]\n??:? runModuleUnitTests [0x42c45d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a90]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] temp = new long[m];\n\tlong[] result = new long[m];\n\tlong[] result2 = new long[m];\n\tlong[] result3 = new long[m];\n\tlong[] result4 = new long[m];\n\t\n\tfor(long i = 0; i < m; i++)\n\t{\n\t\ttemp[i] = list[i];\n\t}\n\t\n\tfor(long i = 0; i < m; i++)\n\t{\n\t\tresult[i] = list[i + m];\n\t}\n\t\n\tfor(long i = 0; i < m; i++)\n\t{\n\t\tresult2[i] = result[i];\n\t}\n\t\n\tfor(long i = 0; i < m; i++)\n\t{\n\t\tresult3[i] = temp[i];\n\t}\n\t\n\tfor(long i = 0; i < m; i++)\n\t{\n\t\tresult4[i] = result2[i];\n\t}\n\t\n\tfor(long i = 0; i < m; i++)\n\t{\n\t\tresult4[i + m] = result3[i];\n\t}\n\t\n\treturn result4;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666122589,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpnrlpk3v6.d(43): Range violation\n----------------\n??:? _d_arrayboundsp [0x42883e]\n??:? long[] tmpnrlpk3v6.rotate_right(long[], long) [0x428106]\n??:? void tmpnrlpk3v6.__unittest_L48_C1() [0x4281e0]\n??:? void tmpnrlpk3v6.__modtest() [0x42850c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c847]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b6da]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430965]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e14]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4308f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6b1]\n??:? runModuleUnitTests [0x42c61d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int fu",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result = new long[list.length];\n\tlong[] temp = new long[m];\n\t\n\tfor (long i = 0; i < m; i++)\n\t{\n\t\ttemp[i] = list[i];\n\t}\n\t\n\tfor (long i = 0; i < list.length - m; i++)\n\t{\n\t\tresult[i] = list[i + m];\n\t}\n\t\n\tfor (long i = 0; i < m; i++)\n\t{\n\t\tresult[list.length - m + i] = temp[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666122588,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp0cu55wjz.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x4285cd]\n??:? void tmp0cu55wjz.__unittest_L30_C1() [0x4280af]\n??:? void tmp0cu55wjz.__modtest() [0x42834c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c687]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b51a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c54]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430731]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4f1]\n??:? runModuleUnitTests [0x42c45d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a90]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result = new long[list.length];\n\tlong[] temp = new long[m];\n\tlong[] temp2 = new long[list.length - m];\n\t\n\tfor(long i = 0; i < m; i++)\n\t{\n\t\ttemp[i] = list[i];\n\t}\n\t\n\tfor(long i = m; i < list.length; i++)\n\t{\n\t\ttemp2[i - m] = list[i];\n\t}\n\t\n\tfor(long i = 0; i < list.length - m; i++)\n\t{\n\t\tresult[i] = temp2[i];\n\t}\n\t\n\tfor(long i = list.length - m; i < list.length; i++)\n\t{\n\t\tresult[i] = temp[i - (list.length - m)];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666122588,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpq8s_fij4.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x428655]\n??:? void tmpq8s_fij4.__unittest_L36_C1() [0x42813b]\n??:? void tmpq8s_fij4.__modtest() [0x4283d8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c70f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5a2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43082d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430cdc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4307b9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b579]\n??:? runModuleUnitTests [0x42c4e5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b18]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] res = new long[list.length];\n\tfor (long i = 0; i < list.length; i++) \n\t{\n\t\tres[i] = list[(i + m) % list.length];\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666122589,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpcsw6q71b.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x4284d5]\n??:? void tmpcsw6q71b.__unittest_L17_C1() [0x427fbb]\n??:? void tmpcsw6q71b.__modtest() [0x428258]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c58f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b422]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4306ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b5c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430639]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3f9]\n??:? runModuleUnitTests [0x42c365]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428998]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result = new long[list.length];\n\tfor (long i = 0; i < list.length; i++)\n\t{\n\t\tresult[i] = list[(i + m) % list.length];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666122589,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp313s8avh.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x4284d5]\n??:? void tmp313s8avh.__unittest_L17_C1() [0x427fbb]\n??:? void tmp313s8avh.__modtest() [0x428258]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c58f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b422]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4306ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b5c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430639]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3f9]\n??:? runModuleUnitTests [0x42c365]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428998]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result = new long[list.length];\n\tlong[] temp = new long[m];\n\t\n\tfor(long i = 0; i < m; i++)\n\t{\n\t\ttemp[i] = list[i];\n\t}\n\t\n\tfor(long i = 0; i < list.length - m; i++)\n\t{\n\t\tresult[i] = list[i + m];\n\t}\n\t\n\tfor(long i = 0; i < m; i++)\n\t{\n\t\tresult[list.length - m + i] = temp[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666122589,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpxo2krejf.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x4285cd]\n??:? void tmpxo2krejf.__unittest_L30_C1() [0x4280af]\n??:? void tmpxo2krejf.__modtest() [0x42834c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c687]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b51a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c54]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430731]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4f1]\n??:? runModuleUnitTests [0x42c45d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a90]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{ \n\tlong[] result = new long[list.length];\n\tforeach(i, item; list)\n\t{\n\t\tlong index = (i + m) % list.length;\n\t\tresult[index] = item;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666122589,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] ret = new long[list.length];\n\tlong i = 0;\n\tlong j = 0;\n\tforeach(e; list)\n\t{\n\t\tif(i < m)\n\t\t{\n\t\t\tret[list.length - m + i] = e;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tret[j] = e;\n\t\t\tj++;\n\t\t}\n\t\ti++;\n\t}\n\treturn ret;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666122589,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp_dxxmdjy.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x428525]\n??:? void tmp_dxxmdjy.__unittest_L28_C1() [0x42800b]\n??:? void tmp_dxxmdjy.__modtest() [0x4282a8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c5df]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b472]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4306fd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430bac]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430689]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b449]\n??:? runModuleUnitTests [0x42c3b5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4289e8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result = new long[list.length];\n\tlong[] temp = new long[m];\n\t\n\tfor(long i = 0; i < m; i++)\n\t{\n\t\ttemp[i] = list[list.length - m + i];\n\t}\n\t\n\tfor(long i = 0; i < list.length - m; i++)\n\t{\n\t\tresult[i] = list[i];\n\t}\n\t\n\tfor(long i = 0; i < m; i++)\n\t{\n\t\tresult[list.length - m + i] = temp[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666122588,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpf1lms3kn.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x4285cd]\n??:? void tmpf1lms3kn.__unittest_L30_C1() [0x4280af]\n??:? void tmpf1lms3kn.__modtest() [0x42834c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c687]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b51a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c54]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430731]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4f1]\n??:? runModuleUnitTests [0x42c45d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a90]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result = new long[list.length];\n\tlong[] temp = new long[m];\n\tlong[] temp2 = new long[list.length - m];\n\t\n\tfor (long i = 0; i < m; i++)\n\t{\n\t\ttemp[i] = list[i];\n\t}\n\t\n\tfor (long i = 0; i < list.length - m; i++)\n\t{\n\t\ttemp2[i] = list[i + m];\n\t}\n\t\n\tfor (long i = 0; i < list.length - m; i++)\n\t{\n\t\tresult[i] = temp2[i];\n\t}\n\t\n\tfor (long i = 0; i < m; i++)\n\t{\n\t\tresult[i + list.length - m] = temp[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpnchjlsu6.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x42865d]\n??:? void tmpnchjlsu6.__unittest_L36_C1() [0x42813f]\n??:? void tmpnchjlsu6.__modtest() [0x4283dc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c717]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5aa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430835]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ce4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4307c1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b581]\n??:? runModuleUnitTests [0x42c4ed]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b20]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result = new long[list.length];\n\tlong[] temp = new long[m];\n\t\n\t//copy the last m elements to temp\n\tfor(int i = 0; i < m; i++)\n\t{\n\t\ttemp[i] = list[list.length - m + i];\n\t}\n\t\n\t//copy the first n - m elements to result\n\tfor(int i = 0; i < list.length - m; i++)\n\t{\n\t\tresult[i] = list[i];\n\t}\n\t\n\t//copy the temp to result\n\tfor(int i = 0; i < m; i++)\n\t{\n\t\tresult[list.length - m + i] = temp[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666122589,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpp63zza4u.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x4285cd]\n??:? void tmpp63zza4u.__unittest_L33_C1() [0x4280af]\n??:? void tmpp63zza4u.__modtest() [0x42834c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c687]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b51a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c54]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430731]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4f1]\n??:? runModuleUnitTests [0x42c45d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a90]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] new_list = new long[list.length];\n\tlong[] temp = new long[m];\n\tlong[] temp2 = new long[list.length - m];\n\t\n\tfor(long i = 0; i < m; i++)\n\t{\n\t\ttemp[i] = list[i];\n\t}\n\t\n\tfor(long i = 0; i < list.length - m; i++)\n\t{\n\t\ttemp2[i] = list[m + i];\n\t}\n\t\n\tfor(long i = 0; i < list.length - m; i++)\n\t{\n\t\tnew_list[i] = temp2[i];\n\t}\n\t\n\tfor(long i = 0; i < m; i++)\n\t{\n\t\tnew_list[list.length - m + i] = temp[i];\n\t}\n\t\n\treturn new_list;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666122589,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp7chg_3yu.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x42865d]\n??:? void tmp7chg_3yu.__unittest_L36_C1() [0x42813f]\n??:? void tmp7chg_3yu.__modtest() [0x4283dc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c717]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5aa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430835]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ce4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4307c1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b581]\n??:? runModuleUnitTests [0x42c4ed]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b20]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result = new long[list.length];\n\tlong[] temp = new long[m];\n\t\n\tfor (int i = 0; i < m; i++)\n\t{\n\t\ttemp[i] = list[list.length - m + i];\n\t}\n\t\n\tfor (int i = 0; i < list.length - m; i++)\n\t{\n\t\tresult[i] = list[i];\n\t}\n\t\n\tfor (int i = 0; i < m; i++)\n\t{\n\t\tresult[list.length - m + i] = temp[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666122589,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp2afhou20.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x4285cd]\n??:? void tmp2afhou20.__unittest_L30_C1() [0x4280af]\n??:? void tmp2afhou20.__modtest() [0x42834c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c687]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b51a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c54]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430731]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4f1]\n??:? runModuleUnitTests [0x42c45d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a90]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result = new long[list.length];\n\tlong[] temp = new long[m];\n\t\n\tfor(long i = 0; i < m; i++)\n\t{\n\t\ttemp[i] = list[i];\n\t}\n\t\n\tfor(long i = 0; i < list.length - m; i++)\n\t{\n\t\tresult[i] = list[i + m];\n\t}\n\t\n\tfor(long i = 0; i < m; i++)\n\t{\n\t\tresult[list.length - m + i] = temp[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666122589,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpxo2krejf.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x4285cd]\n??:? void tmpxo2krejf.__unittest_L30_C1() [0x4280af]\n??:? void tmpxo2krejf.__modtest() [0x42834c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c687]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b51a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c54]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430731]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4f1]\n??:? runModuleUnitTests [0x42c45d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a90]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result = new long[list.length];\n\tfor (long i = 0; i < list.length; i++) \n\t{\n\t\tresult[(i + m) % list.length] = list[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result = new long[list.length];\n\tlong[] temp = new long[m];\n\t\n\tfor(long i = 0; i < m; i++)\n\t{\n\t\ttemp[i] = list[list.length - m + i];\n\t}\n\t\n\tfor(long i = 0; i < list.length - m; i++)\n\t{\n\t\tresult[i] = list[i];\n\t}\n\t\n\tfor(long i = 0; i < m; i++)\n\t{\n\t\tresult[list.length - m + i] = temp[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666122588,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpf1lms3kn.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x4285cd]\n??:? void tmpf1lms3kn.__unittest_L30_C1() [0x4280af]\n??:? void tmpf1lms3kn.__modtest() [0x42834c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c687]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b51a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c54]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430731]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4f1]\n??:? runModuleUnitTests [0x42c45d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a90]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result = new long[list.length];\n\tlong[] temp = new long[m];\n\tlong[] temp2 = new long[list.length - m];\n\t\n\tfor(long i = 0; i < m; i++)\n\t{\n\t\ttemp[i] = list[i];\n\t}\n\t\n\tfor(long i = 0; i < list.length - m; i++)\n\t{\n\t\ttemp2[i] = list[i + m];\n\t}\n\t\n\tfor(long i = 0; i < list.length - m; i++)\n\t{\n\t\tresult[i] = temp2[i];\n\t}\n\t\n\tfor(long i = 0; i < m; i++)\n\t{\n\t\tresult[i + list.length - m] = temp[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpaajve53q.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x42865d]\n??:? void tmpaajve53q.__unittest_L36_C1() [0x42813f]\n??:? void tmpaajve53q.__modtest() [0x4283dc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c717]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5aa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430835]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ce4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4307c1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b581]\n??:? runModuleUnitTests [0x42c4ed]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b20]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result = new long[list.length];\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong n = list.length;\n\t\n\tfor(i = 0; i < n; i++)\n\t{\n\t\tj = (i + m) % n;\n\t\tresult[j] = list[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666122589,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result;\n\tlong[] temp;\n\tlong i;\n\tlong j;\n\tlong k;\n\tlong n;\n\t\n\tn = list.length;\n\tresult = new long[n];\n\ttemp = new long[m];\n\t\n\tfor (i = 0; i < m; i++)\n\t{\n\t\ttemp[i] = list[i];\n\t}\n\t\n\tk = 0;\n\tfor (j = m; j < n; j++)\n\t{\n\t\tresult[k] = list[j];\n\t\tk++;\n\t}\n\t\n\tfor (i = 0; i < m; i++)\n\t{\n\t\tresult[k] = temp[i];\n\t\tk++;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666122589,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpzwwg1tak.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x428605]\n??:? void tmpzwwg1tak.__unittest_L41_C1() [0x4280e7]\n??:? void tmpzwwg1tak.__modtest() [0x428384]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6bf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b552]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307dd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c8c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430769]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b529]\n??:? runModuleUnitTests [0x42c495]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ac8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result = new long[list.length];\n\tlong[] temp = new long[m];\n\tlong[] temp2 = new long[list.length - m];\n\t\n\tfor (long i = 0; i < m; i++)\n\t{\n\t\ttemp[i] = list[i];\n\t}\n\t\n\tfor (long i = 0; i < list.length - m; i++)\n\t{\n\t\ttemp2[i] = list[i + m];\n\t}\n\t\n\tfor (long i = 0; i < list.length - m; i++)\n\t{\n\t\tresult[i] = temp2[i];\n\t}\n\t\n\tfor (long i = 0; i < m; i++)\n\t{\n\t\tresult[list.length - m + i] = temp[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666122588,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpkxxpc5ga.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x42865d]\n??:? void tmpkxxpc5ga.__unittest_L36_C1() [0x42813f]\n??:? void tmpkxxpc5ga.__modtest() [0x4283dc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c717]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5aa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430835]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ce4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4307c1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b581]\n??:? runModuleUnitTests [0x42c4ed]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b20]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result = new long[list.length];\n\tfor (long i = 0; i < list.length; i++) \n\t{\n\t\tresult[(i + m) % list.length] = list[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] new_list = new long[list.length];\n\tlong[] temp_list = new long[m];\n\tlong[] temp_list2 = new long[list.length - m];\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\t\n\tfor(i = 0; i < list.length; i++)\n\t{\n\t\tif(i < m)\n\t\t{\n\t\t\ttemp_list[i] = list[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttemp_list2[j] = list[i];\n\t\t\tj++;\n\t\t}\n\t}\n\t\n\tfor(i = 0; i < list.length; i++)\n\t{\n\t\tif(i < list.length - m)\n\t\t{\n\t\t\tnew_list[i] = temp_list2[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnew_list[i] = temp_list[k];\n\t\t\tk++;\n\t\t}\n\t}\n\t\n\treturn new_list;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666122589,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpi7uuchlg.d(49): unittest failure\n----------------\n??:? _d_unittestp [0x428655]\n??:? void tmpi7uuchlg.__unittest_L45_C1() [0x428137]\n??:? void tmpi7uuchlg.__modtest() [0x4283d4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c70f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5a2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43082d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430cdc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4307b9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b579]\n??:? runModuleUnitTests [0x42c4e5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b18]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result = new long[list.length];\n\tlong[] temp = new long[m];\n\tlong[] temp2 = new long[list.length - m];\n\t\n\tfor (long i = 0; i < m; i++)\n\t{\n\t\ttemp[i] = list[i];\n\t}\n\t\n\tfor (long i = 0; i < list.length - m; i++)\n\t{\n\t\ttemp2[i] = list[i + m];\n\t}\n\t\n\tfor (long i = 0; i < list.length - m; i++)\n\t{\n\t\tresult[i] = temp2[i];\n\t}\n\t\n\tfor (long i = 0; i < m; i++)\n\t{\n\t\tresult[list.length - m + i] = temp[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666122588,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpkxxpc5ga.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x42865d]\n??:? void tmpkxxpc5ga.__unittest_L36_C1() [0x42813f]\n??:? void tmpkxxpc5ga.__modtest() [0x4283dc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c717]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5aa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430835]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ce4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4307c1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b581]\n??:? runModuleUnitTests [0x42c4ed]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b20]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result = new long[list.length];\n\tlong[] temp = new long[m];\n\t\n\tforeach(i; 0..m)\n\t{\n\t\ttemp[i] = list[list.length - m + i];\n\t}\n\t\n\tforeach(i; 0..list.length - m)\n\t{\n\t\tresult[i] = list[i];\n\t}\n\t\n\tforeach(i; 0..m)\n\t{\n\t\tresult[list.length - m + i] = temp[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666122589,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5o9p917h.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x42861d]\n??:? void tmp5o9p917h.__unittest_L30_C1() [0x428103]\n??:? void tmp5o9p917h.__modtest() [0x4283a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6d7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b56a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307f5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ca4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430781]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b541]\n??:? runModuleUnitTests [0x42c4ad]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ae0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tauto n = list.length;\n\tauto gcd = std.math.gcd(n, m);\n\tfor (auto i = 0; i < gcd; i++) \n\t{\n\t\tauto j = i;\n\t\tauto temp = list[i];\n\t\twhile (true) \n\t\t{\n\t\t\tauto k = j + m;\n\t\t\tif (k >= n)\n\t\t\t\tk -= n;\n\t\t\tif (k == i)\n\t\t\t\tbreak;\n\t\t\tlist[j] = list[k];\n\t\t\tj = k;\n\t\t}\n\t\tlist[j] = temp;\n\t}\n\treturn list;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666122589,
      "stdout": "",
      "stderr": "/tmp/tmp52quo2qw.d(11): Error: undefined identifier `gcd` in module `std.math`\n/tmp/tmp52quo2qw.d(24): Error: cannot implicitly convert expression `k` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp52quo2qw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result = new long[list.length];\n\tlong[] result2 = new long[list.length];\n\tlong[] result3 = new long[list.length];\n\tlong[] result4 = new long[list.length];\n\tlong[] result5 = new long[list.length];\n\tlong[] result6 = new long[list.length];\n\tlong[] result7 = new long[list.length];\n\tlong[] result8 = new long[list.length];\n\tlong[] result9 = new long[list.length];\n\tlong[] result10 = new long[list.length];\n\tlong[] result11 = new long[list.length];\n\tlong[] result12 = new long[list.length];\n\tlong[] result13 = new long[list.length];\n\tlong[] result14 = new long[list.length];\n\tlong[] result15 = new long[list.length];\n\tlong[] result16 = new long[list.length];\n\tlong[] result17 = new long[list.length];\n\tlong[] result18 = new long[list.length];\n\tlong[] result19 = new long[list.length];\n\tlong[] result20 = new long[list.length];\n\tlong[] result21 = new long[list.length];\n\tlong[] result22 = new long[list.length];\n\tlong[] result23 = new long[list.length];\n\tlong[] result24 = new long[list.length];\n\tlong[] result25 = new long[list.length];\n\tlong[] result26 = new long[list.length];\n\tlong[] result27 = new long[list.length];\n\tlong[] result28 = new long[list.length];\n\tlong[] result29 = new long[list.length];\n\tlong[] result30 = new long[list.length];\n\tlong[] result31 = new long[list.length];\n\tlong[] result32 = new long[list.length];\n\tlong[] result33 = new long[list.length];\n\tlong[] result34 = new long[list.length];\n\tlong[] result35 = new long[list.length];\n\tlong[] result36 = new long[list.length];\n\tlong[] result37 =\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666122589,
      "stdout": "",
      "stderr": "/tmp/tmpk0_3bj1s.d(47): Error: expression expected, not `unittest`\n/tmp/tmpk0_3bj1s.d(48): Error: semicolon expected, not `{`\n/tmp/tmpk0_3bj1s.d(55): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk0_3bj1s.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result = new long[list.length];\n\tlong[] temp = new long[m];\n\tlong[] temp2 = new long[list.length - m];\n\tlong[] temp3 = new long[list.length];\n\t\n\tfor(long i = 0; i < m; i++)\n\t{\n\t\ttemp[i] = list[i];\n\t}\n\t\n\tfor(long i = 0; i < list.length - m; i++)\n\t{\n\t\ttemp2[i] = list[i + m];\n\t}\n\t\n\tfor(long i = 0; i < list.length; i++)\n\t{\n\t\tif(i < list.length - m)\n\t\t{\n\t\t\ttemp3[i] = temp2[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttemp3[i] = temp[i - (list.length - m)];\n\t\t}\n\t}\n\t\n\treturn temp3;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666122589,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp19cgooh0.d(43): unittest failure\n----------------\n??:? _d_unittestp [0x428665]\n??:? void tmp19cgooh0.__unittest_L39_C1() [0x428147]\n??:? void tmp19cgooh0.__modtest() [0x4283e4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c71f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5b2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43083d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430cec]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4307c9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b589]\n??:? runModuleUnitTests [0x42c4f5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b28]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] new_list = new long[list.length];\n\tlong[] temp = new long[m];\n\tlong[] temp2 = new long[list.length-m];\n\tlong[] temp3 = new long[m];\n\t\n\tfor(long i = 0; i < m; i++)\n\t{\n\t\ttemp[i] = list[i];\n\t}\n\t\n\tfor(long i = 0; i < list.length-m; i++)\n\t{\n\t\ttemp2[i] = list[i+m];\n\t}\n\t\n\tfor(long i = 0; i < m; i++)\n\t{\n\t\ttemp3[i] = temp[i];\n\t}\n\t\n\tfor(long i = 0; i < list.length-m; i++)\n\t{\n\t\tnew_list[i] = temp2[i];\n\t}\n\t\n\tfor(long i = 0; i < m; i++)\n\t{\n\t\tnew_list[i+list.length-m] = temp3[i];\n\t}\n\t\n\treturn new_list;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666122589,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp_uy85n14.d(46): unittest failure\n----------------\n??:? _d_unittestp [0x428705]\n??:? void tmp_uy85n14.__unittest_L42_C1() [0x4281e7]\n??:? void tmp_uy85n14.__modtest() [0x428484]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c7bf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b652]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4308dd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d8c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430869]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b629]\n??:? runModuleUnitTests [0x42c595]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428bc8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result = new long[list.length];\n\tlong[] temp = new long[m];\n\tlong[] temp2 = new long[list.length - m];\n\t\n\tfor (long i = 0; i < m; i++)\n\t{\n\t\ttemp[i] = list[i];\n\t}\n\t\n\tfor (long i = m; i < list.length; i++)\n\t{\n\t\ttemp2[i - m] = list[i];\n\t}\n\t\n\tfor (long i = 0; i < temp2.length; i++)\n\t{\n\t\tresult[i] = temp2[i];\n\t}\n\t\n\tfor (long i = 0; i < temp.length; i++)\n\t{\n\t\tresult[temp2.length + i] = temp[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666122589,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpvvtq0v5m.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x42864d]\n??:? void tmpvvtq0v5m.__unittest_L36_C1() [0x428133]\n??:? void tmpvvtq0v5m.__modtest() [0x4283d0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c707]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b59a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430825]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430cd4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4307b1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b571]\n??:? runModuleUnitTests [0x42c4dd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b10]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] new_list = new long[list.length];\n\tforeach(i, e; list)\n\t{\n\t\tnew_list[(i + m) % list.length] = e;\n\t}\n\treturn new_list;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666122589,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] new_list = new long[list.length];\n\tlong j = 0;\n\tfor(long i = list.length - m; i < list.length; i++)\n\t{\n\t\tnew_list[j] = list[i];\n\t\tj++;\n\t}\n\tfor(long i = 0; i < list.length - m; i++)\n\t{\n\t\tnew_list[j] = list[i];\n\t\tj++;\n\t}\n\treturn new_list;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666122589,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result = new long[list.length];\n\tlong[] temp = new long[m];\n\t\n\tfor (long i = 0; i < m; i++) \n\t{\n\t\ttemp[i] = list[i];\n\t}\n\t\n\tfor (long i = 0; i < list.length - m; i++) \n\t{\n\t\tresult[i] = list[i + m];\n\t}\n\t\n\tfor (long i = 0; i < m; i++) \n\t{\n\t\tresult[list.length - m + i] = temp[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpnco7yvo8.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x4285cd]\n??:? void tmpnco7yvo8.__unittest_L30_C1() [0x4280af]\n??:? void tmpnco7yvo8.__modtest() [0x42834c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c687]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b51a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c54]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430731]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4f1]\n??:? runModuleUnitTests [0x42c45d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a90]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result = new long[list.length];\n\tlong[] temp = new long[m];\n\t\n\t// copy the last m elements to temp\n\tfor (long i = 0; i < m; i++)\n\t{\n\t\ttemp[i] = list[list.length - m + i];\n\t}\n\t\n\t// shift the elements to the right\n\tfor (long i = list.length - 1; i >= m; i--)\n\t{\n\t\tlist[i] = list[i - m];\n\t}\n\t\n\t// copy the temp elements to the beginning of the list\n\tfor (long i = 0; i < m; i++)\n\t{\n\t\tlist[i] = temp[i];\n\t}\n\t\n\treturn list;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666122589,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{ \n\tlong[] result = new long[list.length];\n\tlong[] temp = new long[list.length];\n\ttemp = list.dup;\n\tlong n = list.length;\n\tfor (long i = 0; i < n; i++) \n\t{ \n\t\tresult[(i + m) % n] = temp[i]; \n\t} \n\treturn result;\n} \nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666122589,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result = new long[list.length];\n\tlong[] temp = new long[m];\n\tlong[] temp2 = new long[list.length - m];\n\t\n\tfor (long i = 0; i < m; i++)\n\t{\n\t\ttemp[i] = list[i];\n\t}\n\t\n\tfor (long i = 0; i < list.length - m; i++)\n\t{\n\t\ttemp2[i] = list[i + m];\n\t}\n\t\n\tfor (long i = 0; i < list.length - m; i++)\n\t{\n\t\tresult[i] = temp2[i];\n\t}\n\t\n\tfor (long i = 0; i < m; i++)\n\t{\n\t\tresult[list.length - m + i] = temp[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666122588,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpkxxpc5ga.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x42865d]\n??:? void tmpkxxpc5ga.__unittest_L36_C1() [0x42813f]\n??:? void tmpkxxpc5ga.__modtest() [0x4283dc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c717]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5aa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430835]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ce4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4307c1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b581]\n??:? runModuleUnitTests [0x42c4ed]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b20]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result = new long[list.length];\n\tlong[] temp = new long[m];\n\tlong[] temp2 = new long[list.length - m];\n\tlong[] temp3 = new long[list.length];\n\t\n\tfor(long i = 0; i < m; i++)\n\t{\n\t\ttemp[i] = list[i];\n\t}\n\t\n\tfor(long i = m; i < list.length; i++)\n\t{\n\t\ttemp2[i - m] = list[i];\n\t}\n\t\n\tfor(long i = 0; i < list.length; i++)\n\t{\n\t\tif(i < list.length - m)\n\t\t{\n\t\t\ttemp3[i] = temp2[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttemp3[i] = temp[i - (list.length - m)];\n\t\t}\n\t}\n\t\n\treturn temp3;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666122589,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp643xcvgx.d(43): unittest failure\n----------------\n??:? _d_unittestp [0x42865d]\n??:? void tmp643xcvgx.__unittest_L39_C1() [0x428143]\n??:? void tmp643xcvgx.__modtest() [0x4283e0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c717]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5aa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430835]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ce4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4307c1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b581]\n??:? runModuleUnitTests [0x42c4ed]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b20]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result = new long[list.length];\n\tlong[] temp = new long[m];\n\t\n\tfor (long i = 0; i < m; i++)\n\t{\n\t\ttemp[i] = list[list.length - m + i];\n\t}\n\t\n\tfor (long i = 0; i < list.length - m; i++)\n\t{\n\t\tresult[i] = list[i];\n\t}\n\t\n\tfor (long i = 0; i < m; i++)\n\t{\n\t\tresult[list.length - m + i] = temp[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5emgk652.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x4285cd]\n??:? void tmp5emgk652.__unittest_L30_C1() [0x4280af]\n??:? void tmp5emgk652.__modtest() [0x42834c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c687]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b51a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c54]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430731]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4f1]\n??:? runModuleUnitTests [0x42c45d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a90]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result = new long[list.length];\n\tlong[] temp = new long[m];\n\tlong[] temp2 = new long[list.length - m];\n\t\n\tfor (long i = 0; i < m; i++)\n\t{\n\t\ttemp[i] = list[i];\n\t}\n\t\n\tfor (long i = 0; i < list.length - m; i++)\n\t{\n\t\ttemp2[i] = list[i + m];\n\t}\n\t\n\tfor (long i = 0; i < list.length - m; i++)\n\t{\n\t\tresult[i] = temp2[i];\n\t}\n\t\n\tfor (long i = 0; i < m; i++)\n\t{\n\t\tresult[list.length - m + i] = temp[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666122588,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpkxxpc5ga.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x42865d]\n??:? void tmpkxxpc5ga.__unittest_L36_C1() [0x42813f]\n??:? void tmpkxxpc5ga.__modtest() [0x4283dc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c717]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5aa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430835]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ce4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4307c1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b581]\n??:? runModuleUnitTests [0x42c4ed]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b20]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result = new long[list.length];\n\tlong[] temp = new long[list.length];\n\t\n\tfor(long i = 0; i < list.length; i++)\n\t{\n\t\ttemp[i] = list[i];\n\t}\n\t\n\tfor(long i = 0; i < list.length; i++)\n\t{\n\t\tif(i + m < list.length)\n\t\t{\n\t\t\tresult[i + m] = temp[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[i + m - list.length] = temp[i];\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666122589,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result = new long[list.length];\n\tlong[] temp = new long[m];\n\tlong[] temp2 = new long[list.length - m];\n\t\n\tfor (long i = 0; i < m; i++)\n\t{\n\t\ttemp[i] = list[i];\n\t}\n\t\n\tfor (long i = m; i < list.length; i++)\n\t{\n\t\ttemp2[i - m] = list[i];\n\t}\n\t\n\tfor (long i = 0; i < list.length - m; i++)\n\t{\n\t\tresult[i] = temp2[i];\n\t}\n\t\n\tfor (long i = list.length - m; i < list.length; i++)\n\t{\n\t\tresult[i] = temp[i - (list.length - m)];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666122588,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqc05btci.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x428655]\n??:? void tmpqc05btci.__unittest_L36_C1() [0x42813b]\n??:? void tmpqc05btci.__modtest() [0x4283d8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c70f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5a2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43082d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430cdc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4307b9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b579]\n??:? runModuleUnitTests [0x42c4e5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b18]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{ \n    long[] new_list = new long[list.length]; \n    for (long i = 0; i < list.length; i++) \n        new_list[(int)((i + m) % list.length)] = list[(int)i]; \n    return new_list; \n} \nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666122589,
      "stdout": "",
      "stderr": "/tmp/tmp222yjfs5.d(12): Error: C style cast illegal, use `cast(int)((i + m) % list.length)`\n/tmp/tmp222yjfs5.d(12): Error: C style cast illegal, use `cast(int)i`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp222yjfs5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result = new long[list.length];\n\tlong[] temp = new long[m];\n\t\n\tfor(long i = 0; i < m; i++)\n\t{\n\t\ttemp[i] = list[i];\n\t}\n\t\n\tfor(long i = 0; i < list.length - m; i++)\n\t{\n\t\tresult[i] = list[i + m];\n\t}\n\t\n\tfor(long i = 0; i < m; i++)\n\t{\n\t\tresult[list.length - m + i] = temp[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666122589,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpxo2krejf.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x4285cd]\n??:? void tmpxo2krejf.__unittest_L30_C1() [0x4280af]\n??:? void tmpxo2krejf.__modtest() [0x42834c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c687]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b51a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c54]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430731]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4f1]\n??:? runModuleUnitTests [0x42c45d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a90]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result = new long[list.length];\n\tfor (long i = 0; i < list.length; i++)\n\t{\n\t\tresult[i] = list[(i + m) % list.length];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666122589,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp313s8avh.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x4284d5]\n??:? void tmp313s8avh.__unittest_L17_C1() [0x427fbb]\n??:? void tmp313s8avh.__modtest() [0x428258]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c58f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b422]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4306ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b5c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430639]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3f9]\n??:? runModuleUnitTests [0x42c365]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428998]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] new_list;\n\tlong[] temp;\n\tlong[] temp2;\n\t\n\ttemp = list[0..m];\n\ttemp2 = list[m..$];\n\tnew_list = temp2 ~ temp;\n\t\n\treturn new_list;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666122589,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpw0oqig3n.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x4284c5]\n??:? void tmpw0oqig3n.__unittest_L20_C1() [0x427fab]\n??:? void tmpw0oqig3n.__modtest() [0x428248]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c66b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430549]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4309f8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4304d5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4d5]\n??:? runModuleUnitTests [0x42c441]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428988]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result = new long[list.length];\n\tlong[] temp = new long[m];\n\tlong[] temp2 = new long[list.length - m];\n\t\n\tfor (long i = 0; i < m; i++)\n\t{\n\t\ttemp[i] = list[i];\n\t}\n\t\n\tfor (long i = m; i < list.length; i++)\n\t{\n\t\ttemp2[i - m] = list[i];\n\t}\n\t\n\tfor (long i = 0; i < list.length - m; i++)\n\t{\n\t\tresult[i] = temp2[i];\n\t}\n\t\n\tfor (long i = list.length - m; i < list.length; i++)\n\t{\n\t\tresult[i] = temp[i - list.length + m];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666122588,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpuqvqpvjj.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x428655]\n??:? void tmpuqvqpvjj.__unittest_L36_C1() [0x42813b]\n??:? void tmpuqvqpvjj.__modtest() [0x4283d8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c70f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5a2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43082d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430cdc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4307b9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b579]\n??:? runModuleUnitTests [0x42c4e5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b18]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result = new long[list.length];\n\tfor (long i = 0; i < list.length; i++)\n\t\tresult[(i + m) % list.length] = list[i];\n\treturn result;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666122590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result = new long[list.length];\n\tlong[] temp = new long[m];\n\tlong[] temp2 = new long[list.length - m];\n\t\n\tfor(long i = 0; i < m; i++)\n\t{\n\t\ttemp[i] = list[i];\n\t}\n\t\n\tfor(long i = m; i < list.length; i++)\n\t{\n\t\ttemp2[i - m] = list[i];\n\t}\n\t\n\tfor(long i = 0; i < temp2.length; i++)\n\t{\n\t\tresult[i] = temp2[i];\n\t}\n\t\n\tfor(long i = 0; i < temp.length; i++)\n\t{\n\t\tresult[temp2.length + i] = temp[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp4x46xp_a.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x42864d]\n??:? void tmp4x46xp_a.__unittest_L36_C1() [0x428133]\n??:? void tmp4x46xp_a.__modtest() [0x4283d0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c707]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b59a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430825]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430cd4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4307b1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b571]\n??:? runModuleUnitTests [0x42c4dd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b10]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] ret = new long[list.length];\n\tfor (long i = 0; i < list.length; i++) \n\t{\n\t\tret[(i + m) % list.length] = list[i];\n\t}\n\treturn ret;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666122590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result = new long[list.length];\n\tlong[] temp = new long[m];\n\tlong[] temp2 = new long[list.length - m];\n\t\n\ttemp = list[0 .. m];\n\ttemp2 = list[m .. $];\n\t\n\tresult = temp2 ~ temp;\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666122590,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3ddkbf7t.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x4284f5]\n??:? void tmp3ddkbf7t.__unittest_L21_C1() [0x427fd7]\n??:? void tmp3ddkbf7t.__modtest() [0x428274]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b58a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4306cd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b7c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430659]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b561]\n??:? runModuleUnitTests [0x42c4cd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4289b8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result = new long[list.length];\n\tlong[] temp = new long[m];\n\tlong[] temp2 = new long[list.length - m];\n\t\n\tfor (long i = 0; i < m; i++)\n\t{\n\t\ttemp[i] = list[i];\n\t}\n\t\n\tfor (long i = 0; i < list.length - m; i++)\n\t{\n\t\ttemp2[i] = list[i + m];\n\t}\n\t\n\tfor (long i = 0; i < list.length - m; i++)\n\t{\n\t\tresult[i] = temp2[i];\n\t}\n\t\n\tfor (long i = 0; i < m; i++)\n\t{\n\t\tresult[i + list.length - m] = temp[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpnchjlsu6.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x42865d]\n??:? void tmpnchjlsu6.__unittest_L36_C1() [0x42813f]\n??:? void tmpnchjlsu6.__modtest() [0x4283dc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c717]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5aa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430835]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ce4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4307c1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b581]\n??:? runModuleUnitTests [0x42c4ed]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b20]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result = new long[list.length];\n\tlong[] temp = new long[m];\n\t\n\tfor (long i = 0; i < m; i++)\n\t{\n\t\ttemp[i] = list[i];\n\t}\n\t\n\tfor (long i = 0; i < list.length - m; i++)\n\t{\n\t\tresult[i] = list[i + m];\n\t}\n\t\n\tfor (long i = 0; i < m; i++)\n\t{\n\t\tresult[list.length - m + i] = temp[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666122588,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp0cu55wjz.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x4285cd]\n??:? void tmp0cu55wjz.__unittest_L30_C1() [0x4280af]\n??:? void tmp0cu55wjz.__modtest() [0x42834c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c687]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b51a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c54]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430731]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4f1]\n??:? runModuleUnitTests [0x42c45d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a90]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] new_list = new long[list.length];\n\tlong[] temp = new long[list.length];\n\tlong[] temp2 = new long[list.length];\n\tlong[] temp3 = new long[list.length];\n\tlong[] temp4 = new long[list.length];\n\tlong[] temp5 = new long[list.length];\n\tlong[] temp6 = new long[list.length];\n\tlong[] temp7 = new long[list.length];\n\tlong[] temp8 = new long[list.length];\n\tlong[] temp9 = new long[list.length];\n\tlong[] temp10 = new long[list.length];\n\tlong[] temp11 = new long[list.length];\n\tlong[] temp12 = new long[list.length];\n\tlong[] temp13 = new long[list.length];\n\tlong[] temp14 = new long[list.length];\n\tlong[] temp15 = new long[list.length];\n\tlong[] temp16 = new long[list.length];\n\tlong[] temp17 = new long[list.length];\n\tlong[] temp18 = new long[list.length];\n\tlong[] temp19 = new long[list.length];\n\tlong[] temp20 = new long[list.length];\n\tlong[] temp21 = new long[list.length];\n\tlong[] temp22 = new long[list.length];\n\tlong[] temp23 = new long[list.length];\n\tlong[] temp24 = new long[list.length];\n\tlong[] temp25 = new long[list.length];\n\tlong[] temp26 = new long[list.length];\n\tlong[] temp27 = new long[list.length];\n\tlong[] temp28 = new long[list.length];\n\tlong[] temp29 = new long[list.length];\n\tlong[] temp30 = new long[list.length];\n\tlong[] temp31 = new long[list.length];\n\tlong[] temp32 = new long[list.length];\n\tlong[] temp33 = new long[list.length];\n\tlong[] temp34 = new long[list.length];\n\tlong[] temp35 = new long[list.length];\n\tlong[] temp36\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666122589,
      "stdout": "",
      "stderr": "/tmp/tmpckneq948.d(47): Error: semicolon expected, not `unittest`\n/tmp/tmpckneq948.d(47): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpckneq948.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result = new long[list.length];\n\tlong[] temp = new long[m];\n\tlong[] temp2 = new long[list.length - m];\n\t\n\tfor(long i = 0; i < m; i++)\n\t{\n\t\ttemp[i] = list[i];\n\t}\n\t\n\tfor(long i = m; i < list.length; i++)\n\t{\n\t\ttemp2[i - m] = list[i];\n\t}\n\t\n\tfor(long i = 0; i < list.length - m; i++)\n\t{\n\t\tresult[i] = temp2[i];\n\t}\n\t\n\tfor(long i = list.length - m; i < list.length; i++)\n\t{\n\t\tresult[i] = temp[i - (list.length - m)];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666122588,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpq8s_fij4.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x428655]\n??:? void tmpq8s_fij4.__unittest_L36_C1() [0x42813b]\n??:? void tmpq8s_fij4.__modtest() [0x4283d8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c70f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5a2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43082d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430cdc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4307b9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b579]\n??:? runModuleUnitTests [0x42c4e5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b18]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result;\n\tlong[] temp;\n\tlong[] temp2;\n\tlong[] temp3;\n\tlong i;\n\tlong j;\n\tlong k;\n\tlong l;\n\tlong n;\n\t\n\tn = list.length;\n\t\n\tif (m > n)\n\t{\n\t\tm = m % n;\n\t}\n\t\n\ttemp = new long[m];\n\ttemp2 = new long[n - m];\n\ttemp3 = new long[n];\n\t\n\tfor (i = 0; i < m; i++)\n\t{\n\t\ttemp[i] = list[i];\n\t}\n\t\n\tfor (j = 0; j < n - m; j++)\n\t{\n\t\ttemp2[j] = list[m + j];\n\t}\n\t\n\tfor (k = 0; k < n - m; k++)\n\t{\n\t\ttemp3[k] = temp2[k];\n\t}\n\t\n\tfor (l = 0; l < m; l++)\n\t{\n\t\ttemp3[n - m + l] = temp[l];\n\t}\n\t\n\tresult = temp3;\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666122590,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3vvgkkoi.d(59): unittest failure\n----------------\n??:? _d_unittestp [0x4286bd]\n??:? void tmp3vvgkkoi.__unittest_L55_C1() [0x4281a3]\n??:? void tmp3vvgkkoi.__modtest() [0x428440]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c777]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b60a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430895]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d44]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430821]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5e1]\n??:? runModuleUnitTests [0x42c54d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b80]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result = new long[list.length];\n\tforeach(i, e; list)\n\t{\n\t\tresult[(i + m) % list.length] = e;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666122588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result = new long[list.length];\n\tlong[] temp = new long[m];\n\tlong[] temp2 = new long[list.length - m];\n\t\n\tfor(long i = 0; i < m; i++)\n\t{\n\t\ttemp[i] = list[i];\n\t}\n\t\n\tfor(long i = 0; i < list.length - m; i++)\n\t{\n\t\ttemp2[i] = list[i + m];\n\t}\n\t\n\tfor(long i = 0; i < list.length - m; i++)\n\t{\n\t\tresult[i] = temp2[i];\n\t}\n\t\n\tfor(long i = 0; i < m; i++)\n\t{\n\t\tresult[list.length - m + i] = temp[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666122588,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpsc237bkn.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x42865d]\n??:? void tmpsc237bkn.__unittest_L36_C1() [0x42813f]\n??:? void tmpsc237bkn.__modtest() [0x4283dc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c717]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5aa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430835]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ce4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4307c1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b581]\n??:? runModuleUnitTests [0x42c4ed]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b20]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result = new long[list.length];\n\tfor (long i = 0; i < list.length; i++) \n\t{\n\t\tresult[(i + m) % list.length] = list[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result = new long[list.length];\n\tlong[] temp = new long[m];\n\tlong[] temp2 = new long[list.length - m];\n\t\n\tfor(long i = 0; i < m; i++)\n\t{\n\t\ttemp[i] = list[i];\n\t}\n\t\n\tfor(long i = 0; i < list.length - m; i++)\n\t{\n\t\ttemp2[i] = list[i + m];\n\t}\n\t\n\tfor(long i = 0; i < list.length - m; i++)\n\t{\n\t\tresult[i] = temp2[i];\n\t}\n\t\n\tfor(long i = 0; i < m; i++)\n\t{\n\t\tresult[i + list.length - m] = temp[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpaajve53q.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x42865d]\n??:? void tmpaajve53q.__unittest_L36_C1() [0x42813f]\n??:? void tmpaajve53q.__modtest() [0x4283dc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c717]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5aa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430835]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ce4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4307c1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b581]\n??:? runModuleUnitTests [0x42c4ed]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b20]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] res = new long[list.length];\n\tlong n = list.length;\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tres[(i + m) % n] = list[i];\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666122590,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result = new long[list.length];\n\tlong[] temp = new long[m];\n\tlong[] temp2 = new long[list.length - m];\n\t\n\tfor (long i = 0; i < m; i++)\n\t{\n\t\ttemp[i] = list[i];\n\t}\n\t\n\tfor (long i = 0; i < list.length - m; i++)\n\t{\n\t\ttemp2[i] = list[i + m];\n\t}\n\t\n\tfor (long i = 0; i < list.length - m; i++)\n\t{\n\t\tresult[i] = temp2[i];\n\t}\n\t\n\tfor (long i = 0; i < m; i++)\n\t{\n\t\tresult[list.length - m + i] = temp[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666122588,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpkxxpc5ga.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x42865d]\n??:? void tmpkxxpc5ga.__unittest_L36_C1() [0x42813f]\n??:? void tmpkxxpc5ga.__modtest() [0x4283dc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c717]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5aa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430835]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ce4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4307c1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b581]\n??:? runModuleUnitTests [0x42c4ed]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b20]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n\t\n*/\nlong[] rotate_right(long[] list, long m) \n{\n\tlong[] result = new long[list.length];\n\tlong[] temp = new long[m];\n\tlong[] temp2 = new long[list.length - m];\n\t\n\tforeach(i, e; list)\n\t{\n\t\tif(i < m)\n\t\t{\n\t\t\ttemp[i] = e;\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttemp2[i - m] = e;\n\t\t}\n\t}\n\t\n\tforeach(i, e; temp2)\n\t{\n\t\tresult[i] = e;\n\t}\n\t\n\tforeach(i, e; temp)\n\t{\n\t\tresult[i + temp2.length] = e;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
      "timestamp": 1666122588,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjtz4mhdh.d(42): unittest failure\n----------------\n??:? _d_unittestp [0x42866d]\n??:? void tmpjtz4mhdh.__unittest_L38_C1() [0x42814f]\n??:? void tmpjtz4mhdh.__modtest() [0x4283ec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c727]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5ba]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430845]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430cf4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4307d1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b591]\n??:? runModuleUnitTests [0x42c4fd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b30]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}