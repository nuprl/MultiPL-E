{
  "name": "mbpp_562_Find_Max_Length",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_562_Find_Max_Length.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tlong max_length = 0;\n\tforeach (i; 0 .. lst.length)\n\t{\n\t\tif (lst[i].length > max_length)\n\t\t{\n\t\t\tmax_length = lst[i].length;\n\t\t}\n\t}\n\treturn max_length;\n}",
    "{\n\tlong max_length = 0;\n\tforeach(i; 0..lst.length) \n\t{\n\t\tforeach(j; 0..lst[i].length) \n\t\t{\n\t\t\tif(lst[i][j] == 1) \n\t\t\t{\n\t\t\t\tlong count = 0;\n\t\t\t\tforeach(k; j..lst[i].length) \n\t\t\t\t{\n\t\t\t\t\tif(lst[i][k] == 0) \n\t\t\t\t\t{\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t\tmax_length = max(max_length, count);\n\t\t\t}\n\t\t}\n\t}\n\treturn max_length;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; 0..lst.length)\n\t{\n\t\tmax = max(max, lst[i].length);\n\t}\n\treturn max;\n}",
    "{\n\tlong max_length = 0;\n\tforeach(i, lst)\n\t{\n\t\tmax_length = max(max_length, lst[i].length);\n\t}\n\treturn max_length;\n}",
    "{\n\tlong max_len = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tmax_len = max(max_len, lst[i].length);\n\t}\n\treturn max_len;\n}",
    "{\n\tlong max_length = 0;\n\tlong[] lengths = new long[lst.length];\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong length = 0;\n\t\n\tfor (i = 0; i < lst.length; i++) \n\t{\n\t\tlength = 0;\n\t\tfor (j = 0; j < lst[i].length; j++) \n\t\t{\n\t\t\tif (lst[i][j] == 1) \n\t\t\t{\n\t\t\t\tlength += 1;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tlength = 0;\n\t\t\t}\n\t\t\t\n\t\t\tif (length > max_length) \n\t\t\t{\n\t\t\t\tmax_length = length;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn max_length;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; lst)\n\t{\n\t\tif(max < i.length)\n\t\t{\n\t\t\tmax = i.length;\n\t\t}\n\t}\n\treturn max;\n}",
    "{\n\tlong max_length = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tmax_length = max(max_length, lst[i].length);\n\t}\n\treturn max_length;\n}",
    "{\n\tlong max_len = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tmax_len = max(max_len, lst[i].length);\n\t}\n\treturn max_len;\n}",
    "{\n\tlong max_len = 0;\n\tforeach(i; lst) \n\t{\n\t\tmax_len = max(max_len, i.length);\n\t}\n\treturn max_len;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; 0..lst.length)\n\t{\n\t\tmax = max(max, lst[i].length);\n\t}\n\treturn max;\n}",
    "{\n\tlong max_len = 0;\n\tforeach(i; 0..lst.length)\n\t{\n\t\tforeach(j; 0..lst[i].length)\n\t\t{\n\t\t\tlong len = 0;\n\t\t\tforeach(k; j..lst[i].length)\n\t\t\t{\n\t\t\t\tif(lst[i][k] == 0)\n\t\t\t\t{\n\t\t\t\t\tlen = k - j;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(len > max_len)\n\t\t\t{\n\t\t\t\tmax_len = len;\n\t\t\t}\n\t\t}\n\t}\n\treturn max_len;\n}",
    "{\n\tlong max_len = 0;\n\tlong[] sub_lst;\n\tforeach(sub_lst; lst)\n\t{\n\t\tmax_len = max(max_len, sub_lst.length);\n\t}\n\treturn max_len;\n}",
    "{\n\tlong max_len = 0;\n\tlong len = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tlen = lst[i].length;\n\t\tif(len > max_len)\n\t\t\tmax_len = len;\n\t}\n\treturn max_len;\n}",
    "{\n\tlong max_length = 0;\n\tlong current_length = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tif(lst[i].length > 0)\n\t\t{\n\t\t\tcurrent_length += 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(current_length > max_length)\n\t\t\t{\n\t\t\t\tmax_length = current_length;\n\t\t\t}\n\t\t\tcurrent_length = 0;\n\t\t}\n\t}\n\treturn max_length;\n}",
    "{\n\tlong max_length = 0;\n\tlong curr_length = 0;\n\tlong[][] curr_lst = [];\n\tforeach(l; lst)\n\t{\n\t\tif(l[0] == l[1])\n\t\t{\n\t\t\tcurr_length += 1;\n\t\t\tcurr_lst ~= l;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(curr_length > max_length)\n\t\t\t{\n\t\t\t\tmax_length = curr_length;\n\t\t\t}\n\t\t\tcurr_length = 0;\n\t\t\tcurr_lst = [];\n\t\t}\n\t}\n\treturn max_length;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; 0..lst.length) \n\t{\n\t\tmax = max(max, lst[i].length);\n\t}\n\treturn max;\n}",
    "{\n\tlong max_len = 0;\n\tlong[] len_lst = new long[lst.length];\n\tfor (int i = 0; i < lst.length; i++) {\n\t\tlen_lst[i] = lst[i].length;\n\t\tmax_len = max(max_len, len_lst[i]);\n\t}\n\treturn max_len;\n}",
    "{\n\tlong max = 0;\n\tforeach(l; lst)\n\t{\n\t\tmax = max(max, l.length);\n\t}\n\treturn max;\n}",
    "{\n\tlong max_len = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tmax_len = max(max_len, lst[i].length);\n\t}\n\treturn max_len;\n}",
    "{\n\tlong max_len = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tmax_len = max(max_len, lst[i].length);\n\t}\n\treturn max_len;\n}",
    "{\n\tlong max_len = 0;\n\tlong len = 0;\n\tforeach (i; 0 .. lst.length) \n\t{\n\t\tlen = 0;\n\t\tforeach (j; 0 .. lst[i].length) \n\t\t{\n\t\t\tif (lst[i][j] == 1) \n\t\t\t{\n\t\t\t\tlen++;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tmax_len = max(max_len, len);\n\t\t\t\tlen = 0;\n\t\t\t}\n\t\t}\n\t\tmax_len = max(max_len, len);\n\t}\n\treturn max_len;\n}",
    "{\n\tlong max_length = 0;\n\tforeach(i; 0..lst.length)\n\t{\n\t\tforeach(j; 0..lst[i].length)\n\t\t{\n\t\t\tlong length = 0;\n\t\t\tforeach(k; j..lst[i].length)\n\t\t\t{\n\t\t\t\tif(lst[i][k] == 0)\n\t\t\t\t{\n\t\t\t\t\tlength++;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tmax_length = max(max_length, length);\n\t\t}\n\t}\n\treturn max_length;\n}",
    "{\n\tlong max_length = 0;\n\tforeach(i; 0..lst.length)\n\t{\n\t\tmax_length = max(max_length, lst[i].length);\n\t}\n\treturn max_length;\n}",
    "{\n\tlong max_len = 0;\n\tlong len = 0;\n\tlong[] sub_lst;\n\tforeach(sub_lst; lst)\n\t{\n\t\tlen = sub_lst.length;\n\t\tif(len > max_len)\n\t\t{\n\t\t\tmax_len = len;\n\t\t}\n\t}\n\treturn max_len;\n}",
    "{\n\tlong max_len = 0;\n\tlong len = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tforeach(j; 0 .. lst[i].length)\n\t\t{\n\t\t\tif(lst[i][j] == 1)\n\t\t\t{\n\t\t\t\tlen++;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tmax_len = max(max_len, len);\n\t\t\t\tlen = 0;\n\t\t\t}\n\t\t}\n\t}\n\treturn max_len;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; 0..lst.length)\n\t{\n\t\tmax = max(max, lst[i].length);\n\t}\n\treturn max;\n}",
    "{\n\tlong max_len = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tlong len = lst[i].length;\n\t\tif (len > max_len)\n\t\t\tmax_len = len;\n\t}\n\treturn max_len;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; lst)\n\t{\n\t\tif(i.length > max)\n\t\t\tmax = i.length;\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tmax = max(max, lst[i].length);\n\t}\n\treturn max;\n}",
    "{\n\tlong max_length = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tmax_length = max(max_length, lst[i].length);\n\t}\n\treturn max_length;\n}",
    "{\n\tlong max_length = 0;\n\tlong length = 0;\n\tforeach(i; 0..lst.length)\n\t{\n\t\tforeach(j; 0..lst[i].length)\n\t\t{\n\t\t\tif(lst[i][j] == 1)\n\t\t\t{\n\t\t\t\tlength++;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tmax_length = max(max_length, length);\n\t\t\t\tlength = 0;\n\t\t\t}\n\t\t}\n\t\tmax_length = max(max_length, length);\n\t\tlength = 0;\n\t}\n\treturn max_length;\n}",
    "{\n\tlong max_len = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tif(lst[i].length > max_len)\n\t\t\tmax_len = lst[i].length;\n\t}\n\treturn max_len;\n}",
    "{\n\tlong max_length = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tmax_length = max(max_length, lst[i].length);\n\t}\n\treturn max_length;\n}",
    "{\n\tlong max = 0;\n\tforeach(l; lst)\n\t{\n\t\tmax = max(max, l.length);\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tforeach (i; lst) \n\t{\n\t\tmax = max(max, i.length);\n\t}\n\treturn max;\n}",
    "{\n\tlong max_length = 0;\n\tforeach(l; lst)\n\t{\n\t\tmax_length = max(max_length, l.length);\n\t}\n\treturn max_length;\n}",
    "{\n\tlong max_len = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tlong len = lst[i].length;\n\t\tif(len > max_len)\n\t\t\tmax_len = len;\n\t}\n\treturn max_len;\n}",
    "{\n\tlong max_len = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tforeach(j; 0 .. lst[i].length)\n\t\t{\n\t\t\tlong len = 0;\n\t\t\tforeach(k; i .. lst.length)\n\t\t\t{\n\t\t\t\tforeach(l; j .. lst[k].length)\n\t\t\t\t{\n\t\t\t\t\tif(lst[k][l] == 1)\n\t\t\t\t\t{\n\t\t\t\t\t\tlen++;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tmax_len = max(max_len, len);\n\t\t}\n\t}\n\treturn max_len;\n}",
    "{\n\tlong max_len = 0;\n\tlong len = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tlen = 0;\n\t\tforeach(j; 0 .. lst[i].length)\n\t\t{\n\t\t\tif(lst[i][j] == 1)\n\t\t\t{\n\t\t\t\tlen++;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tlen = 0;\n\t\t\t}\n\t\t\tif(len > max_len)\n\t\t\t{\n\t\t\t\tmax_len = len;\n\t\t\t}\n\t\t}\n\t}\n\treturn max_len;\n}",
    "{\n\tlong max_length = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tmax_length = max(max_length, lst[i].length);\n\t}\n\treturn max_length;\n}",
    "{\n\tlong max_length = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tmax_length = max(max_length, lst[i].length);\n\t}\n\treturn max_length;\n}",
    "{\n\tlong max_len = 0;\n\tlong len = 0;\n\tforeach(i; 0..lst.length)\n\t{\n\t\tforeach(j; 0..lst[i].length)\n\t\t{\n\t\t\tif(lst[i][j] == 1)\n\t\t\t{\n\t\t\t\tlen++;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tlen = 0;\n\t\t\t}\n\t\t\tmax_len = max(max_len, len);\n\t\t}\n\t}\n\treturn max_len;\n}",
    "{\n\tlong max_length = 0;\n\tlong length = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tforeach(j; 0 .. lst[i].length)\n\t\t{\n\t\t\tif(lst[i][j] != 0)\n\t\t\t{\n\t\t\t\tlength++;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tmax_length = max(max_length, length);\n\t\t\t\tlength = 0;\n\t\t\t}\n\t\t}\n\t\tmax_length = max(max_length, length);\n\t\tlength = 0;\n\t}\n\treturn max_length;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; lst)\n\t{\n\t\tif(i.length > max)\n\t\t\tmax = i.length;\n\t}\n\treturn max;\n}",
    "{\n\tlong max_length = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tif (lst[i].length > max_length)\n\t\t{\n\t\t\tmax_length = lst[i].length;\n\t\t}\n\t}\n\treturn max_length;\n}",
    "{\n\tlong max_length = 0;\n\tforeach(i; 0 .. lst.length) \n\t{\n\t\tmax_length = max(max_length, lst[i].length);\n\t}\n\treturn max_length;\n}",
    "{\n\tlong max_len = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tmax_len = max(max_len, lst[i].length);\n\t}\n\treturn max_len;\n}",
    "{\n\tlong max_len = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tmax_len = max(max_len, lst[i].length);\n\t}\n\treturn max_len;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; lst)\n\t{\n\t\tif(i.length > max)\n\t\t\tmax = i.length;\n\t}\n\treturn max;\n}",
    "{\n\tlong max_length = 0;\n\tforeach(l; lst)\n\t{\n\t\tmax_length = max(max_length, l.length);\n\t}\n\treturn max_length;\n}",
    "{\n\tlong max_len = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tmax_len = max(max_len, lst[i].length);\n\t}\n\treturn max_len;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tif(lst[i].length > max)\n\t\t{\n\t\t\tmax = lst[i].length;\n\t\t}\n\t}\n\treturn max;\n}",
    "{\n\tlong max_len = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tforeach(j; 0 .. lst[i].length)\n\t\t{\n\t\t\tlong len = 0;\n\t\t\tforeach(k; j .. lst[i].length)\n\t\t\t{\n\t\t\t\tif(lst[i][k] == 0)\n\t\t\t\t{\n\t\t\t\t\tlen = k - j;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(len == 0)\n\t\t\t{\n\t\t\t\tlen = lst[i].length - j;\n\t\t\t}\n\t\t\tmax_len = max(max_len, len);\n\t\t}\n\t}\n\treturn max_len;\n}",
    "{\n\tlong max_length = 0;\n\tforeach(long[] subarray; lst)\n\t{\n\t\tmax_length = max(max_length, subarray.length);\n\t}\n\treturn max_length;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; lst)\n\t{\n\t\tmax = max(max, i.length);\n\t}\n\treturn max;\n}",
    "{\n\tlong max_len = 0;\n\tforeach(i; 0..lst.length)\n\t{\n\t\tmax_len = max(max_len, lst[i].length);\n\t}\n\treturn max_len;\n}",
    "{\n\tlong max_len = 0;\n\tlong[][] temp = new long[][](lst.length);\n\tforeach(i; 0..lst.length)\n\t{\n\t\ttemp[i] = new long[](lst[i].length);\n\t\tforeach(j; 0..lst[i].length)\n\t\t{\n\t\t\tif(i == 0)\n\t\t\t{\n\t\t\t\ttemp[i][j] = lst[i][j];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(lst[i][j] == 0)\n\t\t\t\t{\n\t\t\t\t\ttemp[i][j] = 0;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\ttemp[i][j] = temp[i-1][j] + 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; 0..lst.length)\n\t{\n\t\ttemp[i] = temp[i].sort;\n\t\tforeach(j; 0..lst[i].length)\n\t\t{\n\t\t\tmax_len = max(max_len, temp[i][j] * (lst[i].length - j));\n\t\t}\n\t}\n\treturn max_len;\n}",
    "{\n\tlong max_len = 0;\n\tforeach(i; 0..lst.length)\n\t{\n\t\tmax_len = max(max_len, lst[i].length);\n\t}\n\treturn max_len;\n}",
    "{\n\tlong max_length = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tmax_length = max(max_length, lst[i].length);\n\t}\n\treturn max_length;\n}",
    "{\n\tlong max_length = 0;\n\tlong length = 0;\n\tforeach(l; lst)\n\t{\n\t\tlength = l.length;\n\t\tif(length > max_length)\n\t\t{\n\t\t\tmax_length = length;\n\t\t}\n\t}\n\treturn max_length;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; lst)\n\t{\n\t\tif(i.length > max)\n\t\t\tmax = i.length;\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tif(lst[i].length > max)\n\t\t\tmax = lst[i].length;\n\t}\n\treturn max;\n}",
    "{\n\tlong max_length = 0;\n\tforeach(i; 0..lst.length)\n\t{\n\t\tmax_length = max(max_length, lst[i].length);\n\t}\n\treturn max_length;\n}",
    "{\n\tlong max = 0;\n\tforeach(l; lst)\n\t{\n\t\tmax = max(max, l.length);\n\t}\n\treturn max;\n}",
    "{\n\tlong max_length = 0;\n\tlong current_length = 0;\n\tforeach(i; 0..lst.length)\n\t{\n\t\tforeach(j; 0..lst[i].length)\n\t\t{\n\t\t\tif(lst[i][j] == 1)\n\t\t\t{\n\t\t\t\tcurrent_length += 1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tcurrent_length = 0;\n\t\t\t}\n\t\t\tmax_length = max(max_length, current_length);\n\t\t}\n\t}\n\treturn max_length;\n}",
    "{\n\tlong max_len = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tmax_len = max(max_len, lst[i].length);\n\t}\n\treturn max_len;\n}",
    "{\n\tlong max_len = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tmax_len = max(max_len, lst[i].length);\n\t}\n\treturn max_len;\n}",
    "{\n\tlong max = 0;\n\tforeach(l; lst)\n\t{\n\t\tmax = max(max, l.length);\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; 0..lst.length)\n\t{\n\t\tmax = max(max, lst[i].length);\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; lst)\n\t{\n\t\tif(i.length > max)\n\t\t{\n\t\t\tmax = i.length;\n\t\t}\n\t}\n\treturn max;\n}",
    "{\n\tlong max_len = 0;\n\tlong len = 0;\n\tforeach(i; lst)\n\t{\n\t\tlen = i.length;\n\t\tif (len > max_len)\n\t\t{\n\t\t\tmax_len = len;\n\t\t}\n\t}\n\treturn max_len;\n}",
    "{\n\tlong max_length = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tforeach(j; 0 .. lst[i].length)\n\t\t{\n\t\t\tlong length = 0;\n\t\t\tforeach(k; j .. lst[i].length)\n\t\t\t{\n\t\t\t\tif(lst[i][k] == 1)\n\t\t\t\t{\n\t\t\t\t\tlength++;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(length > max_length)\n\t\t\t{\n\t\t\t\tmax_length = length;\n\t\t\t}\n\t\t}\n\t}\n\treturn max_length;\n}",
    "{\n\tlong max_length = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tmax_length = max(max_length, lst[i].length);\n\t}\n\treturn max_length;\n}",
    "{\n\tlong max_length = 0;\n\tforeach(i; 0..lst.length) \n\t{\n\t\tmax_length = max(max_length, lst[i].length);\n\t}\n\treturn max_length;\n}",
    "{\n\tlong max_len = 0;\n\tforeach(i; 0..lst.length)\n\t{\n\t\tmax_len = max(max_len, lst[i].length);\n\t}\n\treturn max_len;\n}",
    "{\n\tlong max_length = 0;\n\tforeach(l; lst) \n\t{\n\t\tmax_length = max(max_length, l.length);\n\t}\n\treturn max_length;\n}",
    "{\n\tlong max_len = 0;\n\tlong curr_len = 0;\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong l = 0;\n\tlong m = 0;\n\tlong n = 0;\n\tlong o = 0;\n\tlong p = 0;\n\tlong q = 0;\n\tlong r = 0;\n\tlong s = 0;\n\tlong t = 0;\n\tlong u = 0;\n\tlong v = 0;\n\tlong w = 0;\n\tlong x = 0;\n\tlong y = 0;\n\tlong z = 0;\n\tlong aa = 0;\n\tlong ab = 0;\n\tlong ac = 0;\n\tlong ad = 0;\n\tlong ae = 0;\n\tlong af = 0;\n\tlong ag = 0;\n\tlong ah = 0;\n\tlong ai = 0;\n\tlong aj = 0;\n\tlong ak = 0;\n\tlong al = 0;\n\tlong am = 0;\n\tlong an = 0;\n\tlong ao = 0;\n\tlong ap = 0;\n\tlong aq = 0;\n\tlong ar = 0;\n\tlong as = 0;\n\tlong at = 0;\n\tlong au = 0;\n\tlong av = 0;\n\tlong aw = 0;\n\tlong ax = 0;\n\tlong ay = 0;\n\tlong az = 0;\n\tlong ba = 0;\n\tlong bb = 0;\n\tlong bc = 0;\n\tlong bd = 0;\n\tlong be = 0;\n\tlong bf = 0;\n\tlong bg = 0;\n\tlong bh = 0;\n\tlong bi = 0;\n\tlong bj = 0;\n\tlong bk = 0;\n\tlong bl = 0;\n\tlong bm = 0;\n\tlong bn = 0;\n\tlong bo = 0;\n\tlong bp = 0;\n\tlong bq = 0;\n\tlong br = 0;\n\tlong bs = 0;\n\tlong bt = 0;\n\tlong bu = 0;\n\tlong bv = 0;\n\tlong bw = 0;\n",
    "{\n\tlong max_len = 0;\n\tforeach(i; 0..lst.length)\n\t{\n\t\tforeach(j; 0..lst[i].length)\n\t\t{\n\t\t\tlong len = 0;\n\t\t\tforeach(k; j..lst[i].length)\n\t\t\t{\n\t\t\t\tif(lst[i][k] == 0)\n\t\t\t\t{\n\t\t\t\t\tlen++;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tmax_len = max(max_len, len);\n\t\t}\n\t}\n\treturn max_len;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tif (lst[i].length > max)\n\t\t{\n\t\t\tmax = lst[i].length;\n\t\t}\n\t}\n\treturn max;\n}",
    "{\n\tlong max_len = 0;\n\tforeach(i; 0..lst.length)\n\t{\n\t\tmax_len = max(max_len, lst[i].length);\n\t}\n\treturn max_len;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; lst)\n\t{\n\t\tif(i.length > max)\n\t\t{\n\t\t\tmax = i.length;\n\t\t}\n\t}\n\treturn max;\n}",
    "{\n\tlong max_length = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tforeach(j; 0 .. lst[i].length)\n\t\t{\n\t\t\tif(lst[i][j] == 1)\n\t\t\t{\n\t\t\t\tlong count = 0;\n\t\t\t\tforeach(k; j .. lst[i].length)\n\t\t\t\t{\n\t\t\t\t\tif(lst[i][k] == 1)\n\t\t\t\t\t{\n\t\t\t\t\t\tcount++;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tmax_length = max(max_length, count);\n\t\t\t}\n\t\t}\n\t}\n\treturn max_length;\n}",
    "{\n\tlong max_length = 0;\n\tforeach(lst_i; lst)\n\t{\n\t\tlong length = lst_i.length;\n\t\tif(length > max_length)\n\t\t{\n\t\t\tmax_length = length;\n\t\t}\n\t}\n\treturn max_length;\n}",
    "{\n\tlong max_len = 0;\n\tforeach(l; lst)\n\t{\n\t\tmax_len = max(max_len, l.length);\n\t}\n\treturn max_len;\n}",
    "{\n\tlong max_length = 0;\n\tforeach(i; 0..lst.length)\n\t{\n\t\tif(lst[i].length > max_length)\n\t\t{\n\t\t\tmax_length = lst[i].length;\n\t\t}\n\t}\n\treturn max_length;\n}",
    "{\n\tlong max_length = 0;\n\tlong length = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tforeach(j; 0 .. lst[i].length)\n\t\t{\n\t\t\tif(lst[i][j] == 1)\n\t\t\t{\n\t\t\t\tlength += 1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tmax_length = max(max_length, length);\n\t\t\t\tlength = 0;\n\t\t\t}\n\t\t}\n\t\tmax_length = max(max_length, length);\n\t\tlength = 0;\n\t}\n\treturn max_length;\n}",
    "{\n\tlong max_len = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tmax_len = max(max_len, lst[i].length);\n\t}\n\treturn max_len;\n}",
    "{\n\tlong max_len = 0;\n\tlong len = 0;\n\tlong[][] sub_lst = [];\n\t\n\tforeach(i; 0..lst.length)\n\t{\n\t\tif(lst[i].length > 1)\n\t\t{\n\t\t\tsub_lst ~= lst[i];\n\t\t}\n\t}\n\t\n\tforeach(i; 0..sub_lst.length)\n\t{\n\t\tlen = sub_lst[i].length;\n\t\tif(len > max_len)\n\t\t{\n\t\t\tmax_len = len;\n\t\t}\n\t}\n\t\n\treturn max_len;\n}",
    "{\n\tlong max_length = 0;\n\tlong cur_length = 0;\n\tfor (int i = 0; i < lst.length; i++)\n\t{\n\t\tcur_length = lst[i].length;\n\t\tif (cur_length > max_length)\n\t\t{\n\t\t\tmax_length = cur_length;\n\t\t}\n\t}\n\treturn max_length;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; lst)\n\t{\n\t\tif(i.length > max)\n\t\t\tmax = i.length;\n\t}\n\treturn max;\n}",
    "{\n\tlong max_len = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tmax_len = max(max_len, lst[i].length);\n\t}\n\treturn max_len;\n}",
    "{\n\tlong max_len = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tmax_len = max(max_len, lst[i].length);\n\t}\n\treturn max_len;\n}",
    "{\n\tlong max_length = 0;\n\tforeach(i; lst)\n\t{\n\t\tmax_length = max(max_length, i.length);\n\t}\n\treturn max_length;\n}",
    "{\n\tlong max_len = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tmax_len = max(max_len, lst[i].length);\n\t}\n\treturn max_len;\n}",
    "{\n\tlong max_length = 0;\n\tforeach(i; 0..lst.length)\n\t{\n\t\tmax_length = max(max_length, lst[i].length);\n\t}\n\treturn max_length;\n}",
    "{\n\tlong max_length = 0;\n\tforeach(i; 0..lst.length)\n\t{\n\t\tmax_length = max(max_length, lst[i].length);\n\t}\n\treturn max_length;\n}",
    "{\n\tlong max_length = 0;\n\tlong length = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tif(lst[i].length > 0)\n\t\t{\n\t\t\tlength = lst[i].length;\n\t\t\tif(length > max_length)\n\t\t\t{\n\t\t\t\tmax_length = length;\n\t\t\t}\n\t\t}\n\t}\n\treturn max_length;\n}",
    "{\n\tlong max_len = 0;\n\tlong len = 0;\n\tforeach(i; 0 .. lst.length) \n\t{\n\t\tif(lst[i].length > 0) \n\t\t{\n\t\t\tlen = lst[i].length;\n\t\t\tif(len > max_len) \n\t\t\t{\n\t\t\t\tmax_len = len;\n\t\t\t}\n\t\t}\n\t}\n\treturn max_len;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; 0..lst.length)\n\t{\n\t\tforeach(j; 0..lst[i].length)\n\t\t{\n\t\t\tif(lst[i][j] == 0)\n\t\t\t{\n\t\t\t\tmax = max(max, j);\n\t\t\t}\n\t\t}\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; lst) \n\t{\n\t\tmax = max(max, i.length);\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tforeach(long[] sub; lst) \n\t{\n\t\tmax = max(max, sub.length);\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; lst)\n\t{\n\t\tif(i.length > max)\n\t\t\tmax = i.length;\n\t}\n\treturn max;\n}",
    "{\n\tlong max_length = 0;\n\tforeach(i, sub_lst; lst)\n\t{\n\t\tmax_length = max(max_length, sub_lst.length);\n\t}\n\treturn max_length;\n}",
    "{\n\tlong max_length = 0;\n\tforeach(l; lst) \n\t{\n\t\tmax_length = max(max_length, l.length);\n\t}\n\treturn max_length;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tmax = max(max, lst[i].length);\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tif(lst[i].length > max)\n\t\t\tmax = lst[i].length;\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tmax = max(max, lst[i].length);\n\t}\n\treturn max;\n}",
    "{\n\tlong max_length = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tmax_length = max(max_length, lst[i].length);\n\t}\n\treturn max_length;\n}",
    "{\n\tlong max_length = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tmax_length = max(max_length, lst[i].length);\n\t}\n\treturn max_length;\n}",
    "{\n\tlong max_length = 0;\n\tforeach(long[] sub_lst; lst)\n\t{\n\t\tmax_length = max(max_length, sub_lst.length);\n\t}\n\treturn max_length;\n}",
    "{\n\tlong max_len = 0;\n\tforeach(i; 0..lst.length)\n\t{\n\t\tmax_len = max(max_len, lst[i].length);\n\t}\n\treturn max_len;\n}",
    "{\n\tlong max_length = 0;\n\tforeach(i; lst)\n\t{\n\t\tif(i.length > max_length)\n\t\t{\n\t\t\tmax_length = i.length;\n\t\t}\n\t}\n\treturn max_length;\n}",
    "{\n\tlong max_length = 0;\n\tforeach(long[] sub_lst; lst)\n\t{\n\t\tmax_length = max(max_length, sub_lst.length);\n\t}\n\treturn max_length;\n}",
    "{\n\tlong max_len = 0;\n\tforeach(i; 0 .. lst.length) \n\t{\n\t\tlong len = lst[i].length;\n\t\tif(len > max_len) \n\t\t{\n\t\t\tmax_len = len;\n\t\t}\n\t}\n\treturn max_len;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tif(lst[i].length > max)\n\t\t{\n\t\t\tmax = lst[i].length;\n\t\t}\n\t}\n\treturn max;\n}",
    "{\n\tlong max_len = 0;\n\tlong curr_len = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tif(lst[i].length > 0)\n\t\t{\n\t\t\tcurr_len = lst[i].length;\n\t\t\tmax_len = max(curr_len, max_len);\n\t\t}\n\t}\n\treturn max_len;\n}",
    "{\n\tlong max_len = 0;\n\tlong[] temp = [];\n\tforeach(long[] sub_lst; lst)\n\t{\n\t\ttemp = [];\n\t\tforeach(long num; sub_lst)\n\t\t{\n\t\t\tif(num != 0)\n\t\t\t{\n\t\t\t\ttemp ~= num;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tmax_len = max(max_len, temp.length);\n\t\t\t\ttemp = [];\n\t\t\t}\n\t\t}\n\t\tmax_len = max(max_len, temp.length);\n\t}\n\treturn max_len;\n}",
    "{\n\tlong max_len = 0;\n\tforeach(long[] sub_lst; lst)\n\t{\n\t\tmax_len = max(max_len, sub_lst.length);\n\t}\n\treturn max_len;\n}",
    "{\n\tlong max_len = 0;\n\tlong[][] sub_arrays = [];\n\tforeach(i; 0..lst.length)\n\t{\n\t\tforeach(j; i..lst.length)\n\t\t{\n\t\t\tsub_arrays ~= lst[i..j];\n\t\t}\n\t}\n\tforeach(arr; sub_arrays)\n\t{\n\t\tif(arr.length > max_len)\n\t\t{\n\t\t\tmax_len = arr.length;\n\t\t}\n\t}\n\treturn max_len;\n}",
    "{\n\tlong max = 0;\n\tforeach(long[] sub; lst)\n\t{\n\t\tmax = max(max, sub.length);\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; lst)\n\t{\n\t\tif(i.length > max)\n\t\t{\n\t\t\tmax = i.length;\n\t\t}\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; 0 .. lst.length) \n\t{\n\t\tmax = max(max, lst[i].length);\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tmax = max(max, lst[i].length);\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tif(lst[i].length > max)\n\t\t{\n\t\t\tmax = lst[i].length;\n\t\t}\n\t}\n\treturn max;\n}",
    "{\n\tlong max_len = 0;\n\tforeach(i; 0..lst.length)\n\t{\n\t\tmax_len = max(max_len, lst[i].length);\n\t}\n\treturn max_len;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tmax = max(max, lst[i].length);\n\t}\n\treturn max;\n}",
    "{\n\tlong max_len = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tmax_len = max(max_len, lst[i].length);\n\t}\n\treturn max_len;\n}",
    "{\n\tlong max_length = 0;\n\tlong length = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tforeach(j; 0 .. lst[i].length)\n\t\t{\n\t\t\tif(lst[i][j] == 1)\n\t\t\t{\n\t\t\t\tlength++;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tmax_length = max(max_length, length);\n\t\t\t\tlength = 0;\n\t\t\t}\n\t\t}\n\t\tmax_length = max(max_length, length);\n\t\tlength = 0;\n\t}\n\treturn max_length;\n}",
    "{\n\tlong max_len = 0;\n\tforeach(l; lst)\n\t{\n\t\tmax_len = max(max_len, l.length);\n\t}\n\treturn max_len;\n}",
    "{\n\tlong max_length = 0;\n\tforeach(long[] sub_lst; lst)\n\t{\n\t\tmax_length = max(max_length, sub_lst.length);\n\t}\n\treturn max_length;\n}",
    "{\n\tlong max_len = 0;\n\tforeach(long[] sub_lst; lst)\n\t{\n\t\tmax_len = max(max_len, sub_lst.length);\n\t}\n\treturn max_len;\n}",
    "{\n\tlong max_len = 0;\n\tlong len = 0;\n\tforeach(i; 0..lst.length)\n\t{\n\t\tlen = 0;\n\t\tforeach(j; 0..lst[i].length)\n\t\t{\n\t\t\tif(lst[i][j] == 0)\n\t\t\t{\n\t\t\t\tlen++;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tmax_len = max(max_len, len);\n\t\t\t\tlen = 0;\n\t\t\t}\n\t\t}\n\t\tmax_len = max(max_len, len);\n\t}\n\treturn max_len;\n}",
    "{\n\tlong max_len = 0;\n\tforeach(l; lst)\n\t{\n\t\tmax_len = max(max_len, l.length);\n\t}\n\treturn max_len;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; 0..lst.length)\n\t{\n\t\tmax = max(max, lst[i].length);\n\t}\n\treturn max;\n}",
    "{\n\tlong max_length = 0;\n\tlong current_length = 0;\n\tforeach(i; lst)\n\t{\n\t\tcurrent_length = 0;\n\t\tforeach(j; i)\n\t\t{\n\t\t\tif(j == 1)\n\t\t\t{\n\t\t\t\tcurrent_length++;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tcurrent_length = 0;\n\t\t\t}\n\t\t\tif(current_length > max_length)\n\t\t\t{\n\t\t\t\tmax_length = current_length;\n\t\t\t}\n\t\t}\n\t}\n\treturn max_length;\n}",
    "{\n\tlong max_length = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tmax_length = max(max_length, lst[i].length);\n\t}\n\treturn max_length;\n}",
    "{\n\tlong max_length = 0;\n\tlong cur_length = 0;\n\tforeach(i; 0..lst.length)\n\t{\n\t\tcur_length = 0;\n\t\tforeach(j; 0..lst[i].length)\n\t\t{\n\t\t\tif(lst[i][j] == 1)\n\t\t\t{\n\t\t\t\tcur_length++;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tcur_length = 0;\n\t\t\t}\n\t\t\tmax_length = max(max_length, cur_length);\n\t\t}\n\t}\n\treturn max_length;\n}",
    "{\n\tlong max_len = 0;\n\tforeach(long[] sub_lst; lst)\n\t{\n\t\tmax_len = max(max_len, sub_lst.length);\n\t}\n\treturn max_len;\n}",
    "{\n\tlong max = 0;\n\tforeach(l; lst)\n\t{\n\t\tmax = max(max, l.length);\n\t}\n\treturn max;\n}",
    "{\n\tlong max_len = 0;\n\tforeach(l; lst)\n\t{\n\t\tmax_len = max(max_len, l.length);\n\t}\n\treturn max_len;\n}",
    "{\n\tlong max_length = 0;\n\tforeach(i; 0 .. lst.length) {\n\t\tforeach(j; 0 .. lst[i].length) {\n\t\t\tlong length = 0;\n\t\t\tforeach(k; i .. lst.length) {\n\t\t\t\tif(k < lst.length) {\n\t\t\t\t\tif(j < lst[k].length) {\n\t\t\t\t\t\tlength++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(length > max_length) {\n\t\t\t\tmax_length = length;\n\t\t\t}\n\t\t}\n\t}\n\treturn max_length;\n}",
    "{\n\tlong max_len = 0;\n\tforeach(long[] sub_lst; lst)\n\t{\n\t\tmax_len = max(max_len, sub_lst.length);\n\t}\n\treturn max_len;\n}",
    "{\n\tlong max_length = 0;\n\tlong current_length = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tif(lst[i].length > 0)\n\t\t{\n\t\t\tcurrent_length = lst[i].length;\n\t\t\tif(current_length > max_length)\n\t\t\t{\n\t\t\t\tmax_length = current_length;\n\t\t\t}\n\t\t}\n\t}\n\treturn max_length;\n}",
    "{\n\tlong max_len = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tforeach(j; 0 .. lst[i].length)\n\t\t{\n\t\t\tif(lst[i][j] == 0)\n\t\t\t{\n\t\t\t\tmax_len = max(max_len, j - i + 1);\n\t\t\t}\n\t\t}\n\t}\n\treturn max_len;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tif(lst[i].length > max)\n\t\t{\n\t\t\tmax = lst[i].length;\n\t\t}\n\t}\n\treturn max;\n}",
    "{\n\tlong max_length = 0;\n\tforeach(long[] sub_lst; lst)\n\t{\n\t\tmax_length = max(max_length, sub_lst.length);\n\t}\n\treturn max_length;\n}",
    "{\n\tlong max_len = 0;\n\tlong curr_len = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tif(lst[i].length > 0)\n\t\t{\n\t\t\tcurr_len = 1;\n\t\t\tforeach(j; i+1 .. lst.length)\n\t\t\t{\n\t\t\t\tif(lst[j].length > 0)\n\t\t\t\t{\n\t\t\t\t\tcurr_len++;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(curr_len > max_len)\n\t\t\t{\n\t\t\t\tmax_len = curr_len;\n\t\t\t}\n\t\t}\n\t}\n\treturn max_len;\n}",
    "{\n\tlong max = 0;\n\tforeach (i; 0 .. lst.length) \n\t{\n\t\tmax = max(max, lst[i].length);\n\t}\n\treturn max;\n}",
    "{\n\tlong max_len = 0;\n\tlong len = 0;\n\tforeach(idx, val; lst)\n\t{\n\t\tif(val.length > 0)\n\t\t{\n\t\t\tlen = val.length;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlen = 0;\n\t\t}\n\t\tmax_len = max(max_len, len);\n\t}\n\treturn max_len;\n}",
    "{\n\tlong max_length = 0;\n\tforeach(i; 0 .. lst.length) \n\t{\n\t\tforeach(j; 0 .. lst[i].length) \n\t\t{\n\t\t\tlong length = 0;\n\t\t\tforeach(k; i .. lst.length) \n\t\t\t{\n\t\t\t\tif(j >= lst[k].length) \n\t\t\t\t{\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif(lst[k][j] == 1) \n\t\t\t\t{\n\t\t\t\t\tlength += 1;\n\t\t\t\t}\n\t\t\t\telse \n\t\t\t\t{\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tmax_length = max(max_length, length);\n\t\t}\n\t}\n\treturn max_length;\n}",
    "{\n\tlong max_len = 0;\n\tlong[] sub_lst = [];\n\tforeach(sub_lst; lst)\n\t{\n\t\tmax_len = max(max_len, sub_lst.length);\n\t}\n\treturn max_len;\n}",
    "{\n\tlong max_length = 0;\n\tforeach(i; 0..lst.length)\n\t{\n\t\tmax_length = max(max_length, lst[i].length);\n\t}\n\treturn max_length;\n}",
    "{\n\tlong max_len = 0;\n\tforeach (i; 0 .. lst.length)\n\t{\n\t\tforeach (j; 0 .. lst[i].length)\n\t\t{\n\t\t\tlong len = 0;\n\t\t\tforeach (k; i .. lst.length)\n\t\t\t{\n\t\t\t\tforeach (l; j .. lst[k].length)\n\t\t\t\t{\n\t\t\t\t\tlen += 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tmax_len = max(len, max_len);\n\t\t}\n\t}\n\treturn max_len;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; 0..lst.length)\n\t{\n\t\tif(lst[i].length > max)\n\t\t\tmax = lst[i].length;\n\t}\n\treturn max;\n}",
    "{\n\tlong max_length = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tforeach(j; 0 .. lst[i].length)\n\t\t{\n\t\t\tlong length = 0;\n\t\t\tforeach(k; i .. lst.length)\n\t\t\t{\n\t\t\t\tforeach(l; j .. lst[k].length)\n\t\t\t\t{\n\t\t\t\t\tif(lst[k][l] == 1)\n\t\t\t\t\t{\n\t\t\t\t\t\tlength++;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(length > max_length)\n\t\t\t{\n\t\t\t\tmax_length = length;\n\t\t\t}\n\t\t}\n\t}\n\treturn max_length;\n}",
    "{\n\tlong max_len = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tmax_len = max(max_len, lst[i].length);\n\t}\n\treturn max_len;\n}",
    "{\n\tlong max_len = 0;\n\tforeach(i; 0 .. lst.length) \n\t{\n\t\tmax_len = max(max_len, lst[i].length);\n\t}\n\treturn max_len;\n}",
    "{\n\tlong max_length = 0;\n\tforeach(long[] sub_lst; lst)\n\t{\n\t\tmax_length = max(max_length, sub_lst.length);\n\t}\n\treturn max_length;\n}",
    "{\n\tlong max_length = 0;\n\tforeach(i; 0..lst.length)\n\t{\n\t\tforeach(j; 0..lst[i].length)\n\t\t{\n\t\t\tif(lst[i][j] == 1)\n\t\t\t{\n\t\t\t\tlong count = 1;\n\t\t\t\tlong k = j + 1;\n\t\t\t\twhile(k < lst[i].length && lst[i][k] == 1)\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t\tk++;\n\t\t\t\t}\n\t\t\t\tmax_length = max(max_length, count);\n\t\t\t}\n\t\t}\n\t}\n\treturn max_length;\n}",
    "{\n\tlong max_length = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tmax_length = max(max_length, lst[i].length);\n\t}\n\treturn max_length;\n}",
    "{\n\tlong max_len = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tforeach(j; 0 .. lst[i].length)\n\t\t{\n\t\t\tlong len = 0;\n\t\t\tforeach(k; i .. lst.length)\n\t\t\t{\n\t\t\t\tforeach(l; j .. lst[k].length)\n\t\t\t\t{\n\t\t\t\t\tif(lst[k][l] == 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tlen = max(len, (k-i+1)*(l-j+1));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tmax_len = max(max_len, len);\n\t\t}\n\t}\n\treturn max_len;\n}",
    "{\n\tlong max_len = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tforeach(j; 0 .. lst[i].length)\n\t\t{\n\t\t\tif(lst[i][j] == 1)\n\t\t\t{\n\t\t\t\tlong len = 0;\n\t\t\t\tforeach(k; j .. lst[i].length)\n\t\t\t\t{\n\t\t\t\t\tif(lst[i][k] == 1)\n\t\t\t\t\t{\n\t\t\t\t\t\tlen++;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(len > max_len)\n\t\t\t\t{\n\t\t\t\t\tmax_len = len;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn max_len;\n}",
    "{\n\tlong max_length = 0;\n\tforeach(i; lst)\n\t{\n\t\tif(i.length > max_length)\n\t\t{\n\t\t\tmax_length = i.length;\n\t\t}\n\t}\n\treturn max_length;\n}",
    "{\n\tlong max_len = 0;\n\tlong len = 0;\n\tforeach(i; 0..lst.length)\n\t{\n\t\tlen = 0;\n\t\tforeach(j; 0..lst[i].length)\n\t\t{\n\t\t\tif(lst[i][j] == 1)\n\t\t\t\tlen++;\n\t\t\telse\n\t\t\t\tlen = 0;\n\t\t\tmax_len = max(max_len, len);\n\t\t}\n\t}\n\treturn max_len;\n}",
    "{\n\tlong max_len = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tmax_len = max(max_len, lst[i].length);\n\t}\n\treturn max_len;\n}",
    "{\n\tlong max_len = 0;\n\tlong[] sub_arr;\n\tforeach(sub_arr; lst)\n\t{\n\t\tmax_len = max(max_len, sub_arr.length);\n\t}\n\treturn max_len;\n}",
    "{\n\tlong max_len = 0;\n\tlong len = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tif(lst[i].length > 0)\n\t\t{\n\t\t\tlen += 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tmax_len = max(max_len, len);\n\t\t\tlen = 0;\n\t\t}\n\t}\n\treturn max_len;\n}",
    "{\n\tlong max_length = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tif(lst[i].length > max_length)\n\t\t\tmax_length = lst[i].length;\n\t}\n\treturn max_length;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; 0..lst.length)\n\t{\n\t\tmax = max(max, lst[i].length);\n\t}\n\treturn max;\n}",
    "{\n\tlong max_len = 0;\n\tlong len = 0;\n\tforeach(i; 0..lst.length)\n\t{\n\t\tlen = 0;\n\t\tforeach(j; 0..lst[i].length)\n\t\t{\n\t\t\tif(lst[i][j] == 1)\n\t\t\t{\n\t\t\t\tlen++;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tlen = 0;\n\t\t\t}\n\t\t\tif(len > max_len)\n\t\t\t{\n\t\t\t\tmax_len = len;\n\t\t\t}\n\t\t}\n\t}\n\treturn max_len;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; lst) {\n\t\tif (i.length > max) {\n\t\t\tmax = i.length;\n\t\t}\n\t}\n\treturn max;\n}",
    "{\n\tlong max_len = 0;\n\tforeach(i; 0 .. lst.length) \n\t{\n\t\tmax_len = max(max_len, lst[i].length);\n\t}\n\treturn max_len;\n}",
    "{\n\tlong max_len = 0;\n\tforeach(long[] arr; lst)\n\t{\n\t\tmax_len = max(max_len, arr.length);\n\t}\n\treturn max_len;\n}",
    "{\n\tlong max_len = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tforeach(j; 0 .. lst[i].length)\n\t\t{\n\t\t\tlong len = 0;\n\t\t\tforeach(k; i .. lst.length)\n\t\t\t{\n\t\t\t\tif(j >= lst[k].length)\n\t\t\t\t\tbreak;\n\t\t\t\tif(lst[k][j] == 1)\n\t\t\t\t\tlen++;\n\t\t\t\telse\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tmax_len = max(len, max_len);\n\t\t}\n\t}\n\treturn max_len;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tif(lst[i].length > max)\n\t\t{\n\t\t\tmax = lst[i].length;\n\t\t}\n\t}\n\treturn max;\n}",
    "{\n\tlong max_len = 0;\n\tlong[] sub_arr = new long[lst.length];\n\tforeach(i, sub_arr; lst)\n\t{\n\t\tsub_arr[i] = sub_arr.length;\n\t\tmax_len = max(max_len, sub_arr[i]);\n\t}\n\treturn max_len;\n}",
    "{\n\tlong max_length = 0;\n\tforeach(long[] sub_lst; lst)\n\t{\n\t\tmax_length = max(max_length, sub_lst.length);\n\t}\n\treturn max_length;\n}",
    "{\n\tlong max_len = 0;\n\tforeach(i; 0..lst.length)\n\t{\n\t\tmax_len = max(max_len, lst[i].length);\n\t}\n\treturn max_len;\n}",
    "{\n\tlong max_len = 0;\n\tforeach(long[] sub_lst; lst)\n\t{\n\t\tmax_len = max(max_len, sub_lst.length);\n\t}\n\treturn max_len;\n}",
    "{\n\tlong max_len = 0;\n\tlong curr_len = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tif(lst[i].length > 0)\n\t\t{\n\t\t\tcurr_len = lst[i].length;\n\t\t\tmax_len = max(max_len, curr_len);\n\t\t}\n\t}\n\treturn max_len;\n}",
    "{\n\tlong max_length = 0;\n\tforeach(subarray; lst) \n\t{\n\t\tmax_length = max(max_length, subarray.length);\n\t}\n\treturn max_length;\n}",
    "{\n\tlong max_length = 0;\n\tlong length = 0;\n\tforeach(i; 0..lst.length)\n\t{\n\t\tlength = lst[i].length;\n\t\tif(length > max_length)\n\t\t{\n\t\t\tmax_length = length;\n\t\t}\n\t}\n\treturn max_length;\n}",
    "{\n\tlong max_len = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tlong len = lst[i].length;\n\t\tif(len > max_len)\n\t\t{\n\t\t\tmax_len = len;\n\t\t}\n\t}\n\treturn max_len;\n}",
    "{\n\tlong max_len = 0;\n\tlong len = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tforeach(j; 0 .. lst[i].length)\n\t\t{\n\t\t\tif(lst[i][j] == 1)\n\t\t\t{\n\t\t\t\tlen++;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tmax_len = max(max_len, len);\n\t\t\t\tlen = 0;\n\t\t\t}\n\t\t}\n\t\tmax_len = max(max_len, len);\n\t\tlen = 0;\n\t}\n\treturn max_len;\n}",
    "{\n\tlong max_length = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tmax_length = max(max_length, lst[i].length);\n\t}\n\treturn max_length;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; 0..lst.length)\n\t{\n\t\tif(lst[i].length > max)\n\t\t{\n\t\t\tmax = lst[i].length;\n\t\t}\n\t}\n\treturn max;\n}",
    "{\n\tlong max_len = 0;\n\tlong len = 0;\n\tforeach(i; 0..lst.length)\n\t{\n\t\tlen = 0;\n\t\tforeach(j; 0..lst[i].length)\n\t\t{\n\t\t\tif(lst[i][j] == 1)\n\t\t\t{\n\t\t\t\tlen++;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(len > max_len)\n\t\t\t\t{\n\t\t\t\t\tmax_len = len;\n\t\t\t\t}\n\t\t\t\tlen = 0;\n\t\t\t}\n\t\t}\n\t\tif(len > max_len)\n\t\t{\n\t\t\tmax_len = len;\n\t\t}\n\t}\n\treturn max_len;\n}",
    "{\n\tlong max_len = 0;\n\tlong curr_len = 0;\n\tforeach(long[] sublst; lst) \n\t{\n\t\tcurr_len = sublst.length;\n\t\tif(curr_len > max_len) \n\t\t{\n\t\t\tmax_len = curr_len;\n\t\t}\n\t}\n\treturn max_len;\n}",
    "{\n\tlong max_len = 0;\n\tforeach(i, lst)\n\t{\n\t\tmax_len = max(max_len, lst[i].length);\n\t}\n\treturn max_len;\n}",
    "{\n\tlong max_len = 0;\n\tforeach(l; lst) {\n\t\tmax_len = max(max_len, l.length);\n\t}\n\treturn max_len;\n}",
    "{\n\tlong max_length = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tforeach(j; 0 .. lst[i].length)\n\t\t{\n\t\t\tlong length = 0;\n\t\t\tforeach(k; i .. lst.length)\n\t\t\t{\n\t\t\t\tforeach(l; j .. lst[k].length)\n\t\t\t\t{\n\t\t\t\t\tif(lst[k][l] == 1)\n\t\t\t\t\t{\n\t\t\t\t\t\tlength++;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tmax_length = max(max_length, length);\n\t\t}\n\t}\n\treturn max_length;\n}",
    "{\n\tlong max_len = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tmax_len = max(max_len, lst[i].length);\n\t}\n\treturn max_len;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; lst)\n\t{\n\t\tif(i.length > max)\n\t\t\tmax = i.length;\n\t}\n\treturn max;\n}",
    "{\n\tlong max_length = 0;\n\tforeach(lst_row; lst)\n\t{\n\t\tlong length = lst_row.length;\n\t\tif (length > max_length)\n\t\t\tmax_length = length;\n\t}\n\treturn max_length;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tif(lst[i].length > max)\n\t\t{\n\t\t\tmax = lst[i].length;\n\t\t}\n\t}\n\treturn max;\n}",
    "{\n\tlong max_len = 0;\n\tforeach(l; lst) \n\t{\n\t\tmax_len = max(max_len, l.length);\n\t}\n\treturn max_len;\n}",
    "{\n\tlong max_len = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tmax_len = max(max_len, lst[i].length);\n\t}\n\treturn max_len;\n}",
    "{\n\tlong max_length = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tforeach(j; 0 .. lst[i].length)\n\t\t{\n\t\t\tlong length = 0;\n\t\t\tforeach(k; i .. lst.length)\n\t\t\t{\n\t\t\t\tif(lst[k].length > j)\n\t\t\t\t{\n\t\t\t\t\tlength += lst[k][j];\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tmax_length = max(max_length, length);\n\t\t}\n\t}\n\treturn max_length;\n}",
    "{\n\tlong max_len = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tforeach(j; 0 .. lst[i].length)\n\t\t{\n\t\t\tlong len = 0;\n\t\t\tforeach(k; j .. lst[i].length)\n\t\t\t{\n\t\t\t\tif(lst[i][k] == 0)\n\t\t\t\t{\n\t\t\t\t\tlen = k - j;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(len > max_len)\n\t\t\t\tmax_len = len;\n\t\t}\n\t}\n\treturn max_len;\n}"
  ]
}