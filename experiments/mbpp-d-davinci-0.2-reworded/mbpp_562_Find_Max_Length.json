{
  "name": "mbpp_562_Find_Max_Length",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the length of the longest subarrays.\n\t\n*/\nlong Find_Max_Length(long[][] lst) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_562_Find_Max_Length.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tlong max_length = 0;\n\tforeach (i; 0 .. lst.length)\n\t{\n\t\tif (lst[i].length > max_length)\n\t\t{\n\t\t\tmax_length = lst[i].length;\n\t\t}\n\t}\n\treturn max_length;\n}",
    "{\n\tlong max_length = 0;\n\tforeach(i; 0..lst.length) \n\t{\n\t\tforeach(j; 0..lst[i].length) \n\t\t{\n\t\t\tif(lst[i][j] == 1) \n\t\t\t{\n\t\t\t\tlong count = 0;\n\t\t\t\tforeach(k; j..lst[i].length) \n\t\t\t\t{\n\t\t\t\t\tif(lst[i][k] == 0) \n\t\t\t\t\t{\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t\tmax_length = max(max_length, count);\n\t\t\t}\n\t\t}\n\t}\n\treturn max_length;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; 0..lst.length)\n\t{\n\t\tmax = max(max, lst[i].length);\n\t}\n\treturn max;\n}",
    "{\n\tlong max_length = 0;\n\tforeach(i, lst)\n\t{\n\t\tmax_length = max(max_length, lst[i].length);\n\t}\n\treturn max_length;\n}",
    "{\n\tlong max_len = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tmax_len = max(max_len, lst[i].length);\n\t}\n\treturn max_len;\n}",
    "{\n\tlong max_length = 0;\n\tlong[] lengths = new long[lst.length];\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong length = 0;\n\t\n\tfor (i = 0; i < lst.length; i++) \n\t{\n\t\tlength = 0;\n\t\tfor (j = 0; j < lst[i].length; j++) \n\t\t{\n\t\t\tif (lst[i][j] == 1) \n\t\t\t{\n\t\t\t\tlength += 1;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tlength = 0;\n\t\t\t}\n\t\t\t\n\t\t\tif (length > max_length) \n\t\t\t{\n\t\t\t\tmax_length = length;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn max_length;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; lst)\n\t{\n\t\tif(max < i.length)\n\t\t{\n\t\t\tmax = i.length;\n\t\t}\n\t}\n\treturn max;\n}",
    "{\n\tlong max_length = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tmax_length = max(max_length, lst[i].length);\n\t}\n\treturn max_length;\n}",
    "{\n\tlong max_len = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tmax_len = max(max_len, lst[i].length);\n\t}\n\treturn max_len;\n}",
    "{\n\tlong max_len = 0;\n\tforeach(i; lst) \n\t{\n\t\tmax_len = max(max_len, i.length);\n\t}\n\treturn max_len;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; 0..lst.length)\n\t{\n\t\tmax = max(max, lst[i].length);\n\t}\n\treturn max;\n}",
    "{\n\tlong max_len = 0;\n\tforeach(i; 0..lst.length)\n\t{\n\t\tforeach(j; 0..lst[i].length)\n\t\t{\n\t\t\tlong len = 0;\n\t\t\tforeach(k; j..lst[i].length)\n\t\t\t{\n\t\t\t\tif(lst[i][k] == 0)\n\t\t\t\t{\n\t\t\t\t\tlen = k - j;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(len > max_len)\n\t\t\t{\n\t\t\t\tmax_len = len;\n\t\t\t}\n\t\t}\n\t}\n\treturn max_len;\n}",
    "{\n\tlong max_len = 0;\n\tlong[] sub_lst;\n\tforeach(sub_lst; lst)\n\t{\n\t\tmax_len = max(max_len, sub_lst.length);\n\t}\n\treturn max_len;\n}",
    "{\n\tlong max_len = 0;\n\tlong len = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tlen = lst[i].length;\n\t\tif(len > max_len)\n\t\t\tmax_len = len;\n\t}\n\treturn max_len;\n}",
    "{\n\tlong max_length = 0;\n\tlong current_length = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tif(lst[i].length > 0)\n\t\t{\n\t\t\tcurrent_length += 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(current_length > max_length)\n\t\t\t{\n\t\t\t\tmax_length = current_length;\n\t\t\t}\n\t\t\tcurrent_length = 0;\n\t\t}\n\t}\n\treturn max_length;\n}",
    "{\n\tlong max_length = 0;\n\tlong curr_length = 0;\n\tlong[][] curr_lst = [];\n\tforeach(l; lst)\n\t{\n\t\tif(l[0] == l[1])\n\t\t{\n\t\t\tcurr_length += 1;\n\t\t\tcurr_lst ~= l;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(curr_length > max_length)\n\t\t\t{\n\t\t\t\tmax_length = curr_length;\n\t\t\t}\n\t\t\tcurr_length = 0;\n\t\t\tcurr_lst = [];\n\t\t}\n\t}\n\treturn max_length;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; 0..lst.length) \n\t{\n\t\tmax = max(max, lst[i].length);\n\t}\n\treturn max;\n}",
    "{\n\tlong max_len = 0;\n\tlong[] len_lst = new long[lst.length];\n\tfor (int i = 0; i < lst.length; i++) {\n\t\tlen_lst[i] = lst[i].length;\n\t\tmax_len = max(max_len, len_lst[i]);\n\t}\n\treturn max_len;\n}",
    "{\n\tlong max = 0;\n\tforeach(l; lst)\n\t{\n\t\tmax = max(max, l.length);\n\t}\n\treturn max;\n}",
    "{\n\tlong max_len = 0;\n\tforeach(i; 0 .. lst.length)\n\t{\n\t\tmax_len = max(max_len, lst[i].length);\n\t}\n\treturn max_len;\n}"
  ]
}