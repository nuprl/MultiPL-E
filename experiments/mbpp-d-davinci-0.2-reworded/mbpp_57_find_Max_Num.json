{
  "name": "mbpp_57_find_Max_Num",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find the largest number that can be formed with the given array of digits.\n\t\n*/\nlong find_Max_Num(long[] arr) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_57_find_Max_Num.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = find_Max_Num;\n\n    assert(candidate([1L, 2L, 3L]) == 321L);\n    assert(candidate([4L, 5L, 6L, 1L]) == 6541L);\n    assert(candidate([1L, 2L, 3L, 9L]) == 9321L);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tlong max_num = 0;\n\tforeach(i; arr)\n\t{\n\t\tmax_num = max(max_num, i);\n\t}\n\treturn max_num;\n}",
    "{\n\tlong max = 0;\n\tlong temp = 0;\n\tlong[] arr1 = arr.dup;\n\t\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; 0 .. arr.length)\n\t\t{\n\t\t\tif(arr[i] > arr[j])\n\t\t\t{\n\t\t\t\ttemp = arr[i];\n\t\t\t\tarr[i] = arr[j];\n\t\t\t\tarr[j] = temp;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tmax = max * 10 + arr[i];\n\t}\n\t\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tmax = max * 10 + arr[i];\n\t}\n\treturn max;\n}",
    "{\n\tauto len = arr.length;\n\tauto num = 0L;\n\tauto i = 0L;\n\tauto j = 0L;\n\tauto temp = 0L;\n\t\n\tfor(i = 0; i < len; i++)\n\t{\n\t\tfor(j = i + 1; j < len; j++)\n\t\t{\n\t\t\tif(arr[i] < arr[j])\n\t\t\t{\n\t\t\t\ttemp = arr[i];\n\t\t\t\tarr[i] = arr[j];\n\t\t\t\tarr[j] = temp;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor(i = 0; i < len; i++)\n\t{\n\t\tnum = num * 10 + arr[i];\n\t}\n\t\n\treturn num;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; arr)\n\t{\n\t\tmax = max * 10 + i;\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; arr)\n\t{\n\t\tmax = max * 10 + i;\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; arr)\n\t{\n\t\tmax = max * 10 + i;\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; arr)\n\t{\n\t\tmax = max * 10 + i;\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; arr)\n\t{\n\t\tmax = max * 10 + i;\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; arr)\n\t{\n\t\tmax = max * 10 + i;\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; arr) \n\t{\n\t\tmax = max * 10 + i;\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; arr) \n\t{\n\t\tmax = max * 10 + i;\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; arr)\n\t{\n\t\tmax = max * 10 + i;\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; arr) \n\t{\n\t\tmax = max * 10 + i;\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; arr)\n\t{\n\t\tmax = max * 10 + i;\n\t}\n\treturn max;\n}",
    "{\n\tlong maxNum = 0;\n\t\n\tforeach(elem; arr)\n\t{\n\t\tmaxNum = max(maxNum, elem);\n\t}\n\t\n\treturn maxNum;\n}",
    "{\n\tlong max_num = 0;\n\tlong[] temp = new long[arr.length];\n\tforeach(i; 0 .. arr.length)\n\t\ttemp[i] = arr[i];\n\t\n\tsort(temp);\n\t\n\tforeach(i; 0 .. temp.length)\n\t{\n\t\tmax_num += temp[i] * pow(10, temp.length - i - 1);\n\t}\n\t\n\treturn max_num;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; arr)\n\t{\n\t\tmax = max * 10 + i;\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tmax = max * 10 + arr[i];\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; arr)\n\t{\n\t\tmax = max * 10 + i;\n\t}\n\treturn max;\n}"
  ]
}