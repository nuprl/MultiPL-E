{
  "name": "mbpp_72_dif_Square",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether the given number can be represented as the difference of two squares or not.\n\t\n*/\nbool dif_Square(long n) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_72_dif_Square.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = dif_Square;\n\n    assert(candidate(5L) == true);\n    assert(candidate(10L) == false);\n    assert(candidate(15L) == true);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tif (n < 0) \n\t\tn = -n;\n\t\n\twhile (n % 2 == 0) \n\t\tn /= 2;\n\t\n\tif (n % 2 == 1) \n\t\treturn false;\n\t\n\treturn true;\n}",
    "{\n\tif(n < 0)\n\t\treturn false;\n\t\n\tlong sqrt_n = cast(long)sqrt(n);\n\t\n\tfor(long i = 0; i <= sqrt_n; i++)\n\t{\n\t\tif(i * i == n)\n\t\t\treturn true;\n\t}\n\t\n\treturn false;\n}",
    "{\n\tif(n < 0)\n\t\treturn false;\n\t\n\tlong root = cast(long)sqrt(n);\n\t\n\tif(root * root == n)\n\t\treturn true;\n\t\n\treturn false;\n}",
    "{\n\tif (n < 0)\n\t\tn = -n;\n\t\n\tfor (long i = 1; i * i <= n; i++)\n\t{\n\t\tif (n % i == 0)\n\t\t{\n\t\t\tif (n / i == i)\n\t\t\t\treturn true;\n\t\t\telse if (isPerfectSquare(n / i - i))\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tif(n < 0)\n\t\treturn false;\n\t\n\tif(n == 0)\n\t\treturn true;\n\t\n\tif(n % 4 == 1)\n\t\treturn true;\n\t\n\treturn false;\n}",
    "{ \n    if (n < 0) \n        n = -n; \n    long root = (long)sqrt(n); \n    return (root * root == n); \n} ",
    "{\n\tif (n < 0) \n\t{\n\t\tn = -n;\n\t}\n\t\n\tlong root = cast(long)sqrt(n);\n\t\n\treturn (root * root == n);\n}",
    "{\n\tif (n < 0) \n\t\treturn false;\n\t\n\tlong sqrt_n = (long)sqrt(n);\n\t\n\tfor (long i = 0; i <= sqrt_n; i++) \n\t{\n\t\tif (sqrt(n - i * i) == (long)sqrt(n - i * i))\n\t\t\treturn true;\n\t}\n\treturn false;\n}",
    "{ \n    if (n < 0) \n        n = -n; \n    if (n == 0) \n        return true; \n    if (n == 1) \n        return true; \n    for (long i = 2; i <= n / 2; i++) { \n        if (n % i == 0) { \n            long count = 0; \n            while (n % i == 0) { \n                n = n / i; \n                count++; \n            } \n            if (i % 4 == 3 && count % 2 != 0) \n                return false; \n        } \n    } \n    return n % 4 != 3; \n} ",
    "{\n\tif (n < 0) \n\t{\n\t\tn = -n;\n\t}\n\tlong root = (long)sqrt(n);\n\treturn (root * root == n);\n}",
    "{\n\tif (n < 0) \n\t{\n\t\tn = -n;\n\t}\n\t\n\tlong root = cast(long) sqrt(n);\n\t\n\treturn (root * root == n);\n}",
    "{\n\tlong x = (long)sqrt(n);\n\treturn x * x == n;\n}",
    "{ \n    // If n is a perfect square \n    if (sqrt(n) * sqrt(n) == n) \n        return true; \n  \n    // If n is odd \n    if (n % 2 == 1) \n        return false; \n  \n    // If n is even \n    return dif_Square(n / 4); \n} \n  \n// Driver program ",
    "{ \n    // If n is odd, it cannot be represented as the difference of two squares \n    if (n % 2 != 0) \n        return false; \n  \n    // If n is even, then n = 2 * x * y where x and y are integers. \n    // If x and y are both odd, then n cannot be represented as the difference of two squares. \n    if (n % 4 == 0) \n        return true; \n    else\n        return false; \n} ",
    "{\n\tif (n < 0)\n\t\treturn false;\n\t\n\tlong sq = (long)sqrt(n);\n\t\n\treturn (sq * sq == n);\n}",
    "{\n\tif (n < 0) \n\t\treturn false;\n\tlong sqrt_n = (long)sqrt(n);\n\tfor (long i = 0; i <= sqrt_n; i++) \n\t{\n\t\tif (sqrt(n - i * i) == (long)sqrt(n - i * i))\n\t\t\treturn true;\n\t}\n\treturn false;\n}",
    "{\n\tif (n < 0)\n\t\treturn false;\n\t\n\tif (n == 0)\n\t\treturn true;\n\t\n\tif (n == 1)\n\t\treturn true;\n\t\n\tif (n == 2)\n\t\treturn false;\n\t\n\tif (n == 3)\n\t\treturn false;\n\t\n\tif (n == 4)\n\t\treturn true;\n\t\n\tif (n == 5)\n\t\treturn false;\n\t\n\tif (n == 6)\n\t\treturn false;\n\t\n\tif (n == 7)\n\t\treturn false;\n\t\n\tif (n == 8)\n\t\treturn true;\n\t\n\tif (n == 9)\n\t\treturn true;\n\t\n\tif (n == 10)\n\t\treturn false;\n\t\n\tif (n == 11)\n\t\treturn false;\n\t\n\tif (n == 12)\n\t\treturn false;\n\t\n\tif (n == 13)\n\t\treturn false;\n\t\n\tif (n == 14)\n\t\treturn false;\n\t\n\tif (n == 15)\n\t\treturn false;\n\t\n\tif (n == 16)\n\t\treturn true;\n\t\n\tif (n == 17)\n\t\treturn false;\n\t\n\tif (n == 18)\n\t\treturn false;\n\t\n\tif (n == 19)\n\t\treturn false;\n\t\n\tif (n == 20)\n\t\treturn false;\n\t\n\tif (n == 21)\n\t\treturn false;\n\t\n\tif (n == 22)\n\t\treturn false;\n\t\n\tif (n == 23)\n\t\treturn false;\n\t\n\tif (n == 24)\n\t\treturn false;\n\t\n\tif (n == 25)\n\t\treturn true;\n\t\n\tif (n == 26)\n\t\treturn false;\n\t\n\tif (n == 27)\n\t\treturn true;\n\t\n\tif (n == 28)\n\t\treturn false;\n\t\n\tif (n == 29)\n\t\treturn false;\n\t\n\tif (n == 30)\n\t\treturn false;",
    "{\n    long sqrt_n = cast(long) sqrt(n);\n    return (sqrt_n * sqrt_n == n);\n}",
    "{\n\tif(n < 0) \n\t\treturn false;\n\t\n\tif(n == 0) \n\t\treturn true;\n\t\n\tlong root = (long)sqrt(n);\n\t\n\tif(root * root == n) \n\t\treturn true;\n\t\n\treturn false;\n}",
    "{\n\tif (n < 0)\n\t\treturn false;\n\telse\n\t{\n\t\tlong a = (long)sqrt(n);\n\t\treturn (a * a == n);\n\t}\n}",
    "{\n\tlong sqrt_n = cast(long) sqrt(n);\n\tif (sqrt_n * sqrt_n == n)\n\t\treturn true;\n\telse\n\t\treturn false;\n}",
    "{\n\tif(n<0)\n\t\treturn false;\n\tif(n==0)\n\t\treturn true;\n\tif(n%2==0)\n\t\treturn dif_Square(n/2);\n\telse\n\t\treturn dif_Square(n-1);\n}",
    "{\n\tif(n < 0)\n\t\treturn false;\n\t\n\tlong sqrt_n = (long)sqrt(n);\n\t\n\tfor(long i = 0; i <= sqrt_n; i++)\n\t{\n\t\tif(i * i == n)\n\t\t\treturn true;\n\t}\n\t\n\treturn false;\n}",
    "{\n\tif(n<0) return false;\n\tif(n==0) return true;\n\tif(n%4!=0) return false;\n\treturn true;\n}",
    "{ \n    if (n < 0) \n        n = -n; \n    long root = (long)sqrt(n); \n    return (root * root == n); \n} ",
    "{\n\tif (n < 0) \n\t\treturn false;\n\t\n\tlong root = (long) sqrt(n);\n\t\n\treturn (root * root == n);\n}",
    "{\n\tif (n < 0)\n\t\treturn false;\n\t\n\tlong sq = cast(long)sqrt(n);\n\t\n\treturn (sq * sq == n);\n}",
    "{\n\tif (n < 0) \n\t{\n\t\treturn false;\n\t}\n\t\n\tlong sqrt_n = (long)sqrt(n);\n\t\n\tfor (long i = 0; i <= sqrt_n; i++) \n\t{\n\t\tif (sqrt(n - i * i) == (long)sqrt(n - i * i)) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\t\n\treturn false;\n}",
    "{\n\tif (n < 0) \n\t\tn = -n;\n\tif (n == 0) \n\t\treturn true;\n\twhile (n % 4 == 0) \n\t\tn /= 4;\n\tif (n % 8 == 7) \n\t\treturn true;\n\treturn false;\n}",
    "{\n\tif (n < 0) \n\t\treturn false;\n\t\n\twhile (n % 2 == 0) \n\t\tn /= 2;\n\t\n\tif (n % 2 == 1) \n\t\treturn false;\n\t\n\treturn true;\n}",
    "{\n\tif (n < 0) \n\t{\n\t\tn = -n;\n\t}\n\tlong root = sqrt(n);\n\treturn (root * root == n);\n}",
    "{ \n    // If n is a perfect square \n    if (sqrt(n) * sqrt(n) == n) \n        return true; \n  \n    // If n is odd \n    if (n % 2 == 1) \n        return false; \n  \n    // If n is even \n    return dif_Square(n / 4); \n} ",
    "{\n\tif (n < 0)\n\t\tn = -n;\n\t\n\tif (n == 0 || n == 1)\n\t\treturn true;\n\t\n\tlong i = 2;\n\twhile (i <= n) \n\t{\n\t\tif (n % i == 0) \n\t\t{\n\t\t\tif (i % 4 == 3 && n / i % 4 == 3)\n\t\t\t\treturn false;\n\t\t\tn /= i;\n\t\t}\n\t\telse\n\t\t\ti++;\n\t}\n\treturn true;\n}",
    "{\n\tif (n < 0) \n\t{\n\t\treturn false;\n\t}\n\t\n\tlong sqrt_n = cast(long)sqrt(n);\n\t\n\tfor (long i = 0; i <= sqrt_n; i++) \n\t{\n\t\tif (i * i == n) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\t\n\treturn false;\n}",
    "{\n\tif (n < 0)\n\t\tn = -n;\n\t\n\tif (n == 0)\n\t\treturn true;\n\t\n\tif (n % 2 == 0)\n\t\treturn dif_Square(n / 2);\n\t\n\tfor (long i = 3; i <= sqrt(n); i += 2)\n\t{\n\t\tif (n % i == 0)\n\t\t\treturn dif_Square(n / i);\n\t}\n\t\n\treturn false;\n}",
    "{\n\tif (n < 0)\n\t\treturn false;\n\t\n\tint root = (int)sqrt(n);\n\treturn (root * root == n);\n}",
    "{\n\tif(n < 0)\n\t\treturn false;\n\t\n\tif(n == 0)\n\t\treturn true;\n\t\n\tint i = 1;\n\twhile(n > 0)\n\t{\n\t\tn -= i;\n\t\ti += 2;\n\t}\n\t\n\treturn n == 0;\n}",
    "{\n\tif (n < 0) \n\t{\n\t\tn = -n;\n\t}\n\tlong root = cast(long)sqrt(n);\n\treturn root * root == n;\n}",
    "{\n\tif(n < 0)\n\t\treturn false;\n\t\n\tlong sq = cast(long)sqrt(n);\n\t\n\tif(sq * sq == n)\n\t\treturn true;\n\t\n\treturn false;\n}",
    "{\n\tif (n < 0) \n\t\treturn false;\n\t\n\tlong sqrt_n = cast(long)sqrt(n);\n\t\n\tfor (long i = 0; i <= sqrt_n; i++) \n\t{\n\t\tif (sqrt(n - i * i) == cast(long)sqrt(n - i * i))\n\t\t\treturn true;\n\t}\n\treturn false;\n}",
    "{\n\tif (n < 0) \n\t{\n\t\tn = -n;\n\t}\n\t\n\tfor (long i = 0; i <= n; i++) \n\t{\n\t\tif (i * i == n) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tif(n == 0)\n\t\treturn true;\n\telse if(n < 0)\n\t\treturn dif_Square(-n);\n\telse\n\t{\n\t\tlong root = cast(long)sqrt(n);\n\t\tlong i = root;\n\t\twhile(i > 0)\n\t\t{\n\t\t\tif(i * i == n)\n\t\t\t\treturn true;\n\t\t\ti--;\n\t\t}\n\t\treturn false;\n\t}\n}",
    "{\n\tif (n == 0) \n\t\treturn true;\n\tif (n < 0) \n\t\tn = -n;\n\tlong root = cast(long)sqrt(n);\n\tfor (long i = 1; i <= root; i++) \n\t{\n\t\tif (i * i == n) \n\t\t\treturn true;\n\t}\n\treturn false;\n}",
    "{\n\tif (n < 0) \n\t\tn = -n;\n\t\n\tif (n == 0 || n == 1) \n\t\treturn true;\n\t\n\tfor (long i = 2; i <= n / 2; i++) \n\t{\n\t\tif (n % i == 0) \n\t\t{\n\t\t\tlong count = 0;\n\t\t\twhile (n % i == 0) \n\t\t\t{\n\t\t\t\tn = n / i;\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tif (i % 4 == 3 && count % 2 != 0) \n\t\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tif (n < 0) \n\t\tn = -n;\n\t\n\tfor (long i = 1; i * i <= n; i++) \n\t{\n\t\tlong j = (long)sqrt(n - i * i);\n\t\tif (i * i + j * j == n) \n\t\t\treturn true;\n\t}\n\treturn false;\n}",
    "{\n\tif (n < 0) \n\t{\n\t\tn = -n;\n\t}\n\tlong root = sqrt(n);\n\treturn (root * root == n);\n}",
    "{\n\tif (n < 0)\n\t\tn = -n;\n\t\n\tlong root = (long)sqrt(n);\n\t\n\treturn (root * root == n);\n}",
    "{\n    if (n < 0) \n        n = -n;\n    long root = (long)sqrt(n);\n    return (root * root == n);\n}",
    "{ \n    // If n is odd, then it cannot be represented as the difference of two squares. \n    if (n % 2 == 1) \n        return false; \n  \n    // If n is even, then it can be represented as the difference of two squares if and only if it is of the form 4^k(8m + 7) for some non-negative integers k and m. \n    while (n % 2 == 0) \n        n = n / 2; \n    if (n % 8 == 7) \n        return true; \n  \n    return false; \n} ",
    "{ \n    if (n < 0) \n        n = -n; \n    long root = (long)sqrt(n); \n    return (root * root == n); \n} ",
    "{\n\tif (n < 0) \n\t\tn = -n;\n\t\n\tfor (long i = 1; i * i <= n; i++) \n\t{\n\t\tif (n % i == 0) \n\t\t{\n\t\t\tif (n / i == i) \n\t\t\t\treturn true;\n\t\t\telse \n\t\t\t{\n\t\t\t\tif (isPerfectSquare(n / i - i)) \n\t\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}",
    "{ \n    return (n & (n - 1)) == 0; \n} ",
    "{\n\tif (n < 0)\n\t\treturn false;\n\t\n\tlong sq = (long)sqrt(n);\n\t\n\treturn (sq * sq == n);\n}",
    "{ \n\tif (n < 0) \n\t\tn = -n; \n\t\n\tfor (long i = 1; i * i <= n; i++) \n\t{ \n\t\tif (n % i == 0) \n\t\t{ \n\t\t\tif (i % 2 == 0) \n\t\t\t{ \n\t\t\t\tif ((n / i) % 2 == 0) \n\t\t\t\t\treturn true; \n\t\t\t} \n\t\t\telse if (n / i % 2 == 0) \n\t\t\t\treturn true; \n\t\t} \n\t} \n\treturn false; \n} ",
    "{\n\tif (n < 0) \n\t\tn = -n;\n\tlong sqrt_n = (long)sqrt(n);\n\tfor (long i = 1; i <= sqrt_n; i++) \n\t{\n\t\tif (sqrt(n - i * i) == (long)sqrt(n - i * i)) \n\t\t\treturn true;\n\t}\n\treturn false;\n}",
    "{ \n    long sqrt_n = (long)sqrt(n); \n    for (long i = 0; i <= sqrt_n; i++) \n        for (long j = i; j <= sqrt_n; j++) \n            if ((i * i - j * j) == n) \n                return true; \n    return false; \n} ",
    "{\n\tif (n < 0) \n\t{\n\t\tn = -n;\n\t}\n\t\n\tlong root = sqrt(n);\n\t\n\treturn root * root == n;\n}",
    "{\n\tif (n < 0) \n\t{\n\t\treturn false;\n\t}\n\t\n\tlong sqrt_n = (long)sqrt(n);\n\t\n\tfor (long i = 0; i <= sqrt_n; i++) \n\t{\n\t\tif (i * i == n) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\t\n\treturn false;\n}",
    "{\n\tif (n < 0) \n\t{\n\t\treturn false;\n\t}\n\t\n\tlong root = (long)sqrt(n);\n\t\n\tif (root * root == n) \n\t{\n\t\treturn true;\n\t}\n\t\n\treturn false;\n}",
    "{\n\tif (n < 0) \n\t{\n\t\treturn false;\n\t}\n\t\n\tlong root = cast(long)sqrt(n);\n\t\n\treturn (root * root == n);\n}",
    "{\n\tif (n == 0)\n\t\treturn true;\n\telse if (n < 0)\n\t\treturn dif_Square(-n);\n\telse\n\t{\n\t\tlong root = cast(long)sqrt(n);\n\t\treturn root * root == n;\n\t}\n}",
    "{\n\tif (n < 0) \n\t\treturn false;\n\t\n\tif (n == 0) \n\t\treturn true;\n\t\n\twhile (n % 4 == 0) \n\t\tn /= 4;\n\t\n\tif (n % 8 == 7) \n\t\treturn false;\n\t\n\treturn true;\n}",
    "{ \n\tif (n < 0) \n\t\tn = -n; \n\t\n\tfor (long i = 1; i * i <= n; i++) \n\t{ \n\t\tdouble val = sqrt(n - i * i); \n\t\tif ((val - floor(val)) == 0) \n\t\t\treturn true; \n\t} \n\treturn false; \n} ",
    "{\n\tif (n < 0) \n\t{\n\t\tn = -n;\n\t}\n\t\n\twhile (n % 2 == 0) \n\t{\n\t\tn /= 2;\n\t}\n\t\n\tif (n % 2 == 1) \n\t{\n\t\treturn false;\n\t}\n\t\n\treturn true;\n}",
    "{\n\tif (n < 0) \n\t\treturn false;\n\t\n\tlong root = cast(long)sqrt(n);\n\t\n\treturn root * root == n;\n}",
    "{\n\tif (n < 0) \n\t\tn = -n;\n\t\n\tlong s = cast(long)sqrt(n);\n\t\n\treturn (s * s == n);\n}",
    "{\n\tif (n < 0) \n\t{\n\t\treturn false;\n\t}\n\telse \n\t{\n\t\tlong root = (long)sqrt(n);\n\t\treturn (root * root == n);\n\t}\n}",
    "{ \n    if (n < 0) \n        n = -n; \n    while (n % 2 == 0) \n        n = n / 2; \n    if (n % 2 == 1) \n        return true; \n    return false; \n} ",
    "{\n\tif(n < 0)\n\t\treturn false;\n\t\n\tlong sqrt_n = (long)sqrt(n);\n\t\n\tfor(long i = 0; i <= sqrt_n; i++)\n\t{\n\t\tif(sqrt(n - i*i) == (long)sqrt(n - i*i))\n\t\t\treturn true;\n\t}\n\treturn false;\n}",
    "{\n\tif (n < 0) \n\t\treturn false;\n\t\n\tlong root = (long)sqrt(n);\n\t\n\tif (root * root == n) \n\t\treturn true;\n\t\n\treturn false;\n}",
    "{ \n    // If n is odd, it can't be represented as the difference of two squares. \n    if (n % 2 == 1) \n        return false; \n  \n    // If n is even, then it can be represented as the difference of two squares if and only if it is of the form 2^i * (2^j)*k where k is odd. \n    long i = 0; \n    while (n % 2 == 0) { \n        n = n / 2; \n        i++; \n    } \n  \n    // n must be odd at this point. So we can write n = 2^i * k \n    if (i % 2 == 1) \n        return true; \n    return false; \n} ",
    "{\n\tif (n < 0) \n\t\treturn false;\n\t\n\tlong sqrt_n = (long)sqrt(n);\n\t\n\tfor (long i = 0; i <= sqrt_n; i++) \n\t{\n\t\tif (sqrt(n - i * i) == (long)sqrt(n - i * i))\n\t\t\treturn true;\n\t}\n\treturn false;\n}",
    "{\n\tif (n < 0) \n\t{\n\t\tn = -n;\n\t}\n\tlong root = (long)sqrt(n);\n\treturn (root * root == n);\n}",
    "{\n\tif(n == 0)\n\t\treturn true;\n\t\n\tif(n < 0)\n\t\tn = -n;\n\t\n\tlong i = 1;\n\twhile(i * i < n)\n\t\ti++;\n\t\n\tif(i * i == n)\n\t\treturn true;\n\t\n\treturn false;\n}",
    "{ \n    long sqrt_n = (long)sqrt(n); \n    for (long i = 0; i <= sqrt_n; i++) \n        if (i * i == n) \n            return true; \n    return false; \n} ",
    "{ \n\tif (n < 0) \n\t\tn = -n; \n\t\n\tfor (long i = 1; i * i <= n; i++) \n\t{ \n\t\tif (n % i == 0) \n\t\t{ \n\t\t\tif (n / i == i) \n\t\t\t\treturn true; \n\t\t\telse\n\t\t\t\treturn true; \n\t\t} \n\t} \n\treturn false; \n} ",
    "{\n\tif (n < 0) \n\t\treturn false;\n\t\n\tint sqrt_n = (int)sqrt(n);\n\t\n\tfor (int i = 0; i <= sqrt_n; i++) \n\t{\n\t\tif (sqrt(n - i * i) == (int)sqrt(n - i * i))\n\t\t\treturn true;\n\t}\n\treturn false;\n}",
    "{\n\tif(n<0)\n\t\treturn false;\n\telse\n\t{\n\t\tif(n==0)\n\t\t\treturn true;\n\t\telse\n\t\t{\n\t\t\tlong x = (long)sqrt(n);\n\t\t\tif(x*x == n)\n\t\t\t\treturn true;\n\t\t\telse\n\t\t\t{\n\t\t\t\tfor(int i=x-1;i>=1;i--)\n\t\t\t\t{\n\t\t\t\t\tlong y = (long)sqrt(n-i*i);\n\t\t\t\t\tif(y*y == n-i*i)\n\t\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n}",
    "{\n\tif (n < 0) \n\t{\n\t\tn = -n;\n\t}\n\tlong root = (long)sqrt(n);\n\treturn (root * root == n);\n}",
    "{\n\tif (n < 0) \n\t\treturn false;\n\t\n\tlong root = (long)sqrt(n);\n\t\n\tif (root * root == n) \n\t\treturn true;\n\t\n\treturn false;\n}",
    "{\n\tif(n < 0)\n\t\treturn false;\n\t\n\tlong sqrt_n = cast(long)sqrt(n);\n\t\n\tfor(long i = 0; i <= sqrt_n; i++)\n\t{\n\t\tif(i * i == n)\n\t\t\treturn true;\n\t}\n\t\n\treturn false;\n}",
    "{ \n    if (n < 0) \n        n = -n; \n  \n    // If n is a perfect square, then  \n    // root(n) is an integer. \n    long root = (long)sqrt(n); \n  \n    // Check if square root is an integer \n    return (root * root == n); \n} ",
    "{\n\tif (n == 0) \n\t\treturn true;\n\tif (n < 0) \n\t\tn = -n;\n\t\n\twhile (n % 4 == 0) \n\t\tn /= 4;\n\t\n\tif (n % 8 == 7) \n\t\treturn true;\n\t\n\tfor (long i = 1; i * i <= n; i++) \n\t{\n\t\tlong t = sqrt(n - i * i);\n\t\tif (t * t == n - i * i) \n\t\t\treturn true;\n\t}\n\t\n\treturn false;\n}",
    "{\n\tif (n < 0) \n\t{\n\t\treturn false;\n\t}\n\t\n\tlong sq = (long)sqrt(n);\n\t\n\treturn (sq * sq == n);\n}",
    "{\n\tlong sqrt_n = cast(long)sqrt(n);\n\tlong i = 1;\n\twhile (i <= sqrt_n) \n\t{\n\t\tif (sqrt_n * sqrt_n == n)\n\t\t\treturn true;\n\t\ti++;\n\t}\n\treturn false;\n}",
    "{\n\tif (n < 0) \n\t{\n\t\tn = -n;\n\t}\n\tlong root = (long)sqrt(n);\n\treturn (root * root == n);\n}",
    "{\n\tif(n < 0)\n\t\treturn false;\n\t\n\tlong root = (long)sqrt(n);\n\t\n\tif(root * root == n)\n\t\treturn true;\n\t\n\treturn false;\n}",
    "{\n\tif (n < 0) \n\t\tn = -n;\n\t\n\tfor (long i = 1; i * i <= n; i++) \n\t{\n\t\tif (n % i == 0) \n\t\t{\n\t\t\tif (n / i == i) \n\t\t\t\treturn true;\n\t\t\telse \n\t\t\t{\n\t\t\t\tlong j = n / i;\n\t\t\t\tif (isPerfectSquare(i + j) && isPerfectSquare(j - i)) \n\t\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tif(n<0)\n\t\treturn false;\n\t\n\tif(n==0)\n\t\treturn true;\n\t\n\tif(n%4==3)\n\t\treturn false;\n\t\n\tif(n%8==7)\n\t\treturn false;\n\t\n\treturn true;\n}",
    "{\n\tif (n < 0) \n\t\tn = -n;\n\tif (n == 0 || n == 1) \n\t\treturn true;\n\tfor (int i = 2; i <= n / 2; i++) \n\t{\n\t\tif (n % i == 0) \n\t\t{\n\t\t\tint count = 0;\n\t\t\twhile (n % i == 0) \n\t\t\t{\n\t\t\t\tn = n / i;\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tif (i % 4 == 3 && count % 2 != 0) \n\t\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tif (n < 0) \n\t{\n\t\tn = -n;\n\t}\n\t\n\tif (n == 0) \n\t{\n\t\treturn true;\n\t}\n\t\n\twhile (n % 4 == 0) \n\t{\n\t\tn = n / 4;\n\t}\n\t\n\tif (n % 8 == 7) \n\t{\n\t\treturn true;\n\t}\n\t\n\tfor (long i = 1; i * i <= n; i++) \n\t{\n\t\tlong t = n - i * i;\n\t\tif (t % 8 == 0) \n\t\t{\n\t\t\tlong r = sqrt(t);\n\t\t\tif (r * r == t) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn false;\n}",
    "{ \n    // If n is odd, it cannot be represented as the difference of two squares \n    if (n % 2 == 1) \n        return false; \n  \n    // If n is even, then it can be represented as the difference of two squares if and only if it can be represented as the sum of two even numbers. \n    // The number n can be represented as the sum of two even numbers if and only if it is of the form 2^i * (2^j - 1) where i >= 1 and j >= 1. \n    // The number n can be represented as the sum of two even numbers if and only if it is of the form 2^i * (2^j - 1) where i >= 1 and j >= 1. \n    // The number n can be represented as the sum of two even numbers if and only if it is of the form 2^i * (2^j - 1) where i >= 1 and j >= 1. \n    // The number n can be represented as the sum of two even numbers if and only if it is of the form 2^i * (2^j - 1) where i >= 1 and j >= 1. \n    // The number n can be represented as the sum of two even numbers if and only if it is of the form 2^i * (2^j - 1) where i >= 1 and j >= 1. \n    // The number n can be represented as the sum of two even numbers if and only if it is of the form 2^i * (2^j - 1) where i >= 1 and j >= 1. \n    // The number n can be represented as the sum of two even numbers if and only if it is of the form 2^i * (2^j - 1) where i >= 1 and j >= 1. \n    // The number n can be represented as the sum of two even numbers if and only if it is of the form 2^i * (2^j - 1) where i >= 1 and j >= 1. \n    // The number n can be represented as the sum of two even numbers if and only if it is of the form 2^i * (2^j - 1) where i >= 1 and j >= 1. \n    // The number n can be represented as the sum of two even numbers if and only if it",
    "{\n\tif (n < 0) \n\t\tn = -n;\n\t\n\tif (n == 0) \n\t\treturn true;\n\t\n\tif (n % 2 == 0) \n\t\treturn dif_Square(n / 2);\n\t\n\tfor (long i = 3; i <= sqrt(n); i += 2) \n\t{\n\t\tif (n % i == 0) \n\t\t{\n\t\t\tif (dif_Square(n / i)) \n\t\t\t\treturn true;\n\t\t\telse \n\t\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn false;\n}",
    "{\n\tif (n < 0) \n\t{\n\t\tn = -n;\n\t}\n\tlong root = (long) sqrt(n);\n\treturn (root * root == n);\n}",
    "{\n\tif (n < 0) \n\t{\n\t\treturn false;\n\t}\n\tlong sqrt_n = (long)sqrt(n);\n\tfor (long i = 1; i <= sqrt_n; i++) \n\t{\n\t\tif (sqrt(n - i * i) == (long)sqrt(n - i * i)) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tif (n < 0)\n\t\tn = -n;\n\t\n\tif (n % 2 == 0)\n\t\treturn true;\n\t\n\tfor (long i = 3; i <= sqrt(n); i += 2)\n\t{\n\t\tif (n % i == 0)\n\t\t\treturn true;\n\t}\n\t\n\treturn false;\n}",
    "{\n\tif(n<0)\n\t\treturn false;\n\t\n\tif(n==0)\n\t\treturn true;\n\t\n\tlong s=cast(long)sqrt(n);\n\t\n\tif(s*s==n)\n\t\treturn true;\n\t\n\treturn false;\n}",
    "{ \n    // If n is odd, then it cannot be represented as the difference of two squares. \n    if (n % 2 == 1) \n        return false; \n  \n    // If n is even, then it can be represented as the difference of two squares if and only if it can be represented as the sum of two even numbers. \n    return isEven(n / 2); \n} ",
    "{\n\tif (n < 0) \n\t{\n\t\treturn false;\n\t}\n\t\n\tif (n == 0) \n\t{\n\t\treturn true;\n\t}\n\t\n\tlong root = (long)sqrt(n);\n\t\n\tif (root * root == n) \n\t{\n\t\treturn true;\n\t}\n\t\n\treturn false;\n}",
    "{\n\tif (n < 0)\n\t\tn = -n;\n\t\n\tlong m = (long)sqrt(n);\n\t\n\treturn n == m * m;\n}",
    "{ \n    if (n < 0) \n        n = -n; \n    long root = (long)sqrt(n); \n    return (root * root == n); \n} ",
    "{\n\tif (n < 0) \n\t{\n\t\tn = -n;\n\t}\n\t\n\tlong root = (long)sqrt(n);\n\t\n\treturn (root * root == n);\n}",
    "{\n\tif (n < 0) \n\t{\n\t\treturn false;\n\t}\n\t\n\tlong sqrt_n = sqrt(n);\n\t\n\tfor (long i = 0; i <= sqrt_n; i++) \n\t{\n\t\tif (sqrt(n - i * i) == (long)sqrt(n - i * i)) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\t\n\treturn false;\n}",
    "{\n\tif (n < 0) \n\t\treturn false;\n\t\n\tlong sqrt_n = (long)sqrt(n);\n\t\n\tfor (long i = 0; i <= sqrt_n; i++) \n\t{\n\t\tif (sqrt(n - i * i) == (long)sqrt(n - i * i))\n\t\t\treturn true;\n\t}\n\treturn false;\n}",
    "{\n\tlong x = (long)sqrt(n);\n\treturn (x*x == n);\n}",
    "{\n\tif (n < 0) \n\t\tn = -n;\n\t\n\tlong root = cast(long)sqrt(n);\n\t\n\treturn root * root == n;\n}",
    "{ \n    long x = (long)sqrt(n); \n    return (x * x == n); \n} ",
    "{\n\tif (n < 0) \n\t{\n\t\treturn false;\n\t}\n\telse if (n == 0) \n\t{\n\t\treturn true;\n\t}\n\telse \n\t{\n\t\tlong sqrt_n = cast(long)sqrt(n);\n\t\tfor (long i = 1; i <= sqrt_n; i++) \n\t\t{\n\t\t\tif (sqrt(n - i * i) == cast(long)sqrt(n - i * i)) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n}",
    "{ \n\tif (n < 0) \n\t\tn = -n; \n\tfor (long i = 1; i * i <= n; i++) \n\t\tif ((n % i == 0) && ((n / i) % 2 == 0)) \n\t\t\treturn true; \n\treturn false; \n} ",
    "{\n\tif (n < 0) \n\t{\n\t\treturn false;\n\t}\n\t\n\tlong sqrt_n = (long)sqrt(n);\n\t\n\tfor (long i = 0; i <= sqrt_n; i++) \n\t{\n\t\tif (sqrt(n - i * i) == (long)sqrt(n - i * i)) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\t\n\treturn false;\n}",
    "{\n\tif (n < 0) \n\t\treturn false;\n\t\n\tlong sqrt_n = cast(long)sqrt(n);\n\t\n\tfor (long i = 0; i <= sqrt_n; i++) \n\t{\n\t\tif (i * i == n) \n\t\t\treturn true;\n\t}\n\treturn false;\n}",
    "{\n\tif (n < 0) \n\t\tn = -n;\n\t\n\tlong root = cast(long)sqrt(n);\n\t\n\treturn n == root * root;\n}",
    "{ \n    if (n < 0) \n        n = -n; \n    for (long i = 1; i * i <= n; i++) { \n        for (long j = i + 1; j * j <= n; j++) { \n            if (i * i + j * j == n) { \n                return true; \n            } \n        } \n    } \n    return false; \n} ",
    "{\n\tif (n < 0)\n\t\treturn false;\n\t\n\tlong sqrt_n = (long)sqrt(n);\n\t\n\tfor (long i = 0; i <= sqrt_n; i++) \n\t{\n\t\tif (sqrt(n - i * i) == (long)sqrt(n - i * i))\n\t\t\treturn true;\n\t}\n\treturn false;\n}",
    "{\n\tif (n == 0)\n\t\treturn true;\n\tif (n < 0)\n\t\tn = -n;\n\tlong root = (long) sqrt(n);\n\tfor (long i = 1; i <= root; i++)\n\t{\n\t\tif (i * i == n)\n\t\t\treturn true;\n\t}\n\treturn false;\n}",
    "{\n\tif (n < 0) \n\t{\n\t\treturn false;\n\t}\n\t\n\tlong root = (long)sqrt(n);\n\t\n\treturn (root * root == n);\n}",
    "{\n\tif (n < 0) \n\t{\n\t\tn = -n;\n\t}\n\t\n\tlong root = cast(long)sqrt(n);\n\t\n\treturn (root * root == n);\n}",
    "{\n\tif(n < 0)\n\t\treturn false;\n\t\n\tif(n == 0)\n\t\treturn true;\n\t\n\tlong sqrt_n = (long)sqrt(n);\n\t\n\tfor(long i = 1; i <= sqrt_n; i++)\n\t{\n\t\tif(n % i == 0)\n\t\t{\n\t\t\tif(i % 2 == 0)\n\t\t\t{\n\t\t\t\tif(n / i % 2 == 0)\n\t\t\t\t\treturn true;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(i % 2 == 0)\n\t\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tlong sqrt_n = cast(long)sqrt(n);\n\tfor (long i = 1; i <= sqrt_n; i++) \n\t{\n\t\tif (i * i == n) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tif (n < 0) \n\t\treturn false;\n\t\n\tif (n == 0) \n\t\treturn true;\n\t\n\tlong root = cast(long)sqrt(n);\n\t\n\tfor (long i = 1; i <= root; i++) \n\t{\n\t\tif (i * i == n) \n\t\t\treturn true;\n\t}\n\t\n\treturn false;\n}",
    "{\n\tif(n < 0) \n\t{\n\t\treturn false;\n\t}\n\t\n\tlong root = cast(long)sqrt(n);\n\t\n\treturn root * root == n;\n}",
    "{\n\tif (n < 0) \n\t\treturn false;\n\t\n\tlong root = cast(long) sqrt(n);\n\t\n\treturn root * root == n;\n}",
    "{\n\tlong x = (long)sqrt(n);\n\treturn x * x == n;\n}",
    "{ \n    if (n < 0) \n        n = -n; \n  \n    switch (n & 3) \n    { \n    case 0: \n        return true; \n    case 1: \n        return false; \n    case 2: \n        return true; \n    } \n  \n    long r = (long)sqrt(n); \n    return (r * r == n); \n} ",
    "{ \n    if (n < 0) \n        return dif_Square(-n); \n  \n    for (long i = 1; i * i <= n; i++) \n        if (i * i == n) \n            return true; \n  \n    return false; \n} ",
    "{\n\tif(n < 0)\n\t\treturn false;\n\t\n\tlong sqrt_n = cast(long)sqrt(n);\n\t\n\tfor(long i = 0; i <= sqrt_n; i++)\n\t{\n\t\tif(i * i == n)\n\t\t\treturn true;\n\t}\n\t\n\treturn false;\n}",
    "{ \n\tif (n < 0) \n\t\tn = -n; \n\tfor (long i = 1; i * i <= n; i++) \n\t\tif ((n % i == 0) && ((n / i) % 2 == 0)) \n\t\t\treturn true; \n\treturn false; \n} ",
    "{\n\tif(n == 0)\n\t\treturn true;\n\t\n\tif(n < 0)\n\t\tn = -n;\n\t\n\twhile(n % 2 == 0)\n\t\tn /= 2;\n\t\n\tif(n % 2 == 1)\n\t\treturn false;\n\t\n\treturn true;\n}",
    "{\n\tif(n<0)\n\t\tn=-n;\n\t\n\tif(n==0)\n\t\treturn true;\n\t\n\twhile(n%2==0)\n\t\tn/=2;\n\t\n\tif(n%2==1)\n\t\treturn false;\n\t\n\treturn true;\n}",
    "{\n\tif (n < 0) \n\t{\n\t\tn = -n;\n\t}\n\t\n\tlong root = (long)sqrt(n);\n\t\n\treturn (root * root == n);\n}",
    "{ \n    if (n < 0) \n        n = -n; \n  \n    for (long i = 1; i * i <= n; i++) { \n        if ((n % i == 0) && ((n / i) % 2 == 0)) \n            return true; \n    } \n    return false; \n} ",
    "{\n\tif (n < 0) \n\t\tn = -n;\n\t\n\tlong root = cast(long)sqrt(n);\n\t\n\treturn root * root == n;\n}",
    "{ \n    // If n is odd, it cannot be a difference of two squares \n    if (n % 2 == 1) \n        return false; \n  \n    // If n is even, check if it can be written as n = x^2 - y^2 \n    // where x and y are natural numbers. \n    long x = (long)sqrt(n / 2); \n    long y = (long)sqrt(n - x * x); \n    return (x * x - y * y == n); \n} ",
    "{\n\tif (n < 0) \n\t{\n\t\tn = -n;\n\t}\n\tlong root = (long)sqrt(n);\n\treturn (root * root == n);\n}",
    "{\n\tif (n < 0)\n\t\treturn false;\n\t\n\tint root = cast(int)sqrt(n);\n\t\n\treturn root * root == n;\n}",
    "{\n\tif(n < 0)\n\t\treturn false;\n\t\n\tlong root = cast(long)sqrt(n);\n\t\n\tif(root * root == n)\n\t\treturn true;\n\telse\n\t\treturn false;\n}",
    "{ \n    if (n < 0) \n        n = -n; \n  \n    // If n is a perfect square, then  \n    // difference between two squares is 0. \n    if (isPerfectSquare(n)) \n        return true; \n  \n    return false; \n} ",
    "{\n\tif(n < 0)\n\t\treturn false;\n\t\n\tif(n == 0)\n\t\treturn true;\n\t\n\tlong sqrt_n = cast(long)sqrt(n);\n\t\n\tfor(long i = 1; i <= sqrt_n; i++)\n\t{\n\t\tif(i*i == n)\n\t\t\treturn true;\n\t}\n\t\n\treturn false;\n}",
    "{ \n    if (n < 0) \n        n = -n; \n    long root = (long)sqrt(n); \n    return (root * root == n); \n} ",
    "{\n\tif (n < 0)\n\t\tn = -n;\n\t\n\tlong sqrt_n = cast(long)sqrt(n);\n\t\n\tif (sqrt_n * sqrt_n == n)\n\t\treturn true;\n\t\n\treturn false;\n}",
    "{\n\tif (n < 0) \n\t{\n\t\tn = -n;\n\t}\n\tlong root = cast(long)sqrt(n);\n\treturn (root * root == n);\n}",
    "{\n    if (n < 0) \n        n = -n;\n    long root = cast(long)sqrt(n);\n    return root * root == n;\n}",
    "{ \n    if (n < 0) \n        n = -n; \n    return (floor(sqrt(n)) - ceil(sqrt(n)) == 0); \n} ",
    "{ \n    if (n < 0) \n        n = -n; \n    return (floor(sqrt(n)) - ceil(sqrt(n)) == 0); \n} ",
    "{\n\tif (n < 0) \n\t\treturn false;\n\t\n\tif (n == 0) \n\t\treturn true;\n\t\n\tlong root = cast(long)sqrt(n);\n\t\n\tfor (long i = 1; i <= root; i++) \n\t{\n\t\tif (i * i == n) \n\t\t\treturn true;\n\t}\n\t\n\treturn false;\n}",
    "{\n\tif (n < 0) \n\t\treturn false;\n\t\n\tlong root = cast(long)sqrt(n);\n\treturn root * root == n;\n}",
    "{\n\tif (n < 0) \n\t{\n\t\tn = -n;\n\t}\n\t\n\tlong root = (long)sqrt(n);\n\t\n\treturn (root * root == n);\n}",
    "{ \n\t// If n is odd, then it cannot be represented as the difference of two squares. \n\tif (n % 2 == 1) \n\t\treturn false; ",
    "{\n\tif(n==0) return true;\n\tif(n<0) n = -n;\n\t\n\tlong sq = (long)sqrt(n);\n\t\n\tif(sq*sq==n) return true;\n\t\n\treturn false;\n}",
    "{\n\tif (n < 0) \n\t\treturn false;\n\t\n\tlong sqrt_n = (long)sqrt(n);\n\t\n\tfor (long i = 0; i <= sqrt_n; i++) \n\t{\n\t\tif (sqrt(n - i * i) == (long)sqrt(n - i * i))\n\t\t\treturn true;\n\t}\n\treturn false;\n}",
    "{\n\tif (n < 0)\n\t\treturn false;\n\t\n\tlong sqrt_n = (long)sqrt(n);\n\t\n\tfor (long i = 0; i <= sqrt_n; i++)\n\t{\n\t\tif (sqrt(n - i * i) == (long)sqrt(n - i * i))\n\t\t\treturn true;\n\t}\n\treturn false;\n}",
    "{ \n\tif (n < 0) \n\t\tn = -n; \n\tfor (long i = 1; i * i <= n; i++) \n\t\tif ((n % i == 0) && ((n / i) % 2 == 0)) \n\t\t\treturn true; \n\treturn false; \n} ",
    "{ \n\tif (n < 0) \n\t\tn = -n; \n\tfor (long i = 1; i * i <= n; i++) { \n\t\tfor (long j = i + 1; j * j <= n; j++) { \n\t\t\tif (i * i + j * j == n) \n\t\t\t\treturn true; \n\t\t} \n\t} \n\treturn false; \n} ",
    "{\n\tif(n<0)\n\t\treturn false;\n\telse\n\t{\n\t\tlong a = cast(long)sqrt(n);\n\t\treturn a*a == n;\n\t}\n}",
    "{ \n    // If n is odd, then it cannot be represented as sum of two squares \n    if (n % 2) \n        return false; \n  \n    // If n % 4 == 3, then n cannot be represented as sum of two squares \n    if (n % 4 == 3) \n        return false; \n  \n    // Find a number k such that n = (2^k)*d \n    long d = n / 2; \n    while (d % 2 == 0) \n        d /= 2; \n  \n    // If 2^k * d = n, then n can be represented as sum of two squares \n    return true; \n} ",
    "{ \n\tif (n < 0) \n\t\tn = -n; \n\tfor (int i = 1; i <= n; i++) \n\t{ \n\t\tif (i * i == n) \n\t\t\treturn true; \n\t} \n\treturn false; \n} ",
    "{\n\tif (n < 0) \n\t{\n\t\treturn false;\n\t}\n\t\n\tint root = cast(int) sqrt(n);\n\t\n\treturn (root * root == n);\n}",
    "{\n\tif (n < 0) \n\t{\n\t\tn = -n;\n\t}\n\tlong root = (long)sqrt(n);\n\treturn (root * root == n);\n}",
    "{\n\tlong i;\n\tlong j;\n\tlong k;\n\tlong l;\n\tlong m;\n\tlong o;\n\tlong p;\n\tlong q;\n\tlong r;\n\tlong s;\n\tlong t;\n\tlong u;\n\tlong v;\n\tlong w;\n\tlong x;\n\tlong y;\n\tlong z;\n\tlong aa;\n\tlong ab;\n\tlong ac;\n\tlong ad;\n\tlong ae;\n\tlong af;\n\tlong ag;\n\tlong ah;\n\tlong ai;\n\tlong aj;\n\tlong ak;\n\tlong al;\n\tlong am;\n\tlong an;\n\tlong ao;\n\tlong ap;\n\tlong aq;\n\tlong ar;\n\tlong as;\n\tlong at;\n\tlong au;\n\tlong av;\n\tlong aw;\n\tlong ax;\n\tlong ay;\n\tlong az;\n\tlong ba;\n\tlong bb;\n\tlong bc;\n\tlong bd;\n\tlong be;\n\tlong bf;\n\tlong bg;\n\tlong bh;\n\tlong bi;\n\tlong bj;\n\tlong bk;\n\tlong bl;\n\tlong bm;\n\tlong bn;\n\tlong bo;\n\tlong bp;\n\tlong bq;\n\tlong br;\n\tlong bs;\n\tlong bt;\n\tlong bu;\n\tlong bv;\n\tlong bw;\n\tlong bx;\n\tlong by;\n\tlong bz;\n\tlong ca;\n\tlong cb;\n\tlong cc;\n\tlong cd;\n\tlong ce;\n\tlong cf;\n\tlong cg;\n\tlong ch;\n\tlong ci;\n\tlong cj;\n\tlong ck;\n\tlong cl;\n\tlong cm;\n\tlong cn;\n\tlong co;\n\tlong cp;\n\tlong cq;\n\tlong cr;\n\tlong cs;\n\tlong ct;\n\tlong cu;\n\tlong cv;\n\tlong cw;\n\tlong cx;\n\tlong cy;\n\tlong cz;\n\t",
    "{\n\tif(n<0)\n\t\treturn false;\n\t\n\tlong sqrt_n = (long)sqrt(n);\n\t\n\tfor(long i=1; i<=sqrt_n; i++)\n\t{\n\t\tif(n==i*i)\n\t\t\treturn true;\n\t}\n\t\n\treturn false;\n}",
    "{\n\tif (n < 0) \n\t{\n\t\treturn false;\n\t}\n\t\n\tlong sqrt_n = (long)sqrt(n);\n\t\n\tfor (long i = 0; i <= sqrt_n; i++) \n\t{\n\t\tfor (long j = i; j <= sqrt_n; j++) \n\t\t{\n\t\t\tif ((i * i) - (j * j) == n) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn false;\n}",
    "{\n\tif (n < 0) \n\t{\n\t\treturn false;\n\t}\n\telse \n\t{\n\t\tlong sqrt_n = cast(long) sqrt(n);\n\t\treturn (sqrt_n * sqrt_n == n);\n\t}\n}",
    "{\n\tlong sqrt_n = (long)sqrt(n);\n\tlong i = 1;\n\twhile (i <= sqrt_n) \n\t{\n\t\tif (sqrt(n - i * i) == (long)sqrt(n - i * i))\n\t\t\treturn true;\n\t\ti++;\n\t}\n\treturn false;\n}",
    "{\n\tif (n < 0) \n\t{\n\t\tn = -n;\n\t}\n\t\n\tfor (long i = 1; i <= n; i++) \n\t{\n\t\tif (n == i * i - (i - 1) * (i - 1)) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tif (n < 0) \n\t{\n\t\tn = -n;\n\t}\n\t\n\tint root = (int)sqrt(n);\n\t\n\treturn (root * root == n);\n}",
    "{\n\tif (n < 0) \n\t\treturn false;\n\t\n\tint root = (int)sqrt(n);\n\t\n\treturn (root * root == n);\n}",
    "{\n\tif(n<0)\n\t\treturn false;\n\t\n\tlong root = cast(long)sqrt(n);\n\t\n\treturn root*root == n;\n}",
    "{\n\tif (n < 0) \n\t\tn = -n;\n\t\n\tif (n == 0 || n == 1) \n\t\treturn true;\n\t\n\tfor (long i = 2; i <= n / 2; i++) \n\t{\n\t\tif (i * i == n) \n\t\t\treturn true;\n\t}\n\treturn false;\n}",
    "{\n\tif (n == 0)\n\t\treturn true;\n\tif (n < 0)\n\t\tn = -n;\n\tlong m = (long)sqrt(n);\n\treturn (m * m == n);\n}",
    "{\n\tif (n < 0) \n\t\tn = -n;\n\tlong root = (long)sqrt(n);\n\treturn (root * root == n);\n}",
    "{\n\tif (n == 0)\n\t\treturn true;\n\tif (n < 0)\n\t\tn = -n;\n\twhile (n % 4 == 0)\n\t\tn /= 4;\n\tif (n % 8 == 7)\n\t\treturn true;\n\treturn false;\n}",
    "{ \n    if (n < 0) \n        n = -n; \n    long root = (long)sqrt(n); \n    return (root * root == n); \n} ",
    "{\n\tif (n < 0) \n\t\tn = -n;\n\t\n\tif (n % 2 == 0) \n\t\treturn true;\n\t\n\tfor (long i = 3; i <= sqrt(n); i += 2) \n\t{\n\t\tif (n % i == 0) \n\t\t\treturn true;\n\t}\n\t\n\treturn false;\n}",
    "{\n\tif (n < 0) \n\t\tn = -n;\n\t\n\tlong root = (long)sqrt(n);\n\t\n\treturn (root * root == n);\n}",
    "{\n\tif (n < 0) \n\t\treturn false;\n\telse \n\t{\n\t\tlong sq = cast(long)sqrt(n);\n\t\treturn (sq * sq == n);\n\t}\n}",
    "{ \n    if (n < 0) \n        n = -n; \n    long root = (long)sqrt(n); \n    return (root * root == n); \n} ",
    "{\n\tif (n < 0) \n\t{\n\t\tn = -n;\n\t}\n\t\n\tlong root = cast(long) sqrt(n);\n\t\n\treturn (root * root == n);\n}",
    "{\n\tif(n<0)\n\t\treturn false;\n\t\n\tif(n==0)\n\t\treturn true;\n\t\n\tlong sqrt_n = cast(long)sqrt(n);\n\t\n\tfor(long i=1; i<=sqrt_n; i++)\n\t{\n\t\tif(n%i==0)\n\t\t{\n\t\t\tif(i%2==0)\n\t\t\t{\n\t\t\t\tif((n/i)%2==0)\n\t\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn false;\n}",
    "{ \n    if (n < 0) \n        return false; \n  \n    // If n is a perfect square, then  \n    // root(n) is an integer. \n    long root = (long)sqrt(n); \n  \n    // Check if root*root = n. \n    return (root * root == n); \n} ",
    "{\n\tif (n == 0) \n\t{\n\t\treturn true;\n\t}\n\tif (n < 0) \n\t{\n\t\tn = -n;\n\t}\n\twhile (n % 4 == 0) \n\t{\n\t\tn /= 4;\n\t}\n\tif (n % 8 == 7) \n\t{\n\t\treturn false;\n\t}\n\tfor (long i = 1; i * i <= n; i++) \n\t{\n\t\tlong t = sqrt(n - i * i);\n\t\tif (t * t == n - i * i) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tif(n < 0)\n\t\treturn false;\n\t\n\tlong sqrt_n = (long)sqrt(n);\n\t\n\tfor(long i = 0; i <= sqrt_n; i++)\n\t{\n\t\tif(i*i == n)\n\t\t\treturn true;\n\t}\n\treturn false;\n}",
    "{ \n    if (n < 0) \n        n = -n; \n    return (floor(sqrt(n)) * floor(sqrt(n)) == n); \n} ",
    "{ \n    long a = (long)sqrt(n); \n  \n    if (a * a == n) \n        return true; \n  \n    return false; \n} ",
    "{\n\tif (n < 0) \n\t\treturn false;\n\t\n\tlong root = cast(long)sqrt(n);\n\t\n\treturn (root * root == n);\n}",
    "{\n\tif (n < 0) \n\t\tn = -n;\n\t\n\tlong root = (long)sqrt(n);\n\t\n\treturn (root * root == n);\n}",
    "{\n\tif(n < 0) return false;\n\t\n\tlong sqrt_n = (long)sqrt(n);\n\t\n\tfor(long i = 0; i <= sqrt_n; i++)\n\t{\n\t\tif(i*i == n) return true;\n\t}\n\t\n\treturn false;\n}",
    "{ \n    if (n == 0 || n == 1 || n == 2) \n        return false; \n  \n    for (long i = 1; i <= n; i++) { \n        if (i * i > n) \n            return false; \n  \n        long temp = n - (i * i); \n        if (temp % 2 == 0) { \n            long t = (long)sqrt(temp / 2); \n            if (t * t == temp / 2) \n                return true; \n        } \n    } \n    return false; \n} ",
    "{\n\tif(n < 0)\n\t\treturn false;\n\t\n\treturn (floor(sqrt(n)) == sqrt(n));\n}",
    "{\n\tif (n < 0) \n\t{\n\t\treturn false;\n\t}\n\t\n\tlong s = (long)sqrt(n);\n\t\n\treturn (s * s == n);\n}",
    "{\n\tlong a = (long)sqrt(n);\n\tif (a*a == n)\n\t\treturn true;\n\treturn false;\n}",
    "{\n\tif (n < 0) \n\t\treturn false;\n\t\n\tlong sqrt_n = cast(long) sqrt(n);\n\t\n\tfor (long i = 0; i <= sqrt_n; i++) \n\t{\n\t\tif (i * i == n) \n\t\t\treturn true;\n\t}\n\t\n\treturn false;\n}",
    "{\n\tif(n < 0)\n\t\treturn false;\n\t\n\tlong root = sqrt(n);\n\t\n\tif(root * root == n)\n\t\treturn true;\n\t\n\treturn false;\n}",
    "{ \n\tif (n < 0) \n\t\tn = -n; \n\tfor (long i = 1; i * i <= n; i++) \n\t\tif ((n % i == 0) && ((n / i) % 2 == 0)) \n\t\t\treturn true; \n\treturn false; \n} ",
    "{ \n\tif (n < 0) \n\t\tn = -n; \n\tfor (long i = 1; i * i <= n; i++) \n\t\tif ((n % i == 0) && ((n / i) % 2 == 0)) \n\t\t\treturn true; \n\treturn false; \n} ",
    "{ \n    if (n < 0) \n        n = -n; \n    if (n == 0 || n == 1) \n        return true; \n    for (long i = 2; i <= n / 2; i++) \n        if (i * i == n) \n            return true; \n    return false; \n} ",
    "{\n\tif (n < 0) \n\t{\n\t\treturn false;\n\t}\n\tlong sqrt_n = (long)sqrt(n);\n\tfor (long i = 0; i <= sqrt_n; i++) \n\t{\n\t\tif (sqrt(n - i * i) == (long)sqrt(n - i * i)) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}",
    "{ \n    if (n < 0) \n        n = -n; \n  \n    // If n is a perfect square, then  \n    // root(n) is an integer. \n    long root = (long)sqrt(n); \n  \n    // Check if square root is an integer \n    return (root * root == n); \n} ",
    "{ \n\tif (n < 0) \n\t\tn = -n; \n\t\n\twhile (n % 2 == 0) \n\t\tn = n / 2; \n\t\n\tif (n % 2 == 1) \n\t\treturn true; \n\treturn false; \n} ",
    "{\n\tif(n < 0)\n\t\treturn false;\n\t\n\tlong sqrt_n = (long)sqrt(n);\n\t\n\tfor(long i = 1; i <= sqrt_n; i++)\n\t{\n\t\tif(i * i == n)\n\t\t\treturn true;\n\t}\n\treturn false;\n}",
    "{\n\tif (n < 0) \n\t\treturn dif_Square(-n);\n\tforeach(i; 0 .. n) \n\t{\n\t\tif (i * i == n) \n\t\t\treturn false;\n\t\tif ((n - i * i) % 2 == 0) \n\t\t\treturn true;\n\t}\n\treturn false;\n}"
  ]
}