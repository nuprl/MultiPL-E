{
  "name": "mbpp_291_count_no_of_ways",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\n*/\nlong count_no_of_ways(long n, long k) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_291_count_no_of_ways.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tif (n == 1) \n\t\treturn k;\n\tif (n == 2) \n\t\treturn k * k;\n\tlong diff = k * (k - 1);\n\tlong same = k;\n\tfor (long i = 3; i <= n; i++) \n\t{\n\t\tlong temp = diff;\n\t\tdiff = (diff + same) * (k - 1);\n\t\tsame = temp;\n\t}\n\treturn diff + same;\n}",
    "{\n\tif (n == 1) \n\t\treturn k;\n\tif (n == 2) \n\t\treturn k * k;\n\tlong diff_color_counts = k * (k - 1);\n\tlong same_color_counts = k;\n\tlong total_count = diff_color_counts + same_color_counts;\n\tfor (long i = 3; i <= n; i++) \n\t{\n\t\tdiff_color_counts = diff_color_counts * (k - 1);\n\t\tsame_color_counts = total_count - diff_color_counts;\n\t\ttotal_count = diff_color_counts + same_color_counts;\n\t}\n\treturn total_count;\n}",
    "{\n\tif (n == 1)\n\t\treturn k;\n\tif (n == 2)\n\t\treturn k * k;\n\tlong diff_color_count = k * (k - 1);\n\tlong same_color_count = k;\n\tlong total_count = diff_color_count + same_color_count;\n\tfor (long i = 3; i <= n; i++) \n\t{\n\t\tdiff_color_count = (diff_color_count + same_color_count) * (k - 1);\n\t\tsame_color_count = total_count * (k - 1);\n\t\ttotal_count = diff_color_count + same_color_count;\n\t}\n\treturn total_count;\n}",
    "{\n\tif (n == 1) \n\t\treturn k;\n\tif (n == 2) \n\t\treturn k * k;\n\t\n\tlong diff_color_counts = k * (k - 1);\n\tlong same_color_counts = k;\n\t\n\tfor (long i = 3; i <= n; i++) \n\t{\n\t\tlong temp = diff_color_counts;\n\t\tdiff_color_counts = (diff_color_counts + same_color_counts) * (k - 1);\n\t\tsame_color_counts = temp;\n\t}\n\treturn (diff_color_counts + same_color_counts);\n}",
    "{\n\tif (n == 0)\n\t\treturn 0;\n\tif (n == 1)\n\t\treturn k;\n\tif (n == 2)\n\t\treturn k * k;\n\t\n\tlong same = k;\n\tlong diff = k * (k - 1);\n\t\n\tfor (long i = 3; i <= n; i++)\n\t{\n\t\tlong temp = diff;\n\t\tdiff = (same + diff) * (k - 1);\n\t\tsame = temp;\n\t}\n\t\n\treturn same + diff;\n}",
    "{\n\tif (n == 1) \n\t\treturn k;\n\tif (n == 2) \n\t\treturn k * k;\n\tlong diff_color_counts = k * (k - 1);\n\tlong same_color_counts = k;\n\tlong total_count = diff_color_counts + same_color_counts;\n\tfor (long i = 3; i <= n; ++i) \n\t{\n\t\tdiff_color_counts = (diff_color_counts + same_color_counts) * (k - 1);\n\t\tsame_color_counts = total_count * (k - 1);\n\t\ttotal_count = diff_color_counts + same_color_counts;\n\t}\n\treturn total_count;\n}",
    "{\n\tif (n == 1)\n\t\treturn k;\n\tif (n == 2)\n\t\treturn k * k;\n\tlong diff = k * (k - 1);\n\tlong same = k;\n\tfor (long i = 3; i <= n; i++) \n\t{\n\t\tauto temp = diff;\n\t\tdiff = (diff + same) * (k - 1);\n\t\tsame = temp;\n\t}\n\treturn diff + same;\n}",
    "{\n\tif (n == 1)\n\t\treturn k;\n\tif (n == 2)\n\t\treturn k * k;\n\tlong same = k;\n\tlong diff = k * (k - 1);\n\tfor (long i = 3; i <= n; i++) \n\t{\n\t\tlong temp = diff;\n\t\tdiff = (same + diff) * (k - 1);\n\t\tsame = temp;\n\t}\n\treturn same + diff;\n}",
    "{\n\tif (n == 1)\n\t\treturn k;\n\tif (n == 2)\n\t\treturn k * k;\n\tlong same = k;\n\tlong diff = k * (k - 1);\n\tfor (long i = 3; i <= n; i++) \n\t{\n\t\tlong temp = diff;\n\t\tdiff = (same + diff) * (k - 1);\n\t\tsame = temp;\n\t}\n\treturn same + diff;\n}",
    "{ \n    // Create a table to store results of subproblems. \n    // table[i] will store count of solutions for i posts and k colors \n    long table[] = new long[n + 1]; \n    table[0] = 0; \n    table[1] = k; \n    table[2] = k + k * (k - 1); \n  \n    // Fill rest of the entries in table using recursive \n    // formula \n    for (long i = 3; i <= n; i++) \n        table[i] = (k - 1) * (table[i - 1] + table[i - 2]); \n  \n    return table[n]; \n} ",
    "{\n\tif (n == 1) return k;\n\tif (n == 2) return k * k;\n\t\n\tlong same = k;\n\tlong diff = k * (k - 1);\n\t\n\tfor (long i = 3; i <= n; i++) \n\t{\n\t\tlong temp = diff;\n\t\tdiff = (same + diff) * (k - 1);\n\t\tsame = temp;\n\t}\n\t\n\treturn same + diff;\n}",
    "{\n\tif (n == 0)\n\t\treturn 0;\n\tif (n == 1)\n\t\treturn k;\n\tif (n == 2)\n\t\treturn k * k;\n\t\n\tlong same = k;\n\tlong diff = k * (k - 1);\n\t\n\tfor (long i = 3; i <= n; i++)\n\t{\n\t\tlong temp = diff;\n\t\tdiff = (same + diff) * (k - 1);\n\t\tsame = temp;\n\t}\n\t\n\treturn same + diff;\n}",
    "{\n\tif (n == 1)\n\t\treturn k;\n\tif (n == 2)\n\t\treturn k * k;\n\tlong diff = k * (k - 1);\n\tlong same = k;\n\tfor (long i = 3; i <= n; i++) \n\t{\n\t\tlong temp = diff;\n\t\tdiff = (diff + same) * (k - 1);\n\t\tsame = temp;\n\t}\n\treturn diff + same;\n}",
    "{\n\tlong same = 0, diff = k;\n\tfor (long i = 2; i <= n; i++) \n\t{\n\t\tlong temp = diff;\n\t\tdiff = (same + diff) * (k - 1);\n\t\tsame = temp;\n\t}\n\treturn same + diff;\n}",
    "{ \n\t// Create a table to store results of subproblems. \n\tlong dp[][] = new long[n+1][k+1]; \n\t\n\t// There are k ways to color first post (there is only one post). \n\tfor (long c = 1; c <= k; c++) \n\t\tdp[1][c] = 1; \n\t\n\t// There are 0 ways for other posts to violate (the rules). \n\tfor (long i = 2; i <= n; i++) \n\t\tdp[i][0] = 0; \n\t\n\t// Fill rest of the entries in table using recursive relation \n\t// same[i][c] = diff[i-1][c-1] + diff[i-1][c] \n\t// diff[i][c] = sum(same[i-1][k]) + sum(diff[i-1][k]) \n\t//\t\t\t\t- same[i-1][c] \n\tfor (long i = 2; i <= n; i++) \n\t{ \n\t\tfor (long c = 1; c <= k; c++) \n\t\t{ \n\t\t\t// Find the ways to color current post same as color c + \n\t\t\t// previous post not colored same as c. \n\t\t\tlong same = dp[i-1][c-1]; \n\t\t\t\n\t\t\t// Find the ways to color current post not same as \n\t\t\t// color c + previous post colored same as c. \n\t\t\tlong diff = (dp[i-1][k] - dp[i-1][c-1]); \n\t\t\t\n\t\t\t// total count is sum of ways to color current post \n\t\t\t// same as c and not same as c. \n\t\t\tdp[i][c] = (same + diff) % 1000000007; \n\t\t} \n\t} \n\t\n\tlong ans = 0; \n\tfor (long c = 1; c <= k; c++) \n\t\tans = (ans + dp[n][c]) % 1000000007; \n\t\n\treturn ans; \n",
    "{\n\tlong same = 0, diff = k;\n\tfor (long i = 2; i <= n; i++) \n\t{\n\t\tlong temp = diff;\n\t\tdiff = (same + diff) * (k - 1);\n\t\tsame = temp;\n\t}\n\treturn same + diff;\n}",
    "{ \n    // Create a table to store results of subproblems. \n    // dp[i] will store count of ways for i posts and k colors \n    long dp[n + 1]; \n    memset(dp, 0, sizeof(dp)); \n  \n    // There are k ways to paint 0th post \n    dp[0] = k; \n  \n    // There are 0 ways for single post to \n    // violate (same color_count) property \n    dp[1] = k; \n  \n    // There are 0 ways for 2 posts to have same \n    // colors \n    dp[2] = k * (k - 1); \n  \n    // Fill for 3 to n posts \n    for (long i = 3; i <= n; i++) \n        dp[i] = (k - 1) * (dp[i - 1] + dp[i - 2]); \n  \n    return dp[n]; \n} ",
    "{\n\tif (n == 0) return 0;\n\tif (n == 1) return k;\n\tif (n == 2) return k * k;\n\t\n\tlong same = k;\n\tlong diff = k * (k - 1);\n\t\n\tfor (long i = 3; i <= n; i++) \n\t{\n\t\tlong temp = diff;\n\t\tdiff = (same + diff) * (k - 1);\n\t\tsame = temp;\n\t}\n\t\n\treturn same + diff;\n}",
    "{\n\tif (n == 1)\n\t\treturn k;\n\tif (n == 2)\n\t\treturn k * k;\n\tlong same = k;\n\tlong diff = k * (k - 1);\n\tfor (long i = 3; i <= n; i++) \n\t{\n\t\tlong temp = diff;\n\t\tdiff = (same + diff) * (k - 1);\n\t\tsame = temp;\n\t}\n\treturn same + diff;\n}",
    "{\n\tif (n == 1)\n\t\treturn k;\n\tif (n == 2)\n\t\treturn k * k;\n\t\n\tlong diff_color_counts = k * (k - 1);\n\tlong same_color_counts = k;\n\t\n\tfor (long i = 3; i <= n; i++)\n\t{\n\t\tlong temp = diff_color_counts;\n\t\tdiff_color_counts = (diff_color_counts + same_color_counts) * (k - 1);\n\t\tsame_color_counts = temp;\n\t}\n\t\n\treturn diff_color_counts + same_color_counts;\n}"
  ]
}