{
  "name": "mbpp_447_cube_nums",
  "language": "d",
  "prompt": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_447_cube_nums.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, v; nums)\n\t{\n\t\tresult[i] = v * v * v;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = num * num * num;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1665517465,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tcubes[i] = num * num * num;\n\t}\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1665517465,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tcubes[i] = num * num * num;\n\t}\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1665517465,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubes = new long[nums.length];\n\tfor(int i = 0; i < nums.length; i++)\n\t{\n\t\tcubes[i] = nums[i] * nums[i] * nums[i];\n\t}\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t\tresult[i] = num * num * num;\n\treturn result;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1665517465,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, n; nums)\n\t{\n\t\tcubes[i] = n * n * n;\n\t}\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, v; nums)\n\t{\n\t\tcubes[i] = pow(v, 3);\n\t}\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1665517465,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tcubes[i] = num * num * num;\n\t}\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1665517465,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, n; nums)\n\t\tcubes[i] = n * n * n;\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1665517465,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tcubes[i] = num * num * num;\n\t}\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1665517465,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, n; nums)\n\t{\n\t\tcubes[i] = n * n * n;\n\t}\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tcubes[i] = num * num * num;\n\t}\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1665517465,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, v; nums)\n\t{\n\t\tcubes[i] = v * v * v;\n\t}\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = num * num * num;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1665517465,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tcubes[i] = num * num * num;\n\t}\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1665517465,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tcubes[i] = num * num * num;\n\t}\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1665517465,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubes = new long[nums.length];\n\tforeach (i, num; nums)\n\t{\n\t\tcubes[i] = num * num * num;\n\t}\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1665517465,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i,n; nums)\n\t{\n\t\tresult[i] = n*n*n;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, n; nums)\n\t{\n\t\tcubes[i] = pow(n, 3);\n\t}\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1665517465,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i,v;nums)\n\t{\n\t\tcubes[i] = v * v * v;\n\t}\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1666123274,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, v; nums)\n\t{\n\t\tcubes[i] = v * v * v;\n\t}\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tcubes[i] = num * num * num;\n\t}\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1665517465,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = num * num * num;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1665517465,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, v; nums)\n\t{\n\t\tcubes[i] = v * v * v;\n\t}\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tcubes[i] = num * num * num;\n\t}\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1665517465,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] result;\n\tresult = new long[nums.length];\n\tfor (int i = 0; i < nums.length; i++)\n\t{\n\t\tresult[i] = nums[i] * nums[i] * nums[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1666123274,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tcubes[i] = num * num * num;\n\t}\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1665517465,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, num; nums)\n\t\tcubes[i] = num * num * num;\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1666123274,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] result;\n\tresult = new long[nums.length];\n\tforeach(i, v; nums)\n\t{\n\t\tresult[i] = v * v * v;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1666123274,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, e; nums)\n\t{\n\t\tcubes[i] = e * e * e;\n\t}\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1666123274,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, v; nums)\n\t{\n\t\tcubes[i] = pow(v, 3);\n\t}\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1665517465,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tcubes[i] = num * num * num;\n\t}\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1665517465,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tcubes[i] = pow(num, 3);\n\t}\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1666123274,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tcubes[i] = num * num * num;\n\t}\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1665517465,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tcubes[i] = num * num * num;\n\t}\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1665517465,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, n; nums)\n\t{\n\t\tcubes[i] = n * n * n;\n\t}\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] result = new long[nums.length];\n\tforeach (i, num; nums) \n\t{\n\t\tresult[i] = num * num * num;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1666123274,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tcubes[i] = num * num * num;\n\t}\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1665517465,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tcubes[i] = num * num * num;\n\t}\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1665517465,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tcubes[i] = num * num * num;\n\t}\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1665517465,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tcubes[i] = num * num * num;\n\t}\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1665517465,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, n; nums)\n\t{\n\t\tcubes[i] = n * n * n;\n\t}\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tcubes[i] = pow(num, 3);\n\t}\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1666123274,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] result = new long[nums.length];\n\tfor (int i = 0; i < nums.length; i++) \n\t{\n\t\tresult[i] = pow(nums[i], 3);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1666123274,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, item; nums)\n\t{\n\t\tcubes[i] = item * item * item;\n\t}\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1666123274,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tcubes[i] = num * num * num;\n\t}\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1665517465,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tcubes[i] = num * num * num;\n\t}\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1665517465,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tcubes[i] = num * num * num;\n\t}\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1665517465,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, v; nums)\n\t\tresult[i] = v * v * v;\n\treturn result;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1666123274,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tcubes[i] = num * num * num;\n\t}\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1665517465,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tcubes[i] = num * num * num;\n\t}\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1665517465,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = pow(num, 3);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1666123274,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tcubes[i] = pow(num, 3);\n\t}\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1666123274,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, e; nums)\n\t{\n\t\tresult[i] = e * e * e;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1666123274,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, n; nums)\n\t{\n\t\tresult[i] = n * n * n;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1666123274,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tcubes[i] = num * num * num;\n\t}\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1665517465,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tcubes[i] = num * num * num;\n\t}\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1665517465,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = num * num * num;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1665517465,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubes = new long[nums.length];\n\tfor (int i = 0; i < nums.length; i++)\n\t{\n\t\tcubes[i] = nums[i] * nums[i] * nums[i];\n\t}\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1666123274,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] result;\n\tresult = new long[nums.length];\n\tforeach(i, val; nums)\n\t{\n\t\tresult[i] = val * val * val;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1666123274,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, n; nums)\n\t{\n\t\tcubes[i] = pow(n, 3);\n\t}\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1665517465,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, n; nums)\n\t{\n\t\tcubes[i] = n * n * n;\n\t}\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tcubes[i] = num * num * num;\n\t}\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1665517465,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, v; nums)\n\t{\n\t\tresult[i] = v * v * v;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, n; nums)\n\t{\n\t\tcubes[i] = n * n * n;\n\t}\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tcubes[i] = num * num * num;\n\t}\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1665517465,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tcubes[i] = num * num * num;\n\t}\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1665517465,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] result;\n\tforeach(num; nums)\n\t{\n\t\tresult ~= pow(num, 3);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1666123274,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tcubes[i] = num * num * num;\n\t}\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1665517465,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, v; nums)\n\t{\n\t\tresult[i] = v * v * v;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, n; nums)\n\t{\n\t\tcubes[i] = pow(n, 3);\n\t}\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1665517465,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tcubes[i] = num * num * num;\n\t}\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1665517465,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, v; nums)\n\t{\n\t\tresult[i] = v * v * v;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tcubes[i] = num * num * num;\n\t}\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1665517465,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tcubes[i] = num * num * num;\n\t}\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1665517465,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tcubes[i] = num * num * num;\n\t}\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1665517465,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tcubes[i] = num * num * num;\n\t}\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1665517465,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tcubes[i] = num * num * num;\n\t}\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1665517465,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, n; nums)\n\t{\n\t\tresult[i] = n * n * n;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1666123274,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tcubes[i] = num * num * num;\n\t}\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1665517465,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tcubes[i] = num * num * num;\n\t}\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1665517465,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tcubes[i] = num * num * num;\n\t}\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1665517465,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tcubes[i] = num * num * num;\n\t}\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1665517465,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, num; nums) \n\t{\n\t\tcubes[i] = pow(num, 3);\n\t}\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1666123274,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tcubes[i] = num * num * num;\n\t}\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1665517465,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tcubes[i] = num * num * num;\n\t}\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1665517465,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tcubes[i] = num * num * num;\n\t}\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1665517465,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tcubes[i] = num * num * num;\n\t}\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1665517465,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tcubes[i] = num * num * num;\n\t}\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1665517465,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, n; nums)\n\t{\n\t\tcubes[i] = n * n * n;\n\t}\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, v; nums)\n\t{\n\t\tresult[i] = v * v * v;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i,n; nums)\n\t{\n\t\tcubes[i] = n*n*n;\n\t}\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1666123274,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tcubes[i] = num * num * num;\n\t}\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1665517465,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, v; nums)\n\t{\n\t\tcubes[i] = v * v * v;\n\t}\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, item; nums)\n\t{\n\t\tcubes[i] = pow(item, 3);\n\t}\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1666123274,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = num * num * num;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1665517465,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tcubes[i] = num * num * num;\n\t}\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1665517465,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubes;\n\tforeach(num; nums)\n\t{\n\t\tcubes ~= num * num * num;\n\t}\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1666123274,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = num * num * num;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1665517465,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = num * num * num;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1665517465,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tcubes[i] = num * num * num;\n\t}\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1665517465,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tint len = nums.length;\n\tlong[] cubes = new long[len];\n\tforeach(i, ref num; nums)\n\t{\n\t\tcubes[i] = num * num * num;\n\t}\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1666123273,
      "stdout": "",
      "stderr": "/tmp/tmpaewe_7_3.d(9): Error: cannot implicitly convert expression `nums.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpaewe_7_3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tcubes[i] = num * num * num;\n\t}\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1665517465,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tcubes[i] = num * num * num;\n\t}\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1665517465,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, n; nums)\n\t{\n\t\tcubes[i] = n * n * n;\n\t}\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i,n; nums)\n\t{\n\t\tcubes[i] = n*n*n;\n\t}\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1666123274,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tcubes[i] = pow(num, 3);\n\t}\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1666123274,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tcubes[i] = num * num * num;\n\t}\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1665517465,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tcubes[i] = num * num * num;\n\t}\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1665517465,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tcubes[i] = num * num * num;\n\t}\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1665517465,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, v; nums)\n\t{\n\t\tcubes[i] = v * v * v;\n\t}\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tcubes[i] = num * num * num;\n\t}\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1665517465,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tcubes[i] = num * num * num;\n\t}\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1665517465,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, n; nums)\n\t{\n\t\tcubes[i] = n * n * n;\n\t}\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubes = new long[nums.length];\n\tfor (int i = 0; i < nums.length; i++)\n\t{\n\t\tcubes[i] = nums[i] * nums[i] * nums[i];\n\t}\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1666123274,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cube_nums = new long[nums.length];\n\tfor (int i = 0; i < nums.length; i++)\n\t{\n\t\tcube_nums[i] = nums[i] * nums[i] * nums[i];\n\t}\n\treturn cube_nums;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1666123274,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tcubes[i] = num * num * num;\n\t}\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1665517465,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tcubes[i] = num * num * num;\n\t}\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1665517465,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tcubes[i] = num * num * num;\n\t}\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1665517465,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tcubes[i] = num * num * num;\n\t}\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1665517465,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tcubes[i] = num * num * num;\n\t}\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1665517465,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tcubes[i] = num * num * num;\n\t}\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1665517465,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tcubes[i] = num * num * num;\n\t}\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1665517465,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, v; nums)\n\t{\n\t\tcubes[i] = pow(v, 3);\n\t}\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1665517465,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, item; nums)\n\t{\n\t\tresult[i] = item * item * item;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1666123274,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, v; nums)\n\t{\n\t\tcubes[i] = v * v * v;\n\t}\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, n; nums)\n\t{\n\t\tcubes[i] = n * n * n;\n\t}\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = num * num * num;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1665517465,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, v; nums)\n\t{\n\t\tresult[i] = v * v * v;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] result;\n\tresult = new long[nums.length];\n\t\n\tforeach(i, v; nums)\n\t{\n\t\tresult[i] = v * v * v;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1666123274,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums) \n\t{\n\t\tresult[i] = num * num * num;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1666123274,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tcubes[i] = num * num * num;\n\t}\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1665517465,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tcubes[i] = pow(num, 3);\n\t}\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1666123274,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tcubes[i] = num * num * num;\n\t}\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1665517465,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tcubes[i] = num * num * num;\n\t}\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1665517465,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = num * num * num;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1665517465,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tcubes[i] = num * num * num;\n\t}\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1665517465,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, v; nums)\n\t{\n\t\tcubes[i] = v*v*v;\n\t}\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1666123274,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tcubes[i] = num * num * num;\n\t}\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1665517465,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tcubes[i] = num * num * num;\n\t}\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1665517465,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = num * num * num;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1665517465,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tcubes[i] = num * num * num;\n\t}\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1665517465,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tcubes[i] = num * num * num;\n\t}\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1665517465,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubes = new long[nums.length];\n\tfor (int i = 0; i < nums.length; i++)\n\t{\n\t\tcubes[i] = nums[i] * nums[i] * nums[i];\n\t}\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1666123274,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tcubes[i] = num * num * num;\n\t}\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1665517465,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, ref num; nums)\n\t{\n\t\tcubes[i] = num * num * num;\n\t}\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1666123274,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tcubes[i] = num * num * num;\n\t}\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1665517465,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, ref n; nums)\n\t{\n\t\tcubes[i] = n * n * n;\n\t}\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1666123274,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tcubes[i] = num * num * num;\n\t}\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1665517465,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, v; nums)\n\t{\n\t\tresult[i] = v * v * v;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, num; nums) {\n\t\tcubes[i] = num * num * num;\n\t}\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1666123274,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tcubes[i] = num * num * num;\n\t}\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1665517465,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, item; nums)\n\t{\n\t\tresult[i] = item * item * item;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1666123274,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tcubes[i] = num * num * num;\n\t}\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1665517465,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tcubes[i] = num * num * num;\n\t}\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1665517465,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, num; nums) \n\t{\n\t\tcubes[i] = num * num * num;\n\t}\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1666123274,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tcubes[i] = num * num * num;\n\t}\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1665517465,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tcubes[i] = num * num * num;\n\t}\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1665517465,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tcubes[i] = num * num * num;\n\t}\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1665517465,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = num * num * num;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1665517465,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tcubes[i] = num * num * num;\n\t}\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1665517465,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, v; nums)\n\t{\n\t\tresult[i] = v * v * v;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] result;\n\tresult.length = nums.length;\n\tforeach(i, v; nums)\n\t{\n\t\tresult[i] = pow(v, 3);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1666123274,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, v; nums)\n\t{\n\t\tcubes[i] = pow(v, 3);\n\t}\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1665517465,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, ref n; nums)\n\t{\n\t\tcubes[i] = n * n * n;\n\t}\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1666123274,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i,v;nums)\n\t{\n\t\tcubes[i] = v*v*v;\n\t}\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1666123274,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] result;\n\tresult = new long[nums.length];\n\tfor (int i = 0; i < nums.length; i++)\n\t{\n\t\tresult[i] = pow(nums[i], 3);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1666123274,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, n; nums)\n\t{\n\t\tresult[i] = n * n * n;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1666123274,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tcubes[i] = num * num * num;\n\t}\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1665517465,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tcubes[i] = pow(num, 3);\n\t}\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1666123274,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, n; nums)\n\t{\n\t\tcubes[i] = n * n * n;\n\t}\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, v; nums)\n\t{\n\t\tcubes[i] = pow(v, 3);\n\t}\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1665517465,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, v; nums)\n\t{\n\t\tresult[i] = v * v * v;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = num * num * num;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1665517465,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, item; nums)\n\t{\n\t\tresult[i] = item * item * item;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1666123274,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tcubes[i] = pow(num, 3);\n\t}\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1666123274,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, v; nums)\n\t{\n\t\tresult[i] = pow(v, 3);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1666123274,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubed_nums = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tcubed_nums[i] = num * num * num;\n\t}\n\treturn cubed_nums;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1666123274,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, v; nums)\n\t{\n\t\tresult[i] = v * v * v;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tcubes[i] = num * num * num;\n\t}\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1665517465,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tcubes[i] = num * num * num;\n\t}\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1665517465,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubes = new long[nums.length];\n\t\n\tforeach(i, n; nums)\n\t{\n\t\tcubes[i] = n * n * n;\n\t}\n\t\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1666123274,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i,v;nums)\n\t{\n\t\tresult[i] = v*v*v;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1666123274,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tcubes[i] = num * num * num;\n\t}\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1665517465,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tcubes[i] = num * num * num;\n\t}\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1665517465,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tcubes[i] = num * num * num;\n\t}\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1665517465,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tcubes[i] = num * num * num;\n\t}\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1665517465,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tcubes[i] = num * num * num;\n\t}\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1665517465,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tcubes[i] = num * num * num;\n\t}\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1665517465,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tcubes[i] = num * num * num;\n\t}\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1665517465,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tcubes[i] = num * num * num;\n\t}\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1665517465,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = num * num * num;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1665517465,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, v; nums)\n\t{\n\t\tcubes[i] = v * v * v;\n\t}\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] result = new long[nums.length];\n\tforeach(i, v; nums)\n\t{\n\t\tresult[i] = v * v * v;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] result;\n\tresult = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tresult[i] = num * num * num;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1666123274,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tcubes[i] = num * num * num;\n\t}\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1665517465,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, num; nums)\n\t{\n\t\tcubes[i] = num * num * num;\n\t}\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1665517465,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubes = new long[nums.length];\n\tfor (int i = 0; i < nums.length; i++)\n\t{\n\t\tcubes[i] = nums[i] * nums[i] * nums[i];\n\t}\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1666123274,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find cubes of individual elements in an array.\n\t\n*/\nlong[] cube_nums(long[] nums) \n{\n\tlong[] cubes = new long[nums.length];\n\tforeach(i, n; nums)\n\t{\n\t\tcubes[i] = n * n * n;\n\t}\n\treturn cubes;\n}\nunittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}",
      "timestamp": 1665517466,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}