{
  "name": "mbpp_97_frequency_lists",
  "language": "d",
  "prompt": "import std.math;\n/*\n\n\tWrite a function to find frequency of each element in a flattened array of arrays, returned in an associative array.\n\t\n*/\nNullable!(long[long]) frequency_lists(long[][] list1) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_97_frequency_lists.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = frequency_lists;\n\n{\n        auto result = candidate([[1L, 2L, 3L, 2L], [4L, 5L, 6L, 2L], [7L, 8L, 9L, 5L]]);\n        assert(!result.isNull && result.get == [1L: 1L, 2L: 3L, 3L: 1L, 4L: 1L, 5L: 2L, 6L: 1L, 7L: 1L, 8L: 1L, 9L: 1L]);\n}\n\n{\n        auto result = candidate([[1L, 2L, 3L, 4L], [5L, 6L, 7L, 8L], [9L, 10L, 11L, 12L]]);\n        assert(!result.isNull && result.get == [1L: 1L, 2L: 1L, 3L: 1L, 4L: 1L, 5L: 1L, 6L: 1L, 7L: 1L, 8L: 1L, 9L: 1L, 10L: 1L, 11L: 1L, 12L: 1L]);\n}\n\n{\n        auto result = candidate([[20L, 30L, 40L, 17L], [18L, 16L, 14L, 13L], [10L, 20L, 30L, 40L]]);\n        assert(!result.isNull && result.get == [20L: 2L, 30L: 2L, 40L: 2L, 17L: 1L, 18L: 1L, 16L: 1L, 14L: 1L, 13L: 1L, 10L: 1L]);\n}\n\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tNullable!(long[long]) result;\n\tresult.isValid = false;\n\tif (list1.length == 0)\n\t\treturn result;\n\t\n\tresult.isValid = true;\n\tresult.value = new long[list1.length];\n\t\n\tforeach (i, list; list1)\n\t{\n\t\tforeach (j, elem; list)\n\t\t{\n\t\t\tresult.value[elem]++;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tauto result = new long[long][long](list1.length);\n\tforeach(i, list; list1)\n\t{\n\t\tforeach(j, element; list)\n\t\t{\n\t\t\tif(result[i].length == 0)\n\t\t\t{\n\t\t\t\tresult[i] ~= element;\n\t\t\t\tresult[i] ~= 1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbool found = false;\n\t\t\t\tforeach(k, element2; result[i])\n\t\t\t\t{\n\t\t\t\t\tif(k % 2 == 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tif(element2 == element)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tresult[i][k+1]++;\n\t\t\t\t\t\t\tfound = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(!found)\n\t\t\t\t{\n\t\t\t\t\tresult[i] ~= element;\n\t\t\t\t\tresult[i] ~= 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[long] result;\n\tforeach(list; list1)\n\t{\n\t\tforeach(element; list)\n\t\t{\n\t\t\tif(result[element] is null)\n\t\t\t{\n\t\t\t\tresult[element] = 1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult[element]++;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tauto result = new long[long][long];\n\tforeach(list2; list1)\n\t{\n\t\tforeach(element; list2)\n\t\t{\n\t\t\tif(result.count(element))\n\t\t\t{\n\t\t\t\tresult[element]++;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult[element] = 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[long] result = new long[long];\n\tforeach(long[] list; list1)\n\t{\n\t\tforeach(long i; list)\n\t\t{\n\t\t\tif(result.find(i) == null)\n\t\t\t\tresult[i] = 1;\n\t\t\telse\n\t\t\t\tresult[i]++;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tNullable!(long[long]) result = Nullable!(long[long])();\n\t\n\tforeach(list; list1)\n\t{\n\t\tforeach(element; list)\n\t\t{\n\t\t\tif(result.isNull)\n\t\t\t{\n\t\t\t\tresult = Nullable!(long[long])([element:1]);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(result.get.keys.canFind(element))\n\t\t\t\t{\n\t\t\t\t\tresult.get[element]++;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tresult.get[element] = 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tNullable!(long[long]) result;\n\tif (list1.length == 0)\n\t{\n\t\tresult = null;\n\t}\n\telse\n\t{\n\t\tresult = new long[long][long](list1.length);\n\t\tforeach (i, list; list1)\n\t\t{\n\t\t\tforeach (j, element; list)\n\t\t\t{\n\t\t\t\tif (result[i] is null)\n\t\t\t\t{\n\t\t\t\t\tresult[i] = new long[long](list.length);\n\t\t\t\t}\n\t\t\t\tif (result[i][j] is null)\n\t\t\t\t{\n\t\t\t\t\tresult[i][j] = 0;\n\t\t\t\t}\n\t\t\t\tresult[i][j] += 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tauto result = new long[long][];\n\tforeach (list; list1)\n\t{\n\t\tforeach (element; list)\n\t\t{\n\t\t\tif (result[element] is null)\n\t\t\t{\n\t\t\t\tresult[element] = 1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult[element]++;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[long] result;\n\tforeach(long[] list; list1)\n\t{\n\t\tforeach(long num; list)\n\t\t{\n\t\t\tif(result.find(num) == null)\n\t\t\t{\n\t\t\t\tresult[num] = 1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult[num]++;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[long] result;\n\tforeach(list; list1) \n\t{\n\t\tforeach(element; list) \n\t\t{\n\t\t\tif(element in result) \n\t\t\t{\n\t\t\t\tresult[element]++;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tresult[element] = 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[long] result = null;\n\tforeach(list; list1)\n\t{\n\t\tforeach(element; list)\n\t\t{\n\t\t\tif(result is null)\n\t\t\t{\n\t\t\t\tresult = [element:1];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(element in result)\n\t\t\t\t{\n\t\t\t\t\tresult[element]++;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tresult[element] = 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[long] result;\n\tforeach(long[] list; list1)\n\t{\n\t\tforeach(long element; list)\n\t\t{\n\t\t\tif(result.find(element) == null)\n\t\t\t{\n\t\t\t\tresult[element] = 1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult[element]++;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[long] result;\n\tforeach(list; list1)\n\t{\n\t\tforeach(elem; list)\n\t\t{\n\t\t\tif(result.count(elem) == 0)\n\t\t\t{\n\t\t\t\tresult[elem] = 1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult[elem]++;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[long] result;\n\tforeach(long[] list; list1)\n\t{\n\t\tforeach(long element; list)\n\t\t{\n\t\t\tif(element in result)\n\t\t\t{\n\t\t\t\tresult[element]++;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult[element] = 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[long] result;\n\tforeach(list; list1)\n\t{\n\t\tforeach(element; list)\n\t\t{\n\t\t\tif(result.count(element) == 0)\n\t\t\t{\n\t\t\t\tresult[element] = 1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult[element]++;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[long] frequency;\n\tforeach(list; list1)\n\t{\n\t\tforeach(element; list)\n\t\t{\n\t\t\tfrequency[element]++;\n\t\t}\n\t}\n\treturn frequency;\n}",
    "{\n\tNullable!(long[long]) result;\n\tlong[long] freq;\n\tlong i, j;\n\t\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list1[i])\n\t\t{\n\t\t\tif(freq.count(list1[i][j]) == 0)\n\t\t\t{\n\t\t\t\tfreq[list1[i][j]] = 1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tfreq[list1[i][j]] += 1;\n\t\t\t}\n\t\t}\n\t}\n\tresult = freq;\n\treturn result;\n}",
    "{\n\tlong[long] result;\n\tforeach(list; list1)\n\t{\n\t\tforeach(element; list)\n\t\t{\n\t\t\tif(result[element] is null)\n\t\t\t{\n\t\t\t\tresult[element] = 1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult[element]++;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[long] result;\n\tforeach(long[] list; list1)\n\t{\n\t\tforeach(long elem; list)\n\t\t{\n\t\t\tif(result.find(elem) == null)\n\t\t\t{\n\t\t\t\tresult[elem] = 1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult[elem]++;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[long] result;\n\tforeach (list; list1)\n\t{\n\t\tforeach (item; list)\n\t\t{\n\t\t\tif (result.find(item) is null)\n\t\t\t{\n\t\t\t\tresult[item] = 1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult[item] += 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}"
  ]
}